
hands_on_main_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8c0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012258  0800aa70  0800aa70  0000ba70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ccc8  0801ccc8  0002114c  2**0
                  CONTENTS
  4 .ARM          00000008  0801ccc8  0801ccc8  0001dcc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ccd0  0801ccd0  0002114c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ccd0  0801ccd0  0001dcd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ccd4  0801ccd4  0001dcd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000314c  20000000  0801ccd8  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ca0  20003150  0801fe24  00021150  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004df0  0801fe24  00021df0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002114c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003bb69  00000000  00000000  0002117c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007355  00000000  00000000  0005cce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00013f82  00000000  00000000  0006403a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016e0  00000000  00000000  00077fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002881  00000000  00000000  000796a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000304e4  00000000  00000000  0007bf21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003515e  00000000  00000000  000ac405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012192c  00000000  00000000  000e1563  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  00202e8f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000050d8  00000000  00000000  00202f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00208024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0000982c  00000000  00000000  00208085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000012a0  00000000  00000000  002118b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20003150 	.word	0x20003150
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800aa58 	.word	0x0800aa58

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20003154 	.word	0x20003154
 80001ec:	0800aa58 	.word	0x0800aa58

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000eb8:	b510      	push	{r4, lr}

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000eba:	4826      	ldr	r0, [pc, #152]	@ (8000f54 <MX_ADC1_Init+0x9c>)
 8000ebc:	4a26      	ldr	r2, [pc, #152]	@ (8000f58 <MX_ADC1_Init+0xa0>)
 8000ebe:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000ec0:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
  ADC_MultiModeTypeDef multimode = {0};
 8000ec4:	2300      	movs	r3, #0
{
 8000ec6:	b08a      	sub	sp, #40	@ 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000ec8:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eca:	2204      	movs	r2, #4
 8000ecc:	e9c0 3204 	strd	r3, r2, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 8000ed0:	2201      	movs	r2, #1
  ADC_MultiModeTypeDef multimode = {0};
 8000ed2:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000eda:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000ede:	e9cd 3307 	strd	r3, r3, [sp, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ee2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee6:	9309      	str	r3, [sp, #36]	@ 0x24
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ee8:	8303      	strh	r3, [r0, #24]
  hadc1.Init.NbrOfConversion = 1;
 8000eea:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000eec:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef0:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ef4:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ef6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000efa:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000efe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f02:	e9c0 230a 	strd	r2, r3, [r0, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f06:	f002 fe99 	bl	8003c3c <HAL_ADC_Init>
 8000f0a:	b9c0      	cbnz	r0, 8000f3e <MX_ADC1_Init+0x86>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f0c:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f0e:	4811      	ldr	r0, [pc, #68]	@ (8000f54 <MX_ADC1_Init+0x9c>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f10:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f12:	a901      	add	r1, sp, #4
 8000f14:	f003 fc44 	bl	80047a0 <HAL_ADCEx_MultiModeConfigChannel>
 8000f18:	b9c0      	cbnz	r0, 8000f4c <MX_ADC1_Init+0x94>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f1a:	4a10      	ldr	r2, [pc, #64]	@ (8000f5c <MX_ADC1_Init+0xa4>)
 8000f1c:	9204      	str	r2, [sp, #16]
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f1e:	227f      	movs	r2, #127	@ 0x7f
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f20:	2300      	movs	r3, #0
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f22:	2406      	movs	r4, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f24:	9207      	str	r2, [sp, #28]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f26:	480b      	ldr	r0, [pc, #44]	@ (8000f54 <MX_ADC1_Init+0x9c>)
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f28:	2204      	movs	r2, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2a:	a904      	add	r1, sp, #16
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f2c:	e9cd 4305 	strd	r4, r3, [sp, #20]
  sConfig.Offset = 0;
 8000f30:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f34:	f002 ffac 	bl	8003e90 <HAL_ADC_ConfigChannel>
 8000f38:	b920      	cbnz	r0, 8000f44 <MX_ADC1_Init+0x8c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f3a:	b00a      	add	sp, #40	@ 0x28
 8000f3c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f3e:	f001 fa25 	bl	800238c <Error_Handler>
 8000f42:	e7e3      	b.n	8000f0c <MX_ADC1_Init+0x54>
    Error_Handler();
 8000f44:	f001 fa22 	bl	800238c <Error_Handler>
}
 8000f48:	b00a      	add	sp, #40	@ 0x28
 8000f4a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f4c:	f001 fa1e 	bl	800238c <Error_Handler>
 8000f50:	e7e3      	b.n	8000f1a <MX_ADC1_Init+0x62>
 8000f52:	bf00      	nop
 8000f54:	200031b4 	.word	0x200031b4
 8000f58:	50040000 	.word	0x50040000
 8000f5c:	14f00020 	.word	0x14f00020

08000f60 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f60:	b570      	push	{r4, r5, r6, lr}
 8000f62:	4604      	mov	r4, r0
 8000f64:	b0aa      	sub	sp, #168	@ 0xa8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f66:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f68:	228c      	movs	r2, #140	@ 0x8c
 8000f6a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000f70:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000f74:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f76:	f007 fe3c 	bl	8008bf2 <memset>
  if(adcHandle->Instance==ADC1)
 8000f7a:	4b27      	ldr	r3, [pc, #156]	@ (8001018 <HAL_ADC_MspInit+0xb8>)
 8000f7c:	6822      	ldr	r2, [r4, #0]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d001      	beq.n	8000f86 <HAL_ADC_MspInit+0x26>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f82:	b02a      	add	sp, #168	@ 0xa8
 8000f84:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000f8a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f8e:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f90:	9207      	str	r2, [sp, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000f92:	9326      	str	r3, [sp, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f94:	f004 fd08 	bl	80059a8 <HAL_RCCEx_PeriphCLKConfig>
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	d136      	bne.n	800100a <HAL_ADC_MspInit+0xaa>
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800101c <HAL_ADC_MspInit+0xbc>)
    hdma_adc1.Instance = DMA1_Channel1;
 8000f9e:	4d20      	ldr	r5, [pc, #128]	@ (8001020 <HAL_ADC_MspInit+0xc0>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fa0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fa2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000fa6:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000fa8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000faa:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8000fae:	9200      	str	r2, [sp, #0]
 8000fb0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fb4:	f042 0201 	orr.w	r2, r2, #1
 8000fb8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbc:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fc4:	2201      	movs	r2, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fca:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fce:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd4:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd6:	f003 fdeb 	bl	8004bb0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000fda:	4a12      	ldr	r2, [pc, #72]	@ (8001024 <HAL_ADC_MspInit+0xc4>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fdc:	2380      	movs	r3, #128	@ 0x80
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000fde:	e9c5 2600 	strd	r2, r6, [r5]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fe2:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fe4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fe8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fec:	e9c5 2305 	strd	r2, r3, [r5, #20]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ff0:	4628      	mov	r0, r5
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ff2:	2320      	movs	r3, #32
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff4:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ff8:	e9c5 3607 	strd	r3, r6, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ffc:	f003 fcb4 	bl	8004968 <HAL_DMA_Init>
 8001000:	b930      	cbnz	r0, 8001010 <HAL_ADC_MspInit+0xb0>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001002:	6525      	str	r5, [r4, #80]	@ 0x50
 8001004:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8001006:	b02a      	add	sp, #168	@ 0xa8
 8001008:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800100a:	f001 f9bf 	bl	800238c <Error_Handler>
 800100e:	e7c5      	b.n	8000f9c <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 8001010:	f001 f9bc 	bl	800238c <Error_Handler>
 8001014:	e7f5      	b.n	8001002 <HAL_ADC_MspInit+0xa2>
 8001016:	bf00      	nop
 8001018:	50040000 	.word	0x50040000
 800101c:	40021000 	.word	0x40021000
 8001020:	2000316c 	.word	0x2000316c
 8001024:	40020008 	.word	0x40020008

08001028 <send_spectrogram>:
		DEBUG_PRINT("Packet counter overflow.\r\n");
		Error_Handler();
	}
}

static void send_spectrogram() {
 8001028:	b510      	push	{r4, lr}
 800102a:	4918      	ldr	r1, [pc, #96]	@ (800108c <send_spectrogram+0x64>)
 800102c:	f5ad 7d4e 	sub.w	sp, sp, #824	@ 0x338
	for (size_t i=0; i<N_MELVECS; i++) {
 8001030:	466b      	mov	r3, sp
 8001032:	f50d 7e48 	add.w	lr, sp, #800	@ 0x320
static void send_spectrogram() {
 8001036:	4608      	mov	r0, r1
 8001038:	f103 0c28 	add.w	ip, r3, #40	@ 0x28
			(packet+PACKET_HEADER_LENGTH)[(i*MELVEC_LENGTH+j)*2]   = mel_vectors[i][j] >> 8;
 800103c:	f930 2f02 	ldrsh.w	r2, [r0, #2]!
			(packet+PACKET_HEADER_LENGTH)[(i*MELVEC_LENGTH+j)*2+1] = mel_vectors[i][j] & 0xFF;
 8001040:	725a      	strb	r2, [r3, #9]
			(packet+PACKET_HEADER_LENGTH)[(i*MELVEC_LENGTH+j)*2]   = mel_vectors[i][j] >> 8;
 8001042:	1212      	asrs	r2, r2, #8
 8001044:	721a      	strb	r2, [r3, #8]
		for (size_t j=0; j<MELVEC_LENGTH; j++) {
 8001046:	3302      	adds	r3, #2
 8001048:	4563      	cmp	r3, ip
 800104a:	d1f7      	bne.n	800103c <send_spectrogram+0x14>
	for (size_t i=0; i<N_MELVECS; i++) {
 800104c:	459e      	cmp	lr, r3
 800104e:	f101 0128 	add.w	r1, r1, #40	@ 0x28
 8001052:	d1f0      	bne.n	8001036 <send_spectrogram+0xe>
	make_packet(packet, PAYLOAD_LENGTH, 0, *packet_cnt);
 8001054:	4c0e      	ldr	r4, [pc, #56]	@ (8001090 <send_spectrogram+0x68>)
 8001056:	2200      	movs	r2, #0
 8001058:	6823      	ldr	r3, [r4, #0]
 800105a:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800105e:	4668      	mov	r0, sp
 8001060:	f001 fa96 	bl	8002590 <make_packet>
	*packet_cnt += 1;
 8001064:	6823      	ldr	r3, [r4, #0]
 8001066:	3301      	adds	r3, #1
 8001068:	6023      	str	r3, [r4, #0]
	if (*packet_cnt == 0) {
 800106a:	b163      	cbz	r3, 8001086 <send_spectrogram+0x5e>
//	start_cycle_count();
	encode_packet(packet, &packet_cnt);
//	stop_cycle_count("Encode packet");

//	start_cycle_count();
	S2LP_Send(packet, PACKET_LENGTH);
 800106c:	f44f 714e 	mov.w	r1, #824	@ 0x338
 8001070:	4668      	mov	r0, sp
 8001072:	f001 fc15 	bl	80028a0 <S2LP_Send>
//	stop_cycle_count("Radio WFI");

	start_cycle_count();
 8001076:	f002 fd59 	bl	8003b2c <start_cycle_count>
	stop_cycle_count("Send packet");
 800107a:	4806      	ldr	r0, [pc, #24]	@ (8001094 <send_spectrogram+0x6c>)
 800107c:	f002 fd58 	bl	8003b30 <stop_cycle_count>

//	print_encoded_packet(packet);
}
 8001080:	f50d 7d4e 	add.w	sp, sp, #824	@ 0x338
 8001084:	bd10      	pop	{r4, pc}
		Error_Handler();
 8001086:	f001 f981 	bl	800238c <Error_Handler>
 800108a:	e7ef      	b.n	800106c <send_spectrogram+0x44>
 800108c:	20003222 	.word	0x20003222
 8001090:	20003220 	.word	0x20003220
 8001094:	0800aa70 	.word	0x0800aa70

08001098 <StartADCAcq>:
int StartADCAcq(int32_t n_bufs) {
 8001098:	b508      	push	{r3, lr}
	cur_melvec = 0;
 800109a:	4a07      	ldr	r2, [pc, #28]	@ (80010b8 <StartADCAcq+0x20>)
	rem_n_bufs = n_bufs;
 800109c:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <StartADCAcq+0x24>)
	cur_melvec = 0;
 800109e:	2100      	movs	r1, #0
	rem_n_bufs = n_bufs;
 80010a0:	6018      	str	r0, [r3, #0]
	cur_melvec = 0;
 80010a2:	7011      	strb	r1, [r2, #0]
	if (rem_n_bufs != 0) {
 80010a4:	6818      	ldr	r0, [r3, #0]
 80010a6:	b900      	cbnz	r0, 80010aa <StartADCAcq+0x12>
}
 80010a8:	bd08      	pop	{r3, pc}
		return HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADCDoubleBuf, 2*ADC_BUF_SIZE);
 80010aa:	4905      	ldr	r1, [pc, #20]	@ (80010c0 <StartADCAcq+0x28>)
 80010ac:	4805      	ldr	r0, [pc, #20]	@ (80010c4 <StartADCAcq+0x2c>)
 80010ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010b2:	f003 fa2b 	bl	800450c <HAL_ADC_Start_DMA>
}
 80010b6:	bd08      	pop	{r3, pc}
 80010b8:	20003544 	.word	0x20003544
 80010bc:	2000321c 	.word	0x2000321c
 80010c0:	2000354c 	.word	0x2000354c
 80010c4:	200031b4 	.word	0x200031b4

080010c8 <IsADCFinished>:
	return (rem_n_bufs == 0);
 80010c8:	4b02      	ldr	r3, [pc, #8]	@ (80010d4 <IsADCFinished+0xc>)
 80010ca:	6818      	ldr	r0, [r3, #0]
}
 80010cc:	fab0 f080 	clz	r0, r0
 80010d0:	0940      	lsrs	r0, r0, #5
 80010d2:	4770      	bx	lr
 80010d4:	2000321c 	.word	0x2000321c

080010d8 <HAL_ADC_ConvCpltCallback>:
		send_spectrogram();
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80010d8:	b570      	push	{r4, r5, r6, lr}
	if (rem_n_bufs != -1) {
 80010da:	4c18      	ldr	r4, [pc, #96]	@ (800113c <HAL_ADC_ConvCpltCallback+0x64>)
 80010dc:	6823      	ldr	r3, [r4, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	d002      	beq.n	80010e8 <HAL_ADC_ConvCpltCallback+0x10>
		rem_n_bufs--;
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	6023      	str	r3, [r4, #0]
	if (rem_n_bufs == 0) {
 80010e8:	6823      	ldr	r3, [r4, #0]
 80010ea:	b1eb      	cbz	r3, 8001128 <HAL_ADC_ConvCpltCallback+0x50>
	} else if (ADCDataRdy[1-buf_cplt]) {
 80010ec:	4e14      	ldr	r6, [pc, #80]	@ (8001140 <HAL_ADC_ConvCpltCallback+0x68>)
 80010ee:	7833      	ldrb	r3, [r6, #0]
 80010f0:	b9bb      	cbnz	r3, 8001122 <HAL_ADC_ConvCpltCallback+0x4a>
	Spectrogram_Compute((q15_t *)ADCData[buf_cplt], mel_vectors[cur_melvec]);
 80010f2:	4d14      	ldr	r5, [pc, #80]	@ (8001144 <HAL_ADC_ConvCpltCallback+0x6c>)
	Spectrogram_Format((q15_t *)ADCData[buf_cplt]);
 80010f4:	4814      	ldr	r0, [pc, #80]	@ (8001148 <HAL_ADC_ConvCpltCallback+0x70>)
	ADCDataRdy[buf_cplt] = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	7073      	strb	r3, [r6, #1]
	Spectrogram_Format((q15_t *)ADCData[buf_cplt]);
 80010fa:	f002 fb09 	bl	8003710 <Spectrogram_Format>
	Spectrogram_Compute((q15_t *)ADCData[buf_cplt], mel_vectors[cur_melvec]);
 80010fe:	782b      	ldrb	r3, [r5, #0]
 8001100:	4912      	ldr	r1, [pc, #72]	@ (800114c <HAL_ADC_ConvCpltCallback+0x74>)
 8001102:	4811      	ldr	r0, [pc, #68]	@ (8001148 <HAL_ADC_ConvCpltCallback+0x70>)
 8001104:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001108:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800110c:	f002 fb22 	bl	8003754 <Spectrogram_Compute>
	cur_melvec++;
 8001110:	782b      	ldrb	r3, [r5, #0]
 8001112:	3301      	adds	r3, #1
 8001114:	b2db      	uxtb	r3, r3
	ADCDataRdy[buf_cplt] = 0;
 8001116:	2200      	movs	r2, #0
	cur_melvec++;
 8001118:	702b      	strb	r3, [r5, #0]
	ADCDataRdy[buf_cplt] = 0;
 800111a:	7072      	strb	r2, [r6, #1]
	if (rem_n_bufs == 0) {
 800111c:	6823      	ldr	r3, [r4, #0]
 800111e:	b143      	cbz	r3, 8001132 <HAL_ADC_ConvCpltCallback+0x5a>
	ADC_Callback(1);
}
 8001120:	bd70      	pop	{r4, r5, r6, pc}
		Error_Handler();
 8001122:	f001 f933 	bl	800238c <Error_Handler>
 8001126:	e7e4      	b.n	80010f2 <HAL_ADC_ConvCpltCallback+0x1a>
	HAL_ADC_Stop_DMA(&hadc1);
 8001128:	4809      	ldr	r0, [pc, #36]	@ (8001150 <HAL_ADC_ConvCpltCallback+0x78>)
 800112a:	4e05      	ldr	r6, [pc, #20]	@ (8001140 <HAL_ADC_ConvCpltCallback+0x68>)
 800112c:	f003 faa4 	bl	8004678 <HAL_ADC_Stop_DMA>
}
 8001130:	e7df      	b.n	80010f2 <HAL_ADC_ConvCpltCallback+0x1a>
}
 8001132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		send_spectrogram();
 8001136:	f7ff bf77 	b.w	8001028 <send_spectrogram>
 800113a:	bf00      	nop
 800113c:	2000321c 	.word	0x2000321c
 8001140:	20003548 	.word	0x20003548
 8001144:	20003544 	.word	0x20003544
 8001148:	2000394c 	.word	0x2000394c
 800114c:	20003224 	.word	0x20003224
 8001150:	200031b4 	.word	0x200031b4

08001154 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001154:	b570      	push	{r4, r5, r6, lr}
	if (rem_n_bufs != -1) {
 8001156:	4c18      	ldr	r4, [pc, #96]	@ (80011b8 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8001158:	6823      	ldr	r3, [r4, #0]
 800115a:	3301      	adds	r3, #1
 800115c:	d002      	beq.n	8001164 <HAL_ADC_ConvHalfCpltCallback+0x10>
		rem_n_bufs--;
 800115e:	6823      	ldr	r3, [r4, #0]
 8001160:	3b01      	subs	r3, #1
 8001162:	6023      	str	r3, [r4, #0]
	if (rem_n_bufs == 0) {
 8001164:	6823      	ldr	r3, [r4, #0]
 8001166:	b1eb      	cbz	r3, 80011a4 <HAL_ADC_ConvHalfCpltCallback+0x50>
	} else if (ADCDataRdy[1-buf_cplt]) {
 8001168:	4e14      	ldr	r6, [pc, #80]	@ (80011bc <HAL_ADC_ConvHalfCpltCallback+0x68>)
 800116a:	7873      	ldrb	r3, [r6, #1]
 800116c:	b9bb      	cbnz	r3, 800119e <HAL_ADC_ConvHalfCpltCallback+0x4a>
	Spectrogram_Compute((q15_t *)ADCData[buf_cplt], mel_vectors[cur_melvec]);
 800116e:	4d14      	ldr	r5, [pc, #80]	@ (80011c0 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
	Spectrogram_Format((q15_t *)ADCData[buf_cplt]);
 8001170:	4814      	ldr	r0, [pc, #80]	@ (80011c4 <HAL_ADC_ConvHalfCpltCallback+0x70>)
	ADCDataRdy[buf_cplt] = 1;
 8001172:	2301      	movs	r3, #1
 8001174:	7033      	strb	r3, [r6, #0]
	Spectrogram_Format((q15_t *)ADCData[buf_cplt]);
 8001176:	f002 facb 	bl	8003710 <Spectrogram_Format>
	Spectrogram_Compute((q15_t *)ADCData[buf_cplt], mel_vectors[cur_melvec]);
 800117a:	782b      	ldrb	r3, [r5, #0]
 800117c:	4912      	ldr	r1, [pc, #72]	@ (80011c8 <HAL_ADC_ConvHalfCpltCallback+0x74>)
 800117e:	4811      	ldr	r0, [pc, #68]	@ (80011c4 <HAL_ADC_ConvHalfCpltCallback+0x70>)
 8001180:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001184:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8001188:	f002 fae4 	bl	8003754 <Spectrogram_Compute>
	cur_melvec++;
 800118c:	782b      	ldrb	r3, [r5, #0]
 800118e:	3301      	adds	r3, #1
 8001190:	b2db      	uxtb	r3, r3
	ADCDataRdy[buf_cplt] = 0;
 8001192:	2200      	movs	r2, #0
	cur_melvec++;
 8001194:	702b      	strb	r3, [r5, #0]
	ADCDataRdy[buf_cplt] = 0;
 8001196:	7032      	strb	r2, [r6, #0]
	if (rem_n_bufs == 0) {
 8001198:	6823      	ldr	r3, [r4, #0]
 800119a:	b143      	cbz	r3, 80011ae <HAL_ADC_ConvHalfCpltCallback+0x5a>
	ADC_Callback(0);
}
 800119c:	bd70      	pop	{r4, r5, r6, pc}
		Error_Handler();
 800119e:	f001 f8f5 	bl	800238c <Error_Handler>
 80011a2:	e7e4      	b.n	800116e <HAL_ADC_ConvHalfCpltCallback+0x1a>
	HAL_ADC_Stop_DMA(&hadc1);
 80011a4:	4809      	ldr	r0, [pc, #36]	@ (80011cc <HAL_ADC_ConvHalfCpltCallback+0x78>)
 80011a6:	4e05      	ldr	r6, [pc, #20]	@ (80011bc <HAL_ADC_ConvHalfCpltCallback+0x68>)
 80011a8:	f003 fa66 	bl	8004678 <HAL_ADC_Stop_DMA>
}
 80011ac:	e7df      	b.n	800116e <HAL_ADC_ConvHalfCpltCallback+0x1a>
}
 80011ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		send_spectrogram();
 80011b2:	f7ff bf39 	b.w	8001028 <send_spectrogram>
 80011b6:	bf00      	nop
 80011b8:	2000321c 	.word	0x2000321c
 80011bc:	20003548 	.word	0x20003548
 80011c0:	20003544 	.word	0x20003544
 80011c4:	2000354c 	.word	0x2000354c
 80011c8:	20003224 	.word	0x20003224
 80011cc:	200031b4 	.word	0x200031b4

080011d0 <MixColumns>:
      for (j = 0; j < BC; j++)
        a[i][j] = tmp[j];
    }
  }
}
void MixColumns(word8 a[4][MAXBC]) {
 80011d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 80011d4:	4bd1      	ldr	r3, [pc, #836]	@ (800151c <MixColumns+0x34c>)
   */
  word8 b[4][MAXBC];
  int i, j;
  for (j = 0; j < BC; j++)
    for (i = 0; i < 4; i++)
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 80011d6:	7801      	ldrb	r1, [r0, #0]
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 80011d8:	789a      	ldrb	r2, [r3, #2]
 80011da:	f893 b003 	ldrb.w	fp, [r3, #3]
void MixColumns(word8 a[4][MAXBC]) {
 80011de:	b08d      	sub	sp, #52	@ 0x34
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 80011e0:	9200      	str	r2, [sp, #0]
  if (a && b)
 80011e2:	2900      	cmp	r1, #0
 80011e4:	f000 8286 	beq.w	80016f4 <MixColumns+0x524>
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 80011e8:	5c5d      	ldrb	r5, [r3, r1]
 80011ea:	4ccd      	ldr	r4, [pc, #820]	@ (8001520 <MixColumns+0x350>)
 80011ec:	4415      	add	r5, r2
 80011ee:	fba4 6405 	umull	r6, r4, r4, r5
 80011f2:	09e4      	lsrs	r4, r4, #7
 80011f4:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 80011f8:	1b2d      	subs	r5, r5, r4
 80011fa:	4cca      	ldr	r4, [pc, #808]	@ (8001524 <MixColumns+0x354>)
 80011fc:	f814 e005 	ldrb.w	lr, [r4, r5]
                a[(i + 2) % 4][j] ^ a[(i + 3) % 4][j];
 8001200:	7e04      	ldrb	r4, [r0, #24]
 8001202:	7c05      	ldrb	r5, [r0, #16]
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 8001204:	f890 c008 	ldrb.w	ip, [r0, #8]
  if (a && b)
 8001208:	ea85 0904 	eor.w	r9, r5, r4
 800120c:	f1bc 0f00 	cmp.w	ip, #0
 8001210:	f000 826c 	beq.w	80016ec <MixColumns+0x51c>
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 8001214:	f813 800c 	ldrb.w	r8, [r3, ip]
 8001218:	9a00      	ldr	r2, [sp, #0]
 800121a:	4ec1      	ldr	r6, [pc, #772]	@ (8001520 <MixColumns+0x350>)
 800121c:	eb08 0a0b 	add.w	sl, r8, fp
 8001220:	4442      	add	r2, r8
 8001222:	fba6 870a 	umull	r8, r7, r6, sl
 8001226:	fba6 8602 	umull	r8, r6, r6, r2
 800122a:	09ff      	lsrs	r7, r7, #7
 800122c:	09f6      	lsrs	r6, r6, #7
 800122e:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 8001232:	ebc7 2707 	rsb	r7, r7, r7, lsl #8
 8001236:	eba2 0806 	sub.w	r8, r2, r6
 800123a:	ebaa 0707 	sub.w	r7, sl, r7
 800123e:	4eb9      	ldr	r6, [pc, #740]	@ (8001524 <MixColumns+0x354>)
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 8001240:	5df7      	ldrb	r7, [r6, r7]
 8001242:	f816 6008 	ldrb.w	r6, [r6, r8]
 8001246:	ea89 0707 	eor.w	r7, r9, r7
 800124a:	ea8e 0e07 	eor.w	lr, lr, r7
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 800124e:	4066      	eors	r6, r4
 8001250:	404e      	eors	r6, r1
 8001252:	f88d e010 	strb.w	lr, [sp, #16]
  if (a && b)
 8001256:	b2f6      	uxtb	r6, r6
 8001258:	2d00      	cmp	r5, #0
 800125a:	f000 8245 	beq.w	80016e8 <MixColumns+0x518>
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 800125e:	f813 e005 	ldrb.w	lr, [r3, r5]
 8001262:	4faf      	ldr	r7, [pc, #700]	@ (8001520 <MixColumns+0x350>)
 8001264:	9a00      	ldr	r2, [sp, #0]
 8001266:	eb0e 080b 	add.w	r8, lr, fp
 800126a:	fba7 a908 	umull	sl, r9, r7, r8
 800126e:	ea4f 19d9 	mov.w	r9, r9, lsr #7
 8001272:	4496      	add	lr, r2
 8001274:	ebc9 2909 	rsb	r9, r9, r9, lsl #8
 8001278:	eba8 0809 	sub.w	r8, r8, r9
 800127c:	fba7 970e 	umull	r9, r7, r7, lr
 8001280:	09ff      	lsrs	r7, r7, #7
 8001282:	ebc7 2707 	rsb	r7, r7, r7, lsl #8
 8001286:	ebae 0e07 	sub.w	lr, lr, r7
 800128a:	4fa6      	ldr	r7, [pc, #664]	@ (8001524 <MixColumns+0x354>)
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 800128c:	f817 8008 	ldrb.w	r8, [r7, r8]
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 8001290:	f817 700e 	ldrb.w	r7, [r7, lr]
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 8001294:	ea86 0608 	eor.w	r6, r6, r8
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 8001298:	f88d 6018 	strb.w	r6, [sp, #24]
  if (a && b)
 800129c:	ea81 0e0c 	eor.w	lr, r1, ip
 80012a0:	b1cc      	cbz	r4, 80012d6 <MixColumns+0x106>
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 80012a2:	5d1e      	ldrb	r6, [r3, r4]
 80012a4:	4c9e      	ldr	r4, [pc, #632]	@ (8001520 <MixColumns+0x350>)
 80012a6:	9a00      	ldr	r2, [sp, #0]
 80012a8:	eb06 080b 	add.w	r8, r6, fp
 80012ac:	fba4 a908 	umull	sl, r9, r4, r8
 80012b0:	ea4f 19d9 	mov.w	r9, r9, lsr #7
 80012b4:	4416      	add	r6, r2
 80012b6:	ebc9 2909 	rsb	r9, r9, r9, lsl #8
 80012ba:	eba8 0809 	sub.w	r8, r8, r9
 80012be:	fba4 9406 	umull	r9, r4, r4, r6
 80012c2:	09e4      	lsrs	r4, r4, #7
 80012c4:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 80012c8:	1b36      	subs	r6, r6, r4
 80012ca:	4c96      	ldr	r4, [pc, #600]	@ (8001524 <MixColumns+0x354>)
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 80012cc:	f814 8008 	ldrb.w	r8, [r4, r8]
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 80012d0:	5da4      	ldrb	r4, [r4, r6]
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 80012d2:	ea8e 0e08 	eor.w	lr, lr, r8
 80012d6:	ea87 070e 	eor.w	r7, r7, lr
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 80012da:	f88d 7020 	strb.w	r7, [sp, #32]
  if (a && b)
 80012de:	b151      	cbz	r1, 80012f6 <MixColumns+0x126>
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 80012e0:	5c5e      	ldrb	r6, [r3, r1]
 80012e2:	498f      	ldr	r1, [pc, #572]	@ (8001520 <MixColumns+0x350>)
 80012e4:	445e      	add	r6, fp
 80012e6:	fba1 7106 	umull	r7, r1, r1, r6
 80012ea:	09c9      	lsrs	r1, r1, #7
 80012ec:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 80012f0:	1a76      	subs	r6, r6, r1
 80012f2:	498c      	ldr	r1, [pc, #560]	@ (8001524 <MixColumns+0x354>)
 80012f4:	5d89      	ldrb	r1, [r1, r6]
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 80012f6:	ea85 050c 	eor.w	r5, r5, ip
 80012fa:	406c      	eors	r4, r5
 80012fc:	4061      	eors	r1, r4
 80012fe:	9101      	str	r1, [sp, #4]
 8001300:	7841      	ldrb	r1, [r0, #1]
  if (a && b)
 8001302:	2900      	cmp	r1, #0
 8001304:	f000 81ee 	beq.w	80016e4 <MixColumns+0x514>
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 8001308:	5c5d      	ldrb	r5, [r3, r1]
 800130a:	9a00      	ldr	r2, [sp, #0]
 800130c:	4c84      	ldr	r4, [pc, #528]	@ (8001520 <MixColumns+0x350>)
 800130e:	4415      	add	r5, r2
 8001310:	fba4 6405 	umull	r6, r4, r4, r5
 8001314:	09e4      	lsrs	r4, r4, #7
 8001316:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 800131a:	1b2d      	subs	r5, r5, r4
 800131c:	4c81      	ldr	r4, [pc, #516]	@ (8001524 <MixColumns+0x354>)
 800131e:	f814 e005 	ldrb.w	lr, [r4, r5]
                a[(i + 2) % 4][j] ^ a[(i + 3) % 4][j];
 8001322:	7e44      	ldrb	r4, [r0, #25]
 8001324:	7c47      	ldrb	r7, [r0, #17]
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 8001326:	7a45      	ldrb	r5, [r0, #9]
  if (a && b)
 8001328:	ea84 0907 	eor.w	r9, r4, r7
 800132c:	2d00      	cmp	r5, #0
 800132e:	f000 81d5 	beq.w	80016dc <MixColumns+0x50c>
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 8001332:	f813 8005 	ldrb.w	r8, [r3, r5]
 8001336:	4e7a      	ldr	r6, [pc, #488]	@ (8001520 <MixColumns+0x350>)
 8001338:	9a00      	ldr	r2, [sp, #0]
 800133a:	eb0b 0a08 	add.w	sl, fp, r8
 800133e:	4442      	add	r2, r8
 8001340:	fba6 8c0a 	umull	r8, ip, r6, sl
 8001344:	ea4f 1cdc 	mov.w	ip, ip, lsr #7
 8001348:	fba6 8602 	umull	r8, r6, r6, r2
 800134c:	ebcc 2c0c 	rsb	ip, ip, ip, lsl #8
 8001350:	09f6      	lsrs	r6, r6, #7
 8001352:	f8df 81d0 	ldr.w	r8, [pc, #464]	@ 8001524 <MixColumns+0x354>
 8001356:	ebaa 0c0c 	sub.w	ip, sl, ip
 800135a:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 800135e:	1b96      	subs	r6, r2, r6
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 8001360:	f818 c00c 	ldrb.w	ip, [r8, ip]
 8001364:	f818 6006 	ldrb.w	r6, [r8, r6]
 8001368:	ea89 0c0c 	eor.w	ip, r9, ip
 800136c:	ea8e 0e0c 	eor.w	lr, lr, ip
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 8001370:	4066      	eors	r6, r4
 8001372:	404e      	eors	r6, r1
 8001374:	f88d e011 	strb.w	lr, [sp, #17]
  if (a && b)
 8001378:	b2f6      	uxtb	r6, r6
 800137a:	2f00      	cmp	r7, #0
 800137c:	f000 81ac 	beq.w	80016d8 <MixColumns+0x508>
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 8001380:	f813 8007 	ldrb.w	r8, [r3, r7]
 8001384:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8001520 <MixColumns+0x350>
 8001388:	9a00      	ldr	r2, [sp, #0]
 800138a:	eb0b 0908 	add.w	r9, fp, r8
 800138e:	fbac ae09 	umull	sl, lr, ip, r9
 8001392:	ea4f 1ede 	mov.w	lr, lr, lsr #7
 8001396:	4490      	add	r8, r2
 8001398:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 800139c:	eba9 0e0e 	sub.w	lr, r9, lr
 80013a0:	fbac 9c08 	umull	r9, ip, ip, r8
 80013a4:	ea4f 1cdc 	mov.w	ip, ip, lsr #7
 80013a8:	ebcc 2c0c 	rsb	ip, ip, ip, lsl #8
 80013ac:	eba8 080c 	sub.w	r8, r8, ip
 80013b0:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8001524 <MixColumns+0x354>
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 80013b4:	f81c e00e 	ldrb.w	lr, [ip, lr]
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 80013b8:	f81c c008 	ldrb.w	ip, [ip, r8]
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 80013bc:	ea86 060e 	eor.w	r6, r6, lr
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 80013c0:	f88d 6019 	strb.w	r6, [sp, #25]
  if (a && b)
 80013c4:	ea81 0805 	eor.w	r8, r1, r5
 80013c8:	b1d4      	cbz	r4, 8001400 <MixColumns+0x230>
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 80013ca:	f813 e004 	ldrb.w	lr, [r3, r4]
 80013ce:	4c54      	ldr	r4, [pc, #336]	@ (8001520 <MixColumns+0x350>)
 80013d0:	9a00      	ldr	r2, [sp, #0]
 80013d2:	eb0b 090e 	add.w	r9, fp, lr
 80013d6:	fba4 a609 	umull	sl, r6, r4, r9
 80013da:	09f6      	lsrs	r6, r6, #7
 80013dc:	4496      	add	lr, r2
 80013de:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 80013e2:	eba9 0606 	sub.w	r6, r9, r6
 80013e6:	fba4 940e 	umull	r9, r4, r4, lr
 80013ea:	09e4      	lsrs	r4, r4, #7
 80013ec:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 80013f0:	ebae 0e04 	sub.w	lr, lr, r4
 80013f4:	4c4b      	ldr	r4, [pc, #300]	@ (8001524 <MixColumns+0x354>)
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 80013f6:	5da6      	ldrb	r6, [r4, r6]
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 80013f8:	f814 400e 	ldrb.w	r4, [r4, lr]
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 80013fc:	ea88 0806 	eor.w	r8, r8, r6
 8001400:	ea8c 0c08 	eor.w	ip, ip, r8
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 8001404:	f88d c021 	strb.w	ip, [sp, #33]	@ 0x21
  if (a && b)
 8001408:	b151      	cbz	r1, 8001420 <MixColumns+0x250>
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 800140a:	5c5e      	ldrb	r6, [r3, r1]
 800140c:	4944      	ldr	r1, [pc, #272]	@ (8001520 <MixColumns+0x350>)
 800140e:	445e      	add	r6, fp
 8001410:	fba1 c106 	umull	ip, r1, r1, r6
 8001414:	09c9      	lsrs	r1, r1, #7
 8001416:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 800141a:	1a76      	subs	r6, r6, r1
 800141c:	4941      	ldr	r1, [pc, #260]	@ (8001524 <MixColumns+0x354>)
 800141e:	5d89      	ldrb	r1, [r1, r6]
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 8001420:	407d      	eors	r5, r7
 8001422:	406c      	eors	r4, r5
 8001424:	4061      	eors	r1, r4
 8001426:	9102      	str	r1, [sp, #8]
 8001428:	7881      	ldrb	r1, [r0, #2]
  if (a && b)
 800142a:	2900      	cmp	r1, #0
 800142c:	f000 8152 	beq.w	80016d4 <MixColumns+0x504>
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 8001430:	5c5d      	ldrb	r5, [r3, r1]
 8001432:	9a00      	ldr	r2, [sp, #0]
 8001434:	4c3a      	ldr	r4, [pc, #232]	@ (8001520 <MixColumns+0x350>)
 8001436:	4415      	add	r5, r2
 8001438:	fba4 6405 	umull	r6, r4, r4, r5
 800143c:	09e4      	lsrs	r4, r4, #7
 800143e:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 8001442:	1b2d      	subs	r5, r5, r4
 8001444:	4c37      	ldr	r4, [pc, #220]	@ (8001524 <MixColumns+0x354>)
 8001446:	f814 e005 	ldrb.w	lr, [r4, r5]
                a[(i + 2) % 4][j] ^ a[(i + 3) % 4][j];
 800144a:	7e84      	ldrb	r4, [r0, #26]
 800144c:	7c87      	ldrb	r7, [r0, #18]
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 800144e:	7a85      	ldrb	r5, [r0, #10]
  if (a && b)
 8001450:	ea84 0907 	eor.w	r9, r4, r7
 8001454:	2d00      	cmp	r5, #0
 8001456:	f000 8139 	beq.w	80016cc <MixColumns+0x4fc>
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 800145a:	f813 8005 	ldrb.w	r8, [r3, r5]
 800145e:	4e30      	ldr	r6, [pc, #192]	@ (8001520 <MixColumns+0x350>)
 8001460:	9a00      	ldr	r2, [sp, #0]
 8001462:	eb0b 0a08 	add.w	sl, fp, r8
 8001466:	4442      	add	r2, r8
 8001468:	fba6 8c0a 	umull	r8, ip, r6, sl
 800146c:	ea4f 1cdc 	mov.w	ip, ip, lsr #7
 8001470:	fba6 8602 	umull	r8, r6, r6, r2
 8001474:	ebcc 2c0c 	rsb	ip, ip, ip, lsl #8
 8001478:	09f6      	lsrs	r6, r6, #7
 800147a:	f8df 80a8 	ldr.w	r8, [pc, #168]	@ 8001524 <MixColumns+0x354>
 800147e:	ebaa 0c0c 	sub.w	ip, sl, ip
 8001482:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 8001486:	1b96      	subs	r6, r2, r6
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 8001488:	f818 c00c 	ldrb.w	ip, [r8, ip]
 800148c:	f818 6006 	ldrb.w	r6, [r8, r6]
 8001490:	ea89 0c0c 	eor.w	ip, r9, ip
 8001494:	ea8e 0e0c 	eor.w	lr, lr, ip
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 8001498:	4066      	eors	r6, r4
 800149a:	404e      	eors	r6, r1
 800149c:	f88d e012 	strb.w	lr, [sp, #18]
  if (a && b)
 80014a0:	b2f6      	uxtb	r6, r6
 80014a2:	2f00      	cmp	r7, #0
 80014a4:	f000 8110 	beq.w	80016c8 <MixColumns+0x4f8>
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 80014a8:	f813 8007 	ldrb.w	r8, [r3, r7]
 80014ac:	f8df c070 	ldr.w	ip, [pc, #112]	@ 8001520 <MixColumns+0x350>
 80014b0:	9a00      	ldr	r2, [sp, #0]
 80014b2:	eb0b 0908 	add.w	r9, fp, r8
 80014b6:	fbac ae09 	umull	sl, lr, ip, r9
 80014ba:	ea4f 1ede 	mov.w	lr, lr, lsr #7
 80014be:	4490      	add	r8, r2
 80014c0:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 80014c4:	eba9 0e0e 	sub.w	lr, r9, lr
 80014c8:	fbac 9c08 	umull	r9, ip, ip, r8
 80014cc:	ea4f 1cdc 	mov.w	ip, ip, lsr #7
 80014d0:	ebcc 2c0c 	rsb	ip, ip, ip, lsl #8
 80014d4:	eba8 0c0c 	sub.w	ip, r8, ip
 80014d8:	f8df 8048 	ldr.w	r8, [pc, #72]	@ 8001524 <MixColumns+0x354>
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 80014dc:	f818 e00e 	ldrb.w	lr, [r8, lr]
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 80014e0:	f818 c00c 	ldrb.w	ip, [r8, ip]
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 80014e4:	ea86 060e 	eor.w	r6, r6, lr
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 80014e8:	f88d 601a 	strb.w	r6, [sp, #26]
  if (a && b)
 80014ec:	ea81 0e05 	eor.w	lr, r1, r5
 80014f0:	b324      	cbz	r4, 800153c <MixColumns+0x36c>
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 80014f2:	f813 8004 	ldrb.w	r8, [r3, r4]
 80014f6:	4c0a      	ldr	r4, [pc, #40]	@ (8001520 <MixColumns+0x350>)
 80014f8:	9a00      	ldr	r2, [sp, #0]
 80014fa:	eb0b 0908 	add.w	r9, fp, r8
 80014fe:	fba4 a609 	umull	sl, r6, r4, r9
 8001502:	09f6      	lsrs	r6, r6, #7
 8001504:	4490      	add	r8, r2
 8001506:	ebc6 2606 	rsb	r6, r6, r6, lsl #8
 800150a:	eba9 0606 	sub.w	r6, r9, r6
 800150e:	fba4 9408 	umull	r9, r4, r4, r8
 8001512:	09e4      	lsrs	r4, r4, #7
 8001514:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 8001518:	e006      	b.n	8001528 <MixColumns+0x358>
 800151a:	bf00      	nop
 800151c:	20000278 	.word	0x20000278
 8001520:	80808081 	.word	0x80808081
 8001524:	20000178 	.word	0x20000178
 8001528:	eba8 0404 	sub.w	r4, r8, r4
 800152c:	f8df 81cc 	ldr.w	r8, [pc, #460]	@ 80016fc <MixColumns+0x52c>
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 8001530:	f818 6006 	ldrb.w	r6, [r8, r6]
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 8001534:	f818 4004 	ldrb.w	r4, [r8, r4]
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 8001538:	ea8e 0e06 	eor.w	lr, lr, r6
 800153c:	ea8c 0c0e 	eor.w	ip, ip, lr
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 8001540:	f88d c022 	strb.w	ip, [sp, #34]	@ 0x22
  if (a && b)
 8001544:	b151      	cbz	r1, 800155c <MixColumns+0x38c>
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 8001546:	5c5e      	ldrb	r6, [r3, r1]
 8001548:	496b      	ldr	r1, [pc, #428]	@ (80016f8 <MixColumns+0x528>)
 800154a:	445e      	add	r6, fp
 800154c:	fba1 c106 	umull	ip, r1, r1, r6
 8001550:	09c9      	lsrs	r1, r1, #7
 8001552:	ebc1 2101 	rsb	r1, r1, r1, lsl #8
 8001556:	1a76      	subs	r6, r6, r1
 8001558:	4968      	ldr	r1, [pc, #416]	@ (80016fc <MixColumns+0x52c>)
 800155a:	5d89      	ldrb	r1, [r1, r6]
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 800155c:	407d      	eors	r5, r7
 800155e:	406c      	eors	r4, r5
 8001560:	4061      	eors	r1, r4
 8001562:	9103      	str	r1, [sp, #12]
 8001564:	78c1      	ldrb	r1, [r0, #3]
  if (a && b)
 8001566:	2900      	cmp	r1, #0
 8001568:	f000 80ac 	beq.w	80016c4 <MixColumns+0x4f4>
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 800156c:	5c5d      	ldrb	r5, [r3, r1]
 800156e:	9a00      	ldr	r2, [sp, #0]
 8001570:	4c61      	ldr	r4, [pc, #388]	@ (80016f8 <MixColumns+0x528>)
 8001572:	4415      	add	r5, r2
 8001574:	fba4 6405 	umull	r6, r4, r4, r5
 8001578:	09e4      	lsrs	r4, r4, #7
 800157a:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 800157e:	1b2d      	subs	r5, r5, r4
 8001580:	4c5e      	ldr	r4, [pc, #376]	@ (80016fc <MixColumns+0x52c>)
 8001582:	f814 9005 	ldrb.w	r9, [r4, r5]
                a[(i + 2) % 4][j] ^ a[(i + 3) % 4][j];
 8001586:	7ec4      	ldrb	r4, [r0, #27]
 8001588:	7cc6      	ldrb	r6, [r0, #19]
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 800158a:	7ac5      	ldrb	r5, [r0, #11]
  if (a && b)
 800158c:	ea86 0a04 	eor.w	sl, r6, r4
 8001590:	2d00      	cmp	r5, #0
 8001592:	d176      	bne.n	8001682 <MixColumns+0x4b2>
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 8001594:	ea8a 0c09 	eor.w	ip, sl, r9
                a[(i + 2) % 4][j] ^ a[(i + 3) % 4][j];
 8001598:	4627      	mov	r7, r4
 800159a:	f88d c013 	strb.w	ip, [sp, #19]
  if (a && b)
 800159e:	404f      	eors	r7, r1
 80015a0:	2e00      	cmp	r6, #0
 80015a2:	d06c      	beq.n	800167e <MixColumns+0x4ae>
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 80015a4:	f813 8006 	ldrb.w	r8, [r3, r6]
 80015a8:	f8df c14c 	ldr.w	ip, [pc, #332]	@ 80016f8 <MixColumns+0x528>
 80015ac:	9a00      	ldr	r2, [sp, #0]
 80015ae:	eb0b 0908 	add.w	r9, fp, r8
 80015b2:	fbac ae09 	umull	sl, lr, ip, r9
 80015b6:	ea4f 1ede 	mov.w	lr, lr, lsr #7
 80015ba:	4490      	add	r8, r2
 80015bc:	ebce 2e0e 	rsb	lr, lr, lr, lsl #8
 80015c0:	eba9 0e0e 	sub.w	lr, r9, lr
 80015c4:	fbac 9c08 	umull	r9, ip, ip, r8
 80015c8:	ea4f 1cdc 	mov.w	ip, ip, lsr #7
 80015cc:	ebcc 2c0c 	rsb	ip, ip, ip, lsl #8
 80015d0:	eba8 0c0c 	sub.w	ip, r8, ip
 80015d4:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 80016fc <MixColumns+0x52c>
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 80015d8:	f818 900e 	ldrb.w	r9, [r8, lr]
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 80015dc:	f818 e00c 	ldrb.w	lr, [r8, ip]
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 80015e0:	ea87 0709 	eor.w	r7, r7, r9
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 80015e4:	f88d 701b 	strb.w	r7, [sp, #27]
  if (a && b)
 80015e8:	ea81 0805 	eor.w	r8, r1, r5
 80015ec:	2c00      	cmp	r4, #0
 80015ee:	d043      	beq.n	8001678 <MixColumns+0x4a8>
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 80015f0:	f813 c004 	ldrb.w	ip, [r3, r4]
 80015f4:	9a00      	ldr	r2, [sp, #0]
 80015f6:	4c40      	ldr	r4, [pc, #256]	@ (80016f8 <MixColumns+0x528>)
 80015f8:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 80016fc <MixColumns+0x52c>
 80015fc:	4462      	add	r2, ip
 80015fe:	44dc      	add	ip, fp
 8001600:	fba4 a70c 	umull	sl, r7, r4, ip
 8001604:	09ff      	lsrs	r7, r7, #7
 8001606:	ebc7 2707 	rsb	r7, r7, r7, lsl #8
 800160a:	ebac 0707 	sub.w	r7, ip, r7
 800160e:	fba4 c402 	umull	ip, r4, r4, r2
 8001612:	09e4      	lsrs	r4, r4, #7
 8001614:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 8001618:	f819 7007 	ldrb.w	r7, [r9, r7]
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 800161c:	1b12      	subs	r2, r2, r4
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 800161e:	ea88 0707 	eor.w	r7, r8, r7
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 8001622:	f819 4002 	ldrb.w	r4, [r9, r2]
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 8001626:	ea8e 0707 	eor.w	r7, lr, r7
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 800162a:	f88d 7023 	strb.w	r7, [sp, #35]	@ 0x23
  if (a && b)
 800162e:	b151      	cbz	r1, 8001646 <MixColumns+0x476>
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 8001630:	5c5a      	ldrb	r2, [r3, r1]
 8001632:	4b31      	ldr	r3, [pc, #196]	@ (80016f8 <MixColumns+0x528>)
 8001634:	445a      	add	r2, fp
 8001636:	fba3 1302 	umull	r1, r3, r3, r2
 800163a:	09db      	lsrs	r3, r3, #7
 800163c:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 8001640:	1ad2      	subs	r2, r2, r3
 8001642:	4b2e      	ldr	r3, [pc, #184]	@ (80016fc <MixColumns+0x52c>)
 8001644:	5c99      	ldrb	r1, [r3, r2]
  for (i = 0; i < 4; i++)
    for (j = 0; j < BC; j++)
      a[i][j] = b[i][j];
 8001646:	9a01      	ldr	r2, [sp, #4]
 8001648:	2300      	movs	r3, #0
 800164a:	f362 0307 	bfi	r3, r2, #0, #8
 800164e:	9a02      	ldr	r2, [sp, #8]
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 8001650:	4075      	eors	r5, r6
      a[i][j] = b[i][j];
 8001652:	f362 230f 	bfi	r3, r2, #8, #8
 8001656:	9a03      	ldr	r2, [sp, #12]
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 8001658:	406c      	eors	r4, r5
 800165a:	4061      	eors	r1, r4
      a[i][j] = b[i][j];
 800165c:	9d04      	ldr	r5, [sp, #16]
 800165e:	9c06      	ldr	r4, [sp, #24]
 8001660:	6005      	str	r5, [r0, #0]
 8001662:	f362 4317 	bfi	r3, r2, #16, #8
 8001666:	9a08      	ldr	r2, [sp, #32]
 8001668:	6084      	str	r4, [r0, #8]
 800166a:	f361 631f 	bfi	r3, r1, #24, #8
 800166e:	6102      	str	r2, [r0, #16]
 8001670:	6183      	str	r3, [r0, #24]
}
 8001672:	b00d      	add	sp, #52	@ 0x34
 8001674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 8001678:	ea88 070e 	eor.w	r7, r8, lr
  if (a && b)
 800167c:	e7d5      	b.n	800162a <MixColumns+0x45a>
    return 0;
 800167e:	46b6      	mov	lr, r6
 8001680:	e7b0      	b.n	80015e4 <MixColumns+0x414>
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 8001682:	f813 e005 	ldrb.w	lr, [r3, r5]
 8001686:	4f1c      	ldr	r7, [pc, #112]	@ (80016f8 <MixColumns+0x528>)
 8001688:	9a00      	ldr	r2, [sp, #0]
 800168a:	eb0b 080e 	add.w	r8, fp, lr
 800168e:	4472      	add	r2, lr
 8001690:	fba7 ec08 	umull	lr, ip, r7, r8
 8001694:	ea4f 1cdc 	mov.w	ip, ip, lsr #7
 8001698:	fba7 e702 	umull	lr, r7, r7, r2
 800169c:	ebcc 2c0c 	rsb	ip, ip, ip, lsl #8
 80016a0:	09ff      	lsrs	r7, r7, #7
 80016a2:	f8df e058 	ldr.w	lr, [pc, #88]	@ 80016fc <MixColumns+0x52c>
 80016a6:	eba8 0c0c 	sub.w	ip, r8, ip
 80016aa:	ebc7 2707 	rsb	r7, r7, r7, lsl #8
 80016ae:	1bd7      	subs	r7, r2, r7
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 80016b0:	f81e c00c 	ldrb.w	ip, [lr, ip]
 80016b4:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80016b8:	ea8a 0a0c 	eor.w	sl, sl, ip
 80016bc:	ea89 0c0a 	eor.w	ip, r9, sl
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 80016c0:	4067      	eors	r7, r4
 80016c2:	e76a      	b.n	800159a <MixColumns+0x3ca>
    return 0;
 80016c4:	4689      	mov	r9, r1
 80016c6:	e75e      	b.n	8001586 <MixColumns+0x3b6>
 80016c8:	46bc      	mov	ip, r7
 80016ca:	e70d      	b.n	80014e8 <MixColumns+0x318>
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 80016cc:	ea8e 0e09 	eor.w	lr, lr, r9
                a[(i + 2) % 4][j] ^ a[(i + 3) % 4][j];
 80016d0:	4626      	mov	r6, r4
 80016d2:	e6e2      	b.n	800149a <MixColumns+0x2ca>
    return 0;
 80016d4:	468e      	mov	lr, r1
 80016d6:	e6b8      	b.n	800144a <MixColumns+0x27a>
 80016d8:	46bc      	mov	ip, r7
 80016da:	e671      	b.n	80013c0 <MixColumns+0x1f0>
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 80016dc:	ea8e 0e09 	eor.w	lr, lr, r9
                a[(i + 2) % 4][j] ^ a[(i + 3) % 4][j];
 80016e0:	4626      	mov	r6, r4
 80016e2:	e646      	b.n	8001372 <MixColumns+0x1a2>
    return 0;
 80016e4:	468e      	mov	lr, r1
 80016e6:	e61c      	b.n	8001322 <MixColumns+0x152>
 80016e8:	462f      	mov	r7, r5
 80016ea:	e5d5      	b.n	8001298 <MixColumns+0xc8>
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 80016ec:	ea89 0e0e 	eor.w	lr, r9, lr
                a[(i + 2) % 4][j] ^ a[(i + 3) % 4][j];
 80016f0:	4626      	mov	r6, r4
 80016f2:	e5ad      	b.n	8001250 <MixColumns+0x80>
    return 0;
 80016f4:	468e      	mov	lr, r1
 80016f6:	e583      	b.n	8001200 <MixColumns+0x30>
 80016f8:	80808081 	.word	0x80808081
 80016fc:	20000178 	.word	0x20000178

08001700 <KeyExpansion>:
                mul(0xd, a[(i + 2) % 4][j]) ^ mul(0x9, a[(i + 3) % 4][j]);
  for (i = 0; i < 4; i++)
    for (j = 0; j < BC; j++)
      a[i][j] = b[i][j];
}
int KeyExpansion(word8 k[4][MAXKC], word8 W[MAXROUNDS + 1][4][MAXBC]) {
 8001700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   */
  int i, j, t, RCpointer = 1;
  word8 tk[4][MAXKC];
  for (j = 0; j < KC; j++)
    for (i = 0; i < 4; i++)
      tk[i][j] = k[i][j];
 8001704:	6887      	ldr	r7, [r0, #8]
 8001706:	6906      	ldr	r6, [r0, #16]
 8001708:	f8d0 c000 	ldr.w	ip, [r0]
 800170c:	6982      	ldr	r2, [r0, #24]
  t = 0;
  /* copy values into round key array */
  for (j = 0; (j < KC) && (t < (ROUNDS + 1) * BC); j++, t++)
    for (i = 0; i < 4; i++)
      W[t / BC][i][t % BC] = tk[i][j];
 800170e:	618a      	str	r2, [r1, #24]
int KeyExpansion(word8 k[4][MAXKC], word8 W[MAXROUNDS + 1][4][MAXBC]) {
 8001710:	b08d      	sub	sp, #52	@ 0x34
      W[t / BC][i][t % BC] = tk[i][j];
 8001712:	608f      	str	r7, [r1, #8]
 8001714:	610e      	str	r6, [r1, #16]
int KeyExpansion(word8 k[4][MAXKC], word8 W[MAXROUNDS + 1][4][MAXBC]) {
 8001716:	4689      	mov	r9, r1
      W[t / BC][i][t % BC] = tk[i][j];
 8001718:	f8c1 c000 	str.w	ip, [r1]
 800171c:	b2f9      	uxtb	r1, r7
 800171e:	910a      	str	r1, [sp, #40]	@ 0x28
 8001720:	b2f1      	uxtb	r1, r6
 8001722:	9103      	str	r1, [sp, #12]
 8001724:	0e11      	lsrs	r1, r2, #24
 8001726:	9100      	str	r1, [sp, #0]
 8001728:	b2d1      	uxtb	r1, r2
 800172a:	9104      	str	r1, [sp, #16]
 800172c:	ea4f 611c 	mov.w	r1, ip, lsr #24
 8001730:	f3c7 4007 	ubfx	r0, r7, #16, #8
 8001734:	4b62      	ldr	r3, [pc, #392]	@ (80018c0 <KeyExpansion+0x1c0>)
 8001736:	9105      	str	r1, [sp, #20]
 8001738:	f3cc 2107 	ubfx	r1, ip, #8, #8
 800173c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800173e:	0e3d      	lsrs	r5, r7, #24
 8001740:	fa5f f38c 	uxtb.w	r3, ip
 8001744:	0e34      	lsrs	r4, r6, #24
 8001746:	9107      	str	r1, [sp, #28]
 8001748:	f3c7 2807 	ubfx	r8, r7, #8, #8
 800174c:	f3cc 4107 	ubfx	r1, ip, #16, #8
 8001750:	9002      	str	r0, [sp, #8]
 8001752:	f3c6 2707 	ubfx	r7, r6, #8, #8
 8001756:	f3c6 4007 	ubfx	r0, r6, #16, #8
 800175a:	f3c2 2607 	ubfx	r6, r2, #8, #8
 800175e:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8001762:	9008      	str	r0, [sp, #32]
 8001764:	9206      	str	r2, [sp, #24]
 8001766:	f04f 0e04 	mov.w	lr, #4
 800176a:	9309      	str	r3, [sp, #36]	@ 0x24
 800176c:	9101      	str	r1, [sp, #4]
    /* while not enough round key material calculated,
     * calculate new values
     */
    for (i = 0; i < 4; i++)
      tk[i][0] ^= S[tk[(i + 1) % 4][KC - 1]];
    tk[0][0] ^= RC[RCpointer++];
 800176e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8001770:	4854      	ldr	r0, [pc, #336]	@ (80018c4 <KeyExpansion+0x1c4>)
 8001772:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8001776:	5d40      	ldrb	r0, [r0, r5]
 8001778:	930b      	str	r3, [sp, #44]	@ 0x2c
 800177a:	9b09      	ldr	r3, [sp, #36]	@ 0x24

    if (KC <= 6)
      for (j = 1; j < KC; j++)
        for (i = 0; i < 4; i++)
          tk[i][j] ^= tk[i][j - 1];
 800177c:	9901      	ldr	r1, [sp, #4]
    tk[0][0] ^= RC[RCpointer++];
 800177e:	4042      	eors	r2, r0
 8001780:	405a      	eors	r2, r3
 8001782:	b2d3      	uxtb	r3, r2
          tk[i][j] ^= tk[i][j - 1];
 8001784:	9a07      	ldr	r2, [sp, #28]
      tk[i][0] ^= S[tk[(i + 1) % 4][KC - 1]];
 8001786:	484f      	ldr	r0, [pc, #316]	@ (80018c4 <KeyExpansion+0x1c4>)
          tk[i][j] ^= tk[i][j - 1];
 8001788:	9309      	str	r3, [sp, #36]	@ 0x24
 800178a:	405a      	eors	r2, r3
 800178c:	4051      	eors	r1, r2
 800178e:	9207      	str	r2, [sp, #28]
 8001790:	b2ca      	uxtb	r2, r1
 8001792:	9201      	str	r2, [sp, #4]
      tk[i][0] ^= S[tk[(i + 1) % 4][KC - 1]];
 8001794:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8001796:	5d02      	ldrb	r2, [r0, r4]
          tk[i][j] ^= tk[i][j - 1];
 8001798:	9b02      	ldr	r3, [sp, #8]
      tk[i][0] ^= S[tk[(i + 1) % 4][KC - 1]];
 800179a:	4051      	eors	r1, r2
          tk[i][j] ^= tk[i][j - 1];
 800179c:	ea88 0801 	eor.w	r8, r8, r1
      tk[i][0] ^= S[tk[(i + 1) % 4][KC - 1]];
 80017a0:	9a00      	ldr	r2, [sp, #0]
 80017a2:	910a      	str	r1, [sp, #40]	@ 0x28
          tk[i][j] ^= tk[i][j - 1];
 80017a4:	fa5f f888 	uxtb.w	r8, r8
 80017a8:	ea83 0308 	eor.w	r3, r3, r8
      tk[i][0] ^= S[tk[(i + 1) % 4][KC - 1]];
 80017ac:	5c82      	ldrb	r2, [r0, r2]
          tk[i][j] ^= tk[i][j - 1];
 80017ae:	9302      	str	r3, [sp, #8]
 80017b0:	405d      	eors	r5, r3
      tk[i][0] ^= S[tk[(i + 1) % 4][KC - 1]];
 80017b2:	9b03      	ldr	r3, [sp, #12]
 80017b4:	4053      	eors	r3, r2
          tk[i][j] ^= tk[i][j - 1];
 80017b6:	405f      	eors	r7, r3
 80017b8:	9a08      	ldr	r2, [sp, #32]
 80017ba:	9303      	str	r3, [sp, #12]
 80017bc:	b2ff      	uxtb	r7, r7
      tk[i][0] ^= S[tk[(i + 1) % 4][KC - 1]];
 80017be:	9b05      	ldr	r3, [sp, #20]
          tk[i][j] ^= tk[i][j - 1];
 80017c0:	407a      	eors	r2, r7
 80017c2:	9208      	str	r2, [sp, #32]
 80017c4:	4054      	eors	r4, r2
      tk[i][0] ^= S[tk[(i + 1) % 4][KC - 1]];
 80017c6:	5cc2      	ldrb	r2, [r0, r3]
 80017c8:	9804      	ldr	r0, [sp, #16]
 80017ca:	4050      	eors	r0, r2
          tk[i][j] ^= tk[i][j - 1];
 80017cc:	9004      	str	r0, [sp, #16]
 80017ce:	4046      	eors	r6, r0
 80017d0:	9806      	ldr	r0, [sp, #24]
 80017d2:	9a00      	ldr	r2, [sp, #0]
 80017d4:	b2f6      	uxtb	r6, r6
 80017d6:	4070      	eors	r0, r6
 80017d8:	4042      	eors	r2, r0
 80017da:	9006      	str	r0, [sp, #24]
 80017dc:	4618      	mov	r0, r3
 80017de:	9b01      	ldr	r3, [sp, #4]
          tk[i][j] ^= tk[i][j - 1];
    }
    /* copy values into round key array */
    for (j = 0; (j < KC) && (t < (ROUNDS + 1) * BC); j++, t++)
      for (i = 0; i < 4; i++)
        W[t / BC][i][t % BC] = tk[i][j];
 80017e0:	ea4f 0aae 	mov.w	sl, lr, asr #2
          tk[i][j] ^= tk[i][j - 1];
 80017e4:	ea80 0c03 	eor.w	ip, r0, r3
        W[t / BC][i][t % BC] = tk[i][j];
 80017e8:	eb09 1b4a 	add.w	fp, r9, sl, lsl #5
          tk[i][j] ^= tk[i][j - 1];
 80017ec:	f8cd c014 	str.w	ip, [sp, #20]
        W[t / BC][i][t % BC] = tk[i][j];
 80017f0:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
          tk[i][j] ^= tk[i][j - 1];
 80017f4:	fa5f fc82 	uxtb.w	ip, r2
        W[t / BC][i][t % BC] = tk[i][j];
 80017f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
          tk[i][j] ^= tk[i][j - 1];
 80017fa:	f8cd c000 	str.w	ip, [sp]
    for (j = 0; (j < KC) && (t < (ROUNDS + 1) * BC); j++, t++)
 80017fe:	f10e 0002 	add.w	r0, lr, #2
 8001802:	f10e 0c01 	add.w	ip, lr, #1
        W[t / BC][i][t % BC] = tk[i][j];
 8001806:	f809 300a 	strb.w	r3, [r9, sl]
 800180a:	ea4f 0cac 	mov.w	ip, ip, asr #2
 800180e:	9b03      	ldr	r3, [sp, #12]
 8001810:	f88b 3010 	strb.w	r3, [fp, #16]
 8001814:	1080      	asrs	r0, r0, #2
 8001816:	eb09 1c4c 	add.w	ip, r9, ip, lsl #5
 800181a:	eb09 1040 	add.w	r0, r9, r0, lsl #5
 800181e:	9b04      	ldr	r3, [sp, #16]
 8001820:	f88b 1008 	strb.w	r1, [fp, #8]
 8001824:	f88b 3018 	strb.w	r3, [fp, #24]
 8001828:	9907      	ldr	r1, [sp, #28]
 800182a:	9b01      	ldr	r3, [sp, #4]
 800182c:	f88c 1001 	strb.w	r1, [ip, #1]
    for (j = 0; (j < KC) && (t < (ROUNDS + 1) * BC); j++, t++)
 8001830:	f10e 0203 	add.w	r2, lr, #3
        W[t / BC][i][t % BC] = tk[i][j];
 8001834:	f88c 8009 	strb.w	r8, [ip, #9]
 8001838:	f88c 7011 	strb.w	r7, [ip, #17]
 800183c:	f88c 6019 	strb.w	r6, [ip, #25]
 8001840:	1092      	asrs	r2, r2, #2
 8001842:	7083      	strb	r3, [r0, #2]
 8001844:	9b08      	ldr	r3, [sp, #32]
 8001846:	7483      	strb	r3, [r0, #18]
 8001848:	eb09 1242 	add.w	r2, r9, r2, lsl #5
 800184c:	9b06      	ldr	r3, [sp, #24]
 800184e:	7683      	strb	r3, [r0, #26]
 8001850:	9902      	ldr	r1, [sp, #8]
 8001852:	9b05      	ldr	r3, [sp, #20]
 8001854:	7281      	strb	r1, [r0, #10]
    for (j = 0; (j < KC) && (t < (ROUNDS + 1) * BC); j++, t++)
 8001856:	f10e 0e04 	add.w	lr, lr, #4
          tk[i][j] ^= tk[i][j - 1];
 800185a:	b2ed      	uxtb	r5, r5
 800185c:	b2e4      	uxtb	r4, r4
        W[t / BC][i][t % BC] = tk[i][j];
 800185e:	70d3      	strb	r3, [r2, #3]
  while (t < (ROUNDS + 1) * BC) {
 8001860:	f1be 0f2c 	cmp.w	lr, #44	@ 0x2c
        W[t / BC][i][t % BC] = tk[i][j];
 8001864:	9b00      	ldr	r3, [sp, #0]
 8001866:	72d5      	strb	r5, [r2, #11]
 8001868:	74d4      	strb	r4, [r2, #19]
 800186a:	76d3      	strb	r3, [r2, #27]
  while (t < (ROUNDS + 1) * BC) {
 800186c:	f47f af7f 	bne.w	800176e <KeyExpansion+0x6e>
 8001870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001872:	f809 300a 	strb.w	r3, [r9, sl]
 8001876:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001878:	f88b 3008 	strb.w	r3, [fp, #8]
 800187c:	9b03      	ldr	r3, [sp, #12]
 800187e:	f88b 3010 	strb.w	r3, [fp, #16]
 8001882:	9b04      	ldr	r3, [sp, #16]
 8001884:	f88b 3018 	strb.w	r3, [fp, #24]
 8001888:	9b07      	ldr	r3, [sp, #28]
 800188a:	f88c 3001 	strb.w	r3, [ip, #1]
 800188e:	9b02      	ldr	r3, [sp, #8]
 8001890:	f88c 8009 	strb.w	r8, [ip, #9]
 8001894:	f88c 7011 	strb.w	r7, [ip, #17]
 8001898:	f88c 6019 	strb.w	r6, [ip, #25]
 800189c:	7283      	strb	r3, [r0, #10]
 800189e:	9b08      	ldr	r3, [sp, #32]
 80018a0:	7483      	strb	r3, [r0, #18]
 80018a2:	9b06      	ldr	r3, [sp, #24]
 80018a4:	7683      	strb	r3, [r0, #26]
 80018a6:	9901      	ldr	r1, [sp, #4]
 80018a8:	9b05      	ldr	r3, [sp, #20]
 80018aa:	7081      	strb	r1, [r0, #2]
 80018ac:	70d3      	strb	r3, [r2, #3]
 80018ae:	9b00      	ldr	r3, [sp, #0]
 80018b0:	72d5      	strb	r5, [r2, #11]
  }
  return 0;
}
 80018b2:	2000      	movs	r0, #0
 80018b4:	74d4      	strb	r4, [r2, #19]
 80018b6:	76d3      	strb	r3, [r2, #27]
 80018b8:	b00d      	add	sp, #52	@ 0x34
 80018ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018be:	bf00      	nop
 80018c0:	20000000 	.word	0x20000000
 80018c4:	20000078 	.word	0x20000078

080018c8 <Encrypt>:
int Encrypt(word8 a[4][MAXBC], word8 rk[MAXROUNDS + 1][4][MAXBC]) {
 80018c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018cc:	1cc3      	adds	r3, r0, #3
 80018ce:	1a5b      	subs	r3, r3, r1
 80018d0:	2b06      	cmp	r3, #6
 80018d2:	b08d      	sub	sp, #52	@ 0x34
 80018d4:	4689      	mov	r9, r1
  for (i = 0; i < 4; i++)
 80018d6:	f240 81ae 	bls.w	8001c36 <Encrypt+0x36e>
      a[i][j] ^= rk[i][j];
 80018da:	6809      	ldr	r1, [r1, #0]
 80018dc:	6803      	ldr	r3, [r0, #0]
 80018de:	6882      	ldr	r2, [r0, #8]
 80018e0:	404b      	eors	r3, r1
 80018e2:	6003      	str	r3, [r0, #0]
 80018e4:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80018e8:	6903      	ldr	r3, [r0, #16]
 80018ea:	404a      	eors	r2, r1
 80018ec:	6082      	str	r2, [r0, #8]
 80018ee:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80018f2:	7e01      	ldrb	r1, [r0, #24]
 80018f4:	4053      	eors	r3, r2
 80018f6:	6103      	str	r3, [r0, #16]
 80018f8:	f899 3018 	ldrb.w	r3, [r9, #24]
 80018fc:	7e42      	ldrb	r2, [r0, #25]
 80018fe:	404b      	eors	r3, r1
 8001900:	7603      	strb	r3, [r0, #24]
 8001902:	f899 3019 	ldrb.w	r3, [r9, #25]
 8001906:	7e81      	ldrb	r1, [r0, #26]
 8001908:	4053      	eors	r3, r2
 800190a:	7643      	strb	r3, [r0, #25]
 800190c:	f899 301a 	ldrb.w	r3, [r9, #26]
 8001910:	7ec2      	ldrb	r2, [r0, #27]
 8001912:	404b      	eors	r3, r1
 8001914:	7683      	strb	r3, [r0, #26]
 8001916:	f899 301b 	ldrb.w	r3, [r9, #27]
 800191a:	405a      	eors	r2, r3
      a[i][j] = box[a[i][j]];
 800191c:	7c03      	ldrb	r3, [r0, #16]
 800191e:	9306      	str	r3, [sp, #24]
 8001920:	7c43      	ldrb	r3, [r0, #17]
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	7c83      	ldrb	r3, [r0, #18]
 8001926:	9302      	str	r3, [sp, #8]
 8001928:	7cc3      	ldrb	r3, [r0, #19]
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	7e03      	ldrb	r3, [r0, #24]
 800192e:	9303      	str	r3, [sp, #12]
 8001930:	7e43      	ldrb	r3, [r0, #25]
 8001932:	9304      	str	r3, [sp, #16]
 8001934:	7e83      	ldrb	r3, [r0, #26]
      a[i][j] ^= rk[i][j];
 8001936:	76c2      	strb	r2, [r0, #27]
      a[i][j] = box[a[i][j]];
 8001938:	4690      	mov	r8, r2
 800193a:	9305      	str	r3, [sp, #20]
 800193c:	f890 e000 	ldrb.w	lr, [r0]
 8001940:	f890 c001 	ldrb.w	ip, [r0, #1]
 8001944:	7887      	ldrb	r7, [r0, #2]
 8001946:	78c6      	ldrb	r6, [r0, #3]
 8001948:	7a01      	ldrb	r1, [r0, #8]
 800194a:	7a45      	ldrb	r5, [r0, #9]
 800194c:	7a84      	ldrb	r4, [r0, #10]
 800194e:	7ac2      	ldrb	r2, [r0, #11]
 8001950:	f8df b428 	ldr.w	fp, [pc, #1064]	@ 8001d7c <Encrypt+0x4b4>
 8001954:	f509 7390 	add.w	r3, r9, #288	@ 0x120
 8001958:	e9cd 3908 	strd	r3, r9, [sp, #32]
 800195c:	46ca      	mov	sl, r9
 800195e:	46c1      	mov	r9, r8
 8001960:	f81b e00e 	ldrb.w	lr, [fp, lr]
 8001964:	f880 e000 	strb.w	lr, [r0]
 8001968:	f81b c00c 	ldrb.w	ip, [fp, ip]
 800196c:	f880 c001 	strb.w	ip, [r0, #1]
 8001970:	f81b 7007 	ldrb.w	r7, [fp, r7]
 8001974:	7087      	strb	r7, [r0, #2]
 8001976:	f81b 6006 	ldrb.w	r6, [fp, r6]
 800197a:	70c6      	strb	r6, [r0, #3]
 800197c:	f81b 1001 	ldrb.w	r1, [fp, r1]
 8001980:	7201      	strb	r1, [r0, #8]
 8001982:	f81b 5005 	ldrb.w	r5, [fp, r5]
 8001986:	7245      	strb	r5, [r0, #9]
 8001988:	f81b 7004 	ldrb.w	r7, [fp, r4]
 800198c:	7287      	strb	r7, [r0, #10]
 800198e:	f81b 6002 	ldrb.w	r6, [fp, r2]
 8001992:	9b06      	ldr	r3, [sp, #24]
 8001994:	72c6      	strb	r6, [r0, #11]
 8001996:	9107      	str	r1, [sp, #28]
 8001998:	f81b 1003 	ldrb.w	r1, [fp, r3]
 800199c:	9b01      	ldr	r3, [sp, #4]
 800199e:	7401      	strb	r1, [r0, #16]
 80019a0:	f81b 2003 	ldrb.w	r2, [fp, r3]
 80019a4:	9b02      	ldr	r3, [sp, #8]
 80019a6:	7442      	strb	r2, [r0, #17]
 80019a8:	f81b 3003 	ldrb.w	r3, [fp, r3]
 80019ac:	7483      	strb	r3, [r0, #18]
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	9b00      	ldr	r3, [sp, #0]
 80019b2:	f81b 4003 	ldrb.w	r4, [fp, r3]
 80019b6:	9b03      	ldr	r3, [sp, #12]
 80019b8:	74c4      	strb	r4, [r0, #19]
 80019ba:	f81b 8003 	ldrb.w	r8, [fp, r3]
 80019be:	f880 8018 	strb.w	r8, [r0, #24]
 80019c2:	9b04      	ldr	r3, [sp, #16]
 80019c4:	f81b e003 	ldrb.w	lr, [fp, r3]
 80019c8:	9b05      	ldr	r3, [sp, #20]
 80019ca:	f880 e019 	strb.w	lr, [r0, #25]
 80019ce:	f81b c003 	ldrb.w	ip, [fp, r3]
 80019d2:	f880 c01a 	strb.w	ip, [r0, #26]
 80019d6:	f81b 9009 	ldrb.w	r9, [fp, r9]
 80019da:	2300      	movs	r3, #0
 80019dc:	f369 0307 	bfi	r3, r9, #0, #8
 80019e0:	f368 230f 	bfi	r3, r8, #8, #8
 80019e4:	f36e 4317 	bfi	r3, lr, #16, #8
 80019e8:	f36c 631f 	bfi	r3, ip, #24, #8
        a[i][j] = tmp[j];
 80019ec:	f04f 0c00 	mov.w	ip, #0
 80019f0:	f365 0c07 	bfi	ip, r5, #0, #8
 80019f4:	f367 2c0f 	bfi	ip, r7, #8, #8
 80019f8:	9d01      	ldr	r5, [sp, #4]
 80019fa:	6183      	str	r3, [r0, #24]
 80019fc:	f366 4c17 	bfi	ip, r6, #16, #8
 8001a00:	2600      	movs	r6, #0
 8001a02:	f365 0607 	bfi	r6, r5, #0, #8
 8001a06:	f364 260f 	bfi	r6, r4, #8, #8
 8001a0a:	f361 4617 	bfi	r6, r1, #16, #8
 8001a0e:	9907      	ldr	r1, [sp, #28]
 8001a10:	f362 661f 	bfi	r6, r2, #24, #8
 8001a14:	f361 6c1f 	bfi	ip, r1, #24, #8
 8001a18:	f8c0 c008 	str.w	ip, [r0, #8]
 8001a1c:	6106      	str	r6, [r0, #16]
  /* ROUNDS-1 ordinary rounds
   */
  for (r = 1; r < ROUNDS; r++) {
    SubBytes(a, S);
    ShiftRows(a, 0);
    MixColumns(a);
 8001a1e:	f7ff fbd7 	bl	80011d0 <MixColumns>
      a[i][j] ^= rk[i][j];
 8001a22:	f89a 3020 	ldrb.w	r3, [sl, #32]
 8001a26:	f890 e000 	ldrb.w	lr, [r0]
 8001a2a:	f890 c001 	ldrb.w	ip, [r0, #1]
 8001a2e:	7887      	ldrb	r7, [r0, #2]
 8001a30:	78c6      	ldrb	r6, [r0, #3]
 8001a32:	7a01      	ldrb	r1, [r0, #8]
 8001a34:	7a45      	ldrb	r5, [r0, #9]
 8001a36:	7a84      	ldrb	r4, [r0, #10]
 8001a38:	7ac2      	ldrb	r2, [r0, #11]
 8001a3a:	f890 9011 	ldrb.w	r9, [r0, #17]
 8001a3e:	ea8e 0e03 	eor.w	lr, lr, r3
 8001a42:	f880 e000 	strb.w	lr, [r0]
 8001a46:	f89a 3021 	ldrb.w	r3, [sl, #33]	@ 0x21
 8001a4a:	ea8c 0c03 	eor.w	ip, ip, r3
 8001a4e:	f880 c001 	strb.w	ip, [r0, #1]
 8001a52:	f89a 3022 	ldrb.w	r3, [sl, #34]	@ 0x22
 8001a56:	405f      	eors	r7, r3
 8001a58:	7087      	strb	r7, [r0, #2]
 8001a5a:	f89a 3023 	ldrb.w	r3, [sl, #35]	@ 0x23
 8001a5e:	405e      	eors	r6, r3
 8001a60:	70c6      	strb	r6, [r0, #3]
 8001a62:	f89a 3028 	ldrb.w	r3, [sl, #40]	@ 0x28
 8001a66:	4059      	eors	r1, r3
 8001a68:	7201      	strb	r1, [r0, #8]
 8001a6a:	f89a 3029 	ldrb.w	r3, [sl, #41]	@ 0x29
 8001a6e:	405d      	eors	r5, r3
 8001a70:	7245      	strb	r5, [r0, #9]
 8001a72:	f89a 302a 	ldrb.w	r3, [sl, #42]	@ 0x2a
 8001a76:	405c      	eors	r4, r3
 8001a78:	7284      	strb	r4, [r0, #10]
 8001a7a:	f89a 302b 	ldrb.w	r3, [sl, #43]	@ 0x2b
 8001a7e:	405a      	eors	r2, r3
 8001a80:	72c2      	strb	r2, [r0, #11]
 8001a82:	f89a 8030 	ldrb.w	r8, [sl, #48]	@ 0x30
 8001a86:	7c03      	ldrb	r3, [r0, #16]
 8001a88:	ea83 0308 	eor.w	r3, r3, r8
 8001a8c:	7403      	strb	r3, [r0, #16]
 8001a8e:	f89a 8031 	ldrb.w	r8, [sl, #49]	@ 0x31
 8001a92:	9306      	str	r3, [sp, #24]
 8001a94:	ea89 0308 	eor.w	r3, r9, r8
 8001a98:	7443      	strb	r3, [r0, #17]
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	f89a 8032 	ldrb.w	r8, [sl, #50]	@ 0x32
 8001aa0:	f890 9012 	ldrb.w	r9, [r0, #18]
 8001aa4:	ea89 0308 	eor.w	r3, r9, r8
 8001aa8:	7483      	strb	r3, [r0, #18]
 8001aaa:	f89a 8033 	ldrb.w	r8, [sl, #51]	@ 0x33
 8001aae:	f890 9013 	ldrb.w	r9, [r0, #19]
 8001ab2:	9302      	str	r3, [sp, #8]
 8001ab4:	ea89 0308 	eor.w	r3, r9, r8
 8001ab8:	74c3      	strb	r3, [r0, #19]
 8001aba:	f89a 8038 	ldrb.w	r8, [sl, #56]	@ 0x38
 8001abe:	f890 9018 	ldrb.w	r9, [r0, #24]
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	ea89 0308 	eor.w	r3, r9, r8
 8001ac8:	7603      	strb	r3, [r0, #24]
 8001aca:	f89a 8039 	ldrb.w	r8, [sl, #57]	@ 0x39
 8001ace:	f890 9019 	ldrb.w	r9, [r0, #25]
 8001ad2:	9303      	str	r3, [sp, #12]
 8001ad4:	ea89 0308 	eor.w	r3, r9, r8
 8001ad8:	7643      	strb	r3, [r0, #25]
 8001ada:	f89a 803a 	ldrb.w	r8, [sl, #58]	@ 0x3a
 8001ade:	f890 901a 	ldrb.w	r9, [r0, #26]
 8001ae2:	9304      	str	r3, [sp, #16]
 8001ae4:	ea89 0308 	eor.w	r3, r9, r8
 8001ae8:	7683      	strb	r3, [r0, #26]
 8001aea:	f89a 803b 	ldrb.w	r8, [sl, #59]	@ 0x3b
 8001aee:	f890 901b 	ldrb.w	r9, [r0, #27]
 8001af2:	9305      	str	r3, [sp, #20]
  for (r = 1; r < ROUNDS; r++) {
 8001af4:	9b08      	ldr	r3, [sp, #32]
 8001af6:	f10a 0a20 	add.w	sl, sl, #32
      a[i][j] ^= rk[i][j];
 8001afa:	ea89 0908 	eor.w	r9, r9, r8
  for (r = 1; r < ROUNDS; r++) {
 8001afe:	459a      	cmp	sl, r3
      a[i][j] ^= rk[i][j];
 8001b00:	f880 901b 	strb.w	r9, [r0, #27]
  for (r = 1; r < ROUNDS; r++) {
 8001b04:	f47f af2c 	bne.w	8001960 <Encrypt+0x98>
      a[i][j] = box[a[i][j]];
 8001b08:	f81b 300e 	ldrb.w	r3, [fp, lr]
 8001b0c:	7003      	strb	r3, [r0, #0]
 8001b0e:	9308      	str	r3, [sp, #32]
 8001b10:	f81b 300c 	ldrb.w	r3, [fp, ip]
 8001b14:	7043      	strb	r3, [r0, #1]
 8001b16:	46c8      	mov	r8, r9
 8001b18:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 8001b1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8001b1e:	f81b 3007 	ldrb.w	r3, [fp, r7]
 8001b22:	7083      	strb	r3, [r0, #2]
 8001b24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001b26:	f81b 3006 	ldrb.w	r3, [fp, r6]
 8001b2a:	70c3      	strb	r3, [r0, #3]
 8001b2c:	f81b 6001 	ldrb.w	r6, [fp, r1]
 8001b30:	7206      	strb	r6, [r0, #8]
 8001b32:	f81b 1005 	ldrb.w	r1, [fp, r5]
 8001b36:	7241      	strb	r1, [r0, #9]
 8001b38:	f81b 4004 	ldrb.w	r4, [fp, r4]
 8001b3c:	7284      	strb	r4, [r0, #10]
 8001b3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8001b40:	f81b 3002 	ldrb.w	r3, [fp, r2]
 8001b44:	9a06      	ldr	r2, [sp, #24]
 8001b46:	72c3      	strb	r3, [r0, #11]
 8001b48:	9d01      	ldr	r5, [sp, #4]
 8001b4a:	9307      	str	r3, [sp, #28]
 8001b4c:	f81b 3002 	ldrb.w	r3, [fp, r2]
 8001b50:	7403      	strb	r3, [r0, #16]
 8001b52:	f81b 5005 	ldrb.w	r5, [fp, r5]
 8001b56:	9f02      	ldr	r7, [sp, #8]
 8001b58:	7445      	strb	r5, [r0, #17]
 8001b5a:	f81b 7007 	ldrb.w	r7, [fp, r7]
 8001b5e:	9306      	str	r3, [sp, #24]
 8001b60:	463a      	mov	r2, r7
 8001b62:	9501      	str	r5, [sp, #4]
 8001b64:	9702      	str	r7, [sp, #8]
 8001b66:	7487      	strb	r7, [r0, #18]
 8001b68:	9f00      	ldr	r7, [sp, #0]
 8001b6a:	9b03      	ldr	r3, [sp, #12]
 8001b6c:	f81b 7007 	ldrb.w	r7, [fp, r7]
 8001b70:	74c7      	strb	r7, [r0, #19]
 8001b72:	f81b c003 	ldrb.w	ip, [fp, r3]
 8001b76:	9b04      	ldr	r3, [sp, #16]
 8001b78:	f880 c018 	strb.w	ip, [r0, #24]
 8001b7c:	f81b e003 	ldrb.w	lr, [fp, r3]
 8001b80:	9b05      	ldr	r3, [sp, #20]
 8001b82:	f880 e019 	strb.w	lr, [r0, #25]
 8001b86:	9700      	str	r7, [sp, #0]
 8001b88:	2700      	movs	r7, #0
 8001b8a:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8001b8e:	9d07      	ldr	r5, [sp, #28]
 8001b90:	7683      	strb	r3, [r0, #26]
 8001b92:	f361 0707 	bfi	r7, r1, #0, #8
 8001b96:	f364 270f 	bfi	r7, r4, #8, #8
 8001b9a:	f81b 8008 	ldrb.w	r8, [fp, r8]
        a[i][j] = tmp[j];
 8001b9e:	f365 4717 	bfi	r7, r5, #16, #8
 8001ba2:	2500      	movs	r5, #0
 8001ba4:	f362 0507 	bfi	r5, r2, #0, #8
 8001ba8:	f04f 0a00 	mov.w	sl, #0
 8001bac:	9a00      	ldr	r2, [sp, #0]
 8001bae:	f368 0a07 	bfi	sl, r8, #0, #8
 8001bb2:	f362 250f 	bfi	r5, r2, #8, #8
 8001bb6:	f36c 2a0f 	bfi	sl, ip, #8, #8
 8001bba:	9a06      	ldr	r2, [sp, #24]
 8001bbc:	f36e 4a17 	bfi	sl, lr, #16, #8
 8001bc0:	f362 4517 	bfi	r5, r2, #16, #8
 8001bc4:	f363 6a1f 	bfi	sl, r3, #24, #8
 8001bc8:	9a01      	ldr	r2, [sp, #4]
 8001bca:	f8c0 a018 	str.w	sl, [r0, #24]
 8001bce:	f100 0b04 	add.w	fp, r0, #4
 8001bd2:	f509 7aa0 	add.w	sl, r9, #320	@ 0x140
 8001bd6:	f366 671f 	bfi	r7, r6, #24, #8
 8001bda:	f362 651f 	bfi	r5, r2, #24, #8
 8001bde:	45da      	cmp	sl, fp
 8001be0:	6087      	str	r7, [r0, #8]
 8001be2:	6105      	str	r5, [r0, #16]
    for (i = 1; i < 4; i++) {
 8001be4:	d203      	bcs.n	8001bee <Encrypt+0x326>
 8001be6:	f509 7aa2 	add.w	sl, r9, #324	@ 0x144
 8001bea:	4550      	cmp	r0, sl
 8001bec:	d372      	bcc.n	8001cd4 <Encrypt+0x40c>
      a[i][j] ^= rk[i][j];
 8001bee:	f8d9 2140 	ldr.w	r2, [r9, #320]	@ 0x140
 8001bf2:	6801      	ldr	r1, [r0, #0]
 8001bf4:	404a      	eors	r2, r1
 8001bf6:	6002      	str	r2, [r0, #0]
 8001bf8:	f8d9 2148 	ldr.w	r2, [r9, #328]	@ 0x148
 8001bfc:	407a      	eors	r2, r7
 8001bfe:	6082      	str	r2, [r0, #8]
 8001c00:	f8d9 2150 	ldr.w	r2, [r9, #336]	@ 0x150
 8001c04:	406a      	eors	r2, r5
 8001c06:	6102      	str	r2, [r0, #16]
 8001c08:	f899 2158 	ldrb.w	r2, [r9, #344]	@ 0x158
 8001c0c:	ea88 0202 	eor.w	r2, r8, r2
 8001c10:	7602      	strb	r2, [r0, #24]
 8001c12:	f899 2159 	ldrb.w	r2, [r9, #345]	@ 0x159
 8001c16:	ea8c 0202 	eor.w	r2, ip, r2
 8001c1a:	7642      	strb	r2, [r0, #25]
 8001c1c:	f899 215a 	ldrb.w	r2, [r9, #346]	@ 0x15a
 8001c20:	ea8e 0202 	eor.w	r2, lr, r2
 8001c24:	7682      	strb	r2, [r0, #26]
 8001c26:	f899 215b 	ldrb.w	r2, [r9, #347]	@ 0x15b
 8001c2a:	4053      	eors	r3, r2
 8001c2c:	76c3      	strb	r3, [r0, #27]
   */
  SubBytes(a, S);
  ShiftRows(a, 0);
  AddRoundKey(a, rk[ROUNDS]);
  return 0;
}
 8001c2e:	2000      	movs	r0, #0
 8001c30:	b00d      	add	sp, #52	@ 0x34
 8001c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      a[i][j] ^= rk[i][j];
 8001c36:	7809      	ldrb	r1, [r1, #0]
 8001c38:	7803      	ldrb	r3, [r0, #0]
 8001c3a:	7842      	ldrb	r2, [r0, #1]
 8001c3c:	404b      	eors	r3, r1
 8001c3e:	7003      	strb	r3, [r0, #0]
 8001c40:	f899 1001 	ldrb.w	r1, [r9, #1]
 8001c44:	7883      	ldrb	r3, [r0, #2]
 8001c46:	404a      	eors	r2, r1
 8001c48:	7042      	strb	r2, [r0, #1]
 8001c4a:	f899 1002 	ldrb.w	r1, [r9, #2]
 8001c4e:	78c2      	ldrb	r2, [r0, #3]
 8001c50:	404b      	eors	r3, r1
 8001c52:	7083      	strb	r3, [r0, #2]
 8001c54:	f899 1003 	ldrb.w	r1, [r9, #3]
 8001c58:	7a03      	ldrb	r3, [r0, #8]
 8001c5a:	404a      	eors	r2, r1
 8001c5c:	70c2      	strb	r2, [r0, #3]
 8001c5e:	f899 1008 	ldrb.w	r1, [r9, #8]
 8001c62:	7a42      	ldrb	r2, [r0, #9]
 8001c64:	404b      	eors	r3, r1
 8001c66:	7203      	strb	r3, [r0, #8]
 8001c68:	f899 1009 	ldrb.w	r1, [r9, #9]
 8001c6c:	7a83      	ldrb	r3, [r0, #10]
 8001c6e:	404a      	eors	r2, r1
 8001c70:	7242      	strb	r2, [r0, #9]
 8001c72:	f899 100a 	ldrb.w	r1, [r9, #10]
 8001c76:	7ac2      	ldrb	r2, [r0, #11]
 8001c78:	404b      	eors	r3, r1
 8001c7a:	7283      	strb	r3, [r0, #10]
 8001c7c:	f899 100b 	ldrb.w	r1, [r9, #11]
 8001c80:	7c03      	ldrb	r3, [r0, #16]
 8001c82:	404a      	eors	r2, r1
 8001c84:	72c2      	strb	r2, [r0, #11]
 8001c86:	f899 1010 	ldrb.w	r1, [r9, #16]
 8001c8a:	7c42      	ldrb	r2, [r0, #17]
 8001c8c:	404b      	eors	r3, r1
 8001c8e:	7403      	strb	r3, [r0, #16]
 8001c90:	f899 1011 	ldrb.w	r1, [r9, #17]
 8001c94:	7c83      	ldrb	r3, [r0, #18]
 8001c96:	404a      	eors	r2, r1
 8001c98:	7442      	strb	r2, [r0, #17]
 8001c9a:	f899 2012 	ldrb.w	r2, [r9, #18]
 8001c9e:	4053      	eors	r3, r2
 8001ca0:	7483      	strb	r3, [r0, #18]
 8001ca2:	f899 1013 	ldrb.w	r1, [r9, #19]
 8001ca6:	7cc3      	ldrb	r3, [r0, #19]
 8001ca8:	7e02      	ldrb	r2, [r0, #24]
 8001caa:	404b      	eors	r3, r1
 8001cac:	74c3      	strb	r3, [r0, #19]
 8001cae:	f899 3018 	ldrb.w	r3, [r9, #24]
 8001cb2:	7e41      	ldrb	r1, [r0, #25]
 8001cb4:	4053      	eors	r3, r2
 8001cb6:	7603      	strb	r3, [r0, #24]
 8001cb8:	f899 3019 	ldrb.w	r3, [r9, #25]
 8001cbc:	7e82      	ldrb	r2, [r0, #26]
 8001cbe:	404b      	eors	r3, r1
 8001cc0:	7643      	strb	r3, [r0, #25]
 8001cc2:	f899 301a 	ldrb.w	r3, [r9, #26]
 8001cc6:	4053      	eors	r3, r2
 8001cc8:	7683      	strb	r3, [r0, #26]
 8001cca:	f899 201b 	ldrb.w	r2, [r9, #27]
 8001cce:	7ec3      	ldrb	r3, [r0, #27]
 8001cd0:	405a      	eors	r2, r3
  for (i = 0; i < 4; i++)
 8001cd2:	e623      	b.n	800191c <Encrypt+0x54>
      a[i][j] ^= rk[i][j];
 8001cd4:	f899 5140 	ldrb.w	r5, [r9, #320]	@ 0x140
 8001cd8:	9a08      	ldr	r2, [sp, #32]
 8001cda:	406a      	eors	r2, r5
 8001cdc:	7002      	strb	r2, [r0, #0]
 8001cde:	f899 5141 	ldrb.w	r5, [r9, #321]	@ 0x141
 8001ce2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001ce4:	406a      	eors	r2, r5
 8001ce6:	7042      	strb	r2, [r0, #1]
 8001ce8:	f899 5142 	ldrb.w	r5, [r9, #322]	@ 0x142
 8001cec:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8001cee:	406a      	eors	r2, r5
 8001cf0:	7082      	strb	r2, [r0, #2]
 8001cf2:	f899 5143 	ldrb.w	r5, [r9, #323]	@ 0x143
 8001cf6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8001cf8:	406a      	eors	r2, r5
 8001cfa:	70c2      	strb	r2, [r0, #3]
 8001cfc:	f899 5148 	ldrb.w	r5, [r9, #328]	@ 0x148
 8001d00:	9a07      	ldr	r2, [sp, #28]
 8001d02:	4069      	eors	r1, r5
 8001d04:	7201      	strb	r1, [r0, #8]
 8001d06:	f899 1149 	ldrb.w	r1, [r9, #329]	@ 0x149
 8001d0a:	404c      	eors	r4, r1
 8001d0c:	7244      	strb	r4, [r0, #9]
 8001d0e:	f899 114a 	ldrb.w	r1, [r9, #330]	@ 0x14a
 8001d12:	404a      	eors	r2, r1
 8001d14:	7282      	strb	r2, [r0, #10]
 8001d16:	f899 214b 	ldrb.w	r2, [r9, #331]	@ 0x14b
 8001d1a:	9902      	ldr	r1, [sp, #8]
 8001d1c:	4056      	eors	r6, r2
 8001d1e:	72c6      	strb	r6, [r0, #11]
 8001d20:	f899 2150 	ldrb.w	r2, [r9, #336]	@ 0x150
 8001d24:	4051      	eors	r1, r2
 8001d26:	7401      	strb	r1, [r0, #16]
 8001d28:	f899 2151 	ldrb.w	r2, [r9, #337]	@ 0x151
 8001d2c:	9900      	ldr	r1, [sp, #0]
 8001d2e:	4051      	eors	r1, r2
 8001d30:	7441      	strb	r1, [r0, #17]
 8001d32:	f899 2152 	ldrb.w	r2, [r9, #338]	@ 0x152
 8001d36:	9906      	ldr	r1, [sp, #24]
 8001d38:	4051      	eors	r1, r2
 8001d3a:	7481      	strb	r1, [r0, #18]
 8001d3c:	f899 2153 	ldrb.w	r2, [r9, #339]	@ 0x153
 8001d40:	9901      	ldr	r1, [sp, #4]
 8001d42:	4051      	eors	r1, r2
 8001d44:	74c1      	strb	r1, [r0, #19]
 8001d46:	f899 2158 	ldrb.w	r2, [r9, #344]	@ 0x158
 8001d4a:	ea88 0802 	eor.w	r8, r8, r2
 8001d4e:	f880 8018 	strb.w	r8, [r0, #24]
 8001d52:	f899 2159 	ldrb.w	r2, [r9, #345]	@ 0x159
 8001d56:	ea8c 0c02 	eor.w	ip, ip, r2
 8001d5a:	f880 c019 	strb.w	ip, [r0, #25]
 8001d5e:	f899 215a 	ldrb.w	r2, [r9, #346]	@ 0x15a
 8001d62:	ea8e 0e02 	eor.w	lr, lr, r2
 8001d66:	f880 e01a 	strb.w	lr, [r0, #26]
 8001d6a:	f899 215b 	ldrb.w	r2, [r9, #347]	@ 0x15b
 8001d6e:	4053      	eors	r3, r2
 8001d70:	76c3      	strb	r3, [r0, #27]
}
 8001d72:	2000      	movs	r0, #0
 8001d74:	b00d      	add	sp, #52	@ 0x34
 8001d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000078 	.word	0x20000078

08001d80 <AES128_encrypt>:
   */
  AddRoundKey(a, rk[0]);
  return 0;
}

void AES128_encrypt(word8* block, const word8* key) {
 8001d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d84:	4604      	mov	r4, r0
  word8 a[4][MAXBC], rk[MAXROUNDS + 1][4][MAXBC], sk[4][MAXKC];
  for (int j=0; j<4; j++) {
      for (int i=0; i<4; i++) {
          a[i][j] = block[4*j+i];
 8001d86:	f890 8000 	ldrb.w	r8, [r0]
 8001d8a:	7922      	ldrb	r2, [r4, #4]
          sk[i][j] = key[4*j+i];
 8001d8c:	f891 e000 	ldrb.w	lr, [r1]
          a[i][j] = block[4*j+i];
 8001d90:	f890 c001 	ldrb.w	ip, [r0, #1]
          sk[i][j] = key[4*j+i];
 8001d94:	7908      	ldrb	r0, [r1, #4]
          a[i][j] = block[4*j+i];
 8001d96:	7963      	ldrb	r3, [r4, #5]
          sk[i][j] = key[4*j+i];
 8001d98:	784f      	ldrb	r7, [r1, #1]
 8001d9a:	794e      	ldrb	r6, [r1, #5]
          a[i][j] = block[4*j+i];
 8001d9c:	2500      	movs	r5, #0
 8001d9e:	f368 0507 	bfi	r5, r8, #0, #8
 8001da2:	f362 250f 	bfi	r5, r2, #8, #8
          sk[i][j] = key[4*j+i];
 8001da6:	2200      	movs	r2, #0
 8001da8:	f36e 0207 	bfi	r2, lr, #0, #8
 8001dac:	f360 220f 	bfi	r2, r0, #8, #8
          a[i][j] = block[4*j+i];
 8001db0:	2000      	movs	r0, #0
 8001db2:	f36c 0007 	bfi	r0, ip, #0, #8
 8001db6:	f363 200f 	bfi	r0, r3, #8, #8
          sk[i][j] = key[4*j+i];
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f367 0307 	bfi	r3, r7, #0, #8
 8001dc0:	f366 230f 	bfi	r3, r6, #8, #8
 8001dc4:	7a0e      	ldrb	r6, [r1, #8]
          a[i][j] = block[4*j+i];
 8001dc6:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8001dca:	f894 8002 	ldrb.w	r8, [r4, #2]
          sk[i][j] = key[4*j+i];
 8001dce:	788f      	ldrb	r7, [r1, #2]
 8001dd0:	f891 e003 	ldrb.w	lr, [r1, #3]
 8001dd4:	f366 4217 	bfi	r2, r6, #16, #8
 8001dd8:	7a4e      	ldrb	r6, [r1, #9]
 8001dda:	f366 4317 	bfi	r3, r6, #16, #8
          a[i][j] = block[4*j+i];
 8001dde:	7a66      	ldrb	r6, [r4, #9]
 8001de0:	f366 4017 	bfi	r0, r6, #16, #8
 8001de4:	7a26      	ldrb	r6, [r4, #8]
 8001de6:	f366 4517 	bfi	r5, r6, #16, #8
 8001dea:	f36c 651f 	bfi	r5, ip, #24, #8
          sk[i][j] = key[4*j+i];
 8001dee:	7b0e      	ldrb	r6, [r1, #12]
          a[i][j] = block[4*j+i];
 8001df0:	f894 c00d 	ldrb.w	ip, [r4, #13]
void AES128_encrypt(word8* block, const word8* key) {
 8001df4:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
          sk[i][j] = key[4*j+i];
 8001df8:	f366 621f 	bfi	r2, r6, #24, #8
          a[i][j] = block[4*j+i];
 8001dfc:	f36c 601f 	bfi	r0, ip, #24, #8
          sk[i][j] = key[4*j+i];
 8001e00:	7b4e      	ldrb	r6, [r1, #13]
          a[i][j] = block[4*j+i];
 8001e02:	9500      	str	r5, [sp, #0]
 8001e04:	9002      	str	r0, [sp, #8]
 8001e06:	2500      	movs	r5, #0
 8001e08:	79a0      	ldrb	r0, [r4, #6]
          sk[i][j] = key[4*j+i];
 8001e0a:	9208      	str	r2, [sp, #32]
 8001e0c:	f366 631f 	bfi	r3, r6, #24, #8
          a[i][j] = block[4*j+i];
 8001e10:	f368 0507 	bfi	r5, r8, #0, #8
          sk[i][j] = key[4*j+i];
 8001e14:	930a      	str	r3, [sp, #40]	@ 0x28
          a[i][j] = block[4*j+i];
 8001e16:	f360 250f 	bfi	r5, r0, #8, #8
          sk[i][j] = key[4*j+i];
 8001e1a:	798b      	ldrb	r3, [r1, #6]
          a[i][j] = block[4*j+i];
 8001e1c:	78e6      	ldrb	r6, [r4, #3]
 8001e1e:	79e2      	ldrb	r2, [r4, #7]
          sk[i][j] = key[4*j+i];
 8001e20:	f891 c007 	ldrb.w	ip, [r1, #7]
 8001e24:	2000      	movs	r0, #0
 8001e26:	f367 0007 	bfi	r0, r7, #0, #8
 8001e2a:	f363 200f 	bfi	r0, r3, #8, #8
          a[i][j] = block[4*j+i];
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f366 0307 	bfi	r3, r6, #0, #8
 8001e34:	f362 230f 	bfi	r3, r2, #8, #8
          sk[i][j] = key[4*j+i];
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f36e 0207 	bfi	r2, lr, #0, #8
 8001e3e:	f36c 220f 	bfi	r2, ip, #8, #8
 8001e42:	f891 c00a 	ldrb.w	ip, [r1, #10]
 8001e46:	f36c 4017 	bfi	r0, ip, #16, #8
 8001e4a:	f891 c00b 	ldrb.w	ip, [r1, #11]
 8001e4e:	f36c 4217 	bfi	r2, ip, #16, #8
          a[i][j] = block[4*j+i];
 8001e52:	f894 c00a 	ldrb.w	ip, [r4, #10]
 8001e56:	f36c 4517 	bfi	r5, ip, #16, #8
 8001e5a:	f894 c00b 	ldrb.w	ip, [r4, #11]
 8001e5e:	f36c 4317 	bfi	r3, ip, #16, #8
 8001e62:	f894 c00e 	ldrb.w	ip, [r4, #14]
 8001e66:	f36c 651f 	bfi	r5, ip, #24, #8
 8001e6a:	9504      	str	r5, [sp, #16]
          sk[i][j] = key[4*j+i];
 8001e6c:	7b8d      	ldrb	r5, [r1, #14]
 8001e6e:	7bc9      	ldrb	r1, [r1, #15]
 8001e70:	f361 621f 	bfi	r2, r1, #24, #8
 8001e74:	920e      	str	r2, [sp, #56]	@ 0x38
          a[i][j] = block[4*j+i];
 8001e76:	7be2      	ldrb	r2, [r4, #15]
          sk[i][j] = key[4*j+i];
 8001e78:	f365 601f 	bfi	r0, r5, #24, #8
          a[i][j] = block[4*j+i];
 8001e7c:	f362 631f 	bfi	r3, r2, #24, #8
          sk[i][j] = key[4*j+i];
 8001e80:	900c      	str	r0, [sp, #48]	@ 0x30
      }
  }
  KeyExpansion(sk, rk);
 8001e82:	a910      	add	r1, sp, #64	@ 0x40
 8001e84:	a808      	add	r0, sp, #32
          a[i][j] = block[4*j+i];
 8001e86:	9306      	str	r3, [sp, #24]
  KeyExpansion(sk, rk);
 8001e88:	f7ff fc3a 	bl	8001700 <KeyExpansion>
  Encrypt(a, rk);
 8001e8c:	a910      	add	r1, sp, #64	@ 0x40
 8001e8e:	4668      	mov	r0, sp
 8001e90:	f7ff fd1a 	bl	80018c8 <Encrypt>
  for (int j=0; j<4; j++) {
      for (int i=0; i<4; i++) {
          block[4*j+i] = a[i][j];
 8001e94:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8001e98:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8001e9c:	f89d 1002 	ldrb.w	r1, [sp, #2]
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f360 0307 	bfi	r3, r0, #0, #8
 8001ea6:	f362 230f 	bfi	r3, r2, #8, #8
 8001eaa:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8001eae:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001eb2:	f362 4317 	bfi	r3, r2, #16, #8
 8001eb6:	f89d 2019 	ldrb.w	r2, [sp, #25]
 8001eba:	f362 631f 	bfi	r3, r2, #24, #8
 8001ebe:	6063      	str	r3, [r4, #4]
 8001ec0:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f361 0307 	bfi	r3, r1, #0, #8
 8001eca:	f362 230f 	bfi	r3, r2, #8, #8
 8001ece:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8001ed2:	f89d 1000 	ldrb.w	r1, [sp]
 8001ed6:	f362 4317 	bfi	r3, r2, #16, #8
 8001eda:	f89d 201a 	ldrb.w	r2, [sp, #26]
 8001ede:	f362 631f 	bfi	r3, r2, #24, #8
 8001ee2:	60a3      	str	r3, [r4, #8]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8001eea:	f360 0207 	bfi	r2, r0, #0, #8
 8001eee:	f363 220f 	bfi	r2, r3, #8, #8
 8001ef2:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8001ef6:	f363 4217 	bfi	r2, r3, #16, #8
 8001efa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8001efe:	f363 621f 	bfi	r2, r3, #24, #8
 8001f02:	2300      	movs	r3, #0
 8001f04:	f361 0307 	bfi	r3, r1, #0, #8
 8001f08:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8001f0c:	60e2      	str	r2, [r4, #12]
 8001f0e:	f361 230f 	bfi	r3, r1, #8, #8
 8001f12:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8001f16:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8001f1a:	f361 4317 	bfi	r3, r1, #16, #8
 8001f1e:	f362 631f 	bfi	r3, r2, #24, #8
 8001f22:	6023      	str	r3, [r4, #0]
      }
  }
}
 8001f24:	f50d 7d08 	add.w	sp, sp, #544	@ 0x220
 8001f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001f2c <arm_absmax_q15>:
void arm_absmax_q15(
  const q15_t * pSrc,
        uint32_t blockSize,
        q15_t * pResult,
        uint32_t * pIndex)
{
 8001f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        uint32_t index;                                /* index of maximum value */                         \
                                                                                                            \
  /* Initialize index value to zero. */                                                                     \
  outIndex = 0U;                                                                                            \
  /* Load first input value that act as reference value for comparision */                                  \
  out = *pSrc++;                                                                                            \
 8001f30:	4680      	mov	r8, r0
 8001f32:	f938 cb02 	ldrsh.w	ip, [r8], #2
  out = (out > 0) ? out : (q15_t)__QSUB16(0, out);                                                                           \
 8001f36:	f1bc 0f00 	cmp.w	ip, #0
 8001f3a:	dc04      	bgt.n	8001f46 <arm_absmax_q15+0x1a>

__STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001f3c:	2400      	movs	r4, #0
 8001f3e:	fad4 f41c 	qsub16	r4, r4, ip
 8001f42:	fa0f fc84 	sxth.w	ip, r4
  /* Initialize index of extrema value. */                                                                  \
  index = 0U;                                                                                               \
                                                                                                            \
  /* Loop unrolling: Compute 4 outputs at a time */                                                         \
  blkCnt = (blockSize - 1U) >> 2U;                                                                          \
 8001f46:	f101 39ff 	add.w	r9, r1, #4294967295
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 8001f4a:	ea5f 0a99 	movs.w	sl, r9, lsr #2
 8001f4e:	d07c      	beq.n	800204a <arm_absmax_q15+0x11e>
  index = 0U;                                                                                               \
 8001f50:	2400      	movs	r4, #0
 8001f52:	300a      	adds	r0, #10
 8001f54:	ea4f 078a 	mov.w	r7, sl, lsl #2
  outIndex = 0U;                                                                                            \
 8001f58:	4625      	mov	r5, r4
 8001f5a:	4626      	mov	r6, r4
  {                                                                                                         \
    /* Initialize cur_absmax to next consecutive values one by one */                                         \
    cur_absmax = *pSrc++;                                                                                     \
 8001f5c:	f930 ec08 	ldrsh.w	lr, [r0, #-8]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8001f60:	f1be 0f00 	cmp.w	lr, #0
 8001f64:	dc03      	bgt.n	8001f6e <arm_absmax_q15+0x42>
 8001f66:	fad6 fe1e 	qsub16	lr, r6, lr
 8001f6a:	fa0f fe8e 	sxth.w	lr, lr
    /* compare for the extrema value */                                                                     \
    if (cur_absmax > out)                                                                         \
 8001f6e:	45e6      	cmp	lr, ip
    {                                                                                                       \
      /* Update the extrema value and it's index */                                                         \
      out = cur_absmax;                                                                                       \
      outIndex = index + 1U;                                                                                \
 8001f70:	bfc8      	it	gt
 8001f72:	46f4      	movgt	ip, lr
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8001f74:	f930 ec06 	ldrsh.w	lr, [r0, #-6]
      outIndex = index + 1U;                                                                                \
 8001f78:	bfc8      	it	gt
 8001f7a:	1c65      	addgt	r5, r4, #1
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8001f7c:	f1be 0f00 	cmp.w	lr, #0
 8001f80:	dc03      	bgt.n	8001f8a <arm_absmax_q15+0x5e>
 8001f82:	fad6 fe1e 	qsub16	lr, r6, lr
 8001f86:	fa0f fe8e 	sxth.w	lr, lr
    if (cur_absmax > out)                                                                         \
 8001f8a:	45f4      	cmp	ip, lr
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
      outIndex = index + 2U;                                                                                \
 8001f8c:	bfb8      	it	lt
 8001f8e:	46f4      	movlt	ip, lr
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8001f90:	f930 ec04 	ldrsh.w	lr, [r0, #-4]
      outIndex = index + 2U;                                                                                \
 8001f94:	bfb8      	it	lt
 8001f96:	1ca5      	addlt	r5, r4, #2
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8001f98:	f1be 0f00 	cmp.w	lr, #0
 8001f9c:	dc03      	bgt.n	8001fa6 <arm_absmax_q15+0x7a>
 8001f9e:	fad6 fe1e 	qsub16	lr, r6, lr
 8001fa2:	fa0f fe8e 	sxth.w	lr, lr
    if (cur_absmax > out)                                                                          \
 8001fa6:	45f4      	cmp	ip, lr
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
      outIndex = index + 3U;                                                                                \
 8001fa8:	bfa8      	it	ge
 8001faa:	46e6      	movge	lr, ip
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8001fac:	f930 cc02 	ldrsh.w	ip, [r0, #-2]
      outIndex = index + 3U;                                                                                \
 8001fb0:	bfb8      	it	lt
 8001fb2:	1ce5      	addlt	r5, r4, #3
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8001fb4:	f1bc 0f00 	cmp.w	ip, #0
 8001fb8:	dc03      	bgt.n	8001fc2 <arm_absmax_q15+0x96>
 8001fba:	fad6 fc1c 	qsub16	ip, r6, ip
 8001fbe:	fa0f fc8c 	sxth.w	ip, ip
    if (cur_absmax > out)                                                                          \
 8001fc2:	45e6      	cmp	lr, ip
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
      outIndex = index + 4U;                                                                                \
 8001fc4:	f104 0404 	add.w	r4, r4, #4
    if (cur_absmax > out)                                                                          \
 8001fc8:	bfac      	ite	ge
 8001fca:	46f4      	movge	ip, lr
      outIndex = index + 4U;                                                                                \
 8001fcc:	4625      	movlt	r5, r4
  while (blkCnt > 0U)                                                                                       \
 8001fce:	42bc      	cmp	r4, r7
 8001fd0:	f100 0008 	add.w	r0, r0, #8
 8001fd4:	d1c2      	bne.n	8001f5c <arm_absmax_q15+0x30>
    cur_absmax = *pSrc++;                                                                                     \
 8001fd6:	eb08 08ca 	add.w	r8, r8, sl, lsl #3
                                                                                                            \
  /* Loop unrolling: Compute remaining outputs */                                                           \
  blkCnt = (blockSize - 1U) % 4U;                                                                           \
                                                                                                            \
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 8001fda:	f019 0403 	ands.w	r4, r9, #3
 8001fde:	d01f      	beq.n	8002020 <arm_absmax_q15+0xf4>
  {                                                                                                         \
    cur_absmax = *pSrc++;                                                                                     \
 8001fe0:	f9b8 0000 	ldrsh.w	r0, [r8]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	dd20      	ble.n	800202a <arm_absmax_q15+0xfe>
    if (cur_absmax > out)                                                                         \
 8001fe8:	4560      	cmp	r0, ip
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
      outIndex = blockSize - blkCnt;                                                                        \
 8001fea:	bfc4      	itt	gt
 8001fec:	4684      	movgt	ip, r0
 8001fee:	1b0d      	subgt	r5, r1, r4
  while (blkCnt > 0U)                                                                                       \
 8001ff0:	1e66      	subs	r6, r4, #1
 8001ff2:	d015      	beq.n	8002020 <arm_absmax_q15+0xf4>
    cur_absmax = *pSrc++;                                                                                     \
 8001ff4:	f9b8 0002 	ldrsh.w	r0, [r8, #2]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8001ff8:	2800      	cmp	r0, #0
 8001ffa:	dd1b      	ble.n	8002034 <arm_absmax_q15+0x108>
    if (cur_absmax > out)                                                                         \
 8001ffc:	4584      	cmp	ip, r0
      outIndex = blockSize - blkCnt;                                                                        \
 8001ffe:	bfbc      	itt	lt
 8002000:	1b8d      	sublt	r5, r1, r6
 8002002:	4684      	movlt	ip, r0
  while (blkCnt > 0U)                                                                                       \
 8002004:	2c02      	cmp	r4, #2
 8002006:	d00b      	beq.n	8002020 <arm_absmax_q15+0xf4>
    cur_absmax = *pSrc++;                                                                                     \
 8002008:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 800200c:	2900      	cmp	r1, #0
 800200e:	dc03      	bgt.n	8002018 <arm_absmax_q15+0xec>
 8002010:	2000      	movs	r0, #0
 8002012:	fad0 f111 	qsub16	r1, r0, r1
 8002016:	b209      	sxth	r1, r1
    if (cur_absmax > out)                                                                         \
 8002018:	4561      	cmp	r1, ip
 800201a:	bfc4      	itt	gt
 800201c:	464d      	movgt	r5, r9
 800201e:	468c      	movgt	ip, r1
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
  }                                                                                                         \
                                                                                                            \
  /* Store the extrema value and it's index into destination pointers */                                    \
  *pResult = out;                                                                                           \
 8002020:	f8a2 c000 	strh.w	ip, [r2]
  *pIndex = outIndex;
 8002024:	601d      	str	r5, [r3, #0]
}
 8002026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800202a:	2600      	movs	r6, #0
 800202c:	fad6 f010 	qsub16	r0, r6, r0
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8002030:	b200      	sxth	r0, r0
 8002032:	e7d9      	b.n	8001fe8 <arm_absmax_q15+0xbc>
 8002034:	2700      	movs	r7, #0
 8002036:	fad7 f010 	qsub16	r0, r7, r0
 800203a:	b200      	sxth	r0, r0
    if (cur_absmax > out)                                                                         \
 800203c:	4584      	cmp	ip, r0
      outIndex = blockSize - blkCnt;                                                                        \
 800203e:	bfbc      	itt	lt
 8002040:	1b8d      	sublt	r5, r1, r6
 8002042:	4684      	movlt	ip, r0
  while (blkCnt > 0U)                                                                                       \
 8002044:	2c02      	cmp	r4, #2
 8002046:	d1df      	bne.n	8002008 <arm_absmax_q15+0xdc>
 8002048:	e7ea      	b.n	8002020 <arm_absmax_q15+0xf4>
  outIndex = 0U;                                                                                            \
 800204a:	4655      	mov	r5, sl
 800204c:	e7c5      	b.n	8001fda <arm_absmax_q15+0xae>
 800204e:	bf00      	nop

08002050 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002050:	4b0a      	ldr	r3, [pc, #40]	@ (800207c <MX_DMA_Init+0x2c>)
{
 8002052:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002054:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8002056:	f041 0101 	orr.w	r1, r1, #1
 800205a:	6499      	str	r1, [r3, #72]	@ 0x48
 800205c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
{
 800205e:	b083      	sub	sp, #12

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8002060:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002062:	400b      	ands	r3, r1
 8002064:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8002066:	200b      	movs	r0, #11
 8002068:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800206a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800206c:	f002 fc18 	bl	80048a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002070:	200b      	movs	r0, #11

}
 8002072:	b003      	add	sp, #12
 8002074:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002078:	f002 bc4e 	b.w	8004918 <HAL_NVIC_EnableIRQ>
 800207c:	40021000 	.word	0x40021000

08002080 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8002080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	2400      	movs	r4, #0
{
 8002086:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800208c:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002090:	4b98      	ldr	r3, [pc, #608]	@ (80022f4 <MX_GPIO_Init+0x274>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002092:	940c      	str	r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002094:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  HAL_PWREx_EnableVddIO2();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8002096:	4f98      	ldr	r7, [pc, #608]	@ (80022f8 <MX_GPIO_Init+0x278>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_SET);
 8002098:	f8df a26c 	ldr.w	sl, [pc, #620]	@ 8002308 <MX_GPIO_Init+0x288>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_EEPROM_CSN_GPIO_Port, RADIO_EEPROM_CSN_Pin, GPIO_PIN_SET);
 800209c:	f8df 926c 	ldr.w	r9, [pc, #620]	@ 800230c <MX_GPIO_Init+0x28c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80020a0:	f8df 826c 	ldr.w	r8, [pc, #620]	@ 8002310 <MX_GPIO_Init+0x290>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80020a4:	4e95      	ldr	r6, [pc, #596]	@ (80022fc <MX_GPIO_Init+0x27c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020a6:	f042 0210 	orr.w	r2, r2, #16
 80020aa:	64da      	str	r2, [r3, #76]	@ 0x4c
 80020ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020ae:	f002 0210 	and.w	r2, r2, #16
 80020b2:	9200      	str	r2, [sp, #0]
 80020b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020b8:	f042 0204 	orr.w	r2, r2, #4
 80020bc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80020be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020c0:	f002 0204 	and.w	r2, r2, #4
 80020c4:	9201      	str	r2, [sp, #4]
 80020c6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020ca:	f042 0220 	orr.w	r2, r2, #32
 80020ce:	64da      	str	r2, [r3, #76]	@ 0x4c
 80020d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020d2:	f002 0220 	and.w	r2, r2, #32
 80020d6:	9202      	str	r2, [sp, #8]
 80020d8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80020e0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80020e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020e4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80020e8:	9203      	str	r2, [sp, #12]
 80020ea:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020ee:	f042 0201 	orr.w	r2, r2, #1
 80020f2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80020f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020f6:	f002 0201 	and.w	r2, r2, #1
 80020fa:	9204      	str	r2, [sp, #16]
 80020fc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002100:	f042 0202 	orr.w	r2, r2, #2
 8002104:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002106:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002108:	f002 0202 	and.w	r2, r2, #2
 800210c:	9205      	str	r2, [sp, #20]
 800210e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002110:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002112:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002116:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002118:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800211a:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800211e:	9206      	str	r2, [sp, #24]
 8002120:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002122:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002124:	f042 0208 	orr.w	r2, r2, #8
 8002128:	64da      	str	r2, [r3, #76]	@ 0x4c
 800212a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	9307      	str	r3, [sp, #28]
 8002132:	9b07      	ldr	r3, [sp, #28]
  HAL_PWREx_EnableVddIO2();
 8002134:	f002 feba 	bl	8004eac <HAL_PWREx_EnableVddIO2>
  HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8002138:	2201      	movs	r2, #1
 800213a:	4611      	mov	r1, r2
 800213c:	4638      	mov	r0, r7
 800213e:	f002 fe5b 	bl	8004df8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_SET);
 8002142:	4650      	mov	r0, sl
 8002144:	2201      	movs	r2, #1
 8002146:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800214a:	f002 fe55 	bl	8004df8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_EEPROM_CSN_GPIO_Port, RADIO_EEPROM_CSN_Pin, GPIO_PIN_SET);
 800214e:	4648      	mov	r0, r9
 8002150:	2201      	movs	r2, #1
 8002152:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002156:	f002 fe4f 	bl	8004df8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800215a:	4622      	mov	r2, r4
 800215c:	4640      	mov	r0, r8
 800215e:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8002162:	f002 fe49 	bl	8004df8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002166:	4622      	mov	r2, r4
 8002168:	4630      	mov	r0, r6
 800216a:	2140      	movs	r1, #64	@ 0x40
 800216c:	f002 fe44 	bl	8004df8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002170:	a908      	add	r1, sp, #32
 8002172:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002174:	f24d 72ff 	movw	r2, #55295	@ 0xd7ff
 8002178:	2303      	movs	r3, #3
 800217a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002180:	f002 fd16 	bl	8004bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002184:	a908      	add	r1, sp, #32
 8002186:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = B1_Pin;
 8002188:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800218c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002190:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002196:	f002 fd0b 	bl	8004bb0 <HAL_GPIO_Init>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800219a:	a908      	add	r1, sp, #32
 800219c:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800219e:	f64d 72ff 	movw	r2, #57343	@ 0xdfff
 80021a2:	2303      	movs	r3, #3
 80021a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021aa:	f002 fd01 	bl	8004bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80021ae:	2209      	movs	r2, #9
 80021b0:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80021b2:	a908      	add	r1, sp, #32
 80021b4:	4852      	ldr	r0, [pc, #328]	@ (8002300 <MX_GPIO_Init+0x280>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	940a      	str	r4, [sp, #40]	@ 0x28

  /*Configure GPIO pin : RADIO_S2LP_CSN_Pin */
  GPIO_InitStruct.Pin = RADIO_S2LP_CSN_Pin;
 80021b8:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80021ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021be:	f04f 0b03 	mov.w	fp, #3
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80021c2:	f002 fcf5 	bl	8004bb0 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_S2LP_CSN_GPIO_Port, &GPIO_InitStruct);
 80021c6:	a908      	add	r1, sp, #32
 80021c8:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ca:	e9cd 5508 	strd	r5, r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ce:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
  HAL_GPIO_Init(RADIO_S2LP_CSN_GPIO_Port, &GPIO_InitStruct);
 80021d2:	f002 fced 	bl	8004bb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d6:	4638      	mov	r0, r7
 80021d8:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80021da:	f641 72fe 	movw	r2, #8190	@ 0x1ffe
 80021de:	2303      	movs	r3, #3
 80021e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e6:	f002 fce3 	bl	8004bb0 <HAL_GPIO_Init>
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ea:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 80021ec:	f248 0236 	movw	r2, #32822	@ 0x8036
 80021f0:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 80021f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fc:	f002 fcd8 	bl	8004bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RADIO_INT_Pin */
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8002200:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 8002202:	2208      	movs	r2, #8
 8002204:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8002208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 800220c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8002212:	f002 fccd 	bl	8004bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB15
                           PB4 PB5 PB6 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8002216:	f64b 7277 	movw	r2, #49015	@ 0xbf77
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221a:	a908      	add	r1, sp, #32
 800221c:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800221e:	2303      	movs	r3, #3
 8002220:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002226:	f002 fcc3 	bl	8004bb0 <HAL_GPIO_Init>
  /*Configure GPIO pin : RADIO_SDN_Pin */
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 800222a:	4650      	mov	r0, sl
 800222c:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
 800222e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002232:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002238:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 800223a:	f002 fcb9 	bl	8004bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800223e:	f64f 621f 	movw	r2, #65055	@ 0xfe1f
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002242:	a908      	add	r1, sp, #32
 8002244:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002246:	2303      	movs	r3, #3
 8002248:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224c:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800224e:	f002 fcaf 	bl	8004bb0 <HAL_GPIO_Init>
  /*Configure GPIO pin : RADIO_EEPROM_CSN_Pin */
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 8002252:	4648      	mov	r0, r9
 8002254:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
 8002256:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800225a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 8002262:	f002 fca5 	bl	8004bb0 <HAL_GPIO_Init>
  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002266:	4640      	mov	r0, r8
 8002268:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800226a:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800226e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002274:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002276:	f002 fc9b 	bl	8004bb0 <HAL_GPIO_Init>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800227a:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800227c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002280:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002282:	4820      	ldr	r0, [pc, #128]	@ (8002304 <MX_GPIO_Init+0x284>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002286:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800228a:	f002 fc91 	bl	8004bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800228e:	2220      	movs	r2, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002290:	a908      	add	r1, sp, #32
 8002292:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002294:	2300      	movs	r3, #0
 8002296:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800229c:	f002 fc88 	bl	8004bb0 <HAL_GPIO_Init>
  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80022a0:	a908      	add	r1, sp, #32
 80022a2:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80022a4:	2340      	movs	r3, #64	@ 0x40
 80022a6:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a8:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ac:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80022ae:	f002 fc7f 	bl	8004bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80022b2:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80022b6:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ba:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022bc:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80022c2:	230a      	movs	r3, #10
 80022c4:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ca:	f002 fc71 	bl	8004bb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80022ce:	4622      	mov	r2, r4
 80022d0:	4621      	mov	r1, r4
 80022d2:	2009      	movs	r0, #9
 80022d4:	f002 fae4 	bl	80048a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80022d8:	2009      	movs	r0, #9
 80022da:	f002 fb1d 	bl	8004918 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80022de:	4622      	mov	r2, r4
 80022e0:	4621      	mov	r1, r4
 80022e2:	2028      	movs	r0, #40	@ 0x28
 80022e4:	f002 fadc 	bl	80048a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022e8:	2028      	movs	r0, #40	@ 0x28
 80022ea:	f002 fb15 	bl	8004918 <HAL_NVIC_EnableIRQ>

}
 80022ee:	b00f      	add	sp, #60	@ 0x3c
 80022f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	48000800 	.word	0x48000800
 80022fc:	48001800 	.word	0x48001800
 8002300:	48001c00 	.word	0x48001c00
 8002304:	48000c00 	.word	0x48000c00
 8002308:	48001400 	.word	0x48001400
 800230c:	48001000 	.word	0x48001000
 8002310:	48000400 	.word	0x48000400

08002314 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if (GPIO_Pin == B1_Pin) {
 8002314:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8002318:	d002      	beq.n	8002320 <HAL_GPIO_EXTI_Callback+0xc>
		btn_press = 1;
	}
	else if (GPIO_Pin == RADIO_INT_Pin)
 800231a:	2808      	cmp	r0, #8
 800231c:	d004      	beq.n	8002328 <HAL_GPIO_EXTI_Callback+0x14>
		S2LP_IRQ_Handler();
}
 800231e:	4770      	bx	lr
		btn_press = 1;
 8002320:	4b02      	ldr	r3, [pc, #8]	@ (800232c <HAL_GPIO_EXTI_Callback+0x18>)
 8002322:	2201      	movs	r2, #1
 8002324:	701a      	strb	r2, [r3, #0]
 8002326:	4770      	bx	lr
		S2LP_IRQ_Handler();
 8002328:	f001 b9c0 	b.w	80036ac <S2LP_IRQ_Handler>
 800232c:	20003d4c 	.word	0x20003d4c

08002330 <run>:
	}
}

void run(void)
{
	btn_press = 0;
 8002330:	4d14      	ldr	r5, [pc, #80]	@ (8002384 <run+0x54>)

	while (1)
	{
	  while (!btn_press) {
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8002332:	4e15      	ldr	r6, [pc, #84]	@ (8002388 <run+0x58>)
{
 8002334:	b580      	push	{r7, lr}
	btn_press = 0;
 8002336:	2700      	movs	r7, #0
 8002338:	702f      	strb	r7, [r5, #0]
	  while (!btn_press) {
 800233a:	782b      	ldrb	r3, [r5, #0]
 800233c:	f003 04ff 	and.w	r4, r3, #255	@ 0xff
 8002340:	b9a3      	cbnz	r3, 800236c <run+0x3c>
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8002342:	2180      	movs	r1, #128	@ 0x80
 8002344:	2201      	movs	r2, #1
 8002346:	4630      	mov	r0, r6
 8002348:	f002 fd56 	bl	8004df8 <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 800234c:	20c8      	movs	r0, #200	@ 0xc8
 800234e:	f001 fc63 	bl	8003c18 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8002352:	4622      	mov	r2, r4
 8002354:	4630      	mov	r0, r6
 8002356:	2180      	movs	r1, #128	@ 0x80
 8002358:	f002 fd4e 	bl	8004df8 <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 800235c:	20c8      	movs	r0, #200	@ 0xc8
 800235e:	f001 fc5b 	bl	8003c18 <HAL_Delay>
	  while (!btn_press) {
 8002362:	782b      	ldrb	r3, [r5, #0]
 8002364:	f003 04ff 	and.w	r4, r3, #255	@ 0xff
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0ea      	beq.n	8002342 <run+0x12>
	if (StartADCAcq(N_MELVECS) != HAL_OK) {
 800236c:	2014      	movs	r0, #20
	  }
	  btn_press = 0;
 800236e:	702f      	strb	r7, [r5, #0]
	if (StartADCAcq(N_MELVECS) != HAL_OK) {
 8002370:	f7fe fe92 	bl	8001098 <StartADCAcq>
	while (!IsADCFinished()) {
 8002374:	e000      	b.n	8002378 <run+0x48>
		__WFI();
 8002376:	bf30      	wfi
	while (!IsADCFinished()) {
 8002378:	f7fe fea6 	bl	80010c8 <IsADCFinished>
 800237c:	2800      	cmp	r0, #0
 800237e:	d0fa      	beq.n	8002376 <run+0x46>
 8002380:	e7db      	b.n	800233a <run+0xa>
 8002382:	bf00      	nop
 8002384:	20003d4c 	.word	0x20003d4c
 8002388:	48000400 	.word	0x48000400

0800238c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
 8002390:	b672      	cpsid	i
 8002392:	4f18      	ldr	r7, [pc, #96]	@ (80023f4 <Error_Handler+0x68>)
  __disable_irq();
  DEBUG_PRINT("Entering error Handler\r\n");
  while (1)
  {
	  // Blink LED3 (red)
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8002394:	4e18      	ldr	r6, [pc, #96]	@ (80023f8 <Error_Handler+0x6c>)
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8002396:	4d19      	ldr	r5, [pc, #100]	@ (80023fc <Error_Handler+0x70>)
 8002398:	2400      	movs	r4, #0
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800239a:	2201      	movs	r2, #1
 800239c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80023a0:	4630      	mov	r0, r6
 80023a2:	f002 fd29 	bl	8004df8 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	9400      	str	r4, [sp, #0]
 80023aa:	9900      	ldr	r1, [sp, #0]
 80023ac:	fba5 2303 	umull	r2, r3, r5, r3
 80023b0:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
 80023b4:	ea4f 1293 	mov.w	r2, r3, lsr #6
 80023b8:	d205      	bcs.n	80023c6 <Error_Handler+0x3a>
 80023ba:	9b00      	ldr	r3, [sp, #0]
 80023bc:	3301      	adds	r3, #1
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	9b00      	ldr	r3, [sp, #0]
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d3f9      	bcc.n	80023ba <Error_Handler+0x2e>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80023c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80023ca:	2200      	movs	r2, #0
 80023cc:	4630      	mov	r0, r6
 80023ce:	f002 fd13 	bl	8004df8 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	9401      	str	r4, [sp, #4]
 80023d6:	9a01      	ldr	r2, [sp, #4]
 80023d8:	fba5 1303 	umull	r1, r3, r5, r3
 80023dc:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
 80023e0:	ea4f 1193 	mov.w	r1, r3, lsr #6
 80023e4:	d2d9      	bcs.n	800239a <Error_Handler+0xe>
 80023e6:	9b01      	ldr	r3, [sp, #4]
 80023e8:	3301      	adds	r3, #1
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	9b01      	ldr	r3, [sp, #4]
 80023ee:	428b      	cmp	r3, r1
 80023f0:	d3f9      	bcc.n	80023e6 <Error_Handler+0x5a>
 80023f2:	e7d2      	b.n	800239a <Error_Handler+0xe>
 80023f4:	20002f78 	.word	0x20002f78
 80023f8:	48000400 	.word	0x48000400
 80023fc:	51eb851f 	.word	0x51eb851f

08002400 <SystemClock_Config>:
{
 8002400:	b510      	push	{r4, lr}
 8002402:	b098      	sub	sp, #96	@ 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002404:	2244      	movs	r2, #68	@ 0x44
 8002406:	2100      	movs	r1, #0
 8002408:	a806      	add	r0, sp, #24
 800240a:	f006 fbf2 	bl	8008bf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800240e:	2300      	movs	r3, #0
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002410:	f44f 7000 	mov.w	r0, #512	@ 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002414:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8002418:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800241c:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800241e:	f002 fd05 	bl	8004e2c <HAL_PWREx_ControlVoltageScaling>
 8002422:	b9e0      	cbnz	r0, 800245e <SystemClock_Config+0x5e>
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002424:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8002468 <SystemClock_Config+0x68>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002428:	2210      	movs	r2, #16
 800242a:	4603      	mov	r3, r0
 800242c:	9206      	str	r2, [sp, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800242e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8002430:	22b0      	movs	r2, #176	@ 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002432:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002434:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8002438:	920e      	str	r2, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800243a:	f002 fddf 	bl	8004ffc <HAL_RCC_OscConfig>
 800243e:	4603      	mov	r3, r0
 8002440:	b968      	cbnz	r0, 800245e <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002442:	240f      	movs	r4, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002444:	2280      	movs	r2, #128	@ 0x80
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002446:	2101      	movs	r1, #1
 8002448:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800244a:	e9cd 4301 	strd	r4, r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800244e:	e9cd 2303 	strd	r2, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002452:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002454:	f003 f8de 	bl	8005614 <HAL_RCC_ClockConfig>
 8002458:	b908      	cbnz	r0, 800245e <SystemClock_Config+0x5e>
}
 800245a:	b018      	add	sp, #96	@ 0x60
 800245c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800245e:	f7ff ff95 	bl	800238c <Error_Handler>
 8002462:	bf00      	nop
 8002464:	f3af 8000 	nop.w
 8002468:	00000001 	.word	0x00000001
 800246c:	00000000 	.word	0x00000000

08002470 <main>:
{
 8002470:	b508      	push	{r3, lr}
  HAL_Init();
 8002472:	f001 fbaf 	bl	8003bd4 <HAL_Init>
  SystemClock_Config();
 8002476:	f7ff ffc3 	bl	8002400 <SystemClock_Config>
  MX_GPIO_Init();
 800247a:	f7ff fe01 	bl	8002080 <MX_GPIO_Init>
  MX_DMA_Init();
 800247e:	f7ff fde7 	bl	8002050 <MX_DMA_Init>
  MX_SPI1_Init();
 8002482:	f001 fa07 	bl	8003894 <MX_SPI1_Init>
  MX_TIM3_Init();
 8002486:	f001 faf7 	bl	8003a78 <MX_TIM3_Init>
  MX_ADC1_Init();
 800248a:	f7fe fd15 	bl	8000eb8 <MX_ADC1_Init>
  RetargetInit(&hlpuart1);
 800248e:	480a      	ldr	r0, [pc, #40]	@ (80024b8 <main+0x48>)
 8002490:	f000 f8a6 	bl	80025e0 <RetargetInit>
  HAL_StatusTypeDef err = S2LP_Init(&hspi1);
 8002494:	4809      	ldr	r0, [pc, #36]	@ (80024bc <main+0x4c>)
 8002496:	f001 f873 	bl	8003580 <S2LP_Init>
  if (err)  {
 800249a:	b920      	cbnz	r0, 80024a6 <main+0x36>
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 800249c:	4808      	ldr	r0, [pc, #32]	@ (80024c0 <main+0x50>)
 800249e:	217f      	movs	r1, #127	@ 0x7f
 80024a0:	f002 f932 	bl	8004708 <HAL_ADCEx_Calibration_Start>
 80024a4:	b108      	cbz	r0, 80024aa <main+0x3a>
	  Error_Handler();
 80024a6:	f7ff ff71 	bl	800238c <Error_Handler>
  if (HAL_TIM_Base_Start(&htim3) != HAL_OK) {
 80024aa:	4806      	ldr	r0, [pc, #24]	@ (80024c4 <main+0x54>)
 80024ac:	f004 f864 	bl	8006578 <HAL_TIM_Base_Start>
 80024b0:	2800      	cmp	r0, #0
 80024b2:	d1f8      	bne.n	80024a6 <main+0x36>
  run();
 80024b4:	f7ff ff3c 	bl	8002330 <run>
 80024b8:	20004c18 	.word	0x20004c18
 80024bc:	20004b60 	.word	0x20004b60
 80024c0:	200031b4 	.word	0x200031b4
 80024c4:	20004bc8 	.word	0x20004bc8

080024c8 <tag_cbc_mac>:
                            0x00,0x00,0x00,0x00,
							0x00,0x00,0x00,0x00,
							0x00,0x00,0x00,0x00,
							0x00,0x00,0x00,0x00};

void tag_cbc_mac(uint8_t *tag, const uint8_t *msg, size_t msg_len) {
 80024c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t i;


    // TO DO : Complete the CBC-MAC_AES
	// Parse msg into blocks of 16 bytes
	size_t num_blocks = (msg_len + 15) / 16;
 80024cc:	f102 0e0f 	add.w	lr, r2, #15
void tag_cbc_mac(uint8_t *tag, const uint8_t *msg, size_t msg_len) {
 80024d0:	b08d      	sub	sp, #52	@ 0x34
	uint8_t block[16];

	// Initialize state to 0
	memset(state, 0, 16);
 80024d2:	2400      	movs	r4, #0

	for (i = 0; i < num_blocks; i++) {
 80024d4:	ea5f 1b1e 	movs.w	fp, lr, lsr #4
	memset(state, 0, 16);
 80024d8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80024dc:	e9cd 4406 	strd	r4, r4, [sp, #24]
void tag_cbc_mac(uint8_t *tag, const uint8_t *msg, size_t msg_len) {
 80024e0:	4684      	mov	ip, r0
	for (i = 0; i < num_blocks; i++) {
 80024e2:	d045      	beq.n	8002570 <tag_cbc_mac+0xa8>
		// Copy the current block into the block buffer
		size_t block_len = (i == num_blocks - 1) ? (msg_len % 16) : 16;
 80024e4:	f002 020f 	and.w	r2, r2, #15
		memcpy(block, msg + i * 16, block_len);

		// If the last block is not 16 bytes, pad with zeros
		if (block_len < 16) {
			memset(block + block_len, 0, 16 - block_len);
 80024e8:	f1c2 0310 	rsb	r3, r2, #16
 80024ec:	e9cd 3002 	strd	r3, r0, [sp, #8]
 80024f0:	4688      	mov	r8, r1
		size_t block_len = (i == num_blocks - 1) ? (msg_len % 16) : 16;
 80024f2:	f10b 3aff 	add.w	sl, fp, #4294967295
 80024f6:	4627      	mov	r7, r4
 80024f8:	4626      	mov	r6, r4
 80024fa:	4625      	mov	r5, r4
	for (i = 0; i < num_blocks; i++) {
 80024fc:	46a1      	mov	r9, r4
			memset(block + block_len, 0, 16 - block_len);
 80024fe:	9201      	str	r2, [sp, #4]
 8002500:	e023      	b.n	800254a <tag_cbc_mac+0x82>
		memcpy(block, msg + i * 16, block_len);
 8002502:	f8d8 0000 	ldr.w	r0, [r8]
 8002506:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800250a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800250e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8002512:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
		}

		// XOR the block with the current state
		for (size_t j = 0; j < 16; j++) {
			state[j] ^= block[j];
 8002516:	e9dd 0209 	ldrd	r0, r2, [sp, #36]	@ 0x24
 800251a:	9908      	ldr	r1, [sp, #32]
 800251c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800251e:	4070      	eors	r0, r6
 8002520:	404d      	eors	r5, r1
 8002522:	e9cd 5004 	strd	r5, r0, [sp, #16]
 8002526:	407a      	eors	r2, r7
 8002528:	4063      	eors	r3, r4
		}

		// Encrypt the state with AES
		AES128_encrypt(state, AES_Key);
 800252a:	4918      	ldr	r1, [pc, #96]	@ (800258c <tag_cbc_mac+0xc4>)
	for (i = 0; i < num_blocks; i++) {
 800252c:	f109 0901 	add.w	r9, r9, #1
		AES128_encrypt(state, AES_Key);
 8002530:	a804      	add	r0, sp, #16
			state[j] ^= block[j];
 8002532:	e9cd 2306 	strd	r2, r3, [sp, #24]
		AES128_encrypt(state, AES_Key);
 8002536:	f7ff fc23 	bl	8001d80 <AES128_encrypt>
	for (i = 0; i < num_blocks; i++) {
 800253a:	45cb      	cmp	fp, r9
 800253c:	f108 0810 	add.w	r8, r8, #16
 8002540:	d014      	beq.n	800256c <tag_cbc_mac+0xa4>
	}

    // Copy the result of CBC-MAC-AES to the tag.
    for (int j=0; j<16; j++) {
        tag[j] = state[j];
 8002542:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
 8002546:	e9dd 7406 	ldrd	r7, r4, [sp, #24]
		size_t block_len = (i == num_blocks - 1) ? (msg_len % 16) : 16;
 800254a:	45d1      	cmp	r9, sl
		memcpy(block, msg + i * 16, block_len);
 800254c:	f10d 0c20 	add.w	ip, sp, #32
		size_t block_len = (i == num_blocks - 1) ? (msg_len % 16) : 16;
 8002550:	d1d7      	bne.n	8002502 <tag_cbc_mac+0x3a>
		memcpy(block, msg + i * 16, block_len);
 8002552:	9a01      	ldr	r2, [sp, #4]
 8002554:	4641      	mov	r1, r8
 8002556:	4660      	mov	r0, ip
 8002558:	f006 fbcb 	bl	8008cf2 <memcpy>
			memset(block + block_len, 0, 16 - block_len);
 800255c:	9801      	ldr	r0, [sp, #4]
 800255e:	9a02      	ldr	r2, [sp, #8]
 8002560:	ab08      	add	r3, sp, #32
 8002562:	2100      	movs	r1, #0
 8002564:	1818      	adds	r0, r3, r0
 8002566:	f006 fb44 	bl	8008bf2 <memset>
 800256a:	e7d4      	b.n	8002516 <tag_cbc_mac+0x4e>
 800256c:	f8dd c00c 	ldr.w	ip, [sp, #12]
        tag[j] = state[j];
 8002570:	ac04      	add	r4, sp, #16
 8002572:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002574:	f8cc 0000 	str.w	r0, [ip]
 8002578:	f8cc 1004 	str.w	r1, [ip, #4]
 800257c:	f8cc 2008 	str.w	r2, [ip, #8]
 8002580:	f8cc 300c 	str.w	r3, [ip, #12]
    }
}
 8002584:	b00d      	add	sp, #52	@ 0x34
 8002586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800258a:	bf00      	nop
 800258c:	0800aa7c 	.word	0x0800aa7c

08002590 <make_packet>:

// Assumes payload is already in place in the packet
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 8002590:	b510      	push	{r4, lr}
 8002592:	460c      	mov	r4, r1
 8002594:	4696      	mov	lr, r2
    size_t packet_len = payload_len + PACKET_HEADER_LENGTH + PACKET_TAG_LENGTH;
    // Initially, the whole packet header is set to 0s
    memset(packet, 0, PACKET_HEADER_LENGTH);
    // So is the tag
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 8002596:	f104 0208 	add.w	r2, r4, #8
    memset(packet, 0, PACKET_HEADER_LENGTH);
 800259a:	f04f 0c00 	mov.w	ip, #0
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 800259e:	f840 c002 	str.w	ip, [r0, r2]
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 80025a2:	4601      	mov	r1, r0
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 80025a4:	4410      	add	r0, r2
 80025a6:	f8c0 c004 	str.w	ip, [r0, #4]
 80025aa:	f8c0 c008 	str.w	ip, [r0, #8]
 80025ae:	f8c0 c00c 	str.w	ip, [r0, #12]
	 *		 	This will be helpful when setting fields that are on multiple bytes.
	*/

	// For the tag field, you have to calculate the tag. The function call below is correct but
	// tag_cbc_mac function, calculating the tag, is not implemented.
	packet[0] = 0x00;
 80025b2:	f881 c000 	strb.w	ip, [r1]
	packet[1] = sender_id;
	packet[2] = (payload_len >> 8) & 0xFF;
	packet[3] = payload_len & 0xFF;
	packet[4] = (serial >> 24) & 0xFF;
 80025b6:	ea4f 6c13 	mov.w	ip, r3, lsr #24
	packet[5] = (serial >> 16) & 0xFF;
	packet[6] = (serial >> 8)  & 0XFF;
	packet[7] = serial & 0xFF;
 80025ba:	71cb      	strb	r3, [r1, #7]
	packet[4] = (serial >> 24) & 0xFF;
 80025bc:	f881 c004 	strb.w	ip, [r1, #4]
	packet[5] = (serial >> 16) & 0xFF;
 80025c0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
	packet[6] = (serial >> 8)  & 0XFF;
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	718b      	strb	r3, [r1, #6]
	packet[2] = (payload_len >> 8) & 0xFF;
 80025c8:	0a23      	lsrs	r3, r4, #8
	packet[1] = sender_id;
 80025ca:	f881 e001 	strb.w	lr, [r1, #1]
	packet[3] = payload_len & 0xFF;
 80025ce:	70cc      	strb	r4, [r1, #3]
	packet[5] = (serial >> 16) & 0xFF;
 80025d0:	f881 c005 	strb.w	ip, [r1, #5]
	packet[2] = (payload_len >> 8) & 0xFF;
 80025d4:	708b      	strb	r3, [r1, #2]

    tag_cbc_mac(packet + payload_len + PACKET_HEADER_LENGTH, packet, payload_len + PACKET_HEADER_LENGTH);
 80025d6:	f7ff ff77 	bl	80024c8 <tag_cbc_mac>

    return packet_len;
}
 80025da:	f104 0018 	add.w	r0, r4, #24
 80025de:	bd10      	pop	{r4, pc}

080025e0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80025e0:	b430      	push	{r4, r5}
  gHuart = huart;

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80025e2:	4b06      	ldr	r3, [pc, #24]	@ (80025fc <RetargetInit+0x1c>)
  gHuart = huart;
 80025e4:	4906      	ldr	r1, [pc, #24]	@ (8002600 <RetargetInit+0x20>)
  setvbuf(stdout, NULL, _IONBF, 0);
 80025e6:	681d      	ldr	r5, [r3, #0]
void RetargetInit(UART_HandleTypeDef *huart) {
 80025e8:	4604      	mov	r4, r0
  setvbuf(stdout, NULL, _IONBF, 0);
 80025ea:	2300      	movs	r3, #0
  gHuart = huart;
 80025ec:	600c      	str	r4, [r1, #0]
  setvbuf(stdout, NULL, _IONBF, 0);
 80025ee:	68a8      	ldr	r0, [r5, #8]
 80025f0:	2202      	movs	r2, #2
}
 80025f2:	bc30      	pop	{r4, r5}
  setvbuf(stdout, NULL, _IONBF, 0);
 80025f4:	4619      	mov	r1, r3
 80025f6:	f006 ba05 	b.w	8008a04 <setvbuf>
 80025fa:	bf00      	nop
 80025fc:	20002f90 	.word	0x20002f90
 8002600:	20003d50 	.word	0x20003d50

08002604 <_isatty>:

int _isatty(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002604:	2802      	cmp	r0, #2
 8002606:	d801      	bhi.n	800260c <_isatty+0x8>
    return 1;
 8002608:	2001      	movs	r0, #1

  errno = EBADF;
  return 0;
}
 800260a:	4770      	bx	lr
int _isatty(int fd) {
 800260c:	b508      	push	{r3, lr}
  errno = EBADF;
 800260e:	f006 fb43 	bl	8008c98 <__errno>
 8002612:	2309      	movs	r3, #9
 8002614:	6003      	str	r3, [r0, #0]
  return 0;
 8002616:	2000      	movs	r0, #0
}
 8002618:	bd08      	pop	{r3, pc}
 800261a:	bf00      	nop

0800261c <_write>:

int _write(int fd, char* ptr, int len) {
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800261c:	3801      	subs	r0, #1
 800261e:	2801      	cmp	r0, #1
int _write(int fd, char* ptr, int len) {
 8002620:	b510      	push	{r4, lr}
  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8002622:	d80c      	bhi.n	800263e <_write+0x22>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8002624:	4614      	mov	r4, r2
 8002626:	4a09      	ldr	r2, [pc, #36]	@ (800264c <_write+0x30>)
 8002628:	f04f 33ff 	mov.w	r3, #4294967295
 800262c:	6810      	ldr	r0, [r2, #0]
 800262e:	b2a2      	uxth	r2, r4
 8002630:	f004 f990 	bl	8006954 <HAL_UART_Transmit>
    if (hstatus == HAL_OK)
      return len;
 8002634:	2800      	cmp	r0, #0
 8002636:	bf0c      	ite	eq
 8002638:	4620      	moveq	r0, r4
 800263a:	2005      	movne	r0, #5
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 800263c:	bd10      	pop	{r4, pc}
  errno = EBADF;
 800263e:	f006 fb2b 	bl	8008c98 <__errno>
 8002642:	2309      	movs	r3, #9
 8002644:	6003      	str	r3, [r0, #0]
  return -1;
 8002646:	f04f 30ff 	mov.w	r0, #4294967295
}
 800264a:	bd10      	pop	{r4, pc}
 800264c:	20003d50 	.word	0x20003d50

08002650 <_close>:

int _close(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8002650:	2802      	cmp	r0, #2
 8002652:	d801      	bhi.n	8002658 <_close+0x8>
    return 0;
 8002654:	2000      	movs	r0, #0

  errno = EBADF;
  return -1;
}
 8002656:	4770      	bx	lr
int _close(int fd) {
 8002658:	b508      	push	{r3, lr}
  errno = EBADF;
 800265a:	f006 fb1d 	bl	8008c98 <__errno>
 800265e:	2309      	movs	r3, #9
 8002660:	6003      	str	r3, [r0, #0]
  return -1;
 8002662:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002666:	bd08      	pop	{r3, pc}

08002668 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8002668:	b508      	push	{r3, lr}
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800266a:	f006 fb15 	bl	8008c98 <__errno>
 800266e:	2309      	movs	r3, #9
 8002670:	6003      	str	r3, [r0, #0]
  return -1;
}
 8002672:	f04f 30ff 	mov.w	r0, #4294967295
 8002676:	bd08      	pop	{r3, pc}

08002678 <_read>:

int _read(int fd, char* ptr, int len) {
 8002678:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800267a:	b958      	cbnz	r0, 8002694 <_read+0x1c>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800267c:	4a09      	ldr	r2, [pc, #36]	@ (80026a4 <_read+0x2c>)
 800267e:	f04f 33ff 	mov.w	r3, #4294967295
 8002682:	6810      	ldr	r0, [r2, #0]
 8002684:	2201      	movs	r2, #1
 8002686:	f004 f9d5 	bl	8006a34 <HAL_UART_Receive>
    if (hstatus == HAL_OK)
      return 1;
 800268a:	2800      	cmp	r0, #0
 800268c:	bf14      	ite	ne
 800268e:	2005      	movne	r0, #5
 8002690:	2001      	moveq	r0, #1
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 8002692:	bd08      	pop	{r3, pc}
  errno = EBADF;
 8002694:	f006 fb00 	bl	8008c98 <__errno>
 8002698:	2309      	movs	r3, #9
 800269a:	6003      	str	r3, [r0, #0]
  return -1;
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80026a0:	bd08      	pop	{r3, pc}
 80026a2:	bf00      	nop
 80026a4:	20003d50 	.word	0x20003d50

080026a8 <_fstat>:

int _fstat(int fd, struct stat* st) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80026a8:	2802      	cmp	r0, #2
int _fstat(int fd, struct stat* st) {
 80026aa:	b508      	push	{r3, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80026ac:	d804      	bhi.n	80026b8 <_fstat+0x10>
    st->st_mode = S_IFCHR;
 80026ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026b2:	604b      	str	r3, [r1, #4]
    return 0;
  }

  errno = EBADF;
  return 0;
}
 80026b4:	2000      	movs	r0, #0
 80026b6:	bd08      	pop	{r3, pc}
  errno = EBADF;
 80026b8:	f006 faee 	bl	8008c98 <__errno>
 80026bc:	2309      	movs	r3, #9
 80026be:	6003      	str	r3, [r0, #0]
}
 80026c0:	2000      	movs	r0, #0
 80026c2:	bd08      	pop	{r3, pc}

080026c4 <S2LP_Command>:
volatile uint8_t underflow = 0;

volatile uint16_t n_chunks_tx = 0;

HAL_StatusTypeDef S2LP_Command(uint8_t cmd, S2LPStatus *status)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	4603      	mov	r3, r0
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	71fb      	strb	r3, [r7, #7]
	uint8_t TxBuf[2] = {0x80, cmd};
 80026d0:	2380      	movs	r3, #128	@ 0x80
 80026d2:	733b      	strb	r3, [r7, #12]
 80026d4:	79fb      	ldrb	r3, [r7, #7]
 80026d6:	737b      	strb	r3, [r7, #13]
 80026d8:	b672      	cpsid	i
}
 80026da:	bf00      	nop
	uint8_t RxBuf[2];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 80026dc:	2200      	movs	r2, #0
 80026de:	2101      	movs	r1, #1
 80026e0:	480f      	ldr	r0, [pc, #60]	@ (8002720 <S2LP_Command+0x5c>)
 80026e2:	f002 fb89 	bl	8004df8 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 2, HAL_MAX_DELAY);
 80026e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002724 <S2LP_Command+0x60>)
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	f107 0208 	add.w	r2, r7, #8
 80026ee:	f107 010c 	add.w	r1, r7, #12
 80026f2:	f04f 33ff 	mov.w	r3, #4294967295
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	2302      	movs	r3, #2
 80026fa:	f003 fd1b 	bl	8006134 <HAL_SPI_TransmitReceive>
 80026fe:	4603      	mov	r3, r0
 8002700:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8002702:	2201      	movs	r2, #1
 8002704:	2101      	movs	r1, #1
 8002706:	4806      	ldr	r0, [pc, #24]	@ (8002720 <S2LP_Command+0x5c>)
 8002708:	f002 fb76 	bl	8004df8 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 800270c:	b662      	cpsie	i
}
 800270e:	bf00      	nop
	__enable_irq();

	memcpy(status, &RxBuf[0], 2);
 8002710:	893a      	ldrh	r2, [r7, #8]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	801a      	strh	r2, [r3, #0]
	return err;
 8002716:	7bfb      	ldrb	r3, [r7, #15]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	48000800 	.word	0x48000800
 8002724:	20003d58 	.word	0x20003d58

08002728 <S2LP_ReadReg>:

HAL_StatusTypeDef S2LP_ReadReg(uint8_t addr, uint8_t *retval, S2LPStatus *status)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b088      	sub	sp, #32
 800272c:	af02      	add	r7, sp, #8
 800272e:	4603      	mov	r3, r0
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	73fb      	strb	r3, [r7, #15]
	uint8_t TxBuf[] = {0x01, addr, 0x0};
 8002736:	2301      	movs	r3, #1
 8002738:	753b      	strb	r3, [r7, #20]
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	757b      	strb	r3, [r7, #21]
 800273e:	2300      	movs	r3, #0
 8002740:	75bb      	strb	r3, [r7, #22]
  __ASM volatile ("cpsid i" : : : "memory");
 8002742:	b672      	cpsid	i
}
 8002744:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8002746:	2200      	movs	r2, #0
 8002748:	2101      	movs	r1, #1
 800274a:	4814      	ldr	r0, [pc, #80]	@ (800279c <S2LP_ReadReg+0x74>)
 800274c:	f002 fb54 	bl	8004df8 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 8002750:	4b13      	ldr	r3, [pc, #76]	@ (80027a0 <S2LP_ReadReg+0x78>)
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	f107 0210 	add.w	r2, r7, #16
 8002758:	f107 0114 	add.w	r1, r7, #20
 800275c:	f04f 33ff 	mov.w	r3, #4294967295
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	2303      	movs	r3, #3
 8002764:	f003 fce6 	bl	8006134 <HAL_SPI_TransmitReceive>
 8002768:	4603      	mov	r3, r0
 800276a:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 800276c:	2201      	movs	r2, #1
 800276e:	2101      	movs	r1, #1
 8002770:	480a      	ldr	r0, [pc, #40]	@ (800279c <S2LP_ReadReg+0x74>)
 8002772:	f002 fb41 	bl	8004df8 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8002776:	b662      	cpsie	i
}
 8002778:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d002      	beq.n	8002786 <S2LP_ReadReg+0x5e>
		memcpy(status, &RxBuf[0], 2);
 8002780:	8a3a      	ldrh	r2, [r7, #16]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	801a      	strh	r2, [r3, #0]
	if (retval != NULL)
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <S2LP_ReadReg+0x6a>
		*retval = RxBuf[2];
 800278c:	7cba      	ldrb	r2, [r7, #18]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	701a      	strb	r2, [r3, #0]
	return err;
 8002792:	7dfb      	ldrb	r3, [r7, #23]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	48000800 	.word	0x48000800
 80027a0:	20003d58 	.word	0x20003d58

080027a4 <S2LP_WriteReg>:

HAL_StatusTypeDef S2LP_WriteReg(uint8_t addr, uint8_t val, S2LPStatus *status)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	4603      	mov	r3, r0
 80027ac:	603a      	str	r2, [r7, #0]
 80027ae:	71fb      	strb	r3, [r7, #7]
 80027b0:	460b      	mov	r3, r1
 80027b2:	71bb      	strb	r3, [r7, #6]
	uint8_t TxBuf[] = {0x00, addr, val};
 80027b4:	2300      	movs	r3, #0
 80027b6:	733b      	strb	r3, [r7, #12]
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	737b      	strb	r3, [r7, #13]
 80027bc:	79bb      	ldrb	r3, [r7, #6]
 80027be:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 80027c0:	b672      	cpsid	i
}
 80027c2:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 80027c4:	2200      	movs	r2, #0
 80027c6:	2101      	movs	r1, #1
 80027c8:	4811      	ldr	r0, [pc, #68]	@ (8002810 <S2LP_WriteReg+0x6c>)
 80027ca:	f002 fb15 	bl	8004df8 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 80027ce:	4b11      	ldr	r3, [pc, #68]	@ (8002814 <S2LP_WriteReg+0x70>)
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	f107 0208 	add.w	r2, r7, #8
 80027d6:	f107 010c 	add.w	r1, r7, #12
 80027da:	f04f 33ff 	mov.w	r3, #4294967295
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	2303      	movs	r3, #3
 80027e2:	f003 fca7 	bl	8006134 <HAL_SPI_TransmitReceive>
 80027e6:	4603      	mov	r3, r0
 80027e8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 80027ea:	2201      	movs	r2, #1
 80027ec:	2101      	movs	r1, #1
 80027ee:	4808      	ldr	r0, [pc, #32]	@ (8002810 <S2LP_WriteReg+0x6c>)
 80027f0:	f002 fb02 	bl	8004df8 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 80027f4:	b662      	cpsie	i
}
 80027f6:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <S2LP_WriteReg+0x60>
		memcpy(status, &RxBuf[0], 2);
 80027fe:	893a      	ldrh	r2, [r7, #8]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	801a      	strh	r2, [r3, #0]
	return err;
 8002804:	7bfb      	ldrb	r3, [r7, #15]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	48000800 	.word	0x48000800
 8002814:	20003d58 	.word	0x20003d58

08002818 <S2LP_WriteTxFIFO>:

HAL_StatusTypeDef S2LP_WriteTxFIFO(uint8_t *chunk, uint8_t chunk_len, S2LPStatus *status)
{
 8002818:	b590      	push	{r4, r7, lr}
 800281a:	b08d      	sub	sp, #52	@ 0x34
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	460b      	mov	r3, r1
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	72fb      	strb	r3, [r7, #11]
	uint8_t TxBuf[FIFO_CHUNK_SIZE+2];
	uint8_t RxBuf[FIFO_CHUNK_SIZE+2];
	TxBuf[0] = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	773b      	strb	r3, [r7, #28]
	TxBuf[1] = 0xFF;
 800282a:	23ff      	movs	r3, #255	@ 0xff
 800282c:	777b      	strb	r3, [r7, #29]
	memcpy((void *)&TxBuf[2], (void *)chunk, chunk_len);
 800282e:	7afa      	ldrb	r2, [r7, #11]
 8002830:	f107 031c 	add.w	r3, r7, #28
 8002834:	3302      	adds	r3, #2
 8002836:	68f9      	ldr	r1, [r7, #12]
 8002838:	4618      	mov	r0, r3
 800283a:	f006 fa5a 	bl	8008cf2 <memcpy>
  __ASM volatile ("cpsid i" : : : "memory");
 800283e:	b672      	cpsid	i
}
 8002840:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8002842:	2200      	movs	r2, #0
 8002844:	2101      	movs	r1, #1
 8002846:	4814      	ldr	r0, [pc, #80]	@ (8002898 <S2LP_WriteTxFIFO+0x80>)
 8002848:	f002 fad6 	bl	8004df8 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, chunk_len+2, HAL_MAX_DELAY);
 800284c:	4b13      	ldr	r3, [pc, #76]	@ (800289c <S2LP_WriteTxFIFO+0x84>)
 800284e:	6818      	ldr	r0, [r3, #0]
 8002850:	7afb      	ldrb	r3, [r7, #11]
 8002852:	b29b      	uxth	r3, r3
 8002854:	3302      	adds	r3, #2
 8002856:	b29b      	uxth	r3, r3
 8002858:	f107 0210 	add.w	r2, r7, #16
 800285c:	f107 011c 	add.w	r1, r7, #28
 8002860:	f04f 34ff 	mov.w	r4, #4294967295
 8002864:	9400      	str	r4, [sp, #0]
 8002866:	f003 fc65 	bl	8006134 <HAL_SPI_TransmitReceive>
 800286a:	4603      	mov	r3, r0
 800286c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8002870:	2201      	movs	r2, #1
 8002872:	2101      	movs	r1, #1
 8002874:	4808      	ldr	r0, [pc, #32]	@ (8002898 <S2LP_WriteTxFIFO+0x80>)
 8002876:	f002 fabf 	bl	8004df8 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 800287a:	b662      	cpsie	i
}
 800287c:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d002      	beq.n	800288a <S2LP_WriteTxFIFO+0x72>
		memcpy(status, &RxBuf[0], 2);
 8002884:	8a3a      	ldrh	r2, [r7, #16]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	801a      	strh	r2, [r3, #0]
	return err;
 800288a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800288e:	4618      	mov	r0, r3
 8002890:	372c      	adds	r7, #44	@ 0x2c
 8002892:	46bd      	mov	sp, r7
 8002894:	bd90      	pop	{r4, r7, pc}
 8002896:	bf00      	nop
 8002898:	48000800 	.word	0x48000800
 800289c:	20003d58 	.word	0x20003d58

080028a0 <S2LP_Send>:

HAL_StatusTypeDef S2LP_Send(uint8_t *payload, uint16_t pay_len)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]
	S2LPStatus radio_status;
	HAL_StatusTypeDef err;

	// Flush the Tx FIFO
	S2LP_Command(CMD_FLUSHTXFIFO, &radio_status);
 80028ac:	f107 030c 	add.w	r3, r7, #12
 80028b0:	4619      	mov	r1, r3
 80028b2:	2072      	movs	r0, #114	@ 0x72
 80028b4:	f7ff ff06 	bl	80026c4 <S2LP_Command>
	if (radio_status.MC_STATE != MC_STATE_READY) {
 80028b8:	7b7b      	ldrb	r3, [r7, #13]
 80028ba:	f023 0301 	bic.w	r3, r3, #1
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <S2LP_Send+0x28>
		DEBUG_PRINT("[S2LP] Error: radio is not ready\r\n");
		return HAL_BUSY;
 80028c4:	2302      	movs	r3, #2
 80028c6:	e0b0      	b.n	8002a2a <S2LP_Send+0x18a>
	}
	// Reset global interrupt variables
	packet_sent = 0;
 80028c8:	4b5a      	ldr	r3, [pc, #360]	@ (8002a34 <S2LP_Send+0x194>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	701a      	strb	r2, [r3, #0]
	underflow = 0;
 80028ce:	4b5a      	ldr	r3, [pc, #360]	@ (8002a38 <S2LP_Send+0x198>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]
	fifo_almost_empty = 0;
 80028d4:	4b59      	ldr	r3, [pc, #356]	@ (8002a3c <S2LP_Send+0x19c>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	701a      	strb	r2, [r3, #0]

	// Set the packet length
	S2LP_WriteReg(PCKTLEN1_ADDR, (uint8_t) (pay_len >> 8), NULL);
 80028da:	887b      	ldrh	r3, [r7, #2]
 80028dc:	0a1b      	lsrs	r3, r3, #8
 80028de:	b29b      	uxth	r3, r3
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2200      	movs	r2, #0
 80028e4:	4619      	mov	r1, r3
 80028e6:	2031      	movs	r0, #49	@ 0x31
 80028e8:	f7ff ff5c 	bl	80027a4 <S2LP_WriteReg>
	S2LP_WriteReg(PCKTLEN0_ADDR, (uint8_t) (pay_len & 0xFF), NULL);
 80028ec:	887b      	ldrh	r3, [r7, #2]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2200      	movs	r2, #0
 80028f2:	4619      	mov	r1, r3
 80028f4:	2032      	movs	r0, #50	@ 0x32
 80028f6:	f7ff ff55 	bl	80027a4 <S2LP_WriteReg>

	// Switch to lock Tx state
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 80028fa:	e00c      	b.n	8002916 <S2LP_Send+0x76>
		err = S2LP_Command(CMD_LOCKTX, &radio_status);
 80028fc:	f107 030c 	add.w	r3, r7, #12
 8002900:	4619      	mov	r1, r3
 8002902:	2066      	movs	r0, #102	@ 0x66
 8002904:	f7ff fede 	bl	80026c4 <S2LP_Command>
 8002908:	4603      	mov	r3, r0
 800290a:	73bb      	strb	r3, [r7, #14]
		if (err) {
 800290c:	7bbb      	ldrb	r3, [r7, #14]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <S2LP_Send+0x76>
			DEBUG_PRINT("[S2LP] Error: cannot lock on Tx\r\n");
			return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e089      	b.n	8002a2a <S2LP_Send+0x18a>
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 8002916:	7b7b      	ldrb	r3, [r7, #13]
 8002918:	f023 0301 	bic.w	r3, r3, #1
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b18      	cmp	r3, #24
 8002920:	d1ec      	bne.n	80028fc <S2LP_Send+0x5c>
		}
	}

	// Fill Tx FIFO with payload chunks
	uint8_t sending = 0;
 8002922:	2300      	movs	r3, #0
 8002924:	75fb      	strb	r3, [r7, #23]
	uint16_t n_chunks = (pay_len / FIFO_CHUNK_SIZE) + (pay_len % FIFO_CHUNK_SIZE != 0);
 8002926:	887b      	ldrh	r3, [r7, #2]
 8002928:	08db      	lsrs	r3, r3, #3
 800292a:	b29b      	uxth	r3, r3
 800292c:	887a      	ldrh	r2, [r7, #2]
 800292e:	f002 0207 	and.w	r2, r2, #7
 8002932:	b292      	uxth	r2, r2
 8002934:	2a00      	cmp	r2, #0
 8002936:	bf14      	ite	ne
 8002938:	2201      	movne	r2, #1
 800293a:	2200      	moveq	r2, #0
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	4413      	add	r3, r2
 8002940:	823b      	strh	r3, [r7, #16]

	uint16_t free_chunks = FIFO_SIZE / FIFO_CHUNK_SIZE;
 8002942:	2310      	movs	r3, #16
 8002944:	82bb      	strh	r3, [r7, #20]

	for(uint16_t i=0; i < n_chunks; i++) {
 8002946:	2300      	movs	r3, #0
 8002948:	827b      	strh	r3, [r7, #18]
 800294a:	e059      	b.n	8002a00 <S2LP_Send+0x160>
		if (underflow) {
 800294c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a38 <S2LP_Send+0x198>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d028      	beq.n	80029a8 <S2LP_Send+0x108>
			DEBUG_PRINT("[S2LP] Error: Tx FIFO overflow or underflow!\r\n");
			err = S2LP_ReadReg(0, NULL, &radio_status); // fetch radio state
 8002956:	f107 030c 	add.w	r3, r7, #12
 800295a:	461a      	mov	r2, r3
 800295c:	2100      	movs	r1, #0
 800295e:	2000      	movs	r0, #0
 8002960:	f7ff fee2 	bl	8002728 <S2LP_ReadReg>
 8002964:	4603      	mov	r3, r0
 8002966:	73bb      	strb	r3, [r7, #14]
			if (!err) {
 8002968:	7bbb      	ldrb	r3, [r7, #14]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d104      	bne.n	8002978 <S2LP_Send+0xd8>
				S2LP_PrintStatus(&radio_status);
 800296e:	f107 030c 	add.w	r3, r7, #12
 8002972:	4618      	mov	r0, r3
 8002974:	f000 f864 	bl	8002a40 <S2LP_PrintStatus>
			} else {
				DEBUG_PRINT("[S2LP] Error: unable to fetch radio status!\r\n");
			}
			return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e056      	b.n	8002a2a <S2LP_Send+0x18a>
		}

		while (free_chunks == 0) {
			if (!sending) {// if FIFO is full and we are not sending yet ...
 800297c:	7dfb      	ldrb	r3, [r7, #23]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d107      	bne.n	8002992 <S2LP_Send+0xf2>
				S2LP_Command(CMD_TX, &radio_status); // start the transmission
 8002982:	f107 030c 	add.w	r3, r7, #12
 8002986:	4619      	mov	r1, r3
 8002988:	2060      	movs	r0, #96	@ 0x60
 800298a:	f7ff fe9b 	bl	80026c4 <S2LP_Command>
				sending = 1;
 800298e:	2301      	movs	r3, #1
 8002990:	75fb      	strb	r3, [r7, #23]
			}
//			stop_cycle_count("Radio WFI");
			__WFI();
 8002992:	bf30      	wfi
//			start_cycle_count();
			if (fifo_almost_empty) {
 8002994:	4b29      	ldr	r3, [pc, #164]	@ (8002a3c <S2LP_Send+0x19c>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d004      	beq.n	80029a8 <S2LP_Send+0x108>
				free_chunks = FIFO_SIZE/FIFO_CHUNK_SIZE - FIFO_EMPTY_THRESH;
 800299e:	230c      	movs	r3, #12
 80029a0:	82bb      	strh	r3, [r7, #20]
				fifo_almost_empty = 0;
 80029a2:	4b26      	ldr	r3, [pc, #152]	@ (8002a3c <S2LP_Send+0x19c>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
		while (free_chunks == 0) {
 80029a8:	8abb      	ldrh	r3, [r7, #20]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0e6      	beq.n	800297c <S2LP_Send+0xdc>
			}
		}

		uint8_t chunk_len = (i == n_chunks-1) ? pay_len-(n_chunks-1)*FIFO_CHUNK_SIZE : FIFO_CHUNK_SIZE;
 80029ae:	8a7a      	ldrh	r2, [r7, #18]
 80029b0:	8a3b      	ldrh	r3, [r7, #16]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d109      	bne.n	80029cc <S2LP_Send+0x12c>
 80029b8:	887b      	ldrh	r3, [r7, #2]
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	8a3b      	ldrh	r3, [r7, #16]
 80029be:	3b01      	subs	r3, #1
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	e000      	b.n	80029ce <S2LP_Send+0x12e>
 80029cc:	2308      	movs	r3, #8
 80029ce:	73fb      	strb	r3, [r7, #15]
		err = S2LP_WriteTxFIFO(&payload[i*FIFO_CHUNK_SIZE], chunk_len, &radio_status);
 80029d0:	8a7b      	ldrh	r3, [r7, #18]
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	461a      	mov	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4413      	add	r3, r2
 80029da:	f107 020c 	add.w	r2, r7, #12
 80029de:	7bf9      	ldrb	r1, [r7, #15]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff ff19 	bl	8002818 <S2LP_WriteTxFIFO>
 80029e6:	4603      	mov	r3, r0
 80029e8:	73bb      	strb	r3, [r7, #14]
		if (err) {
 80029ea:	7bbb      	ldrb	r3, [r7, #14]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <S2LP_Send+0x154>
			DEBUG_PRINT("[S2LP] Error: cannot fill Tx FIFO\r\n");
			return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e01a      	b.n	8002a2a <S2LP_Send+0x18a>
		}
		free_chunks--;
 80029f4:	8abb      	ldrh	r3, [r7, #20]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i < n_chunks; i++) {
 80029fa:	8a7b      	ldrh	r3, [r7, #18]
 80029fc:	3301      	adds	r3, #1
 80029fe:	827b      	strh	r3, [r7, #18]
 8002a00:	8a7a      	ldrh	r2, [r7, #18]
 8002a02:	8a3b      	ldrh	r3, [r7, #16]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d3a1      	bcc.n	800294c <S2LP_Send+0xac>
	}

	// Start transmission (for short payloads)
	if (!sending) {
 8002a08:	7dfb      	ldrb	r3, [r7, #23]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d107      	bne.n	8002a1e <S2LP_Send+0x17e>
		S2LP_Command(CMD_TX, &radio_status);
 8002a0e:	f107 030c 	add.w	r3, r7, #12
 8002a12:	4619      	mov	r1, r3
 8002a14:	2060      	movs	r0, #96	@ 0x60
 8002a16:	f7ff fe55 	bl	80026c4 <S2LP_Command>
	}

	while (!packet_sent) {
 8002a1a:	e000      	b.n	8002a1e <S2LP_Send+0x17e>
//		stop_cycle_count("Radio WFI");
		__WFI(); // wait until packet has been fully transmitted
 8002a1c:	bf30      	wfi
	while (!packet_sent) {
 8002a1e:	4b05      	ldr	r3, [pc, #20]	@ (8002a34 <S2LP_Send+0x194>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f9      	beq.n	8002a1c <S2LP_Send+0x17c>
//		start_cycle_count();
	}

	DEBUG_PRINT("[S2LP] Packet transmitted!\r\n");
	return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20003d54 	.word	0x20003d54
 8002a38:	20003d56 	.word	0x20003d56
 8002a3c:	20003d55 	.word	0x20003d55

08002a40 <S2LP_PrintStatus>:

void S2LP_PrintStatus(S2LPStatus *status)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
	DEBUG_PRINT("=== S2LP Status ===\r\n");
	DEBUG_PRINT("  MC_STATE: ");
	switch (status->MC_STATE) {
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	785b      	ldrb	r3, [r3, #1]
 8002a4c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b5c      	cmp	r3, #92	@ 0x5c
 8002a54:	d06f      	beq.n	8002b36 <S2LP_PrintStatus+0xf6>
 8002a56:	2b5c      	cmp	r3, #92	@ 0x5c
 8002a58:	dc6f      	bgt.n	8002b3a <S2LP_PrintStatus+0xfa>
 8002a5a:	2b30      	cmp	r3, #48	@ 0x30
 8002a5c:	dc68      	bgt.n	8002b30 <S2LP_PrintStatus+0xf0>
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	db6b      	blt.n	8002b3a <S2LP_PrintStatus+0xfa>
 8002a62:	2b30      	cmp	r3, #48	@ 0x30
 8002a64:	d869      	bhi.n	8002b3a <S2LP_PrintStatus+0xfa>
 8002a66:	a201      	add	r2, pc, #4	@ (adr r2, 8002a6c <S2LP_PrintStatus+0x2c>)
 8002a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6c:	08002b3b 	.word	0x08002b3b
 8002a70:	08002b3b 	.word	0x08002b3b
 8002a74:	08002b3b 	.word	0x08002b3b
 8002a78:	08002b3b 	.word	0x08002b3b
 8002a7c:	08002b3b 	.word	0x08002b3b
 8002a80:	08002b3b 	.word	0x08002b3b
 8002a84:	08002b3b 	.word	0x08002b3b
 8002a88:	08002b3b 	.word	0x08002b3b
 8002a8c:	08002b3b 	.word	0x08002b3b
 8002a90:	08002b3b 	.word	0x08002b3b
 8002a94:	08002b3b 	.word	0x08002b3b
 8002a98:	08002b3b 	.word	0x08002b3b
 8002a9c:	08002b3b 	.word	0x08002b3b
 8002aa0:	08002b3b 	.word	0x08002b3b
 8002aa4:	08002b3b 	.word	0x08002b3b
 8002aa8:	08002b3b 	.word	0x08002b3b
 8002aac:	08002b3b 	.word	0x08002b3b
 8002ab0:	08002b3b 	.word	0x08002b3b
 8002ab4:	08002b3b 	.word	0x08002b3b
 8002ab8:	08002b3b 	.word	0x08002b3b
 8002abc:	08002b3b 	.word	0x08002b3b
 8002ac0:	08002b3b 	.word	0x08002b3b
 8002ac4:	08002b3b 	.word	0x08002b3b
 8002ac8:	08002b3b 	.word	0x08002b3b
 8002acc:	08002b3b 	.word	0x08002b3b
 8002ad0:	08002b3b 	.word	0x08002b3b
 8002ad4:	08002b3b 	.word	0x08002b3b
 8002ad8:	08002b3b 	.word	0x08002b3b
 8002adc:	08002b3b 	.word	0x08002b3b
 8002ae0:	08002b3b 	.word	0x08002b3b
 8002ae4:	08002b3b 	.word	0x08002b3b
 8002ae8:	08002b3b 	.word	0x08002b3b
 8002aec:	08002b3b 	.word	0x08002b3b
 8002af0:	08002b3b 	.word	0x08002b3b
 8002af4:	08002b3b 	.word	0x08002b3b
 8002af8:	08002b3b 	.word	0x08002b3b
 8002afc:	08002b3b 	.word	0x08002b3b
 8002b00:	08002b3b 	.word	0x08002b3b
 8002b04:	08002b3b 	.word	0x08002b3b
 8002b08:	08002b3b 	.word	0x08002b3b
 8002b0c:	08002b3b 	.word	0x08002b3b
 8002b10:	08002b3b 	.word	0x08002b3b
 8002b14:	08002b3b 	.word	0x08002b3b
 8002b18:	08002b3b 	.word	0x08002b3b
 8002b1c:	08002b3b 	.word	0x08002b3b
 8002b20:	08002b3b 	.word	0x08002b3b
 8002b24:	08002b3b 	.word	0x08002b3b
 8002b28:	08002b3b 	.word	0x08002b3b
 8002b2c:	08002b3b 	.word	0x08002b3b
 8002b30:	2b50      	cmp	r3, #80	@ 0x50
 8002b32:	d004      	beq.n	8002b3e <S2LP_PrintStatus+0xfe>
		case (MC_STATE_SYNTH_SETUP):
			DEBUG_PRINT("SYNTH_SETUP");
			break;
		default:
			DEBUG_PRINT("UNKNOWN");
			break;
 8002b34:	e001      	b.n	8002b3a <S2LP_PrintStatus+0xfa>
			break;
 8002b36:	bf00      	nop
 8002b38:	e002      	b.n	8002b40 <S2LP_PrintStatus+0x100>
			break;
 8002b3a:	bf00      	nop
 8002b3c:	e000      	b.n	8002b40 <S2LP_PrintStatus+0x100>
			break;
 8002b3e:	bf00      	nop
	}
	DEBUG_PRINT("\r\n");
	DEBUG_PRINT("  XO_ON=%u, ERROR_LOCK=%u, RX_fifo_empty=%u, TX_FIFO_FULL=%u\r\n",
			status->XO_ON, status->ERROR_LOCK, status->RX_FIFO_EMPTY, status->TX_FIFO_FULL);
	DEBUG_PRINT("  ANT_SELECT=%u, RCCAL_OK=%u, RES=%u\r\n", status->ANT_SELECT, status->RCCAL_OK, status->RESERVED);
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	0000      	movs	r0, r0
	...

08002b50 <S2LP_PLLConf>:
* @param  pfd_split pointer to the pfd register value.
* @param  lFc channel center frequency expressed in Hz (from 779 MHz to 915 MHz)
* @retval uint8_t Charge pump word.
*/
void S2LP_PLLConf(int32_t lFc)
{
 8002b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b54:	b09e      	sub	sp, #120	@ 0x78
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	63f8      	str	r0, [r7, #60]	@ 0x3c
  uint32_t vcofreq, lFRef;
  uint8_t BFactor = 4; // 779-915 MHz range
 8002b5a:	2304      	movs	r3, #4
 8002b5c:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
  uint8_t refdiv = 1; // REFDIV=0 (XO_RCO_CONF0) by default
 8002b60:	2301      	movs	r3, #1
 8002b62:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

  /* Calculates the syntheziser band select */
  uint64_t tgt1,tgt2,tgt;
  uint32_t synth;

  tgt = (((uint64_t)lFc)<<19)*(BFactor*refdiv);
 8002b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b68:	17da      	asrs	r2, r3, #31
 8002b6a:	469a      	mov	sl, r3
 8002b6c:	4693      	mov	fp, r2
 8002b6e:	ea4f 396a 	mov.w	r9, sl, asr #13
 8002b72:	ea4f 48ca 	mov.w	r8, sl, lsl #19
 8002b76:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 8002b7a:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8002b7e:	fb02 f303 	mul.w	r3, r2, r3
 8002b82:	17da      	asrs	r2, r3, #31
 8002b84:	623b      	str	r3, [r7, #32]
 8002b86:	627a      	str	r2, [r7, #36]	@ 0x24
 8002b88:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	fb03 f209 	mul.w	r2, r3, r9
 8002b92:	460b      	mov	r3, r1
 8002b94:	fb08 f303 	mul.w	r3, r8, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	fba8 4502 	umull	r4, r5, r8, r2
 8002ba0:	442b      	add	r3, r5
 8002ba2:	461d      	mov	r5, r3
 8002ba4:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
 8002ba8:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
  synth=(uint32_t)(tgt/XTAL_FREQ);
 8002bac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002bb0:	a374      	add	r3, pc, #464	@ (adr r3, 8002d84 <S2LP_PLLConf+0x234>)
 8002bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb6:	f7fe f807 	bl	8000bc8 <__aeabi_uldivmod>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	667b      	str	r3, [r7, #100]	@ 0x64
  tgt1 = (uint64_t)XTAL_FREQ*(synth);
 8002bc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	61bb      	str	r3, [r7, #24]
 8002bc8:	61fa      	str	r2, [r7, #28]
 8002bca:	4b6b      	ldr	r3, [pc, #428]	@ (8002d78 <S2LP_PLLConf+0x228>)
 8002bcc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002bd0:	462a      	mov	r2, r5
 8002bd2:	fb03 f202 	mul.w	r2, r3, r2
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	4621      	mov	r1, r4
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	4a65      	ldr	r2, [pc, #404]	@ (8002d78 <S2LP_PLLConf+0x228>)
 8002be2:	4621      	mov	r1, r4
 8002be4:	fba1 1202 	umull	r1, r2, r1, r2
 8002be8:	637a      	str	r2, [r7, #52]	@ 0x34
 8002bea:	460a      	mov	r2, r1
 8002bec:	633a      	str	r2, [r7, #48]	@ 0x30
 8002bee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002bf0:	4413      	add	r3, r2
 8002bf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bf4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8002bf8:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
 8002bfc:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
  tgt2 = (uint64_t)XTAL_FREQ*(synth+1);
 8002c00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c02:	3301      	adds	r3, #1
 8002c04:	2200      	movs	r2, #0
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	617a      	str	r2, [r7, #20]
 8002c0a:	4b5b      	ldr	r3, [pc, #364]	@ (8002d78 <S2LP_PLLConf+0x228>)
 8002c0c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002c10:	462a      	mov	r2, r5
 8002c12:	fb03 f202 	mul.w	r2, r3, r2
 8002c16:	2300      	movs	r3, #0
 8002c18:	4621      	mov	r1, r4
 8002c1a:	fb01 f303 	mul.w	r3, r1, r3
 8002c1e:	4413      	add	r3, r2
 8002c20:	4a55      	ldr	r2, [pc, #340]	@ (8002d78 <S2LP_PLLConf+0x228>)
 8002c22:	4621      	mov	r1, r4
 8002c24:	fba1 1202 	umull	r1, r2, r1, r2
 8002c28:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c2a:	460a      	mov	r2, r1
 8002c2c:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002c2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c30:	4413      	add	r3, r2
 8002c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c34:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8002c38:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
 8002c3c:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50

  synth=((tgt2-tgt)<(tgt-tgt1))?(synth+1):(synth);
 8002c40:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002c44:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002c48:	1a84      	subs	r4, r0, r2
 8002c4a:	60bc      	str	r4, [r7, #8]
 8002c4c:	eb61 0303 	sbc.w	r3, r1, r3
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002c56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c5a:	1a84      	subs	r4, r0, r2
 8002c5c:	603c      	str	r4, [r7, #0]
 8002c5e:	eb61 0303 	sbc.w	r3, r1, r3
 8002c62:	607b      	str	r3, [r7, #4]
 8002c64:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c68:	4623      	mov	r3, r4
 8002c6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c6e:	4602      	mov	r2, r0
 8002c70:	4293      	cmp	r3, r2
 8002c72:	462b      	mov	r3, r5
 8002c74:	460a      	mov	r2, r1
 8002c76:	4193      	sbcs	r3, r2
 8002c78:	d202      	bcs.n	8002c80 <S2LP_PLLConf+0x130>
 8002c7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	e000      	b.n	8002c82 <S2LP_PLLConf+0x132>
 8002c80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c82:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc*BFactor;
 8002c84:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002c88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002c8a:	fb02 f303 	mul.w	r3, r2, r3
 8002c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Calculates the reference frequency clock */
  lFRef = XTAL_FREQ/refdiv;
 8002c90:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8002c94:	4a38      	ldr	r2, [pc, #224]	@ (8002d78 <S2LP_PLLConf+0x228>)
 8002c96:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c9a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Set the correct charge pump word */
  if (vcofreq >= VCO_CENTER_FREQ) {
 8002c9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c9e:	4a37      	ldr	r2, [pc, #220]	@ (8002d7c <S2LP_PLLConf+0x22c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d911      	bls.n	8002cc8 <S2LP_PLLConf+0x178>
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8002ca4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ca6:	4a36      	ldr	r2, [pc, #216]	@ (8002d80 <S2LP_PLLConf+0x230>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d906      	bls.n	8002cba <S2LP_PLLConf+0x16a>
      cp_isel = 0x02;
 8002cac:	2302      	movs	r3, #2
 8002cae:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002cb8:	e017      	b.n	8002cea <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x01;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002cc6:	e010      	b.n	8002cea <S2LP_PLLConf+0x19a>
    }
  }
  else {
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8002cc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cca:	4a2d      	ldr	r2, [pc, #180]	@ (8002d80 <S2LP_PLLConf+0x230>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d906      	bls.n	8002cde <S2LP_PLLConf+0x18e>
      cp_isel = 0x03;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002cdc:	e005      	b.n	8002cea <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x02;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    }
  }

  //DEBUG_PRINT("SYNT: %lu, cp_ise=%u, pfd_split=%u\r\n", synth, cp_isel, pfd_split);

  uint8_t SYNT3 = (uint8_t) ((cp_isel << 5) | (synth >> 24));
 8002cea:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002cee:	015b      	lsls	r3, r3, #5
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cf4:	0e1b      	lsrs	r3, r3, #24
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint8_t SYNT2 = (uint8_t) ((synth >> 16) & 0xFF);
 8002cfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d00:	0c1b      	lsrs	r3, r3, #16
 8002d02:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint8_t SYNT1 = (uint8_t) ((synth >> 8) & 0xFF);
 8002d06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d08:	0a1b      	lsrs	r3, r3, #8
 8002d0a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  uint8_t SYNT0 = (uint8_t) ((synth >> 0) & 0xFF);
 8002d0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d10:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

  uint8_t SYNTH_CONFIG2 = 0xD0 + (pfd_split << 2);
 8002d14:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	3b30      	subs	r3, #48	@ 0x30
 8002d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  S2LP_WriteReg(SYNT3_ADDR, SYNT3, NULL);
 8002d22:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002d26:	2200      	movs	r2, #0
 8002d28:	4619      	mov	r1, r3
 8002d2a:	2005      	movs	r0, #5
 8002d2c:	f7ff fd3a 	bl	80027a4 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT2_ADDR, SYNT2, NULL);
 8002d30:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002d34:	2200      	movs	r2, #0
 8002d36:	4619      	mov	r1, r3
 8002d38:	2006      	movs	r0, #6
 8002d3a:	f7ff fd33 	bl	80027a4 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT1_ADDR, SYNT1, NULL);
 8002d3e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002d42:	2200      	movs	r2, #0
 8002d44:	4619      	mov	r1, r3
 8002d46:	2007      	movs	r0, #7
 8002d48:	f7ff fd2c 	bl	80027a4 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT0_ADDR, SYNT0, NULL);
 8002d4c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002d50:	2200      	movs	r2, #0
 8002d52:	4619      	mov	r1, r3
 8002d54:	2008      	movs	r0, #8
 8002d56:	f7ff fd25 	bl	80027a4 <S2LP_WriteReg>
  S2LP_WriteReg(SYNTH_CONFIG2_ADDR, SYNTH_CONFIG2, NULL);
 8002d5a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8002d5e:	2200      	movs	r2, #0
 8002d60:	4619      	mov	r1, r3
 8002d62:	2065      	movs	r0, #101	@ 0x65
 8002d64:	f7ff fd1e 	bl	80027a4 <S2LP_WriteReg>
}
 8002d68:	bf00      	nop
 8002d6a:	3778      	adds	r7, #120	@ 0x78
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d72:	bf00      	nop
 8002d74:	f3af 8000 	nop.w
 8002d78:	02faf080 	.word	0x02faf080
 8002d7c:	d693a3ff 	.word	0xd693a3ff
 8002d80:	01c9c380 	.word	0x01c9c380
 8002d84:	02faf080 	.word	0x02faf080
 8002d88:	00000000 	.word	0x00000000

08002d8c <ComputeDatarate>:

uint32_t ComputeDatarate(uint16_t cM, uint8_t cE)
{
 8002d8c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002d90:	b091      	sub	sp, #68	@ 0x44
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	4603      	mov	r3, r0
 8002d96:	460a      	mov	r2, r1
 8002d98:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint32_t f_dig=XTAL_FREQ;
 8002da0:	4b3f      	ldr	r3, [pc, #252]	@ (8002ea0 <ComputeDatarate+0x114>)
 8002da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint64_t dr;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8002da4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002da6:	4b3f      	ldr	r3, [pc, #252]	@ (8002ea4 <ComputeDatarate+0x118>)
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d902      	bls.n	8002db2 <ComputeDatarate+0x26>
    f_dig >>= 1;
 8002dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dae:	085b      	lsrs	r3, r3, #1
 8002db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  if(cE==0) {
 8002db2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d128      	bne.n	8002e0c <ComputeDatarate+0x80>
    dr=((uint64_t)f_dig*cM);
 8002dba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	61bb      	str	r3, [r7, #24]
 8002dc0:	61fa      	str	r2, [r7, #28]
 8002dc2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	617a      	str	r2, [r7, #20]
 8002dca:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002dce:	462b      	mov	r3, r5
 8002dd0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002dd4:	4642      	mov	r2, r8
 8002dd6:	fb02 f203 	mul.w	r2, r2, r3
 8002dda:	464b      	mov	r3, r9
 8002ddc:	4621      	mov	r1, r4
 8002dde:	fb01 f303 	mul.w	r3, r1, r3
 8002de2:	4413      	add	r3, r2
 8002de4:	4622      	mov	r2, r4
 8002de6:	4641      	mov	r1, r8
 8002de8:	fba2 ab01 	umull	sl, fp, r2, r1
 8002dec:	445b      	add	r3, fp
 8002dee:	469b      	mov	fp, r3
 8002df0:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
 8002df4:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
    return (uint32_t)(dr>>32);
 8002df8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002dfc:	f04f 0200 	mov.w	r2, #0
 8002e00:	f04f 0300 	mov.w	r3, #0
 8002e04:	000a      	movs	r2, r1
 8002e06:	2300      	movs	r3, #0
 8002e08:	4613      	mov	r3, r2
 8002e0a:	e043      	b.n	8002e94 <ComputeDatarate+0x108>
  }

  dr=((uint64_t)f_dig)*((uint64_t)cM+65536);
 8002e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e0e:	2200      	movs	r2, #0
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	60fa      	str	r2, [r7, #12]
 8002e14:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002e16:	2200      	movs	r2, #0
 8002e18:	603b      	str	r3, [r7, #0]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002e20:	460b      	mov	r3, r1
 8002e22:	f513 3380 	adds.w	r3, r3, #65536	@ 0x10000
 8002e26:	623b      	str	r3, [r7, #32]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	f143 0300 	adc.w	r3, r3, #0
 8002e2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e34:	460b      	mov	r3, r1
 8002e36:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 8002e3a:	4652      	mov	r2, sl
 8002e3c:	fb02 f203 	mul.w	r2, r2, r3
 8002e40:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8002e44:	465b      	mov	r3, fp
 8002e46:	4682      	mov	sl, r0
 8002e48:	468b      	mov	fp, r1
 8002e4a:	4651      	mov	r1, sl
 8002e4c:	fb01 f303 	mul.w	r3, r1, r3
 8002e50:	4413      	add	r3, r2
 8002e52:	4652      	mov	r2, sl
 8002e54:	6a39      	ldr	r1, [r7, #32]
 8002e56:	fba2 4501 	umull	r4, r5, r2, r1
 8002e5a:	442b      	add	r3, r5
 8002e5c:	461d      	mov	r5, r3
 8002e5e:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
 8002e62:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30

  return (uint32_t)(dr>>(33-cE));
 8002e66:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002e6a:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 8002e6e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002e72:	f1c1 0420 	rsb	r4, r1, #32
 8002e76:	f1a1 0020 	sub.w	r0, r1, #32
 8002e7a:	fa22 f801 	lsr.w	r8, r2, r1
 8002e7e:	fa03 f404 	lsl.w	r4, r3, r4
 8002e82:	ea48 0804 	orr.w	r8, r8, r4
 8002e86:	fa23 f000 	lsr.w	r0, r3, r0
 8002e8a:	ea48 0800 	orr.w	r8, r8, r0
 8002e8e:	fa23 f901 	lsr.w	r9, r3, r1
 8002e92:	4643      	mov	r3, r8
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3744      	adds	r7, #68	@ 0x44
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e9e:	4770      	bx	lr
 8002ea0:	02faf080 	.word	0x02faf080
 8002ea4:	01c9c380 	.word	0x01c9c380

08002ea8 <SearchDatarateME>:

void SearchDatarateME(uint32_t lDatarate, uint16_t* pcM, uint8_t* pcE)
{
 8002ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eac:	b0ae      	sub	sp, #184	@ 0xb8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 8002eb4:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8002eb8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
  uint32_t lDatarateTmp, f_dig=XTAL_FREQ;
 8002ebc:	4ba5      	ldr	r3, [pc, #660]	@ (8003154 <SearchDatarateME+0x2ac>)
 8002ebe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint8_t uDrE;
  uint64_t tgt1,tgt2,tgt;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8002ec2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ec6:	4ba4      	ldr	r3, [pc, #656]	@ (8003158 <SearchDatarateME+0x2b0>)
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d904      	bls.n	8002ed6 <SearchDatarateME+0x2e>
    f_dig >>= 1;
 8002ecc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ed0:	085b      	lsrs	r3, r3, #1
 8002ed2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  }

  /* Search the exponent value */
  for(uDrE = 0; uDrE != 12; uDrE++) {
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8002edc:	e013      	b.n	8002f06 <SearchDatarateME+0x5e>
    lDatarateTmp = ComputeDatarate(0xFFFF, uDrE);
 8002ede:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002ee8:	f7ff ff50 	bl	8002d8c <ComputeDatarate>
 8002eec:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    if(lDatarate<=lDatarateTmp)
 8002ef0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002ef4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d909      	bls.n	8002f10 <SearchDatarateME+0x68>
  for(uDrE = 0; uDrE != 12; uDrE++) {
 8002efc:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002f00:	3301      	adds	r3, #1
 8002f02:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8002f06:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002f0a:	2b0c      	cmp	r3, #12
 8002f0c:	d1e7      	bne.n	8002ede <SearchDatarateME+0x36>
 8002f0e:	e000      	b.n	8002f12 <SearchDatarateME+0x6a>
      break;
 8002f10:	bf00      	nop
  }
  (*pcE) = (uint8_t)uDrE;
 8002f12:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002f16:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002f1a:	7013      	strb	r3, [r2, #0]

  if(uDrE==0) {
 8002f1c:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d16b      	bne.n	8002ffc <SearchDatarateME+0x154>
    tgt=((uint64_t)lDatarate)<<32;
 8002f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f28:	2200      	movs	r2, #0
 8002f2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f2c:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002f38:	000b      	movs	r3, r1
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)(tgt/f_dig);
 8002f40:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f44:	2200      	movs	r2, #0
 8002f46:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f48:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002f4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f4e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002f52:	f7fd fe39 	bl	8000bc8 <__aeabi_uldivmod>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	b293      	uxth	r3, r2
 8002f5c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002f60:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*(*pcM);
 8002f62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f66:	2200      	movs	r2, #0
 8002f68:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f6a:	657a      	str	r2, [r7, #84]	@ 0x54
 8002f6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2200      	movs	r2, #0
 8002f76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f78:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002f7a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8002f7e:	462b      	mov	r3, r5
 8002f80:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8002f84:	4642      	mov	r2, r8
 8002f86:	fb02 f203 	mul.w	r2, r2, r3
 8002f8a:	464b      	mov	r3, r9
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	4413      	add	r3, r2
 8002f94:	4622      	mov	r2, r4
 8002f96:	4641      	mov	r1, r8
 8002f98:	fba2 1201 	umull	r1, r2, r2, r1
 8002f9c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002f9e:	460a      	mov	r2, r1
 8002fa0:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002fa2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002fa4:	4413      	add	r3, r2
 8002fa6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002fa8:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8002fac:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 8002fb0:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1);
 8002fb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002fb8:	2200      	movs	r2, #0
 8002fba:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fbc:	647a      	str	r2, [r7, #68]	@ 0x44
 8002fbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	17da      	asrs	r2, r3, #31
 8002fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fca:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002fcc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8002fd0:	462b      	mov	r3, r5
 8002fd2:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002fd6:	4642      	mov	r2, r8
 8002fd8:	fb02 f203 	mul.w	r2, r2, r3
 8002fdc:	464b      	mov	r3, r9
 8002fde:	4621      	mov	r1, r4
 8002fe0:	fb01 f303 	mul.w	r3, r1, r3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	4622      	mov	r2, r4
 8002fe8:	4641      	mov	r1, r8
 8002fea:	fba2 ab01 	umull	sl, fp, r2, r1
 8002fee:	445b      	add	r3, fp
 8002ff0:	469b      	mov	fp, r3
 8002ff2:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 8002ff6:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 8002ffa:	e07d      	b.n	80030f8 <SearchDatarateME+0x250>
  }
  else {
    tgt=((uint64_t)lDatarate)<<(33-uDrE);
 8002ffc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003000:	2200      	movs	r2, #0
 8003002:	4698      	mov	r8, r3
 8003004:	4691      	mov	r9, r2
 8003006:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800300a:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 800300e:	f1a1 0320 	sub.w	r3, r1, #32
 8003012:	f1c1 0220 	rsb	r2, r1, #32
 8003016:	fa09 f501 	lsl.w	r5, r9, r1
 800301a:	fa08 f303 	lsl.w	r3, r8, r3
 800301e:	431d      	orrs	r5, r3
 8003020:	fa28 f202 	lsr.w	r2, r8, r2
 8003024:	4315      	orrs	r5, r2
 8003026:	fa08 f401 	lsl.w	r4, r8, r1
 800302a:	e9c7 4526 	strd	r4, r5, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)((tgt/f_dig)-65536);
 800302e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003032:	2200      	movs	r2, #0
 8003034:	633b      	str	r3, [r7, #48]	@ 0x30
 8003036:	637a      	str	r2, [r7, #52]	@ 0x34
 8003038:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800303c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003040:	f7fd fdc2 	bl	8000bc8 <__aeabi_uldivmod>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	b293      	uxth	r3, r2
 800304a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800304e:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*((*pcM)+65536);
 8003050:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003054:	2200      	movs	r2, #0
 8003056:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003058:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800305a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8003064:	17da      	asrs	r2, r3, #31
 8003066:	623b      	str	r3, [r7, #32]
 8003068:	627a      	str	r2, [r7, #36]	@ 0x24
 800306a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800306e:	462b      	mov	r3, r5
 8003070:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003074:	4642      	mov	r2, r8
 8003076:	fb02 f203 	mul.w	r2, r2, r3
 800307a:	464b      	mov	r3, r9
 800307c:	4621      	mov	r1, r4
 800307e:	fb01 f303 	mul.w	r3, r1, r3
 8003082:	4413      	add	r3, r2
 8003084:	4622      	mov	r2, r4
 8003086:	4641      	mov	r1, r8
 8003088:	fba2 1201 	umull	r1, r2, r2, r1
 800308c:	677a      	str	r2, [r7, #116]	@ 0x74
 800308e:	460a      	mov	r2, r1
 8003090:	673a      	str	r2, [r7, #112]	@ 0x70
 8003092:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003094:	4413      	add	r3, r2
 8003096:	677b      	str	r3, [r7, #116]	@ 0x74
 8003098:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 800309c:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 80030a0:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1+65536);
 80030a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80030a8:	2200      	movs	r2, #0
 80030aa:	61bb      	str	r3, [r7, #24]
 80030ac:	61fa      	str	r2, [r7, #28]
 80030ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 80030b8:	17da      	asrs	r2, r3, #31
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	617a      	str	r2, [r7, #20]
 80030be:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80030c2:	462b      	mov	r3, r5
 80030c4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80030c8:	4642      	mov	r2, r8
 80030ca:	fb02 f203 	mul.w	r2, r2, r3
 80030ce:	464b      	mov	r3, r9
 80030d0:	4621      	mov	r1, r4
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	4622      	mov	r2, r4
 80030da:	4641      	mov	r1, r8
 80030dc:	fba2 1201 	umull	r1, r2, r2, r1
 80030e0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030e2:	460a      	mov	r2, r1
 80030e4:	66ba      	str	r2, [r7, #104]	@ 0x68
 80030e6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030e8:	4413      	add	r3, r2
 80030ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80030ec:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 80030f0:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
 80030f4:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
  }


  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 80030f8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80030fc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8003100:	1a84      	subs	r4, r0, r2
 8003102:	60bc      	str	r4, [r7, #8]
 8003104:	eb61 0303 	sbc.w	r3, r1, r3
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800310e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8003112:	1a84      	subs	r4, r0, r2
 8003114:	603c      	str	r4, [r7, #0]
 8003116:	eb61 0303 	sbc.w	r3, r1, r3
 800311a:	607b      	str	r3, [r7, #4]
 800311c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003120:	4623      	mov	r3, r4
 8003122:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003126:	4602      	mov	r2, r0
 8003128:	4293      	cmp	r3, r2
 800312a:	462b      	mov	r3, r5
 800312c:	460a      	mov	r2, r1
 800312e:	4193      	sbcs	r3, r2
 8003130:	d205      	bcs.n	800313e <SearchDatarateME+0x296>
 8003132:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003136:	881b      	ldrh	r3, [r3, #0]
 8003138:	3301      	adds	r3, #1
 800313a:	b29b      	uxth	r3, r3
 800313c:	e002      	b.n	8003144 <SearchDatarateME+0x29c>
 800313e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003148:	8013      	strh	r3, [r2, #0]

}
 800314a:	bf00      	nop
 800314c:	37b8      	adds	r7, #184	@ 0xb8
 800314e:	46bd      	mov	sp, r7
 8003150:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003154:	02faf080 	.word	0x02faf080
 8003158:	01c9c380 	.word	0x01c9c380

0800315c <ComputeFreqDeviation>:

uint32_t ComputeFreqDeviation(uint8_t cM, uint8_t cE, uint8_t bs, uint8_t refdiv)
{
 800315c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003160:	b08c      	sub	sp, #48	@ 0x30
 8003162:	af00      	add	r7, sp, #0
 8003164:	461e      	mov	r6, r3
 8003166:	4603      	mov	r3, r0
 8003168:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800316c:	460b      	mov	r3, r1
 800316e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8003172:	4613      	mov	r3, r2
 8003174:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8003178:	4633      	mov	r3, r6
 800317a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint32_t f_xo=XTAL_FREQ;
 800317e:	4b35      	ldr	r3, [pc, #212]	@ (8003254 <ComputeFreqDeviation+0xf8>)
 8003180:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if(cE==0) {
 8003182:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003186:	2b00      	cmp	r3, #0
 8003188:	d127      	bne.n	80031da <ComputeFreqDeviation+0x7e>
    return (uint32_t)(((uint64_t)f_xo*cM)>>22);
 800318a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800318c:	2200      	movs	r2, #0
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	617a      	str	r2, [r7, #20]
 8003192:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003196:	2200      	movs	r2, #0
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	60fa      	str	r2, [r7, #12]
 800319c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80031a0:	462b      	mov	r3, r5
 80031a2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80031a6:	4642      	mov	r2, r8
 80031a8:	fb02 f203 	mul.w	r2, r2, r3
 80031ac:	464b      	mov	r3, r9
 80031ae:	4621      	mov	r1, r4
 80031b0:	fb01 f303 	mul.w	r3, r1, r3
 80031b4:	4413      	add	r3, r2
 80031b6:	4622      	mov	r2, r4
 80031b8:	4641      	mov	r1, r8
 80031ba:	fba2 ab01 	umull	sl, fp, r2, r1
 80031be:	445b      	add	r3, fp
 80031c0:	469b      	mov	fp, r3
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	ea4f 529a 	mov.w	r2, sl, lsr #22
 80031ce:	ea42 228b 	orr.w	r2, r2, fp, lsl #10
 80031d2:	ea4f 539b 	mov.w	r3, fp, lsr #22
 80031d6:	4613      	mov	r3, r2
 80031d8:	e036      	b.n	8003248 <ComputeFreqDeviation+0xec>
  }

  return (uint32_t)(((uint64_t)f_xo*(256+cM))>>(23-cE));
 80031da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031dc:	2200      	movs	r2, #0
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031e6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80031ea:	17da      	asrs	r2, r3, #31
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	61fa      	str	r2, [r7, #28]
 80031f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031f4:	460b      	mov	r3, r1
 80031f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80031fa:	4652      	mov	r2, sl
 80031fc:	fb02 f203 	mul.w	r2, r2, r3
 8003200:	e9c7 ab06 	strd	sl, fp, [r7, #24]
 8003204:	465b      	mov	r3, fp
 8003206:	4682      	mov	sl, r0
 8003208:	468b      	mov	fp, r1
 800320a:	4651      	mov	r1, sl
 800320c:	fb01 f303 	mul.w	r3, r1, r3
 8003210:	4413      	add	r3, r2
 8003212:	4652      	mov	r2, sl
 8003214:	69b9      	ldr	r1, [r7, #24]
 8003216:	fba2 4501 	umull	r4, r5, r2, r1
 800321a:	442b      	add	r3, r5
 800321c:	461d      	mov	r5, r3
 800321e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003222:	f1c3 0317 	rsb	r3, r3, #23
 8003226:	f1c3 0120 	rsb	r1, r3, #32
 800322a:	f1a3 0220 	sub.w	r2, r3, #32
 800322e:	fa24 f803 	lsr.w	r8, r4, r3
 8003232:	fa05 f101 	lsl.w	r1, r5, r1
 8003236:	ea48 0801 	orr.w	r8, r8, r1
 800323a:	fa25 f202 	lsr.w	r2, r5, r2
 800323e:	ea48 0802 	orr.w	r8, r8, r2
 8003242:	fa25 f903 	lsr.w	r9, r5, r3
 8003246:	4643      	mov	r3, r8
}
 8003248:	4618      	mov	r0, r3
 800324a:	3730      	adds	r7, #48	@ 0x30
 800324c:	46bd      	mov	sp, r7
 800324e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003252:	4770      	bx	lr
 8003254:	02faf080 	.word	0x02faf080

08003258 <SearchFreqDevME>:

void SearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8003258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800325c:	b0a2      	sub	sp, #136	@ 0x88
 800325e:	af00      	add	r7, sp, #0
 8003260:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8003262:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003264:	657a      	str	r2, [r7, #84]	@ 0x54
  uint8_t uFDevE, bs = 4, refdiv = 1;
 8003266:	2304      	movs	r3, #4
 8003268:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800326c:	2301      	movs	r3, #1
 800326e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  uint32_t lFDevTmp;
  uint64_t tgt1,tgt2,tgt;

  /* Search the exponent of the frequency deviation value */
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8003272:	2300      	movs	r3, #0
 8003274:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8003278:	e012      	b.n	80032a0 <SearchFreqDevME+0x48>
    lFDevTmp = ComputeFreqDeviation(255, uFDevE, bs, refdiv);
 800327a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800327e:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8003282:	f897 1087 	ldrb.w	r1, [r7, #135]	@ 0x87
 8003286:	20ff      	movs	r0, #255	@ 0xff
 8003288:	f7ff ff68 	bl	800315c <ComputeFreqDeviation>
 800328c:	6638      	str	r0, [r7, #96]	@ 0x60
    if(lFDev<lFDevTmp)
 800328e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003290:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003292:	429a      	cmp	r2, r3
 8003294:	d309      	bcc.n	80032aa <SearchFreqDevME+0x52>
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8003296:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800329a:	3301      	adds	r3, #1
 800329c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80032a0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80032a4:	2b0c      	cmp	r3, #12
 80032a6:	d1e8      	bne.n	800327a <SearchFreqDevME+0x22>
 80032a8:	e000      	b.n	80032ac <SearchFreqDevME+0x54>
      break;
 80032aa:	bf00      	nop
  }
  (*pcE) = (uint8_t)uFDevE;
 80032ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80032ae:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80032b2:	7013      	strb	r3, [r2, #0]

  if(uFDevE==0)
 80032b4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d155      	bne.n	8003368 <SearchFreqDevME+0x110>
  {
    tgt=((uint64_t)lFDev)<<22;
 80032bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032be:	2200      	movs	r2, #0
 80032c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80032d0:	4629      	mov	r1, r5
 80032d2:	058b      	lsls	r3, r1, #22
 80032d4:	4621      	mov	r1, r4
 80032d6:	ea43 2391 	orr.w	r3, r3, r1, lsr #10
 80032da:	4621      	mov	r1, r4
 80032dc:	058a      	lsls	r2, r1, #22
 80032de:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ);
 80032e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80032e6:	a36e      	add	r3, pc, #440	@ (adr r3, 80034a0 <SearchFreqDevME+0x248>)
 80032e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ec:	f7fd fc6c 	bl	8000bc8 <__aeabi_uldivmod>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	b2d3      	uxtb	r3, r2
 80032f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80032f8:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*(*pcM);
 80032fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2200      	movs	r2, #0
 8003302:	633b      	str	r3, [r7, #48]	@ 0x30
 8003304:	637a      	str	r2, [r7, #52]	@ 0x34
 8003306:	4b68      	ldr	r3, [pc, #416]	@ (80034a8 <SearchFreqDevME+0x250>)
 8003308:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800330c:	462a      	mov	r2, r5
 800330e:	fb03 f202 	mul.w	r2, r3, r2
 8003312:	2300      	movs	r3, #0
 8003314:	4621      	mov	r1, r4
 8003316:	fb01 f303 	mul.w	r3, r1, r3
 800331a:	4413      	add	r3, r2
 800331c:	4a62      	ldr	r2, [pc, #392]	@ (80034a8 <SearchFreqDevME+0x250>)
 800331e:	4621      	mov	r1, r4
 8003320:	fba1 ab02 	umull	sl, fp, r1, r2
 8003324:	445b      	add	r3, fp
 8003326:	469b      	mov	fp, r3
 8003328:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
 800332c:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1);
 8003330:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	3301      	adds	r3, #1
 8003336:	17da      	asrs	r2, r3, #31
 8003338:	62bb      	str	r3, [r7, #40]	@ 0x28
 800333a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800333c:	4b5a      	ldr	r3, [pc, #360]	@ (80034a8 <SearchFreqDevME+0x250>)
 800333e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8003342:	462a      	mov	r2, r5
 8003344:	fb03 f202 	mul.w	r2, r3, r2
 8003348:	2300      	movs	r3, #0
 800334a:	4621      	mov	r1, r4
 800334c:	fb01 f303 	mul.w	r3, r1, r3
 8003350:	4413      	add	r3, r2
 8003352:	4a55      	ldr	r2, [pc, #340]	@ (80034a8 <SearchFreqDevME+0x250>)
 8003354:	4621      	mov	r1, r4
 8003356:	fba1 8902 	umull	r8, r9, r1, r2
 800335a:	444b      	add	r3, r9
 800335c:	4699      	mov	r9, r3
 800335e:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 8003362:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 8003366:	e06d      	b.n	8003444 <SearchFreqDevME+0x1ec>
  }
  else
  {
    tgt=((uint64_t)lFDev)<<(23-uFDevE);
 8003368:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800336a:	2200      	movs	r2, #0
 800336c:	623b      	str	r3, [r7, #32]
 800336e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003370:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8003374:	f1c3 0117 	rsb	r1, r3, #23
 8003378:	f1a1 0320 	sub.w	r3, r1, #32
 800337c:	f1c1 0220 	rsb	r2, r1, #32
 8003380:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003384:	4648      	mov	r0, r9
 8003386:	fa00 f501 	lsl.w	r5, r0, r1
 800338a:	4640      	mov	r0, r8
 800338c:	fa00 f303 	lsl.w	r3, r0, r3
 8003390:	431d      	orrs	r5, r3
 8003392:	4643      	mov	r3, r8
 8003394:	fa23 f202 	lsr.w	r2, r3, r2
 8003398:	4315      	orrs	r5, r2
 800339a:	4643      	mov	r3, r8
 800339c:	408b      	lsls	r3, r1
 800339e:	461c      	mov	r4, r3
 80033a0:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ)-256;
 80033a4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80033a8:	a33d      	add	r3, pc, #244	@ (adr r3, 80034a0 <SearchFreqDevME+0x248>)
 80033aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ae:	f7fd fc0b 	bl	8000bc8 <__aeabi_uldivmod>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	b2d3      	uxtb	r3, r2
 80033b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033ba:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*((*pcM)+256);
 80033bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80033c4:	17da      	asrs	r2, r3, #31
 80033c6:	61bb      	str	r3, [r7, #24]
 80033c8:	61fa      	str	r2, [r7, #28]
 80033ca:	4b37      	ldr	r3, [pc, #220]	@ (80034a8 <SearchFreqDevME+0x250>)
 80033cc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80033d0:	462a      	mov	r2, r5
 80033d2:	fb03 f202 	mul.w	r2, r3, r2
 80033d6:	2300      	movs	r3, #0
 80033d8:	4621      	mov	r1, r4
 80033da:	fb01 f303 	mul.w	r3, r1, r3
 80033de:	4413      	add	r3, r2
 80033e0:	4a31      	ldr	r2, [pc, #196]	@ (80034a8 <SearchFreqDevME+0x250>)
 80033e2:	4621      	mov	r1, r4
 80033e4:	fba1 1202 	umull	r1, r2, r1, r2
 80033e8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80033ea:	460a      	mov	r2, r1
 80033ec:	64ba      	str	r2, [r7, #72]	@ 0x48
 80033ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033f0:	4413      	add	r3, r2
 80033f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033f4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 80033f8:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
 80033fc:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1+256);
 8003400:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8003408:	17da      	asrs	r2, r3, #31
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	617a      	str	r2, [r7, #20]
 800340e:	4b26      	ldr	r3, [pc, #152]	@ (80034a8 <SearchFreqDevME+0x250>)
 8003410:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003414:	462a      	mov	r2, r5
 8003416:	fb03 f202 	mul.w	r2, r3, r2
 800341a:	2300      	movs	r3, #0
 800341c:	4621      	mov	r1, r4
 800341e:	fb01 f303 	mul.w	r3, r1, r3
 8003422:	4413      	add	r3, r2
 8003424:	4a20      	ldr	r2, [pc, #128]	@ (80034a8 <SearchFreqDevME+0x250>)
 8003426:	4621      	mov	r1, r4
 8003428:	fba1 1202 	umull	r1, r2, r1, r2
 800342c:	647a      	str	r2, [r7, #68]	@ 0x44
 800342e:	460a      	mov	r2, r1
 8003430:	643a      	str	r2, [r7, #64]	@ 0x40
 8003432:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003434:	4413      	add	r3, r2
 8003436:	647b      	str	r3, [r7, #68]	@ 0x44
 8003438:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800343c:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
 8003440:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
  }

  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 8003444:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003448:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800344c:	1a84      	subs	r4, r0, r2
 800344e:	60bc      	str	r4, [r7, #8]
 8003450:	eb61 0303 	sbc.w	r3, r1, r3
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800345a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800345e:	1a84      	subs	r4, r0, r2
 8003460:	603c      	str	r4, [r7, #0]
 8003462:	eb61 0303 	sbc.w	r3, r1, r3
 8003466:	607b      	str	r3, [r7, #4]
 8003468:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800346c:	4623      	mov	r3, r4
 800346e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003472:	4602      	mov	r2, r0
 8003474:	4293      	cmp	r3, r2
 8003476:	462b      	mov	r3, r5
 8003478:	460a      	mov	r2, r1
 800347a:	4193      	sbcs	r3, r2
 800347c:	d204      	bcs.n	8003488 <SearchFreqDevME+0x230>
 800347e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	3301      	adds	r3, #1
 8003484:	b2db      	uxtb	r3, r3
 8003486:	e001      	b.n	800348c <SearchFreqDevME+0x234>
 8003488:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800348e:	7013      	strb	r3, [r2, #0]
}
 8003490:	bf00      	nop
 8003492:	3788      	adds	r7, #136	@ 0x88
 8003494:	46bd      	mov	sp, r7
 8003496:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800349a:	bf00      	nop
 800349c:	f3af 8000 	nop.w
 80034a0:	02faf080 	.word	0x02faf080
 80034a4:	00000000 	.word	0x00000000
 80034a8:	02faf080 	.word	0x02faf080

080034ac <S2LP_SetModulation>:
*         [100 500000].
*         Frequency deviation expressed in Hz.
* @retval None.
*/
void S2LP_SetModulation(uint8_t mod_type, uint32_t datarate, uint32_t fdev)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	4603      	mov	r3, r0
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
 80034b8:	73fb      	strb	r3, [r7, #15]
  uint8_t dr_e;
  uint16_t dr_m;
  uint8_t uFDevM, uFDevE;

  /* Calculates the datarate mantissa and exponent */
  SearchDatarateME(datarate, &dr_m, &dr_e);
 80034ba:	f107 0217 	add.w	r2, r7, #23
 80034be:	f107 0314 	add.w	r3, r7, #20
 80034c2:	4619      	mov	r1, r3
 80034c4:	68b8      	ldr	r0, [r7, #8]
 80034c6:	f7ff fcef 	bl	8002ea8 <SearchDatarateME>
  /* Calculates the frequency deviation mantissa and exponent */
  SearchFreqDevME(fdev, &uFDevM, &uFDevE);
 80034ca:	f107 0212 	add.w	r2, r7, #18
 80034ce:	f107 0313 	add.w	r3, r7, #19
 80034d2:	4619      	mov	r1, r3
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff febf 	bl	8003258 <SearchFreqDevME>

  S2LP_WriteReg(MOD4_ADDR, (uint8_t)(dr_m >> 8), NULL);
 80034da:	8abb      	ldrh	r3, [r7, #20]
 80034dc:	0a1b      	lsrs	r3, r3, #8
 80034de:	b29b      	uxth	r3, r3
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2200      	movs	r2, #0
 80034e4:	4619      	mov	r1, r3
 80034e6:	200e      	movs	r0, #14
 80034e8:	f7ff f95c 	bl	80027a4 <S2LP_WriteReg>
  S2LP_WriteReg(MOD3_ADDR, (uint8_t)dr_m, NULL);
 80034ec:	8abb      	ldrh	r3, [r7, #20]
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2200      	movs	r2, #0
 80034f2:	4619      	mov	r1, r3
 80034f4:	200f      	movs	r0, #15
 80034f6:	f7ff f955 	bl	80027a4 <S2LP_WriteReg>
  S2LP_WriteReg(MOD2_ADDR, mod_type | dr_e, NULL);
 80034fa:	7dfa      	ldrb	r2, [r7, #23]
 80034fc:	7bfb      	ldrb	r3, [r7, #15]
 80034fe:	4313      	orrs	r3, r2
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2200      	movs	r2, #0
 8003504:	4619      	mov	r1, r3
 8003506:	2010      	movs	r0, #16
 8003508:	f7ff f94c 	bl	80027a4 <S2LP_WriteReg>

  S2LP_WriteReg(MOD0_ADDR, uFDevM, NULL);
 800350c:	7cfb      	ldrb	r3, [r7, #19]
 800350e:	2200      	movs	r2, #0
 8003510:	4619      	mov	r1, r3
 8003512:	2012      	movs	r0, #18
 8003514:	f7ff f946 	bl	80027a4 <S2LP_WriteReg>
  S2LP_WriteReg(MOD1_ADDR, uFDevE, NULL);
 8003518:	7cbb      	ldrb	r3, [r7, #18]
 800351a:	2200      	movs	r2, #0
 800351c:	4619      	mov	r1, r3
 800351e:	2011      	movs	r0, #17
 8003520:	f7ff f940 	bl	80027a4 <S2LP_WriteReg>
}
 8003524:	bf00      	nop
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <S2LP_SetPALeveldBm>:

void S2LP_SetPALeveldBm(int32_t lPowerdBm)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint8_t paLevelValue;
  if(lPowerdBm> 14)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b0e      	cmp	r3, #14
 8003538:	dd02      	ble.n	8003540 <S2LP_SetPALeveldBm+0x14>
  {
    paLevelValue = 1;
 800353a:	2301      	movs	r3, #1
 800353c:	73fb      	strb	r3, [r7, #15]
 800353e:	e006      	b.n	800354e <S2LP_SetPALeveldBm+0x22>
  }
  else {
    paLevelValue = (uint8_t)((int32_t)29-2*lPowerdBm);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f1c3 031d 	rsb	r3, r3, #29
 800354c:	73fb      	strb	r3, [r7, #15]
  }

  S2LP_WriteReg(PA_POWER0_ADDR, 0, NULL);
 800354e:	2200      	movs	r2, #0
 8003550:	2100      	movs	r1, #0
 8003552:	2062      	movs	r0, #98	@ 0x62
 8003554:	f7ff f926 	bl	80027a4 <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR+1, 0, NULL); // disable degeneration mode
 8003558:	2200      	movs	r2, #0
 800355a:	2100      	movs	r1, #0
 800355c:	2064      	movs	r0, #100	@ 0x64
 800355e:	f7ff f921 	bl	80027a4 <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR, 0, NULL); // disable Tx Bessel FIR
 8003562:	2200      	movs	r2, #0
 8003564:	2100      	movs	r1, #0
 8003566:	2063      	movs	r0, #99	@ 0x63
 8003568:	f7ff f91c 	bl	80027a4 <S2LP_WriteReg>
  S2LP_WriteReg(PA_POWER1_ADDR, paLevelValue, NULL);
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	2200      	movs	r2, #0
 8003570:	4619      	mov	r1, r3
 8003572:	2061      	movs	r0, #97	@ 0x61
 8003574:	f7ff f916 	bl	80027a4 <S2LP_WriteReg>
}
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <S2LP_Init>:

	return HAL_OK;
}

HAL_StatusTypeDef S2LP_Init(SPI_HandleTypeDef *spi_handle)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	gSPI = spi_handle;
 8003588:	4a44      	ldr	r2, [pc, #272]	@ (800369c <S2LP_Init+0x11c>)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6013      	str	r3, [r2, #0]
	uint32_t ncycles_start = HAL_RCC_GetHCLKFreq()/9600;
 800358e:	f002 f8f7 	bl	8005780 <HAL_RCC_GetHCLKFreq>
 8003592:	4603      	mov	r3, r0
 8003594:	4a42      	ldr	r2, [pc, #264]	@ (80036a0 <S2LP_Init+0x120>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	0a9b      	lsrs	r3, r3, #10
 800359c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800359e:	b672      	cpsid	i
}
 80035a0:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_RESET); // Power up S2LP
 80035a2:	2200      	movs	r2, #0
 80035a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80035a8:	483e      	ldr	r0, [pc, #248]	@ (80036a4 <S2LP_Init+0x124>)
 80035aa:	f001 fc25 	bl	8004df8 <HAL_GPIO_WritePin>
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
 80035b2:	e003      	b.n	80035bc <S2LP_Init+0x3c>
		asm volatile("nop");
 80035b4:	bf00      	nop
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	3301      	adds	r3, #1
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d3f7      	bcc.n	80035b4 <S2LP_Init+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 80035c4:	b662      	cpsie	i
}
 80035c6:	bf00      	nop
	__enable_irq();

	S2LP_WriteReg(GPIO0_CONF_ADDR, 3, NULL); // Set GPIO as interrupt line
 80035c8:	2200      	movs	r2, #0
 80035ca:	2103      	movs	r1, #3
 80035cc:	2000      	movs	r0, #0
 80035ce:	f7ff f8e9 	bl	80027a4 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK0_ADDR, 0x80 | 0x20 | 0x04, NULL); // Enable "Tx Data sent" and "TX FIFO almost full" interrupts
 80035d2:	2200      	movs	r2, #0
 80035d4:	21a4      	movs	r1, #164	@ 0xa4
 80035d6:	2053      	movs	r0, #83	@ 0x53
 80035d8:	f7ff f8e4 	bl	80027a4 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK1_ADDR, 0x01, NULL); // Enable "TX FIFO almost empty" interrupt
 80035dc:	2200      	movs	r2, #0
 80035de:	2101      	movs	r1, #1
 80035e0:	2052      	movs	r0, #82	@ 0x52
 80035e2:	f7ff f8df 	bl	80027a4 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK2_ADDR, 0x00, NULL);
 80035e6:	2200      	movs	r2, #0
 80035e8:	2100      	movs	r1, #0
 80035ea:	2051      	movs	r0, #81	@ 0x51
 80035ec:	f7ff f8da 	bl	80027a4 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK3_ADDR, 0x00, NULL);
 80035f0:	2200      	movs	r2, #0
 80035f2:	2100      	movs	r1, #0
 80035f4:	2050      	movs	r0, #80	@ 0x50
 80035f6:	f7ff f8d5 	bl	80027a4 <S2LP_WriteReg>
	S2LP_WriteReg(FIFO_CONFIG0_ADDR, FIFO_EMPTY_THRESH * FIFO_CHUNK_SIZE, NULL);
 80035fa:	2200      	movs	r2, #0
 80035fc:	2120      	movs	r1, #32
 80035fe:	203f      	movs	r0, #63	@ 0x3f
 8003600:	f7ff f8d0 	bl	80027a4 <S2LP_WriteReg>

	// Change sync word bytes
	S2LP_WriteReg(SYNC3_ADDR, 0xB7, NULL);
 8003604:	2200      	movs	r2, #0
 8003606:	21b7      	movs	r1, #183	@ 0xb7
 8003608:	2033      	movs	r0, #51	@ 0x33
 800360a:	f7ff f8cb 	bl	80027a4 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC2_ADDR, 0x54, NULL);
 800360e:	2200      	movs	r2, #0
 8003610:	2154      	movs	r1, #84	@ 0x54
 8003612:	2034      	movs	r0, #52	@ 0x34
 8003614:	f7ff f8c6 	bl	80027a4 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC1_ADDR, 0x2A, NULL);
 8003618:	2200      	movs	r2, #0
 800361a:	212a      	movs	r1, #42	@ 0x2a
 800361c:	2035      	movs	r0, #53	@ 0x35
 800361e:	f7ff f8c1 	bl	80027a4 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC0_ADDR, 0x3E, NULL);
 8003622:	2200      	movs	r2, #0
 8003624:	213e      	movs	r1, #62	@ 0x3e
 8003626:	2036      	movs	r0, #54	@ 0x36
 8003628:	f7ff f8bc 	bl	80027a4 <S2LP_WriteReg>

	// PLL and PA configuration
	S2LP_PLLConf(BASE_FREQ);
 800362c:	481e      	ldr	r0, [pc, #120]	@ (80036a8 <S2LP_Init+0x128>)
 800362e:	f7ff fa8f 	bl	8002b50 <S2LP_PLLConf>
	S2LP_SetPALeveldBm(PA_LEVEL);
 8003632:	2000      	movs	r0, #0
 8003634:	f7ff ff7a 	bl	800352c <S2LP_SetPALeveldBm>

	// Modulation and packet configuration
	S2LP_SetModulation(MOD_2FSK, DATARATE, FREQDEV);
 8003638:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 800363c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8003640:	2000      	movs	r0, #0
 8003642:	f7ff ff33 	bl	80034ac <S2LP_SetModulation>
	S2LP_WriteReg(PCKTCTRL1_ADDR, 0x20, NULL); // No whitening, CRC with poly 0x07
 8003646:	2200      	movs	r2, #0
 8003648:	2120      	movs	r1, #32
 800364a:	2030      	movs	r0, #48	@ 0x30
 800364c:	f7ff f8aa 	bl	80027a4 <S2LP_WriteReg>
	S2LP_WriteReg(PCKTCTRL3_ADDR, 0x00, NULL); // Enable basic packet structure
 8003650:	2200      	movs	r2, #0
 8003652:	2100      	movs	r1, #0
 8003654:	202e      	movs	r0, #46	@ 0x2e
 8003656:	f7ff f8a5 	bl	80027a4 <S2LP_WriteReg>

	S2LPStatus radio_status;
	uint8_t rco_conf;
	HAL_StatusTypeDef err = S2LP_ReadReg(XO_RCO_CONF1_ADDR, &rco_conf, &radio_status); // fetch radio state
 800365a:	f107 020c 	add.w	r2, r7, #12
 800365e:	f107 030b 	add.w	r3, r7, #11
 8003662:	4619      	mov	r1, r3
 8003664:	206c      	movs	r0, #108	@ 0x6c
 8003666:	f7ff f85f 	bl	8002728 <S2LP_ReadReg>
 800366a:	4603      	mov	r3, r0
 800366c:	73fb      	strb	r3, [r7, #15]
	if (err) {
 800366e:	7bfb      	ldrb	r3, [r7, #15]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <S2LP_Init+0xf8>
		return err;
 8003674:	7bfb      	ldrb	r3, [r7, #15]
 8003676:	e00d      	b.n	8003694 <S2LP_Init+0x114>
	} else if (rco_conf != 0x45) {
 8003678:	7afb      	ldrb	r3, [r7, #11]
 800367a:	2b45      	cmp	r3, #69	@ 0x45
 800367c:	d001      	beq.n	8003682 <S2LP_Init+0x102>
		DEBUG_PRINT("[S2LP] Error: XO_RCO_CONF1 register is invalid (0x%X instead of 0x45), faulty SPI bus?\r\n", rco_conf);
		return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e008      	b.n	8003694 <S2LP_Init+0x114>
	}

	if (radio_status.MC_STATE != MC_STATE_READY) {
 8003682:	7b7b      	ldrb	r3, [r7, #13]
 8003684:	f023 0301 	bic.w	r3, r3, #1
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <S2LP_Init+0x112>
		DEBUG_PRINT("[S2LP] Error: radio is not ready after initialization\r\n");
		return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <S2LP_Init+0x114>
	}

	return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	20003d58 	.word	0x20003d58
 80036a0:	1b4e81b5 	.word	0x1b4e81b5
 80036a4:	48001400 	.word	0x48001400
 80036a8:	33611380 	.word	0x33611380

080036ac <S2LP_IRQ_Handler>:

void S2LP_IRQ_Handler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
	uint8_t irq_status1, irq_status0;
	S2LP_ReadReg(IRQ_STATUS1_ADDR, &irq_status1, NULL);
 80036b2:	1dfb      	adds	r3, r7, #7
 80036b4:	2200      	movs	r2, #0
 80036b6:	4619      	mov	r1, r3
 80036b8:	20fc      	movs	r0, #252	@ 0xfc
 80036ba:	f7ff f835 	bl	8002728 <S2LP_ReadReg>
	S2LP_ReadReg(IRQ_STATUS0_ADDR, &irq_status0, NULL);
 80036be:	1dbb      	adds	r3, r7, #6
 80036c0:	2200      	movs	r2, #0
 80036c2:	4619      	mov	r1, r3
 80036c4:	20fd      	movs	r0, #253	@ 0xfd
 80036c6:	f7ff f82f 	bl	8002728 <S2LP_ReadReg>

	if (irq_status1 & 0x01) // TX FIFO almost empty
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <S2LP_IRQ_Handler+0x2e>
		fifo_almost_empty = 1;
 80036d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003704 <S2LP_IRQ_Handler+0x58>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x20) // TX/RX FIFO underflow or overflow
 80036da:	79bb      	ldrb	r3, [r7, #6]
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <S2LP_IRQ_Handler+0x3e>
		underflow = 1;
 80036e4:	4b08      	ldr	r3, [pc, #32]	@ (8003708 <S2LP_IRQ_Handler+0x5c>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x04) // Packet transmitted
 80036ea:	79bb      	ldrb	r3, [r7, #6]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <S2LP_IRQ_Handler+0x4e>
		packet_sent = 1;
 80036f4:	4b05      	ldr	r3, [pc, #20]	@ (800370c <S2LP_IRQ_Handler+0x60>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	701a      	strb	r2, [r3, #0]
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20003d55 	.word	0x20003d55
 8003708:	20003d56 	.word	0x20003d56
 800370c:	20003d54 	.word	0x20003d54

08003710 <Spectrogram_Format>:
q15_t buf_fft[2*SAMPLES_PER_MELVEC  ]; // Double size (real|imag) buffer needed for arm_rfft_q15
q15_t buf_tmp[  SAMPLES_PER_MELVEC/2]; // Intermediate buffer for arm_mat_mult_fast_q15

// Convert 12-bit DC ADC samples to Q1.15 fixed point signal and remove DC component
void Spectrogram_Format(q15_t *buf)
{
 8003710:	b510      	push	{r4, lr}
 8003712:	4604      	mov	r4, r0
	start_cycle_count();
 8003714:	f000 fa0a 	bl	8003b2c <start_cycle_count>
	// That way, the value of buf[i] is in [0 , 2**15 - 1]

	// /!\ When multiplying/dividing by a power 2, always prefer shifting left/right instead, ARM instructions to do so are more efficient.
	// Here we should shift left by 3.

	arm_shift_q15(buf, 3, buf, SAMPLES_PER_MELVEC);
 8003718:	4622      	mov	r2, r4
 800371a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800371e:	2103      	movs	r1, #3
 8003720:	4620      	mov	r0, r4
 8003722:	f003 fea1 	bl	8007468 <arm_shift_q15>
	stop_cycle_count("0.1");
 8003726:	4808      	ldr	r0, [pc, #32]	@ (8003748 <Spectrogram_Format+0x38>)
 8003728:	f000 fa02 	bl	8003b30 <stop_cycle_count>
	start_cycle_count();
 800372c:	f000 f9fe 	bl	8003b2c <start_cycle_count>

	// Since we use a signed representation, we should now center the value around zero, we can do this by substracting 2**14.
	// Now the value of buf[i] is in [-2**14 , 2**14 - 1]

	q15_t offset = -(1 << 14);
	arm_offset_q15(buf, offset, buf, SAMPLES_PER_MELVEC);
 8003730:	4620      	mov	r0, r4
 8003732:	4622      	mov	r2, r4
 8003734:	4905      	ldr	r1, [pc, #20]	@ (800374c <Spectrogram_Format+0x3c>)
 8003736:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800373a:	f003 ff27 	bl	800758c <arm_offset_q15>

//	for(uint16_t i=0; i < SAMPLES_PER_MELVEC; i++) { // Remove DC component
//		buf[i] -= (1 << 14);
//	}
	stop_cycle_count("0.2");
}
 800373e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	stop_cycle_count("0.2");
 8003742:	4803      	ldr	r0, [pc, #12]	@ (8003750 <Spectrogram_Format+0x40>)
 8003744:	f000 b9f4 	b.w	8003b30 <stop_cycle_count>
 8003748:	0800aa8c 	.word	0x0800aa8c
 800374c:	ffffc000 	.word	0xffffc000
 8003750:	0800aa90 	.word	0x0800aa90

08003754 <Spectrogram_Compute>:

// Compute spectrogram of samples and transform into MEL vectors.
void Spectrogram_Compute(q15_t *samples, q15_t *melvec)
{
 8003754:	b530      	push	{r4, r5, lr}
 8003756:	4604      	mov	r4, r0
 8003758:	b08f      	sub	sp, #60	@ 0x3c
 800375a:	460d      	mov	r5, r1
	start_cycle_count();
 800375c:	f000 f9e6 	bl	8003b2c <start_cycle_count>
	// STEP 1  : Windowing of input samples
	//           --> Pointwise product
	//           Complexity: O(N)
	//           Number of cycles: <TODO>
	arm_mult_q15(samples, hamming_window, buf, SAMPLES_PER_MELVEC);
 8003760:	4a3d      	ldr	r2, [pc, #244]	@ (8003858 <Spectrogram_Compute+0x104>)
 8003762:	493e      	ldr	r1, [pc, #248]	@ (800385c <Spectrogram_Compute+0x108>)
 8003764:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003768:	4620      	mov	r0, r4
 800376a:	f003 ff43 	bl	80075f4 <arm_mult_q15>
	stop_cycle_count("1");
 800376e:	483c      	ldr	r0, [pc, #240]	@ (8003860 <Spectrogram_Compute+0x10c>)
 8003770:	f000 f9de 	bl	8003b30 <stop_cycle_count>
	start_cycle_count();
 8003774:	f000 f9da 	bl	8003b2c <start_cycle_count>
	//           Number of cycles: <TODO>

	// Since the FFT is a recursive algorithm, the values are rescaled in the function to ensure that overflow cannot happen.
	arm_rfft_instance_q15 rfft_inst;

	arm_rfft_init_q15(&rfft_inst, SAMPLES_PER_MELVEC, 0, 1);
 8003778:	2301      	movs	r3, #1
 800377a:	2200      	movs	r2, #0
 800377c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003780:	a808      	add	r0, sp, #32
 8003782:	f003 fb45 	bl	8006e10 <arm_rfft_init_q15>

	arm_rfft_q15(&rfft_inst, buf, buf_fft);
 8003786:	4a37      	ldr	r2, [pc, #220]	@ (8003864 <Spectrogram_Compute+0x110>)
 8003788:	4933      	ldr	r1, [pc, #204]	@ (8003858 <Spectrogram_Compute+0x104>)
 800378a:	a808      	add	r0, sp, #32
 800378c:	f003 fac4 	bl	8006d18 <arm_rfft_q15>
	stop_cycle_count("2");
 8003790:	4835      	ldr	r0, [pc, #212]	@ (8003868 <Spectrogram_Compute+0x114>)
 8003792:	f000 f9cd 	bl	8003b30 <stop_cycle_count>
	// STEP 3.1: Find the extremum value (maximum of absolute values)
	//           Complexity: O(N)
	//           Number of cycles: <TODO>

	q15_t vmax;
	uint32_t pIndex=0;
 8003796:	2400      	movs	r4, #0
	start_cycle_count();
 8003798:	f000 f9c8 	bl	8003b2c <start_cycle_count>

	arm_absmax_q15(buf_fft, SAMPLES_PER_MELVEC, &vmax, &pIndex);
 800379c:	ab01      	add	r3, sp, #4
 800379e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80037a2:	f10d 0202 	add.w	r2, sp, #2
 80037a6:	482f      	ldr	r0, [pc, #188]	@ (8003864 <Spectrogram_Compute+0x110>)
	uint32_t pIndex=0;
 80037a8:	9401      	str	r4, [sp, #4]
	arm_absmax_q15(buf_fft, SAMPLES_PER_MELVEC, &vmax, &pIndex);
 80037aa:	f7fe fbbf 	bl	8001f2c <arm_absmax_q15>
	stop_cycle_count("3.1");
 80037ae:	482f      	ldr	r0, [pc, #188]	@ (800386c <Spectrogram_Compute+0x118>)
 80037b0:	4c2f      	ldr	r4, [pc, #188]	@ (8003870 <Spectrogram_Compute+0x11c>)
 80037b2:	f000 f9bd 	bl	8003b30 <stop_cycle_count>
	start_cycle_count();
 80037b6:	f000 f9b9 	bl	8003b2c <start_cycle_count>
	// STEP 3.2: Normalize the vector - Dynamic range increase
	//           Complexity: O(N)
	//           Number of cycles: <TODO>

	for (int i=0; i < SAMPLES_PER_MELVEC; i++) // We don't use the second half of the symmetric spectrum
 80037ba:	4b2e      	ldr	r3, [pc, #184]	@ (8003874 <Spectrogram_Compute+0x120>)
	{
		buf[i] = (q15_t) (((q31_t) buf_fft[i] << 15) /((q31_t)vmax));
 80037bc:	f9bd c002 	ldrsh.w	ip, [sp, #2]
 80037c0:	f503 6080 	add.w	r0, r3, #1024	@ 0x400
 80037c4:	4621      	mov	r1, r4
 80037c6:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
	for (int i=0; i < SAMPLES_PER_MELVEC; i++) // We don't use the second half of the symmetric spectrum
 80037ca:	4283      	cmp	r3, r0
		buf[i] = (q15_t) (((q31_t) buf_fft[i] << 15) /((q31_t)vmax));
 80037cc:	ea4f 32c2 	mov.w	r2, r2, lsl #15
 80037d0:	fb92 f2fc 	sdiv	r2, r2, ip
 80037d4:	f821 2f02 	strh.w	r2, [r1, #2]!
	for (int i=0; i < SAMPLES_PER_MELVEC; i++) // We don't use the second half of the symmetric spectrum
 80037d8:	d1f5      	bne.n	80037c6 <Spectrogram_Compute+0x72>
	}
	stop_cycle_count("3.2");
 80037da:	4827      	ldr	r0, [pc, #156]	@ (8003878 <Spectrogram_Compute+0x124>)
 80037dc:	f000 f9a8 	bl	8003b30 <stop_cycle_count>
	start_cycle_count();
 80037e0:	f000 f9a4 	bl	8003b2c <start_cycle_count>
	// STEP 3.3: Compute the complex magnitude
	//           --> The output buffer is now two times smaller because (real|imag) --> (mag)
	//           Complexity: O(N)
	//           Number of cycles: <TODO>

	arm_cmplx_mag_q15(buf, buf, SAMPLES_PER_MELVEC/2);
 80037e4:	491c      	ldr	r1, [pc, #112]	@ (8003858 <Spectrogram_Compute+0x104>)
 80037e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037ea:	4608      	mov	r0, r1
 80037ec:	f003 fd92 	bl	8007314 <arm_cmplx_mag_q15>
	stop_cycle_count("3.3");
 80037f0:	4822      	ldr	r0, [pc, #136]	@ (800387c <Spectrogram_Compute+0x128>)
 80037f2:	f000 f99d 	bl	8003b30 <stop_cycle_count>
	start_cycle_count();
 80037f6:	f000 f999 	bl	8003b2c <start_cycle_count>
	//           Complexity: O(N)
	//           Number of cycles: <TODO>

	for (int i=0; i < SAMPLES_PER_MELVEC/2; i++)
	{
		buf[i] = (q15_t) ((((q31_t) buf[i]) * ((q31_t) vmax) ) >> 15 );
 80037fa:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 80037fe:	4b20      	ldr	r3, [pc, #128]	@ (8003880 <Spectrogram_Compute+0x12c>)
 8003800:	f834 2f02 	ldrh.w	r2, [r4, #2]!
 8003804:	fb12 f201 	smulbb	r2, r2, r1
 8003808:	13d2      	asrs	r2, r2, #15
	for (int i=0; i < SAMPLES_PER_MELVEC/2; i++)
 800380a:	42a3      	cmp	r3, r4
		buf[i] = (q15_t) ((((q31_t) buf[i]) * ((q31_t) vmax) ) >> 15 );
 800380c:	8022      	strh	r2, [r4, #0]
	for (int i=0; i < SAMPLES_PER_MELVEC/2; i++)
 800380e:	d1f7      	bne.n	8003800 <Spectrogram_Compute+0xac>
	}
	stop_cycle_count("3.4");
 8003810:	481c      	ldr	r0, [pc, #112]	@ (8003884 <Spectrogram_Compute+0x130>)
 8003812:	f000 f98d 	bl	8003b30 <stop_cycle_count>
	start_cycle_count();
 8003816:	f000 f989 	bl	8003b2c <start_cycle_count>
	// /!\ In order to avoid overflows completely the input signals should be scaled down. Scale down one of the input matrices by log2(numColsA) bits to avoid overflows,
	// as a total of numColsA additions are computed internally for each output element. Because our hz2mel_mat matrix contains lots of zeros in its rows, this is not necessary.
	
	arm_matrix_instance_q15 hz2mel_inst, fftmag_inst, melvec_inst;

	arm_mat_init_q15(&hz2mel_inst, MELVEC_LENGTH, SAMPLES_PER_MELVEC/2, hz2mel_mat);
 800381a:	a802      	add	r0, sp, #8
 800381c:	4b1a      	ldr	r3, [pc, #104]	@ (8003888 <Spectrogram_Compute+0x134>)
 800381e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003822:	2114      	movs	r1, #20
 8003824:	f003 fd72 	bl	800730c <arm_mat_init_q15>
	arm_mat_init_q15(&fftmag_inst, SAMPLES_PER_MELVEC/2, 1, buf);
 8003828:	a804      	add	r0, sp, #16
 800382a:	4b0b      	ldr	r3, [pc, #44]	@ (8003858 <Spectrogram_Compute+0x104>)
 800382c:	2201      	movs	r2, #1
 800382e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003832:	f003 fd6b 	bl	800730c <arm_mat_init_q15>
	arm_mat_init_q15(&melvec_inst, MELVEC_LENGTH, 1, melvec);
 8003836:	462b      	mov	r3, r5
 8003838:	a806      	add	r0, sp, #24
 800383a:	2201      	movs	r2, #1
 800383c:	2114      	movs	r1, #20
 800383e:	f003 fd65 	bl	800730c <arm_mat_init_q15>

	arm_mat_mult_fast_q15(&hz2mel_inst, &fftmag_inst, &melvec_inst, buf_tmp);
 8003842:	4b12      	ldr	r3, [pc, #72]	@ (800388c <Spectrogram_Compute+0x138>)
 8003844:	aa06      	add	r2, sp, #24
 8003846:	a904      	add	r1, sp, #16
 8003848:	a802      	add	r0, sp, #8
 800384a:	f003 fb5d 	bl	8006f08 <arm_mat_mult_fast_q15>
	stop_cycle_count("4");
 800384e:	4810      	ldr	r0, [pc, #64]	@ (8003890 <Spectrogram_Compute+0x13c>)
 8003850:	f000 f96e 	bl	8003b30 <stop_cycle_count>
}
 8003854:	b00f      	add	sp, #60	@ 0x3c
 8003856:	bd30      	pop	{r4, r5, pc}
 8003858:	2000475c 	.word	0x2000475c
 800385c:	20000378 	.word	0x20000378
 8003860:	0800aa94 	.word	0x0800aa94
 8003864:	20003f5c 	.word	0x20003f5c
 8003868:	0800aa98 	.word	0x0800aa98
 800386c:	0800aa9c 	.word	0x0800aa9c
 8003870:	2000475a 	.word	0x2000475a
 8003874:	20003f5a 	.word	0x20003f5a
 8003878:	0800aaa0 	.word	0x0800aaa0
 800387c:	0800aaa4 	.word	0x0800aaa4
 8003880:	2000495a 	.word	0x2000495a
 8003884:	0800aaa8 	.word	0x0800aaa8
 8003888:	20000778 	.word	0x20000778
 800388c:	20003d5c 	.word	0x20003d5c
 8003890:	0800aaac 	.word	0x0800aaac

08003894 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003894:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003896:	4810      	ldr	r0, [pc, #64]	@ (80038d8 <MX_SPI1_Init+0x44>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003898:	4c10      	ldr	r4, [pc, #64]	@ (80038dc <MX_SPI1_Init+0x48>)
 800389a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 800389e:	e9c0 4100 	strd	r4, r1, [r0]
 80038a2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80038a6:	2300      	movs	r3, #0
 80038a8:	2208      	movs	r2, #8
 80038aa:	f44f 64e0 	mov.w	r4, #1792	@ 0x700
 80038ae:	6181      	str	r1, [r0, #24]
 80038b0:	2107      	movs	r1, #7
 80038b2:	e9c0 3402 	strd	r3, r4, [r0, #8]
 80038b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80038ba:	e9c0 2307 	strd	r2, r3, [r0, #28]
 80038be:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
 80038c2:	e9c0 130b 	strd	r1, r3, [r0, #44]	@ 0x2c
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80038c6:	6342      	str	r2, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038c8:	f002 fbb8 	bl	800603c <HAL_SPI_Init>
 80038cc:	b900      	cbnz	r0, 80038d0 <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80038ce:	bd10      	pop	{r4, pc}
 80038d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80038d4:	f7fe bd5a 	b.w	800238c <Error_Handler>
 80038d8:	20004b60 	.word	0x20004b60
 80038dc:	40013000 	.word	0x40013000

080038e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80038e0:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 80038e2:	4b22      	ldr	r3, [pc, #136]	@ (800396c <HAL_SPI_MspInit+0x8c>)
 80038e4:	6802      	ldr	r2, [r0, #0]
{
 80038e6:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e8:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI1)
 80038ea:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ec:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80038f0:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80038f4:	9408      	str	r4, [sp, #32]
  if(spiHandle->Instance==SPI1)
 80038f6:	d001      	beq.n	80038fc <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80038f8:	b00a      	add	sp, #40	@ 0x28
 80038fa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80038fc:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003900:	2603      	movs	r6, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003902:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003904:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003908:	661a      	str	r2, [r3, #96]	@ 0x60
 800390a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800390c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003910:	9201      	str	r2, [sp, #4]
 8003912:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003914:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800391c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800391e:	f002 0201 	and.w	r2, r2, #1
 8003922:	9202      	str	r2, [sp, #8]
 8003924:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003926:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003928:	f042 0210 	orr.w	r2, r2, #16
 800392c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800392e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003930:	f003 0310 	and.w	r3, r3, #16
 8003934:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003936:	22c0      	movs	r2, #192	@ 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003938:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800393a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800393c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800393e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003942:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003946:	e9cd 6507 	strd	r6, r5, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800394a:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394c:	f001 f930 	bl	8004bb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003950:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003954:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003956:	4806      	ldr	r0, [pc, #24]	@ (8003970 <HAL_SPI_MspInit+0x90>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003958:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800395c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800395e:	e9cd 4606 	strd	r4, r6, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003962:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003964:	f001 f924 	bl	8004bb0 <HAL_GPIO_Init>
}
 8003968:	b00a      	add	sp, #40	@ 0x28
 800396a:	bd70      	pop	{r4, r5, r6, pc}
 800396c:	40013000 	.word	0x40013000
 8003970:	48001000 	.word	0x48001000

08003974 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003974:	4b0a      	ldr	r3, [pc, #40]	@ (80039a0 <HAL_MspInit+0x2c>)
 8003976:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003978:	f042 0201 	orr.w	r2, r2, #1
 800397c:	661a      	str	r2, [r3, #96]	@ 0x60
 800397e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 8003980:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003982:	f002 0201 	and.w	r2, r2, #1
 8003986:	9200      	str	r2, [sp, #0]
 8003988:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800398a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800398c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003990:	659a      	str	r2, [r3, #88]	@ 0x58
 8003992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003994:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003998:	9301      	str	r3, [sp, #4]
 800399a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800399c:	b002      	add	sp, #8
 800399e:	4770      	bx	lr
 80039a0:	40021000 	.word	0x40021000

080039a4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039a4:	e7fe      	b.n	80039a4 <NMI_Handler>
 80039a6:	bf00      	nop

080039a8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039a8:	e7fe      	b.n	80039a8 <HardFault_Handler>
 80039aa:	bf00      	nop

080039ac <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039ac:	e7fe      	b.n	80039ac <MemManage_Handler>
 80039ae:	bf00      	nop

080039b0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039b0:	e7fe      	b.n	80039b0 <BusFault_Handler>
 80039b2:	bf00      	nop

080039b4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039b4:	e7fe      	b.n	80039b4 <UsageFault_Handler>
 80039b6:	bf00      	nop

080039b8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop

080039bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop

080039c0 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop

080039c4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039c4:	f000 b916 	b.w	8003bf4 <HAL_IncTick>

080039c8 <EXTI3_IRQHandler>:
  */
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RADIO_INT_Pin);
 80039c8:	2008      	movs	r0, #8
 80039ca:	f001 ba1b 	b.w	8004e04 <HAL_GPIO_EXTI_IRQHandler>
 80039ce:	bf00      	nop

080039d0 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039d0:	4801      	ldr	r0, [pc, #4]	@ (80039d8 <DMA1_Channel1_IRQHandler+0x8>)
 80039d2:	f001 b89f 	b.w	8004b14 <HAL_DMA_IRQHandler>
 80039d6:	bf00      	nop
 80039d8:	2000316c 	.word	0x2000316c

080039dc <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80039dc:	4801      	ldr	r0, [pc, #4]	@ (80039e4 <TIM3_IRQHandler+0x8>)
 80039de:	f002 beb7 	b.w	8006750 <HAL_TIM_IRQHandler>
 80039e2:	bf00      	nop
 80039e4:	20004bc8 	.word	0x20004bc8

080039e8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80039e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80039ec:	f001 ba0a 	b.w	8004e04 <HAL_GPIO_EXTI_IRQHandler>

080039f0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039f0:	490c      	ldr	r1, [pc, #48]	@ (8003a24 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003a28 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80039f4:	680b      	ldr	r3, [r1, #0]
{
 80039f6:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039f8:	4c0c      	ldr	r4, [pc, #48]	@ (8003a2c <_sbrk+0x3c>)
 80039fa:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80039fc:	b12b      	cbz	r3, 8003a0a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039fe:	4418      	add	r0, r3
 8003a00:	4290      	cmp	r0, r2
 8003a02:	d807      	bhi.n	8003a14 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8003a04:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003a0a:	4b09      	ldr	r3, [pc, #36]	@ (8003a30 <_sbrk+0x40>)
 8003a0c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003a0e:	4418      	add	r0, r3
 8003a10:	4290      	cmp	r0, r2
 8003a12:	d9f7      	bls.n	8003a04 <_sbrk+0x14>
    errno = ENOMEM;
 8003a14:	f005 f940 	bl	8008c98 <__errno>
 8003a18:	230c      	movs	r3, #12
 8003a1a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003a1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	bd10      	pop	{r4, pc}
 8003a24:	20004bc4 	.word	0x20004bc4
 8003a28:	20050000 	.word	0x20050000
 8003a2c:	00000400 	.word	0x00000400
 8003a30:	20004df0 	.word	0x20004df0

08003a34 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003a34:	480e      	ldr	r0, [pc, #56]	@ (8003a70 <SystemInit+0x3c>)
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003a36:	4b0f      	ldr	r3, [pc, #60]	@ (8003a74 <SystemInit+0x40>)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003a38:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8003a3c:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8003a40:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  RCC->CR |= RCC_CR_MSION;
 8003a44:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003a46:	2100      	movs	r1, #0
  RCC->CR |= RCC_CR_MSION;
 8003a48:	f042 0201 	orr.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8003a4e:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	f022 52a8 	bic.w	r2, r2, #352321536	@ 0x15000000
 8003a56:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003a5a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 8003a5e:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 8003a60:	60d8      	str	r0, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a68:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003a6a:	6199      	str	r1, [r3, #24]
}
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	e000ed00 	.word	0xe000ed00
 8003a74:	40021000 	.word	0x40021000

08003a78 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003a78:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a7a:	481a      	ldr	r0, [pc, #104]	@ (8003ae4 <MX_TIM3_Init+0x6c>)
 8003a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ae8 <MX_TIM3_Init+0x70>)
 8003a7e:	6002      	str	r2, [r0, #0]
{
 8003a80:	b089      	sub	sp, #36	@ 0x24
  htim3.Init.Prescaler = 11;
 8003a82:	220b      	movs	r2, #11
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a84:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 11;
 8003a86:	6042      	str	r2, [r0, #4]
 8003a88:	22c3      	movs	r2, #195	@ 0xc3
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a8a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003a8e:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a92:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim3.Init.Prescaler = 11;
 8003a96:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a9a:	9303      	str	r3, [sp, #12]
  htim3.Init.Prescaler = 11;
 8003a9c:	6103      	str	r3, [r0, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 195;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a9e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003aa0:	f002 fcd4 	bl	800644c <HAL_TIM_Base_Init>
 8003aa4:	b998      	cbnz	r0, 8003ace <MX_TIM3_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003aa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003aaa:	480e      	ldr	r0, [pc, #56]	@ (8003ae4 <MX_TIM3_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003aac:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003aae:	a904      	add	r1, sp, #16
 8003ab0:	f002 fd9a 	bl	80065e8 <HAL_TIM_ConfigClockSource>
 8003ab4:	b998      	cbnz	r0, 8003ade <MX_TIM3_Init+0x66>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003ab6:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ab8:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003aba:	480a      	ldr	r0, [pc, #40]	@ (8003ae4 <MX_TIM3_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003abc:	9201      	str	r2, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003abe:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ac0:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ac2:	f002 fef1 	bl	80068a8 <HAL_TIMEx_MasterConfigSynchronization>
 8003ac6:	b928      	cbnz	r0, 8003ad4 <MX_TIM3_Init+0x5c>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003ac8:	b009      	add	sp, #36	@ 0x24
 8003aca:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003ace:	f7fe fc5d 	bl	800238c <Error_Handler>
 8003ad2:	e7e8      	b.n	8003aa6 <MX_TIM3_Init+0x2e>
    Error_Handler();
 8003ad4:	f7fe fc5a 	bl	800238c <Error_Handler>
}
 8003ad8:	b009      	add	sp, #36	@ 0x24
 8003ada:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003ade:	f7fe fc55 	bl	800238c <Error_Handler>
 8003ae2:	e7e8      	b.n	8003ab6 <MX_TIM3_Init+0x3e>
 8003ae4:	20004bc8 	.word	0x20004bc8
 8003ae8:	40000400 	.word	0x40000400

08003aec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 8003aec:	4b0e      	ldr	r3, [pc, #56]	@ (8003b28 <HAL_TIM_Base_MspInit+0x3c>)
 8003aee:	6802      	ldr	r2, [r0, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d000      	beq.n	8003af6 <HAL_TIM_Base_MspInit+0xa>
 8003af4:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003af6:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
{
 8003afa:	b500      	push	{lr}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003afc:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8003afe:	f041 0102 	orr.w	r1, r1, #2
 8003b02:	6599      	str	r1, [r3, #88]	@ 0x58
 8003b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
{
 8003b06:	b083      	sub	sp, #12

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b08:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b10:	201d      	movs	r0, #29
 8003b12:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b14:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003b16:	f000 fec3 	bl	80048a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003b1a:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003b1c:	b003      	add	sp, #12
 8003b1e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003b22:	f000 bef9 	b.w	8004918 <HAL_NVIC_EnableIRQ>
 8003b26:	bf00      	nop
 8003b28:	40000400 	.word	0x40000400

08003b2c <start_cycle_count>:
	printf(" %lu cycles.\r\n", res);
}

#else

void start_cycle_count() {}
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop

08003b30 <stop_cycle_count>:
void stop_cycle_count(char *s) {}
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop

08003b34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003b34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b38:	f7ff ff7c 	bl	8003a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003b3c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003b3e:	e003      	b.n	8003b48 <LoopCopyDataInit>

08003b40 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003b40:	4b0b      	ldr	r3, [pc, #44]	@ (8003b70 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003b42:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003b44:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003b46:	3104      	adds	r1, #4

08003b48 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003b48:	480a      	ldr	r0, [pc, #40]	@ (8003b74 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b78 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003b4c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003b4e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003b50:	d3f6      	bcc.n	8003b40 <CopyDataInit>
	ldr	r2, =_sbss
 8003b52:	4a0a      	ldr	r2, [pc, #40]	@ (8003b7c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003b54:	e002      	b.n	8003b5c <LoopFillZerobss>

08003b56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003b56:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003b58:	f842 3b04 	str.w	r3, [r2], #4

08003b5c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003b5c:	4b08      	ldr	r3, [pc, #32]	@ (8003b80 <LoopForever+0x16>)
	cmp	r2, r3
 8003b5e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003b60:	d3f9      	bcc.n	8003b56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b62:	f005 f89f 	bl	8008ca4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003b66:	f7fe fc83 	bl	8002470 <main>

08003b6a <LoopForever>:

LoopForever:
    b LoopForever
 8003b6a:	e7fe      	b.n	8003b6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003b6c:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8003b70:	0801ccd8 	.word	0x0801ccd8
	ldr	r0, =_sdata
 8003b74:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003b78:	2000314c 	.word	0x2000314c
	ldr	r2, =_sbss
 8003b7c:	20003150 	.word	0x20003150
	ldr	r3, = _ebss
 8003b80:	20004df0 	.word	0x20004df0

08003b84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b84:	e7fe      	b.n	8003b84 <ADC1_2_IRQHandler>
	...

08003b88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b88:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003b8a:	4b0f      	ldr	r3, [pc, #60]	@ (8003bc8 <HAL_InitTick+0x40>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	b90b      	cbnz	r3, 8003b94 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b90:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8003b92:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003b94:	490d      	ldr	r1, [pc, #52]	@ (8003bcc <HAL_InitTick+0x44>)
 8003b96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003b9a:	4605      	mov	r5, r0
 8003b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba0:	6808      	ldr	r0, [r1, #0]
 8003ba2:	fbb0 f0f3 	udiv	r0, r0, r3
 8003ba6:	f000 fec5 	bl	8004934 <HAL_SYSTICK_Config>
 8003baa:	4604      	mov	r4, r0
 8003bac:	2800      	cmp	r0, #0
 8003bae:	d1ef      	bne.n	8003b90 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bb0:	2d0f      	cmp	r5, #15
 8003bb2:	d8ed      	bhi.n	8003b90 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	4629      	mov	r1, r5
 8003bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bbc:	f000 fe70 	bl	80048a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003bc0:	4b03      	ldr	r3, [pc, #12]	@ (8003bd0 <HAL_InitTick+0x48>)
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	601d      	str	r5, [r3, #0]
}
 8003bc6:	bd38      	pop	{r3, r4, r5, pc}
 8003bc8:	20002f7c 	.word	0x20002f7c
 8003bcc:	20002f78 	.word	0x20002f78
 8003bd0:	20002f80 	.word	0x20002f80

08003bd4 <HAL_Init>:
{
 8003bd4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bd6:	2003      	movs	r0, #3
 8003bd8:	f000 fe50 	bl	800487c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003bdc:	2000      	movs	r0, #0
 8003bde:	f7ff ffd3 	bl	8003b88 <HAL_InitTick>
 8003be2:	b110      	cbz	r0, 8003bea <HAL_Init+0x16>
    status = HAL_ERROR;
 8003be4:	2401      	movs	r4, #1
}
 8003be6:	4620      	mov	r0, r4
 8003be8:	bd10      	pop	{r4, pc}
 8003bea:	4604      	mov	r4, r0
    HAL_MspInit();
 8003bec:	f7ff fec2 	bl	8003974 <HAL_MspInit>
}
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	bd10      	pop	{r4, pc}

08003bf4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003bf4:	4a03      	ldr	r2, [pc, #12]	@ (8003c04 <HAL_IncTick+0x10>)
 8003bf6:	4b04      	ldr	r3, [pc, #16]	@ (8003c08 <HAL_IncTick+0x14>)
 8003bf8:	6811      	ldr	r1, [r2, #0]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	440b      	add	r3, r1
 8003bfe:	6013      	str	r3, [r2, #0]
}
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20004ca0 	.word	0x20004ca0
 8003c08:	20002f7c 	.word	0x20002f7c

08003c0c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003c0c:	4b01      	ldr	r3, [pc, #4]	@ (8003c14 <HAL_GetTick+0x8>)
 8003c0e:	6818      	ldr	r0, [r3, #0]
}
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	20004ca0 	.word	0x20004ca0

08003c18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c18:	b538      	push	{r3, r4, r5, lr}
 8003c1a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003c1c:	f7ff fff6 	bl	8003c0c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c20:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003c22:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003c24:	d002      	beq.n	8003c2c <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8003c26:	4b04      	ldr	r3, [pc, #16]	@ (8003c38 <HAL_Delay+0x20>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c2c:	f7ff ffee 	bl	8003c0c <HAL_GetTick>
 8003c30:	1b40      	subs	r0, r0, r5
 8003c32:	42a0      	cmp	r0, r4
 8003c34:	d3fa      	bcc.n	8003c2c <HAL_Delay+0x14>
  {
  }
}
 8003c36:	bd38      	pop	{r3, r4, r5, pc}
 8003c38:	20002f7c 	.word	0x20002f7c

08003c3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c3c:	b530      	push	{r4, r5, lr}
 8003c3e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003c40:	2300      	movs	r3, #0
 8003c42:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c44:	2800      	cmp	r0, #0
 8003c46:	f000 809f 	beq.w	8003d88 <HAL_ADC_Init+0x14c>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c4a:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8003c4c:	4604      	mov	r4, r0
 8003c4e:	2d00      	cmp	r5, #0
 8003c50:	f000 809f 	beq.w	8003d92 <HAL_ADC_Init+0x156>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c54:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c56:	6893      	ldr	r3, [r2, #8]
 8003c58:	009d      	lsls	r5, r3, #2
 8003c5a:	d505      	bpl.n	8003c68 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003c5c:	6893      	ldr	r3, [r2, #8]
 8003c5e:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003c62:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003c66:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c68:	6893      	ldr	r3, [r2, #8]
 8003c6a:	00d8      	lsls	r0, r3, #3
 8003c6c:	d419      	bmi.n	8003ca2 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c6e:	4b5b      	ldr	r3, [pc, #364]	@ (8003ddc <HAL_ADC_Init+0x1a0>)
 8003c70:	485b      	ldr	r0, [pc, #364]	@ (8003de0 <HAL_ADC_Init+0x1a4>)
 8003c72:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003c74:	6891      	ldr	r1, [r2, #8]
 8003c76:	099b      	lsrs	r3, r3, #6
 8003c78:	fba0 0303 	umull	r0, r3, r0, r3
 8003c7c:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8003c80:	099b      	lsrs	r3, r3, #6
 8003c82:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8003c86:	3301      	adds	r3, #1
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8003c8e:	6091      	str	r1, [r2, #8]
 8003c90:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003c92:	9b01      	ldr	r3, [sp, #4]
 8003c94:	b12b      	cbz	r3, 8003ca2 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8003c96:	9b01      	ldr	r3, [sp, #4]
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003c9c:	9b01      	ldr	r3, [sp, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f9      	bne.n	8003c96 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ca2:	6893      	ldr	r3, [r2, #8]
 8003ca4:	00d9      	lsls	r1, r3, #3
 8003ca6:	d472      	bmi.n	8003d8e <HAL_ADC_Init+0x152>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ca8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003caa:	f043 0310 	orr.w	r3, r3, #16
 8003cae:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cb0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003cb2:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cb4:	4303      	orrs	r3, r0
 8003cb6:	65e3      	str	r3, [r4, #92]	@ 0x5c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cb8:	6893      	ldr	r3, [r2, #8]
 8003cba:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003cbe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003cc0:	d15e      	bne.n	8003d80 <HAL_ADC_Init+0x144>
 8003cc2:	06db      	lsls	r3, r3, #27
 8003cc4:	d45c      	bmi.n	8003d80 <HAL_ADC_Init+0x144>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cc6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003cc8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003ccc:	f043 0302 	orr.w	r3, r3, #2
 8003cd0:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cd2:	6893      	ldr	r3, [r2, #8]
 8003cd4:	07dd      	lsls	r5, r3, #31
 8003cd6:	d410      	bmi.n	8003cfa <HAL_ADC_Init+0xbe>
 8003cd8:	4942      	ldr	r1, [pc, #264]	@ (8003de4 <HAL_ADC_Init+0x1a8>)
 8003cda:	4b43      	ldr	r3, [pc, #268]	@ (8003de8 <HAL_ADC_Init+0x1ac>)
 8003cdc:	6889      	ldr	r1, [r1, #8]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	4942      	ldr	r1, [pc, #264]	@ (8003dec <HAL_ADC_Init+0x1b0>)
 8003ce4:	6889      	ldr	r1, [r1, #8]
 8003ce6:	430b      	orrs	r3, r1
 8003ce8:	07d9      	lsls	r1, r3, #31
 8003cea:	d406      	bmi.n	8003cfa <HAL_ADC_Init+0xbe>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003cec:	4940      	ldr	r1, [pc, #256]	@ (8003df0 <HAL_ADC_Init+0x1b4>)
 8003cee:	6865      	ldr	r5, [r4, #4]
 8003cf0:	688b      	ldr	r3, [r1, #8]
 8003cf2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8003cf6:	432b      	orrs	r3, r5
 8003cf8:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 8003cfa:	68e5      	ldr	r5, [r4, #12]
 8003cfc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003cfe:	f894 1020 	ldrb.w	r1, [r4, #32]
                 hadc->Init.DataAlign                                                   |
 8003d02:	432b      	orrs	r3, r5
 8003d04:	68a5      	ldr	r5, [r4, #8]
 8003d06:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d08:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d0a:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 8003d0c:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003d10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d14:	d04b      	beq.n	8003dae <HAL_ADC_Init+0x172>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d16:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003d18:	b121      	cbz	r1, 8003d24 <HAL_ADC_Init+0xe8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 8003d1a:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d1c:	f401 7170 	and.w	r1, r1, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003d20:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003d22:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003d24:	68d5      	ldr	r5, [r2, #12]
 8003d26:	4933      	ldr	r1, [pc, #204]	@ (8003df4 <HAL_ADC_Init+0x1b8>)
 8003d28:	4029      	ands	r1, r5
 8003d2a:	4319      	orrs	r1, r3
 8003d2c:	60d1      	str	r1, [r2, #12]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d2e:	6893      	ldr	r3, [r2, #8]
 8003d30:	071b      	lsls	r3, r3, #28
 8003d32:	d416      	bmi.n	8003d62 <HAL_ADC_Init+0x126>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d34:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003d38:	7e25      	ldrb	r5, [r4, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003d3a:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003d3c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d3e:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
 8003d42:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003d44:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8003d48:	f021 0106 	bic.w	r1, r1, #6
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003d4c:	432b      	orrs	r3, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003d4e:	430b      	orrs	r3, r1
 8003d50:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003d52:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d02e      	beq.n	8003db8 <HAL_ADC_Init+0x17c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003d5a:	6913      	ldr	r3, [r2, #16]
 8003d5c:	f023 0301 	bic.w	r3, r3, #1
 8003d60:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003d62:	6923      	ldr	r3, [r4, #16]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d01a      	beq.n	8003d9e <HAL_ADC_Init+0x162>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d68:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003d6a:	f023 030f 	bic.w	r3, r3, #15
 8003d6e:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d70:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003d72:	f023 0303 	bic.w	r3, r3, #3
 8003d76:	f043 0301 	orr.w	r3, r3, #1
 8003d7a:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003d7c:	b003      	add	sp, #12
 8003d7e:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d80:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003d82:	f043 0310 	orr.w	r3, r3, #16
 8003d86:	65a3      	str	r3, [r4, #88]	@ 0x58
    return HAL_ERROR;
 8003d88:	2001      	movs	r0, #1
}
 8003d8a:	b003      	add	sp, #12
 8003d8c:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d8e:	2000      	movs	r0, #0
 8003d90:	e792      	b.n	8003cb8 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 8003d92:	f7fd f8e5 	bl	8000f60 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003d96:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8003d98:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
 8003d9c:	e75a      	b.n	8003c54 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003d9e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003da0:	69e3      	ldr	r3, [r4, #28]
 8003da2:	f021 010f 	bic.w	r1, r1, #15
 8003da6:	3b01      	subs	r3, #1
 8003da8:	430b      	orrs	r3, r1
 8003daa:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dac:	e7e0      	b.n	8003d70 <HAL_ADC_Init+0x134>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003dae:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003db0:	3901      	subs	r1, #1
 8003db2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8003db6:	e7ae      	b.n	8003d16 <HAL_ADC_Init+0xda>
        MODIFY_REG(hadc->Instance->CFGR2,
 8003db8:	6911      	ldr	r1, [r2, #16]
 8003dba:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003dbc:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8003dbe:	f421 61ff 	bic.w	r1, r1, #2040	@ 0x7f8
 8003dc2:	f021 0104 	bic.w	r1, r1, #4
 8003dc6:	432b      	orrs	r3, r5
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003dd0:	430b      	orrs	r3, r1
 8003dd2:	f043 0301 	orr.w	r3, r3, #1
 8003dd6:	6113      	str	r3, [r2, #16]
 8003dd8:	e7c3      	b.n	8003d62 <HAL_ADC_Init+0x126>
 8003dda:	bf00      	nop
 8003ddc:	20002f78 	.word	0x20002f78
 8003de0:	053e2d63 	.word	0x053e2d63
 8003de4:	50040000 	.word	0x50040000
 8003de8:	50040100 	.word	0x50040100
 8003dec:	50040200 	.word	0x50040200
 8003df0:	50040300 	.word	0x50040300
 8003df4:	fff0c007 	.word	0xfff0c007

08003df8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003df8:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003dfa:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003dfc:	f7fd f9aa 	bl	8001154 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e00:	bd08      	pop	{r3, pc}
 8003e02:	bf00      	nop

08003e04 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop

08003e08 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e08:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003e0a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003e0c:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 8003e10:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e12:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003e14:	d11d      	bne.n	8003e52 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003e16:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e1c:	659a      	str	r2, [r3, #88]	@ 0x58
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003e1e:	680a      	ldr	r2, [r1, #0]
 8003e20:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003e24:	68ca      	ldr	r2, [r1, #12]
 8003e26:	d01b      	beq.n	8003e60 <ADC_DMAConvCplt+0x58>
 8003e28:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8003e2c:	d10d      	bne.n	8003e4a <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003e2e:	68ca      	ldr	r2, [r1, #12]
 8003e30:	0494      	lsls	r4, r2, #18
 8003e32:	d40a      	bmi.n	8003e4a <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e34:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003e36:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e3a:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003e3e:	04d1      	lsls	r1, r2, #19
 8003e40:	d403      	bmi.n	8003e4a <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e42:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003e44:	f042 0201 	orr.w	r2, r2, #1
 8003e48:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fd f944 	bl	80010d8 <HAL_ADC_ConvCpltCallback>
}
 8003e50:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e52:	06d2      	lsls	r2, r2, #27
 8003e54:	d40a      	bmi.n	8003e6c <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
}
 8003e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e5e:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003e60:	0790      	lsls	r0, r2, #30
 8003e62:	d5e7      	bpl.n	8003e34 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7fd f937 	bl	80010d8 <HAL_ADC_ConvCpltCallback>
 8003e6a:	e7f1      	b.n	8003e50 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff ffc9 	bl	8003e04 <HAL_ADC_ErrorCallback>
}
 8003e72:	bd10      	pop	{r4, pc}

08003e74 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e74:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8003e76:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003e78:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003e7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e7e:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003e80:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8003e82:	f043 0304 	orr.w	r3, r3, #4
 8003e86:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e88:	f7ff ffbc 	bl	8003e04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e8c:	bd08      	pop	{r3, pc}
 8003e8e:	bf00      	nop

08003e90 <HAL_ADC_ConfigChannel>:
{
 8003e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8003e94:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
{
 8003e98:	b082      	sub	sp, #8
 8003e9a:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003e9c:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8003e9e:	f04f 0000 	mov.w	r0, #0
 8003ea2:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003ea4:	f000 812f 	beq.w	8004106 <HAL_ADC_ConfigChannel+0x276>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ea8:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8003eaa:	2001      	movs	r0, #1
 8003eac:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003eb0:	68a2      	ldr	r2, [r4, #8]
 8003eb2:	f012 0c04 	ands.w	ip, r2, #4
 8003eb6:	d155      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0xd4>
    uint32_t config_rank = pConfig->Rank;
 8003eb8:	6848      	ldr	r0, [r1, #4]
    if (pConfig->Rank <= 5U)
 8003eba:	2805      	cmp	r0, #5
 8003ebc:	f240 8096 	bls.w	8003fec <HAL_ADC_ConfigChannel+0x15c>
  MODIFY_REG(*preg,
 8003ec0:	f000 051f 	and.w	r5, r0, #31
 8003ec4:	f04f 0e1f 	mov.w	lr, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003ec8:	0982      	lsrs	r2, r0, #6
  MODIFY_REG(*preg,
 8003eca:	fa0e fe05 	lsl.w	lr, lr, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003ece:	f002 0c0c 	and.w	ip, r2, #12
  MODIFY_REG(*preg,
 8003ed2:	ea6f 0e0e 	mvn.w	lr, lr
 8003ed6:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003ed8:	f104 0030 	add.w	r0, r4, #48	@ 0x30
  MODIFY_REG(*preg,
 8003edc:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8003ee0:	40aa      	lsls	r2, r5
 8003ee2:	f850 500c 	ldr.w	r5, [r0, ip]
 8003ee6:	ea05 050e 	and.w	r5, r5, lr
 8003eea:	432a      	orrs	r2, r5
 8003eec:	f840 200c 	str.w	r2, [r0, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ef0:	68a2      	ldr	r2, [r4, #8]
 8003ef2:	0757      	lsls	r7, r2, #29
 8003ef4:	d540      	bpl.n	8003f78 <HAL_ADC_ConfigChannel+0xe8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ef6:	68a2      	ldr	r2, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003ef8:	680a      	ldr	r2, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003efa:	68a0      	ldr	r0, [r4, #8]
 8003efc:	07c5      	lsls	r5, r0, #31
 8003efe:	d412      	bmi.n	8003f26 <HAL_ADC_ConfigChannel+0x96>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003f00:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8003f02:	48af      	ldr	r0, [pc, #700]	@ (80041c0 <HAL_ADC_ConfigChannel+0x330>)
 8003f04:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
 8003f08:	f006 0718 	and.w	r7, r6, #24
 8003f0c:	40f8      	lsrs	r0, r7
 8003f0e:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8003f12:	4010      	ands	r0, r2
 8003f14:	ea25 0507 	bic.w	r5, r5, r7
 8003f18:	4328      	orrs	r0, r5
 8003f1a:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f1e:	48a9      	ldr	r0, [pc, #676]	@ (80041c4 <HAL_ADC_ConfigChannel+0x334>)
 8003f20:	4286      	cmp	r6, r0
 8003f22:	f000 80a0 	beq.w	8004066 <HAL_ADC_ConfigChannel+0x1d6>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003f26:	49a8      	ldr	r1, [pc, #672]	@ (80041c8 <HAL_ADC_ConfigChannel+0x338>)
 8003f28:	420a      	tst	r2, r1
 8003f2a:	d019      	beq.n	8003f60 <HAL_ADC_ConfigChannel+0xd0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003f2c:	48a7      	ldr	r0, [pc, #668]	@ (80041cc <HAL_ADC_ConfigChannel+0x33c>)
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f2e:	4da8      	ldr	r5, [pc, #672]	@ (80041d0 <HAL_ADC_ConfigChannel+0x340>)
 8003f30:	6881      	ldr	r1, [r0, #8]
 8003f32:	42aa      	cmp	r2, r5
 8003f34:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8003f38:	d06e      	beq.n	8004018 <HAL_ADC_ConfigChannel+0x188>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003f3a:	4da6      	ldr	r5, [pc, #664]	@ (80041d4 <HAL_ADC_ConfigChannel+0x344>)
 8003f3c:	42aa      	cmp	r2, r5
 8003f3e:	f000 80e6 	beq.w	800410e <HAL_ADC_ConfigChannel+0x27e>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003f42:	4da5      	ldr	r5, [pc, #660]	@ (80041d8 <HAL_ADC_ConfigChannel+0x348>)
 8003f44:	42aa      	cmp	r2, r5
 8003f46:	d10b      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0xd0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f48:	024a      	lsls	r2, r1, #9
 8003f4a:	d409      	bmi.n	8003f60 <HAL_ADC_ConfigChannel+0xd0>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003f4c:	4aa3      	ldr	r2, [pc, #652]	@ (80041dc <HAL_ADC_ConfigChannel+0x34c>)
 8003f4e:	4294      	cmp	r4, r2
 8003f50:	d106      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003f52:	6882      	ldr	r2, [r0, #8]
 8003f54:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003f58:	4332      	orrs	r2, r6
 8003f5a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8003f5e:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f60:	2000      	movs	r0, #0
 8003f62:	e003      	b.n	8003f6c <HAL_ADC_ConfigChannel+0xdc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f64:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003f66:	f042 0220 	orr.w	r2, r2, #32
 8003f6a:	659a      	str	r2, [r3, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 8003f72:	b002      	add	sp, #8
 8003f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f78:	68a0      	ldr	r0, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003f7a:	680a      	ldr	r2, [r1, #0]
 8003f7c:	0706      	lsls	r6, r0, #28
 8003f7e:	d4bc      	bmi.n	8003efa <HAL_ADC_ConfigChannel+0x6a>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003f80:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8003f82:	f3c2 5604 	ubfx	r6, r2, #20, #5
 8003f86:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003f88:	0dd2      	lsrs	r2, r2, #23
  MODIFY_REG(*preg,
 8003f8a:	40b0      	lsls	r0, r6
 8003f8c:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003f90:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8003f94:	ea6f 0000 	mvn.w	r0, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003f98:	f104 0714 	add.w	r7, r4, #20
 8003f9c:	f000 8107 	beq.w	80041ae <HAL_ADC_ConfigChannel+0x31e>
  MODIFY_REG(*preg,
 8003fa0:	40b5      	lsls	r5, r6
 8003fa2:	58be      	ldr	r6, [r7, r2]
 8003fa4:	4030      	ands	r0, r6
 8003fa6:	4328      	orrs	r0, r5
 8003fa8:	50b8      	str	r0, [r7, r2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003faa:	6962      	ldr	r2, [r4, #20]
 8003fac:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003fb0:	6162      	str	r2, [r4, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003fb2:	e9d1 7004 	ldrd	r7, r0, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003fb6:	680a      	ldr	r2, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003fb8:	68e5      	ldr	r5, [r4, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003fba:	2f04      	cmp	r7, #4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fbc:	f104 0660 	add.w	r6, r4, #96	@ 0x60
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003fc0:	4694      	mov	ip, r2
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003fc2:	f000 80cc 	beq.w	800415e <HAL_ADC_ConfigChannel+0x2ce>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003fc6:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 8003fca:	006d      	lsls	r5, r5, #1
  MODIFY_REG(*preg,
 8003fcc:	f856 c027 	ldr.w	ip, [r6, r7, lsl #2]
 8003fd0:	40a8      	lsls	r0, r5
 8003fd2:	4d83      	ldr	r5, [pc, #524]	@ (80041e0 <HAL_ADC_ConfigChannel+0x350>)
 8003fd4:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8003fd8:	ea0c 0505 	and.w	r5, ip, r5
 8003fdc:	4315      	orrs	r5, r2
 8003fde:	4328      	orrs	r0, r5
 8003fe0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8003fe4:	f846 0027 	str.w	r0, [r6, r7, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003fe8:	680a      	ldr	r2, [r1, #0]
}
 8003fea:	e786      	b.n	8003efa <HAL_ADC_ConfigChannel+0x6a>
      switch (pConfig->Rank)
 8003fec:	3802      	subs	r0, #2
 8003fee:	2803      	cmp	r0, #3
 8003ff0:	d903      	bls.n	8003ffa <HAL_ADC_ConfigChannel+0x16a>
    if (pConfig->Rank <= 5U)
 8003ff2:	f46f 6ef8 	mvn.w	lr, #1984	@ 0x7c0
 8003ff6:	2506      	movs	r5, #6
 8003ff8:	e76d      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x46>
 8003ffa:	4a7a      	ldr	r2, [pc, #488]	@ (80041e4 <HAL_ADC_ConfigChannel+0x354>)
 8003ffc:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
  MODIFY_REG(*preg,
 8004000:	f04f 0e1f 	mov.w	lr, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004004:	09aa      	lsrs	r2, r5, #6
  MODIFY_REG(*preg,
 8004006:	f005 051f 	and.w	r5, r5, #31
 800400a:	fa0e fe05 	lsl.w	lr, lr, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800400e:	f002 0c0c 	and.w	ip, r2, #12
  MODIFY_REG(*preg,
 8004012:	ea6f 0e0e 	mvn.w	lr, lr
 8004016:	e75e      	b.n	8003ed6 <HAL_ADC_ConfigChannel+0x46>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004018:	0208      	lsls	r0, r1, #8
 800401a:	d4a1      	bmi.n	8003f60 <HAL_ADC_ConfigChannel+0xd0>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800401c:	4a6f      	ldr	r2, [pc, #444]	@ (80041dc <HAL_ADC_ConfigChannel+0x34c>)
 800401e:	4294      	cmp	r4, r2
 8004020:	d003      	beq.n	800402a <HAL_ADC_ConfigChannel+0x19a>
 8004022:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8004026:	4294      	cmp	r4, r2
 8004028:	d19a      	bne.n	8003f60 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800402a:	4968      	ldr	r1, [pc, #416]	@ (80041cc <HAL_ADC_ConfigChannel+0x33c>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800402c:	486e      	ldr	r0, [pc, #440]	@ (80041e8 <HAL_ADC_ConfigChannel+0x358>)
 800402e:	688a      	ldr	r2, [r1, #8]
 8004030:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8004034:	4332      	orrs	r2, r6
 8004036:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800403a:	608a      	str	r2, [r1, #8]
 800403c:	6802      	ldr	r2, [r0, #0]
 800403e:	496b      	ldr	r1, [pc, #428]	@ (80041ec <HAL_ADC_ConfigChannel+0x35c>)
 8004040:	0992      	lsrs	r2, r2, #6
 8004042:	fba1 1202 	umull	r1, r2, r1, r2
 8004046:	0992      	lsrs	r2, r2, #6
 8004048:	3201      	adds	r2, #1
 800404a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800404e:	0092      	lsls	r2, r2, #2
 8004050:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8004052:	9a01      	ldr	r2, [sp, #4]
 8004054:	2a00      	cmp	r2, #0
 8004056:	d083      	beq.n	8003f60 <HAL_ADC_ConfigChannel+0xd0>
            wait_loop_index--;
 8004058:	9a01      	ldr	r2, [sp, #4]
 800405a:	3a01      	subs	r2, #1
 800405c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800405e:	9a01      	ldr	r2, [sp, #4]
 8004060:	2a00      	cmp	r2, #0
 8004062:	d1f9      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x1c8>
 8004064:	e77c      	b.n	8003f60 <HAL_ADC_ConfigChannel+0xd0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004066:	2f00      	cmp	r7, #0
 8004068:	d065      	beq.n	8004136 <HAL_ADC_ConfigChannel+0x2a6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406a:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 800406e:	2800      	cmp	r0, #0
 8004070:	f000 80be 	beq.w	80041f0 <HAL_ADC_ConfigChannel+0x360>
  return __builtin_clz(value);
 8004074:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004078:	3001      	adds	r0, #1
 800407a:	f000 001f 	and.w	r0, r0, #31
 800407e:	2809      	cmp	r0, #9
 8004080:	f240 80b6 	bls.w	80041f0 <HAL_ADC_ConfigChannel+0x360>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004084:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8004088:	2800      	cmp	r0, #0
 800408a:	f000 814d 	beq.w	8004328 <HAL_ADC_ConfigChannel+0x498>
  return __builtin_clz(value);
 800408e:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004092:	3001      	adds	r0, #1
 8004094:	0680      	lsls	r0, r0, #26
 8004096:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409a:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800409e:	2d00      	cmp	r5, #0
 80040a0:	f000 8147 	beq.w	8004332 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 80040a4:	fab5 f585 	clz	r5, r5
 80040a8:	3501      	adds	r5, #1
 80040aa:	f005 051f 	and.w	r5, r5, #31
 80040ae:	2601      	movs	r6, #1
 80040b0:	fa06 f505 	lsl.w	r5, r6, r5
 80040b4:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80040ba:	2a00      	cmp	r2, #0
 80040bc:	f000 8137 	beq.w	800432e <HAL_ADC_ConfigChannel+0x49e>
  return __builtin_clz(value);
 80040c0:	fab2 f282 	clz	r2, r2
 80040c4:	1c55      	adds	r5, r2, #1
 80040c6:	f005 051f 	and.w	r5, r5, #31
 80040ca:	2203      	movs	r2, #3
 80040cc:	f06f 061d 	mvn.w	r6, #29
 80040d0:	fb12 6205 	smlabb	r2, r2, r5, r6
 80040d4:	0512      	lsls	r2, r2, #20
 80040d6:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040da:	4302      	orrs	r2, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80040dc:	0dd6      	lsrs	r6, r2, #23
  MODIFY_REG(*preg,
 80040de:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80040e0:	f006 0604 	and.w	r6, r6, #4
 80040e4:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 80040e8:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80040ec:	fa00 f702 	lsl.w	r7, r0, r2
 80040f0:	f04f 0c07 	mov.w	ip, #7
 80040f4:	59a8      	ldr	r0, [r5, r6]
 80040f6:	fa0c f202 	lsl.w	r2, ip, r2
 80040fa:	ea20 0202 	bic.w	r2, r0, r2
 80040fe:	433a      	orrs	r2, r7
 8004100:	51aa      	str	r2, [r5, r6]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004102:	680a      	ldr	r2, [r1, #0]
}
 8004104:	e70f      	b.n	8003f26 <HAL_ADC_ConfigChannel+0x96>
  __HAL_LOCK(hadc);
 8004106:	2002      	movs	r0, #2
}
 8004108:	b002      	add	sp, #8
 800410a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800410e:	01c9      	lsls	r1, r1, #7
 8004110:	f53f af26 	bmi.w	8003f60 <HAL_ADC_ConfigChannel+0xd0>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004114:	4a31      	ldr	r2, [pc, #196]	@ (80041dc <HAL_ADC_ConfigChannel+0x34c>)
 8004116:	4294      	cmp	r4, r2
 8004118:	d004      	beq.n	8004124 <HAL_ADC_ConfigChannel+0x294>
 800411a:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800411e:	4294      	cmp	r4, r2
 8004120:	f47f af1e 	bne.w	8003f60 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004124:	4929      	ldr	r1, [pc, #164]	@ (80041cc <HAL_ADC_ConfigChannel+0x33c>)
 8004126:	688a      	ldr	r2, [r1, #8]
 8004128:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800412c:	4332      	orrs	r2, r6
 800412e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004132:	608a      	str	r2, [r1, #8]
}
 8004134:	e714      	b.n	8003f60 <HAL_ADC_ConfigChannel+0xd0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004136:	0e92      	lsrs	r2, r2, #26
 8004138:	3201      	adds	r2, #1
 800413a:	f002 051f 	and.w	r5, r2, #31
 800413e:	2001      	movs	r0, #1
 8004140:	0692      	lsls	r2, r2, #26
 8004142:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8004146:	40a8      	lsls	r0, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004148:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800414a:	ea40 0002 	orr.w	r0, r0, r2
 800414e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004152:	d971      	bls.n	8004238 <HAL_ADC_ConfigChannel+0x3a8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004154:	3a1e      	subs	r2, #30
 8004156:	0512      	lsls	r2, r2, #20
 8004158:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800415c:	e7bd      	b.n	80040da <HAL_ADC_ConfigChannel+0x24a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800415e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8004160:	6e20      	ldr	r0, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004162:	f3c2 0512 	ubfx	r5, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004166:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800416a:	2d00      	cmp	r5, #0
 800416c:	d166      	bne.n	800423c <HAL_ADC_ConfigChannel+0x3ac>
 800416e:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004172:	4290      	cmp	r0, r2
 8004174:	f000 80a8 	beq.w	80042c8 <HAL_ADC_ConfigChannel+0x438>
 8004178:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800417a:	6e60      	ldr	r0, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800417c:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004180:	4290      	cmp	r0, r2
 8004182:	f000 808c 	beq.w	800429e <HAL_ADC_ConfigChannel+0x40e>
 8004186:	68b0      	ldr	r0, [r6, #8]
 8004188:	68b0      	ldr	r0, [r6, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800418a:	f106 0708 	add.w	r7, r6, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800418e:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8004192:	4290      	cmp	r0, r2
 8004194:	f000 80aa 	beq.w	80042ec <HAL_ADC_ConfigChannel+0x45c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004198:	68f0      	ldr	r0, [r6, #12]
 800419a:	68f0      	ldr	r0, [r6, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800419c:	f106 050c 	add.w	r5, r6, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041a0:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80041a4:	4282      	cmp	r2, r0
 80041a6:	f000 80b6 	beq.w	8004316 <HAL_ADC_ConfigChannel+0x486>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80041aa:	4662      	mov	r2, ip
 80041ac:	e6a5      	b.n	8003efa <HAL_ADC_ConfigChannel+0x6a>
  MODIFY_REG(*preg,
 80041ae:	58bd      	ldr	r5, [r7, r2]
 80041b0:	4028      	ands	r0, r5
 80041b2:	50b8      	str	r0, [r7, r2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80041b4:	6962      	ldr	r2, [r4, #20]
 80041b6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80041ba:	6162      	str	r2, [r4, #20]
}
 80041bc:	e6f9      	b.n	8003fb2 <HAL_ADC_ConfigChannel+0x122>
 80041be:	bf00      	nop
 80041c0:	0007ffff 	.word	0x0007ffff
 80041c4:	407f0000 	.word	0x407f0000
 80041c8:	80080000 	.word	0x80080000
 80041cc:	50040300 	.word	0x50040300
 80041d0:	c7520000 	.word	0xc7520000
 80041d4:	cb840000 	.word	0xcb840000
 80041d8:	80000001 	.word	0x80000001
 80041dc:	50040000 	.word	0x50040000
 80041e0:	03fff000 	.word	0x03fff000
 80041e4:	0800aaf0 	.word	0x0800aaf0
 80041e8:	20002f78 	.word	0x20002f78
 80041ec:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f0:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80041f4:	2800      	cmp	r0, #0
 80041f6:	f000 80a0 	beq.w	800433a <HAL_ADC_ConfigChannel+0x4aa>
  return __builtin_clz(value);
 80041fa:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80041fe:	3001      	adds	r0, #1
 8004200:	0680      	lsls	r0, r0, #26
 8004202:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004206:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800420a:	2d00      	cmp	r5, #0
 800420c:	f000 8093 	beq.w	8004336 <HAL_ADC_ConfigChannel+0x4a6>
  return __builtin_clz(value);
 8004210:	fab5 f585 	clz	r5, r5
 8004214:	3501      	adds	r5, #1
 8004216:	f005 051f 	and.w	r5, r5, #31
 800421a:	2601      	movs	r6, #1
 800421c:	fa06 f505 	lsl.w	r5, r6, r5
 8004220:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004222:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004226:	2a00      	cmp	r2, #0
 8004228:	d07b      	beq.n	8004322 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800422a:	fab2 f282 	clz	r2, r2
 800422e:	3201      	adds	r2, #1
 8004230:	f002 021f 	and.w	r2, r2, #31
 8004234:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004238:	0512      	lsls	r2, r2, #20
 800423a:	e74e      	b.n	80040da <HAL_ADC_ConfigChannel+0x24a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423c:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004240:	b11d      	cbz	r5, 800424a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8004242:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004246:	42a8      	cmp	r0, r5
 8004248:	d03e      	beq.n	80042c8 <HAL_ADC_ConfigChannel+0x438>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800424a:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800424c:	6e60      	ldr	r0, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800424e:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	fa9c f5ac 	rbit	r5, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004256:	f106 0708 	add.w	r7, r6, #8
 800425a:	46be      	mov	lr, r7
  if (value == 0U)
 800425c:	b11d      	cbz	r5, 8004266 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800425e:	fab5 f585 	clz	r5, r5
 8004262:	4285      	cmp	r5, r0
 8004264:	d01d      	beq.n	80042a2 <HAL_ADC_ConfigChannel+0x412>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004266:	68b0      	ldr	r0, [r6, #8]
 8004268:	68b0      	ldr	r0, [r6, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800426a:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426e:	fa9c feac 	rbit	lr, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004272:	f106 050c 	add.w	r5, r6, #12
 8004276:	46a8      	mov	r8, r5
  if (value == 0U)
 8004278:	f1be 0f00 	cmp.w	lr, #0
 800427c:	d003      	beq.n	8004286 <HAL_ADC_ConfigChannel+0x3f6>
  return __builtin_clz(value);
 800427e:	fabe fe8e 	clz	lr, lr
 8004282:	4586      	cmp	lr, r0
 8004284:	d034      	beq.n	80042f0 <HAL_ADC_ConfigChannel+0x460>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004286:	68f0      	ldr	r0, [r6, #12]
 8004288:	68f0      	ldr	r0, [r6, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800428a:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428e:	fa9c f6ac 	rbit	r6, ip
  if (value == 0U)
 8004292:	2e00      	cmp	r6, #0
 8004294:	f43f ae31 	beq.w	8003efa <HAL_ADC_ConfigChannel+0x6a>
  return __builtin_clz(value);
 8004298:	fab6 f286 	clz	r2, r6
 800429c:	e782      	b.n	80041a4 <HAL_ADC_ConfigChannel+0x314>
 800429e:	f106 0e08 	add.w	lr, r6, #8
  MODIFY_REG(*preg,
 80042a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80042a4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80042a8:	6662      	str	r2, [r4, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042aa:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042ae:	68b2      	ldr	r2, [r6, #8]
 80042b0:	68b0      	ldr	r0, [r6, #8]
 80042b2:	f3cc 0512 	ubfx	r5, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042b6:	4677      	mov	r7, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042b8:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042bc:	4662      	mov	r2, ip
 80042be:	2d00      	cmp	r5, #0
 80042c0:	d1d5      	bne.n	800426e <HAL_ADC_ConfigChannel+0x3de>
 80042c2:	f3cc 6284 	ubfx	r2, ip, #26, #5
 80042c6:	e764      	b.n	8004192 <HAL_ADC_ConfigChannel+0x302>
  MODIFY_REG(*preg,
 80042c8:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80042ca:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80042ce:	6622      	str	r2, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042d0:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042d4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80042d6:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80042d8:	f3cc 0512 	ubfx	r5, ip, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042dc:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042e0:	4662      	mov	r2, ip
 80042e2:	2d00      	cmp	r5, #0
 80042e4:	d1b5      	bne.n	8004252 <HAL_ADC_ConfigChannel+0x3c2>
 80042e6:	f3cc 6284 	ubfx	r2, ip, #26, #5
 80042ea:	e749      	b.n	8004180 <HAL_ADC_ConfigChannel+0x2f0>
 80042ec:	f106 080c 	add.w	r8, r6, #12
  MODIFY_REG(*preg,
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80042f6:	603a      	str	r2, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042f8:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042fc:	68f2      	ldr	r2, [r6, #12]
 80042fe:	68f0      	ldr	r0, [r6, #12]
 8004300:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004304:	4645      	mov	r5, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004306:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800430a:	4662      	mov	r2, ip
 800430c:	2e00      	cmp	r6, #0
 800430e:	d1be      	bne.n	800428e <HAL_ADC_ConfigChannel+0x3fe>
 8004310:	f3cc 6284 	ubfx	r2, ip, #26, #5
 8004314:	e746      	b.n	80041a4 <HAL_ADC_ConfigChannel+0x314>
  MODIFY_REG(*preg,
 8004316:	682a      	ldr	r2, [r5, #0]
 8004318:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800431c:	602a      	str	r2, [r5, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800431e:	680a      	ldr	r2, [r1, #0]
}
 8004320:	e5eb      	b.n	8003efa <HAL_ADC_ConfigChannel+0x6a>
 8004322:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8004326:	e6d8      	b.n	80040da <HAL_ADC_ConfigChannel+0x24a>
 8004328:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800432c:	e6b5      	b.n	800409a <HAL_ADC_ConfigChannel+0x20a>
 800432e:	4a04      	ldr	r2, [pc, #16]	@ (8004340 <HAL_ADC_ConfigChannel+0x4b0>)
 8004330:	e6d3      	b.n	80040da <HAL_ADC_ConfigChannel+0x24a>
 8004332:	2502      	movs	r5, #2
 8004334:	e6be      	b.n	80040b4 <HAL_ADC_ConfigChannel+0x224>
 8004336:	2502      	movs	r5, #2
 8004338:	e772      	b.n	8004220 <HAL_ADC_ConfigChannel+0x390>
 800433a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800433e:	e762      	b.n	8004206 <HAL_ADC_ConfigChannel+0x376>
 8004340:	fe500000 	.word	0xfe500000

08004344 <ADC_ConversionStop>:
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004344:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	f012 0f04 	tst.w	r2, #4
{
 800434c:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004352:	d101      	bne.n	8004358 <ADC_ConversionStop+0x14>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004354:	0716      	lsls	r6, r2, #28
 8004356:	d53c      	bpl.n	80043d2 <ADC_ConversionStop+0x8e>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	0195      	lsls	r5, r2, #6
 800435c:	d504      	bpl.n	8004368 <ADC_ConversionStop+0x24>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800435e:	8b20      	ldrh	r0, [r4, #24]
 8004360:	f240 1201 	movw	r2, #257	@ 0x101
 8004364:	4290      	cmp	r0, r2
 8004366:	d045      	beq.n	80043f4 <ADC_ConversionStop+0xb0>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004368:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800436a:	689a      	ldr	r2, [r3, #8]
 800436c:	d033      	beq.n	80043d6 <ADC_ConversionStop+0x92>
 800436e:	0750      	lsls	r0, r2, #29
 8004370:	d502      	bpl.n	8004378 <ADC_ConversionStop+0x34>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004372:	689a      	ldr	r2, [r3, #8]
 8004374:	0792      	lsls	r2, r2, #30
 8004376:	d559      	bpl.n	800442c <ADC_ConversionStop+0xe8>
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004378:	2901      	cmp	r1, #1
 800437a:	d055      	beq.n	8004428 <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	0710      	lsls	r0, r2, #28
 8004380:	d50a      	bpl.n	8004398 <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	0792      	lsls	r2, r2, #30
 8004386:	d407      	bmi.n	8004398 <ADC_ConversionStop+0x54>
  MODIFY_REG(ADCx->CR,
 8004388:	689a      	ldr	r2, [r3, #8]
 800438a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800438e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004392:	f042 0220 	orr.w	r2, r2, #32
 8004396:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8004398:	2903      	cmp	r1, #3
 800439a:	d145      	bne.n	8004428 <ADC_ConversionStop+0xe4>
 800439c:	250c      	movs	r5, #12
    tickstart = HAL_GetTick();
 800439e:	f7ff fc35 	bl	8003c0c <HAL_GetTick>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80043a2:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80043a4:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	421d      	tst	r5, r3
 80043aa:	d012      	beq.n	80043d2 <ADC_ConversionStop+0x8e>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80043ac:	f7ff fc2e 	bl	8003c0c <HAL_GetTick>
 80043b0:	1b80      	subs	r0, r0, r6
 80043b2:	2805      	cmp	r0, #5
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80043b4:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80043b6:	d9f6      	bls.n	80043a6 <ADC_ConversionStop+0x62>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	422a      	tst	r2, r5
 80043bc:	d0f3      	beq.n	80043a6 <ADC_ConversionStop+0x62>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80043c0:	f043 0310 	orr.w	r3, r3, #16
 80043c4:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043c6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80043c8:	f043 0301 	orr.w	r3, r3, #1
 80043cc:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 80043ce:	2001      	movs	r0, #1
}
 80043d0:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 80043d2:	2000      	movs	r0, #0
}
 80043d4:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80043d6:	0716      	lsls	r6, r2, #28
 80043d8:	d50a      	bpl.n	80043f0 <ADC_ConversionStop+0xac>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	0795      	lsls	r5, r2, #30
 80043de:	d407      	bmi.n	80043f0 <ADC_ConversionStop+0xac>
  MODIFY_REG(ADCx->CR,
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80043e6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80043ea:	f042 0220 	orr.w	r2, r2, #32
 80043ee:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80043f0:	2508      	movs	r5, #8
 80043f2:	e7d4      	b.n	800439e <ADC_ConversionStop+0x5a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	0650      	lsls	r0, r2, #25
 80043f8:	d406      	bmi.n	8004408 <ADC_ConversionStop+0xc4>
 80043fa:	4a11      	ldr	r2, [pc, #68]	@ (8004440 <ADC_ConversionStop+0xfc>)
 80043fc:	e001      	b.n	8004402 <ADC_ConversionStop+0xbe>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80043fe:	3a01      	subs	r2, #1
 8004400:	d0dd      	beq.n	80043be <ADC_ConversionStop+0x7a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004402:	6819      	ldr	r1, [r3, #0]
 8004404:	0649      	lsls	r1, r1, #25
 8004406:	d5fa      	bpl.n	80043fe <ADC_ConversionStop+0xba>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004408:	2240      	movs	r2, #64	@ 0x40
 800440a:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	0756      	lsls	r6, r2, #29
 8004410:	d50a      	bpl.n	8004428 <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	0795      	lsls	r5, r2, #30
 8004416:	d407      	bmi.n	8004428 <ADC_ConversionStop+0xe4>
  MODIFY_REG(ADCx->CR,
 8004418:	689a      	ldr	r2, [r3, #8]
 800441a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800441e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004422:	f042 0210 	orr.w	r2, r2, #16
 8004426:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004428:	2504      	movs	r5, #4
 800442a:	e7b8      	b.n	800439e <ADC_ConversionStop+0x5a>
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004432:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8004436:	f042 0210 	orr.w	r2, r2, #16
 800443a:	609a      	str	r2, [r3, #8]
}
 800443c:	e79c      	b.n	8004378 <ADC_ConversionStop+0x34>
 800443e:	bf00      	nop
 8004440:	a3400000 	.word	0xa3400000

08004444 <ADC_Enable>:
{
 8004444:	b570      	push	{r4, r5, r6, lr}
 8004446:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8004448:	2200      	movs	r2, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800444a:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 800444c:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	07d2      	lsls	r2, r2, #31
 8004452:	d42c      	bmi.n	80044ae <ADC_Enable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004454:	6899      	ldr	r1, [r3, #8]
 8004456:	4a28      	ldr	r2, [pc, #160]	@ (80044f8 <ADC_Enable+0xb4>)
 8004458:	4211      	tst	r1, r2
 800445a:	4604      	mov	r4, r0
 800445c:	d12a      	bne.n	80044b4 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 800445e:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004460:	4926      	ldr	r1, [pc, #152]	@ (80044fc <ADC_Enable+0xb8>)
  MODIFY_REG(ADCx->CR,
 8004462:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004466:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800446a:	f042 0201 	orr.w	r2, r2, #1
 800446e:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004470:	688b      	ldr	r3, [r1, #8]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004472:	021b      	lsls	r3, r3, #8
 8004474:	d429      	bmi.n	80044ca <ADC_Enable+0x86>
    tickstart = HAL_GetTick();
 8004476:	f7ff fbc9 	bl	8003c0c <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	07d6      	lsls	r6, r2, #31
    tickstart = HAL_GetTick();
 8004480:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004482:	d414      	bmi.n	80044ae <ADC_Enable+0x6a>
  MODIFY_REG(ADCx->CR,
 8004484:	4e1e      	ldr	r6, [pc, #120]	@ (8004500 <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	07d0      	lsls	r0, r2, #31
 800448a:	d404      	bmi.n	8004496 <ADC_Enable+0x52>
  MODIFY_REG(ADCx->CR,
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	4032      	ands	r2, r6
 8004490:	f042 0201 	orr.w	r2, r2, #1
 8004494:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004496:	f7ff fbb9 	bl	8003c0c <HAL_GetTick>
 800449a:	1b43      	subs	r3, r0, r5
 800449c:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800449e:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044a0:	d902      	bls.n	80044a8 <ADC_Enable+0x64>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	07d1      	lsls	r1, r2, #31
 80044a6:	d505      	bpl.n	80044b4 <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	07d2      	lsls	r2, r2, #31
 80044ac:	d5eb      	bpl.n	8004486 <ADC_Enable+0x42>
  return HAL_OK;
 80044ae:	2000      	movs	r0, #0
}
 80044b0:	b002      	add	sp, #8
 80044b2:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80044b6:	f043 0310 	orr.w	r3, r3, #16
 80044ba:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044bc:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 80044be:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044c0:	f043 0301 	orr.w	r3, r3, #1
 80044c4:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 80044c6:	b002      	add	sp, #8
 80044c8:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004504 <ADC_Enable+0xc0>)
 80044cc:	4a0e      	ldr	r2, [pc, #56]	@ (8004508 <ADC_Enable+0xc4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	099b      	lsrs	r3, r3, #6
 80044d2:	fba2 2303 	umull	r2, r3, r2, r3
 80044d6:	099b      	lsrs	r3, r3, #6
 80044d8:	3301      	adds	r3, #1
 80044da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80044e2:	9b01      	ldr	r3, [sp, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0c6      	beq.n	8004476 <ADC_Enable+0x32>
        wait_loop_index--;
 80044e8:	9b01      	ldr	r3, [sp, #4]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80044ee:	9b01      	ldr	r3, [sp, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1f9      	bne.n	80044e8 <ADC_Enable+0xa4>
 80044f4:	e7bf      	b.n	8004476 <ADC_Enable+0x32>
 80044f6:	bf00      	nop
 80044f8:	8000003f 	.word	0x8000003f
 80044fc:	50040300 	.word	0x50040300
 8004500:	7fffffc0 	.word	0x7fffffc0
 8004504:	20002f78 	.word	0x20002f78
 8004508:	053e2d63 	.word	0x053e2d63

0800450c <HAL_ADC_Start_DMA>:
{
 800450c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004510:	4b36      	ldr	r3, [pc, #216]	@ (80045ec <HAL_ADC_Start_DMA+0xe0>)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004512:	6806      	ldr	r6, [r0, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
{
 8004516:	460d      	mov	r5, r1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004518:	68b1      	ldr	r1, [r6, #8]
 800451a:	0749      	lsls	r1, r1, #29
 800451c:	d417      	bmi.n	800454e <HAL_ADC_Start_DMA+0x42>
 800451e:	4617      	mov	r7, r2
    __HAL_LOCK(hadc);
 8004520:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 8004524:	2a01      	cmp	r2, #1
 8004526:	4604      	mov	r4, r0
 8004528:	d011      	beq.n	800454e <HAL_ADC_Start_DMA+0x42>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800452a:	f003 081f 	and.w	r8, r3, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800452e:	4b30      	ldr	r3, [pc, #192]	@ (80045f0 <HAL_ADC_Start_DMA+0xe4>)
    __HAL_LOCK(hadc);
 8004530:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004532:	429e      	cmp	r6, r3
    __HAL_LOCK(hadc);
 8004534:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004538:	d00c      	beq.n	8004554 <HAL_ADC_Start_DMA+0x48>
 800453a:	f240 2121 	movw	r1, #545	@ 0x221
 800453e:	fa21 f108 	lsr.w	r1, r1, r8
 8004542:	4001      	ands	r1, r0
 8004544:	d106      	bne.n	8004554 <HAL_ADC_Start_DMA+0x48>
      __HAL_UNLOCK(hadc);
 8004546:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
}
 800454a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 800454e:	2002      	movs	r0, #2
}
 8004550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8004554:	4620      	mov	r0, r4
 8004556:	f7ff ff75 	bl	8004444 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800455a:	2800      	cmp	r0, #0
 800455c:	d13c      	bne.n	80045d8 <HAL_ADC_Start_DMA+0xcc>
        ADC_STATE_CLR_SET(hadc->State,
 800455e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004560:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8004562:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004566:	f023 0301 	bic.w	r3, r3, #1
 800456a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800456e:	65a3      	str	r3, [r4, #88]	@ 0x58
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004570:	4b20      	ldr	r3, [pc, #128]	@ (80045f4 <HAL_ADC_Start_DMA+0xe8>)
 8004572:	4299      	cmp	r1, r3
 8004574:	d035      	beq.n	80045e2 <HAL_ADC_Start_DMA+0xd6>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004576:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004578:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800457c:	65a3      	str	r3, [r4, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800457e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004580:	6d20      	ldr	r0, [r4, #80]	@ 0x50
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004582:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004586:	bf18      	it	ne
 8004588:	6de3      	ldrne	r3, [r4, #92]	@ 0x5c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800458a:	462a      	mov	r2, r5
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800458c:	bf18      	it	ne
 800458e:	f023 0306 	bicne.w	r3, r3, #6
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004592:	4d19      	ldr	r5, [pc, #100]	@ (80045f8 <HAL_ADC_Start_DMA+0xec>)
          ADC_CLEAR_ERRORCODE(hadc);
 8004594:	65e3      	str	r3, [r4, #92]	@ 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004596:	62c5      	str	r5, [r0, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004598:	4d18      	ldr	r5, [pc, #96]	@ (80045fc <HAL_ADC_Start_DMA+0xf0>)
 800459a:	6305      	str	r5, [r0, #48]	@ 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800459c:	4d18      	ldr	r5, [pc, #96]	@ (8004600 <HAL_ADC_Start_DMA+0xf4>)
 800459e:	6345      	str	r5, [r0, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80045a0:	251c      	movs	r5, #28
 80045a2:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 80045a4:	2500      	movs	r5, #0
 80045a6:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80045aa:	684d      	ldr	r5, [r1, #4]
 80045ac:	f045 0510 	orr.w	r5, r5, #16
 80045b0:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80045b2:	68cd      	ldr	r5, [r1, #12]
 80045b4:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80045b8:	463b      	mov	r3, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80045ba:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80045bc:	3140      	adds	r1, #64	@ 0x40
 80045be:	f000 fa3f 	bl	8004a40 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 80045c2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80045c4:	6893      	ldr	r3, [r2, #8]
 80045c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80045ca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80045ce:	f043 0304 	orr.w	r3, r3, #4
 80045d2:	6093      	str	r3, [r2, #8]
}
 80045d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 80045d8:	2300      	movs	r3, #0
 80045da:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 80045de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80045e2:	f1b8 0f00 	cmp.w	r8, #0
 80045e6:	d1ca      	bne.n	800457e <HAL_ADC_Start_DMA+0x72>
 80045e8:	e7c5      	b.n	8004576 <HAL_ADC_Start_DMA+0x6a>
 80045ea:	bf00      	nop
 80045ec:	50040300 	.word	0x50040300
 80045f0:	50040200 	.word	0x50040200
 80045f4:	50040100 	.word	0x50040100
 80045f8:	08003e09 	.word	0x08003e09
 80045fc:	08003df9 	.word	0x08003df9
 8004600:	08003e75 	.word	0x08003e75

08004604 <ADC_Disable>:
{
 8004604:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004606:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	0795      	lsls	r5, r2, #30
 800460c:	d502      	bpl.n	8004614 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800460e:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8004610:	2000      	movs	r0, #0
}
 8004612:	bd38      	pop	{r3, r4, r5, pc}
 8004614:	689a      	ldr	r2, [r3, #8]
 8004616:	07d4      	lsls	r4, r2, #31
 8004618:	d5fa      	bpl.n	8004610 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	f002 020d 	and.w	r2, r2, #13
 8004620:	2a01      	cmp	r2, #1
 8004622:	4604      	mov	r4, r0
 8004624:	d009      	beq.n	800463a <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004626:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004628:	f043 0310 	orr.w	r3, r3, #16
 800462c:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800462e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8004636:	2001      	movs	r0, #1
}
 8004638:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004640:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004644:	2103      	movs	r1, #3
 8004646:	f042 0202 	orr.w	r2, r2, #2
 800464a:	609a      	str	r2, [r3, #8]
 800464c:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800464e:	f7ff fadd 	bl	8003c0c <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 8004658:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800465a:	d403      	bmi.n	8004664 <ADC_Disable+0x60>
 800465c:	e7d8      	b.n	8004610 <ADC_Disable+0xc>
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	07db      	lsls	r3, r3, #31
 8004662:	d5d5      	bpl.n	8004610 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004664:	f7ff fad2 	bl	8003c0c <HAL_GetTick>
 8004668:	1b40      	subs	r0, r0, r5
 800466a:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800466c:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800466e:	d9f6      	bls.n	800465e <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	07d2      	lsls	r2, r2, #31
 8004674:	d5f3      	bpl.n	800465e <ADC_Disable+0x5a>
 8004676:	e7d6      	b.n	8004626 <ADC_Disable+0x22>

08004678 <HAL_ADC_Stop_DMA>:
{
 8004678:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 800467a:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 800467e:	2b01      	cmp	r3, #1
 8004680:	d028      	beq.n	80046d4 <HAL_ADC_Stop_DMA+0x5c>
 8004682:	2301      	movs	r3, #1
 8004684:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004688:	2103      	movs	r1, #3
 800468a:	4604      	mov	r4, r0
 800468c:	f7ff fe5a 	bl	8004344 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8004690:	4605      	mov	r5, r0
 8004692:	b9d0      	cbnz	r0, 80046ca <HAL_ADC_Stop_DMA+0x52>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004694:	6823      	ldr	r3, [r4, #0]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004696:	6d20      	ldr	r0, [r4, #80]	@ 0x50
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	f022 0201 	bic.w	r2, r2, #1
 800469e:	60da      	str	r2, [r3, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80046a0:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80046a4:	2a02      	cmp	r2, #2
 80046a6:	d018      	beq.n	80046da <HAL_ADC_Stop_DMA+0x62>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	f022 0210 	bic.w	r2, r2, #16
 80046ae:	605a      	str	r2, [r3, #4]
      tmp_hal_status = ADC_Disable(hadc);
 80046b0:	4620      	mov	r0, r4
 80046b2:	f7ff ffa7 	bl	8004604 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80046b6:	4605      	mov	r5, r0
 80046b8:	b938      	cbnz	r0, 80046ca <HAL_ADC_Stop_DMA+0x52>
      ADC_STATE_CLR_SET(hadc->State,
 80046ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80046bc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80046c0:	f023 0301 	bic.w	r3, r3, #1
 80046c4:	f043 0301 	orr.w	r3, r3, #1
 80046c8:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 80046ca:	2300      	movs	r3, #0
 80046cc:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 80046d0:	4628      	mov	r0, r5
 80046d2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hadc);
 80046d4:	2502      	movs	r5, #2
}
 80046d6:	4628      	mov	r0, r5
 80046d8:	bd38      	pop	{r3, r4, r5, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80046da:	f000 f9f5 	bl	8004ac8 <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 80046de:	4605      	mov	r5, r0
 80046e0:	b160      	cbz	r0, 80046fc <HAL_ADC_Stop_DMA+0x84>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80046e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80046e4:	6822      	ldr	r2, [r4, #0]
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80046e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046ea:	65a3      	str	r3, [r4, #88]	@ 0x58
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80046ec:	6853      	ldr	r3, [r2, #4]
 80046ee:	f023 0310 	bic.w	r3, r3, #16
      (void)ADC_Disable(hadc);
 80046f2:	4620      	mov	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80046f4:	6053      	str	r3, [r2, #4]
      (void)ADC_Disable(hadc);
 80046f6:	f7ff ff85 	bl	8004604 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80046fa:	e7e6      	b.n	80046ca <HAL_ADC_Stop_DMA+0x52>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80046fc:	6822      	ldr	r2, [r4, #0]
 80046fe:	6853      	ldr	r3, [r2, #4]
 8004700:	f023 0310 	bic.w	r3, r3, #16
 8004704:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8004706:	e7d3      	b.n	80046b0 <HAL_ADC_Stop_DMA+0x38>

08004708 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004708:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800470a:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
{
 800470e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8004710:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004712:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 8004714:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8004716:	d03f      	beq.n	8004798 <HAL_ADCEx_Calibration_Start+0x90>
 8004718:	2301      	movs	r3, #1
 800471a:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800471e:	4604      	mov	r4, r0
 8004720:	460d      	mov	r5, r1
 8004722:	f7ff ff6f 	bl	8004604 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004726:	6da3      	ldr	r3, [r4, #88]	@ 0x58
  if (tmp_hal_status == HAL_OK)
 8004728:	b9e0      	cbnz	r0, 8004764 <HAL_ADCEx_Calibration_Start+0x5c>
    ADC_STATE_CLR_SET(hadc->State,
 800472a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800472e:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004732:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8004734:	f043 0302 	orr.w	r3, r3, #2
 8004738:	65a3      	str	r3, [r4, #88]	@ 0x58
  MODIFY_REG(ADCx->CR,
 800473a:	6893      	ldr	r3, [r2, #8]
 800473c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004740:	f005 4180 	and.w	r1, r5, #1073741824	@ 0x40000000
 8004744:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004748:	430b      	orrs	r3, r1
 800474a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800474e:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004750:	6893      	ldr	r3, [r2, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	db0e      	blt.n	8004774 <HAL_ADCEx_Calibration_Start+0x6c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004756:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004758:	f023 0303 	bic.w	r3, r3, #3
 800475c:	f043 0301 	orr.w	r3, r3, #1
 8004760:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004762:	e002      	b.n	800476a <HAL_ADCEx_Calibration_Start+0x62>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004764:	f043 0310 	orr.w	r3, r3, #16
 8004768:	65a3      	str	r3, [r4, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800476a:	2300      	movs	r3, #0
 800476c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8004770:	b003      	add	sp, #12
 8004772:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 8004774:	9b01      	ldr	r3, [sp, #4]
 8004776:	3301      	adds	r3, #1
 8004778:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800477a:	9b01      	ldr	r3, [sp, #4]
 800477c:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8004780:	d3e6      	bcc.n	8004750 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 8004782:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004784:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8004788:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 800478a:	f043 0310 	orr.w	r3, r3, #16
 800478e:	65a3      	str	r3, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hadc);
 8004790:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
        return HAL_ERROR;
 8004794:	2001      	movs	r0, #1
 8004796:	e7eb      	b.n	8004770 <HAL_ADCEx_Calibration_Start+0x68>
  __HAL_LOCK(hadc);
 8004798:	2002      	movs	r0, #2
}
 800479a:	b003      	add	sp, #12
 800479c:	bd30      	pop	{r4, r5, pc}
 800479e:	bf00      	nop

080047a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80047a0:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047a2:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80047a6:	680e      	ldr	r6, [r1, #0]
  __HAL_LOCK(hadc);
 80047a8:	2a01      	cmp	r2, #1
{
 80047aa:	b09a      	sub	sp, #104	@ 0x68
  __HAL_LOCK(hadc);
 80047ac:	d044      	beq.n	8004838 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80047ae:	4603      	mov	r3, r0

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80047b0:	4d2e      	ldr	r5, [pc, #184]	@ (800486c <HAL_ADCEx_MultiModeConfigChannel+0xcc>)
 80047b2:	681c      	ldr	r4, [r3, #0]
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80047b4:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80047b6:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80047b8:	42ac      	cmp	r4, r5
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80047ba:	9216      	str	r2, [sp, #88]	@ 0x58
  __HAL_LOCK(hadc);
 80047bc:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80047c0:	9217      	str	r2, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80047c2:	d008      	beq.n	80047d6 <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047c4:	6d99      	ldr	r1, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80047c6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047ca:	f041 0120 	orr.w	r1, r1, #32
 80047ce:	6599      	str	r1, [r3, #88]	@ 0x58
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80047d0:	b01a      	add	sp, #104	@ 0x68
 80047d2:	bcf0      	pop	{r4, r5, r6, r7}
 80047d4:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047d6:	4a26      	ldr	r2, [pc, #152]	@ (8004870 <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
 80047d8:	6890      	ldr	r0, [r2, #8]
 80047da:	0740      	lsls	r0, r0, #29
 80047dc:	d50b      	bpl.n	80047f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80047de:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80047e2:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 80047e6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047e8:	659a      	str	r2, [r3, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 80047f0:	b01a      	add	sp, #104	@ 0x68
 80047f2:	bcf0      	pop	{r4, r5, r6, r7}
 80047f4:	4770      	bx	lr
 80047f6:	68a0      	ldr	r0, [r4, #8]
 80047f8:	0747      	lsls	r7, r0, #29
 80047fa:	d4f1      	bmi.n	80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80047fc:	b306      	cbz	r6, 8004840 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80047fe:	4f1d      	ldr	r7, [pc, #116]	@ (8004874 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 8004800:	684d      	ldr	r5, [r1, #4]
 8004802:	68b8      	ldr	r0, [r7, #8]
 8004804:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 8004808:	4328      	orrs	r0, r5
 800480a:	f893 5030 	ldrb.w	r5, [r3, #48]	@ 0x30
 800480e:	ea40 3045 	orr.w	r0, r0, r5, lsl #13
 8004812:	60b8      	str	r0, [r7, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004814:	68a0      	ldr	r0, [r4, #8]
 8004816:	6892      	ldr	r2, [r2, #8]
 8004818:	4302      	orrs	r2, r0
 800481a:	4817      	ldr	r0, [pc, #92]	@ (8004878 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 800481c:	6880      	ldr	r0, [r0, #8]
 800481e:	4302      	orrs	r2, r0
 8004820:	07d5      	lsls	r5, r2, #31
 8004822:	d420      	bmi.n	8004866 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
        MODIFY_REG(tmpADC_Common->CCR,
 8004824:	68b8      	ldr	r0, [r7, #8]
 8004826:	688a      	ldr	r2, [r1, #8]
 8004828:	f420 6171 	bic.w	r1, r0, #3856	@ 0xf10
 800482c:	4332      	orrs	r2, r6
 800482e:	f021 010f 	bic.w	r1, r1, #15
 8004832:	430a      	orrs	r2, r1
 8004834:	60ba      	str	r2, [r7, #8]
 8004836:	e016      	b.n	8004866 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 8004838:	2002      	movs	r0, #2
}
 800483a:	b01a      	add	sp, #104	@ 0x68
 800483c:	bcf0      	pop	{r4, r5, r6, r7}
 800483e:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004840:	480c      	ldr	r0, [pc, #48]	@ (8004874 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 8004842:	6881      	ldr	r1, [r0, #8]
 8004844:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8004848:	6081      	str	r1, [r0, #8]
 800484a:	490b      	ldr	r1, [pc, #44]	@ (8004878 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 800484c:	68a4      	ldr	r4, [r4, #8]
 800484e:	6892      	ldr	r2, [r2, #8]
 8004850:	6889      	ldr	r1, [r1, #8]
 8004852:	4322      	orrs	r2, r4
 8004854:	430a      	orrs	r2, r1
 8004856:	07d4      	lsls	r4, r2, #31
 8004858:	d405      	bmi.n	8004866 <HAL_ADCEx_MultiModeConfigChannel+0xc6>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800485a:	6882      	ldr	r2, [r0, #8]
 800485c:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8004860:	f022 020f 	bic.w	r2, r2, #15
 8004864:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004866:	2000      	movs	r0, #0
 8004868:	e7bf      	b.n	80047ea <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800486a:	bf00      	nop
 800486c:	50040000 	.word	0x50040000
 8004870:	50040100 	.word	0x50040100
 8004874:	50040300 	.word	0x50040300
 8004878:	50040200 	.word	0x50040200

0800487c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800487c:	4907      	ldr	r1, [pc, #28]	@ (800489c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800487e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004880:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004882:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004886:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800488a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800488c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800488e:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004896:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	e000ed00 	.word	0xe000ed00

080048a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80048a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004910 <HAL_NVIC_SetPriority+0x70>)
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80048a8:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048aa:	f1c3 0e07 	rsb	lr, r3, #7
 80048ae:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048b2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80048b6:	bf28      	it	cs
 80048b8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048bc:	f1bc 0f06 	cmp.w	ip, #6
 80048c0:	d91c      	bls.n	80048fc <HAL_NVIC_SetPriority+0x5c>
 80048c2:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048c6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ca:	fa03 f30c 	lsl.w	r3, r3, ip
 80048ce:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048d2:	f04f 33ff 	mov.w	r3, #4294967295
 80048d6:	fa03 f30e 	lsl.w	r3, r3, lr
 80048da:	ea21 0303 	bic.w	r3, r1, r3
 80048de:	fa03 f30c 	lsl.w	r3, r3, ip
 80048e2:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048e4:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80048e6:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048e8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80048ea:	db0a      	blt.n	8004902 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ec:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80048f0:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80048f4:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80048f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80048fc:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80048fe:	4694      	mov	ip, r2
 8004900:	e7e7      	b.n	80048d2 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004902:	4a04      	ldr	r2, [pc, #16]	@ (8004914 <HAL_NVIC_SetPriority+0x74>)
 8004904:	f000 000f 	and.w	r0, r0, #15
 8004908:	4402      	add	r2, r0
 800490a:	7613      	strb	r3, [r2, #24]
 800490c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004910:	e000ed00 	.word	0xe000ed00
 8004914:	e000ecfc 	.word	0xe000ecfc

08004918 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004918:	2800      	cmp	r0, #0
 800491a:	db07      	blt.n	800492c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800491c:	4a04      	ldr	r2, [pc, #16]	@ (8004930 <HAL_NVIC_EnableIRQ+0x18>)
 800491e:	0941      	lsrs	r1, r0, #5
 8004920:	2301      	movs	r3, #1
 8004922:	f000 001f 	and.w	r0, r0, #31
 8004926:	4083      	lsls	r3, r0
 8004928:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	e000e100 	.word	0xe000e100

08004934 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004934:	3801      	subs	r0, #1
 8004936:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800493a:	d301      	bcc.n	8004940 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 800493c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800493e:	4770      	bx	lr
{
 8004940:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004942:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004946:	4c07      	ldr	r4, [pc, #28]	@ (8004964 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004948:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800494a:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 800494e:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004952:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004954:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004956:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004958:	619a      	str	r2, [r3, #24]
}
 800495a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800495e:	6119      	str	r1, [r3, #16]
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	e000ed00 	.word	0xe000ed00

08004968 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004968:	2800      	cmp	r0, #0
 800496a:	d050      	beq.n	8004a0e <HAL_DMA_Init+0xa6>
{
 800496c:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800496e:	4a2e      	ldr	r2, [pc, #184]	@ (8004a28 <HAL_DMA_Init+0xc0>)
 8004970:	6804      	ldr	r4, [r0, #0]
 8004972:	4294      	cmp	r4, r2
 8004974:	4603      	mov	r3, r0
 8004976:	d941      	bls.n	80049fc <HAL_DMA_Init+0x94>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004978:	492c      	ldr	r1, [pc, #176]	@ (8004a2c <HAL_DMA_Init+0xc4>)
 800497a:	4a2d      	ldr	r2, [pc, #180]	@ (8004a30 <HAL_DMA_Init+0xc8>)
    hdma->DmaBaseAddress = DMA2;
 800497c:	4d2d      	ldr	r5, [pc, #180]	@ (8004a34 <HAL_DMA_Init+0xcc>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800497e:	4421      	add	r1, r4
 8004980:	fba2 2101 	umull	r2, r1, r2, r1
 8004984:	0909      	lsrs	r1, r1, #4
 8004986:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004988:	2202      	movs	r2, #2
 800498a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800498e:	e9d3 6202 	ldrd	r6, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004992:	691f      	ldr	r7, [r3, #16]
  tmp = hdma->Instance->CCR;
 8004994:	6820      	ldr	r0, [r4, #0]
 8004996:	641d      	str	r5, [r3, #64]	@ 0x40
  tmp |=  hdma->Init.Direction        |
 8004998:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800499a:	433a      	orrs	r2, r7
 800499c:	695f      	ldr	r7, [r3, #20]
 800499e:	6459      	str	r1, [r3, #68]	@ 0x44
 80049a0:	433a      	orrs	r2, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80049a2:	699f      	ldr	r7, [r3, #24]
 80049a4:	433a      	orrs	r2, r7
 80049a6:	69df      	ldr	r7, [r3, #28]
 80049a8:	433a      	orrs	r2, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 80049aa:	6a1f      	ldr	r7, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80049ac:	f420 40ff 	bic.w	r0, r0, #32640	@ 0x7f80
 80049b0:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80049b4:	433a      	orrs	r2, r7
  tmp |=  hdma->Init.Direction        |
 80049b6:	4302      	orrs	r2, r0
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80049b8:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
  hdma->Instance->CCR = tmp;
 80049bc:	6022      	str	r2, [r4, #0]
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80049be:	d014      	beq.n	80049ea <HAL_DMA_Init+0x82>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80049c0:	6858      	ldr	r0, [r3, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80049c2:	f001 011c 	and.w	r1, r1, #28
 80049c6:	220f      	movs	r2, #15
 80049c8:	408a      	lsls	r2, r1
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80049ca:	4088      	lsls	r0, r1
    if (DMA1 == hdma->DmaBaseAddress)
 80049cc:	491a      	ldr	r1, [pc, #104]	@ (8004a38 <HAL_DMA_Init+0xd0>)
 80049ce:	428d      	cmp	r5, r1
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80049d0:	ea6f 0202 	mvn.w	r2, r2
    if (DMA1 == hdma->DmaBaseAddress)
 80049d4:	d01d      	beq.n	8004a12 <HAL_DMA_Init+0xaa>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80049d6:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	@ 0x4a8
 80049da:	4022      	ands	r2, r4
 80049dc:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80049e0:	f8d1 24a8 	ldr.w	r2, [r1, #1192]	@ 0x4a8
 80049e4:	4302      	orrs	r2, r0
 80049e6:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049ea:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80049ec:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049ee:	63d8      	str	r0, [r3, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80049f0:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_READY;
 80049f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
}
 80049f8:	bcf0      	pop	{r4, r5, r6, r7}
 80049fa:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80049fc:	490f      	ldr	r1, [pc, #60]	@ (8004a3c <HAL_DMA_Init+0xd4>)
 80049fe:	4a0c      	ldr	r2, [pc, #48]	@ (8004a30 <HAL_DMA_Init+0xc8>)
    hdma->DmaBaseAddress = DMA1;
 8004a00:	4d0d      	ldr	r5, [pc, #52]	@ (8004a38 <HAL_DMA_Init+0xd0>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004a02:	4421      	add	r1, r4
 8004a04:	fba2 2101 	umull	r2, r1, r2, r1
 8004a08:	0909      	lsrs	r1, r1, #4
 8004a0a:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8004a0c:	e7bc      	b.n	8004988 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 8004a0e:	2001      	movs	r0, #1
}
 8004a10:	4770      	bx	lr
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004a12:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 8004a16:	400a      	ands	r2, r1
 8004a18:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004a1c:	f8d5 20a8 	ldr.w	r2, [r5, #168]	@ 0xa8
 8004a20:	4302      	orrs	r2, r0
 8004a22:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
 8004a26:	e7e0      	b.n	80049ea <HAL_DMA_Init+0x82>
 8004a28:	40020407 	.word	0x40020407
 8004a2c:	bffdfbf8 	.word	0xbffdfbf8
 8004a30:	cccccccd 	.word	0xcccccccd
 8004a34:	40020400 	.word	0x40020400
 8004a38:	40020000 	.word	0x40020000
 8004a3c:	bffdfff8 	.word	0xbffdfff8

08004a40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a40:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a42:	f890 4024 	ldrb.w	r4, [r0, #36]	@ 0x24
 8004a46:	2c01      	cmp	r4, #1
 8004a48:	d00b      	beq.n	8004a62 <HAL_DMA_Start_IT+0x22>
 8004a4a:	2401      	movs	r4, #1
 8004a4c:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004a50:	f890 4025 	ldrb.w	r4, [r0, #37]	@ 0x25
 8004a54:	2c01      	cmp	r4, #1
 8004a56:	fa5f fc84 	uxtb.w	ip, r4
 8004a5a:	d005      	beq.n	8004a68 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 8004a62:	2002      	movs	r0, #2

    /* Remain BUSY */
    status = HAL_BUSY;
  }
  return status;
}
 8004a64:	bc70      	pop	{r4, r5, r6}
 8004a66:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a68:	2502      	movs	r5, #2
 8004a6a:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
    __HAL_DMA_DISABLE(hdma);
 8004a6e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a70:	2500      	movs	r5, #0
 8004a72:	63c5      	str	r5, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004a74:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a76:	6c45      	ldr	r5, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE(hdma);
 8004a78:	f026 0601 	bic.w	r6, r6, #1
 8004a7c:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a7e:	f005 051c 	and.w	r5, r5, #28
 8004a82:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 8004a84:	fa0c f505 	lsl.w	r5, ip, r5
 8004a88:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004a8a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a8c:	6883      	ldr	r3, [r0, #8]
 8004a8e:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8004a90:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a92:	bf0b      	itete	eq
 8004a94:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004a96:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004a98:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004a9a:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8004a9c:	b153      	cbz	r3, 8004ab4 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	f043 030e 	orr.w	r3, r3, #14
 8004aa4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8004aac:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004aae:	6023      	str	r3, [r4, #0]
}
 8004ab0:	bc70      	pop	{r4, r5, r6}
 8004ab2:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	f023 0304 	bic.w	r3, r3, #4
 8004aba:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	f043 030a 	orr.w	r3, r3, #10
 8004ac2:	6023      	str	r3, [r4, #0]
 8004ac4:	e7ef      	b.n	8004aa6 <HAL_DMA_Start_IT+0x66>
 8004ac6:	bf00      	nop

08004ac8 <HAL_DMA_Abort>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004ac8:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8004acc:	2a02      	cmp	r2, #2
{
 8004ace:	4603      	mov	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004ad0:	d006      	beq.n	8004ae0 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ad2:	2204      	movs	r2, #4
 8004ad4:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8004ad6:	2200      	movs	r2, #0
    return HAL_ERROR;
 8004ad8:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8004ada:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8004ade:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ae0:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ae2:	6c42      	ldr	r2, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ae4:	6808      	ldr	r0, [r1, #0]
 8004ae6:	f020 000e 	bic.w	r0, r0, #14
 8004aea:	6008      	str	r0, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8004aec:	6808      	ldr	r0, [r1, #0]
 8004aee:	f020 0001 	bic.w	r0, r0, #1
 8004af2:	6008      	str	r0, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004af4:	f04f 0c01 	mov.w	ip, #1
 8004af8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004afa:	f002 021c 	and.w	r2, r2, #28
 8004afe:	fa0c f202 	lsl.w	r2, ip, r2
 8004b02:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004b04:	2200      	movs	r2, #0
    return status;
 8004b06:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8004b08:	f883 c025 	strb.w	ip, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8004b0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop

08004b14 <HAL_DMA_IRQHandler>:
{
 8004b14:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004b16:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b18:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8004b1a:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b1c:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004b1e:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004b20:	f003 031c 	and.w	r3, r3, #28
 8004b24:	2204      	movs	r2, #4
 8004b26:	409a      	lsls	r2, r3
 8004b28:	420a      	tst	r2, r1
 8004b2a:	d00e      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x36>
 8004b2c:	f014 0f04 	tst.w	r4, #4
 8004b30:	d00b      	beq.n	8004b4a <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b32:	682b      	ldr	r3, [r5, #0]
 8004b34:	069b      	lsls	r3, r3, #26
 8004b36:	d403      	bmi.n	8004b40 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b38:	682b      	ldr	r3, [r5, #0]
 8004b3a:	f023 0304 	bic.w	r3, r3, #4
 8004b3e:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8004b40:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004b42:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8004b44:	b1cb      	cbz	r3, 8004b7a <HAL_DMA_IRQHandler+0x66>
}
 8004b46:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8004b48:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	409a      	lsls	r2, r3
 8004b4e:	420a      	tst	r2, r1
 8004b50:	d015      	beq.n	8004b7e <HAL_DMA_IRQHandler+0x6a>
 8004b52:	f014 0f02 	tst.w	r4, #2
 8004b56:	d012      	beq.n	8004b7e <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	0699      	lsls	r1, r3, #26
 8004b5c:	d406      	bmi.n	8004b6c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b5e:	682b      	ldr	r3, [r5, #0]
 8004b60:	f023 030a 	bic.w	r3, r3, #10
 8004b64:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    if (hdma->XferCpltCallback != NULL)
 8004b6c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b6e:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8004b70:	2100      	movs	r1, #0
 8004b72:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1e5      	bne.n	8004b46 <HAL_DMA_IRQHandler+0x32>
}
 8004b7a:	bc70      	pop	{r4, r5, r6}
 8004b7c:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8004b7e:	2208      	movs	r2, #8
 8004b80:	409a      	lsls	r2, r3
 8004b82:	420a      	tst	r2, r1
 8004b84:	d0f9      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x66>
 8004b86:	0722      	lsls	r2, r4, #28
 8004b88:	d5f7      	bpl.n	8004b7a <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b8a:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8004b8c:	6b41      	ldr	r1, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b8e:	f022 020e 	bic.w	r2, r2, #14
 8004b92:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b94:	2201      	movs	r2, #1
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8004b9a:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b9c:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b9e:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8004ba0:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8004ba4:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    if (hdma->XferErrorCallback != NULL)
 8004ba8:	2900      	cmp	r1, #0
 8004baa:	d0e6      	beq.n	8004b7a <HAL_DMA_IRQHandler+0x66>
}
 8004bac:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8004bae:	4708      	bx	r1

08004bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bb4:	680c      	ldr	r4, [r1, #0]
{
 8004bb6:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bb8:	2c00      	cmp	r4, #0
 8004bba:	f000 8094 	beq.w	8004ce6 <HAL_GPIO_Init+0x136>
  uint32_t position = 0x00u;
 8004bbe:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004bc0:	f04f 0b01 	mov.w	fp, #1
 8004bc4:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 8004bc8:	ea1e 0a04 	ands.w	sl, lr, r4
 8004bcc:	f000 8086 	beq.w	8004cdc <HAL_GPIO_Init+0x12c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bd0:	684d      	ldr	r5, [r1, #4]
 8004bd2:	f005 0203 	and.w	r2, r5, #3
 8004bd6:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004bda:	2603      	movs	r6, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bdc:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004be0:	fa06 f70c 	lsl.w	r7, r6, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004be4:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004be8:	ea6f 0707 	mvn.w	r7, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bec:	d97e      	bls.n	8004cec <HAL_GPIO_Init+0x13c>
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bee:	2a03      	cmp	r2, #3
 8004bf0:	f040 80ba 	bne.w	8004d68 <HAL_GPIO_Init+0x1b8>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004bf4:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 8004bf8:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004bfc:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c00:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c02:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8004c06:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c08:	d068      	beq.n	8004cdc <HAL_GPIO_Init+0x12c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c0a:	4f72      	ldr	r7, [pc, #456]	@ (8004dd4 <HAL_GPIO_Init+0x224>)
 8004c0c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004c0e:	f042 0201 	orr.w	r2, r2, #1
 8004c12:	663a      	str	r2, [r7, #96]	@ 0x60
 8004c14:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004c16:	f002 0201 	and.w	r2, r2, #1
 8004c1a:	9203      	str	r2, [sp, #12]
 8004c1c:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004c1e:	f023 0203 	bic.w	r2, r3, #3
 8004c22:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8004c26:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c2a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 8004c2e:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c30:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004c34:	260f      	movs	r6, #15
 8004c36:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c3a:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c3e:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c42:	d027      	beq.n	8004c94 <HAL_GPIO_Init+0xe4>
 8004c44:	4e64      	ldr	r6, [pc, #400]	@ (8004dd8 <HAL_GPIO_Init+0x228>)
 8004c46:	42b0      	cmp	r0, r6
 8004c48:	f000 80a1 	beq.w	8004d8e <HAL_GPIO_Init+0x1de>
 8004c4c:	4e63      	ldr	r6, [pc, #396]	@ (8004ddc <HAL_GPIO_Init+0x22c>)
 8004c4e:	42b0      	cmp	r0, r6
 8004c50:	f000 80a4 	beq.w	8004d9c <HAL_GPIO_Init+0x1ec>
 8004c54:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 8004de4 <HAL_GPIO_Init+0x234>
 8004c58:	4570      	cmp	r0, lr
 8004c5a:	f000 8091 	beq.w	8004d80 <HAL_GPIO_Init+0x1d0>
 8004c5e:	f8df e188 	ldr.w	lr, [pc, #392]	@ 8004de8 <HAL_GPIO_Init+0x238>
 8004c62:	4570      	cmp	r0, lr
 8004c64:	f000 80a8 	beq.w	8004db8 <HAL_GPIO_Init+0x208>
 8004c68:	f8df e180 	ldr.w	lr, [pc, #384]	@ 8004dec <HAL_GPIO_Init+0x23c>
 8004c6c:	4570      	cmp	r0, lr
 8004c6e:	f000 80aa 	beq.w	8004dc6 <HAL_GPIO_Init+0x216>
 8004c72:	f8df e17c 	ldr.w	lr, [pc, #380]	@ 8004df0 <HAL_GPIO_Init+0x240>
 8004c76:	4570      	cmp	r0, lr
 8004c78:	f000 8097 	beq.w	8004daa <HAL_GPIO_Init+0x1fa>
 8004c7c:	f8df e174 	ldr.w	lr, [pc, #372]	@ 8004df4 <HAL_GPIO_Init+0x244>
 8004c80:	4570      	cmp	r0, lr
 8004c82:	bf0c      	ite	eq
 8004c84:	f04f 0e07 	moveq.w	lr, #7
 8004c88:	f04f 0e08 	movne.w	lr, #8
 8004c8c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004c90:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c94:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c96:	4a52      	ldr	r2, [pc, #328]	@ (8004de0 <HAL_GPIO_Init+0x230>)
 8004c98:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c9a:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8004c9c:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8004ca0:	4e4f      	ldr	r6, [pc, #316]	@ (8004de0 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8004ca2:	bf54      	ite	pl
 8004ca4:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8004ca6:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 8004caa:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8004cac:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004cae:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8004cb0:	4e4b      	ldr	r6, [pc, #300]	@ (8004de0 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8004cb2:	bf54      	ite	pl
 8004cb4:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8004cb6:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 8004cba:	60f2      	str	r2, [r6, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004cbc:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004cbe:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8004cc0:	4e47      	ldr	r6, [pc, #284]	@ (8004de0 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8004cc2:	bf54      	ite	pl
 8004cc4:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8004cc6:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 8004cca:	6072      	str	r2, [r6, #4]

        temp = EXTI->IMR1;
 8004ccc:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004cce:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8004cd0:	4d43      	ldr	r5, [pc, #268]	@ (8004de0 <HAL_GPIO_Init+0x230>)
        temp &= ~(iocurrent);
 8004cd2:	bf54      	ite	pl
 8004cd4:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8004cd6:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 8004cda:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 8004cdc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cde:	fa34 f203 	lsrs.w	r2, r4, r3
 8004ce2:	f47f af6f 	bne.w	8004bc4 <HAL_GPIO_Init+0x14>
  }
}
 8004ce6:	b005      	add	sp, #20
 8004ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8004cec:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004cf0:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004cf2:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004cf6:	fa06 f80c 	lsl.w	r8, r6, ip
 8004cfa:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8004cfe:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8004d02:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d06:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d08:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d0c:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8004d10:	fa0e fe03 	lsl.w	lr, lr, r3
 8004d14:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8004d18:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8004d1c:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d20:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d24:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d28:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d2c:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8004d2e:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d32:	f47f af5f 	bne.w	8004bf4 <HAL_GPIO_Init+0x44>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d36:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 8004d38:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d3c:	f003 0e07 	and.w	lr, r3, #7
 8004d40:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8004d44:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d48:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3u];
 8004d4c:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d50:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d52:	260f      	movs	r6, #15
 8004d54:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d58:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d5a:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d5e:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3u] = temp;
 8004d62:	f8c8 e020 	str.w	lr, [r8, #32]
 8004d66:	e745      	b.n	8004bf4 <HAL_GPIO_Init+0x44>
        temp = GPIOx->PUPDR;
 8004d68:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d6c:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d6e:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d72:	fa06 fe0c 	lsl.w	lr, r6, ip
 8004d76:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 8004d7a:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d7e:	e739      	b.n	8004bf4 <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d80:	f04f 0e03 	mov.w	lr, #3
 8004d84:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004d88:	ea47 070c 	orr.w	r7, r7, ip
 8004d8c:	e782      	b.n	8004c94 <HAL_GPIO_Init+0xe4>
 8004d8e:	f04f 0e01 	mov.w	lr, #1
 8004d92:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004d96:	ea47 070c 	orr.w	r7, r7, ip
 8004d9a:	e77b      	b.n	8004c94 <HAL_GPIO_Init+0xe4>
 8004d9c:	f04f 0e02 	mov.w	lr, #2
 8004da0:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004da4:	ea47 070c 	orr.w	r7, r7, ip
 8004da8:	e774      	b.n	8004c94 <HAL_GPIO_Init+0xe4>
 8004daa:	f04f 0e06 	mov.w	lr, #6
 8004dae:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004db2:	ea47 070c 	orr.w	r7, r7, ip
 8004db6:	e76d      	b.n	8004c94 <HAL_GPIO_Init+0xe4>
 8004db8:	f04f 0e04 	mov.w	lr, #4
 8004dbc:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004dc0:	ea47 070c 	orr.w	r7, r7, ip
 8004dc4:	e766      	b.n	8004c94 <HAL_GPIO_Init+0xe4>
 8004dc6:	f04f 0e05 	mov.w	lr, #5
 8004dca:	fa0e fc0c 	lsl.w	ip, lr, ip
 8004dce:	ea47 070c 	orr.w	r7, r7, ip
 8004dd2:	e75f      	b.n	8004c94 <HAL_GPIO_Init+0xe4>
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	48000400 	.word	0x48000400
 8004ddc:	48000800 	.word	0x48000800
 8004de0:	40010400 	.word	0x40010400
 8004de4:	48000c00 	.word	0x48000c00
 8004de8:	48001000 	.word	0x48001000
 8004dec:	48001400 	.word	0x48001400
 8004df0:	48001800 	.word	0x48001800
 8004df4:	48001c00 	.word	0x48001c00

08004df8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004df8:	b10a      	cbz	r2, 8004dfe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004dfa:	6181      	str	r1, [r0, #24]
 8004dfc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004dfe:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop

08004e04 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e04:	4a04      	ldr	r2, [pc, #16]	@ (8004e18 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8004e06:	6951      	ldr	r1, [r2, #20]
 8004e08:	4201      	tst	r1, r0
 8004e0a:	d100      	bne.n	8004e0e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004e0c:	4770      	bx	lr
{
 8004e0e:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e10:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e12:	f7fd fa7f 	bl	8002314 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e16:	bd08      	pop	{r3, pc}
 8004e18:	40010400 	.word	0x40010400

08004e1c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004e1c:	4b02      	ldr	r3, [pc, #8]	@ (8004e28 <HAL_PWREx_GetVoltageRange+0xc>)
 8004e1e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8004e20:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	40007000 	.word	0x40007000

08004e2c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e2c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8004e30:	d00e      	beq.n	8004e50 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e32:	4a1b      	ldr	r2, [pc, #108]	@ (8004ea0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004e34:	6813      	ldr	r3, [r2, #0]
 8004e36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e3e:	d005      	beq.n	8004e4c <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e40:	6813      	ldr	r3, [r2, #0]
 8004e42:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e50:	4913      	ldr	r1, [pc, #76]	@ (8004ea0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004e52:	680b      	ldr	r3, [r1, #0]
 8004e54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e5c:	d0f6      	beq.n	8004e4c <HAL_PWREx_ControlVoltageScaling+0x20>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e5e:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e60:	4a10      	ldr	r2, [pc, #64]	@ (8004ea4 <HAL_PWREx_ControlVoltageScaling+0x78>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e62:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e6a:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e6c:	6813      	ldr	r3, [r2, #0]
 8004e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8004ea8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004e70:	2032      	movs	r0, #50	@ 0x32
 8004e72:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e76:	6948      	ldr	r0, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e7e:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e80:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e84:	d506      	bpl.n	8004e94 <HAL_PWREx_ControlVoltageScaling+0x68>
 8004e86:	e000      	b.n	8004e8a <HAL_PWREx_ControlVoltageScaling+0x5e>
 8004e88:	b123      	cbz	r3, 8004e94 <HAL_PWREx_ControlVoltageScaling+0x68>
 8004e8a:	694a      	ldr	r2, [r1, #20]
 8004e8c:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 8004e8e:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e92:	d4f9      	bmi.n	8004e88 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e94:	4b02      	ldr	r3, [pc, #8]	@ (8004ea0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	055b      	lsls	r3, r3, #21
 8004e9a:	d5d7      	bpl.n	8004e4c <HAL_PWREx_ControlVoltageScaling+0x20>
        return HAL_TIMEOUT;
 8004e9c:	2003      	movs	r0, #3
}
 8004e9e:	4770      	bx	lr
 8004ea0:	40007000 	.word	0x40007000
 8004ea4:	20002f78 	.word	0x20002f78
 8004ea8:	431bde83 	.word	0x431bde83

08004eac <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004eac:	4a02      	ldr	r2, [pc, #8]	@ (8004eb8 <HAL_PWREx_EnableVddIO2+0xc>)
 8004eae:	6853      	ldr	r3, [r2, #4]
 8004eb0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004eb4:	6053      	str	r3, [r2, #4]
}
 8004eb6:	4770      	bx	lr
 8004eb8:	40007000 	.word	0x40007000

08004ebc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ebc:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ebe:	4d20      	ldr	r5, [pc, #128]	@ (8004f40 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8004ec0:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8004ec2:	00db      	lsls	r3, r3, #3
{
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ec8:	d51a      	bpl.n	8004f00 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004eca:	f7ff ffa7 	bl	8004e1c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ece:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8004ed2:	d027      	beq.n	8004f24 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004ed4:	2c80      	cmp	r4, #128	@ 0x80
 8004ed6:	d82c      	bhi.n	8004f32 <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ed8:	d02f      	beq.n	8004f3a <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004eda:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 8004ede:	fab4 f484 	clz	r4, r4
 8004ee2:	0964      	lsrs	r4, r4, #5
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ee4:	4917      	ldr	r1, [pc, #92]	@ (8004f44 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8004ee6:	680b      	ldr	r3, [r1, #0]
 8004ee8:	f023 0307 	bic.w	r3, r3, #7
 8004eec:	4323      	orrs	r3, r4
 8004eee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ef0:	6808      	ldr	r0, [r1, #0]
 8004ef2:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8004ef6:	1b00      	subs	r0, r0, r4
 8004ef8:	bf18      	it	ne
 8004efa:	2001      	movne	r0, #1
 8004efc:	b003      	add	sp, #12
 8004efe:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f00:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8004f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f06:	65ab      	str	r3, [r5, #88]	@ 0x58
 8004f08:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8004f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f0e:	9301      	str	r3, [sp, #4]
 8004f10:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8004f12:	f7ff ff83 	bl	8004e1c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f16:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f18:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f20:	65ab      	str	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f22:	d1d7      	bne.n	8004ed4 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 8004f24:	2c80      	cmp	r4, #128	@ 0x80
 8004f26:	d906      	bls.n	8004f36 <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f28:	2ca1      	cmp	r4, #161	@ 0xa1
 8004f2a:	bf34      	ite	cc
 8004f2c:	2401      	movcc	r4, #1
 8004f2e:	2402      	movcs	r4, #2
 8004f30:	e7d8      	b.n	8004ee4 <RCC_SetFlashLatencyFromMSIRange+0x28>
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f32:	2403      	movs	r4, #3
 8004f34:	e7d6      	b.n	8004ee4 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f36:	2400      	movs	r4, #0
 8004f38:	e7d4      	b.n	8004ee4 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f3a:	2402      	movs	r4, #2
 8004f3c:	e7d2      	b.n	8004ee4 <RCC_SetFlashLatencyFromMSIRange+0x28>
 8004f3e:	bf00      	nop
 8004f40:	40021000 	.word	0x40021000
 8004f44:	40022000 	.word	0x40022000

08004f48 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f48:	4a28      	ldr	r2, [pc, #160]	@ (8004fec <HAL_RCC_GetSysClockFreq+0xa4>)
 8004f4a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f4c:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f4e:	f013 030c 	ands.w	r3, r3, #12
 8004f52:	d005      	beq.n	8004f60 <HAL_RCC_GetSysClockFreq+0x18>
 8004f54:	2b0c      	cmp	r3, #12
 8004f56:	d035      	beq.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x7c>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d141      	bne.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x98>
    sysclockfreq = HSI_VALUE;
 8004f5c:	4824      	ldr	r0, [pc, #144]	@ (8004ff0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004f5e:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f60:	4a22      	ldr	r2, [pc, #136]	@ (8004fec <HAL_RCC_GetSysClockFreq+0xa4>)
 8004f62:	6811      	ldr	r1, [r2, #0]
 8004f64:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f66:	bf54      	ite	pl
 8004f68:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f6c:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8004f6e:	4921      	ldr	r1, [pc, #132]	@ (8004ff4 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f70:	bf54      	ite	pl
 8004f72:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f76:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8004f7a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f7e:	b303      	cbz	r3, 8004fc2 <HAL_RCC_GetSysClockFreq+0x7a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f80:	2b0c      	cmp	r3, #12
 8004f82:	d11d      	bne.n	8004fc0 <HAL_RCC_GetSysClockFreq+0x78>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f84:	4b19      	ldr	r3, [pc, #100]	@ (8004fec <HAL_RCC_GetSysClockFreq+0xa4>)
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d025      	beq.n	8004fdc <HAL_RCC_GetSysClockFreq+0x94>
 8004f90:	4a19      	ldr	r2, [pc, #100]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	bf08      	it	eq
 8004f96:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f98:	4b14      	ldr	r3, [pc, #80]	@ (8004fec <HAL_RCC_GetSysClockFreq+0xa4>)
 8004f9a:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f9c:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004fa4:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fa8:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fac:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004fae:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fb2:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fb4:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004fb6:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8004fba:	fbb2 f0f3 	udiv	r0, r2, r3
 8004fbe:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004fc0:	2000      	movs	r0, #0
}
 8004fc2:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fc4:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004fc8:	2a01      	cmp	r2, #1
 8004fca:	d0c9      	beq.n	8004f60 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fcc:	4b07      	ldr	r3, [pc, #28]	@ (8004fec <HAL_RCC_GetSysClockFreq+0xa4>)
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8004fd4:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004fd6:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 8004fda:	d1d9      	bne.n	8004f90 <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 8004fdc:	4804      	ldr	r0, [pc, #16]	@ (8004ff0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004fde:	e7db      	b.n	8004f98 <HAL_RCC_GetSysClockFreq+0x50>
    sysclockfreq = HSE_VALUE;
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	4805      	ldr	r0, [pc, #20]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004fe4:	bf18      	it	ne
 8004fe6:	2000      	movne	r0, #0
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	00f42400 	.word	0x00f42400
 8004ff4:	0800aab0 	.word	0x0800aab0
 8004ff8:	007a1200 	.word	0x007a1200

08004ffc <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	f000 822f 	beq.w	8005460 <HAL_RCC_OscConfig+0x464>
{
 8005002:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005006:	4a93      	ldr	r2, [pc, #588]	@ (8005254 <HAL_RCC_OscConfig+0x258>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005008:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800500a:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800500c:	68d6      	ldr	r6, [r2, #12]
 800500e:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005010:	06d8      	lsls	r0, r3, #27
{
 8005012:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005014:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005018:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800501c:	d52e      	bpl.n	800507c <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800501e:	2d00      	cmp	r5, #0
 8005020:	f000 8121 	beq.w	8005266 <HAL_RCC_OscConfig+0x26a>
 8005024:	2d0c      	cmp	r5, #12
 8005026:	f000 811b 	beq.w	8005260 <HAL_RCC_OscConfig+0x264>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800502a:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 800502c:	4f89      	ldr	r7, [pc, #548]	@ (8005254 <HAL_RCC_OscConfig+0x258>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800502e:	2b00      	cmp	r3, #0
 8005030:	f000 8191 	beq.w	8005356 <HAL_RCC_OscConfig+0x35a>
        __HAL_RCC_MSI_ENABLE();
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	f043 0301 	orr.w	r3, r3, #1
 800503a:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800503c:	f7fe fde6 	bl	8003c0c <HAL_GetTick>
 8005040:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005042:	e006      	b.n	8005052 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005044:	f7fe fde2 	bl	8003c0c <HAL_GetTick>
 8005048:	eba0 0008 	sub.w	r0, r0, r8
 800504c:	2802      	cmp	r0, #2
 800504e:	f200 8192 	bhi.w	8005376 <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	079b      	lsls	r3, r3, #30
 8005056:	d5f5      	bpl.n	8005044 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	f043 0308 	orr.w	r3, r3, #8
 800505e:	603b      	str	r3, [r7, #0]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	6a22      	ldr	r2, [r4, #32]
 8005064:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005068:	4313      	orrs	r3, r2
 800506a:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	69e2      	ldr	r2, [r4, #28]
 8005070:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005074:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005078:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	07d9      	lsls	r1, r3, #31
 800507e:	f100 80bf 	bmi.w	8005200 <HAL_RCC_OscConfig+0x204>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005082:	0799      	lsls	r1, r3, #30
 8005084:	d523      	bpl.n	80050ce <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005086:	2d04      	cmp	r5, #4
 8005088:	f000 8155 	beq.w	8005336 <HAL_RCC_OscConfig+0x33a>
 800508c:	2d0c      	cmp	r5, #12
 800508e:	f000 814f 	beq.w	8005330 <HAL_RCC_OscConfig+0x334>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005092:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8005094:	4e6f      	ldr	r6, [pc, #444]	@ (8005254 <HAL_RCC_OscConfig+0x258>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 8188 	beq.w	80053ac <HAL_RCC_OscConfig+0x3b0>
        __HAL_RCC_HSI_ENABLE();
 800509c:	6833      	ldr	r3, [r6, #0]
 800509e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050a2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80050a4:	f7fe fdb2 	bl	8003c0c <HAL_GetTick>
 80050a8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050aa:	e005      	b.n	80050b8 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050ac:	f7fe fdae 	bl	8003c0c <HAL_GetTick>
 80050b0:	1bc0      	subs	r0, r0, r7
 80050b2:	2802      	cmp	r0, #2
 80050b4:	f200 815f 	bhi.w	8005376 <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050b8:	6833      	ldr	r3, [r6, #0]
 80050ba:	055b      	lsls	r3, r3, #21
 80050bc:	d5f6      	bpl.n	80050ac <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050be:	6873      	ldr	r3, [r6, #4]
 80050c0:	6922      	ldr	r2, [r4, #16]
 80050c2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80050c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80050ca:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	0719      	lsls	r1, r3, #28
 80050d0:	d519      	bpl.n	8005106 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050d2:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80050d4:	4e5f      	ldr	r6, [pc, #380]	@ (8005254 <HAL_RCC_OscConfig+0x258>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 8116 	beq.w	8005308 <HAL_RCC_OscConfig+0x30c>
      __HAL_RCC_LSI_ENABLE();
 80050dc:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 80050e0:	f043 0301 	orr.w	r3, r3, #1
 80050e4:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80050e8:	f7fe fd90 	bl	8003c0c <HAL_GetTick>
 80050ec:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050ee:	e005      	b.n	80050fc <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050f0:	f7fe fd8c 	bl	8003c0c <HAL_GetTick>
 80050f4:	1bc0      	subs	r0, r0, r7
 80050f6:	2802      	cmp	r0, #2
 80050f8:	f200 813d 	bhi.w	8005376 <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050fc:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8005100:	079a      	lsls	r2, r3, #30
 8005102:	d5f5      	bpl.n	80050f0 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	075f      	lsls	r7, r3, #29
 8005108:	d53f      	bpl.n	800518a <HAL_RCC_OscConfig+0x18e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800510a:	4b52      	ldr	r3, [pc, #328]	@ (8005254 <HAL_RCC_OscConfig+0x258>)
 800510c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800510e:	00d6      	lsls	r6, r2, #3
 8005110:	f100 814a 	bmi.w	80053a8 <HAL_RCC_OscConfig+0x3ac>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005114:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005116:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800511a:	659a      	str	r2, [r3, #88]	@ 0x58
 800511c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800511e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005122:	9301      	str	r3, [sp, #4]
 8005124:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005126:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005128:	4f4b      	ldr	r7, [pc, #300]	@ (8005258 <HAL_RCC_OscConfig+0x25c>)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	05d8      	lsls	r0, r3, #23
 800512e:	f140 8199 	bpl.w	8005464 <HAL_RCC_OscConfig+0x468>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005132:	68a3      	ldr	r3, [r4, #8]
 8005134:	2b01      	cmp	r3, #1
 8005136:	f000 814b 	beq.w	80053d0 <HAL_RCC_OscConfig+0x3d4>
 800513a:	2b05      	cmp	r3, #5
 800513c:	f000 81bd 	beq.w	80054ba <HAL_RCC_OscConfig+0x4be>
 8005140:	4f44      	ldr	r7, [pc, #272]	@ (8005254 <HAL_RCC_OscConfig+0x258>)
 8005142:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8005146:	f022 0201 	bic.w	r2, r2, #1
 800514a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800514e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8005152:	f022 0204 	bic.w	r2, r2, #4
 8005156:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800515a:	2b00      	cmp	r3, #0
 800515c:	f040 813f 	bne.w	80053de <HAL_RCC_OscConfig+0x3e2>
      tickstart = HAL_GetTick();
 8005160:	f7fe fd54 	bl	8003c0c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005164:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8005168:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800516a:	e006      	b.n	800517a <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800516c:	f7fe fd4e 	bl	8003c0c <HAL_GetTick>
 8005170:	eba0 0008 	sub.w	r0, r0, r8
 8005174:	4548      	cmp	r0, r9
 8005176:	f200 80fe 	bhi.w	8005376 <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800517a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800517e:	079b      	lsls	r3, r3, #30
 8005180:	d4f4      	bmi.n	800516c <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 8005182:	2e00      	cmp	r6, #0
 8005184:	f040 8180 	bne.w	8005488 <HAL_RCC_OscConfig+0x48c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005188:	6823      	ldr	r3, [r4, #0]
 800518a:	069e      	lsls	r6, r3, #26
 800518c:	d518      	bpl.n	80051c0 <HAL_RCC_OscConfig+0x1c4>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800518e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_RCC_HSI48_ENABLE();
 8005190:	4e30      	ldr	r6, [pc, #192]	@ (8005254 <HAL_RCC_OscConfig+0x258>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 8150 	beq.w	8005438 <HAL_RCC_OscConfig+0x43c>
      __HAL_RCC_HSI48_ENABLE();
 8005198:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 800519c:	f043 0301 	orr.w	r3, r3, #1
 80051a0:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80051a4:	f7fe fd32 	bl	8003c0c <HAL_GetTick>
 80051a8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051aa:	e005      	b.n	80051b8 <HAL_RCC_OscConfig+0x1bc>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80051ac:	f7fe fd2e 	bl	8003c0c <HAL_GetTick>
 80051b0:	1bc0      	subs	r0, r0, r7
 80051b2:	2802      	cmp	r0, #2
 80051b4:	f200 80df 	bhi.w	8005376 <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80051b8:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 80051bc:	0798      	lsls	r0, r3, #30
 80051be:	d5f5      	bpl.n	80051ac <HAL_RCC_OscConfig+0x1b0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051c0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80051c2:	b1db      	cbz	r3, 80051fc <HAL_RCC_OscConfig+0x200>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	f000 8186 	beq.w	80054d6 <HAL_RCC_OscConfig+0x4da>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051ca:	2d0c      	cmp	r5, #12
 80051cc:	f000 808c 	beq.w	80052e8 <HAL_RCC_OscConfig+0x2ec>
        __HAL_RCC_PLL_DISABLE();
 80051d0:	4c20      	ldr	r4, [pc, #128]	@ (8005254 <HAL_RCC_OscConfig+0x258>)
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051d8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80051da:	f7fe fd17 	bl	8003c0c <HAL_GetTick>
 80051de:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051e0:	e005      	b.n	80051ee <HAL_RCC_OscConfig+0x1f2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e2:	f7fe fd13 	bl	8003c0c <HAL_GetTick>
 80051e6:	1b40      	subs	r0, r0, r5
 80051e8:	2802      	cmp	r0, #2
 80051ea:	f200 80c4 	bhi.w	8005376 <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	019b      	lsls	r3, r3, #6
 80051f2:	d4f6      	bmi.n	80051e2 <HAL_RCC_OscConfig+0x1e6>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80051f4:	68e2      	ldr	r2, [r4, #12]
 80051f6:	4b19      	ldr	r3, [pc, #100]	@ (800525c <HAL_RCC_OscConfig+0x260>)
 80051f8:	4013      	ands	r3, r2
 80051fa:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 80051fc:	2000      	movs	r0, #0
 80051fe:	e074      	b.n	80052ea <HAL_RCC_OscConfig+0x2ee>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005200:	2d08      	cmp	r5, #8
 8005202:	d077      	beq.n	80052f4 <HAL_RCC_OscConfig+0x2f8>
 8005204:	2d0c      	cmp	r5, #12
 8005206:	d073      	beq.n	80052f0 <HAL_RCC_OscConfig+0x2f4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005208:	6863      	ldr	r3, [r4, #4]
 800520a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800520e:	f000 80b6 	beq.w	800537e <HAL_RCC_OscConfig+0x382>
 8005212:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005216:	f000 8143 	beq.w	80054a0 <HAL_RCC_OscConfig+0x4a4>
 800521a:	4f0e      	ldr	r7, [pc, #56]	@ (8005254 <HAL_RCC_OscConfig+0x258>)
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005222:	603a      	str	r2, [r7, #0]
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800522a:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800522c:	2b00      	cmp	r3, #0
 800522e:	f040 80ab 	bne.w	8005388 <HAL_RCC_OscConfig+0x38c>
        tickstart = HAL_GetTick();
 8005232:	f7fe fceb 	bl	8003c0c <HAL_GetTick>
 8005236:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005238:	e006      	b.n	8005248 <HAL_RCC_OscConfig+0x24c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800523a:	f7fe fce7 	bl	8003c0c <HAL_GetTick>
 800523e:	eba0 0008 	sub.w	r0, r0, r8
 8005242:	2864      	cmp	r0, #100	@ 0x64
 8005244:	f200 8097 	bhi.w	8005376 <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	0398      	lsls	r0, r3, #14
 800524c:	d4f5      	bmi.n	800523a <HAL_RCC_OscConfig+0x23e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800524e:	6823      	ldr	r3, [r4, #0]
 8005250:	e717      	b.n	8005082 <HAL_RCC_OscConfig+0x86>
 8005252:	bf00      	nop
 8005254:	40021000 	.word	0x40021000
 8005258:	40007000 	.word	0x40007000
 800525c:	feeefffc 	.word	0xfeeefffc
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005260:	2e01      	cmp	r6, #1
 8005262:	f47f aee2 	bne.w	800502a <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005266:	4ba9      	ldr	r3, [pc, #676]	@ (800550c <HAL_RCC_OscConfig+0x510>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	0799      	lsls	r1, r3, #30
 800526c:	d439      	bmi.n	80052e2 <HAL_RCC_OscConfig+0x2e6>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800526e:	4ba7      	ldr	r3, [pc, #668]	@ (800550c <HAL_RCC_OscConfig+0x510>)
 8005270:	6a20      	ldr	r0, [r4, #32]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	0712      	lsls	r2, r2, #28
 8005276:	bf56      	itet	pl
 8005278:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 800527c:	681b      	ldrmi	r3, [r3, #0]
 800527e:	091b      	lsrpl	r3, r3, #4
 8005280:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005284:	4298      	cmp	r0, r3
 8005286:	f200 80bf 	bhi.w	8005408 <HAL_RCC_OscConfig+0x40c>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800528a:	4ba0      	ldr	r3, [pc, #640]	@ (800550c <HAL_RCC_OscConfig+0x510>)
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	f042 0208 	orr.w	r2, r2, #8
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800529a:	4302      	orrs	r2, r0
 800529c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	69e1      	ldr	r1, [r4, #28]
 80052a2:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80052a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80052aa:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80052ac:	2d00      	cmp	r5, #0
 80052ae:	f000 80f1 	beq.w	8005494 <HAL_RCC_OscConfig+0x498>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052b2:	f7ff fe49 	bl	8004f48 <HAL_RCC_GetSysClockFreq>
 80052b6:	4b95      	ldr	r3, [pc, #596]	@ (800550c <HAL_RCC_OscConfig+0x510>)
 80052b8:	4a95      	ldr	r2, [pc, #596]	@ (8005510 <HAL_RCC_OscConfig+0x514>)
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80052c0:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 80052c2:	4a94      	ldr	r2, [pc, #592]	@ (8005514 <HAL_RCC_OscConfig+0x518>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052c4:	f003 031f 	and.w	r3, r3, #31
 80052c8:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 80052cc:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052ce:	4a92      	ldr	r2, [pc, #584]	@ (8005518 <HAL_RCC_OscConfig+0x51c>)
 80052d0:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 80052d2:	f7fe fc59 	bl	8003b88 <HAL_InitTick>
        if(status != HAL_OK)
 80052d6:	b940      	cbnz	r0, 80052ea <HAL_RCC_OscConfig+0x2ee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052d8:	6823      	ldr	r3, [r4, #0]
 80052da:	07d9      	lsls	r1, r3, #31
 80052dc:	f57f aed1 	bpl.w	8005082 <HAL_RCC_OscConfig+0x86>
 80052e0:	e78e      	b.n	8005200 <HAL_RCC_OscConfig+0x204>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052e2:	69a3      	ldr	r3, [r4, #24]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1c2      	bne.n	800526e <HAL_RCC_OscConfig+0x272>
    return HAL_ERROR;
 80052e8:	2001      	movs	r0, #1
}
 80052ea:	b003      	add	sp, #12
 80052ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80052f0:	2e03      	cmp	r6, #3
 80052f2:	d189      	bne.n	8005208 <HAL_RCC_OscConfig+0x20c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f4:	4a85      	ldr	r2, [pc, #532]	@ (800550c <HAL_RCC_OscConfig+0x510>)
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	0392      	lsls	r2, r2, #14
 80052fa:	f57f aec2 	bpl.w	8005082 <HAL_RCC_OscConfig+0x86>
 80052fe:	6862      	ldr	r2, [r4, #4]
 8005300:	2a00      	cmp	r2, #0
 8005302:	f47f aebe 	bne.w	8005082 <HAL_RCC_OscConfig+0x86>
 8005306:	e7ef      	b.n	80052e8 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_LSI_DISABLE();
 8005308:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 800530c:	f023 0301 	bic.w	r3, r3, #1
 8005310:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8005314:	f7fe fc7a 	bl	8003c0c <HAL_GetTick>
 8005318:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800531a:	e004      	b.n	8005326 <HAL_RCC_OscConfig+0x32a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800531c:	f7fe fc76 	bl	8003c0c <HAL_GetTick>
 8005320:	1bc0      	subs	r0, r0, r7
 8005322:	2802      	cmp	r0, #2
 8005324:	d827      	bhi.n	8005376 <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005326:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 800532a:	079b      	lsls	r3, r3, #30
 800532c:	d4f6      	bmi.n	800531c <HAL_RCC_OscConfig+0x320>
 800532e:	e6e9      	b.n	8005104 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005330:	2e02      	cmp	r6, #2
 8005332:	f47f aeae 	bne.w	8005092 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005336:	4a75      	ldr	r2, [pc, #468]	@ (800550c <HAL_RCC_OscConfig+0x510>)
 8005338:	6812      	ldr	r2, [r2, #0]
 800533a:	0552      	lsls	r2, r2, #21
 800533c:	d502      	bpl.n	8005344 <HAL_RCC_OscConfig+0x348>
 800533e:	68e2      	ldr	r2, [r4, #12]
 8005340:	2a00      	cmp	r2, #0
 8005342:	d0d1      	beq.n	80052e8 <HAL_RCC_OscConfig+0x2ec>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005344:	4971      	ldr	r1, [pc, #452]	@ (800550c <HAL_RCC_OscConfig+0x510>)
 8005346:	6920      	ldr	r0, [r4, #16]
 8005348:	684a      	ldr	r2, [r1, #4]
 800534a:	f022 42fe 	bic.w	r2, r2, #2130706432	@ 0x7f000000
 800534e:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8005352:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005354:	e6bb      	b.n	80050ce <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	f023 0301 	bic.w	r3, r3, #1
 800535c:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800535e:	f7fe fc55 	bl	8003c0c <HAL_GetTick>
 8005362:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	0798      	lsls	r0, r3, #30
 8005368:	d5b6      	bpl.n	80052d8 <HAL_RCC_OscConfig+0x2dc>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800536a:	f7fe fc4f 	bl	8003c0c <HAL_GetTick>
 800536e:	eba0 0008 	sub.w	r0, r0, r8
 8005372:	2802      	cmp	r0, #2
 8005374:	d9f6      	bls.n	8005364 <HAL_RCC_OscConfig+0x368>
            return HAL_TIMEOUT;
 8005376:	2003      	movs	r0, #3
}
 8005378:	b003      	add	sp, #12
 800537a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800537e:	4a63      	ldr	r2, [pc, #396]	@ (800550c <HAL_RCC_OscConfig+0x510>)
 8005380:	6813      	ldr	r3, [r2, #0]
 8005382:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005386:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005388:	f7fe fc40 	bl	8003c0c <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800538c:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800550c <HAL_RCC_OscConfig+0x510>
        tickstart = HAL_GetTick();
 8005390:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005392:	e004      	b.n	800539e <HAL_RCC_OscConfig+0x3a2>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005394:	f7fe fc3a 	bl	8003c0c <HAL_GetTick>
 8005398:	1bc0      	subs	r0, r0, r7
 800539a:	2864      	cmp	r0, #100	@ 0x64
 800539c:	d8eb      	bhi.n	8005376 <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800539e:	f8d8 3000 	ldr.w	r3, [r8]
 80053a2:	039b      	lsls	r3, r3, #14
 80053a4:	d5f6      	bpl.n	8005394 <HAL_RCC_OscConfig+0x398>
 80053a6:	e752      	b.n	800524e <HAL_RCC_OscConfig+0x252>
    FlagStatus       pwrclkchanged = RESET;
 80053a8:	2600      	movs	r6, #0
 80053aa:	e6bd      	b.n	8005128 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 80053ac:	6833      	ldr	r3, [r6, #0]
 80053ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053b2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80053b4:	f7fe fc2a 	bl	8003c0c <HAL_GetTick>
 80053b8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053ba:	e004      	b.n	80053c6 <HAL_RCC_OscConfig+0x3ca>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053bc:	f7fe fc26 	bl	8003c0c <HAL_GetTick>
 80053c0:	1bc0      	subs	r0, r0, r7
 80053c2:	2802      	cmp	r0, #2
 80053c4:	d8d7      	bhi.n	8005376 <HAL_RCC_OscConfig+0x37a>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053c6:	6833      	ldr	r3, [r6, #0]
 80053c8:	0558      	lsls	r0, r3, #21
 80053ca:	d4f7      	bmi.n	80053bc <HAL_RCC_OscConfig+0x3c0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	e67e      	b.n	80050ce <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053d0:	4a4e      	ldr	r2, [pc, #312]	@ (800550c <HAL_RCC_OscConfig+0x510>)
 80053d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80053d6:	f043 0301 	orr.w	r3, r3, #1
 80053da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 80053de:	f7fe fc15 	bl	8003c0c <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053e2:	f8df 8128 	ldr.w	r8, [pc, #296]	@ 800550c <HAL_RCC_OscConfig+0x510>
      tickstart = HAL_GetTick();
 80053e6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e8:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ec:	e004      	b.n	80053f8 <HAL_RCC_OscConfig+0x3fc>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ee:	f7fe fc0d 	bl	8003c0c <HAL_GetTick>
 80053f2:	1bc0      	subs	r0, r0, r7
 80053f4:	4548      	cmp	r0, r9
 80053f6:	d8be      	bhi.n	8005376 <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053f8:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 80053fc:	079a      	lsls	r2, r3, #30
 80053fe:	d5f6      	bpl.n	80053ee <HAL_RCC_OscConfig+0x3f2>
    if(pwrclkchanged == SET)
 8005400:	2e00      	cmp	r6, #0
 8005402:	f43f aec1 	beq.w	8005188 <HAL_RCC_OscConfig+0x18c>
 8005406:	e03f      	b.n	8005488 <HAL_RCC_OscConfig+0x48c>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005408:	f7ff fd58 	bl	8004ebc <RCC_SetFlashLatencyFromMSIRange>
 800540c:	2800      	cmp	r0, #0
 800540e:	f47f af6b 	bne.w	80052e8 <HAL_RCC_OscConfig+0x2ec>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005412:	4b3e      	ldr	r3, [pc, #248]	@ (800550c <HAL_RCC_OscConfig+0x510>)
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	f042 0208 	orr.w	r2, r2, #8
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	6a21      	ldr	r1, [r4, #32]
 8005420:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005424:	430a      	orrs	r2, r1
 8005426:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	69e1      	ldr	r1, [r4, #28]
 800542c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8005430:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005434:	605a      	str	r2, [r3, #4]
 8005436:	e73c      	b.n	80052b2 <HAL_RCC_OscConfig+0x2b6>
      __HAL_RCC_HSI48_DISABLE();
 8005438:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 800543c:	f023 0301 	bic.w	r3, r3, #1
 8005440:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8005444:	f7fe fbe2 	bl	8003c0c <HAL_GetTick>
 8005448:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800544a:	e004      	b.n	8005456 <HAL_RCC_OscConfig+0x45a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800544c:	f7fe fbde 	bl	8003c0c <HAL_GetTick>
 8005450:	1bc0      	subs	r0, r0, r7
 8005452:	2802      	cmp	r0, #2
 8005454:	d88f      	bhi.n	8005376 <HAL_RCC_OscConfig+0x37a>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005456:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 800545a:	0799      	lsls	r1, r3, #30
 800545c:	d4f6      	bmi.n	800544c <HAL_RCC_OscConfig+0x450>
 800545e:	e6af      	b.n	80051c0 <HAL_RCC_OscConfig+0x1c4>
    return HAL_ERROR;
 8005460:	2001      	movs	r0, #1
}
 8005462:	4770      	bx	lr
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800546a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800546c:	f7fe fbce 	bl	8003c0c <HAL_GetTick>
 8005470:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	05d9      	lsls	r1, r3, #23
 8005476:	f53f ae5c 	bmi.w	8005132 <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800547a:	f7fe fbc7 	bl	8003c0c <HAL_GetTick>
 800547e:	eba0 0008 	sub.w	r0, r0, r8
 8005482:	2802      	cmp	r0, #2
 8005484:	d9f5      	bls.n	8005472 <HAL_RCC_OscConfig+0x476>
 8005486:	e776      	b.n	8005376 <HAL_RCC_OscConfig+0x37a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005488:	4a20      	ldr	r2, [pc, #128]	@ (800550c <HAL_RCC_OscConfig+0x510>)
 800548a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800548c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005490:	6593      	str	r3, [r2, #88]	@ 0x58
 8005492:	e679      	b.n	8005188 <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005494:	f7ff fd12 	bl	8004ebc <RCC_SetFlashLatencyFromMSIRange>
 8005498:	2800      	cmp	r0, #0
 800549a:	f43f af0a 	beq.w	80052b2 <HAL_RCC_OscConfig+0x2b6>
 800549e:	e723      	b.n	80052e8 <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054a4:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80054b6:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054b8:	e766      	b.n	8005388 <HAL_RCC_OscConfig+0x38c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054ba:	4b14      	ldr	r3, [pc, #80]	@ (800550c <HAL_RCC_OscConfig+0x510>)
 80054bc:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80054c0:	f042 0204 	orr.w	r2, r2, #4
 80054c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80054c8:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80054cc:	f042 0201 	orr.w	r2, r2, #1
 80054d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054d4:	e783      	b.n	80053de <HAL_RCC_OscConfig+0x3e2>
      pll_config = RCC->PLLCFGR;
 80054d6:	4e0d      	ldr	r6, [pc, #52]	@ (800550c <HAL_RCC_OscConfig+0x510>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054d8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      pll_config = RCC->PLLCFGR;
 80054da:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054dc:	f003 0103 	and.w	r1, r3, #3
 80054e0:	4291      	cmp	r1, r2
 80054e2:	d055      	beq.n	8005590 <HAL_RCC_OscConfig+0x594>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054e4:	2d0c      	cmp	r5, #12
 80054e6:	f43f aeff 	beq.w	80052e8 <HAL_RCC_OscConfig+0x2ec>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80054ea:	4d08      	ldr	r5, [pc, #32]	@ (800550c <HAL_RCC_OscConfig+0x510>)
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	f53f aefa 	bmi.w	80052e8 <HAL_RCC_OscConfig+0x2ec>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80054f4:	682b      	ldr	r3, [r5, #0]
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	f53f aef6 	bmi.w	80052e8 <HAL_RCC_OscConfig+0x2ec>
            __HAL_RCC_PLL_DISABLE();
 80054fc:	682b      	ldr	r3, [r5, #0]
 80054fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005502:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8005504:	f7fe fb82 	bl	8003c0c <HAL_GetTick>
 8005508:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800550a:	e00d      	b.n	8005528 <HAL_RCC_OscConfig+0x52c>
 800550c:	40021000 	.word	0x40021000
 8005510:	0800aae0 	.word	0x0800aae0
 8005514:	20002f80 	.word	0x20002f80
 8005518:	20002f78 	.word	0x20002f78
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800551c:	f7fe fb76 	bl	8003c0c <HAL_GetTick>
 8005520:	1b80      	subs	r0, r0, r6
 8005522:	2802      	cmp	r0, #2
 8005524:	f63f af27 	bhi.w	8005376 <HAL_RCC_OscConfig+0x37a>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005528:	682b      	ldr	r3, [r5, #0]
 800552a:	019f      	lsls	r7, r3, #6
 800552c:	d4f6      	bmi.n	800551c <HAL_RCC_OscConfig+0x520>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800552e:	68e9      	ldr	r1, [r5, #12]
 8005530:	4b36      	ldr	r3, [pc, #216]	@ (800560c <HAL_RCC_OscConfig+0x610>)
 8005532:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005534:	6b20      	ldr	r0, [r4, #48]	@ 0x30
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005536:	4e36      	ldr	r6, [pc, #216]	@ (8005610 <HAL_RCC_OscConfig+0x614>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005538:	400b      	ands	r3, r1
 800553a:	4313      	orrs	r3, r2
 800553c:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	@ 0x34
 8005540:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005544:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8005548:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 800554c:	3801      	subs	r0, #1
 800554e:	0849      	lsrs	r1, r1, #1
 8005550:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005554:	3901      	subs	r1, #1
 8005556:	0852      	lsrs	r2, r2, #1
 8005558:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800555c:	3a01      	subs	r2, #1
 800555e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005562:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800556a:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800556c:	68eb      	ldr	r3, [r5, #12]
 800556e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005572:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8005574:	f7fe fb4a 	bl	8003c0c <HAL_GetTick>
 8005578:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800557a:	e005      	b.n	8005588 <HAL_RCC_OscConfig+0x58c>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800557c:	f7fe fb46 	bl	8003c0c <HAL_GetTick>
 8005580:	1b00      	subs	r0, r0, r4
 8005582:	2802      	cmp	r0, #2
 8005584:	f63f aef7 	bhi.w	8005376 <HAL_RCC_OscConfig+0x37a>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005588:	6833      	ldr	r3, [r6, #0]
 800558a:	0198      	lsls	r0, r3, #6
 800558c:	d5f6      	bpl.n	800557c <HAL_RCC_OscConfig+0x580>
 800558e:	e635      	b.n	80051fc <HAL_RCC_OscConfig+0x200>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005590:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005592:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005596:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005598:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800559c:	d1a2      	bne.n	80054e4 <HAL_RCC_OscConfig+0x4e8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800559e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80055a4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80055a8:	d19c      	bne.n	80054e4 <HAL_RCC_OscConfig+0x4e8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055aa:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80055ac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055b0:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80055b4:	d196      	bne.n	80054e4 <HAL_RCC_OscConfig+0x4e8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055b6:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80055b8:	0852      	lsrs	r2, r2, #1
 80055ba:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 80055be:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80055c0:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80055c4:	d18e      	bne.n	80054e4 <HAL_RCC_OscConfig+0x4e8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80055c6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80055c8:	0852      	lsrs	r2, r2, #1
 80055ca:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 80055ce:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055d0:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80055d4:	d186      	bne.n	80054e4 <HAL_RCC_OscConfig+0x4e8>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055d6:	6833      	ldr	r3, [r6, #0]
 80055d8:	0199      	lsls	r1, r3, #6
 80055da:	f53f ae0f 	bmi.w	80051fc <HAL_RCC_OscConfig+0x200>
          __HAL_RCC_PLL_ENABLE();
 80055de:	6833      	ldr	r3, [r6, #0]
 80055e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055e4:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055e6:	68f3      	ldr	r3, [r6, #12]
 80055e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80055ec:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 80055ee:	f7fe fb0d 	bl	8003c0c <HAL_GetTick>
 80055f2:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055f4:	e005      	b.n	8005602 <HAL_RCC_OscConfig+0x606>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f6:	f7fe fb09 	bl	8003c0c <HAL_GetTick>
 80055fa:	1b03      	subs	r3, r0, r4
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	f63f aeba 	bhi.w	8005376 <HAL_RCC_OscConfig+0x37a>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005602:	6833      	ldr	r3, [r6, #0]
 8005604:	019a      	lsls	r2, r3, #6
 8005606:	d5f6      	bpl.n	80055f6 <HAL_RCC_OscConfig+0x5fa>
 8005608:	e5f8      	b.n	80051fc <HAL_RCC_OscConfig+0x200>
 800560a:	bf00      	nop
 800560c:	019d808c 	.word	0x019d808c
 8005610:	40021000 	.word	0x40021000

08005614 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005614:	2800      	cmp	r0, #0
 8005616:	f000 80a0 	beq.w	800575a <HAL_RCC_ClockConfig+0x146>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800561a:	4a54      	ldr	r2, [pc, #336]	@ (800576c <HAL_RCC_ClockConfig+0x158>)
 800561c:	6813      	ldr	r3, [r2, #0]
 800561e:	f003 0307 	and.w	r3, r3, #7
 8005622:	428b      	cmp	r3, r1
{
 8005624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005628:	460d      	mov	r5, r1
 800562a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800562c:	d20c      	bcs.n	8005648 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800562e:	6813      	ldr	r3, [r2, #0]
 8005630:	f023 0307 	bic.w	r3, r3, #7
 8005634:	430b      	orrs	r3, r1
 8005636:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005638:	6813      	ldr	r3, [r2, #0]
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	428b      	cmp	r3, r1
 8005640:	d002      	beq.n	8005648 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8005642:	2001      	movs	r0, #1
}
 8005644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	0799      	lsls	r1, r3, #30
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800564c:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005650:	d570      	bpl.n	8005734 <HAL_RCC_ClockConfig+0x120>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005652:	4e47      	ldr	r6, [pc, #284]	@ (8005770 <HAL_RCC_ClockConfig+0x15c>)
 8005654:	68a0      	ldr	r0, [r4, #8]
 8005656:	68b1      	ldr	r1, [r6, #8]
 8005658:	f001 01f0 	and.w	r1, r1, #240	@ 0xf0
 800565c:	4288      	cmp	r0, r1
 800565e:	d904      	bls.n	800566a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005660:	68b1      	ldr	r1, [r6, #8]
 8005662:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
 8005666:	4301      	orrs	r1, r0
 8005668:	60b1      	str	r1, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800566a:	b332      	cbz	r2, 80056ba <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800566c:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800566e:	4b40      	ldr	r3, [pc, #256]	@ (8005770 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005670:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005672:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005674:	d065      	beq.n	8005742 <HAL_RCC_ClockConfig+0x12e>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005676:	2a02      	cmp	r2, #2
 8005678:	d06c      	beq.n	8005754 <HAL_RCC_ClockConfig+0x140>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800567a:	2a00      	cmp	r2, #0
 800567c:	d171      	bne.n	8005762 <HAL_RCC_ClockConfig+0x14e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800567e:	079e      	lsls	r6, r3, #30
 8005680:	d5df      	bpl.n	8005642 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005682:	4e3b      	ldr	r6, [pc, #236]	@ (8005770 <HAL_RCC_ClockConfig+0x15c>)
 8005684:	68b3      	ldr	r3, [r6, #8]
 8005686:	f023 0303 	bic.w	r3, r3, #3
 800568a:	4313      	orrs	r3, r2
 800568c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800568e:	f7fe fabd 	bl	8003c0c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005692:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8005696:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005698:	e004      	b.n	80056a4 <HAL_RCC_ClockConfig+0x90>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800569a:	f7fe fab7 	bl	8003c0c <HAL_GetTick>
 800569e:	1bc0      	subs	r0, r0, r7
 80056a0:	4540      	cmp	r0, r8
 80056a2:	d85c      	bhi.n	800575e <HAL_RCC_ClockConfig+0x14a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056a4:	68b3      	ldr	r3, [r6, #8]
 80056a6:	6862      	ldr	r2, [r4, #4]
 80056a8:	f003 030c 	and.w	r3, r3, #12
 80056ac:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80056b0:	d1f3      	bne.n	800569a <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	0799      	lsls	r1, r3, #30
 80056b6:	d506      	bpl.n	80056c6 <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80056b8:	68a0      	ldr	r0, [r4, #8]
 80056ba:	492d      	ldr	r1, [pc, #180]	@ (8005770 <HAL_RCC_ClockConfig+0x15c>)
 80056bc:	688a      	ldr	r2, [r1, #8]
 80056be:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80056c2:	4282      	cmp	r2, r0
 80056c4:	d840      	bhi.n	8005748 <HAL_RCC_ClockConfig+0x134>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056c6:	4929      	ldr	r1, [pc, #164]	@ (800576c <HAL_RCC_ClockConfig+0x158>)
 80056c8:	680a      	ldr	r2, [r1, #0]
 80056ca:	f002 0207 	and.w	r2, r2, #7
 80056ce:	42aa      	cmp	r2, r5
 80056d0:	d909      	bls.n	80056e6 <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056d2:	680a      	ldr	r2, [r1, #0]
 80056d4:	f022 0207 	bic.w	r2, r2, #7
 80056d8:	432a      	orrs	r2, r5
 80056da:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056dc:	680a      	ldr	r2, [r1, #0]
 80056de:	f002 0207 	and.w	r2, r2, #7
 80056e2:	42aa      	cmp	r2, r5
 80056e4:	d1ad      	bne.n	8005642 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e6:	075a      	lsls	r2, r3, #29
 80056e8:	d506      	bpl.n	80056f8 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056ea:	4921      	ldr	r1, [pc, #132]	@ (8005770 <HAL_RCC_ClockConfig+0x15c>)
 80056ec:	68e0      	ldr	r0, [r4, #12]
 80056ee:	688a      	ldr	r2, [r1, #8]
 80056f0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80056f4:	4302      	orrs	r2, r0
 80056f6:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056f8:	071b      	lsls	r3, r3, #28
 80056fa:	d507      	bpl.n	800570c <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005770 <HAL_RCC_ClockConfig+0x15c>)
 80056fe:	6921      	ldr	r1, [r4, #16]
 8005700:	6893      	ldr	r3, [r2, #8]
 8005702:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8005706:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800570a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800570c:	f7ff fc1c 	bl	8004f48 <HAL_RCC_GetSysClockFreq>
 8005710:	4a17      	ldr	r2, [pc, #92]	@ (8005770 <HAL_RCC_ClockConfig+0x15c>)
 8005712:	4c18      	ldr	r4, [pc, #96]	@ (8005774 <HAL_RCC_ClockConfig+0x160>)
 8005714:	6892      	ldr	r2, [r2, #8]
 8005716:	4918      	ldr	r1, [pc, #96]	@ (8005778 <HAL_RCC_ClockConfig+0x164>)
 8005718:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800571c:	4603      	mov	r3, r0
 800571e:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 8005720:	4816      	ldr	r0, [pc, #88]	@ (800577c <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005722:	f002 021f 	and.w	r2, r2, #31
 8005726:	40d3      	lsrs	r3, r2
}
 8005728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 800572c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800572e:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8005730:	f7fe ba2a 	b.w	8003b88 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005734:	2a00      	cmp	r2, #0
 8005736:	d0c6      	beq.n	80056c6 <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005738:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800573a:	4b0d      	ldr	r3, [pc, #52]	@ (8005770 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800573c:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800573e:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005740:	d199      	bne.n	8005676 <HAL_RCC_ClockConfig+0x62>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005742:	019b      	lsls	r3, r3, #6
 8005744:	d49d      	bmi.n	8005682 <HAL_RCC_ClockConfig+0x6e>
 8005746:	e77c      	b.n	8005642 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005748:	688a      	ldr	r2, [r1, #8]
 800574a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800574e:	4302      	orrs	r2, r0
 8005750:	608a      	str	r2, [r1, #8]
 8005752:	e7b8      	b.n	80056c6 <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005754:	039f      	lsls	r7, r3, #14
 8005756:	d494      	bmi.n	8005682 <HAL_RCC_ClockConfig+0x6e>
 8005758:	e773      	b.n	8005642 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800575a:	2001      	movs	r0, #1
}
 800575c:	4770      	bx	lr
        return HAL_TIMEOUT;
 800575e:	2003      	movs	r0, #3
 8005760:	e770      	b.n	8005644 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005762:	0558      	lsls	r0, r3, #21
 8005764:	f57f af6d 	bpl.w	8005642 <HAL_RCC_ClockConfig+0x2e>
 8005768:	e78b      	b.n	8005682 <HAL_RCC_ClockConfig+0x6e>
 800576a:	bf00      	nop
 800576c:	40022000 	.word	0x40022000
 8005770:	40021000 	.word	0x40021000
 8005774:	0800aae0 	.word	0x0800aae0
 8005778:	20002f78 	.word	0x20002f78
 800577c:	20002f80 	.word	0x20002f80

08005780 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8005780:	4b01      	ldr	r3, [pc, #4]	@ (8005788 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8005782:	6818      	ldr	r0, [r3, #0]
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	20002f78 	.word	0x20002f78

0800578c <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800578c:	4a45      	ldr	r2, [pc, #276]	@ (80058a4 <RCCEx_PLLSAI1_Config+0x118>)
{
 800578e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005790:	68d6      	ldr	r6, [r2, #12]
{
 8005792:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005794:	07b1      	lsls	r1, r6, #30
{
 8005796:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005798:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800579a:	d006      	beq.n	80057aa <RCCEx_PLLSAI1_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800579c:	68d1      	ldr	r1, [r2, #12]
 800579e:	f001 0103 	and.w	r1, r1, #3
 80057a2:	4281      	cmp	r1, r0
 80057a4:	d04b      	beq.n	800583e <RCCEx_PLLSAI1_Config+0xb2>
 80057a6:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80057a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 80057aa:	2802      	cmp	r0, #2
 80057ac:	d058      	beq.n	8005860 <RCCEx_PLLSAI1_Config+0xd4>
 80057ae:	2803      	cmp	r0, #3
 80057b0:	d04f      	beq.n	8005852 <RCCEx_PLLSAI1_Config+0xc6>
 80057b2:	2801      	cmp	r0, #1
 80057b4:	d1f7      	bne.n	80057a6 <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057b6:	6812      	ldr	r2, [r2, #0]
 80057b8:	0793      	lsls	r3, r2, #30
 80057ba:	d5f5      	bpl.n	80057a8 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80057bc:	4939      	ldr	r1, [pc, #228]	@ (80058a4 <RCCEx_PLLSAI1_Config+0x118>)
 80057be:	68ca      	ldr	r2, [r1, #12]
 80057c0:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 80057c4:	ea42 0300 	orr.w	r3, r2, r0
 80057c8:	6862      	ldr	r2, [r4, #4]
 80057ca:	3a01      	subs	r2, #1
 80057cc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80057d0:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 80057d2:	4e34      	ldr	r6, [pc, #208]	@ (80058a4 <RCCEx_PLLSAI1_Config+0x118>)
 80057d4:	6833      	ldr	r3, [r6, #0]
 80057d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80057da:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80057dc:	f7fe fa16 	bl	8003c0c <HAL_GetTick>
 80057e0:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057e2:	e004      	b.n	80057ee <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057e4:	f7fe fa12 	bl	8003c0c <HAL_GetTick>
 80057e8:	1bc3      	subs	r3, r0, r7
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d83c      	bhi.n	8005868 <RCCEx_PLLSAI1_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80057ee:	6833      	ldr	r3, [r6, #0]
 80057f0:	011a      	lsls	r2, r3, #4
 80057f2:	d4f7      	bmi.n	80057e4 <RCCEx_PLLSAI1_Config+0x58>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057f4:	68a3      	ldr	r3, [r4, #8]
 80057f6:	0219      	lsls	r1, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 80057f8:	2d00      	cmp	r5, #0
 80057fa:	d137      	bne.n	800586c <RCCEx_PLLSAI1_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057fc:	6932      	ldr	r2, [r6, #16]
 80057fe:	68e3      	ldr	r3, [r4, #12]
 8005800:	f022 4278 	bic.w	r2, r2, #4160749568	@ 0xf8000000
 8005804:	ea41 63c3 	orr.w	r3, r1, r3, lsl #27
 8005808:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 800580c:	4313      	orrs	r3, r2
 800580e:	6133      	str	r3, [r6, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8005810:	4d24      	ldr	r5, [pc, #144]	@ (80058a4 <RCCEx_PLLSAI1_Config+0x118>)
 8005812:	682b      	ldr	r3, [r5, #0]
 8005814:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005818:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800581a:	f7fe f9f7 	bl	8003c0c <HAL_GetTick>
 800581e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005820:	e004      	b.n	800582c <RCCEx_PLLSAI1_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005822:	f7fe f9f3 	bl	8003c0c <HAL_GetTick>
 8005826:	1b80      	subs	r0, r0, r6
 8005828:	2802      	cmp	r0, #2
 800582a:	d81d      	bhi.n	8005868 <RCCEx_PLLSAI1_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	011b      	lsls	r3, r3, #4
 8005830:	d5f7      	bpl.n	8005822 <RCCEx_PLLSAI1_Config+0x96>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005832:	692b      	ldr	r3, [r5, #16]
 8005834:	69a2      	ldr	r2, [r4, #24]
 8005836:	4313      	orrs	r3, r2
 8005838:	2000      	movs	r0, #0
 800583a:	612b      	str	r3, [r5, #16]
}
 800583c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800583e:	2900      	cmp	r1, #0
 8005840:	d0b1      	beq.n	80057a6 <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005842:	68d3      	ldr	r3, [r2, #12]
       ||
 8005844:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005846:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800584a:	3301      	adds	r3, #1
       ||
 800584c:	4293      	cmp	r3, r2
 800584e:	d1aa      	bne.n	80057a6 <RCCEx_PLLSAI1_Config+0x1a>
 8005850:	e7bf      	b.n	80057d2 <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005852:	6811      	ldr	r1, [r2, #0]
 8005854:	038e      	lsls	r6, r1, #14
 8005856:	d4b1      	bmi.n	80057bc <RCCEx_PLLSAI1_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005858:	6812      	ldr	r2, [r2, #0]
 800585a:	0351      	lsls	r1, r2, #13
 800585c:	d5a3      	bpl.n	80057a6 <RCCEx_PLLSAI1_Config+0x1a>
 800585e:	e7ad      	b.n	80057bc <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005860:	6812      	ldr	r2, [r2, #0]
 8005862:	0557      	lsls	r7, r2, #21
 8005864:	d59f      	bpl.n	80057a6 <RCCEx_PLLSAI1_Config+0x1a>
 8005866:	e7a9      	b.n	80057bc <RCCEx_PLLSAI1_Config+0x30>
 8005868:	2003      	movs	r0, #3
}
 800586a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 800586c:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800586e:	6933      	ldr	r3, [r6, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8005870:	d00b      	beq.n	800588a <RCCEx_PLLSAI1_Config+0xfe>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005872:	6962      	ldr	r2, [r4, #20]
 8005874:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005878:	0852      	lsrs	r2, r2, #1
 800587a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800587e:	3a01      	subs	r2, #1
 8005880:	430b      	orrs	r3, r1
 8005882:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005886:	6133      	str	r3, [r6, #16]
 8005888:	e7c2      	b.n	8005810 <RCCEx_PLLSAI1_Config+0x84>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800588a:	6922      	ldr	r2, [r4, #16]
 800588c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005890:	0852      	lsrs	r2, r2, #1
 8005892:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005896:	3a01      	subs	r2, #1
 8005898:	430b      	orrs	r3, r1
 800589a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800589e:	6133      	str	r3, [r6, #16]
 80058a0:	e7b6      	b.n	8005810 <RCCEx_PLLSAI1_Config+0x84>
 80058a2:	bf00      	nop
 80058a4:	40021000 	.word	0x40021000

080058a8 <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058a8:	4a3e      	ldr	r2, [pc, #248]	@ (80059a4 <RCCEx_PLLSAI2_Config+0xfc>)
{
 80058aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058ac:	68d6      	ldr	r6, [r2, #12]
{
 80058ae:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058b0:	07b1      	lsls	r1, r6, #30
{
 80058b2:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80058b4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058b6:	d006      	beq.n	80058c6 <RCCEx_PLLSAI2_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80058b8:	68d1      	ldr	r1, [r2, #12]
 80058ba:	f001 0103 	and.w	r1, r1, #3
 80058be:	4281      	cmp	r1, r0
 80058c0:	d04b      	beq.n	800595a <RCCEx_PLLSAI2_Config+0xb2>
 80058c2:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80058c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 80058c6:	2802      	cmp	r0, #2
 80058c8:	d058      	beq.n	800597c <RCCEx_PLLSAI2_Config+0xd4>
 80058ca:	2803      	cmp	r0, #3
 80058cc:	d04f      	beq.n	800596e <RCCEx_PLLSAI2_Config+0xc6>
 80058ce:	2801      	cmp	r0, #1
 80058d0:	d1f7      	bne.n	80058c2 <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058d2:	6812      	ldr	r2, [r2, #0]
 80058d4:	0793      	lsls	r3, r2, #30
 80058d6:	d5f5      	bpl.n	80058c4 <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80058d8:	4932      	ldr	r1, [pc, #200]	@ (80059a4 <RCCEx_PLLSAI2_Config+0xfc>)
 80058da:	68ca      	ldr	r2, [r1, #12]
 80058dc:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 80058e0:	ea42 0300 	orr.w	r3, r2, r0
 80058e4:	6862      	ldr	r2, [r4, #4]
 80058e6:	3a01      	subs	r2, #1
 80058e8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80058ec:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 80058ee:	4e2d      	ldr	r6, [pc, #180]	@ (80059a4 <RCCEx_PLLSAI2_Config+0xfc>)
 80058f0:	6833      	ldr	r3, [r6, #0]
 80058f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058f6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80058f8:	f7fe f988 	bl	8003c0c <HAL_GetTick>
 80058fc:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058fe:	e004      	b.n	800590a <RCCEx_PLLSAI2_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005900:	f7fe f984 	bl	8003c0c <HAL_GetTick>
 8005904:	1bc3      	subs	r3, r0, r7
 8005906:	2b02      	cmp	r3, #2
 8005908:	d83c      	bhi.n	8005984 <RCCEx_PLLSAI2_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800590a:	6833      	ldr	r3, [r6, #0]
 800590c:	009a      	lsls	r2, r3, #2
 800590e:	d4f7      	bmi.n	8005900 <RCCEx_PLLSAI2_Config+0x58>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005910:	68a3      	ldr	r3, [r4, #8]
 8005912:	021b      	lsls	r3, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 8005914:	2d00      	cmp	r5, #0
 8005916:	d137      	bne.n	8005988 <RCCEx_PLLSAI2_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005918:	6972      	ldr	r2, [r6, #20]
 800591a:	68e1      	ldr	r1, [r4, #12]
 800591c:	f022 4278 	bic.w	r2, r2, #4160749568	@ 0xf8000000
 8005920:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 8005924:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8005928:	4313      	orrs	r3, r2
 800592a:	6173      	str	r3, [r6, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800592c:	4d1d      	ldr	r5, [pc, #116]	@ (80059a4 <RCCEx_PLLSAI2_Config+0xfc>)
 800592e:	682b      	ldr	r3, [r5, #0]
 8005930:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005934:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8005936:	f7fe f969 	bl	8003c0c <HAL_GetTick>
 800593a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800593c:	e004      	b.n	8005948 <RCCEx_PLLSAI2_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800593e:	f7fe f965 	bl	8003c0c <HAL_GetTick>
 8005942:	1b80      	subs	r0, r0, r6
 8005944:	2802      	cmp	r0, #2
 8005946:	d81d      	bhi.n	8005984 <RCCEx_PLLSAI2_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005948:	682b      	ldr	r3, [r5, #0]
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	d5f7      	bpl.n	800593e <RCCEx_PLLSAI2_Config+0x96>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800594e:	696b      	ldr	r3, [r5, #20]
 8005950:	6962      	ldr	r2, [r4, #20]
 8005952:	4313      	orrs	r3, r2
 8005954:	2000      	movs	r0, #0
 8005956:	616b      	str	r3, [r5, #20]
}
 8005958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 800595a:	2900      	cmp	r1, #0
 800595c:	d0b1      	beq.n	80058c2 <RCCEx_PLLSAI2_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800595e:	68d3      	ldr	r3, [r2, #12]
       ||
 8005960:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005962:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005966:	3301      	adds	r3, #1
       ||
 8005968:	4293      	cmp	r3, r2
 800596a:	d1aa      	bne.n	80058c2 <RCCEx_PLLSAI2_Config+0x1a>
 800596c:	e7bf      	b.n	80058ee <RCCEx_PLLSAI2_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800596e:	6811      	ldr	r1, [r2, #0]
 8005970:	038e      	lsls	r6, r1, #14
 8005972:	d4b1      	bmi.n	80058d8 <RCCEx_PLLSAI2_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	0351      	lsls	r1, r2, #13
 8005978:	d5a3      	bpl.n	80058c2 <RCCEx_PLLSAI2_Config+0x1a>
 800597a:	e7ad      	b.n	80058d8 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800597c:	6812      	ldr	r2, [r2, #0]
 800597e:	0557      	lsls	r7, r2, #21
 8005980:	d59f      	bpl.n	80058c2 <RCCEx_PLLSAI2_Config+0x1a>
 8005982:	e7a9      	b.n	80058d8 <RCCEx_PLLSAI2_Config+0x30>
 8005984:	2003      	movs	r0, #3
}
 8005986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005988:	6972      	ldr	r2, [r6, #20]
 800598a:	6921      	ldr	r1, [r4, #16]
 800598c:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8005990:	0849      	lsrs	r1, r1, #1
 8005992:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8005996:	3901      	subs	r1, #1
 8005998:	431a      	orrs	r2, r3
 800599a:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 800599e:	6172      	str	r2, [r6, #20]
 80059a0:	e7c4      	b.n	800592c <RCCEx_PLLSAI2_Config+0x84>
 80059a2:	bf00      	nop
 80059a4:	40021000 	.word	0x40021000

080059a8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80059a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80059ac:	6803      	ldr	r3, [r0, #0]
 80059ae:	f413 6600 	ands.w	r6, r3, #2048	@ 0x800
{
 80059b2:	b083      	sub	sp, #12
 80059b4:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80059b6:	d016      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai1ClockSelection)
 80059b8:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 80059ba:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80059be:	f000 81e8 	beq.w	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80059c2:	f200 8123 	bhi.w	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x264>
 80059c6:	2900      	cmp	r1, #0
 80059c8:	f000 81b7 	beq.w	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x392>
 80059cc:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 80059d0:	f040 81d1 	bne.w	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80059d4:	2100      	movs	r1, #0
 80059d6:	3020      	adds	r0, #32
 80059d8:	f7ff ff66 	bl	80058a8 <RCCEx_PLLSAI2_Config>
 80059dc:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80059de:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80059e0:	2e00      	cmp	r6, #0
 80059e2:	f000 81e3 	beq.w	8005dac <HAL_RCCEx_PeriphCLKConfig+0x404>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80059e6:	04d8      	lsls	r0, r3, #19
 80059e8:	f140 8121 	bpl.w	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch(PeriphClkInit->Sai2ClockSelection)
 80059ec:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 80059ee:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 80059f2:	f000 81d4 	beq.w	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 80059f6:	f200 817f 	bhi.w	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80059fa:	2900      	cmp	r1, #0
 80059fc:	f000 81a6 	beq.w	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005a00:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8005a04:	f040 81b9 	bne.w	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a08:	2100      	movs	r1, #0
 8005a0a:	f104 0020 	add.w	r0, r4, #32
 8005a0e:	f7ff ff4b 	bl	80058a8 <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a12:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a14:	4607      	mov	r7, r0
    if(ret == HAL_OK)
 8005a16:	2f00      	cmp	r7, #0
 8005a18:	f040 8175 	bne.w	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a1c:	49b4      	ldr	r1, [pc, #720]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005a1e:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8005a20:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005a24:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005a28:	4302      	orrs	r2, r0
 8005a2a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a2e:	0399      	lsls	r1, r3, #14
 8005a30:	f100 8101 	bmi.w	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a34:	07d9      	lsls	r1, r3, #31
 8005a36:	d508      	bpl.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a38:	49ad      	ldr	r1, [pc, #692]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005a3a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8005a3c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005a40:	f022 0203 	bic.w	r2, r2, #3
 8005a44:	4302      	orrs	r2, r0
 8005a46:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a4a:	079a      	lsls	r2, r3, #30
 8005a4c:	d508      	bpl.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a4e:	49a8      	ldr	r1, [pc, #672]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005a50:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005a52:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005a56:	f022 020c 	bic.w	r2, r2, #12
 8005a5a:	4302      	orrs	r2, r0
 8005a5c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a60:	075f      	lsls	r7, r3, #29
 8005a62:	d508      	bpl.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0xce>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a64:	49a2      	ldr	r1, [pc, #648]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005a66:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8005a68:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005a6c:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8005a70:	4302      	orrs	r2, r0
 8005a72:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a76:	071d      	lsls	r5, r3, #28
 8005a78:	d508      	bpl.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a7a:	499d      	ldr	r1, [pc, #628]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005a7c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8005a7e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005a82:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8005a86:	4302      	orrs	r2, r0
 8005a88:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a8c:	06d8      	lsls	r0, r3, #27
 8005a8e:	d508      	bpl.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a90:	4997      	ldr	r1, [pc, #604]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005a92:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8005a94:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005a98:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005a9c:	4302      	orrs	r2, r0
 8005a9e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005aa2:	0699      	lsls	r1, r3, #26
 8005aa4:	d508      	bpl.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005aa6:	4992      	ldr	r1, [pc, #584]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005aa8:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8005aaa:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005aae:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005ab2:	4302      	orrs	r2, r0
 8005ab4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005ab8:	059a      	lsls	r2, r3, #22
 8005aba:	d508      	bpl.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005abc:	498c      	ldr	r1, [pc, #560]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005abe:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8005ac0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005ac4:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8005ac8:	4302      	orrs	r2, r0
 8005aca:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ace:	055f      	lsls	r7, r3, #21
 8005ad0:	d508      	bpl.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ad2:	4987      	ldr	r1, [pc, #540]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005ad4:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8005ad6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005ada:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8005ade:	4302      	orrs	r2, r0
 8005ae0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ae4:	065d      	lsls	r5, r3, #25
 8005ae6:	d508      	bpl.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ae8:	4981      	ldr	r1, [pc, #516]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005aea:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8005aec:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005af0:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8005af4:	4302      	orrs	r2, r0
 8005af6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005afa:	0618      	lsls	r0, r3, #24
 8005afc:	d508      	bpl.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005afe:	497c      	ldr	r1, [pc, #496]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005b00:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8005b02:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005b06:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8005b0a:	4302      	orrs	r2, r0
 8005b0c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b10:	05d9      	lsls	r1, r3, #23
 8005b12:	d508      	bpl.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b14:	4976      	ldr	r1, [pc, #472]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005b16:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b18:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005b1c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8005b20:	4302      	orrs	r2, r0
 8005b22:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b26:	02da      	lsls	r2, r3, #11
 8005b28:	d508      	bpl.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b2a:	4971      	ldr	r1, [pc, #452]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005b2c:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8005b2e:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 8005b32:	f022 0203 	bic.w	r2, r2, #3
 8005b36:	4302      	orrs	r2, r0
 8005b38:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b3c:	049f      	lsls	r7, r3, #18
 8005b3e:	d510      	bpl.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b40:	496b      	ldr	r1, [pc, #428]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005b42:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8005b44:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005b48:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8005b4c:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b4e:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b52:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b56:	f000 8104 	beq.w	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b5a:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8005b5e:	f000 8132 	beq.w	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b62:	031d      	lsls	r5, r3, #12
 8005b64:	d510      	bpl.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b66:	4962      	ldr	r1, [pc, #392]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005b68:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8005b6a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005b6e:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8005b72:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005b74:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b78:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005b7c:	f000 80f6 	beq.w	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b80:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8005b84:	f000 8129 	beq.w	8005dda <HAL_RCCEx_PeriphCLKConfig+0x432>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b88:	0358      	lsls	r0, r3, #13
 8005b8a:	d510      	bpl.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x206>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b8c:	4958      	ldr	r1, [pc, #352]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005b8e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8005b90:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005b94:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8005b98:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b9a:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b9e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ba2:	f000 80d9 	beq.w	8005d58 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ba6:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8005baa:	f000 8120 	beq.w	8005dee <HAL_RCCEx_PeriphCLKConfig+0x446>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bae:	0459      	lsls	r1, r3, #17
 8005bb0:	d510      	bpl.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bb2:	484f      	ldr	r0, [pc, #316]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005bb4:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8005bb6:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8005bba:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005bbe:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005bc0:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bc4:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005bc8:	f000 80d9 	beq.w	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005bcc:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8005bd0:	f000 80ee 	beq.w	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005bd4:	041a      	lsls	r2, r3, #16
 8005bd6:	d509      	bpl.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x244>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005bd8:	4945      	ldr	r1, [pc, #276]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005bda:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8005bde:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005be2:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8005be6:	4302      	orrs	r2, r0
 8005be8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bec:	03db      	lsls	r3, r3, #15
 8005bee:	d509      	bpl.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bf0:	4a3f      	ldr	r2, [pc, #252]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005bf2:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8005bf6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8005bfa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005bfe:	430b      	orrs	r3, r1
 8005c00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8005c04:	4630      	mov	r0, r6
 8005c06:	b003      	add	sp, #12
 8005c08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai1ClockSelection)
 8005c0c:	f5b1 0f40 	cmp.w	r1, #12582912	@ 0xc00000
 8005c10:	f040 80b1 	bne.w	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c14:	4836      	ldr	r0, [pc, #216]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005c16:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8005c1a:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005c24:	04d8      	lsls	r0, r3, #19
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005c26:	f04f 0600 	mov.w	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005c2a:	f53f aedf 	bmi.w	80059ec <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch(PeriphClkInit->Sai2ClockSelection)
 8005c2e:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c30:	0399      	lsls	r1, r3, #14
 8005c32:	f57f aeff 	bpl.w	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005c36:	4b2e      	ldr	r3, [pc, #184]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005c38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005c3a:	00d2      	lsls	r2, r2, #3
 8005c3c:	d565      	bpl.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x362>
    FlagStatus       pwrclkchanged = RESET;
 8005c3e:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c42:	4d2c      	ldr	r5, [pc, #176]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8005c44:	682b      	ldr	r3, [r5, #0]
 8005c46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c4a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8005c4c:	f7fd ffde 	bl	8003c0c <HAL_GetTick>
 8005c50:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c52:	e005      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c54:	f7fd ffda 	bl	8003c0c <HAL_GetTick>
 8005c58:	eba0 0309 	sub.w	r3, r0, r9
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d860      	bhi.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	05db      	lsls	r3, r3, #23
 8005c64:	d5f6      	bpl.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    if(ret == HAL_OK)
 8005c66:	2f00      	cmp	r7, #0
 8005c68:	f040 80cb 	bne.w	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x45a>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c6c:	4d20      	ldr	r5, [pc, #128]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c6e:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c72:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c76:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005c7a:	d026      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x322>
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d024      	beq.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x322>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c80:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c84:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8005c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c8c:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c90:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8005c94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c98:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c9c:	07cf      	lsls	r7, r1, #31
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c9e:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        RCC->BDCR = tmpregister;
 8005ca2:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ca6:	d510      	bpl.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x322>
        tickstart = HAL_GetTick();
 8005ca8:	f7fd ffb0 	bl	8003c0c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cac:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8005cb0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cb2:	e004      	b.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x316>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cb4:	f7fd ffaa 	bl	8003c0c <HAL_GetTick>
 8005cb8:	1bc0      	subs	r0, r0, r7
 8005cba:	4548      	cmp	r0, r9
 8005cbc:	d831      	bhi.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x37a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cbe:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8005cc2:	0798      	lsls	r0, r3, #30
 8005cc4:	d5f6      	bpl.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x30c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cc6:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 8005cca:	4909      	ldr	r1, [pc, #36]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005ccc:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8005cd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cda:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8005cdc:	f1b8 0f00 	cmp.w	r8, #0
 8005ce0:	f43f aea8 	beq.w	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ce4:	4902      	ldr	r1, [pc, #8]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005ce6:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8005ce8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8005cec:	658a      	str	r2, [r1, #88]	@ 0x58
 8005cee:	e6a1      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8005cf0:	40021000 	.word	0x40021000
 8005cf4:	40007000 	.word	0x40007000
    switch(PeriphClkInit->Sai2ClockSelection)
 8005cf8:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8005cfc:	d13d      	bne.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005cfe:	4637      	mov	r7, r6
    if(ret == HAL_OK)
 8005d00:	2f00      	cmp	r7, #0
 8005d02:	f43f ae8b 	beq.w	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d06:	463e      	mov	r6, r7
 8005d08:	e792      	b.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x288>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d0a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005d0c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005d10:	659a      	str	r2, [r3, #88]	@ 0x58
 8005d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005d1c:	f04f 0801 	mov.w	r8, #1
 8005d20:	e78f      	b.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = HAL_TIMEOUT;
 8005d22:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d24:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8005d26:	f1b8 0f00 	cmp.w	r8, #0
 8005d2a:	f43f ae83 	beq.w	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d2e:	4936      	ldr	r1, [pc, #216]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005d30:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8005d32:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8005d36:	658a      	str	r2, [r1, #88]	@ 0x58
 8005d38:	e67c      	b.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d3a:	3004      	adds	r0, #4
 8005d3c:	f7ff fd26 	bl	800578c <RCCEx_PLLSAI1_Config>
 8005d40:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005d42:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005d44:	2e00      	cmp	r6, #0
 8005d46:	f47f ae4e 	bne.w	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8005d4a:	e02f      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x404>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d4c:	1d20      	adds	r0, r4, #4
 8005d4e:	f7ff fd1d 	bl	800578c <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d52:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d54:	4607      	mov	r7, r0
      break;
 8005d56:	e65e      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d58:	68ca      	ldr	r2, [r1, #12]
 8005d5a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005d5e:	60ca      	str	r2, [r1, #12]
 8005d60:	e725      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x206>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d62:	68ca      	ldr	r2, [r1, #12]
 8005d64:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005d68:	60ca      	str	r2, [r1, #12]
 8005d6a:	e6fa      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d6c:	68ca      	ldr	r2, [r1, #12]
 8005d6e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005d72:	60ca      	str	r2, [r1, #12]
 8005d74:	e708      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005d76:	2601      	movs	r6, #1
 8005d78:	e635      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8005d7a:	2601      	movs	r6, #1
 8005d7c:	e757      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x286>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005d7e:	2102      	movs	r1, #2
 8005d80:	1d20      	adds	r0, r4, #4
 8005d82:	f7ff fd03 	bl	800578c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d86:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	f43f af23 	beq.w	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005d8e:	4606      	mov	r6, r0
 8005d90:	e720      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d92:	481d      	ldr	r0, [pc, #116]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005d94:	68c2      	ldr	r2, [r0, #12]
 8005d96:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005d9a:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 8005d9c:	e73a      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d9e:	491a      	ldr	r1, [pc, #104]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8005da0:	68ca      	ldr	r2, [r1, #12]
 8005da2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005da6:	60ca      	str	r2, [r1, #12]
    switch(PeriphClkInit->Sai1ClockSelection)
 8005da8:	4637      	mov	r7, r6
 8005daa:	e7a9      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x358>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005dac:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8005dae:	e731      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005db0:	2102      	movs	r1, #2
 8005db2:	f104 0020 	add.w	r0, r4, #32
 8005db6:	f7ff fd77 	bl	80058a8 <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005dba:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	f43f af09 	beq.w	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005dc2:	4606      	mov	r6, r0
 8005dc4:	e706      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	1d20      	adds	r0, r4, #4
 8005dca:	f7ff fcdf 	bl	800578c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005dce:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	f43f aec6 	beq.w	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005dd6:	4606      	mov	r6, r0
 8005dd8:	e6c3      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005dda:	2101      	movs	r1, #1
 8005ddc:	1d20      	adds	r0, r4, #4
 8005dde:	f7ff fcd5 	bl	800578c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005de2:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005de4:	2800      	cmp	r0, #0
 8005de6:	f43f aecf 	beq.w	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005dea:	4606      	mov	r6, r0
 8005dec:	e6cc      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005dee:	2101      	movs	r1, #1
 8005df0:	1d20      	adds	r0, r4, #4
 8005df2:	f7ff fccb 	bl	800578c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005df6:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	f43f aed8 	beq.w	8005bae <HAL_RCCEx_PeriphCLKConfig+0x206>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005dfe:	4606      	mov	r6, r0
 8005e00:	e6d5      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005e02:	463e      	mov	r6, r7
 8005e04:	e78e      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8005e06:	bf00      	nop
 8005e08:	40021000 	.word	0x40021000

08005e0c <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e10:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005e12:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005e14:	460e      	mov	r6, r1
 8005e16:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8005e18:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005e1c:	4605      	mov	r5, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005e1e:	f7fd fef5 	bl	8003c0c <HAL_GetTick>
 8005e22:	4437      	add	r7, r6
 8005e24:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8005e26:	f7fd fef1 	bl	8003c0c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005e2a:	4b32      	ldr	r3, [pc, #200]	@ (8005ef4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe8>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005e2c:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005e34:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005e38:	0d1b      	lsrs	r3, r3, #20
 8005e3a:	fb07 f303 	mul.w	r3, r7, r3
 8005e3e:	3601      	adds	r6, #1
 8005e40:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8005e42:	d111      	bne.n	8005e68 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5c>
 8005e44:	68a3      	ldr	r3, [r4, #8]
 8005e46:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8005e4a:	d009      	beq.n	8005e60 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005e4c:	7b23      	ldrb	r3, [r4, #12]
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005e54:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8005e58:	68a3      	ldr	r3, [r4, #8]
 8005e5a:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8005e5e:	d1f5      	bne.n	8005e4c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 8005e60:	2000      	movs	r0, #0
}
 8005e62:	b002      	add	sp, #8
 8005e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e68:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005e6a:	4623      	mov	r3, r4
 8005e6c:	e013      	b.n	8005e96 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
      tmpreg8 = *ptmpreg8;
 8005e6e:	7b23      	ldrb	r3, [r4, #12]
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8005e76:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e7a:	f7fd fec7 	bl	8003c0c <HAL_GetTick>
 8005e7e:	eba0 0008 	sub.w	r0, r0, r8
 8005e82:	42b8      	cmp	r0, r7
 8005e84:	d20c      	bcs.n	8005ea0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x94>
      if (count == 0U)
 8005e86:	9a01      	ldr	r2, [sp, #4]
      count--;
 8005e88:	9b01      	ldr	r3, [sp, #4]
 8005e8a:	3b01      	subs	r3, #1
        tmp_timeout = 0U;
 8005e8c:	2a00      	cmp	r2, #0
      count--;
 8005e8e:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e90:	682b      	ldr	r3, [r5, #0]
        tmp_timeout = 0U;
 8005e92:	bf08      	it	eq
 8005e94:	2700      	moveq	r7, #0
  while ((hspi->Instance->SR & Fifo) != State)
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8005e9c:	d1e7      	bne.n	8005e6e <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
 8005e9e:	e7df      	b.n	8005e60 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ea0:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ea4:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ea6:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005eaa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005eae:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eb0:	d013      	beq.n	8005eda <SPI_WaitFifoStateUntilTimeout.constprop.0+0xce>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005eb2:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8005eb4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005eb8:	d107      	bne.n	8005eca <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          SPI_RESET_CRC(hspi);
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ec8:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005eca:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8005ecc:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8005ece:	f885 205d 	strb.w	r2, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005ed2:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005ed6:	2003      	movs	r0, #3
 8005ed8:	e7c3      	b.n	8005e62 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x56>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eda:	68aa      	ldr	r2, [r5, #8]
 8005edc:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005ee0:	d002      	beq.n	8005ee8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ee2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005ee6:	d1e4      	bne.n	8005eb2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
          __HAL_SPI_DISABLE(hspi);
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	e7df      	b.n	8005eb2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
 8005ef2:	bf00      	nop
 8005ef4:	20002f78 	.word	0x20002f78

08005ef8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efc:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 8005efe:	2300      	movs	r3, #0
{
 8005f00:	460e      	mov	r6, r1
  __IO uint8_t  tmpreg8 = 0;
 8005f02:	f88d 3007 	strb.w	r3, [sp, #7]
 8005f06:	eb01 0902 	add.w	r9, r1, r2
{
 8005f0a:	4617      	mov	r7, r2
 8005f0c:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f0e:	f7fd fe7d 	bl	8003c0c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f12:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8006038 <SPI_EndRxTxTransaction+0x140>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f16:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 8005f1a:	f7fd fe77 	bl	8003c0c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f1e:	f8d8 3000 	ldr.w	r3, [r8]
  while ((hspi->Instance->SR & Fifo) != State)
 8005f22:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f24:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005f28:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005f2c:	0d1b      	lsrs	r3, r3, #20
 8005f2e:	fb0a f303 	mul.w	r3, sl, r3
 8005f32:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8005f34:	1c73      	adds	r3, r6, #1
 8005f36:	bf18      	it	ne
 8005f38:	4683      	movne	fp, r0
 8005f3a:	d130      	bne.n	8005f9e <SPI_EndRxTxTransaction+0xa6>
 8005f3c:	68a3      	ldr	r3, [r4, #8]
 8005f3e:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 8005f42:	d1fb      	bne.n	8005f3c <SPI_EndRxTxTransaction+0x44>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f44:	f7fd fe62 	bl	8003c0c <HAL_GetTick>
 8005f48:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 8005f4c:	f7fd fe5e 	bl	8003c0c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f50:	f8d8 3000 	ldr.w	r3, [r8]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f54:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f56:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005f5a:	fb09 f303 	mul.w	r3, r9, r3
 8005f5e:	1c71      	adds	r1, r6, #1
  tmp_tickstart = HAL_GetTick();
 8005f60:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f62:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f64:	d130      	bne.n	8005fc8 <SPI_EndRxTxTransaction+0xd0>
 8005f66:	68a3      	ldr	r3, [r4, #8]
 8005f68:	061a      	lsls	r2, r3, #24
 8005f6a:	d4fc      	bmi.n	8005f66 <SPI_EndRxTxTransaction+0x6e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f6c:	463a      	mov	r2, r7
 8005f6e:	4631      	mov	r1, r6
 8005f70:	4628      	mov	r0, r5
 8005f72:	f7ff ff4b 	bl	8005e0c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8005f76:	bb58      	cbnz	r0, 8005fd0 <SPI_EndRxTxTransaction+0xd8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8005f78:	b005      	add	sp, #20
 8005f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f7e:	f7fd fe45 	bl	8003c0c <HAL_GetTick>
 8005f82:	eba0 000b 	sub.w	r0, r0, fp
 8005f86:	4582      	cmp	sl, r0
 8005f88:	d92a      	bls.n	8005fe0 <SPI_EndRxTxTransaction+0xe8>
      if (count == 0U)
 8005f8a:	9a02      	ldr	r2, [sp, #8]
      count--;
 8005f8c:	9b02      	ldr	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8005f8e:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 8005f90:	2a00      	cmp	r2, #0
      count--;
 8005f92:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8005f96:	bf08      	it	eq
 8005f98:	f04f 0a00 	moveq.w	sl, #0
      count--;
 8005f9c:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8005f9e:	68a3      	ldr	r3, [r4, #8]
 8005fa0:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 8005fa4:	d1eb      	bne.n	8005f7e <SPI_EndRxTxTransaction+0x86>
 8005fa6:	e7cd      	b.n	8005f44 <SPI_EndRxTxTransaction+0x4c>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fa8:	f7fd fe30 	bl	8003c0c <HAL_GetTick>
 8005fac:	eba0 0008 	sub.w	r0, r0, r8
 8005fb0:	4581      	cmp	r9, r0
 8005fb2:	d915      	bls.n	8005fe0 <SPI_EndRxTxTransaction+0xe8>
      if (count == 0U)
 8005fb4:	9a03      	ldr	r2, [sp, #12]
      count--;
 8005fb6:	9b03      	ldr	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fb8:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 8005fba:	2a00      	cmp	r2, #0
      count--;
 8005fbc:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8005fc0:	bf08      	it	eq
 8005fc2:	f04f 0900 	moveq.w	r9, #0
      count--;
 8005fc6:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fc8:	68a3      	ldr	r3, [r4, #8]
 8005fca:	061b      	lsls	r3, r3, #24
 8005fcc:	d4ec      	bmi.n	8005fa8 <SPI_EndRxTxTransaction+0xb0>
 8005fce:	e7cd      	b.n	8005f6c <SPI_EndRxTxTransaction+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fd0:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8005fd2:	f043 0320 	orr.w	r3, r3, #32
 8005fd6:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005fd8:	2003      	movs	r0, #3
}
 8005fda:	b005      	add	sp, #20
 8005fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fe0:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fe4:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fe6:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fea:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005fee:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ff0:	d016      	beq.n	8006020 <SPI_EndRxTxTransaction+0x128>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ff2:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8005ff4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005ff8:	d107      	bne.n	800600a <SPI_EndRxTxTransaction+0x112>
          SPI_RESET_CRC(hspi);
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006008:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800600a:	2301      	movs	r3, #1
 800600c:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006010:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 8006012:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006014:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 8006018:	f885 205c 	strb.w	r2, [r5, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800601c:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 800601e:	e7db      	b.n	8005fd8 <SPI_EndRxTxTransaction+0xe0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006020:	68aa      	ldr	r2, [r5, #8]
 8006022:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8006026:	d002      	beq.n	800602e <SPI_EndRxTxTransaction+0x136>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006028:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800602c:	d1e1      	bne.n	8005ff2 <SPI_EndRxTxTransaction+0xfa>
          __HAL_SPI_DISABLE(hspi);
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	e7dc      	b.n	8005ff2 <SPI_EndRxTxTransaction+0xfa>
 8006038:	20002f78 	.word	0x20002f78

0800603c <HAL_SPI_Init>:
  if (hspi == NULL)
 800603c:	2800      	cmp	r0, #0
 800603e:	d074      	beq.n	800612a <HAL_SPI_Init+0xee>
{
 8006040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006044:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006046:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8006048:	2800      	cmp	r0, #0
 800604a:	d053      	beq.n	80060f4 <HAL_SPI_Init+0xb8>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800604c:	2300      	movs	r3, #0
 800604e:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006052:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006056:	2200      	movs	r2, #0
 8006058:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800605a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800605e:	2b00      	cmp	r3, #0
 8006060:	d057      	beq.n	8006112 <HAL_SPI_Init+0xd6>
  __HAL_SPI_DISABLE(hspi);
 8006062:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006064:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006066:	2302      	movs	r3, #2
 8006068:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 800606c:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800606e:	f5b7 6fe0 	cmp.w	r7, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 8006072:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006076:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006078:	d842      	bhi.n	8006100 <HAL_SPI_Init+0xc4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800607a:	d151      	bne.n	8006120 <HAL_SPI_Init+0xe4>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800607c:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800607e:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006082:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 8006086:	6862      	ldr	r2, [r4, #4]
 8006088:	68a3      	ldr	r3, [r4, #8]
 800608a:	69a6      	ldr	r6, [r4, #24]
 800608c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006090:	f402 7282 	and.w	r2, r2, #260	@ 0x104
 8006094:	431a      	orrs	r2, r3
 8006096:	6923      	ldr	r3, [r4, #16]
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	4313      	orrs	r3, r2
 800609e:	6962      	ldr	r2, [r4, #20]
 80060a0:	f002 0201 	and.w	r2, r2, #1
 80060a4:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80060a8:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
 80060ac:	f003 0308 	and.w	r3, r3, #8
 80060b0:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060b4:	69e3      	ldr	r3, [r4, #28]
 80060b6:	f003 0838 	and.w	r8, r3, #56	@ 0x38
 80060ba:	6a23      	ldr	r3, [r4, #32]
 80060bc:	f003 0780 	and.w	r7, r3, #128	@ 0x80
 80060c0:	f406 7300 	and.w	r3, r6, #512	@ 0x200
 80060c4:	4313      	orrs	r3, r2
 80060c6:	ea43 0308 	orr.w	r3, r3, r8
 80060ca:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060cc:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060ce:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060d0:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060d4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060d6:	f000 0010 	and.w	r0, r0, #16
 80060da:	ea4e 0306 	orr.w	r3, lr, r6
 80060de:	4303      	orrs	r3, r0
 80060e0:	ea43 030c 	orr.w	r3, r3, ip
 80060e4:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060e6:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80060e8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060ea:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80060ec:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 80060f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060f4:	6863      	ldr	r3, [r4, #4]
 80060f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060fa:	d0aa      	beq.n	8006052 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060fc:	61e0      	str	r0, [r4, #28]
 80060fe:	e7a8      	b.n	8006052 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006100:	f5b7 6f70 	cmp.w	r7, #3840	@ 0xf00
 8006104:	d113      	bne.n	800612e <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006106:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006108:	f04f 0c00 	mov.w	ip, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800610c:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 8006110:	e7b9      	b.n	8006086 <HAL_SPI_Init+0x4a>
    HAL_SPI_MspInit(hspi);
 8006112:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8006114:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8006118:	f7fd fbe2 	bl	80038e0 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800611c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800611e:	e7a0      	b.n	8006062 <HAL_SPI_Init+0x26>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006120:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006124:	2500      	movs	r5, #0
 8006126:	62a5      	str	r5, [r4, #40]	@ 0x28
 8006128:	e7ad      	b.n	8006086 <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 800612a:	2001      	movs	r0, #1
}
 800612c:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800612e:	f04f 0c00 	mov.w	ip, #0
 8006132:	e7f7      	b.n	8006124 <HAL_SPI_Init+0xe8>

08006134 <HAL_SPI_TransmitReceive>:
{
 8006134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006138:	4604      	mov	r4, r0
 800613a:	4691      	mov	r9, r2
 800613c:	461f      	mov	r7, r3
 800613e:	9e08      	ldr	r6, [sp, #32]
 8006140:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 8006142:	f7fd fd63 	bl	8003c0c <HAL_GetTick>
  tmp_state           = hspi->State;
 8006146:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 800614a:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800614c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800614e:	4605      	mov	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006150:	d00b      	beq.n	800616a <HAL_SPI_TransmitReceive+0x36>
 8006152:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8006156:	f040 808d 	bne.w	8006274 <HAL_SPI_TransmitReceive+0x140>
 800615a:	b2d9      	uxtb	r1, r3
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800615c:	68a3      	ldr	r3, [r4, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	f040 8088 	bne.w	8006274 <HAL_SPI_TransmitReceive+0x140>
 8006164:	2904      	cmp	r1, #4
 8006166:	f040 8085 	bne.w	8006274 <HAL_SPI_TransmitReceive+0x140>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800616a:	f1b8 0f00 	cmp.w	r8, #0
 800616e:	f000 8146 	beq.w	80063fe <HAL_SPI_TransmitReceive+0x2ca>
 8006172:	f1b9 0f00 	cmp.w	r9, #0
 8006176:	f000 8142 	beq.w	80063fe <HAL_SPI_TransmitReceive+0x2ca>
 800617a:	2f00      	cmp	r7, #0
 800617c:	f000 813f 	beq.w	80063fe <HAL_SPI_TransmitReceive+0x2ca>
  __HAL_LOCK(hspi);
 8006180:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8006184:	2b01      	cmp	r3, #1
 8006186:	d075      	beq.n	8006274 <HAL_SPI_TransmitReceive+0x140>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006188:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800618c:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  __HAL_LOCK(hspi);
 8006190:	2101      	movs	r1, #1
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006192:	2b04      	cmp	r3, #4
  __HAL_LOCK(hspi);
 8006194:	f884 105c 	strb.w	r1, [r4, #92]	@ 0x5c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006198:	68e1      	ldr	r1, [r4, #12]
  hspi->RxXferSize  = Size;
 800619a:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800619e:	bf1c      	itt	ne
 80061a0:	2305      	movne	r3, #5
 80061a2:	f884 305d 	strbne.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061a6:	2300      	movs	r3, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80061a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061ac:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 80061ae:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->RxXferCount = Size;
 80061b2:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061b6:	6823      	ldr	r3, [r4, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80061b8:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80061bc:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80061be:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80061c0:	d95b      	bls.n	800627a <HAL_SPI_TransmitReceive+0x146>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061c2:	6859      	ldr	r1, [r3, #4]
 80061c4:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 80061c8:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061ca:	6819      	ldr	r1, [r3, #0]
 80061cc:	0648      	lsls	r0, r1, #25
 80061ce:	d403      	bmi.n	80061d8 <HAL_SPI_TransmitReceive+0xa4>
    __HAL_SPI_ENABLE(hspi);
 80061d0:	6819      	ldr	r1, [r3, #0]
 80061d2:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 80061d6:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061d8:	2a00      	cmp	r2, #0
 80061da:	f000 80dc 	beq.w	8006396 <HAL_SPI_TransmitReceive+0x262>
 80061de:	2f01      	cmp	r7, #1
 80061e0:	f000 80d9 	beq.w	8006396 <HAL_SPI_TransmitReceive+0x262>
 80061e4:	1c73      	adds	r3, r6, #1
        txallowed = 1U;
 80061e6:	f04f 0701 	mov.w	r7, #1
 80061ea:	d028      	beq.n	800623e <HAL_SPI_TransmitReceive+0x10a>
 80061ec:	e0bc      	b.n	8006368 <HAL_SPI_TransmitReceive+0x234>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80061ee:	6822      	ldr	r2, [r4, #0]
 80061f0:	6893      	ldr	r3, [r2, #8]
 80061f2:	0798      	lsls	r0, r3, #30
 80061f4:	d50d      	bpl.n	8006212 <HAL_SPI_TransmitReceive+0xde>
 80061f6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	b153      	cbz	r3, 8006212 <HAL_SPI_TransmitReceive+0xde>
 80061fc:	b147      	cbz	r7, 8006210 <HAL_SPI_TransmitReceive+0xdc>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061fe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8006200:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006204:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006206:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006208:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800620a:	3b01      	subs	r3, #1
 800620c:	b29b      	uxth	r3, r3
 800620e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8006210:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006212:	6893      	ldr	r3, [r2, #8]
 8006214:	f013 0301 	ands.w	r3, r3, #1
 8006218:	d00f      	beq.n	800623a <HAL_SPI_TransmitReceive+0x106>
 800621a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 800621e:	b289      	uxth	r1, r1
 8006220:	b159      	cbz	r1, 800623a <HAL_SPI_TransmitReceive+0x106>
        txallowed = 1U;
 8006222:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006224:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006226:	68d2      	ldr	r2, [r2, #12]
 8006228:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800622c:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800622e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006232:	3b01      	subs	r3, #1
 8006234:	b29b      	uxth	r3, r3
 8006236:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800623a:	f7fd fce7 	bl	8003c0c <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800623e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006240:	b29b      	uxth	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1d3      	bne.n	80061ee <HAL_SPI_TransmitReceive+0xba>
 8006246:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800624a:	b29b      	uxth	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1ce      	bne.n	80061ee <HAL_SPI_TransmitReceive+0xba>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006250:	462a      	mov	r2, r5
 8006252:	4631      	mov	r1, r6
 8006254:	4620      	mov	r0, r4
 8006256:	f7ff fe4f 	bl	8005ef8 <SPI_EndRxTxTransaction>
 800625a:	2800      	cmp	r0, #0
 800625c:	f040 80ca 	bne.w	80063f4 <HAL_SPI_TransmitReceive+0x2c0>
  hspi->State = HAL_SPI_STATE_READY;
 8006260:	2301      	movs	r3, #1
 8006262:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006266:	6e23      	ldr	r3, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 8006268:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800626c:	1e18      	subs	r0, r3, #0
 800626e:	bf18      	it	ne
 8006270:	2001      	movne	r0, #1
 8006272:	e000      	b.n	8006276 <HAL_SPI_TransmitReceive+0x142>
    return HAL_BUSY;
 8006274:	2002      	movs	r0, #2
}
 8006276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800627a:	2f01      	cmp	r7, #1
 800627c:	f000 80d9 	beq.w	8006432 <HAL_SPI_TransmitReceive+0x2fe>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006280:	6859      	ldr	r1, [r3, #4]
 8006282:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8006286:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006288:	6819      	ldr	r1, [r3, #0]
 800628a:	0649      	lsls	r1, r1, #25
 800628c:	d403      	bmi.n	8006296 <HAL_SPI_TransmitReceive+0x162>
    __HAL_SPI_ENABLE(hspi);
 800628e:	6819      	ldr	r1, [r3, #0]
 8006290:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8006294:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006296:	b96a      	cbnz	r2, 80062b4 <HAL_SPI_TransmitReceive+0x180>
      if (hspi->TxXferCount > 1U)
 8006298:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800629a:	b292      	uxth	r2, r2
 800629c:	2a01      	cmp	r2, #1
 800629e:	f240 80b0 	bls.w	8006402 <HAL_SPI_TransmitReceive+0x2ce>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80062a2:	4642      	mov	r2, r8
 80062a4:	f832 1b02 	ldrh.w	r1, [r2], #2
 80062a8:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount -= 2U;
 80062aa:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80062ac:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80062ae:	3b02      	subs	r3, #2
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80062b4:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80062b6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	b923      	cbnz	r3, 80062c6 <HAL_SPI_TransmitReceive+0x192>
 80062bc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d0c4      	beq.n	8006250 <HAL_SPI_TransmitReceive+0x11c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80062c6:	6822      	ldr	r2, [r4, #0]
 80062c8:	6893      	ldr	r3, [r2, #8]
 80062ca:	0799      	lsls	r1, r3, #30
 80062cc:	d505      	bpl.n	80062da <HAL_SPI_TransmitReceive+0x1a6>
 80062ce:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	b113      	cbz	r3, 80062da <HAL_SPI_TransmitReceive+0x1a6>
 80062d4:	2f00      	cmp	r7, #0
 80062d6:	d174      	bne.n	80063c2 <HAL_SPI_TransmitReceive+0x28e>
        txallowed = 0U;
 80062d8:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062da:	6893      	ldr	r3, [r2, #8]
 80062dc:	f013 0301 	ands.w	r3, r3, #1
 80062e0:	d019      	beq.n	8006316 <HAL_SPI_TransmitReceive+0x1e2>
 80062e2:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 80062e6:	b289      	uxth	r1, r1
 80062e8:	b1a9      	cbz	r1, 8006316 <HAL_SPI_TransmitReceive+0x1e2>
        if (hspi->RxXferCount > 1U)
 80062ea:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062ee:	6c21      	ldr	r1, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 80062f0:	b280      	uxth	r0, r0
 80062f2:	2801      	cmp	r0, #1
 80062f4:	d959      	bls.n	80063aa <HAL_SPI_TransmitReceive+0x276>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062f6:	68d0      	ldr	r0, [r2, #12]
 80062f8:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80062fc:	6421      	str	r1, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80062fe:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8006302:	3902      	subs	r1, #2
 8006304:	b289      	uxth	r1, r1
 8006306:	f8a4 1046 	strh.w	r1, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800630a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 800630e:	b289      	uxth	r1, r1
 8006310:	2901      	cmp	r1, #1
 8006312:	d93b      	bls.n	800638c <HAL_SPI_TransmitReceive+0x258>
        txallowed = 1U;
 8006314:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006316:	f7fd fc79 	bl	8003c0c <HAL_GetTick>
 800631a:	1b40      	subs	r0, r0, r5
 800631c:	42b0      	cmp	r0, r6
 800631e:	d3ca      	bcc.n	80062b6 <HAL_SPI_TransmitReceive+0x182>
 8006320:	1c73      	adds	r3, r6, #1
 8006322:	d0c8      	beq.n	80062b6 <HAL_SPI_TransmitReceive+0x182>
        hspi->State = HAL_SPI_STATE_READY;
 8006324:	2301      	movs	r3, #1
 8006326:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800632a:	2300      	movs	r3, #0
 800632c:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006330:	2003      	movs	r0, #3
}
 8006332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006336:	b147      	cbz	r7, 800634a <HAL_SPI_TransmitReceive+0x216>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006338:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800633a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800633e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006340:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006342:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006344:	3b01      	subs	r3, #1
 8006346:	b29b      	uxth	r3, r3
 8006348:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 800634a:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800634c:	6893      	ldr	r3, [r2, #8]
 800634e:	f013 0301 	ands.w	r3, r3, #1
 8006352:	d004      	beq.n	800635e <HAL_SPI_TransmitReceive+0x22a>
 8006354:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8006358:	b289      	uxth	r1, r1
 800635a:	2900      	cmp	r1, #0
 800635c:	d15c      	bne.n	8006418 <HAL_SPI_TransmitReceive+0x2e4>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800635e:	f7fd fc55 	bl	8003c0c <HAL_GetTick>
 8006362:	1b40      	subs	r0, r0, r5
 8006364:	42b0      	cmp	r0, r6
 8006366:	d2dd      	bcs.n	8006324 <HAL_SPI_TransmitReceive+0x1f0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006368:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800636a:	b29b      	uxth	r3, r3
 800636c:	b92b      	cbnz	r3, 800637a <HAL_SPI_TransmitReceive+0x246>
 800636e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006372:	b29b      	uxth	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	f43f af6b 	beq.w	8006250 <HAL_SPI_TransmitReceive+0x11c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800637a:	6822      	ldr	r2, [r4, #0]
 800637c:	6893      	ldr	r3, [r2, #8]
 800637e:	0799      	lsls	r1, r3, #30
 8006380:	d5e4      	bpl.n	800634c <HAL_SPI_TransmitReceive+0x218>
 8006382:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006384:	b29b      	uxth	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d0e0      	beq.n	800634c <HAL_SPI_TransmitReceive+0x218>
 800638a:	e7d4      	b.n	8006336 <HAL_SPI_TransmitReceive+0x202>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800638c:	6851      	ldr	r1, [r2, #4]
 800638e:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 8006392:	6051      	str	r1, [r2, #4]
 8006394:	e7be      	b.n	8006314 <HAL_SPI_TransmitReceive+0x1e0>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006396:	4642      	mov	r2, r8
 8006398:	f832 1b02 	ldrh.w	r1, [r2], #2
 800639c:	60d9      	str	r1, [r3, #12]
      hspi->TxXferCount--;
 800639e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063a0:	63a2      	str	r2, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80063a2:	3b01      	subs	r3, #1
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80063a8:	e71c      	b.n	80061e4 <HAL_SPI_TransmitReceive+0xb0>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80063aa:	7b12      	ldrb	r2, [r2, #12]
 80063ac:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 80063ae:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80063b0:	3201      	adds	r2, #1
 80063b2:	6422      	str	r2, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 80063b4:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 80063b8:	3a01      	subs	r2, #1
 80063ba:	b292      	uxth	r2, r2
 80063bc:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 80063c0:	e7a8      	b.n	8006314 <HAL_SPI_TransmitReceive+0x1e0>
        if (hspi->TxXferCount > 1U)
 80063c2:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063c4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 80063c6:	b289      	uxth	r1, r1
 80063c8:	2901      	cmp	r1, #1
 80063ca:	d908      	bls.n	80063de <HAL_SPI_TransmitReceive+0x2aa>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80063cc:	f833 1b02 	ldrh.w	r1, [r3], #2
 80063d0:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80063d2:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80063d4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80063d6:	3b02      	subs	r3, #2
 80063d8:	b29b      	uxth	r3, r3
 80063da:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80063dc:	e77c      	b.n	80062d8 <HAL_SPI_TransmitReceive+0x1a4>
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 80063e2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 80063e4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 80063e6:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 80063e8:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 80063ea:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 80063ec:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 80063ee:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80063f0:	6822      	ldr	r2, [r4, #0]
 80063f2:	e771      	b.n	80062d8 <HAL_SPI_TransmitReceive+0x1a4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063f4:	2220      	movs	r2, #32
    __HAL_UNLOCK(hspi);
 80063f6:	2300      	movs	r3, #0
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063f8:	6622      	str	r2, [r4, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80063fa:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 80063fe:	2001      	movs	r0, #1
 8006400:	e739      	b.n	8006276 <HAL_SPI_TransmitReceive+0x142>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006402:	f898 2000 	ldrb.w	r2, [r8]
 8006406:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8006408:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr++;
 800640a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800640c:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 800640e:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8006410:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8006412:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8006414:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8006416:	e74d      	b.n	80062b4 <HAL_SPI_TransmitReceive+0x180>
        txallowed = 1U;
 8006418:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800641a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800641c:	68d2      	ldr	r2, [r2, #12]
 800641e:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006422:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8006424:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006428:	3b01      	subs	r3, #1
 800642a:	b29b      	uxth	r3, r3
 800642c:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8006430:	e795      	b.n	800635e <HAL_SPI_TransmitReceive+0x22a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006438:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	0650      	lsls	r0, r2, #25
 800643e:	f53f af2b 	bmi.w	8006298 <HAL_SPI_TransmitReceive+0x164>
    __HAL_SPI_ENABLE(hspi);
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006448:	601a      	str	r2, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800644a:	e725      	b.n	8006298 <HAL_SPI_TransmitReceive+0x164>

0800644c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800644c:	2800      	cmp	r0, #0
 800644e:	f000 808c 	beq.w	800656a <HAL_TIM_Base_Init+0x11e>
{
 8006452:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006454:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006458:	4604      	mov	r4, r0
 800645a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800645e:	2b00      	cmp	r3, #0
 8006460:	d078      	beq.n	8006554 <HAL_TIM_Base_Init+0x108>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006462:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006464:	4942      	ldr	r1, [pc, #264]	@ (8006570 <HAL_TIM_Base_Init+0x124>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006466:	2202      	movs	r2, #2
 8006468:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800646c:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 800646e:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006470:	d05c      	beq.n	800652c <HAL_TIM_Base_Init+0xe0>
 8006472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006476:	d024      	beq.n	80064c2 <HAL_TIM_Base_Init+0x76>
 8006478:	f5a1 3194 	sub.w	r1, r1, #75776	@ 0x12800
 800647c:	428b      	cmp	r3, r1
 800647e:	d020      	beq.n	80064c2 <HAL_TIM_Base_Init+0x76>
 8006480:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006484:	428b      	cmp	r3, r1
 8006486:	d01c      	beq.n	80064c2 <HAL_TIM_Base_Init+0x76>
 8006488:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800648c:	428b      	cmp	r3, r1
 800648e:	d018      	beq.n	80064c2 <HAL_TIM_Base_Init+0x76>
 8006490:	f501 3194 	add.w	r1, r1, #75776	@ 0x12800
 8006494:	428b      	cmp	r3, r1
 8006496:	d049      	beq.n	800652c <HAL_TIM_Base_Init+0xe0>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006498:	f501 6140 	add.w	r1, r1, #3072	@ 0xc00
 800649c:	428b      	cmp	r3, r1
 800649e:	d05e      	beq.n	800655e <HAL_TIM_Base_Init+0x112>
 80064a0:	4934      	ldr	r1, [pc, #208]	@ (8006574 <HAL_TIM_Base_Init+0x128>)
 80064a2:	428b      	cmp	r3, r1
 80064a4:	d05b      	beq.n	800655e <HAL_TIM_Base_Init+0x112>
 80064a6:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80064aa:	428b      	cmp	r3, r1
 80064ac:	d057      	beq.n	800655e <HAL_TIM_Base_Init+0x112>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064ae:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064b0:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064b2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80064b8:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80064ba:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064bc:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80064be:	6299      	str	r1, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064c0:	e010      	b.n	80064e4 <HAL_TIM_Base_Init+0x98>
    tmpcr1 |= Structure->CounterMode;
 80064c2:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064c4:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064c6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80064ca:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80064cc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064d0:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064d2:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064d8:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064da:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 80064dc:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80064de:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064e0:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80064e2:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064e4:	2201      	movs	r2, #1
 80064e6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064e8:	691a      	ldr	r2, [r3, #16]
 80064ea:	07d2      	lsls	r2, r2, #31
 80064ec:	d503      	bpl.n	80064f6 <HAL_TIM_Base_Init+0xaa>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	f022 0201 	bic.w	r2, r2, #1
 80064f4:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064f6:	2301      	movs	r3, #1
 80064f8:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064fc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006500:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006504:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006508:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800650c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006510:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006514:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006518:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800651c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8006520:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006524:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8006528:	2000      	movs	r0, #0
}
 800652a:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800652c:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800652e:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006530:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006534:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8006536:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800653a:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800653c:	69a1      	ldr	r1, [r4, #24]
 800653e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006542:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8006544:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006546:	68e2      	ldr	r2, [r4, #12]
 8006548:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800654a:	6862      	ldr	r2, [r4, #4]
 800654c:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800654e:	6962      	ldr	r2, [r4, #20]
 8006550:	631a      	str	r2, [r3, #48]	@ 0x30
 8006552:	e7c7      	b.n	80064e4 <HAL_TIM_Base_Init+0x98>
    htim->Lock = HAL_UNLOCKED;
 8006554:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006558:	f7fd fac8 	bl	8003aec <HAL_TIM_Base_MspInit>
 800655c:	e781      	b.n	8006462 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800655e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006560:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006562:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006566:	4302      	orrs	r2, r0
 8006568:	e7e9      	b.n	800653e <HAL_TIM_Base_Init+0xf2>
    return HAL_ERROR;
 800656a:	2001      	movs	r0, #1
}
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	40012c00 	.word	0x40012c00
 8006574:	40014400 	.word	0x40014400

08006578 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8006578:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800657c:	2b01      	cmp	r3, #1
 800657e:	d123      	bne.n	80065c8 <HAL_TIM_Base_Start+0x50>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006580:	6803      	ldr	r3, [r0, #0]
 8006582:	4a17      	ldr	r2, [pc, #92]	@ (80065e0 <HAL_TIM_Base_Start+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006584:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006586:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8006588:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800658c:	d01e      	beq.n	80065cc <HAL_TIM_Base_Start+0x54>
 800658e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006592:	d01b      	beq.n	80065cc <HAL_TIM_Base_Start+0x54>
 8006594:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8006598:	4293      	cmp	r3, r2
 800659a:	d017      	beq.n	80065cc <HAL_TIM_Base_Start+0x54>
 800659c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d013      	beq.n	80065cc <HAL_TIM_Base_Start+0x54>
 80065a4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d00f      	beq.n	80065cc <HAL_TIM_Base_Start+0x54>
 80065ac:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d00b      	beq.n	80065cc <HAL_TIM_Base_Start+0x54>
 80065b4:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d007      	beq.n	80065cc <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	f042 0201 	orr.w	r2, r2, #1
 80065c2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80065c4:	2000      	movs	r0, #0
 80065c6:	4770      	bx	lr
    return HAL_ERROR;
 80065c8:	2001      	movs	r0, #1
}
 80065ca:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065cc:	6899      	ldr	r1, [r3, #8]
 80065ce:	4a05      	ldr	r2, [pc, #20]	@ (80065e4 <HAL_TIM_Base_Start+0x6c>)
 80065d0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d2:	2a06      	cmp	r2, #6
 80065d4:	d0f6      	beq.n	80065c4 <HAL_TIM_Base_Start+0x4c>
 80065d6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 80065da:	d1ef      	bne.n	80065bc <HAL_TIM_Base_Start+0x44>
  return HAL_OK;
 80065dc:	2000      	movs	r0, #0
 80065de:	4770      	bx	lr
 80065e0:	40012c00 	.word	0x40012c00
 80065e4:	00010007 	.word	0x00010007

080065e8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80065e8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d06f      	beq.n	80066d0 <HAL_TIM_ConfigClockSource+0xe8>
 80065f0:	4602      	mov	r2, r0
{
 80065f2:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80065f4:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 80065f6:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80065f8:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 80065fc:	2001      	movs	r0, #1
 80065fe:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006602:	68a5      	ldr	r5, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006604:	4b4c      	ldr	r3, [pc, #304]	@ (8006738 <HAL_TIM_ConfigClockSource+0x150>)
 8006606:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8006608:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 800660a:	680b      	ldr	r3, [r1, #0]
 800660c:	2b60      	cmp	r3, #96	@ 0x60
 800660e:	d061      	beq.n	80066d4 <HAL_TIM_ConfigClockSource+0xec>
 8006610:	d824      	bhi.n	800665c <HAL_TIM_ConfigClockSource+0x74>
 8006612:	2b40      	cmp	r3, #64	@ 0x40
 8006614:	d077      	beq.n	8006706 <HAL_TIM_ConfigClockSource+0x11e>
 8006616:	d94a      	bls.n	80066ae <HAL_TIM_ConfigClockSource+0xc6>
 8006618:	2b50      	cmp	r3, #80	@ 0x50
 800661a:	d117      	bne.n	800664c <HAL_TIM_ConfigClockSource+0x64>
                               sClockSourceConfig->ClockPolarity,
 800661c:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800661e:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006620:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006622:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8006626:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006628:	6a23      	ldr	r3, [r4, #32]
 800662a:	f023 0301 	bic.w	r3, r3, #1
 800662e:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006630:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006632:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006636:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800663a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800663c:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800663e:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006644:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006648:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800664a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800664c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800664e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8006650:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006654:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8006658:	bc30      	pop	{r4, r5}
 800665a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800665c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006660:	d0f3      	beq.n	800664a <HAL_TIM_ConfigClockSource+0x62>
 8006662:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006666:	d110      	bne.n	800668a <HAL_TIM_ConfigClockSource+0xa2>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006668:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800666c:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800666e:	432b      	orrs	r3, r5
 8006670:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006672:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006676:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800667a:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800667c:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800667e:	68a3      	ldr	r3, [r4, #8]
 8006680:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006684:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006686:	2000      	movs	r0, #0
 8006688:	e7e0      	b.n	800664c <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 800668a:	2b70      	cmp	r3, #112	@ 0x70
 800668c:	d1de      	bne.n	800664c <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800668e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006692:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006694:	432b      	orrs	r3, r5
 8006696:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006698:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800669c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80066a0:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80066a2:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80066a4:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066a6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80066aa:	60a3      	str	r3, [r4, #8]
      break;
 80066ac:	e7cd      	b.n	800664a <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 80066ae:	2b20      	cmp	r3, #32
 80066b0:	d002      	beq.n	80066b8 <HAL_TIM_ConfigClockSource+0xd0>
 80066b2:	d909      	bls.n	80066c8 <HAL_TIM_ConfigClockSource+0xe0>
 80066b4:	2b30      	cmp	r3, #48	@ 0x30
 80066b6:	d1c9      	bne.n	800664c <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 80066b8:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ba:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066be:	430b      	orrs	r3, r1
 80066c0:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80066c4:	60a3      	str	r3, [r4, #8]
}
 80066c6:	e7c0      	b.n	800664a <HAL_TIM_ConfigClockSource+0x62>
  switch (sClockSourceConfig->ClockSource)
 80066c8:	f033 0110 	bics.w	r1, r3, #16
 80066cc:	d1be      	bne.n	800664c <HAL_TIM_ConfigClockSource+0x64>
 80066ce:	e7f3      	b.n	80066b8 <HAL_TIM_ConfigClockSource+0xd0>
  __HAL_LOCK(htim);
 80066d0:	2002      	movs	r0, #2
}
 80066d2:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 80066d4:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 80066d6:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80066d8:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066da:	6a21      	ldr	r1, [r4, #32]
 80066dc:	f021 0110 	bic.w	r1, r1, #16
 80066e0:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066e2:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066e4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066e8:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 80066ec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066f0:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80066f4:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 80066f6:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80066f8:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80066fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066fe:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8006702:	60a3      	str	r3, [r4, #8]
}
 8006704:	e7a1      	b.n	800664a <HAL_TIM_ConfigClockSource+0x62>
                               sClockSourceConfig->ClockPolarity,
 8006706:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006708:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 800670a:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800670c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8006710:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006712:	6a23      	ldr	r3, [r4, #32]
 8006714:	f023 0301 	bic.w	r3, r3, #1
 8006718:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800671a:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800671c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006720:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006724:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8006726:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8006728:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800672a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800672e:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8006732:	60a3      	str	r3, [r4, #8]
}
 8006734:	e789      	b.n	800664a <HAL_TIM_ConfigClockSource+0x62>
 8006736:	bf00      	nop
 8006738:	fffe0088 	.word	0xfffe0088

0800673c <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop

08006740 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop

08006744 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop

08006748 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop

0800674c <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop

08006750 <HAL_TIM_IRQHandler>:
{
 8006750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 8006752:	6803      	ldr	r3, [r0, #0]
 8006754:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006756:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006758:	07a1      	lsls	r1, r4, #30
{
 800675a:	4605      	mov	r5, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800675c:	d501      	bpl.n	8006762 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800675e:	07b2      	lsls	r2, r6, #30
 8006760:	d457      	bmi.n	8006812 <HAL_TIM_IRQHandler+0xc2>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006762:	0767      	lsls	r7, r4, #29
 8006764:	d501      	bpl.n	800676a <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006766:	0770      	lsls	r0, r6, #29
 8006768:	d440      	bmi.n	80067ec <HAL_TIM_IRQHandler+0x9c>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800676a:	0721      	lsls	r1, r4, #28
 800676c:	d501      	bpl.n	8006772 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800676e:	0732      	lsls	r2, r6, #28
 8006770:	d42a      	bmi.n	80067c8 <HAL_TIM_IRQHandler+0x78>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006772:	06e7      	lsls	r7, r4, #27
 8006774:	d501      	bpl.n	800677a <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006776:	06f0      	lsls	r0, r6, #27
 8006778:	d413      	bmi.n	80067a2 <HAL_TIM_IRQHandler+0x52>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800677a:	07e1      	lsls	r1, r4, #31
 800677c:	d501      	bpl.n	8006782 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800677e:	07f2      	lsls	r2, r6, #31
 8006780:	d465      	bmi.n	800684e <HAL_TIM_IRQHandler+0xfe>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006782:	f414 5f02 	tst.w	r4, #8320	@ 0x2080
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006786:	f404 7780 	and.w	r7, r4, #256	@ 0x100
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800678a:	d052      	beq.n	8006832 <HAL_TIM_IRQHandler+0xe2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800678c:	0633      	lsls	r3, r6, #24
 800678e:	d466      	bmi.n	800685e <HAL_TIM_IRQHandler+0x10e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006790:	0660      	lsls	r0, r4, #25
 8006792:	d501      	bpl.n	8006798 <HAL_TIM_IRQHandler+0x48>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006794:	0671      	lsls	r1, r6, #25
 8006796:	d473      	bmi.n	8006880 <HAL_TIM_IRQHandler+0x130>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006798:	06a2      	lsls	r2, r4, #26
 800679a:	d501      	bpl.n	80067a0 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800679c:	06b3      	lsls	r3, r6, #26
 800679e:	d44d      	bmi.n	800683c <HAL_TIM_IRQHandler+0xec>
}
 80067a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80067a2:	682b      	ldr	r3, [r5, #0]
 80067a4:	f06f 0210 	mvn.w	r2, #16
 80067a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067aa:	2208      	movs	r2, #8
 80067ac:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80067b4:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067b6:	d174      	bne.n	80068a2 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067b8:	f7ff ffc2 	bl	8006740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067bc:	4628      	mov	r0, r5
 80067be:	f7ff ffc3 	bl	8006748 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067c2:	2300      	movs	r3, #0
 80067c4:	772b      	strb	r3, [r5, #28]
 80067c6:	e7d8      	b.n	800677a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80067c8:	682b      	ldr	r3, [r5, #0]
 80067ca:	f06f 0208 	mvn.w	r2, #8
 80067ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067d0:	2204      	movs	r2, #4
 80067d2:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80067d8:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067da:	d15f      	bne.n	800689c <HAL_TIM_IRQHandler+0x14c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067dc:	f7ff ffb0 	bl	8006740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e0:	4628      	mov	r0, r5
 80067e2:	f7ff ffb1 	bl	8006748 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067e6:	2300      	movs	r3, #0
 80067e8:	772b      	strb	r3, [r5, #28]
 80067ea:	e7c2      	b.n	8006772 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80067ec:	682b      	ldr	r3, [r5, #0]
 80067ee:	f06f 0204 	mvn.w	r2, #4
 80067f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067f4:	2202      	movs	r2, #2
 80067f6:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80067fe:	4628      	mov	r0, r5
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006800:	d149      	bne.n	8006896 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006802:	f7ff ff9d 	bl	8006740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006806:	4628      	mov	r0, r5
 8006808:	f7ff ff9e 	bl	8006748 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800680c:	2300      	movs	r3, #0
 800680e:	772b      	strb	r3, [r5, #28]
 8006810:	e7ab      	b.n	800676a <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006812:	f06f 0202 	mvn.w	r2, #2
 8006816:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006818:	2201      	movs	r2, #1
 800681a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	079b      	lsls	r3, r3, #30
 8006820:	d136      	bne.n	8006890 <HAL_TIM_IRQHandler+0x140>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006822:	f7ff ff8d 	bl	8006740 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006826:	4628      	mov	r0, r5
 8006828:	f7ff ff8e 	bl	8006748 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800682c:	2300      	movs	r3, #0
 800682e:	772b      	strb	r3, [r5, #28]
 8006830:	e797      	b.n	8006762 <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006832:	2f00      	cmp	r7, #0
 8006834:	d0ac      	beq.n	8006790 <HAL_TIM_IRQHandler+0x40>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006836:	0637      	lsls	r7, r6, #24
 8006838:	d41a      	bmi.n	8006870 <HAL_TIM_IRQHandler+0x120>
 800683a:	e7a9      	b.n	8006790 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800683c:	682b      	ldr	r3, [r5, #0]
 800683e:	f06f 0220 	mvn.w	r2, #32
 8006842:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006844:	4628      	mov	r0, r5
}
 8006846:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
      HAL_TIMEx_CommutCallback(htim);
 800684a:	f000 b87d 	b.w	8006948 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800684e:	682b      	ldr	r3, [r5, #0]
 8006850:	f06f 0201 	mvn.w	r2, #1
 8006854:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006856:	4628      	mov	r0, r5
 8006858:	f7ff ff70 	bl	800673c <HAL_TIM_PeriodElapsedCallback>
 800685c:	e791      	b.n	8006782 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800685e:	682b      	ldr	r3, [r5, #0]
 8006860:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006864:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006866:	4628      	mov	r0, r5
 8006868:	f000 f870 	bl	800694c <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800686c:	2f00      	cmp	r7, #0
 800686e:	d08f      	beq.n	8006790 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006870:	682b      	ldr	r3, [r5, #0]
 8006872:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006876:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006878:	4628      	mov	r0, r5
 800687a:	f000 f869 	bl	8006950 <HAL_TIMEx_Break2Callback>
 800687e:	e787      	b.n	8006790 <HAL_TIM_IRQHandler+0x40>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006880:	682b      	ldr	r3, [r5, #0]
 8006882:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006886:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006888:	4628      	mov	r0, r5
 800688a:	f7ff ff5f 	bl	800674c <HAL_TIM_TriggerCallback>
 800688e:	e783      	b.n	8006798 <HAL_TIM_IRQHandler+0x48>
          HAL_TIM_IC_CaptureCallback(htim);
 8006890:	f7ff ff58 	bl	8006744 <HAL_TIM_IC_CaptureCallback>
 8006894:	e7ca      	b.n	800682c <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8006896:	f7ff ff55 	bl	8006744 <HAL_TIM_IC_CaptureCallback>
 800689a:	e7b7      	b.n	800680c <HAL_TIM_IRQHandler+0xbc>
        HAL_TIM_IC_CaptureCallback(htim);
 800689c:	f7ff ff52 	bl	8006744 <HAL_TIM_IC_CaptureCallback>
 80068a0:	e7a1      	b.n	80067e6 <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 80068a2:	f7ff ff4f 	bl	8006744 <HAL_TIM_IC_CaptureCallback>
 80068a6:	e78c      	b.n	80067c2 <HAL_TIM_IRQHandler+0x72>

080068a8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068a8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80068ac:	2a01      	cmp	r2, #1
 80068ae:	d044      	beq.n	800693a <HAL_TIMEx_MasterConfigSynchronization+0x92>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068b0:	6802      	ldr	r2, [r0, #0]
{
 80068b2:	b470      	push	{r4, r5, r6}
 80068b4:	4603      	mov	r3, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068b6:	4e22      	ldr	r6, [pc, #136]	@ (8006940 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
  htim->State = HAL_TIM_STATE_BUSY;
 80068b8:	2002      	movs	r0, #2
 80068ba:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068be:	42b2      	cmp	r2, r6
  tmpcr2 = htim->Instance->CR2;
 80068c0:	6850      	ldr	r0, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068c2:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80068c4:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068c6:	d026      	beq.n	8006916 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 80068c8:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 80068cc:	42b2      	cmp	r2, r6
 80068ce:	d02b      	beq.n	8006928 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 80068d0:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068d4:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068d6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 80068da:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068dc:	d00e      	beq.n	80068fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80068de:	4819      	ldr	r0, [pc, #100]	@ (8006944 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80068e0:	4282      	cmp	r2, r0
 80068e2:	d00b      	beq.n	80068fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80068e4:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80068e8:	4282      	cmp	r2, r0
 80068ea:	d007      	beq.n	80068fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80068ec:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80068f0:	4282      	cmp	r2, r0
 80068f2:	d003      	beq.n	80068fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80068f4:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 80068f8:	4282      	cmp	r2, r0
 80068fa:	d104      	bne.n	8006906 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068fc:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068fe:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006902:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006904:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006906:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006908:	2201      	movs	r2, #1
 800690a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800690e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8006912:	bc70      	pop	{r4, r5, r6}
 8006914:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006916:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006918:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800691c:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 800691e:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006922:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8006924:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006926:	e7e9      	b.n	80068fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006928:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800692a:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800692e:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8006930:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006934:	4305      	orrs	r5, r0
  htim->Instance->CR2 = tmpcr2;
 8006936:	6055      	str	r5, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006938:	e7e0      	b.n	80068fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  __HAL_LOCK(htim);
 800693a:	2002      	movs	r0, #2
}
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	40012c00 	.word	0x40012c00
 8006944:	40000400 	.word	0x40000400

08006948 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8006948:	4770      	bx	lr
 800694a:	bf00      	nop

0800694c <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop

08006950 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop

08006954 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006958:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800695a:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 800695c:	2820      	cmp	r0, #32
 800695e:	d14f      	bne.n	8006a00 <HAL_UART_Transmit+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 8006960:	4688      	mov	r8, r1
 8006962:	b109      	cbz	r1, 8006968 <HAL_UART_Transmit+0x14>
 8006964:	4617      	mov	r7, r2
 8006966:	b912      	cbnz	r2, 800696e <HAL_UART_Transmit+0x1a>
    {
      return  HAL_ERROR;
 8006968:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 800696a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800696e:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006970:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006974:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006976:	f8c4 9084 	str.w	r9, [r4, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800697a:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 800697c:	f7fd f946 	bl	8003c0c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006980:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8006982:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006986:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 800698a:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    tickstart = HAL_GetTick();
 800698e:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006990:	d045      	beq.n	8006a1e <HAL_UART_Transmit+0xca>
    while (huart->TxXferCount > 0U)
 8006992:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006996:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 8006998:	b292      	uxth	r2, r2
 800699a:	b1aa      	cbz	r2, 80069c8 <HAL_UART_Transmit+0x74>
 800699c:	1c68      	adds	r0, r5, #1
 800699e:	d124      	bne.n	80069ea <HAL_UART_Transmit+0x96>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069a0:	69da      	ldr	r2, [r3, #28]
 80069a2:	0612      	lsls	r2, r2, #24
 80069a4:	d5fc      	bpl.n	80069a0 <HAL_UART_Transmit+0x4c>
      if (pdata8bits == NULL)
 80069a6:	f1b8 0f00 	cmp.w	r8, #0
 80069aa:	d024      	beq.n	80069f6 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069ac:	f818 2b01 	ldrb.w	r2, [r8], #1
 80069b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 80069b2:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 80069b6:	3a01      	subs	r2, #1
 80069b8:	b292      	uxth	r2, r2
 80069ba:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80069be:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 80069c2:	b292      	uxth	r2, r2
 80069c4:	2a00      	cmp	r2, #0
 80069c6:	d1e9      	bne.n	800699c <HAL_UART_Transmit+0x48>
 80069c8:	1c69      	adds	r1, r5, #1
 80069ca:	d124      	bne.n	8006a16 <HAL_UART_Transmit+0xc2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069cc:	69da      	ldr	r2, [r3, #28]
 80069ce:	0652      	lsls	r2, r2, #25
 80069d0:	d5fc      	bpl.n	80069cc <HAL_UART_Transmit+0x78>
    huart->gState = HAL_UART_STATE_READY;
 80069d2:	2320      	movs	r3, #32
 80069d4:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 80069d6:	2000      	movs	r0, #0
 80069d8:	e7c7      	b.n	800696a <HAL_UART_Transmit+0x16>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069da:	f7fd f917 	bl	8003c0c <HAL_GetTick>
 80069de:	1b80      	subs	r0, r0, r6
 80069e0:	4285      	cmp	r5, r0
 80069e2:	d322      	bcc.n	8006a2a <HAL_UART_Transmit+0xd6>
 80069e4:	b30d      	cbz	r5, 8006a2a <HAL_UART_Transmit+0xd6>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ea:	69da      	ldr	r2, [r3, #28]
 80069ec:	0617      	lsls	r7, r2, #24
 80069ee:	d5f4      	bpl.n	80069da <HAL_UART_Transmit+0x86>
      if (pdata8bits == NULL)
 80069f0:	f1b8 0f00 	cmp.w	r8, #0
 80069f4:	d1da      	bne.n	80069ac <HAL_UART_Transmit+0x58>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069f6:	f839 2b02 	ldrh.w	r2, [r9], #2
 80069fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069fe:	e7d7      	b.n	80069b0 <HAL_UART_Transmit+0x5c>
    return HAL_BUSY;
 8006a00:	2002      	movs	r0, #2
}
 8006a02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a06:	f7fd f901 	bl	8003c0c <HAL_GetTick>
 8006a0a:	1b83      	subs	r3, r0, r6
 8006a0c:	429d      	cmp	r5, r3
 8006a0e:	d30c      	bcc.n	8006a2a <HAL_UART_Transmit+0xd6>
 8006a10:	b15d      	cbz	r5, 8006a2a <HAL_UART_Transmit+0xd6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a12:	6823      	ldr	r3, [r4, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	065b      	lsls	r3, r3, #25
 8006a1a:	d5f4      	bpl.n	8006a06 <HAL_UART_Transmit+0xb2>
 8006a1c:	e7d9      	b.n	80069d2 <HAL_UART_Transmit+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a1e:	6923      	ldr	r3, [r4, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1b6      	bne.n	8006992 <HAL_UART_Transmit+0x3e>
 8006a24:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8006a26:	4698      	mov	r8, r3
 8006a28:	e7b3      	b.n	8006992 <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 8006a2a:	2320      	movs	r3, #32
 8006a2c:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8006a2e:	2003      	movs	r0, #3
}
 8006a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006a34 <HAL_UART_Receive>:
{
 8006a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a38:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a3a:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 8006a3e:	2820      	cmp	r0, #32
 8006a40:	d148      	bne.n	8006ad4 <HAL_UART_Receive+0xa0>
    if ((pData == NULL) || (Size == 0U))
 8006a42:	4689      	mov	r9, r1
 8006a44:	b109      	cbz	r1, 8006a4a <HAL_UART_Receive+0x16>
 8006a46:	4616      	mov	r6, r2
 8006a48:	b912      	cbnz	r2, 8006a50 <HAL_UART_Receive+0x1c>
      return  HAL_ERROR;
 8006a4a:	2001      	movs	r0, #1
}
 8006a4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a50:	f04f 0800 	mov.w	r8, #0
 8006a54:	461d      	mov	r5, r3
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a56:	2322      	movs	r3, #34	@ 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a58:	f8c4 8084 	str.w	r8, [r4, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a5c:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a60:	f8c4 8060 	str.w	r8, [r4, #96]	@ 0x60
    tickstart = HAL_GetTick();
 8006a64:	f7fd f8d2 	bl	8003c0c <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8006a68:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 8006a6a:	f8a4 6058 	strh.w	r6, [r4, #88]	@ 0x58
    UART_MASK_COMPUTATION(huart);
 8006a6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->RxXferCount = Size;
 8006a72:	f8a4 605a 	strh.w	r6, [r4, #90]	@ 0x5a
    tickstart = HAL_GetTick();
 8006a76:	4607      	mov	r7, r0
    UART_MASK_COMPUTATION(huart);
 8006a78:	d06c      	beq.n	8006b54 <HAL_UART_Receive+0x120>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f040 8081 	bne.w	8006b82 <HAL_UART_Receive+0x14e>
    uhMask = huart->Mask;
 8006a80:	4698      	mov	r8, r3
    UART_MASK_COMPUTATION(huart);
 8006a82:	6923      	ldr	r3, [r4, #16]
    uhMask = huart->Mask;
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	bf0c      	ite	eq
 8006a88:	26ff      	moveq	r6, #255	@ 0xff
 8006a8a:	267f      	movne	r6, #127	@ 0x7f
    while (huart->RxXferCount > 0U)
 8006a8c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 8006a90:	f8a4 605c 	strh.w	r6, [r4, #92]	@ 0x5c
    while (huart->RxXferCount > 0U)
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	b1bb      	cbz	r3, 8006ac8 <HAL_UART_Receive+0x94>
 8006a98:	6823      	ldr	r3, [r4, #0]
 8006a9a:	1c6a      	adds	r2, r5, #1
 8006a9c:	d11d      	bne.n	8006ada <HAL_UART_Receive+0xa6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a9e:	69da      	ldr	r2, [r3, #28]
 8006aa0:	0690      	lsls	r0, r2, #26
 8006aa2:	d5fc      	bpl.n	8006a9e <HAL_UART_Receive+0x6a>
      if (pdata8bits == NULL)
 8006aa4:	f1b9 0f00 	cmp.w	r9, #0
 8006aa8:	d05b      	beq.n	8006b62 <HAL_UART_Receive+0x12e>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006aaa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006aac:	4033      	ands	r3, r6
 8006aae:	f809 3b01 	strb.w	r3, [r9], #1
      huart->RxXferCount--;
 8006ab2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006abe:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e7      	bne.n	8006a98 <HAL_UART_Receive+0x64>
    huart->RxState = HAL_UART_STATE_READY;
 8006ac8:	2320      	movs	r3, #32
 8006aca:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    return HAL_OK;
 8006ace:	2000      	movs	r0, #0
}
 8006ad0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8006ad4:	2002      	movs	r0, #2
}
 8006ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ada:	69da      	ldr	r2, [r3, #28]
 8006adc:	0691      	lsls	r1, r2, #26
 8006ade:	d4e1      	bmi.n	8006aa4 <HAL_UART_Receive+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ae0:	f7fd f894 	bl	8003c0c <HAL_GetTick>
 8006ae4:	1bc0      	subs	r0, r0, r7
 8006ae6:	4285      	cmp	r5, r0
 8006ae8:	d32e      	bcc.n	8006b48 <HAL_UART_Receive+0x114>
 8006aea:	b36d      	cbz	r5, 8006b48 <HAL_UART_Receive+0x114>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	0750      	lsls	r0, r2, #29
 8006af2:	d5f2      	bpl.n	8006ada <HAL_UART_Receive+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006af4:	69da      	ldr	r2, [r3, #28]
 8006af6:	0711      	lsls	r1, r2, #28
 8006af8:	d459      	bmi.n	8006bae <HAL_UART_Receive+0x17a>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006afa:	69da      	ldr	r2, [r3, #28]
 8006afc:	0512      	lsls	r2, r2, #20
 8006afe:	d5ec      	bpl.n	8006ada <HAL_UART_Receive+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b04:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	e853 2f00 	ldrex	r2, [r3]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b0a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	e843 2100 	strex	r1, r2, [r3]
 8006b12:	2900      	cmp	r1, #0
 8006b14:	d1f7      	bne.n	8006b06 <HAL_UART_Receive+0xd2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b16:	f103 0208 	add.w	r2, r3, #8
 8006b1a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b1e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	f103 0008 	add.w	r0, r3, #8
 8006b26:	e840 2100 	strex	r1, r2, [r0]
 8006b2a:	2900      	cmp	r1, #0
 8006b2c:	d1f3      	bne.n	8006b16 <HAL_UART_Receive+0xe2>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b2e:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8006b30:	2a01      	cmp	r2, #1
 8006b32:	d02d      	beq.n	8006b90 <HAL_UART_Receive+0x15c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b34:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006b36:	2220      	movs	r2, #32
 8006b38:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b3c:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b3e:	6623      	str	r3, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8006b40:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b44:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006b48:	2320      	movs	r3, #32
 8006b4a:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 8006b4e:	2003      	movs	r0, #3
}
 8006b50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8006b54:	6923      	ldr	r3, [r4, #16]
 8006b56:	b9cb      	cbnz	r3, 8006b8c <HAL_UART_Receive+0x158>
 8006b58:	46c8      	mov	r8, r9
    uhMask = huart->Mask;
 8006b5a:	f240 16ff 	movw	r6, #511	@ 0x1ff
      pdata8bits  = NULL;
 8006b5e:	4699      	mov	r9, r3
 8006b60:	e794      	b.n	8006a8c <HAL_UART_Receive+0x58>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006b62:	8c9a      	ldrh	r2, [r3, #36]	@ 0x24
 8006b64:	4032      	ands	r2, r6
 8006b66:	f828 2b02 	strh.w	r2, [r8], #2
      huart->RxXferCount--;
 8006b6a:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 8006b6e:	3a01      	subs	r2, #1
 8006b70:	b292      	uxth	r2, r2
 8006b72:	f8a4 205a 	strh.w	r2, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006b76:	f8b4 205a 	ldrh.w	r2, [r4, #90]	@ 0x5a
 8006b7a:	b292      	uxth	r2, r2
 8006b7c:	2a00      	cmp	r2, #0
 8006b7e:	d18c      	bne.n	8006a9a <HAL_UART_Receive+0x66>
 8006b80:	e7a2      	b.n	8006ac8 <HAL_UART_Receive+0x94>
    UART_MASK_COMPUTATION(huart);
 8006b82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b86:	d00c      	beq.n	8006ba2 <HAL_UART_Receive+0x16e>
    uhMask = huart->Mask;
 8006b88:	4646      	mov	r6, r8
 8006b8a:	e77f      	b.n	8006a8c <HAL_UART_Receive+0x58>
 8006b8c:	26ff      	movs	r6, #255	@ 0xff
 8006b8e:	e77d      	b.n	8006a8c <HAL_UART_Receive+0x58>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b90:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b94:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b98:	e843 2100 	strex	r1, r2, [r3]
 8006b9c:	2900      	cmp	r1, #0
 8006b9e:	d1f7      	bne.n	8006b90 <HAL_UART_Receive+0x15c>
 8006ba0:	e7c8      	b.n	8006b34 <HAL_UART_Receive+0x100>
    UART_MASK_COMPUTATION(huart);
 8006ba2:	6923      	ldr	r3, [r4, #16]
    uhMask = huart->Mask;
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	bf14      	ite	ne
 8006ba8:	263f      	movne	r6, #63	@ 0x3f
 8006baa:	267f      	moveq	r6, #127	@ 0x7f
 8006bac:	e76e      	b.n	8006a8c <HAL_UART_Receive+0x58>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bae:	2208      	movs	r2, #8
 8006bb0:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bb6:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bba:	e843 2100 	strex	r1, r2, [r3]
 8006bbe:	2900      	cmp	r1, #0
 8006bc0:	d1f7      	bne.n	8006bb2 <HAL_UART_Receive+0x17e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	f103 0208 	add.w	r2, r3, #8
 8006bc6:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bca:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bce:	f103 0008 	add.w	r0, r3, #8
 8006bd2:	e840 2100 	strex	r1, r2, [r0]
 8006bd6:	2900      	cmp	r1, #0
 8006bd8:	d1f3      	bne.n	8006bc2 <HAL_UART_Receive+0x18e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bda:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8006bdc:	2a01      	cmp	r2, #1
 8006bde:	d00b      	beq.n	8006bf8 <HAL_UART_Receive+0x1c4>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be0:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006be2:	2120      	movs	r1, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006be4:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006be6:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8006bea:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bec:	6623      	str	r3, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8006bee:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bf2:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
          return HAL_ERROR;
 8006bf6:	e7a7      	b.n	8006b48 <HAL_UART_Receive+0x114>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bfc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c00:	e843 2100 	strex	r1, r2, [r3]
 8006c04:	2900      	cmp	r1, #0
 8006c06:	d1f7      	bne.n	8006bf8 <HAL_UART_Receive+0x1c4>
 8006c08:	e7ea      	b.n	8006be0 <HAL_UART_Receive+0x1ac>
 8006c0a:	bf00      	nop

08006c0c <arm_split_rfft_q15>:
 8006c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c10:	b083      	sub	sp, #12
 8006c12:	f101 4580 	add.w	r5, r1, #1073741824	@ 0x40000000
 8006c16:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006c18:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8006c1a:	3d01      	subs	r5, #1
 8006c1c:	eb04 06c1 	add.w	r6, r4, r1, lsl #3
 8006c20:	00ac      	lsls	r4, r5, #2
 8006c22:	9401      	str	r4, [sp, #4]
 8006c24:	1e4c      	subs	r4, r1, #1
 8006c26:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8006c2a:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8006c2e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8006c32:	d02d      	beq.n	8006c90 <arm_split_rfft_q15+0x84>
 8006c34:	2f01      	cmp	r7, #1
 8006c36:	f1a6 0c04 	sub.w	ip, r6, #4
 8006c3a:	f100 0604 	add.w	r6, r0, #4
 8006c3e:	d13e      	bne.n	8006cbe <arm_split_rfft_q15+0xb2>
 8006c40:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8006c42:	f1ac 0104 	sub.w	r1, ip, #4
 8006c46:	f107 0808 	add.w	r8, r7, #8
 8006c4a:	f856 7b04 	ldr.w	r7, [r6], #4
 8006c4e:	f852 9b04 	ldr.w	r9, [r2], #4
 8006c52:	fb47 fc09 	smusd	ip, r7, r9
 8006c56:	f855 e904 	ldr.w	lr, [r5], #-4
 8006c5a:	f853 ab04 	ldr.w	sl, [r3], #4
 8006c5e:	fb2e cc0a 	smlad	ip, lr, sl, ip
 8006c62:	fb4e fe1a 	smusdx	lr, lr, sl
 8006c66:	fb27 e719 	smladx	r7, r7, r9, lr
 8006c6a:	143f      	asrs	r7, r7, #16
 8006c6c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8006c70:	f1c7 0e00 	rsb	lr, r7, #0
 8006c74:	3c01      	subs	r4, #1
 8006c76:	f828 7c02 	strh.w	r7, [r8, #-2]
 8006c7a:	f828 cc04 	strh.w	ip, [r8, #-4]
 8006c7e:	f1a1 0104 	sub.w	r1, r1, #4
 8006c82:	f8a1 e00a 	strh.w	lr, [r1, #10]
 8006c86:	f8a1 c008 	strh.w	ip, [r1, #8]
 8006c8a:	f108 0804 	add.w	r8, r8, #4
 8006c8e:	d1dc      	bne.n	8006c4a <arm_split_rfft_q15+0x3e>
 8006c90:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8006c94:	f9b0 3000 	ldrsh.w	r3, [r0]
 8006c98:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006c9a:	9a01      	ldr	r2, [sp, #4]
 8006c9c:	1a5b      	subs	r3, r3, r1
 8006c9e:	4422      	add	r2, r4
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	105b      	asrs	r3, r3, #1
 8006ca4:	8093      	strh	r3, [r2, #4]
 8006ca6:	80d1      	strh	r1, [r2, #6]
 8006ca8:	f9b0 3000 	ldrsh.w	r3, [r0]
 8006cac:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8006cb0:	8061      	strh	r1, [r4, #2]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	105b      	asrs	r3, r3, #1
 8006cb6:	8023      	strh	r3, [r4, #0]
 8006cb8:	b003      	add	sp, #12
 8006cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cbe:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8006cc2:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8006cc4:	f1ac 0104 	sub.w	r1, ip, #4
 8006cc8:	f107 0808 	add.w	r8, r7, #8
 8006ccc:	f856 7b04 	ldr.w	r7, [r6], #4
 8006cd0:	f8d2 9000 	ldr.w	r9, [r2]
 8006cd4:	fb47 fc09 	smusd	ip, r7, r9
 8006cd8:	f855 e904 	ldr.w	lr, [r5], #-4
 8006cdc:	f8d3 a000 	ldr.w	sl, [r3]
 8006ce0:	fb2e cc0a 	smlad	ip, lr, sl, ip
 8006ce4:	fb4e fe1a 	smusdx	lr, lr, sl
 8006ce8:	fb27 e719 	smladx	r7, r7, r9, lr
 8006cec:	143f      	asrs	r7, r7, #16
 8006cee:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8006cf2:	f1c7 0e00 	rsb	lr, r7, #0
 8006cf6:	3c01      	subs	r4, #1
 8006cf8:	f828 7c02 	strh.w	r7, [r8, #-2]
 8006cfc:	f828 cc04 	strh.w	ip, [r8, #-4]
 8006d00:	445b      	add	r3, fp
 8006d02:	f8a1 e006 	strh.w	lr, [r1, #6]
 8006d06:	f8a1 c004 	strh.w	ip, [r1, #4]
 8006d0a:	445a      	add	r2, fp
 8006d0c:	f108 0804 	add.w	r8, r8, #4
 8006d10:	f1a1 0104 	sub.w	r1, r1, #4
 8006d14:	d1da      	bne.n	8006ccc <arm_split_rfft_q15+0xc0>
 8006d16:	e7bb      	b.n	8006c90 <arm_split_rfft_q15+0x84>

08006d18 <arm_rfft_q15>:
 8006d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d1c:	f890 e004 	ldrb.w	lr, [r0, #4]
 8006d20:	6806      	ldr	r6, [r0, #0]
 8006d22:	f1be 0f01 	cmp.w	lr, #1
 8006d26:	4604      	mov	r4, r0
 8006d28:	b083      	sub	sp, #12
 8006d2a:	6940      	ldr	r0, [r0, #20]
 8006d2c:	4615      	mov	r5, r2
 8006d2e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006d32:	460f      	mov	r7, r1
 8006d34:	d00f      	beq.n	8006d56 <arm_rfft_q15+0x3e>
 8006d36:	7963      	ldrb	r3, [r4, #5]
 8006d38:	4672      	mov	r2, lr
 8006d3a:	f000 fd75 	bl	8007828 <arm_cfft_q15>
 8006d3e:	68a3      	ldr	r3, [r4, #8]
 8006d40:	9301      	str	r3, [sp, #4]
 8006d42:	9500      	str	r5, [sp, #0]
 8006d44:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 8006d48:	4631      	mov	r1, r6
 8006d4a:	4638      	mov	r0, r7
 8006d4c:	f7ff ff5e 	bl	8006c0c <arm_split_rfft_q15>
 8006d50:	b003      	add	sp, #12
 8006d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d56:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
 8006d5a:	68a2      	ldr	r2, [r4, #8]
 8006d5c:	eb07 0c86 	add.w	ip, r7, r6, lsl #2
 8006d60:	b30e      	cbz	r6, 8006da6 <arm_rfft_q15+0x8e>
 8006d62:	2a01      	cmp	r2, #1
 8006d64:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8006d68:	d132      	bne.n	8006dd0 <arm_rfft_q15+0xb8>
 8006d6a:	46a9      	mov	r9, r5
 8006d6c:	f85c 8904 	ldr.w	r8, [ip], #-4
 8006d70:	f851 2b04 	ldr.w	r2, [r1], #4
 8006d74:	fb48 fa02 	smusd	sl, r8, r2
 8006d78:	f857 bb04 	ldr.w	fp, [r7], #4
 8006d7c:	f853 eb04 	ldr.w	lr, [r3], #4
 8006d80:	fb2b aa0e 	smlad	sl, fp, lr, sl
 8006d84:	fb28 f812 	smuadx	r8, r8, r2
 8006d88:	f1c8 0200 	rsb	r2, r8, #0
 8006d8c:	fb4e 2e1b 	smlsdx	lr, lr, fp, r2
 8006d90:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8006d94:	0412      	lsls	r2, r2, #16
 8006d96:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 8006d9a:	3e01      	subs	r6, #1
 8006d9c:	f849 2b04 	str.w	r2, [r9], #4
 8006da0:	d1e4      	bne.n	8006d6c <arm_rfft_q15+0x54>
 8006da2:	f894 e004 	ldrb.w	lr, [r4, #4]
 8006da6:	7963      	ldrb	r3, [r4, #5]
 8006da8:	4672      	mov	r2, lr
 8006daa:	4629      	mov	r1, r5
 8006dac:	f000 fd3c 	bl	8007828 <arm_cfft_q15>
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d0cc      	beq.n	8006d50 <arm_rfft_q15+0x38>
 8006db6:	3d02      	subs	r5, #2
 8006db8:	2100      	movs	r1, #0
 8006dba:	f935 3f02 	ldrsh.w	r3, [r5, #2]!
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	802b      	strh	r3, [r5, #0]
 8006dc2:	6823      	ldr	r3, [r4, #0]
 8006dc4:	3101      	adds	r1, #1
 8006dc6:	428b      	cmp	r3, r1
 8006dc8:	d8f7      	bhi.n	8006dba <arm_rfft_q15+0xa2>
 8006dca:	b003      	add	sp, #12
 8006dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd0:	ee07 0a90 	vmov	s15, r0
 8006dd4:	46a8      	mov	r8, r5
 8006dd6:	f85c e904 	ldr.w	lr, [ip], #-4
 8006dda:	6808      	ldr	r0, [r1, #0]
 8006ddc:	fb4e f900 	smusd	r9, lr, r0
 8006de0:	f857 ab04 	ldr.w	sl, [r7], #4
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	fb2a 9902 	smlad	r9, sl, r2, r9
 8006dea:	fb2e fe10 	smuadx	lr, lr, r0
 8006dee:	f1ce 0e00 	rsb	lr, lr, #0
 8006df2:	fb42 e21a 	smlsdx	r2, r2, sl, lr
 8006df6:	0c12      	lsrs	r2, r2, #16
 8006df8:	0412      	lsls	r2, r2, #16
 8006dfa:	ea42 4219 	orr.w	r2, r2, r9, lsr #16
 8006dfe:	3e01      	subs	r6, #1
 8006e00:	f848 2b04 	str.w	r2, [r8], #4
 8006e04:	4459      	add	r1, fp
 8006e06:	445b      	add	r3, fp
 8006e08:	d1e5      	bne.n	8006dd6 <arm_rfft_q15+0xbe>
 8006e0a:	ee17 0a90 	vmov	r0, s15
 8006e0e:	e7c8      	b.n	8006da2 <arm_rfft_q15+0x8a>

08006e10 <arm_rfft_init_q15>:
 8006e10:	b430      	push	{r4, r5}
 8006e12:	b289      	uxth	r1, r1
 8006e14:	4d31      	ldr	r5, [pc, #196]	@ (8006edc <arm_rfft_init_q15+0xcc>)
 8006e16:	4c32      	ldr	r4, [pc, #200]	@ (8006ee0 <arm_rfft_init_q15+0xd0>)
 8006e18:	6001      	str	r1, [r0, #0]
 8006e1a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006e1e:	e9c0 5403 	strd	r5, r4, [r0, #12]
 8006e22:	7102      	strb	r2, [r0, #4]
 8006e24:	7143      	strb	r3, [r0, #5]
 8006e26:	d053      	beq.n	8006ed0 <arm_rfft_init_q15+0xc0>
 8006e28:	d91a      	bls.n	8006e60 <arm_rfft_init_q15+0x50>
 8006e2a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006e2e:	d033      	beq.n	8006e98 <arm_rfft_init_q15+0x88>
 8006e30:	d909      	bls.n	8006e46 <arm_rfft_init_q15+0x36>
 8006e32:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8006e36:	d12b      	bne.n	8006e90 <arm_rfft_init_q15+0x80>
 8006e38:	4b2a      	ldr	r3, [pc, #168]	@ (8006ee4 <arm_rfft_init_q15+0xd4>)
 8006e3a:	6143      	str	r3, [r0, #20]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	6082      	str	r2, [r0, #8]
 8006e40:	2000      	movs	r0, #0
 8006e42:	bc30      	pop	{r4, r5}
 8006e44:	4770      	bx	lr
 8006e46:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006e4a:	d02c      	beq.n	8006ea6 <arm_rfft_init_q15+0x96>
 8006e4c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006e50:	d11e      	bne.n	8006e90 <arm_rfft_init_q15+0x80>
 8006e52:	4b25      	ldr	r3, [pc, #148]	@ (8006ee8 <arm_rfft_init_q15+0xd8>)
 8006e54:	6143      	str	r3, [r0, #20]
 8006e56:	2204      	movs	r2, #4
 8006e58:	6082      	str	r2, [r0, #8]
 8006e5a:	bc30      	pop	{r4, r5}
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	4770      	bx	lr
 8006e60:	2980      	cmp	r1, #128	@ 0x80
 8006e62:	d027      	beq.n	8006eb4 <arm_rfft_init_q15+0xa4>
 8006e64:	d909      	bls.n	8006e7a <arm_rfft_init_q15+0x6a>
 8006e66:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8006e6a:	d111      	bne.n	8006e90 <arm_rfft_init_q15+0x80>
 8006e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8006eec <arm_rfft_init_q15+0xdc>)
 8006e6e:	6143      	str	r3, [r0, #20]
 8006e70:	2220      	movs	r2, #32
 8006e72:	6082      	str	r2, [r0, #8]
 8006e74:	bc30      	pop	{r4, r5}
 8006e76:	2000      	movs	r0, #0
 8006e78:	4770      	bx	lr
 8006e7a:	2920      	cmp	r1, #32
 8006e7c:	d021      	beq.n	8006ec2 <arm_rfft_init_q15+0xb2>
 8006e7e:	2940      	cmp	r1, #64	@ 0x40
 8006e80:	d106      	bne.n	8006e90 <arm_rfft_init_q15+0x80>
 8006e82:	4b1b      	ldr	r3, [pc, #108]	@ (8006ef0 <arm_rfft_init_q15+0xe0>)
 8006e84:	6143      	str	r3, [r0, #20]
 8006e86:	2280      	movs	r2, #128	@ 0x80
 8006e88:	6082      	str	r2, [r0, #8]
 8006e8a:	bc30      	pop	{r4, r5}
 8006e8c:	2000      	movs	r0, #0
 8006e8e:	4770      	bx	lr
 8006e90:	f04f 30ff 	mov.w	r0, #4294967295
 8006e94:	bc30      	pop	{r4, r5}
 8006e96:	4770      	bx	lr
 8006e98:	4b16      	ldr	r3, [pc, #88]	@ (8006ef4 <arm_rfft_init_q15+0xe4>)
 8006e9a:	6143      	str	r3, [r0, #20]
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	6082      	str	r2, [r0, #8]
 8006ea0:	bc30      	pop	{r4, r5}
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	4770      	bx	lr
 8006ea6:	4b14      	ldr	r3, [pc, #80]	@ (8006ef8 <arm_rfft_init_q15+0xe8>)
 8006ea8:	6143      	str	r3, [r0, #20]
 8006eaa:	2208      	movs	r2, #8
 8006eac:	6082      	str	r2, [r0, #8]
 8006eae:	bc30      	pop	{r4, r5}
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	4770      	bx	lr
 8006eb4:	4b11      	ldr	r3, [pc, #68]	@ (8006efc <arm_rfft_init_q15+0xec>)
 8006eb6:	6143      	str	r3, [r0, #20]
 8006eb8:	2240      	movs	r2, #64	@ 0x40
 8006eba:	6082      	str	r2, [r0, #8]
 8006ebc:	bc30      	pop	{r4, r5}
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	4770      	bx	lr
 8006ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8006f00 <arm_rfft_init_q15+0xf0>)
 8006ec4:	6143      	str	r3, [r0, #20]
 8006ec6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006eca:	6082      	str	r2, [r0, #8]
 8006ecc:	2000      	movs	r0, #0
 8006ece:	e7b8      	b.n	8006e42 <arm_rfft_init_q15+0x32>
 8006ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8006f04 <arm_rfft_init_q15+0xf4>)
 8006ed2:	6143      	str	r3, [r0, #20]
 8006ed4:	2210      	movs	r2, #16
 8006ed6:	6082      	str	r2, [r0, #8]
 8006ed8:	2000      	movs	r0, #0
 8006eda:	e7b2      	b.n	8006e42 <arm_rfft_init_q15+0x32>
 8006edc:	0800e988 	.word	0x0800e988
 8006ee0:	08012988 	.word	0x08012988
 8006ee4:	0800ab60 	.word	0x0800ab60
 8006ee8:	0800ab00 	.word	0x0800ab00
 8006eec:	0800ab10 	.word	0x0800ab10
 8006ef0:	0800ab50 	.word	0x0800ab50
 8006ef4:	0800ab30 	.word	0x0800ab30
 8006ef8:	0800ab70 	.word	0x0800ab70
 8006efc:	0800ab80 	.word	0x0800ab80
 8006f00:	0800ab20 	.word	0x0800ab20
 8006f04:	0800ab40 	.word	0x0800ab40

08006f08 <arm_mat_mult_fast_q15>:
 8006f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0c:	b09d      	sub	sp, #116	@ 0x74
 8006f0e:	880f      	ldrh	r7, [r1, #0]
 8006f10:	9009      	str	r0, [sp, #36]	@ 0x24
 8006f12:	4606      	mov	r6, r0
 8006f14:	8840      	ldrh	r0, [r0, #2]
 8006f16:	884d      	ldrh	r5, [r1, #2]
 8006f18:	8836      	ldrh	r6, [r6, #0]
 8006f1a:	684c      	ldr	r4, [r1, #4]
 8006f1c:	9017      	str	r0, [sp, #92]	@ 0x5c
 8006f1e:	42b8      	cmp	r0, r7
 8006f20:	971a      	str	r7, [sp, #104]	@ 0x68
 8006f22:	9518      	str	r5, [sp, #96]	@ 0x60
 8006f24:	9616      	str	r6, [sp, #88]	@ 0x58
 8006f26:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f28:	9311      	str	r3, [sp, #68]	@ 0x44
 8006f2a:	f040 81e9 	bne.w	8007300 <arm_mat_mult_fast_q15+0x3f8>
 8006f2e:	8813      	ldrh	r3, [r2, #0]
 8006f30:	42b3      	cmp	r3, r6
 8006f32:	f040 81e5 	bne.w	8007300 <arm_mat_mult_fast_q15+0x3f8>
 8006f36:	8853      	ldrh	r3, [r2, #2]
 8006f38:	42ab      	cmp	r3, r5
 8006f3a:	f040 81e1 	bne.w	8007300 <arm_mat_mult_fast_q15+0x3f8>
 8006f3e:	0043      	lsls	r3, r0, #1
 8006f40:	2801      	cmp	r0, #1
 8006f42:	ea4f 0695 	mov.w	r6, r5, lsr #2
 8006f46:	9306      	str	r3, [sp, #24]
 8006f48:	f005 0703 	and.w	r7, r5, #3
 8006f4c:	d133      	bne.n	8006fb6 <arm_mat_mult_fast_q15+0xae>
 8006f4e:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8006f52:	fb06 fc03 	mul.w	ip, r6, r3
 8006f56:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006f5a:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 8006f5e:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8006f62:	4655      	mov	r5, sl
 8006f64:	4699      	mov	r9, r3
 8006f66:	462b      	mov	r3, r5
 8006f68:	b1ae      	cbz	r6, 8006f96 <arm_mat_mult_fast_q15+0x8e>
 8006f6a:	4621      	mov	r1, r4
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	680a      	ldr	r2, [r1, #0]
 8006f70:	801a      	strh	r2, [r3, #0]
 8006f72:	1412      	asrs	r2, r2, #16
 8006f74:	f823 2009 	strh.w	r2, [r3, r9]
 8006f78:	684a      	ldr	r2, [r1, #4]
 8006f7a:	f823 2019 	strh.w	r2, [r3, r9, lsl #1]
 8006f7e:	3801      	subs	r0, #1
 8006f80:	ea4f 4222 	mov.w	r2, r2, asr #16
 8006f84:	80da      	strh	r2, [r3, #6]
 8006f86:	f101 0108 	add.w	r1, r1, #8
 8006f8a:	f103 0308 	add.w	r3, r3, #8
 8006f8e:	d1ee      	bne.n	8006f6e <arm_mat_mult_fast_q15+0x66>
 8006f90:	4444      	add	r4, r8
 8006f92:	eb05 030c 	add.w	r3, r5, ip
 8006f96:	b147      	cbz	r7, 8006faa <arm_mat_mult_fast_q15+0xa2>
 8006f98:	4621      	mov	r1, r4
 8006f9a:	463a      	mov	r2, r7
 8006f9c:	f931 0b02 	ldrsh.w	r0, [r1], #2
 8006fa0:	8018      	strh	r0, [r3, #0]
 8006fa2:	3a01      	subs	r2, #1
 8006fa4:	444b      	add	r3, r9
 8006fa6:	d1f9      	bne.n	8006f9c <arm_mat_mult_fast_q15+0x94>
 8006fa8:	4474      	add	r4, lr
 8006faa:	45aa      	cmp	sl, r5
 8006fac:	f105 0302 	add.w	r3, r5, #2
 8006fb0:	d038      	beq.n	8007024 <arm_mat_mult_fast_q15+0x11c>
 8006fb2:	461d      	mov	r5, r3
 8006fb4:	e7d7      	b.n	8006f66 <arm_mat_mult_fast_q15+0x5e>
 8006fb6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006fb8:	181d      	adds	r5, r3, r0
 8006fba:	fb06 f803 	mul.w	r8, r6, r3
 8006fbe:	4696      	mov	lr, r2
 8006fc0:	441a      	add	r2, r3
 8006fc2:	006d      	lsls	r5, r5, #1
 8006fc4:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8006fc8:	9212      	str	r2, [sp, #72]	@ 0x48
 8006fca:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 8006fce:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8006fd2:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8006fd6:	469b      	mov	fp, r3
 8006fd8:	4673      	mov	r3, lr
 8006fda:	b1a6      	cbz	r6, 8007006 <arm_mat_mult_fast_q15+0xfe>
 8006fdc:	4621      	mov	r1, r4
 8006fde:	4630      	mov	r0, r6
 8006fe0:	680a      	ldr	r2, [r1, #0]
 8006fe2:	801a      	strh	r2, [r3, #0]
 8006fe4:	1412      	asrs	r2, r2, #16
 8006fe6:	f823 200b 	strh.w	r2, [r3, fp]
 8006fea:	684a      	ldr	r2, [r1, #4]
 8006fec:	f823 201b 	strh.w	r2, [r3, fp, lsl #1]
 8006ff0:	3801      	subs	r0, #1
 8006ff2:	ea4f 4222 	mov.w	r2, r2, asr #16
 8006ff6:	535a      	strh	r2, [r3, r5]
 8006ff8:	f101 0108 	add.w	r1, r1, #8
 8006ffc:	4463      	add	r3, ip
 8006ffe:	d1ef      	bne.n	8006fe0 <arm_mat_mult_fast_q15+0xd8>
 8007000:	444c      	add	r4, r9
 8007002:	eb0e 0308 	add.w	r3, lr, r8
 8007006:	b147      	cbz	r7, 800701a <arm_mat_mult_fast_q15+0x112>
 8007008:	4621      	mov	r1, r4
 800700a:	463a      	mov	r2, r7
 800700c:	f931 0b02 	ldrsh.w	r0, [r1], #2
 8007010:	8018      	strh	r0, [r3, #0]
 8007012:	3a01      	subs	r2, #1
 8007014:	445b      	add	r3, fp
 8007016:	d1f9      	bne.n	800700c <arm_mat_mult_fast_q15+0x104>
 8007018:	4454      	add	r4, sl
 800701a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800701c:	f10e 0e02 	add.w	lr, lr, #2
 8007020:	4573      	cmp	r3, lr
 8007022:	d1d9      	bne.n	8006fd8 <arm_mat_mult_fast_q15+0xd0>
 8007024:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007026:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800702c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800702e:	004c      	lsls	r4, r1, #1
 8007030:	eb03 0541 	add.w	r5, r3, r1, lsl #1
 8007034:	0852      	lsrs	r2, r2, #1
 8007036:	9415      	str	r4, [sp, #84]	@ 0x54
 8007038:	950d      	str	r5, [sp, #52]	@ 0x34
 800703a:	9210      	str	r2, [sp, #64]	@ 0x40
 800703c:	f000 80b1 	beq.w	80071a2 <arm_mat_mult_fast_q15+0x29a>
 8007040:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8007042:	460a      	mov	r2, r1
 8007044:	0846      	lsrs	r6, r0, #1
 8007046:	f001 0101 	and.w	r1, r1, #1
 800704a:	f000 0001 	and.w	r0, r0, #1
 800704e:	0852      	lsrs	r2, r2, #1
 8007050:	911b      	str	r1, [sp, #108]	@ 0x6c
 8007052:	9607      	str	r6, [sp, #28]
 8007054:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007058:	900a      	str	r0, [sp, #40]	@ 0x28
 800705a:	f000 809f 	beq.w	800719c <arm_mat_mult_fast_q15+0x294>
 800705e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007062:	1ac8      	subs	r0, r1, r3
 8007064:	3304      	adds	r3, #4
 8007066:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800706a:	9205      	str	r2, [sp, #20]
 800706c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800706e:	0092      	lsls	r2, r2, #2
 8007070:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007072:	00b2      	lsls	r2, r6, #2
 8007074:	1861      	adds	r1, r4, r1
 8007076:	920c      	str	r2, [sp, #48]	@ 0x30
 8007078:	2200      	movs	r2, #0
 800707a:	9114      	str	r1, [sp, #80]	@ 0x50
 800707c:	920e      	str	r2, [sp, #56]	@ 0x38
 800707e:	9906      	ldr	r1, [sp, #24]
 8007080:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007082:	1828      	adds	r0, r5, r0
 8007084:	440a      	add	r2, r1
 8007086:	9013      	str	r0, [sp, #76]	@ 0x4c
 8007088:	9212      	str	r2, [sp, #72]	@ 0x48
 800708a:	9304      	str	r3, [sp, #16]
 800708c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	9308      	str	r3, [sp, #32]
 8007092:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007094:	3304      	adds	r3, #4
 8007096:	9303      	str	r3, [sp, #12]
 8007098:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800709a:	9301      	str	r3, [sp, #4]
 800709c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070a2:	9a08      	ldr	r2, [sp, #32]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	eb03 0b02 	add.w	fp, r3, r2
 80070aa:	9b06      	ldr	r3, [sp, #24]
 80070ac:	eb0b 0203 	add.w	r2, fp, r3
 80070b0:	9b07      	ldr	r3, [sp, #28]
 80070b2:	9202      	str	r2, [sp, #8]
 80070b4:	e9dd e800 	ldrd	lr, r8, [sp]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d06a      	beq.n	8007192 <arm_mat_mult_fast_q15+0x28a>
 80070bc:	2500      	movs	r5, #0
 80070be:	462e      	mov	r6, r5
 80070c0:	462f      	mov	r7, r5
 80070c2:	46ac      	mov	ip, r5
 80070c4:	4692      	mov	sl, r2
 80070c6:	46d9      	mov	r9, fp
 80070c8:	f859 4b04 	ldr.w	r4, [r9], #4
 80070cc:	f858 0b04 	ldr.w	r0, [r8], #4
 80070d0:	f85a 2b04 	ldr.w	r2, [sl], #4
 80070d4:	f85e 1b04 	ldr.w	r1, [lr], #4
 80070d8:	fb24 cc00 	smlad	ip, r4, r0, ip
 80070dc:	fb24 7701 	smlad	r7, r4, r1, r7
 80070e0:	fb22 6600 	smlad	r6, r2, r0, r6
 80070e4:	fb22 5501 	smlad	r5, r2, r1, r5
 80070e8:	3b01      	subs	r3, #1
 80070ea:	d1ed      	bne.n	80070c8 <arm_mat_mult_fast_q15+0x1c0>
 80070ec:	9a02      	ldr	r2, [sp, #8]
 80070ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80070f0:	4611      	mov	r1, r2
 80070f2:	9a00      	ldr	r2, [sp, #0]
 80070f4:	eb02 0e03 	add.w	lr, r2, r3
 80070f8:	9a01      	ldr	r2, [sp, #4]
 80070fa:	4419      	add	r1, r3
 80070fc:	9102      	str	r1, [sp, #8]
 80070fe:	449b      	add	fp, r3
 8007100:	eb02 0803 	add.w	r8, r2, r3
 8007104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007106:	b183      	cbz	r3, 800712a <arm_mat_mult_fast_q15+0x222>
 8007108:	9902      	ldr	r1, [sp, #8]
 800710a:	f9bb 3000 	ldrsh.w	r3, [fp]
 800710e:	f9b8 2000 	ldrsh.w	r2, [r8]
 8007112:	f9b1 1000 	ldrsh.w	r1, [r1]
 8007116:	f9be 0000 	ldrsh.w	r0, [lr]
 800711a:	fb03 cc02 	mla	ip, r3, r2, ip
 800711e:	fb02 6601 	mla	r6, r2, r1, r6
 8007122:	fb03 7700 	mla	r7, r3, r0, r7
 8007126:	fb01 5500 	mla	r5, r1, r0, r5
 800712a:	9b04      	ldr	r3, [sp, #16]
 800712c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800712e:	9801      	ldr	r0, [sp, #4]
 8007130:	ea4f 3cec 	mov.w	ip, ip, asr #15
 8007134:	13ff      	asrs	r7, r7, #15
 8007136:	1d19      	adds	r1, r3, #4
 8007138:	f823 cc04 	strh.w	ip, [r3, #-4]
 800713c:	f823 7c02 	strh.w	r7, [r3, #-2]
 8007140:	9b03      	ldr	r3, [sp, #12]
 8007142:	9104      	str	r1, [sp, #16]
 8007144:	13f6      	asrs	r6, r6, #15
 8007146:	13ed      	asrs	r5, r5, #15
 8007148:	f823 6c04 	strh.w	r6, [r3, #-4]
 800714c:	f823 5c02 	strh.w	r5, [r3, #-2]
 8007150:	3304      	adds	r3, #4
 8007152:	9303      	str	r3, [sp, #12]
 8007154:	9b00      	ldr	r3, [sp, #0]
 8007156:	4413      	add	r3, r2
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	9b05      	ldr	r3, [sp, #20]
 800715c:	4604      	mov	r4, r0
 800715e:	4414      	add	r4, r2
 8007160:	428b      	cmp	r3, r1
 8007162:	9401      	str	r4, [sp, #4]
 8007164:	d19c      	bne.n	80070a0 <arm_mat_mult_fast_q15+0x198>
 8007166:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007168:	9a06      	ldr	r2, [sp, #24]
 800716a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800716c:	4413      	add	r3, r2
 800716e:	930e      	str	r3, [sp, #56]	@ 0x38
 8007170:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007172:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007174:	4610      	mov	r0, r2
 8007176:	4419      	add	r1, r3
 8007178:	9a05      	ldr	r2, [sp, #20]
 800717a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800717c:	910f      	str	r1, [sp, #60]	@ 0x3c
 800717e:	4418      	add	r0, r3
 8007180:	441a      	add	r2, r3
 8007182:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007184:	900d      	str	r0, [sp, #52]	@ 0x34
 8007186:	3b01      	subs	r3, #1
 8007188:	9205      	str	r2, [sp, #20]
 800718a:	9310      	str	r3, [sp, #64]	@ 0x40
 800718c:	d006      	beq.n	800719c <arm_mat_mult_fast_q15+0x294>
 800718e:	1d0b      	adds	r3, r1, #4
 8007190:	e77b      	b.n	800708a <arm_mat_mult_fast_q15+0x182>
 8007192:	469c      	mov	ip, r3
 8007194:	461d      	mov	r5, r3
 8007196:	461e      	mov	r6, r3
 8007198:	461f      	mov	r7, r3
 800719a:	e7b3      	b.n	8007104 <arm_mat_mult_fast_q15+0x1fc>
 800719c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d155      	bne.n	800724e <arm_mat_mult_fast_q15+0x346>
 80071a2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80071a4:	07da      	lsls	r2, r3, #31
 80071a6:	d54e      	bpl.n	8007246 <arm_mat_mult_fast_q15+0x33e>
 80071a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80071aa:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80071ac:	6852      	ldr	r2, [r2, #4]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	fb03 fe01 	mul.w	lr, r3, r1
 80071b4:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80071b8:	2900      	cmp	r1, #0
 80071ba:	d044      	beq.n	8007246 <arm_mat_mult_fast_q15+0x33e>
 80071bc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80071be:	fb03 f302 	mul.w	r3, r3, r2
 80071c2:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 80071c6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80071c8:	f8cd b008 	str.w	fp, [sp, #8]
 80071cc:	4473      	add	r3, lr
 80071ce:	f002 0903 	and.w	r9, r2, #3
 80071d2:	ea4f 0892 	mov.w	r8, r2, lsr #2
 80071d6:	9301      	str	r3, [sp, #4]
 80071d8:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 80071dc:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80071e0:	ea4f 0ac8 	mov.w	sl, r8, lsl #3
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071e8:	685d      	ldr	r5, [r3, #4]
 80071ea:	9b02      	ldr	r3, [sp, #8]
 80071ec:	441d      	add	r5, r3
 80071ee:	f1b8 0f00 	cmp.w	r8, #0
 80071f2:	f000 8083 	beq.w	80072fc <arm_mat_mult_fast_q15+0x3f4>
 80071f6:	4658      	mov	r0, fp
 80071f8:	4629      	mov	r1, r5
 80071fa:	4644      	mov	r4, r8
 80071fc:	2300      	movs	r3, #0
 80071fe:	680f      	ldr	r7, [r1, #0]
 8007200:	684a      	ldr	r2, [r1, #4]
 8007202:	f8d0 c000 	ldr.w	ip, [r0]
 8007206:	6846      	ldr	r6, [r0, #4]
 8007208:	3108      	adds	r1, #8
 800720a:	3008      	adds	r0, #8
 800720c:	fb27 330c 	smlad	r3, r7, ip, r3
 8007210:	fb22 3306 	smlad	r3, r2, r6, r3
 8007214:	3c01      	subs	r4, #1
 8007216:	d1f2      	bne.n	80071fe <arm_mat_mult_fast_q15+0x2f6>
 8007218:	44d3      	add	fp, sl
 800721a:	4455      	add	r5, sl
 800721c:	f1b9 0f00 	cmp.w	r9, #0
 8007220:	d00b      	beq.n	800723a <arm_mat_mult_fast_q15+0x332>
 8007222:	4659      	mov	r1, fp
 8007224:	464a      	mov	r2, r9
 8007226:	f835 4b02 	ldrh.w	r4, [r5], #2
 800722a:	f831 0b02 	ldrh.w	r0, [r1], #2
 800722e:	3a01      	subs	r2, #1
 8007230:	fb14 3300 	smlabb	r3, r4, r0, r3
 8007234:	d1f7      	bne.n	8007226 <arm_mat_mult_fast_q15+0x31e>
 8007236:	9a00      	ldr	r2, [sp, #0]
 8007238:	4493      	add	fp, r2
 800723a:	13db      	asrs	r3, r3, #15
 800723c:	f82e 3b02 	strh.w	r3, [lr], #2
 8007240:	9b01      	ldr	r3, [sp, #4]
 8007242:	459e      	cmp	lr, r3
 8007244:	d1cf      	bne.n	80071e6 <arm_mat_mult_fast_q15+0x2de>
 8007246:	2000      	movs	r0, #0
 8007248:	b01d      	add	sp, #116	@ 0x74
 800724a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8007250:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007252:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8007254:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8007258:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800725a:	f103 3bff 	add.w	fp, r3, #4294967295
 800725e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007260:	fb03 fb0b 	mul.w	fp, r3, fp
 8007264:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007266:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
 800726a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f002 0903 	and.w	r9, r2, #3
 8007272:	f1a1 0e02 	sub.w	lr, r1, #2
 8007276:	ea4f 0892 	mov.w	r8, r2, lsr #2
 800727a:	449e      	add	lr, r3
 800727c:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8007280:	eb0b 02c8 	add.w	r2, fp, r8, lsl #3
 8007284:	9301      	str	r3, [sp, #4]
 8007286:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007288:	9202      	str	r2, [sp, #8]
 800728a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800728e:	9200      	str	r2, [sp, #0]
 8007290:	f023 0a01 	bic.w	sl, r3, #1
 8007294:	f1b8 0f00 	cmp.w	r8, #0
 8007298:	d02d      	beq.n	80072f6 <arm_mat_mult_fast_q15+0x3ee>
 800729a:	4658      	mov	r0, fp
 800729c:	4661      	mov	r1, ip
 800729e:	4644      	mov	r4, r8
 80072a0:	2300      	movs	r3, #0
 80072a2:	680e      	ldr	r6, [r1, #0]
 80072a4:	684a      	ldr	r2, [r1, #4]
 80072a6:	6807      	ldr	r7, [r0, #0]
 80072a8:	6845      	ldr	r5, [r0, #4]
 80072aa:	3108      	adds	r1, #8
 80072ac:	3008      	adds	r0, #8
 80072ae:	fb26 3307 	smlad	r3, r6, r7, r3
 80072b2:	fb22 3305 	smlad	r3, r2, r5, r3
 80072b6:	3c01      	subs	r4, #1
 80072b8:	d1f3      	bne.n	80072a2 <arm_mat_mult_fast_q15+0x39a>
 80072ba:	9a00      	ldr	r2, [sp, #0]
 80072bc:	9902      	ldr	r1, [sp, #8]
 80072be:	4494      	add	ip, r2
 80072c0:	f1b9 0f00 	cmp.w	r9, #0
 80072c4:	d00b      	beq.n	80072de <arm_mat_mult_fast_q15+0x3d6>
 80072c6:	4660      	mov	r0, ip
 80072c8:	464a      	mov	r2, r9
 80072ca:	f830 5b02 	ldrh.w	r5, [r0], #2
 80072ce:	f831 4b02 	ldrh.w	r4, [r1], #2
 80072d2:	3a01      	subs	r2, #1
 80072d4:	fb15 3304 	smlabb	r3, r5, r4, r3
 80072d8:	d1f7      	bne.n	80072ca <arm_mat_mult_fast_q15+0x3c2>
 80072da:	9a01      	ldr	r2, [sp, #4]
 80072dc:	4494      	add	ip, r2
 80072de:	13db      	asrs	r3, r3, #15
 80072e0:	f8ae 3000 	strh.w	r3, [lr]
 80072e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80072e6:	f1ba 0a01 	subs.w	sl, sl, #1
 80072ea:	449e      	add	lr, r3
 80072ec:	f43f af59 	beq.w	80071a2 <arm_mat_mult_fast_q15+0x29a>
 80072f0:	f1b8 0f00 	cmp.w	r8, #0
 80072f4:	d1d1      	bne.n	800729a <arm_mat_mult_fast_q15+0x392>
 80072f6:	4659      	mov	r1, fp
 80072f8:	4643      	mov	r3, r8
 80072fa:	e7e1      	b.n	80072c0 <arm_mat_mult_fast_q15+0x3b8>
 80072fc:	4643      	mov	r3, r8
 80072fe:	e78d      	b.n	800721c <arm_mat_mult_fast_q15+0x314>
 8007300:	f06f 0002 	mvn.w	r0, #2
 8007304:	b01d      	add	sp, #116	@ 0x74
 8007306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730a:	bf00      	nop

0800730c <arm_mat_init_q15>:
 800730c:	8001      	strh	r1, [r0, #0]
 800730e:	8042      	strh	r2, [r0, #2]
 8007310:	6043      	str	r3, [r0, #4]
 8007312:	4770      	bx	lr

08007314 <arm_cmplx_mag_q15>:
 8007314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007318:	ea5f 0992 	movs.w	r9, r2, lsr #2
 800731c:	4617      	mov	r7, r2
 800731e:	4680      	mov	r8, r0
 8007320:	460e      	mov	r6, r1
 8007322:	d029      	beq.n	8007378 <arm_cmplx_mag_q15+0x64>
 8007324:	4605      	mov	r5, r0
 8007326:	46ca      	mov	sl, r9
 8007328:	460c      	mov	r4, r1
 800732a:	6828      	ldr	r0, [r5, #0]
 800732c:	fb20 f000 	smuad	r0, r0, r0
 8007330:	4621      	mov	r1, r4
 8007332:	1440      	asrs	r0, r0, #17
 8007334:	f000 f832 	bl	800739c <arm_sqrt_q15>
 8007338:	6868      	ldr	r0, [r5, #4]
 800733a:	fb20 f000 	smuad	r0, r0, r0
 800733e:	1ca1      	adds	r1, r4, #2
 8007340:	1440      	asrs	r0, r0, #17
 8007342:	f000 f82b 	bl	800739c <arm_sqrt_q15>
 8007346:	68a8      	ldr	r0, [r5, #8]
 8007348:	fb20 f000 	smuad	r0, r0, r0
 800734c:	1d21      	adds	r1, r4, #4
 800734e:	1440      	asrs	r0, r0, #17
 8007350:	f000 f824 	bl	800739c <arm_sqrt_q15>
 8007354:	3510      	adds	r5, #16
 8007356:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800735a:	fb23 f303 	smuad	r3, r3, r3
 800735e:	1da1      	adds	r1, r4, #6
 8007360:	1458      	asrs	r0, r3, #17
 8007362:	f000 f81b 	bl	800739c <arm_sqrt_q15>
 8007366:	f1ba 0a01 	subs.w	sl, sl, #1
 800736a:	f104 0408 	add.w	r4, r4, #8
 800736e:	d1dc      	bne.n	800732a <arm_cmplx_mag_q15+0x16>
 8007370:	eb06 06c9 	add.w	r6, r6, r9, lsl #3
 8007374:	eb08 1809 	add.w	r8, r8, r9, lsl #4
 8007378:	f017 0703 	ands.w	r7, r7, #3
 800737c:	d00c      	beq.n	8007398 <arm_cmplx_mag_q15+0x84>
 800737e:	eb06 0747 	add.w	r7, r6, r7, lsl #1
 8007382:	f858 0b04 	ldr.w	r0, [r8], #4
 8007386:	fb20 f000 	smuad	r0, r0, r0
 800738a:	4631      	mov	r1, r6
 800738c:	1440      	asrs	r0, r0, #17
 800738e:	3602      	adds	r6, #2
 8007390:	f000 f804 	bl	800739c <arm_sqrt_q15>
 8007394:	42be      	cmp	r6, r7
 8007396:	d1f4      	bne.n	8007382 <arm_cmplx_mag_q15+0x6e>
 8007398:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800739c <arm_sqrt_q15>:
 800739c:	2800      	cmp	r0, #0
 800739e:	dd5c      	ble.n	800745a <arm_sqrt_q15+0xbe>
 80073a0:	fab0 f280 	clz	r2, r0
 80073a4:	3a11      	subs	r2, #17
 80073a6:	b470      	push	{r4, r5, r6}
 80073a8:	b294      	uxth	r4, r2
 80073aa:	f012 0201 	ands.w	r2, r2, #1
 80073ae:	bf1a      	itte	ne
 80073b0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80073b4:	4098      	lslne	r0, r3
 80073b6:	40a0      	lsleq	r0, r4
 80073b8:	b200      	sxth	r0, r0
 80073ba:	ee07 0a90 	vmov	s15, r0
 80073be:	eefa 7ae8 	vcvt.f32.s32	s15, s15, #15
 80073c2:	4b28      	ldr	r3, [pc, #160]	@ (8007464 <arm_sqrt_q15+0xc8>)
 80073c4:	ee17 5a90 	vmov	r5, s15
 80073c8:	eba3 0365 	sub.w	r3, r3, r5, asr #1
 80073cc:	ee07 3a90 	vmov	s15, r3
 80073d0:	eefe 7ac9 	vcvt.s32.f32	s15, s15, #14
 80073d4:	1046      	asrs	r6, r0, #1
 80073d6:	ee17 3a90 	vmov	r3, s15
 80073da:	b21b      	sxth	r3, r3
 80073dc:	fb03 f503 	mul.w	r5, r3, r3
 80073e0:	13ed      	asrs	r5, r5, #15
 80073e2:	fb15 f506 	smulbb	r5, r5, r6
 80073e6:	13ed      	asrs	r5, r5, #15
 80073e8:	f5c5 5540 	rsb	r5, r5, #12288	@ 0x3000
 80073ec:	fb03 f305 	mul.w	r3, r3, r5
 80073f0:	f343 334f 	sbfx	r3, r3, #13, #16
 80073f4:	f023 0303 	bic.w	r3, r3, #3
 80073f8:	fb03 f503 	mul.w	r5, r3, r3
 80073fc:	13ed      	asrs	r5, r5, #15
 80073fe:	fb15 f506 	smulbb	r5, r5, r6
 8007402:	13ed      	asrs	r5, r5, #15
 8007404:	f5c5 5540 	rsb	r5, r5, #12288	@ 0x3000
 8007408:	fb03 f305 	mul.w	r3, r3, r5
 800740c:	f343 334f 	sbfx	r3, r3, #13, #16
 8007410:	f023 0303 	bic.w	r3, r3, #3
 8007414:	fb03 f503 	mul.w	r5, r3, r3
 8007418:	13ed      	asrs	r5, r5, #15
 800741a:	fb15 f506 	smulbb	r5, r5, r6
 800741e:	13ed      	asrs	r5, r5, #15
 8007420:	f5c5 5540 	rsb	r5, r5, #12288	@ 0x3000
 8007424:	fb03 f305 	mul.w	r3, r3, r5
 8007428:	13db      	asrs	r3, r3, #15
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	fb13 f300 	smulbb	r3, r3, r0
 8007430:	f343 338f 	sbfx	r3, r3, #14, #16
 8007434:	f023 0301 	bic.w	r3, r3, #1
 8007438:	b13a      	cbz	r2, 800744a <arm_sqrt_q15+0xae>
 800743a:	3c01      	subs	r4, #1
 800743c:	1064      	asrs	r4, r4, #1
 800743e:	4123      	asrs	r3, r4
 8007440:	b21b      	sxth	r3, r3
 8007442:	2000      	movs	r0, #0
 8007444:	bc70      	pop	{r4, r5, r6}
 8007446:	800b      	strh	r3, [r1, #0]
 8007448:	4770      	bx	lr
 800744a:	f344 044e 	sbfx	r4, r4, #1, #15
 800744e:	4123      	asrs	r3, r4
 8007450:	b21b      	sxth	r3, r3
 8007452:	2000      	movs	r0, #0
 8007454:	bc70      	pop	{r4, r5, r6}
 8007456:	800b      	strh	r3, [r1, #0]
 8007458:	4770      	bx	lr
 800745a:	2300      	movs	r3, #0
 800745c:	800b      	strh	r3, [r1, #0]
 800745e:	f04f 30ff 	mov.w	r0, #4294967295
 8007462:	4770      	bx	lr
 8007464:	5f3759df 	.word	0x5f3759df

08007468 <arm_shift_q15>:
 8007468:	2900      	cmp	r1, #0
 800746a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800746e:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8007472:	db4a      	blt.n	800750a <arm_shift_q15+0xa2>
 8007474:	f1bc 0f00 	cmp.w	ip, #0
 8007478:	d02b      	beq.n	80074d2 <arm_shift_q15+0x6a>
 800747a:	f100 0508 	add.w	r5, r0, #8
 800747e:	4616      	mov	r6, r2
 8007480:	4667      	mov	r7, ip
 8007482:	f935 4c08 	ldrsh.w	r4, [r5, #-8]
 8007486:	408c      	lsls	r4, r1
 8007488:	f304 040f 	ssat	r4, #16, r4
 800748c:	f935 ec06 	ldrsh.w	lr, [r5, #-6]
 8007490:	fa0e fe01 	lsl.w	lr, lr, r1
 8007494:	f30e 0e0f 	ssat	lr, #16, lr
 8007498:	b2a4      	uxth	r4, r4
 800749a:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800749e:	6034      	str	r4, [r6, #0]
 80074a0:	f935 4c04 	ldrsh.w	r4, [r5, #-4]
 80074a4:	408c      	lsls	r4, r1
 80074a6:	f304 040f 	ssat	r4, #16, r4
 80074aa:	f935 ec02 	ldrsh.w	lr, [r5, #-2]
 80074ae:	fa0e fe01 	lsl.w	lr, lr, r1
 80074b2:	f30e 0e0f 	ssat	lr, #16, lr
 80074b6:	b2a4      	uxth	r4, r4
 80074b8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80074bc:	3f01      	subs	r7, #1
 80074be:	6074      	str	r4, [r6, #4]
 80074c0:	f105 0508 	add.w	r5, r5, #8
 80074c4:	f106 0608 	add.w	r6, r6, #8
 80074c8:	d1db      	bne.n	8007482 <arm_shift_q15+0x1a>
 80074ca:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 80074ce:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 80074d2:	f013 0303 	ands.w	r3, r3, #3
 80074d6:	d016      	beq.n	8007506 <arm_shift_q15+0x9e>
 80074d8:	f9b0 4000 	ldrsh.w	r4, [r0]
 80074dc:	408c      	lsls	r4, r1
 80074de:	f304 040f 	ssat	r4, #16, r4
 80074e2:	3b01      	subs	r3, #1
 80074e4:	8014      	strh	r4, [r2, #0]
 80074e6:	d00e      	beq.n	8007506 <arm_shift_q15+0x9e>
 80074e8:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80074ec:	408c      	lsls	r4, r1
 80074ee:	f304 040f 	ssat	r4, #16, r4
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	8054      	strh	r4, [r2, #2]
 80074f6:	d006      	beq.n	8007506 <arm_shift_q15+0x9e>
 80074f8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80074fc:	fa03 f101 	lsl.w	r1, r3, r1
 8007500:	f301 010f 	ssat	r1, #16, r1
 8007504:	8091      	strh	r1, [r2, #4]
 8007506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800750a:	f1bc 0f00 	cmp.w	ip, #0
 800750e:	d025      	beq.n	800755c <arm_shift_q15+0xf4>
 8007510:	424f      	negs	r7, r1
 8007512:	f100 0508 	add.w	r5, r0, #8
 8007516:	4616      	mov	r6, r2
 8007518:	46e6      	mov	lr, ip
 800751a:	f935 4c08 	ldrsh.w	r4, [r5, #-8]
 800751e:	f935 8c06 	ldrsh.w	r8, [r5, #-6]
 8007522:	413c      	asrs	r4, r7
 8007524:	fa48 f807 	asr.w	r8, r8, r7
 8007528:	b2a4      	uxth	r4, r4
 800752a:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800752e:	6034      	str	r4, [r6, #0]
 8007530:	f935 4c04 	ldrsh.w	r4, [r5, #-4]
 8007534:	f935 8c02 	ldrsh.w	r8, [r5, #-2]
 8007538:	413c      	asrs	r4, r7
 800753a:	b2a4      	uxth	r4, r4
 800753c:	fa48 f807 	asr.w	r8, r8, r7
 8007540:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8007544:	f1be 0e01 	subs.w	lr, lr, #1
 8007548:	6074      	str	r4, [r6, #4]
 800754a:	f105 0508 	add.w	r5, r5, #8
 800754e:	f106 0608 	add.w	r6, r6, #8
 8007552:	d1e2      	bne.n	800751a <arm_shift_q15+0xb2>
 8007554:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 8007558:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 800755c:	f013 0303 	ands.w	r3, r3, #3
 8007560:	d0d1      	beq.n	8007506 <arm_shift_q15+0x9e>
 8007562:	f9b0 4000 	ldrsh.w	r4, [r0]
 8007566:	4249      	negs	r1, r1
 8007568:	410c      	asrs	r4, r1
 800756a:	3b01      	subs	r3, #1
 800756c:	8014      	strh	r4, [r2, #0]
 800756e:	d0ca      	beq.n	8007506 <arm_shift_q15+0x9e>
 8007570:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8007574:	2b01      	cmp	r3, #1
 8007576:	fa44 f401 	asr.w	r4, r4, r1
 800757a:	8054      	strh	r4, [r2, #2]
 800757c:	d0c3      	beq.n	8007506 <arm_shift_q15+0x9e>
 800757e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8007582:	fa43 f101 	asr.w	r1, r3, r1
 8007586:	8091      	strh	r1, [r2, #4]
 8007588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800758c <arm_offset_q15>:
 800758c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800758e:	fa1f fc81 	uxth.w	ip, r1
 8007592:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8007596:	ea4c 4c01 	orr.w	ip, ip, r1, lsl #16
 800759a:	d014      	beq.n	80075c6 <arm_offset_q15+0x3a>
 800759c:	4615      	mov	r5, r2
 800759e:	4604      	mov	r4, r0
 80075a0:	4677      	mov	r7, lr
 80075a2:	6826      	ldr	r6, [r4, #0]
 80075a4:	fa96 f61c 	qadd16	r6, r6, ip
 80075a8:	3f01      	subs	r7, #1
 80075aa:	602e      	str	r6, [r5, #0]
 80075ac:	6866      	ldr	r6, [r4, #4]
 80075ae:	fa96 f61c 	qadd16	r6, r6, ip
 80075b2:	f104 0408 	add.w	r4, r4, #8
 80075b6:	606e      	str	r6, [r5, #4]
 80075b8:	f105 0508 	add.w	r5, r5, #8
 80075bc:	d1f1      	bne.n	80075a2 <arm_offset_q15+0x16>
 80075be:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
 80075c2:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
 80075c6:	f013 0303 	ands.w	r3, r3, #3
 80075ca:	d012      	beq.n	80075f2 <arm_offset_q15+0x66>
 80075cc:	3b01      	subs	r3, #1
 80075ce:	f9b0 4000 	ldrsh.w	r4, [r0]
 80075d2:	fa94 f411 	qadd16	r4, r4, r1
 80075d6:	8014      	strh	r4, [r2, #0]
 80075d8:	d00b      	beq.n	80075f2 <arm_offset_q15+0x66>
 80075da:	2b01      	cmp	r3, #1
 80075dc:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80075e0:	fa94 f411 	qadd16	r4, r4, r1
 80075e4:	8054      	strh	r4, [r2, #2]
 80075e6:	d004      	beq.n	80075f2 <arm_offset_q15+0x66>
 80075e8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80075ec:	fa93 f111 	qadd16	r1, r3, r1
 80075f0:	8091      	strh	r1, [r2, #4]
 80075f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075f4 <arm_mult_q15>:
 80075f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f8:	ea5f 0893 	movs.w	r8, r3, lsr #2
 80075fc:	d037      	beq.n	800766e <arm_mult_q15+0x7a>
 80075fe:	4694      	mov	ip, r2
 8007600:	460f      	mov	r7, r1
 8007602:	4606      	mov	r6, r0
 8007604:	46c6      	mov	lr, r8
 8007606:	f8d6 a000 	ldr.w	sl, [r6]
 800760a:	683d      	ldr	r5, [r7, #0]
 800760c:	6874      	ldr	r4, [r6, #4]
 800760e:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8007612:	fb15 f93a 	smultt	r9, r5, sl
 8007616:	ea4f 39e9 	mov.w	r9, r9, asr #15
 800761a:	3608      	adds	r6, #8
 800761c:	3708      	adds	r7, #8
 800761e:	f309 090f 	ssat	r9, #16, r9
 8007622:	fb1a fa05 	smulbb	sl, sl, r5
 8007626:	ea4f 3aea 	mov.w	sl, sl, asr #15
 800762a:	f30a 0a0f 	ssat	sl, #16, sl
 800762e:	fb1b f534 	smultt	r5, fp, r4
 8007632:	13ed      	asrs	r5, r5, #15
 8007634:	f305 050f 	ssat	r5, #16, r5
 8007638:	fb14 f40b 	smulbb	r4, r4, fp
 800763c:	13e4      	asrs	r4, r4, #15
 800763e:	f304 040f 	ssat	r4, #16, r4
 8007642:	fa1f fa8a 	uxth.w	sl, sl
 8007646:	b2a4      	uxth	r4, r4
 8007648:	ea4a 4909 	orr.w	r9, sl, r9, lsl #16
 800764c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007650:	f1be 0e01 	subs.w	lr, lr, #1
 8007654:	f8cc 9000 	str.w	r9, [ip]
 8007658:	f8cc 4004 	str.w	r4, [ip, #4]
 800765c:	f10c 0c08 	add.w	ip, ip, #8
 8007660:	d1d1      	bne.n	8007606 <arm_mult_q15+0x12>
 8007662:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 8007666:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800766a:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 800766e:	f013 0303 	ands.w	r3, r3, #3
 8007672:	d01b      	beq.n	80076ac <arm_mult_q15+0xb8>
 8007674:	880c      	ldrh	r4, [r1, #0]
 8007676:	8805      	ldrh	r5, [r0, #0]
 8007678:	fb14 f405 	smulbb	r4, r4, r5
 800767c:	13e4      	asrs	r4, r4, #15
 800767e:	f304 040f 	ssat	r4, #16, r4
 8007682:	3b01      	subs	r3, #1
 8007684:	8014      	strh	r4, [r2, #0]
 8007686:	d011      	beq.n	80076ac <arm_mult_q15+0xb8>
 8007688:	884c      	ldrh	r4, [r1, #2]
 800768a:	8845      	ldrh	r5, [r0, #2]
 800768c:	fb14 f405 	smulbb	r4, r4, r5
 8007690:	13e4      	asrs	r4, r4, #15
 8007692:	f304 040f 	ssat	r4, #16, r4
 8007696:	2b01      	cmp	r3, #1
 8007698:	8054      	strh	r4, [r2, #2]
 800769a:	d007      	beq.n	80076ac <arm_mult_q15+0xb8>
 800769c:	8883      	ldrh	r3, [r0, #4]
 800769e:	8889      	ldrh	r1, [r1, #4]
 80076a0:	fb13 f301 	smulbb	r3, r3, r1
 80076a4:	13db      	asrs	r3, r3, #15
 80076a6:	f303 030f 	ssat	r3, #16, r3
 80076aa:	8093      	strh	r3, [r2, #4]
 80076ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080076b0 <arm_cfft_radix4by2_q15>:
 80076b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076b4:	084d      	lsrs	r5, r1, #1
 80076b6:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 80076ba:	4616      	mov	r6, r2
 80076bc:	d047      	beq.n	800774e <arm_cfft_radix4by2_q15+0x9e>
 80076be:	4604      	mov	r4, r0
 80076c0:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8007768 <arm_cfft_radix4by2_q15+0xb8>
 80076c4:	4696      	mov	lr, r2
 80076c6:	4638      	mov	r0, r7
 80076c8:	4621      	mov	r1, r4
 80076ca:	462a      	mov	r2, r5
 80076cc:	f04f 0c00 	mov.w	ip, #0
 80076d0:	680b      	ldr	r3, [r1, #0]
 80076d2:	f8d0 a000 	ldr.w	sl, [r0]
 80076d6:	fa93 f32c 	shadd16	r3, r3, ip
 80076da:	fa9a fa2c 	shadd16	sl, sl, ip
 80076de:	fa93 f92a 	shadd16	r9, r3, sl
 80076e2:	fad3 fa1a 	qsub16	sl, r3, sl
 80076e6:	f85e 3b04 	ldr.w	r3, [lr], #4
 80076ea:	f841 9b04 	str.w	r9, [r1], #4
 80076ee:	fb23 f90a 	smuad	r9, r3, sl
 80076f2:	fb43 f31a 	smusdx	r3, r3, sl
 80076f6:	ea03 0308 	and.w	r3, r3, r8
 80076fa:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 80076fe:	3a01      	subs	r2, #1
 8007700:	f840 3b04 	str.w	r3, [r0], #4
 8007704:	d1e4      	bne.n	80076d0 <arm_cfft_radix4by2_q15+0x20>
 8007706:	4629      	mov	r1, r5
 8007708:	2302      	movs	r3, #2
 800770a:	4632      	mov	r2, r6
 800770c:	4620      	mov	r0, r4
 800770e:	f000 f8e9 	bl	80078e4 <arm_radix4_butterfly_q15>
 8007712:	4638      	mov	r0, r7
 8007714:	4629      	mov	r1, r5
 8007716:	4632      	mov	r2, r6
 8007718:	2302      	movs	r3, #2
 800771a:	f000 f8e3 	bl	80078e4 <arm_radix4_butterfly_q15>
 800771e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8007722:	4620      	mov	r0, r4
 8007724:	f9b0 6000 	ldrsh.w	r6, [r0]
 8007728:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800772c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8007730:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8007734:	0076      	lsls	r6, r6, #1
 8007736:	0064      	lsls	r4, r4, #1
 8007738:	0052      	lsls	r2, r2, #1
 800773a:	005b      	lsls	r3, r3, #1
 800773c:	8006      	strh	r6, [r0, #0]
 800773e:	8044      	strh	r4, [r0, #2]
 8007740:	8082      	strh	r2, [r0, #4]
 8007742:	80c3      	strh	r3, [r0, #6]
 8007744:	3008      	adds	r0, #8
 8007746:	4285      	cmp	r5, r0
 8007748:	d1ec      	bne.n	8007724 <arm_cfft_radix4by2_q15+0x74>
 800774a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800774e:	4629      	mov	r1, r5
 8007750:	2302      	movs	r3, #2
 8007752:	f000 f8c7 	bl	80078e4 <arm_radix4_butterfly_q15>
 8007756:	4632      	mov	r2, r6
 8007758:	4629      	mov	r1, r5
 800775a:	4638      	mov	r0, r7
 800775c:	2302      	movs	r3, #2
 800775e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007762:	f000 b8bf 	b.w	80078e4 <arm_radix4_butterfly_q15>
 8007766:	bf00      	nop
 8007768:	ffff0000 	.word	0xffff0000

0800776c <arm_cfft_radix4by2_inverse_q15>:
 800776c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007770:	084d      	lsrs	r5, r1, #1
 8007772:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8007776:	4616      	mov	r6, r2
 8007778:	d047      	beq.n	800780a <arm_cfft_radix4by2_inverse_q15+0x9e>
 800777a:	4604      	mov	r4, r0
 800777c:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8007824 <arm_cfft_radix4by2_inverse_q15+0xb8>
 8007780:	4696      	mov	lr, r2
 8007782:	4638      	mov	r0, r7
 8007784:	4621      	mov	r1, r4
 8007786:	462a      	mov	r2, r5
 8007788:	f04f 0c00 	mov.w	ip, #0
 800778c:	680b      	ldr	r3, [r1, #0]
 800778e:	f8d0 a000 	ldr.w	sl, [r0]
 8007792:	fa93 f32c 	shadd16	r3, r3, ip
 8007796:	fa9a fa2c 	shadd16	sl, sl, ip
 800779a:	fa93 f92a 	shadd16	r9, r3, sl
 800779e:	fad3 fa1a 	qsub16	sl, r3, sl
 80077a2:	f85e 3b04 	ldr.w	r3, [lr], #4
 80077a6:	f841 9b04 	str.w	r9, [r1], #4
 80077aa:	fb43 f90a 	smusd	r9, r3, sl
 80077ae:	fb23 f31a 	smuadx	r3, r3, sl
 80077b2:	ea03 0308 	and.w	r3, r3, r8
 80077b6:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 80077ba:	3a01      	subs	r2, #1
 80077bc:	f840 3b04 	str.w	r3, [r0], #4
 80077c0:	d1e4      	bne.n	800778c <arm_cfft_radix4by2_inverse_q15+0x20>
 80077c2:	4629      	mov	r1, r5
 80077c4:	2302      	movs	r3, #2
 80077c6:	4632      	mov	r2, r6
 80077c8:	4620      	mov	r0, r4
 80077ca:	f000 fa35 	bl	8007c38 <arm_radix4_butterfly_inverse_q15>
 80077ce:	4638      	mov	r0, r7
 80077d0:	4629      	mov	r1, r5
 80077d2:	4632      	mov	r2, r6
 80077d4:	2302      	movs	r3, #2
 80077d6:	f000 fa2f 	bl	8007c38 <arm_radix4_butterfly_inverse_q15>
 80077da:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80077de:	4620      	mov	r0, r4
 80077e0:	f9b0 6000 	ldrsh.w	r6, [r0]
 80077e4:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80077e8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80077ec:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80077f0:	0076      	lsls	r6, r6, #1
 80077f2:	0064      	lsls	r4, r4, #1
 80077f4:	0052      	lsls	r2, r2, #1
 80077f6:	005b      	lsls	r3, r3, #1
 80077f8:	8006      	strh	r6, [r0, #0]
 80077fa:	8044      	strh	r4, [r0, #2]
 80077fc:	8082      	strh	r2, [r0, #4]
 80077fe:	80c3      	strh	r3, [r0, #6]
 8007800:	3008      	adds	r0, #8
 8007802:	4285      	cmp	r5, r0
 8007804:	d1ec      	bne.n	80077e0 <arm_cfft_radix4by2_inverse_q15+0x74>
 8007806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800780a:	4629      	mov	r1, r5
 800780c:	2302      	movs	r3, #2
 800780e:	f000 fa13 	bl	8007c38 <arm_radix4_butterfly_inverse_q15>
 8007812:	4632      	mov	r2, r6
 8007814:	4629      	mov	r1, r5
 8007816:	4638      	mov	r0, r7
 8007818:	2302      	movs	r3, #2
 800781a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800781e:	f000 ba0b 	b.w	8007c38 <arm_radix4_butterfly_inverse_q15>
 8007822:	bf00      	nop
 8007824:	ffff0000 	.word	0xffff0000

08007828 <arm_cfft_q15>:
 8007828:	b5e0      	push	{r5, r6, r7, lr}
 800782a:	2a01      	cmp	r2, #1
 800782c:	460f      	mov	r7, r1
 800782e:	4605      	mov	r5, r0
 8007830:	8801      	ldrh	r1, [r0, #0]
 8007832:	461e      	mov	r6, r3
 8007834:	d02f      	beq.n	8007896 <arm_cfft_q15+0x6e>
 8007836:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800783a:	d026      	beq.n	800788a <arm_cfft_q15+0x62>
 800783c:	d908      	bls.n	8007850 <arm_cfft_q15+0x28>
 800783e:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8007842:	d017      	beq.n	8007874 <arm_cfft_q15+0x4c>
 8007844:	d91b      	bls.n	800787e <arm_cfft_q15+0x56>
 8007846:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800784a:	d01e      	beq.n	800788a <arm_cfft_q15+0x62>
 800784c:	b93e      	cbnz	r6, 800785e <arm_cfft_q15+0x36>
 800784e:	bde0      	pop	{r5, r6, r7, pc}
 8007850:	2940      	cmp	r1, #64	@ 0x40
 8007852:	d01a      	beq.n	800788a <arm_cfft_q15+0x62>
 8007854:	d90a      	bls.n	800786c <arm_cfft_q15+0x44>
 8007856:	2980      	cmp	r1, #128	@ 0x80
 8007858:	d00c      	beq.n	8007874 <arm_cfft_q15+0x4c>
 800785a:	2e00      	cmp	r6, #0
 800785c:	d0f7      	beq.n	800784e <arm_cfft_q15+0x26>
 800785e:	68aa      	ldr	r2, [r5, #8]
 8007860:	89a9      	ldrh	r1, [r5, #12]
 8007862:	4638      	mov	r0, r7
 8007864:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
 8007868:	f000 bb90 	b.w	8007f8c <arm_bitreversal_16>
 800786c:	2910      	cmp	r1, #16
 800786e:	d00c      	beq.n	800788a <arm_cfft_q15+0x62>
 8007870:	2920      	cmp	r1, #32
 8007872:	d1eb      	bne.n	800784c <arm_cfft_q15+0x24>
 8007874:	686a      	ldr	r2, [r5, #4]
 8007876:	4638      	mov	r0, r7
 8007878:	f7ff ff1a 	bl	80076b0 <arm_cfft_radix4by2_q15>
 800787c:	e7e6      	b.n	800784c <arm_cfft_q15+0x24>
 800787e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007882:	d0f7      	beq.n	8007874 <arm_cfft_q15+0x4c>
 8007884:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007888:	d1e0      	bne.n	800784c <arm_cfft_q15+0x24>
 800788a:	686a      	ldr	r2, [r5, #4]
 800788c:	2301      	movs	r3, #1
 800788e:	4638      	mov	r0, r7
 8007890:	f000 f828 	bl	80078e4 <arm_radix4_butterfly_q15>
 8007894:	e7da      	b.n	800784c <arm_cfft_q15+0x24>
 8007896:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800789a:	d01d      	beq.n	80078d8 <arm_cfft_q15+0xb0>
 800789c:	d907      	bls.n	80078ae <arm_cfft_q15+0x86>
 800789e:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80078a2:	d00e      	beq.n	80078c2 <arm_cfft_q15+0x9a>
 80078a4:	d912      	bls.n	80078cc <arm_cfft_q15+0xa4>
 80078a6:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80078aa:	d1cf      	bne.n	800784c <arm_cfft_q15+0x24>
 80078ac:	e014      	b.n	80078d8 <arm_cfft_q15+0xb0>
 80078ae:	2940      	cmp	r1, #64	@ 0x40
 80078b0:	d012      	beq.n	80078d8 <arm_cfft_q15+0xb0>
 80078b2:	d902      	bls.n	80078ba <arm_cfft_q15+0x92>
 80078b4:	2980      	cmp	r1, #128	@ 0x80
 80078b6:	d004      	beq.n	80078c2 <arm_cfft_q15+0x9a>
 80078b8:	e7c8      	b.n	800784c <arm_cfft_q15+0x24>
 80078ba:	2910      	cmp	r1, #16
 80078bc:	d00c      	beq.n	80078d8 <arm_cfft_q15+0xb0>
 80078be:	2920      	cmp	r1, #32
 80078c0:	d1c4      	bne.n	800784c <arm_cfft_q15+0x24>
 80078c2:	686a      	ldr	r2, [r5, #4]
 80078c4:	4638      	mov	r0, r7
 80078c6:	f7ff ff51 	bl	800776c <arm_cfft_radix4by2_inverse_q15>
 80078ca:	e7bf      	b.n	800784c <arm_cfft_q15+0x24>
 80078cc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80078d0:	d0f7      	beq.n	80078c2 <arm_cfft_q15+0x9a>
 80078d2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80078d6:	d1b9      	bne.n	800784c <arm_cfft_q15+0x24>
 80078d8:	686a      	ldr	r2, [r5, #4]
 80078da:	2301      	movs	r3, #1
 80078dc:	4638      	mov	r0, r7
 80078de:	f000 f9ab 	bl	8007c38 <arm_radix4_butterfly_inverse_q15>
 80078e2:	e7b3      	b.n	800784c <arm_cfft_q15+0x24>

080078e4 <arm_radix4_butterfly_q15>:
 80078e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e8:	b093      	sub	sp, #76	@ 0x4c
 80078ea:	f021 0a03 	bic.w	sl, r1, #3
 80078ee:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 80078f2:	9210      	str	r2, [sp, #64]	@ 0x40
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	ea4f 0291 	mov.w	r2, r1, lsr #2
 80078fa:	eb0c 050a 	add.w	r5, ip, sl
 80078fe:	9101      	str	r1, [sp, #4]
 8007900:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007902:	9303      	str	r3, [sp, #12]
 8007904:	4482      	add	sl, r0
 8007906:	9211      	str	r2, [sp, #68]	@ 0x44
 8007908:	f040 8124 	bne.w	8007b54 <arm_radix4_butterfly_q15+0x270>
 800790c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800790e:	f8df e324 	ldr.w	lr, [pc, #804]	@ 8007c34 <arm_radix4_butterfly_q15+0x350>
 8007912:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8007914:	f8cd a008 	str.w	sl, [sp, #8]
 8007918:	4693      	mov	fp, r2
 800791a:	4690      	mov	r8, r2
 800791c:	4657      	mov	r7, sl
 800791e:	2300      	movs	r3, #0
 8007920:	4691      	mov	r9, r2
 8007922:	6830      	ldr	r0, [r6, #0]
 8007924:	f8dc 2000 	ldr.w	r2, [ip]
 8007928:	6839      	ldr	r1, [r7, #0]
 800792a:	fa90 f023 	shadd16	r0, r0, r3
 800792e:	fa91 f123 	shadd16	r1, r1, r3
 8007932:	fa90 f023 	shadd16	r0, r0, r3
 8007936:	fa91 fa23 	shadd16	sl, r1, r3
 800793a:	fa92 f223 	shadd16	r2, r2, r3
 800793e:	6829      	ldr	r1, [r5, #0]
 8007940:	fa92 f223 	shadd16	r2, r2, r3
 8007944:	fa91 f123 	shadd16	r1, r1, r3
 8007948:	fa90 f412 	qadd16	r4, r0, r2
 800794c:	fa91 f123 	shadd16	r1, r1, r3
 8007950:	fa9a f111 	qadd16	r1, sl, r1
 8007954:	fa94 fa21 	shadd16	sl, r4, r1
 8007958:	f846 ab04 	str.w	sl, [r6], #4
 800795c:	fad4 f411 	qsub16	r4, r4, r1
 8007960:	fad0 f212 	qsub16	r2, r0, r2
 8007964:	f85b 1b08 	ldr.w	r1, [fp], #8
 8007968:	fb21 f004 	smuad	r0, r1, r4
 800796c:	fb41 f114 	smusdx	r1, r1, r4
 8007970:	ea01 010e 	and.w	r1, r1, lr
 8007974:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8007978:	6838      	ldr	r0, [r7, #0]
 800797a:	f847 1b04 	str.w	r1, [r7], #4
 800797e:	fa90 f023 	shadd16	r0, r0, r3
 8007982:	682c      	ldr	r4, [r5, #0]
 8007984:	fa90 f023 	shadd16	r0, r0, r3
 8007988:	fa94 f423 	shadd16	r4, r4, r3
 800798c:	f859 1b04 	ldr.w	r1, [r9], #4
 8007990:	fa94 f423 	shadd16	r4, r4, r3
 8007994:	fad0 f014 	qsub16	r0, r0, r4
 8007998:	faa2 f410 	qasx	r4, r2, r0
 800799c:	fae2 f210 	qsax	r2, r2, r0
 80079a0:	fb21 fa02 	smuad	sl, r1, r2
 80079a4:	fb41 f212 	smusdx	r2, r1, r2
 80079a8:	ea02 020e 	and.w	r2, r2, lr
 80079ac:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 80079b0:	f84c 2b04 	str.w	r2, [ip], #4
 80079b4:	f858 2b0c 	ldr.w	r2, [r8], #12
 80079b8:	fb22 f104 	smuad	r1, r2, r4
 80079bc:	fb42 f214 	smusdx	r2, r2, r4
 80079c0:	ea02 020e 	and.w	r2, r2, lr
 80079c4:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 80079c8:	f845 2b04 	str.w	r2, [r5], #4
 80079cc:	9a02      	ldr	r2, [sp, #8]
 80079ce:	42b2      	cmp	r2, r6
 80079d0:	d1a7      	bne.n	8007922 <arm_radix4_butterfly_q15+0x3e>
 80079d2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80079d4:	9b03      	ldr	r3, [sp, #12]
 80079d6:	2a04      	cmp	r2, #4
 80079d8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80079dc:	f240 8127 	bls.w	8007c2e <arm_radix4_butterfly_q15+0x34a>
 80079e0:	f8df a250 	ldr.w	sl, [pc, #592]	@ 8007c34 <arm_radix4_butterfly_q15+0x350>
 80079e4:	920e      	str	r2, [sp, #56]	@ 0x38
 80079e6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80079e8:	9102      	str	r1, [sp, #8]
 80079ea:	4608      	mov	r0, r1
 80079ec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80079f0:	0889      	lsrs	r1, r1, #2
 80079f2:	0092      	lsls	r2, r2, #2
 80079f4:	0086      	lsls	r6, r0, #2
 80079f6:	9801      	ldr	r0, [sp, #4]
 80079f8:	920d      	str	r2, [sp, #52]	@ 0x34
 80079fa:	008c      	lsls	r4, r1, #2
 80079fc:	009a      	lsls	r2, r3, #2
 80079fe:	00db      	lsls	r3, r3, #3
 8007a00:	4288      	cmp	r0, r1
 8007a02:	940a      	str	r4, [sp, #40]	@ 0x28
 8007a04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a06:	4604      	mov	r4, r0
 8007a08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007a0a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8007a0c:	910e      	str	r1, [sp, #56]	@ 0x38
 8007a0e:	bf28      	it	cs
 8007a10:	460c      	movcs	r4, r1
 8007a12:	e9cd 0305 	strd	r0, r3, [sp, #20]
 8007a16:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8007a1a:	9308      	str	r3, [sp, #32]
 8007a1c:	9307      	str	r3, [sp, #28]
 8007a1e:	2300      	movs	r3, #0
 8007a20:	940c      	str	r4, [sp, #48]	@ 0x30
 8007a22:	9104      	str	r1, [sp, #16]
 8007a24:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a26:	9303      	str	r3, [sp, #12]
 8007a28:	9b08      	ldr	r3, [sp, #32]
 8007a2a:	9a05      	ldr	r2, [sp, #20]
 8007a2c:	f8d3 9000 	ldr.w	r9, [r3]
 8007a30:	9b07      	ldr	r3, [sp, #28]
 8007a32:	9f03      	ldr	r7, [sp, #12]
 8007a34:	f8d3 8000 	ldr.w	r8, [r3]
 8007a38:	9b06      	ldr	r3, [sp, #24]
 8007a3a:	f8d3 e000 	ldr.w	lr, [r3]
 8007a3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a40:	4615      	mov	r5, r2
 8007a42:	1898      	adds	r0, r3, r2
 8007a44:	9a04      	ldr	r2, [sp, #16]
 8007a46:	4614      	mov	r4, r2
 8007a48:	1899      	adds	r1, r3, r2
 8007a4a:	682a      	ldr	r2, [r5, #0]
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	f8d0 b000 	ldr.w	fp, [r0]
 8007a52:	fa92 fc13 	qadd16	ip, r2, r3
 8007a56:	fad2 f213 	qsub16	r2, r2, r3
 8007a5a:	680b      	ldr	r3, [r1, #0]
 8007a5c:	fa9b f313 	qadd16	r3, fp, r3
 8007a60:	fa9c fb23 	shadd16	fp, ip, r3
 8007a64:	fadc f323 	shsub16	r3, ip, r3
 8007a68:	f04f 0c00 	mov.w	ip, #0
 8007a6c:	fa9b fb2c 	shadd16	fp, fp, ip
 8007a70:	f8c5 b000 	str.w	fp, [r5]
 8007a74:	4435      	add	r5, r6
 8007a76:	fb28 fb03 	smuad	fp, r8, r3
 8007a7a:	fb48 f313 	smusdx	r3, r8, r3
 8007a7e:	ea03 030a 	and.w	r3, r3, sl
 8007a82:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 8007a86:	f8d0 b000 	ldr.w	fp, [r0]
 8007a8a:	6003      	str	r3, [r0, #0]
 8007a8c:	f8d1 c000 	ldr.w	ip, [r1]
 8007a90:	fadb fc1c 	qsub16	ip, fp, ip
 8007a94:	4430      	add	r0, r6
 8007a96:	faa2 f32c 	shasx	r3, r2, ip
 8007a9a:	fae2 f22c 	shsax	r2, r2, ip
 8007a9e:	fb29 fc02 	smuad	ip, r9, r2
 8007aa2:	fb49 f212 	smusdx	r2, r9, r2
 8007aa6:	ea02 020a 	and.w	r2, r2, sl
 8007aaa:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 8007aae:	6022      	str	r2, [r4, #0]
 8007ab0:	4434      	add	r4, r6
 8007ab2:	fb2e f203 	smuad	r2, lr, r3
 8007ab6:	fb4e f313 	smusdx	r3, lr, r3
 8007aba:	ea03 030a 	and.w	r3, r3, sl
 8007abe:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8007ac2:	9a02      	ldr	r2, [sp, #8]
 8007ac4:	600b      	str	r3, [r1, #0]
 8007ac6:	9b01      	ldr	r3, [sp, #4]
 8007ac8:	4417      	add	r7, r2
 8007aca:	42bb      	cmp	r3, r7
 8007acc:	4431      	add	r1, r6
 8007ace:	d8bc      	bhi.n	8007a4a <arm_radix4_butterfly_q15+0x166>
 8007ad0:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8007ad4:	440a      	add	r2, r1
 8007ad6:	9208      	str	r2, [sp, #32]
 8007ad8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ada:	9a07      	ldr	r2, [sp, #28]
 8007adc:	9b03      	ldr	r3, [sp, #12]
 8007ade:	440a      	add	r2, r1
 8007ae0:	9207      	str	r2, [sp, #28]
 8007ae2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007ae4:	9a06      	ldr	r2, [sp, #24]
 8007ae6:	440a      	add	r2, r1
 8007ae8:	9206      	str	r2, [sp, #24]
 8007aea:	9a05      	ldr	r2, [sp, #20]
 8007aec:	3204      	adds	r2, #4
 8007aee:	9205      	str	r2, [sp, #20]
 8007af0:	9a04      	ldr	r2, [sp, #16]
 8007af2:	3204      	adds	r2, #4
 8007af4:	9204      	str	r2, [sp, #16]
 8007af6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007af8:	3301      	adds	r3, #1
 8007afa:	4293      	cmp	r3, r2
 8007afc:	9303      	str	r3, [sp, #12]
 8007afe:	d393      	bcc.n	8007a28 <arm_radix4_butterfly_q15+0x144>
 8007b00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b04:	2a04      	cmp	r2, #4
 8007b06:	f63f af6e 	bhi.w	80079e6 <arm_radix4_butterfly_q15+0x102>
 8007b0a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8007b0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b0e:	689d      	ldr	r5, [r3, #8]
 8007b10:	68de      	ldr	r6, [r3, #12]
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	6859      	ldr	r1, [r3, #4]
 8007b16:	fa92 f015 	qadd16	r0, r2, r5
 8007b1a:	3c01      	subs	r4, #1
 8007b1c:	fad2 f215 	qsub16	r2, r2, r5
 8007b20:	f103 0310 	add.w	r3, r3, #16
 8007b24:	fa91 f516 	qadd16	r5, r1, r6
 8007b28:	fad1 f116 	qsub16	r1, r1, r6
 8007b2c:	fa90 f625 	shadd16	r6, r0, r5
 8007b30:	fad0 f025 	shsub16	r0, r0, r5
 8007b34:	f843 6c10 	str.w	r6, [r3, #-16]
 8007b38:	f843 0c0c 	str.w	r0, [r3, #-12]
 8007b3c:	fae2 f021 	shsax	r0, r2, r1
 8007b40:	faa2 f221 	shasx	r2, r2, r1
 8007b44:	f843 0c08 	str.w	r0, [r3, #-8]
 8007b48:	f843 2c04 	str.w	r2, [r3, #-4]
 8007b4c:	d1df      	bne.n	8007b0e <arm_radix4_butterfly_q15+0x22a>
 8007b4e:	b013      	add	sp, #76	@ 0x4c
 8007b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b54:	2400      	movs	r4, #0
 8007b56:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 8007c34 <arm_radix4_butterfly_q15+0x350>
 8007b5a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8007b5c:	4623      	mov	r3, r4
 8007b5e:	4680      	mov	r8, r0
 8007b60:	4691      	mov	r9, r2
 8007b62:	f8d8 0000 	ldr.w	r0, [r8]
 8007b66:	f8dc 2000 	ldr.w	r2, [ip]
 8007b6a:	f8da 1000 	ldr.w	r1, [sl]
 8007b6e:	fa90 f023 	shadd16	r0, r0, r3
 8007b72:	fa91 f123 	shadd16	r1, r1, r3
 8007b76:	fa90 f023 	shadd16	r0, r0, r3
 8007b7a:	fa91 fb23 	shadd16	fp, r1, r3
 8007b7e:	fa92 f223 	shadd16	r2, r2, r3
 8007b82:	6829      	ldr	r1, [r5, #0]
 8007b84:	fa92 f223 	shadd16	r2, r2, r3
 8007b88:	fa91 f123 	shadd16	r1, r1, r3
 8007b8c:	fa90 f612 	qadd16	r6, r0, r2
 8007b90:	fa91 f123 	shadd16	r1, r1, r3
 8007b94:	fa9b f111 	qadd16	r1, fp, r1
 8007b98:	fa96 fb21 	shadd16	fp, r6, r1
 8007b9c:	f848 bb04 	str.w	fp, [r8], #4
 8007ba0:	fad6 f611 	qsub16	r6, r6, r1
 8007ba4:	fad0 f212 	qsub16	r2, r0, r2
 8007ba8:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 8007bac:	fb21 f006 	smuad	r0, r1, r6
 8007bb0:	fb41 f116 	smusdx	r1, r1, r6
 8007bb4:	ea01 010e 	and.w	r1, r1, lr
 8007bb8:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8007bbc:	f8da 0000 	ldr.w	r0, [sl]
 8007bc0:	f84a 1b04 	str.w	r1, [sl], #4
 8007bc4:	fa90 f023 	shadd16	r0, r0, r3
 8007bc8:	682e      	ldr	r6, [r5, #0]
 8007bca:	fa90 f023 	shadd16	r0, r0, r3
 8007bce:	fa96 f623 	shadd16	r6, r6, r3
 8007bd2:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8007bd6:	fa96 f623 	shadd16	r6, r6, r3
 8007bda:	fad0 f016 	qsub16	r0, r0, r6
 8007bde:	faa2 f610 	qasx	r6, r2, r0
 8007be2:	fae2 f210 	qsax	r2, r2, r0
 8007be6:	fb21 fb02 	smuad	fp, r1, r2
 8007bea:	fb41 f212 	smusdx	r2, r1, r2
 8007bee:	ea02 020e 	and.w	r2, r2, lr
 8007bf2:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 8007bf6:	f84c 2b04 	str.w	r2, [ip], #4
 8007bfa:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8007bfe:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8007c02:	fb22 f106 	smuad	r1, r2, r6
 8007c06:	fb42 f216 	smusdx	r2, r2, r6
 8007c0a:	ea02 020e 	and.w	r2, r2, lr
 8007c0e:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8007c12:	f845 2b04 	str.w	r2, [r5], #4
 8007c16:	9a03      	ldr	r2, [sp, #12]
 8007c18:	f1b9 0901 	subs.w	r9, r9, #1
 8007c1c:	4414      	add	r4, r2
 8007c1e:	d1a0      	bne.n	8007b62 <arm_radix4_butterfly_q15+0x27e>
 8007c20:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007c22:	9b03      	ldr	r3, [sp, #12]
 8007c24:	2a04      	cmp	r2, #4
 8007c26:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007c2a:	f63f aed9 	bhi.w	80079e0 <arm_radix4_butterfly_q15+0xfc>
 8007c2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c30:	4614      	mov	r4, r2
 8007c32:	e76c      	b.n	8007b0e <arm_radix4_butterfly_q15+0x22a>
 8007c34:	ffff0000 	.word	0xffff0000

08007c38 <arm_radix4_butterfly_inverse_q15>:
 8007c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3c:	b093      	sub	sp, #76	@ 0x4c
 8007c3e:	f021 0a03 	bic.w	sl, r1, #3
 8007c42:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 8007c46:	9210      	str	r2, [sp, #64]	@ 0x40
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	ea4f 0291 	mov.w	r2, r1, lsr #2
 8007c4e:	eb0c 050a 	add.w	r5, ip, sl
 8007c52:	9101      	str	r1, [sp, #4]
 8007c54:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007c56:	9303      	str	r3, [sp, #12]
 8007c58:	4482      	add	sl, r0
 8007c5a:	9211      	str	r2, [sp, #68]	@ 0x44
 8007c5c:	f040 8124 	bne.w	8007ea8 <arm_radix4_butterfly_inverse_q15+0x270>
 8007c60:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007c62:	f8df e324 	ldr.w	lr, [pc, #804]	@ 8007f88 <arm_radix4_butterfly_inverse_q15+0x350>
 8007c66:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8007c68:	f8cd a008 	str.w	sl, [sp, #8]
 8007c6c:	4693      	mov	fp, r2
 8007c6e:	4690      	mov	r8, r2
 8007c70:	4657      	mov	r7, sl
 8007c72:	2300      	movs	r3, #0
 8007c74:	4691      	mov	r9, r2
 8007c76:	6830      	ldr	r0, [r6, #0]
 8007c78:	f8dc 2000 	ldr.w	r2, [ip]
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	fa90 f023 	shadd16	r0, r0, r3
 8007c82:	fa91 f123 	shadd16	r1, r1, r3
 8007c86:	fa90 f023 	shadd16	r0, r0, r3
 8007c8a:	fa91 fa23 	shadd16	sl, r1, r3
 8007c8e:	fa92 f223 	shadd16	r2, r2, r3
 8007c92:	6829      	ldr	r1, [r5, #0]
 8007c94:	fa92 f223 	shadd16	r2, r2, r3
 8007c98:	fa91 f123 	shadd16	r1, r1, r3
 8007c9c:	fa90 f412 	qadd16	r4, r0, r2
 8007ca0:	fa91 f123 	shadd16	r1, r1, r3
 8007ca4:	fa9a f111 	qadd16	r1, sl, r1
 8007ca8:	fa94 fa21 	shadd16	sl, r4, r1
 8007cac:	f846 ab04 	str.w	sl, [r6], #4
 8007cb0:	fad4 f411 	qsub16	r4, r4, r1
 8007cb4:	fad0 f212 	qsub16	r2, r0, r2
 8007cb8:	f85b 1b08 	ldr.w	r1, [fp], #8
 8007cbc:	fb41 f004 	smusd	r0, r1, r4
 8007cc0:	fb21 f114 	smuadx	r1, r1, r4
 8007cc4:	ea01 010e 	and.w	r1, r1, lr
 8007cc8:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8007ccc:	6838      	ldr	r0, [r7, #0]
 8007cce:	f847 1b04 	str.w	r1, [r7], #4
 8007cd2:	fa90 f023 	shadd16	r0, r0, r3
 8007cd6:	682c      	ldr	r4, [r5, #0]
 8007cd8:	fa90 f023 	shadd16	r0, r0, r3
 8007cdc:	fa94 f423 	shadd16	r4, r4, r3
 8007ce0:	f859 1b04 	ldr.w	r1, [r9], #4
 8007ce4:	fa94 f423 	shadd16	r4, r4, r3
 8007ce8:	fad0 f014 	qsub16	r0, r0, r4
 8007cec:	fae2 f410 	qsax	r4, r2, r0
 8007cf0:	faa2 f210 	qasx	r2, r2, r0
 8007cf4:	fb41 fa02 	smusd	sl, r1, r2
 8007cf8:	fb21 f212 	smuadx	r2, r1, r2
 8007cfc:	ea02 020e 	and.w	r2, r2, lr
 8007d00:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 8007d04:	f84c 2b04 	str.w	r2, [ip], #4
 8007d08:	f858 2b0c 	ldr.w	r2, [r8], #12
 8007d0c:	fb42 f104 	smusd	r1, r2, r4
 8007d10:	fb22 f214 	smuadx	r2, r2, r4
 8007d14:	ea02 020e 	and.w	r2, r2, lr
 8007d18:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8007d1c:	f845 2b04 	str.w	r2, [r5], #4
 8007d20:	9a02      	ldr	r2, [sp, #8]
 8007d22:	42b2      	cmp	r2, r6
 8007d24:	d1a7      	bne.n	8007c76 <arm_radix4_butterfly_inverse_q15+0x3e>
 8007d26:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007d28:	9b03      	ldr	r3, [sp, #12]
 8007d2a:	2a04      	cmp	r2, #4
 8007d2c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007d30:	f240 8127 	bls.w	8007f82 <arm_radix4_butterfly_inverse_q15+0x34a>
 8007d34:	f8df a250 	ldr.w	sl, [pc, #592]	@ 8007f88 <arm_radix4_butterfly_inverse_q15+0x350>
 8007d38:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d3a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007d3c:	9102      	str	r1, [sp, #8]
 8007d3e:	4608      	mov	r0, r1
 8007d40:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007d44:	0889      	lsrs	r1, r1, #2
 8007d46:	0092      	lsls	r2, r2, #2
 8007d48:	0086      	lsls	r6, r0, #2
 8007d4a:	9801      	ldr	r0, [sp, #4]
 8007d4c:	920d      	str	r2, [sp, #52]	@ 0x34
 8007d4e:	008c      	lsls	r4, r1, #2
 8007d50:	009a      	lsls	r2, r3, #2
 8007d52:	00db      	lsls	r3, r3, #3
 8007d54:	4288      	cmp	r0, r1
 8007d56:	940a      	str	r4, [sp, #40]	@ 0x28
 8007d58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007d5e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8007d60:	910e      	str	r1, [sp, #56]	@ 0x38
 8007d62:	bf28      	it	cs
 8007d64:	460c      	movcs	r4, r1
 8007d66:	e9cd 0305 	strd	r0, r3, [sp, #20]
 8007d6a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8007d6e:	9308      	str	r3, [sp, #32]
 8007d70:	9307      	str	r3, [sp, #28]
 8007d72:	2300      	movs	r3, #0
 8007d74:	940c      	str	r4, [sp, #48]	@ 0x30
 8007d76:	9104      	str	r1, [sp, #16]
 8007d78:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d7a:	9303      	str	r3, [sp, #12]
 8007d7c:	9b08      	ldr	r3, [sp, #32]
 8007d7e:	9a05      	ldr	r2, [sp, #20]
 8007d80:	f8d3 9000 	ldr.w	r9, [r3]
 8007d84:	9b07      	ldr	r3, [sp, #28]
 8007d86:	9f03      	ldr	r7, [sp, #12]
 8007d88:	f8d3 8000 	ldr.w	r8, [r3]
 8007d8c:	9b06      	ldr	r3, [sp, #24]
 8007d8e:	f8d3 e000 	ldr.w	lr, [r3]
 8007d92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d94:	4615      	mov	r5, r2
 8007d96:	1898      	adds	r0, r3, r2
 8007d98:	9a04      	ldr	r2, [sp, #16]
 8007d9a:	4614      	mov	r4, r2
 8007d9c:	1899      	adds	r1, r3, r2
 8007d9e:	682a      	ldr	r2, [r5, #0]
 8007da0:	6823      	ldr	r3, [r4, #0]
 8007da2:	f8d0 b000 	ldr.w	fp, [r0]
 8007da6:	fa92 fc13 	qadd16	ip, r2, r3
 8007daa:	fad2 f213 	qsub16	r2, r2, r3
 8007dae:	680b      	ldr	r3, [r1, #0]
 8007db0:	fa9b f313 	qadd16	r3, fp, r3
 8007db4:	fa9c fb23 	shadd16	fp, ip, r3
 8007db8:	fadc f323 	shsub16	r3, ip, r3
 8007dbc:	f04f 0c00 	mov.w	ip, #0
 8007dc0:	fa9b fb2c 	shadd16	fp, fp, ip
 8007dc4:	f8c5 b000 	str.w	fp, [r5]
 8007dc8:	4435      	add	r5, r6
 8007dca:	fb48 fb03 	smusd	fp, r8, r3
 8007dce:	fb28 f313 	smuadx	r3, r8, r3
 8007dd2:	ea03 030a 	and.w	r3, r3, sl
 8007dd6:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 8007dda:	f8d0 b000 	ldr.w	fp, [r0]
 8007dde:	6003      	str	r3, [r0, #0]
 8007de0:	f8d1 c000 	ldr.w	ip, [r1]
 8007de4:	fadb fc1c 	qsub16	ip, fp, ip
 8007de8:	4430      	add	r0, r6
 8007dea:	fae2 f32c 	shsax	r3, r2, ip
 8007dee:	faa2 f22c 	shasx	r2, r2, ip
 8007df2:	fb49 fc02 	smusd	ip, r9, r2
 8007df6:	fb29 f212 	smuadx	r2, r9, r2
 8007dfa:	ea02 020a 	and.w	r2, r2, sl
 8007dfe:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 8007e02:	6022      	str	r2, [r4, #0]
 8007e04:	4434      	add	r4, r6
 8007e06:	fb4e f203 	smusd	r2, lr, r3
 8007e0a:	fb2e f313 	smuadx	r3, lr, r3
 8007e0e:	ea03 030a 	and.w	r3, r3, sl
 8007e12:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8007e16:	9a02      	ldr	r2, [sp, #8]
 8007e18:	600b      	str	r3, [r1, #0]
 8007e1a:	9b01      	ldr	r3, [sp, #4]
 8007e1c:	4417      	add	r7, r2
 8007e1e:	42bb      	cmp	r3, r7
 8007e20:	4431      	add	r1, r6
 8007e22:	d8bc      	bhi.n	8007d9e <arm_radix4_butterfly_inverse_q15+0x166>
 8007e24:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8007e28:	440a      	add	r2, r1
 8007e2a:	9208      	str	r2, [sp, #32]
 8007e2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e2e:	9a07      	ldr	r2, [sp, #28]
 8007e30:	9b03      	ldr	r3, [sp, #12]
 8007e32:	440a      	add	r2, r1
 8007e34:	9207      	str	r2, [sp, #28]
 8007e36:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007e38:	9a06      	ldr	r2, [sp, #24]
 8007e3a:	440a      	add	r2, r1
 8007e3c:	9206      	str	r2, [sp, #24]
 8007e3e:	9a05      	ldr	r2, [sp, #20]
 8007e40:	3204      	adds	r2, #4
 8007e42:	9205      	str	r2, [sp, #20]
 8007e44:	9a04      	ldr	r2, [sp, #16]
 8007e46:	3204      	adds	r2, #4
 8007e48:	9204      	str	r2, [sp, #16]
 8007e4a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	9303      	str	r3, [sp, #12]
 8007e52:	d393      	bcc.n	8007d7c <arm_radix4_butterfly_inverse_q15+0x144>
 8007e54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e58:	2a04      	cmp	r2, #4
 8007e5a:	f63f af6e 	bhi.w	8007d3a <arm_radix4_butterfly_inverse_q15+0x102>
 8007e5e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8007e60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e62:	689d      	ldr	r5, [r3, #8]
 8007e64:	68de      	ldr	r6, [r3, #12]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	6859      	ldr	r1, [r3, #4]
 8007e6a:	fa92 f015 	qadd16	r0, r2, r5
 8007e6e:	3c01      	subs	r4, #1
 8007e70:	fad2 f215 	qsub16	r2, r2, r5
 8007e74:	f103 0310 	add.w	r3, r3, #16
 8007e78:	fa91 f516 	qadd16	r5, r1, r6
 8007e7c:	fad1 f116 	qsub16	r1, r1, r6
 8007e80:	fa90 f625 	shadd16	r6, r0, r5
 8007e84:	fad0 f025 	shsub16	r0, r0, r5
 8007e88:	f843 6c10 	str.w	r6, [r3, #-16]
 8007e8c:	f843 0c0c 	str.w	r0, [r3, #-12]
 8007e90:	faa2 f021 	shasx	r0, r2, r1
 8007e94:	fae2 f221 	shsax	r2, r2, r1
 8007e98:	f843 0c08 	str.w	r0, [r3, #-8]
 8007e9c:	f843 2c04 	str.w	r2, [r3, #-4]
 8007ea0:	d1df      	bne.n	8007e62 <arm_radix4_butterfly_inverse_q15+0x22a>
 8007ea2:	b013      	add	sp, #76	@ 0x4c
 8007ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ea8:	2400      	movs	r4, #0
 8007eaa:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 8007f88 <arm_radix4_butterfly_inverse_q15+0x350>
 8007eae:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8007eb0:	4623      	mov	r3, r4
 8007eb2:	4680      	mov	r8, r0
 8007eb4:	4691      	mov	r9, r2
 8007eb6:	f8d8 0000 	ldr.w	r0, [r8]
 8007eba:	f8dc 2000 	ldr.w	r2, [ip]
 8007ebe:	f8da 1000 	ldr.w	r1, [sl]
 8007ec2:	fa90 f023 	shadd16	r0, r0, r3
 8007ec6:	fa91 f123 	shadd16	r1, r1, r3
 8007eca:	fa90 f023 	shadd16	r0, r0, r3
 8007ece:	fa91 fb23 	shadd16	fp, r1, r3
 8007ed2:	fa92 f223 	shadd16	r2, r2, r3
 8007ed6:	6829      	ldr	r1, [r5, #0]
 8007ed8:	fa92 f223 	shadd16	r2, r2, r3
 8007edc:	fa91 f123 	shadd16	r1, r1, r3
 8007ee0:	fa90 f612 	qadd16	r6, r0, r2
 8007ee4:	fa91 f123 	shadd16	r1, r1, r3
 8007ee8:	fa9b f111 	qadd16	r1, fp, r1
 8007eec:	fa96 fb21 	shadd16	fp, r6, r1
 8007ef0:	f848 bb04 	str.w	fp, [r8], #4
 8007ef4:	fad6 f611 	qsub16	r6, r6, r1
 8007ef8:	fad0 f212 	qsub16	r2, r0, r2
 8007efc:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 8007f00:	fb41 f006 	smusd	r0, r1, r6
 8007f04:	fb21 f116 	smuadx	r1, r1, r6
 8007f08:	ea01 010e 	and.w	r1, r1, lr
 8007f0c:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8007f10:	f8da 0000 	ldr.w	r0, [sl]
 8007f14:	f84a 1b04 	str.w	r1, [sl], #4
 8007f18:	fa90 f023 	shadd16	r0, r0, r3
 8007f1c:	682e      	ldr	r6, [r5, #0]
 8007f1e:	fa90 f023 	shadd16	r0, r0, r3
 8007f22:	fa96 f623 	shadd16	r6, r6, r3
 8007f26:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8007f2a:	fa96 f623 	shadd16	r6, r6, r3
 8007f2e:	fad0 f016 	qsub16	r0, r0, r6
 8007f32:	fae2 f610 	qsax	r6, r2, r0
 8007f36:	faa2 f210 	qasx	r2, r2, r0
 8007f3a:	fb41 fb02 	smusd	fp, r1, r2
 8007f3e:	fb21 f212 	smuadx	r2, r1, r2
 8007f42:	ea02 020e 	and.w	r2, r2, lr
 8007f46:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 8007f4a:	f84c 2b04 	str.w	r2, [ip], #4
 8007f4e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8007f52:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8007f56:	fb42 f106 	smusd	r1, r2, r6
 8007f5a:	fb22 f216 	smuadx	r2, r2, r6
 8007f5e:	ea02 020e 	and.w	r2, r2, lr
 8007f62:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8007f66:	f845 2b04 	str.w	r2, [r5], #4
 8007f6a:	9a03      	ldr	r2, [sp, #12]
 8007f6c:	f1b9 0901 	subs.w	r9, r9, #1
 8007f70:	4414      	add	r4, r2
 8007f72:	d1a0      	bne.n	8007eb6 <arm_radix4_butterfly_inverse_q15+0x27e>
 8007f74:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007f76:	9b03      	ldr	r3, [sp, #12]
 8007f78:	2a04      	cmp	r2, #4
 8007f7a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007f7e:	f63f aed9 	bhi.w	8007d34 <arm_radix4_butterfly_inverse_q15+0xfc>
 8007f82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f84:	4614      	mov	r4, r2
 8007f86:	e76c      	b.n	8007e62 <arm_radix4_butterfly_inverse_q15+0x22a>
 8007f88:	ffff0000 	.word	0xffff0000

08007f8c <arm_bitreversal_16>:
 8007f8c:	b1f1      	cbz	r1, 8007fcc <arm_bitreversal_16+0x40>
 8007f8e:	b4f0      	push	{r4, r5, r6, r7}
 8007f90:	2400      	movs	r4, #0
 8007f92:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8007f96:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8007f9a:	886d      	ldrh	r5, [r5, #2]
 8007f9c:	08ad      	lsrs	r5, r5, #2
 8007f9e:	089b      	lsrs	r3, r3, #2
 8007fa0:	f830 6015 	ldrh.w	r6, [r0, r5, lsl #1]
 8007fa4:	f830 7013 	ldrh.w	r7, [r0, r3, lsl #1]
 8007fa8:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 8007fac:	006e      	lsls	r6, r5, #1
 8007fae:	005b      	lsls	r3, r3, #1
 8007fb0:	f820 7015 	strh.w	r7, [r0, r5, lsl #1]
 8007fb4:	3302      	adds	r3, #2
 8007fb6:	1cb5      	adds	r5, r6, #2
 8007fb8:	3402      	adds	r4, #2
 8007fba:	b2a4      	uxth	r4, r4
 8007fbc:	5ac6      	ldrh	r6, [r0, r3]
 8007fbe:	5b47      	ldrh	r7, [r0, r5]
 8007fc0:	52c7      	strh	r7, [r0, r3]
 8007fc2:	42a1      	cmp	r1, r4
 8007fc4:	5346      	strh	r6, [r0, r5]
 8007fc6:	d8e4      	bhi.n	8007f92 <arm_bitreversal_16+0x6>
 8007fc8:	bcf0      	pop	{r4, r5, r6, r7}
 8007fca:	4770      	bx	lr
 8007fcc:	4770      	bx	lr
 8007fce:	bf00      	nop

08007fd0 <__cvt>:
 8007fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd4:	ec57 6b10 	vmov	r6, r7, d0
 8007fd8:	2f00      	cmp	r7, #0
 8007fda:	460c      	mov	r4, r1
 8007fdc:	4619      	mov	r1, r3
 8007fde:	463b      	mov	r3, r7
 8007fe0:	bfbb      	ittet	lt
 8007fe2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007fe6:	461f      	movlt	r7, r3
 8007fe8:	2300      	movge	r3, #0
 8007fea:	232d      	movlt	r3, #45	@ 0x2d
 8007fec:	700b      	strb	r3, [r1, #0]
 8007fee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ff0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007ff4:	4691      	mov	r9, r2
 8007ff6:	f023 0820 	bic.w	r8, r3, #32
 8007ffa:	bfbc      	itt	lt
 8007ffc:	4632      	movlt	r2, r6
 8007ffe:	4616      	movlt	r6, r2
 8008000:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008004:	d005      	beq.n	8008012 <__cvt+0x42>
 8008006:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800800a:	d100      	bne.n	800800e <__cvt+0x3e>
 800800c:	3401      	adds	r4, #1
 800800e:	2102      	movs	r1, #2
 8008010:	e000      	b.n	8008014 <__cvt+0x44>
 8008012:	2103      	movs	r1, #3
 8008014:	ab03      	add	r3, sp, #12
 8008016:	9301      	str	r3, [sp, #4]
 8008018:	ab02      	add	r3, sp, #8
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	ec47 6b10 	vmov	d0, r6, r7
 8008020:	4653      	mov	r3, sl
 8008022:	4622      	mov	r2, r4
 8008024:	f000 fefc 	bl	8008e20 <_dtoa_r>
 8008028:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800802c:	4605      	mov	r5, r0
 800802e:	d119      	bne.n	8008064 <__cvt+0x94>
 8008030:	f019 0f01 	tst.w	r9, #1
 8008034:	d00e      	beq.n	8008054 <__cvt+0x84>
 8008036:	eb00 0904 	add.w	r9, r0, r4
 800803a:	2200      	movs	r2, #0
 800803c:	2300      	movs	r3, #0
 800803e:	4630      	mov	r0, r6
 8008040:	4639      	mov	r1, r7
 8008042:	f7f8 fd51 	bl	8000ae8 <__aeabi_dcmpeq>
 8008046:	b108      	cbz	r0, 800804c <__cvt+0x7c>
 8008048:	f8cd 900c 	str.w	r9, [sp, #12]
 800804c:	2230      	movs	r2, #48	@ 0x30
 800804e:	9b03      	ldr	r3, [sp, #12]
 8008050:	454b      	cmp	r3, r9
 8008052:	d31e      	bcc.n	8008092 <__cvt+0xc2>
 8008054:	9b03      	ldr	r3, [sp, #12]
 8008056:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008058:	1b5b      	subs	r3, r3, r5
 800805a:	4628      	mov	r0, r5
 800805c:	6013      	str	r3, [r2, #0]
 800805e:	b004      	add	sp, #16
 8008060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008064:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008068:	eb00 0904 	add.w	r9, r0, r4
 800806c:	d1e5      	bne.n	800803a <__cvt+0x6a>
 800806e:	7803      	ldrb	r3, [r0, #0]
 8008070:	2b30      	cmp	r3, #48	@ 0x30
 8008072:	d10a      	bne.n	800808a <__cvt+0xba>
 8008074:	2200      	movs	r2, #0
 8008076:	2300      	movs	r3, #0
 8008078:	4630      	mov	r0, r6
 800807a:	4639      	mov	r1, r7
 800807c:	f7f8 fd34 	bl	8000ae8 <__aeabi_dcmpeq>
 8008080:	b918      	cbnz	r0, 800808a <__cvt+0xba>
 8008082:	f1c4 0401 	rsb	r4, r4, #1
 8008086:	f8ca 4000 	str.w	r4, [sl]
 800808a:	f8da 3000 	ldr.w	r3, [sl]
 800808e:	4499      	add	r9, r3
 8008090:	e7d3      	b.n	800803a <__cvt+0x6a>
 8008092:	1c59      	adds	r1, r3, #1
 8008094:	9103      	str	r1, [sp, #12]
 8008096:	701a      	strb	r2, [r3, #0]
 8008098:	e7d9      	b.n	800804e <__cvt+0x7e>

0800809a <__exponent>:
 800809a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800809c:	2900      	cmp	r1, #0
 800809e:	bfba      	itte	lt
 80080a0:	4249      	neglt	r1, r1
 80080a2:	232d      	movlt	r3, #45	@ 0x2d
 80080a4:	232b      	movge	r3, #43	@ 0x2b
 80080a6:	2909      	cmp	r1, #9
 80080a8:	7002      	strb	r2, [r0, #0]
 80080aa:	7043      	strb	r3, [r0, #1]
 80080ac:	dd29      	ble.n	8008102 <__exponent+0x68>
 80080ae:	f10d 0307 	add.w	r3, sp, #7
 80080b2:	461d      	mov	r5, r3
 80080b4:	270a      	movs	r7, #10
 80080b6:	461a      	mov	r2, r3
 80080b8:	fbb1 f6f7 	udiv	r6, r1, r7
 80080bc:	fb07 1416 	mls	r4, r7, r6, r1
 80080c0:	3430      	adds	r4, #48	@ 0x30
 80080c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80080c6:	460c      	mov	r4, r1
 80080c8:	2c63      	cmp	r4, #99	@ 0x63
 80080ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80080ce:	4631      	mov	r1, r6
 80080d0:	dcf1      	bgt.n	80080b6 <__exponent+0x1c>
 80080d2:	3130      	adds	r1, #48	@ 0x30
 80080d4:	1e94      	subs	r4, r2, #2
 80080d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80080da:	1c41      	adds	r1, r0, #1
 80080dc:	4623      	mov	r3, r4
 80080de:	42ab      	cmp	r3, r5
 80080e0:	d30a      	bcc.n	80080f8 <__exponent+0x5e>
 80080e2:	f10d 0309 	add.w	r3, sp, #9
 80080e6:	1a9b      	subs	r3, r3, r2
 80080e8:	42ac      	cmp	r4, r5
 80080ea:	bf88      	it	hi
 80080ec:	2300      	movhi	r3, #0
 80080ee:	3302      	adds	r3, #2
 80080f0:	4403      	add	r3, r0
 80080f2:	1a18      	subs	r0, r3, r0
 80080f4:	b003      	add	sp, #12
 80080f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80080fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008100:	e7ed      	b.n	80080de <__exponent+0x44>
 8008102:	2330      	movs	r3, #48	@ 0x30
 8008104:	3130      	adds	r1, #48	@ 0x30
 8008106:	7083      	strb	r3, [r0, #2]
 8008108:	70c1      	strb	r1, [r0, #3]
 800810a:	1d03      	adds	r3, r0, #4
 800810c:	e7f1      	b.n	80080f2 <__exponent+0x58>
	...

08008110 <_printf_float>:
 8008110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008114:	b08d      	sub	sp, #52	@ 0x34
 8008116:	460c      	mov	r4, r1
 8008118:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800811c:	4616      	mov	r6, r2
 800811e:	461f      	mov	r7, r3
 8008120:	4605      	mov	r5, r0
 8008122:	f000 fd6f 	bl	8008c04 <_localeconv_r>
 8008126:	6803      	ldr	r3, [r0, #0]
 8008128:	9304      	str	r3, [sp, #16]
 800812a:	4618      	mov	r0, r3
 800812c:	f7f8 f8b0 	bl	8000290 <strlen>
 8008130:	2300      	movs	r3, #0
 8008132:	930a      	str	r3, [sp, #40]	@ 0x28
 8008134:	f8d8 3000 	ldr.w	r3, [r8]
 8008138:	9005      	str	r0, [sp, #20]
 800813a:	3307      	adds	r3, #7
 800813c:	f023 0307 	bic.w	r3, r3, #7
 8008140:	f103 0208 	add.w	r2, r3, #8
 8008144:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008148:	f8d4 b000 	ldr.w	fp, [r4]
 800814c:	f8c8 2000 	str.w	r2, [r8]
 8008150:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008154:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008158:	9307      	str	r3, [sp, #28]
 800815a:	f8cd 8018 	str.w	r8, [sp, #24]
 800815e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008162:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008166:	4b9c      	ldr	r3, [pc, #624]	@ (80083d8 <_printf_float+0x2c8>)
 8008168:	f04f 32ff 	mov.w	r2, #4294967295
 800816c:	f7f8 fcee 	bl	8000b4c <__aeabi_dcmpun>
 8008170:	bb70      	cbnz	r0, 80081d0 <_printf_float+0xc0>
 8008172:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008176:	4b98      	ldr	r3, [pc, #608]	@ (80083d8 <_printf_float+0x2c8>)
 8008178:	f04f 32ff 	mov.w	r2, #4294967295
 800817c:	f7f8 fcc8 	bl	8000b10 <__aeabi_dcmple>
 8008180:	bb30      	cbnz	r0, 80081d0 <_printf_float+0xc0>
 8008182:	2200      	movs	r2, #0
 8008184:	2300      	movs	r3, #0
 8008186:	4640      	mov	r0, r8
 8008188:	4649      	mov	r1, r9
 800818a:	f7f8 fcb7 	bl	8000afc <__aeabi_dcmplt>
 800818e:	b110      	cbz	r0, 8008196 <_printf_float+0x86>
 8008190:	232d      	movs	r3, #45	@ 0x2d
 8008192:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008196:	4a91      	ldr	r2, [pc, #580]	@ (80083dc <_printf_float+0x2cc>)
 8008198:	4b91      	ldr	r3, [pc, #580]	@ (80083e0 <_printf_float+0x2d0>)
 800819a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800819e:	bf94      	ite	ls
 80081a0:	4690      	movls	r8, r2
 80081a2:	4698      	movhi	r8, r3
 80081a4:	2303      	movs	r3, #3
 80081a6:	6123      	str	r3, [r4, #16]
 80081a8:	f02b 0304 	bic.w	r3, fp, #4
 80081ac:	6023      	str	r3, [r4, #0]
 80081ae:	f04f 0900 	mov.w	r9, #0
 80081b2:	9700      	str	r7, [sp, #0]
 80081b4:	4633      	mov	r3, r6
 80081b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80081b8:	4621      	mov	r1, r4
 80081ba:	4628      	mov	r0, r5
 80081bc:	f000 f9d2 	bl	8008564 <_printf_common>
 80081c0:	3001      	adds	r0, #1
 80081c2:	f040 808d 	bne.w	80082e0 <_printf_float+0x1d0>
 80081c6:	f04f 30ff 	mov.w	r0, #4294967295
 80081ca:	b00d      	add	sp, #52	@ 0x34
 80081cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d0:	4642      	mov	r2, r8
 80081d2:	464b      	mov	r3, r9
 80081d4:	4640      	mov	r0, r8
 80081d6:	4649      	mov	r1, r9
 80081d8:	f7f8 fcb8 	bl	8000b4c <__aeabi_dcmpun>
 80081dc:	b140      	cbz	r0, 80081f0 <_printf_float+0xe0>
 80081de:	464b      	mov	r3, r9
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	bfbc      	itt	lt
 80081e4:	232d      	movlt	r3, #45	@ 0x2d
 80081e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80081ea:	4a7e      	ldr	r2, [pc, #504]	@ (80083e4 <_printf_float+0x2d4>)
 80081ec:	4b7e      	ldr	r3, [pc, #504]	@ (80083e8 <_printf_float+0x2d8>)
 80081ee:	e7d4      	b.n	800819a <_printf_float+0x8a>
 80081f0:	6863      	ldr	r3, [r4, #4]
 80081f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80081f6:	9206      	str	r2, [sp, #24]
 80081f8:	1c5a      	adds	r2, r3, #1
 80081fa:	d13b      	bne.n	8008274 <_printf_float+0x164>
 80081fc:	2306      	movs	r3, #6
 80081fe:	6063      	str	r3, [r4, #4]
 8008200:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008204:	2300      	movs	r3, #0
 8008206:	6022      	str	r2, [r4, #0]
 8008208:	9303      	str	r3, [sp, #12]
 800820a:	ab0a      	add	r3, sp, #40	@ 0x28
 800820c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008210:	ab09      	add	r3, sp, #36	@ 0x24
 8008212:	9300      	str	r3, [sp, #0]
 8008214:	6861      	ldr	r1, [r4, #4]
 8008216:	ec49 8b10 	vmov	d0, r8, r9
 800821a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800821e:	4628      	mov	r0, r5
 8008220:	f7ff fed6 	bl	8007fd0 <__cvt>
 8008224:	9b06      	ldr	r3, [sp, #24]
 8008226:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008228:	2b47      	cmp	r3, #71	@ 0x47
 800822a:	4680      	mov	r8, r0
 800822c:	d129      	bne.n	8008282 <_printf_float+0x172>
 800822e:	1cc8      	adds	r0, r1, #3
 8008230:	db02      	blt.n	8008238 <_printf_float+0x128>
 8008232:	6863      	ldr	r3, [r4, #4]
 8008234:	4299      	cmp	r1, r3
 8008236:	dd41      	ble.n	80082bc <_printf_float+0x1ac>
 8008238:	f1aa 0a02 	sub.w	sl, sl, #2
 800823c:	fa5f fa8a 	uxtb.w	sl, sl
 8008240:	3901      	subs	r1, #1
 8008242:	4652      	mov	r2, sl
 8008244:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008248:	9109      	str	r1, [sp, #36]	@ 0x24
 800824a:	f7ff ff26 	bl	800809a <__exponent>
 800824e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008250:	1813      	adds	r3, r2, r0
 8008252:	2a01      	cmp	r2, #1
 8008254:	4681      	mov	r9, r0
 8008256:	6123      	str	r3, [r4, #16]
 8008258:	dc02      	bgt.n	8008260 <_printf_float+0x150>
 800825a:	6822      	ldr	r2, [r4, #0]
 800825c:	07d2      	lsls	r2, r2, #31
 800825e:	d501      	bpl.n	8008264 <_printf_float+0x154>
 8008260:	3301      	adds	r3, #1
 8008262:	6123      	str	r3, [r4, #16]
 8008264:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008268:	2b00      	cmp	r3, #0
 800826a:	d0a2      	beq.n	80081b2 <_printf_float+0xa2>
 800826c:	232d      	movs	r3, #45	@ 0x2d
 800826e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008272:	e79e      	b.n	80081b2 <_printf_float+0xa2>
 8008274:	9a06      	ldr	r2, [sp, #24]
 8008276:	2a47      	cmp	r2, #71	@ 0x47
 8008278:	d1c2      	bne.n	8008200 <_printf_float+0xf0>
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1c0      	bne.n	8008200 <_printf_float+0xf0>
 800827e:	2301      	movs	r3, #1
 8008280:	e7bd      	b.n	80081fe <_printf_float+0xee>
 8008282:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008286:	d9db      	bls.n	8008240 <_printf_float+0x130>
 8008288:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800828c:	d118      	bne.n	80082c0 <_printf_float+0x1b0>
 800828e:	2900      	cmp	r1, #0
 8008290:	6863      	ldr	r3, [r4, #4]
 8008292:	dd0b      	ble.n	80082ac <_printf_float+0x19c>
 8008294:	6121      	str	r1, [r4, #16]
 8008296:	b913      	cbnz	r3, 800829e <_printf_float+0x18e>
 8008298:	6822      	ldr	r2, [r4, #0]
 800829a:	07d0      	lsls	r0, r2, #31
 800829c:	d502      	bpl.n	80082a4 <_printf_float+0x194>
 800829e:	3301      	adds	r3, #1
 80082a0:	440b      	add	r3, r1
 80082a2:	6123      	str	r3, [r4, #16]
 80082a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80082a6:	f04f 0900 	mov.w	r9, #0
 80082aa:	e7db      	b.n	8008264 <_printf_float+0x154>
 80082ac:	b913      	cbnz	r3, 80082b4 <_printf_float+0x1a4>
 80082ae:	6822      	ldr	r2, [r4, #0]
 80082b0:	07d2      	lsls	r2, r2, #31
 80082b2:	d501      	bpl.n	80082b8 <_printf_float+0x1a8>
 80082b4:	3302      	adds	r3, #2
 80082b6:	e7f4      	b.n	80082a2 <_printf_float+0x192>
 80082b8:	2301      	movs	r3, #1
 80082ba:	e7f2      	b.n	80082a2 <_printf_float+0x192>
 80082bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80082c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082c2:	4299      	cmp	r1, r3
 80082c4:	db05      	blt.n	80082d2 <_printf_float+0x1c2>
 80082c6:	6823      	ldr	r3, [r4, #0]
 80082c8:	6121      	str	r1, [r4, #16]
 80082ca:	07d8      	lsls	r0, r3, #31
 80082cc:	d5ea      	bpl.n	80082a4 <_printf_float+0x194>
 80082ce:	1c4b      	adds	r3, r1, #1
 80082d0:	e7e7      	b.n	80082a2 <_printf_float+0x192>
 80082d2:	2900      	cmp	r1, #0
 80082d4:	bfd4      	ite	le
 80082d6:	f1c1 0202 	rsble	r2, r1, #2
 80082da:	2201      	movgt	r2, #1
 80082dc:	4413      	add	r3, r2
 80082de:	e7e0      	b.n	80082a2 <_printf_float+0x192>
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	055a      	lsls	r2, r3, #21
 80082e4:	d407      	bmi.n	80082f6 <_printf_float+0x1e6>
 80082e6:	6923      	ldr	r3, [r4, #16]
 80082e8:	4642      	mov	r2, r8
 80082ea:	4631      	mov	r1, r6
 80082ec:	4628      	mov	r0, r5
 80082ee:	47b8      	blx	r7
 80082f0:	3001      	adds	r0, #1
 80082f2:	d12b      	bne.n	800834c <_printf_float+0x23c>
 80082f4:	e767      	b.n	80081c6 <_printf_float+0xb6>
 80082f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80082fa:	f240 80dd 	bls.w	80084b8 <_printf_float+0x3a8>
 80082fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008302:	2200      	movs	r2, #0
 8008304:	2300      	movs	r3, #0
 8008306:	f7f8 fbef 	bl	8000ae8 <__aeabi_dcmpeq>
 800830a:	2800      	cmp	r0, #0
 800830c:	d033      	beq.n	8008376 <_printf_float+0x266>
 800830e:	4a37      	ldr	r2, [pc, #220]	@ (80083ec <_printf_float+0x2dc>)
 8008310:	2301      	movs	r3, #1
 8008312:	4631      	mov	r1, r6
 8008314:	4628      	mov	r0, r5
 8008316:	47b8      	blx	r7
 8008318:	3001      	adds	r0, #1
 800831a:	f43f af54 	beq.w	80081c6 <_printf_float+0xb6>
 800831e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008322:	4543      	cmp	r3, r8
 8008324:	db02      	blt.n	800832c <_printf_float+0x21c>
 8008326:	6823      	ldr	r3, [r4, #0]
 8008328:	07d8      	lsls	r0, r3, #31
 800832a:	d50f      	bpl.n	800834c <_printf_float+0x23c>
 800832c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008330:	4631      	mov	r1, r6
 8008332:	4628      	mov	r0, r5
 8008334:	47b8      	blx	r7
 8008336:	3001      	adds	r0, #1
 8008338:	f43f af45 	beq.w	80081c6 <_printf_float+0xb6>
 800833c:	f04f 0900 	mov.w	r9, #0
 8008340:	f108 38ff 	add.w	r8, r8, #4294967295
 8008344:	f104 0a1a 	add.w	sl, r4, #26
 8008348:	45c8      	cmp	r8, r9
 800834a:	dc09      	bgt.n	8008360 <_printf_float+0x250>
 800834c:	6823      	ldr	r3, [r4, #0]
 800834e:	079b      	lsls	r3, r3, #30
 8008350:	f100 8103 	bmi.w	800855a <_printf_float+0x44a>
 8008354:	68e0      	ldr	r0, [r4, #12]
 8008356:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008358:	4298      	cmp	r0, r3
 800835a:	bfb8      	it	lt
 800835c:	4618      	movlt	r0, r3
 800835e:	e734      	b.n	80081ca <_printf_float+0xba>
 8008360:	2301      	movs	r3, #1
 8008362:	4652      	mov	r2, sl
 8008364:	4631      	mov	r1, r6
 8008366:	4628      	mov	r0, r5
 8008368:	47b8      	blx	r7
 800836a:	3001      	adds	r0, #1
 800836c:	f43f af2b 	beq.w	80081c6 <_printf_float+0xb6>
 8008370:	f109 0901 	add.w	r9, r9, #1
 8008374:	e7e8      	b.n	8008348 <_printf_float+0x238>
 8008376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008378:	2b00      	cmp	r3, #0
 800837a:	dc39      	bgt.n	80083f0 <_printf_float+0x2e0>
 800837c:	4a1b      	ldr	r2, [pc, #108]	@ (80083ec <_printf_float+0x2dc>)
 800837e:	2301      	movs	r3, #1
 8008380:	4631      	mov	r1, r6
 8008382:	4628      	mov	r0, r5
 8008384:	47b8      	blx	r7
 8008386:	3001      	adds	r0, #1
 8008388:	f43f af1d 	beq.w	80081c6 <_printf_float+0xb6>
 800838c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008390:	ea59 0303 	orrs.w	r3, r9, r3
 8008394:	d102      	bne.n	800839c <_printf_float+0x28c>
 8008396:	6823      	ldr	r3, [r4, #0]
 8008398:	07d9      	lsls	r1, r3, #31
 800839a:	d5d7      	bpl.n	800834c <_printf_float+0x23c>
 800839c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083a0:	4631      	mov	r1, r6
 80083a2:	4628      	mov	r0, r5
 80083a4:	47b8      	blx	r7
 80083a6:	3001      	adds	r0, #1
 80083a8:	f43f af0d 	beq.w	80081c6 <_printf_float+0xb6>
 80083ac:	f04f 0a00 	mov.w	sl, #0
 80083b0:	f104 0b1a 	add.w	fp, r4, #26
 80083b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b6:	425b      	negs	r3, r3
 80083b8:	4553      	cmp	r3, sl
 80083ba:	dc01      	bgt.n	80083c0 <_printf_float+0x2b0>
 80083bc:	464b      	mov	r3, r9
 80083be:	e793      	b.n	80082e8 <_printf_float+0x1d8>
 80083c0:	2301      	movs	r3, #1
 80083c2:	465a      	mov	r2, fp
 80083c4:	4631      	mov	r1, r6
 80083c6:	4628      	mov	r0, r5
 80083c8:	47b8      	blx	r7
 80083ca:	3001      	adds	r0, #1
 80083cc:	f43f aefb 	beq.w	80081c6 <_printf_float+0xb6>
 80083d0:	f10a 0a01 	add.w	sl, sl, #1
 80083d4:	e7ee      	b.n	80083b4 <_printf_float+0x2a4>
 80083d6:	bf00      	nop
 80083d8:	7fefffff 	.word	0x7fefffff
 80083dc:	0801c958 	.word	0x0801c958
 80083e0:	0801c95c 	.word	0x0801c95c
 80083e4:	0801c960 	.word	0x0801c960
 80083e8:	0801c964 	.word	0x0801c964
 80083ec:	0801c968 	.word	0x0801c968
 80083f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80083f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80083f6:	4553      	cmp	r3, sl
 80083f8:	bfa8      	it	ge
 80083fa:	4653      	movge	r3, sl
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	4699      	mov	r9, r3
 8008400:	dc36      	bgt.n	8008470 <_printf_float+0x360>
 8008402:	f04f 0b00 	mov.w	fp, #0
 8008406:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800840a:	f104 021a 	add.w	r2, r4, #26
 800840e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008410:	9306      	str	r3, [sp, #24]
 8008412:	eba3 0309 	sub.w	r3, r3, r9
 8008416:	455b      	cmp	r3, fp
 8008418:	dc31      	bgt.n	800847e <_printf_float+0x36e>
 800841a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800841c:	459a      	cmp	sl, r3
 800841e:	dc3a      	bgt.n	8008496 <_printf_float+0x386>
 8008420:	6823      	ldr	r3, [r4, #0]
 8008422:	07da      	lsls	r2, r3, #31
 8008424:	d437      	bmi.n	8008496 <_printf_float+0x386>
 8008426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008428:	ebaa 0903 	sub.w	r9, sl, r3
 800842c:	9b06      	ldr	r3, [sp, #24]
 800842e:	ebaa 0303 	sub.w	r3, sl, r3
 8008432:	4599      	cmp	r9, r3
 8008434:	bfa8      	it	ge
 8008436:	4699      	movge	r9, r3
 8008438:	f1b9 0f00 	cmp.w	r9, #0
 800843c:	dc33      	bgt.n	80084a6 <_printf_float+0x396>
 800843e:	f04f 0800 	mov.w	r8, #0
 8008442:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008446:	f104 0b1a 	add.w	fp, r4, #26
 800844a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800844c:	ebaa 0303 	sub.w	r3, sl, r3
 8008450:	eba3 0309 	sub.w	r3, r3, r9
 8008454:	4543      	cmp	r3, r8
 8008456:	f77f af79 	ble.w	800834c <_printf_float+0x23c>
 800845a:	2301      	movs	r3, #1
 800845c:	465a      	mov	r2, fp
 800845e:	4631      	mov	r1, r6
 8008460:	4628      	mov	r0, r5
 8008462:	47b8      	blx	r7
 8008464:	3001      	adds	r0, #1
 8008466:	f43f aeae 	beq.w	80081c6 <_printf_float+0xb6>
 800846a:	f108 0801 	add.w	r8, r8, #1
 800846e:	e7ec      	b.n	800844a <_printf_float+0x33a>
 8008470:	4642      	mov	r2, r8
 8008472:	4631      	mov	r1, r6
 8008474:	4628      	mov	r0, r5
 8008476:	47b8      	blx	r7
 8008478:	3001      	adds	r0, #1
 800847a:	d1c2      	bne.n	8008402 <_printf_float+0x2f2>
 800847c:	e6a3      	b.n	80081c6 <_printf_float+0xb6>
 800847e:	2301      	movs	r3, #1
 8008480:	4631      	mov	r1, r6
 8008482:	4628      	mov	r0, r5
 8008484:	9206      	str	r2, [sp, #24]
 8008486:	47b8      	blx	r7
 8008488:	3001      	adds	r0, #1
 800848a:	f43f ae9c 	beq.w	80081c6 <_printf_float+0xb6>
 800848e:	9a06      	ldr	r2, [sp, #24]
 8008490:	f10b 0b01 	add.w	fp, fp, #1
 8008494:	e7bb      	b.n	800840e <_printf_float+0x2fe>
 8008496:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800849a:	4631      	mov	r1, r6
 800849c:	4628      	mov	r0, r5
 800849e:	47b8      	blx	r7
 80084a0:	3001      	adds	r0, #1
 80084a2:	d1c0      	bne.n	8008426 <_printf_float+0x316>
 80084a4:	e68f      	b.n	80081c6 <_printf_float+0xb6>
 80084a6:	9a06      	ldr	r2, [sp, #24]
 80084a8:	464b      	mov	r3, r9
 80084aa:	4442      	add	r2, r8
 80084ac:	4631      	mov	r1, r6
 80084ae:	4628      	mov	r0, r5
 80084b0:	47b8      	blx	r7
 80084b2:	3001      	adds	r0, #1
 80084b4:	d1c3      	bne.n	800843e <_printf_float+0x32e>
 80084b6:	e686      	b.n	80081c6 <_printf_float+0xb6>
 80084b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80084bc:	f1ba 0f01 	cmp.w	sl, #1
 80084c0:	dc01      	bgt.n	80084c6 <_printf_float+0x3b6>
 80084c2:	07db      	lsls	r3, r3, #31
 80084c4:	d536      	bpl.n	8008534 <_printf_float+0x424>
 80084c6:	2301      	movs	r3, #1
 80084c8:	4642      	mov	r2, r8
 80084ca:	4631      	mov	r1, r6
 80084cc:	4628      	mov	r0, r5
 80084ce:	47b8      	blx	r7
 80084d0:	3001      	adds	r0, #1
 80084d2:	f43f ae78 	beq.w	80081c6 <_printf_float+0xb6>
 80084d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084da:	4631      	mov	r1, r6
 80084dc:	4628      	mov	r0, r5
 80084de:	47b8      	blx	r7
 80084e0:	3001      	adds	r0, #1
 80084e2:	f43f ae70 	beq.w	80081c6 <_printf_float+0xb6>
 80084e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80084ea:	2200      	movs	r2, #0
 80084ec:	2300      	movs	r3, #0
 80084ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084f2:	f7f8 faf9 	bl	8000ae8 <__aeabi_dcmpeq>
 80084f6:	b9c0      	cbnz	r0, 800852a <_printf_float+0x41a>
 80084f8:	4653      	mov	r3, sl
 80084fa:	f108 0201 	add.w	r2, r8, #1
 80084fe:	4631      	mov	r1, r6
 8008500:	4628      	mov	r0, r5
 8008502:	47b8      	blx	r7
 8008504:	3001      	adds	r0, #1
 8008506:	d10c      	bne.n	8008522 <_printf_float+0x412>
 8008508:	e65d      	b.n	80081c6 <_printf_float+0xb6>
 800850a:	2301      	movs	r3, #1
 800850c:	465a      	mov	r2, fp
 800850e:	4631      	mov	r1, r6
 8008510:	4628      	mov	r0, r5
 8008512:	47b8      	blx	r7
 8008514:	3001      	adds	r0, #1
 8008516:	f43f ae56 	beq.w	80081c6 <_printf_float+0xb6>
 800851a:	f108 0801 	add.w	r8, r8, #1
 800851e:	45d0      	cmp	r8, sl
 8008520:	dbf3      	blt.n	800850a <_printf_float+0x3fa>
 8008522:	464b      	mov	r3, r9
 8008524:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008528:	e6df      	b.n	80082ea <_printf_float+0x1da>
 800852a:	f04f 0800 	mov.w	r8, #0
 800852e:	f104 0b1a 	add.w	fp, r4, #26
 8008532:	e7f4      	b.n	800851e <_printf_float+0x40e>
 8008534:	2301      	movs	r3, #1
 8008536:	4642      	mov	r2, r8
 8008538:	e7e1      	b.n	80084fe <_printf_float+0x3ee>
 800853a:	2301      	movs	r3, #1
 800853c:	464a      	mov	r2, r9
 800853e:	4631      	mov	r1, r6
 8008540:	4628      	mov	r0, r5
 8008542:	47b8      	blx	r7
 8008544:	3001      	adds	r0, #1
 8008546:	f43f ae3e 	beq.w	80081c6 <_printf_float+0xb6>
 800854a:	f108 0801 	add.w	r8, r8, #1
 800854e:	68e3      	ldr	r3, [r4, #12]
 8008550:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008552:	1a5b      	subs	r3, r3, r1
 8008554:	4543      	cmp	r3, r8
 8008556:	dcf0      	bgt.n	800853a <_printf_float+0x42a>
 8008558:	e6fc      	b.n	8008354 <_printf_float+0x244>
 800855a:	f04f 0800 	mov.w	r8, #0
 800855e:	f104 0919 	add.w	r9, r4, #25
 8008562:	e7f4      	b.n	800854e <_printf_float+0x43e>

08008564 <_printf_common>:
 8008564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008568:	4616      	mov	r6, r2
 800856a:	4698      	mov	r8, r3
 800856c:	688a      	ldr	r2, [r1, #8]
 800856e:	690b      	ldr	r3, [r1, #16]
 8008570:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008574:	4293      	cmp	r3, r2
 8008576:	bfb8      	it	lt
 8008578:	4613      	movlt	r3, r2
 800857a:	6033      	str	r3, [r6, #0]
 800857c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008580:	4607      	mov	r7, r0
 8008582:	460c      	mov	r4, r1
 8008584:	b10a      	cbz	r2, 800858a <_printf_common+0x26>
 8008586:	3301      	adds	r3, #1
 8008588:	6033      	str	r3, [r6, #0]
 800858a:	6823      	ldr	r3, [r4, #0]
 800858c:	0699      	lsls	r1, r3, #26
 800858e:	bf42      	ittt	mi
 8008590:	6833      	ldrmi	r3, [r6, #0]
 8008592:	3302      	addmi	r3, #2
 8008594:	6033      	strmi	r3, [r6, #0]
 8008596:	6825      	ldr	r5, [r4, #0]
 8008598:	f015 0506 	ands.w	r5, r5, #6
 800859c:	d106      	bne.n	80085ac <_printf_common+0x48>
 800859e:	f104 0a19 	add.w	sl, r4, #25
 80085a2:	68e3      	ldr	r3, [r4, #12]
 80085a4:	6832      	ldr	r2, [r6, #0]
 80085a6:	1a9b      	subs	r3, r3, r2
 80085a8:	42ab      	cmp	r3, r5
 80085aa:	dc26      	bgt.n	80085fa <_printf_common+0x96>
 80085ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80085b0:	6822      	ldr	r2, [r4, #0]
 80085b2:	3b00      	subs	r3, #0
 80085b4:	bf18      	it	ne
 80085b6:	2301      	movne	r3, #1
 80085b8:	0692      	lsls	r2, r2, #26
 80085ba:	d42b      	bmi.n	8008614 <_printf_common+0xb0>
 80085bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80085c0:	4641      	mov	r1, r8
 80085c2:	4638      	mov	r0, r7
 80085c4:	47c8      	blx	r9
 80085c6:	3001      	adds	r0, #1
 80085c8:	d01e      	beq.n	8008608 <_printf_common+0xa4>
 80085ca:	6823      	ldr	r3, [r4, #0]
 80085cc:	6922      	ldr	r2, [r4, #16]
 80085ce:	f003 0306 	and.w	r3, r3, #6
 80085d2:	2b04      	cmp	r3, #4
 80085d4:	bf02      	ittt	eq
 80085d6:	68e5      	ldreq	r5, [r4, #12]
 80085d8:	6833      	ldreq	r3, [r6, #0]
 80085da:	1aed      	subeq	r5, r5, r3
 80085dc:	68a3      	ldr	r3, [r4, #8]
 80085de:	bf0c      	ite	eq
 80085e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085e4:	2500      	movne	r5, #0
 80085e6:	4293      	cmp	r3, r2
 80085e8:	bfc4      	itt	gt
 80085ea:	1a9b      	subgt	r3, r3, r2
 80085ec:	18ed      	addgt	r5, r5, r3
 80085ee:	2600      	movs	r6, #0
 80085f0:	341a      	adds	r4, #26
 80085f2:	42b5      	cmp	r5, r6
 80085f4:	d11a      	bne.n	800862c <_printf_common+0xc8>
 80085f6:	2000      	movs	r0, #0
 80085f8:	e008      	b.n	800860c <_printf_common+0xa8>
 80085fa:	2301      	movs	r3, #1
 80085fc:	4652      	mov	r2, sl
 80085fe:	4641      	mov	r1, r8
 8008600:	4638      	mov	r0, r7
 8008602:	47c8      	blx	r9
 8008604:	3001      	adds	r0, #1
 8008606:	d103      	bne.n	8008610 <_printf_common+0xac>
 8008608:	f04f 30ff 	mov.w	r0, #4294967295
 800860c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008610:	3501      	adds	r5, #1
 8008612:	e7c6      	b.n	80085a2 <_printf_common+0x3e>
 8008614:	18e1      	adds	r1, r4, r3
 8008616:	1c5a      	adds	r2, r3, #1
 8008618:	2030      	movs	r0, #48	@ 0x30
 800861a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800861e:	4422      	add	r2, r4
 8008620:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008624:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008628:	3302      	adds	r3, #2
 800862a:	e7c7      	b.n	80085bc <_printf_common+0x58>
 800862c:	2301      	movs	r3, #1
 800862e:	4622      	mov	r2, r4
 8008630:	4641      	mov	r1, r8
 8008632:	4638      	mov	r0, r7
 8008634:	47c8      	blx	r9
 8008636:	3001      	adds	r0, #1
 8008638:	d0e6      	beq.n	8008608 <_printf_common+0xa4>
 800863a:	3601      	adds	r6, #1
 800863c:	e7d9      	b.n	80085f2 <_printf_common+0x8e>
	...

08008640 <_printf_i>:
 8008640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008644:	7e0f      	ldrb	r7, [r1, #24]
 8008646:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008648:	2f78      	cmp	r7, #120	@ 0x78
 800864a:	4691      	mov	r9, r2
 800864c:	4680      	mov	r8, r0
 800864e:	460c      	mov	r4, r1
 8008650:	469a      	mov	sl, r3
 8008652:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008656:	d807      	bhi.n	8008668 <_printf_i+0x28>
 8008658:	2f62      	cmp	r7, #98	@ 0x62
 800865a:	d80a      	bhi.n	8008672 <_printf_i+0x32>
 800865c:	2f00      	cmp	r7, #0
 800865e:	f000 80d2 	beq.w	8008806 <_printf_i+0x1c6>
 8008662:	2f58      	cmp	r7, #88	@ 0x58
 8008664:	f000 80b9 	beq.w	80087da <_printf_i+0x19a>
 8008668:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800866c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008670:	e03a      	b.n	80086e8 <_printf_i+0xa8>
 8008672:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008676:	2b15      	cmp	r3, #21
 8008678:	d8f6      	bhi.n	8008668 <_printf_i+0x28>
 800867a:	a101      	add	r1, pc, #4	@ (adr r1, 8008680 <_printf_i+0x40>)
 800867c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008680:	080086d9 	.word	0x080086d9
 8008684:	080086ed 	.word	0x080086ed
 8008688:	08008669 	.word	0x08008669
 800868c:	08008669 	.word	0x08008669
 8008690:	08008669 	.word	0x08008669
 8008694:	08008669 	.word	0x08008669
 8008698:	080086ed 	.word	0x080086ed
 800869c:	08008669 	.word	0x08008669
 80086a0:	08008669 	.word	0x08008669
 80086a4:	08008669 	.word	0x08008669
 80086a8:	08008669 	.word	0x08008669
 80086ac:	080087ed 	.word	0x080087ed
 80086b0:	08008717 	.word	0x08008717
 80086b4:	080087a7 	.word	0x080087a7
 80086b8:	08008669 	.word	0x08008669
 80086bc:	08008669 	.word	0x08008669
 80086c0:	0800880f 	.word	0x0800880f
 80086c4:	08008669 	.word	0x08008669
 80086c8:	08008717 	.word	0x08008717
 80086cc:	08008669 	.word	0x08008669
 80086d0:	08008669 	.word	0x08008669
 80086d4:	080087af 	.word	0x080087af
 80086d8:	6833      	ldr	r3, [r6, #0]
 80086da:	1d1a      	adds	r2, r3, #4
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	6032      	str	r2, [r6, #0]
 80086e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80086e8:	2301      	movs	r3, #1
 80086ea:	e09d      	b.n	8008828 <_printf_i+0x1e8>
 80086ec:	6833      	ldr	r3, [r6, #0]
 80086ee:	6820      	ldr	r0, [r4, #0]
 80086f0:	1d19      	adds	r1, r3, #4
 80086f2:	6031      	str	r1, [r6, #0]
 80086f4:	0606      	lsls	r6, r0, #24
 80086f6:	d501      	bpl.n	80086fc <_printf_i+0xbc>
 80086f8:	681d      	ldr	r5, [r3, #0]
 80086fa:	e003      	b.n	8008704 <_printf_i+0xc4>
 80086fc:	0645      	lsls	r5, r0, #25
 80086fe:	d5fb      	bpl.n	80086f8 <_printf_i+0xb8>
 8008700:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008704:	2d00      	cmp	r5, #0
 8008706:	da03      	bge.n	8008710 <_printf_i+0xd0>
 8008708:	232d      	movs	r3, #45	@ 0x2d
 800870a:	426d      	negs	r5, r5
 800870c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008710:	4859      	ldr	r0, [pc, #356]	@ (8008878 <_printf_i+0x238>)
 8008712:	230a      	movs	r3, #10
 8008714:	e011      	b.n	800873a <_printf_i+0xfa>
 8008716:	6821      	ldr	r1, [r4, #0]
 8008718:	6833      	ldr	r3, [r6, #0]
 800871a:	0608      	lsls	r0, r1, #24
 800871c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008720:	d402      	bmi.n	8008728 <_printf_i+0xe8>
 8008722:	0649      	lsls	r1, r1, #25
 8008724:	bf48      	it	mi
 8008726:	b2ad      	uxthmi	r5, r5
 8008728:	2f6f      	cmp	r7, #111	@ 0x6f
 800872a:	4853      	ldr	r0, [pc, #332]	@ (8008878 <_printf_i+0x238>)
 800872c:	6033      	str	r3, [r6, #0]
 800872e:	bf14      	ite	ne
 8008730:	230a      	movne	r3, #10
 8008732:	2308      	moveq	r3, #8
 8008734:	2100      	movs	r1, #0
 8008736:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800873a:	6866      	ldr	r6, [r4, #4]
 800873c:	60a6      	str	r6, [r4, #8]
 800873e:	2e00      	cmp	r6, #0
 8008740:	bfa2      	ittt	ge
 8008742:	6821      	ldrge	r1, [r4, #0]
 8008744:	f021 0104 	bicge.w	r1, r1, #4
 8008748:	6021      	strge	r1, [r4, #0]
 800874a:	b90d      	cbnz	r5, 8008750 <_printf_i+0x110>
 800874c:	2e00      	cmp	r6, #0
 800874e:	d04b      	beq.n	80087e8 <_printf_i+0x1a8>
 8008750:	4616      	mov	r6, r2
 8008752:	fbb5 f1f3 	udiv	r1, r5, r3
 8008756:	fb03 5711 	mls	r7, r3, r1, r5
 800875a:	5dc7      	ldrb	r7, [r0, r7]
 800875c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008760:	462f      	mov	r7, r5
 8008762:	42bb      	cmp	r3, r7
 8008764:	460d      	mov	r5, r1
 8008766:	d9f4      	bls.n	8008752 <_printf_i+0x112>
 8008768:	2b08      	cmp	r3, #8
 800876a:	d10b      	bne.n	8008784 <_printf_i+0x144>
 800876c:	6823      	ldr	r3, [r4, #0]
 800876e:	07df      	lsls	r7, r3, #31
 8008770:	d508      	bpl.n	8008784 <_printf_i+0x144>
 8008772:	6923      	ldr	r3, [r4, #16]
 8008774:	6861      	ldr	r1, [r4, #4]
 8008776:	4299      	cmp	r1, r3
 8008778:	bfde      	ittt	le
 800877a:	2330      	movle	r3, #48	@ 0x30
 800877c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008780:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008784:	1b92      	subs	r2, r2, r6
 8008786:	6122      	str	r2, [r4, #16]
 8008788:	f8cd a000 	str.w	sl, [sp]
 800878c:	464b      	mov	r3, r9
 800878e:	aa03      	add	r2, sp, #12
 8008790:	4621      	mov	r1, r4
 8008792:	4640      	mov	r0, r8
 8008794:	f7ff fee6 	bl	8008564 <_printf_common>
 8008798:	3001      	adds	r0, #1
 800879a:	d14a      	bne.n	8008832 <_printf_i+0x1f2>
 800879c:	f04f 30ff 	mov.w	r0, #4294967295
 80087a0:	b004      	add	sp, #16
 80087a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	f043 0320 	orr.w	r3, r3, #32
 80087ac:	6023      	str	r3, [r4, #0]
 80087ae:	4833      	ldr	r0, [pc, #204]	@ (800887c <_printf_i+0x23c>)
 80087b0:	2778      	movs	r7, #120	@ 0x78
 80087b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80087b6:	6823      	ldr	r3, [r4, #0]
 80087b8:	6831      	ldr	r1, [r6, #0]
 80087ba:	061f      	lsls	r7, r3, #24
 80087bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80087c0:	d402      	bmi.n	80087c8 <_printf_i+0x188>
 80087c2:	065f      	lsls	r7, r3, #25
 80087c4:	bf48      	it	mi
 80087c6:	b2ad      	uxthmi	r5, r5
 80087c8:	6031      	str	r1, [r6, #0]
 80087ca:	07d9      	lsls	r1, r3, #31
 80087cc:	bf44      	itt	mi
 80087ce:	f043 0320 	orrmi.w	r3, r3, #32
 80087d2:	6023      	strmi	r3, [r4, #0]
 80087d4:	b11d      	cbz	r5, 80087de <_printf_i+0x19e>
 80087d6:	2310      	movs	r3, #16
 80087d8:	e7ac      	b.n	8008734 <_printf_i+0xf4>
 80087da:	4827      	ldr	r0, [pc, #156]	@ (8008878 <_printf_i+0x238>)
 80087dc:	e7e9      	b.n	80087b2 <_printf_i+0x172>
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	f023 0320 	bic.w	r3, r3, #32
 80087e4:	6023      	str	r3, [r4, #0]
 80087e6:	e7f6      	b.n	80087d6 <_printf_i+0x196>
 80087e8:	4616      	mov	r6, r2
 80087ea:	e7bd      	b.n	8008768 <_printf_i+0x128>
 80087ec:	6833      	ldr	r3, [r6, #0]
 80087ee:	6825      	ldr	r5, [r4, #0]
 80087f0:	6961      	ldr	r1, [r4, #20]
 80087f2:	1d18      	adds	r0, r3, #4
 80087f4:	6030      	str	r0, [r6, #0]
 80087f6:	062e      	lsls	r6, r5, #24
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	d501      	bpl.n	8008800 <_printf_i+0x1c0>
 80087fc:	6019      	str	r1, [r3, #0]
 80087fe:	e002      	b.n	8008806 <_printf_i+0x1c6>
 8008800:	0668      	lsls	r0, r5, #25
 8008802:	d5fb      	bpl.n	80087fc <_printf_i+0x1bc>
 8008804:	8019      	strh	r1, [r3, #0]
 8008806:	2300      	movs	r3, #0
 8008808:	6123      	str	r3, [r4, #16]
 800880a:	4616      	mov	r6, r2
 800880c:	e7bc      	b.n	8008788 <_printf_i+0x148>
 800880e:	6833      	ldr	r3, [r6, #0]
 8008810:	1d1a      	adds	r2, r3, #4
 8008812:	6032      	str	r2, [r6, #0]
 8008814:	681e      	ldr	r6, [r3, #0]
 8008816:	6862      	ldr	r2, [r4, #4]
 8008818:	2100      	movs	r1, #0
 800881a:	4630      	mov	r0, r6
 800881c:	f7f7 fce8 	bl	80001f0 <memchr>
 8008820:	b108      	cbz	r0, 8008826 <_printf_i+0x1e6>
 8008822:	1b80      	subs	r0, r0, r6
 8008824:	6060      	str	r0, [r4, #4]
 8008826:	6863      	ldr	r3, [r4, #4]
 8008828:	6123      	str	r3, [r4, #16]
 800882a:	2300      	movs	r3, #0
 800882c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008830:	e7aa      	b.n	8008788 <_printf_i+0x148>
 8008832:	6923      	ldr	r3, [r4, #16]
 8008834:	4632      	mov	r2, r6
 8008836:	4649      	mov	r1, r9
 8008838:	4640      	mov	r0, r8
 800883a:	47d0      	blx	sl
 800883c:	3001      	adds	r0, #1
 800883e:	d0ad      	beq.n	800879c <_printf_i+0x15c>
 8008840:	6823      	ldr	r3, [r4, #0]
 8008842:	079b      	lsls	r3, r3, #30
 8008844:	d413      	bmi.n	800886e <_printf_i+0x22e>
 8008846:	68e0      	ldr	r0, [r4, #12]
 8008848:	9b03      	ldr	r3, [sp, #12]
 800884a:	4298      	cmp	r0, r3
 800884c:	bfb8      	it	lt
 800884e:	4618      	movlt	r0, r3
 8008850:	e7a6      	b.n	80087a0 <_printf_i+0x160>
 8008852:	2301      	movs	r3, #1
 8008854:	4632      	mov	r2, r6
 8008856:	4649      	mov	r1, r9
 8008858:	4640      	mov	r0, r8
 800885a:	47d0      	blx	sl
 800885c:	3001      	adds	r0, #1
 800885e:	d09d      	beq.n	800879c <_printf_i+0x15c>
 8008860:	3501      	adds	r5, #1
 8008862:	68e3      	ldr	r3, [r4, #12]
 8008864:	9903      	ldr	r1, [sp, #12]
 8008866:	1a5b      	subs	r3, r3, r1
 8008868:	42ab      	cmp	r3, r5
 800886a:	dcf2      	bgt.n	8008852 <_printf_i+0x212>
 800886c:	e7eb      	b.n	8008846 <_printf_i+0x206>
 800886e:	2500      	movs	r5, #0
 8008870:	f104 0619 	add.w	r6, r4, #25
 8008874:	e7f5      	b.n	8008862 <_printf_i+0x222>
 8008876:	bf00      	nop
 8008878:	0801c96a 	.word	0x0801c96a
 800887c:	0801c97b 	.word	0x0801c97b

08008880 <std>:
 8008880:	2300      	movs	r3, #0
 8008882:	b510      	push	{r4, lr}
 8008884:	4604      	mov	r4, r0
 8008886:	e9c0 3300 	strd	r3, r3, [r0]
 800888a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800888e:	6083      	str	r3, [r0, #8]
 8008890:	8181      	strh	r1, [r0, #12]
 8008892:	6643      	str	r3, [r0, #100]	@ 0x64
 8008894:	81c2      	strh	r2, [r0, #14]
 8008896:	6183      	str	r3, [r0, #24]
 8008898:	4619      	mov	r1, r3
 800889a:	2208      	movs	r2, #8
 800889c:	305c      	adds	r0, #92	@ 0x5c
 800889e:	f000 f9a8 	bl	8008bf2 <memset>
 80088a2:	4b0d      	ldr	r3, [pc, #52]	@ (80088d8 <std+0x58>)
 80088a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80088a6:	4b0d      	ldr	r3, [pc, #52]	@ (80088dc <std+0x5c>)
 80088a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80088aa:	4b0d      	ldr	r3, [pc, #52]	@ (80088e0 <std+0x60>)
 80088ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80088ae:	4b0d      	ldr	r3, [pc, #52]	@ (80088e4 <std+0x64>)
 80088b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80088b2:	4b0d      	ldr	r3, [pc, #52]	@ (80088e8 <std+0x68>)
 80088b4:	6224      	str	r4, [r4, #32]
 80088b6:	429c      	cmp	r4, r3
 80088b8:	d006      	beq.n	80088c8 <std+0x48>
 80088ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80088be:	4294      	cmp	r4, r2
 80088c0:	d002      	beq.n	80088c8 <std+0x48>
 80088c2:	33d0      	adds	r3, #208	@ 0xd0
 80088c4:	429c      	cmp	r4, r3
 80088c6:	d105      	bne.n	80088d4 <std+0x54>
 80088c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80088cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088d0:	f000 ba0c 	b.w	8008cec <__retarget_lock_init_recursive>
 80088d4:	bd10      	pop	{r4, pc}
 80088d6:	bf00      	nop
 80088d8:	08008b6d 	.word	0x08008b6d
 80088dc:	08008b8f 	.word	0x08008b8f
 80088e0:	08008bc7 	.word	0x08008bc7
 80088e4:	08008beb 	.word	0x08008beb
 80088e8:	20004ca4 	.word	0x20004ca4

080088ec <stdio_exit_handler>:
 80088ec:	4a02      	ldr	r2, [pc, #8]	@ (80088f8 <stdio_exit_handler+0xc>)
 80088ee:	4903      	ldr	r1, [pc, #12]	@ (80088fc <stdio_exit_handler+0x10>)
 80088f0:	4803      	ldr	r0, [pc, #12]	@ (8008900 <stdio_exit_handler+0x14>)
 80088f2:	f000 b869 	b.w	80089c8 <_fwalk_sglue>
 80088f6:	bf00      	nop
 80088f8:	20002f84 	.word	0x20002f84
 80088fc:	0800a3b5 	.word	0x0800a3b5
 8008900:	20002f94 	.word	0x20002f94

08008904 <cleanup_stdio>:
 8008904:	6841      	ldr	r1, [r0, #4]
 8008906:	4b0c      	ldr	r3, [pc, #48]	@ (8008938 <cleanup_stdio+0x34>)
 8008908:	4299      	cmp	r1, r3
 800890a:	b510      	push	{r4, lr}
 800890c:	4604      	mov	r4, r0
 800890e:	d001      	beq.n	8008914 <cleanup_stdio+0x10>
 8008910:	f001 fd50 	bl	800a3b4 <_fflush_r>
 8008914:	68a1      	ldr	r1, [r4, #8]
 8008916:	4b09      	ldr	r3, [pc, #36]	@ (800893c <cleanup_stdio+0x38>)
 8008918:	4299      	cmp	r1, r3
 800891a:	d002      	beq.n	8008922 <cleanup_stdio+0x1e>
 800891c:	4620      	mov	r0, r4
 800891e:	f001 fd49 	bl	800a3b4 <_fflush_r>
 8008922:	68e1      	ldr	r1, [r4, #12]
 8008924:	4b06      	ldr	r3, [pc, #24]	@ (8008940 <cleanup_stdio+0x3c>)
 8008926:	4299      	cmp	r1, r3
 8008928:	d004      	beq.n	8008934 <cleanup_stdio+0x30>
 800892a:	4620      	mov	r0, r4
 800892c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008930:	f001 bd40 	b.w	800a3b4 <_fflush_r>
 8008934:	bd10      	pop	{r4, pc}
 8008936:	bf00      	nop
 8008938:	20004ca4 	.word	0x20004ca4
 800893c:	20004d0c 	.word	0x20004d0c
 8008940:	20004d74 	.word	0x20004d74

08008944 <global_stdio_init.part.0>:
 8008944:	b510      	push	{r4, lr}
 8008946:	4b0b      	ldr	r3, [pc, #44]	@ (8008974 <global_stdio_init.part.0+0x30>)
 8008948:	4c0b      	ldr	r4, [pc, #44]	@ (8008978 <global_stdio_init.part.0+0x34>)
 800894a:	4a0c      	ldr	r2, [pc, #48]	@ (800897c <global_stdio_init.part.0+0x38>)
 800894c:	601a      	str	r2, [r3, #0]
 800894e:	4620      	mov	r0, r4
 8008950:	2200      	movs	r2, #0
 8008952:	2104      	movs	r1, #4
 8008954:	f7ff ff94 	bl	8008880 <std>
 8008958:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800895c:	2201      	movs	r2, #1
 800895e:	2109      	movs	r1, #9
 8008960:	f7ff ff8e 	bl	8008880 <std>
 8008964:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008968:	2202      	movs	r2, #2
 800896a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800896e:	2112      	movs	r1, #18
 8008970:	f7ff bf86 	b.w	8008880 <std>
 8008974:	20004ddc 	.word	0x20004ddc
 8008978:	20004ca4 	.word	0x20004ca4
 800897c:	080088ed 	.word	0x080088ed

08008980 <__sfp_lock_acquire>:
 8008980:	4801      	ldr	r0, [pc, #4]	@ (8008988 <__sfp_lock_acquire+0x8>)
 8008982:	f000 b9b4 	b.w	8008cee <__retarget_lock_acquire_recursive>
 8008986:	bf00      	nop
 8008988:	20004de5 	.word	0x20004de5

0800898c <__sfp_lock_release>:
 800898c:	4801      	ldr	r0, [pc, #4]	@ (8008994 <__sfp_lock_release+0x8>)
 800898e:	f000 b9af 	b.w	8008cf0 <__retarget_lock_release_recursive>
 8008992:	bf00      	nop
 8008994:	20004de5 	.word	0x20004de5

08008998 <__sinit>:
 8008998:	b510      	push	{r4, lr}
 800899a:	4604      	mov	r4, r0
 800899c:	f7ff fff0 	bl	8008980 <__sfp_lock_acquire>
 80089a0:	6a23      	ldr	r3, [r4, #32]
 80089a2:	b11b      	cbz	r3, 80089ac <__sinit+0x14>
 80089a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089a8:	f7ff bff0 	b.w	800898c <__sfp_lock_release>
 80089ac:	4b04      	ldr	r3, [pc, #16]	@ (80089c0 <__sinit+0x28>)
 80089ae:	6223      	str	r3, [r4, #32]
 80089b0:	4b04      	ldr	r3, [pc, #16]	@ (80089c4 <__sinit+0x2c>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1f5      	bne.n	80089a4 <__sinit+0xc>
 80089b8:	f7ff ffc4 	bl	8008944 <global_stdio_init.part.0>
 80089bc:	e7f2      	b.n	80089a4 <__sinit+0xc>
 80089be:	bf00      	nop
 80089c0:	08008905 	.word	0x08008905
 80089c4:	20004ddc 	.word	0x20004ddc

080089c8 <_fwalk_sglue>:
 80089c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089cc:	4607      	mov	r7, r0
 80089ce:	4688      	mov	r8, r1
 80089d0:	4614      	mov	r4, r2
 80089d2:	2600      	movs	r6, #0
 80089d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089d8:	f1b9 0901 	subs.w	r9, r9, #1
 80089dc:	d505      	bpl.n	80089ea <_fwalk_sglue+0x22>
 80089de:	6824      	ldr	r4, [r4, #0]
 80089e0:	2c00      	cmp	r4, #0
 80089e2:	d1f7      	bne.n	80089d4 <_fwalk_sglue+0xc>
 80089e4:	4630      	mov	r0, r6
 80089e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ea:	89ab      	ldrh	r3, [r5, #12]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d907      	bls.n	8008a00 <_fwalk_sglue+0x38>
 80089f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089f4:	3301      	adds	r3, #1
 80089f6:	d003      	beq.n	8008a00 <_fwalk_sglue+0x38>
 80089f8:	4629      	mov	r1, r5
 80089fa:	4638      	mov	r0, r7
 80089fc:	47c0      	blx	r8
 80089fe:	4306      	orrs	r6, r0
 8008a00:	3568      	adds	r5, #104	@ 0x68
 8008a02:	e7e9      	b.n	80089d8 <_fwalk_sglue+0x10>

08008a04 <setvbuf>:
 8008a04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a08:	461d      	mov	r5, r3
 8008a0a:	4b57      	ldr	r3, [pc, #348]	@ (8008b68 <setvbuf+0x164>)
 8008a0c:	681f      	ldr	r7, [r3, #0]
 8008a0e:	4604      	mov	r4, r0
 8008a10:	460e      	mov	r6, r1
 8008a12:	4690      	mov	r8, r2
 8008a14:	b127      	cbz	r7, 8008a20 <setvbuf+0x1c>
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	b913      	cbnz	r3, 8008a20 <setvbuf+0x1c>
 8008a1a:	4638      	mov	r0, r7
 8008a1c:	f7ff ffbc 	bl	8008998 <__sinit>
 8008a20:	f1b8 0f02 	cmp.w	r8, #2
 8008a24:	d006      	beq.n	8008a34 <setvbuf+0x30>
 8008a26:	f1b8 0f01 	cmp.w	r8, #1
 8008a2a:	f200 809a 	bhi.w	8008b62 <setvbuf+0x15e>
 8008a2e:	2d00      	cmp	r5, #0
 8008a30:	f2c0 8097 	blt.w	8008b62 <setvbuf+0x15e>
 8008a34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a36:	07d9      	lsls	r1, r3, #31
 8008a38:	d405      	bmi.n	8008a46 <setvbuf+0x42>
 8008a3a:	89a3      	ldrh	r3, [r4, #12]
 8008a3c:	059a      	lsls	r2, r3, #22
 8008a3e:	d402      	bmi.n	8008a46 <setvbuf+0x42>
 8008a40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a42:	f000 f954 	bl	8008cee <__retarget_lock_acquire_recursive>
 8008a46:	4621      	mov	r1, r4
 8008a48:	4638      	mov	r0, r7
 8008a4a:	f001 fcb3 	bl	800a3b4 <_fflush_r>
 8008a4e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a50:	b141      	cbz	r1, 8008a64 <setvbuf+0x60>
 8008a52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a56:	4299      	cmp	r1, r3
 8008a58:	d002      	beq.n	8008a60 <setvbuf+0x5c>
 8008a5a:	4638      	mov	r0, r7
 8008a5c:	f000 ffa4 	bl	80099a8 <_free_r>
 8008a60:	2300      	movs	r3, #0
 8008a62:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a64:	2300      	movs	r3, #0
 8008a66:	61a3      	str	r3, [r4, #24]
 8008a68:	6063      	str	r3, [r4, #4]
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	061b      	lsls	r3, r3, #24
 8008a6e:	d503      	bpl.n	8008a78 <setvbuf+0x74>
 8008a70:	6921      	ldr	r1, [r4, #16]
 8008a72:	4638      	mov	r0, r7
 8008a74:	f000 ff98 	bl	80099a8 <_free_r>
 8008a78:	89a3      	ldrh	r3, [r4, #12]
 8008a7a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8008a7e:	f023 0303 	bic.w	r3, r3, #3
 8008a82:	f1b8 0f02 	cmp.w	r8, #2
 8008a86:	81a3      	strh	r3, [r4, #12]
 8008a88:	d061      	beq.n	8008b4e <setvbuf+0x14a>
 8008a8a:	ab01      	add	r3, sp, #4
 8008a8c:	466a      	mov	r2, sp
 8008a8e:	4621      	mov	r1, r4
 8008a90:	4638      	mov	r0, r7
 8008a92:	f001 fcb7 	bl	800a404 <__swhatbuf_r>
 8008a96:	89a3      	ldrh	r3, [r4, #12]
 8008a98:	4318      	orrs	r0, r3
 8008a9a:	81a0      	strh	r0, [r4, #12]
 8008a9c:	bb2d      	cbnz	r5, 8008aea <setvbuf+0xe6>
 8008a9e:	9d00      	ldr	r5, [sp, #0]
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	f000 ffcb 	bl	8009a3c <malloc>
 8008aa6:	4606      	mov	r6, r0
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	d152      	bne.n	8008b52 <setvbuf+0x14e>
 8008aac:	f8dd 9000 	ldr.w	r9, [sp]
 8008ab0:	45a9      	cmp	r9, r5
 8008ab2:	d140      	bne.n	8008b36 <setvbuf+0x132>
 8008ab4:	f04f 35ff 	mov.w	r5, #4294967295
 8008ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008abc:	f043 0202 	orr.w	r2, r3, #2
 8008ac0:	81a2      	strh	r2, [r4, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	60a2      	str	r2, [r4, #8]
 8008ac6:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8008aca:	6022      	str	r2, [r4, #0]
 8008acc:	6122      	str	r2, [r4, #16]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	6162      	str	r2, [r4, #20]
 8008ad2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ad4:	07d6      	lsls	r6, r2, #31
 8008ad6:	d404      	bmi.n	8008ae2 <setvbuf+0xde>
 8008ad8:	0598      	lsls	r0, r3, #22
 8008ada:	d402      	bmi.n	8008ae2 <setvbuf+0xde>
 8008adc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ade:	f000 f907 	bl	8008cf0 <__retarget_lock_release_recursive>
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	b003      	add	sp, #12
 8008ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008aea:	2e00      	cmp	r6, #0
 8008aec:	d0d8      	beq.n	8008aa0 <setvbuf+0x9c>
 8008aee:	6a3b      	ldr	r3, [r7, #32]
 8008af0:	b913      	cbnz	r3, 8008af8 <setvbuf+0xf4>
 8008af2:	4638      	mov	r0, r7
 8008af4:	f7ff ff50 	bl	8008998 <__sinit>
 8008af8:	f1b8 0f01 	cmp.w	r8, #1
 8008afc:	bf08      	it	eq
 8008afe:	89a3      	ldrheq	r3, [r4, #12]
 8008b00:	6026      	str	r6, [r4, #0]
 8008b02:	bf04      	itt	eq
 8008b04:	f043 0301 	orreq.w	r3, r3, #1
 8008b08:	81a3      	strheq	r3, [r4, #12]
 8008b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b0e:	f013 0208 	ands.w	r2, r3, #8
 8008b12:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008b16:	d01e      	beq.n	8008b56 <setvbuf+0x152>
 8008b18:	07d9      	lsls	r1, r3, #31
 8008b1a:	bf41      	itttt	mi
 8008b1c:	2200      	movmi	r2, #0
 8008b1e:	426d      	negmi	r5, r5
 8008b20:	60a2      	strmi	r2, [r4, #8]
 8008b22:	61a5      	strmi	r5, [r4, #24]
 8008b24:	bf58      	it	pl
 8008b26:	60a5      	strpl	r5, [r4, #8]
 8008b28:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b2a:	07d2      	lsls	r2, r2, #31
 8008b2c:	d401      	bmi.n	8008b32 <setvbuf+0x12e>
 8008b2e:	059b      	lsls	r3, r3, #22
 8008b30:	d513      	bpl.n	8008b5a <setvbuf+0x156>
 8008b32:	2500      	movs	r5, #0
 8008b34:	e7d5      	b.n	8008ae2 <setvbuf+0xde>
 8008b36:	4648      	mov	r0, r9
 8008b38:	f000 ff80 	bl	8009a3c <malloc>
 8008b3c:	4606      	mov	r6, r0
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d0b8      	beq.n	8008ab4 <setvbuf+0xb0>
 8008b42:	89a3      	ldrh	r3, [r4, #12]
 8008b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b48:	81a3      	strh	r3, [r4, #12]
 8008b4a:	464d      	mov	r5, r9
 8008b4c:	e7cf      	b.n	8008aee <setvbuf+0xea>
 8008b4e:	2500      	movs	r5, #0
 8008b50:	e7b2      	b.n	8008ab8 <setvbuf+0xb4>
 8008b52:	46a9      	mov	r9, r5
 8008b54:	e7f5      	b.n	8008b42 <setvbuf+0x13e>
 8008b56:	60a2      	str	r2, [r4, #8]
 8008b58:	e7e6      	b.n	8008b28 <setvbuf+0x124>
 8008b5a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b5c:	f000 f8c8 	bl	8008cf0 <__retarget_lock_release_recursive>
 8008b60:	e7e7      	b.n	8008b32 <setvbuf+0x12e>
 8008b62:	f04f 35ff 	mov.w	r5, #4294967295
 8008b66:	e7bc      	b.n	8008ae2 <setvbuf+0xde>
 8008b68:	20002f90 	.word	0x20002f90

08008b6c <__sread>:
 8008b6c:	b510      	push	{r4, lr}
 8008b6e:	460c      	mov	r4, r1
 8008b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b74:	f000 f86c 	bl	8008c50 <_read_r>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	bfab      	itete	ge
 8008b7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8008b80:	181b      	addge	r3, r3, r0
 8008b82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b86:	bfac      	ite	ge
 8008b88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b8a:	81a3      	strhlt	r3, [r4, #12]
 8008b8c:	bd10      	pop	{r4, pc}

08008b8e <__swrite>:
 8008b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b92:	461f      	mov	r7, r3
 8008b94:	898b      	ldrh	r3, [r1, #12]
 8008b96:	05db      	lsls	r3, r3, #23
 8008b98:	4605      	mov	r5, r0
 8008b9a:	460c      	mov	r4, r1
 8008b9c:	4616      	mov	r6, r2
 8008b9e:	d505      	bpl.n	8008bac <__swrite+0x1e>
 8008ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ba4:	2302      	movs	r3, #2
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f000 f840 	bl	8008c2c <_lseek_r>
 8008bac:	89a3      	ldrh	r3, [r4, #12]
 8008bae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008bb6:	81a3      	strh	r3, [r4, #12]
 8008bb8:	4632      	mov	r2, r6
 8008bba:	463b      	mov	r3, r7
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc2:	f000 b857 	b.w	8008c74 <_write_r>

08008bc6 <__sseek>:
 8008bc6:	b510      	push	{r4, lr}
 8008bc8:	460c      	mov	r4, r1
 8008bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bce:	f000 f82d 	bl	8008c2c <_lseek_r>
 8008bd2:	1c43      	adds	r3, r0, #1
 8008bd4:	89a3      	ldrh	r3, [r4, #12]
 8008bd6:	bf15      	itete	ne
 8008bd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008bda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008bde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008be2:	81a3      	strheq	r3, [r4, #12]
 8008be4:	bf18      	it	ne
 8008be6:	81a3      	strhne	r3, [r4, #12]
 8008be8:	bd10      	pop	{r4, pc}

08008bea <__sclose>:
 8008bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bee:	f000 b80d 	b.w	8008c0c <_close_r>

08008bf2 <memset>:
 8008bf2:	4402      	add	r2, r0
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d100      	bne.n	8008bfc <memset+0xa>
 8008bfa:	4770      	bx	lr
 8008bfc:	f803 1b01 	strb.w	r1, [r3], #1
 8008c00:	e7f9      	b.n	8008bf6 <memset+0x4>
	...

08008c04 <_localeconv_r>:
 8008c04:	4800      	ldr	r0, [pc, #0]	@ (8008c08 <_localeconv_r+0x4>)
 8008c06:	4770      	bx	lr
 8008c08:	200030d0 	.word	0x200030d0

08008c0c <_close_r>:
 8008c0c:	b538      	push	{r3, r4, r5, lr}
 8008c0e:	4d06      	ldr	r5, [pc, #24]	@ (8008c28 <_close_r+0x1c>)
 8008c10:	2300      	movs	r3, #0
 8008c12:	4604      	mov	r4, r0
 8008c14:	4608      	mov	r0, r1
 8008c16:	602b      	str	r3, [r5, #0]
 8008c18:	f7f9 fd1a 	bl	8002650 <_close>
 8008c1c:	1c43      	adds	r3, r0, #1
 8008c1e:	d102      	bne.n	8008c26 <_close_r+0x1a>
 8008c20:	682b      	ldr	r3, [r5, #0]
 8008c22:	b103      	cbz	r3, 8008c26 <_close_r+0x1a>
 8008c24:	6023      	str	r3, [r4, #0]
 8008c26:	bd38      	pop	{r3, r4, r5, pc}
 8008c28:	20004de0 	.word	0x20004de0

08008c2c <_lseek_r>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	4d07      	ldr	r5, [pc, #28]	@ (8008c4c <_lseek_r+0x20>)
 8008c30:	4604      	mov	r4, r0
 8008c32:	4608      	mov	r0, r1
 8008c34:	4611      	mov	r1, r2
 8008c36:	2200      	movs	r2, #0
 8008c38:	602a      	str	r2, [r5, #0]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f7f9 fd14 	bl	8002668 <_lseek>
 8008c40:	1c43      	adds	r3, r0, #1
 8008c42:	d102      	bne.n	8008c4a <_lseek_r+0x1e>
 8008c44:	682b      	ldr	r3, [r5, #0]
 8008c46:	b103      	cbz	r3, 8008c4a <_lseek_r+0x1e>
 8008c48:	6023      	str	r3, [r4, #0]
 8008c4a:	bd38      	pop	{r3, r4, r5, pc}
 8008c4c:	20004de0 	.word	0x20004de0

08008c50 <_read_r>:
 8008c50:	b538      	push	{r3, r4, r5, lr}
 8008c52:	4d07      	ldr	r5, [pc, #28]	@ (8008c70 <_read_r+0x20>)
 8008c54:	4604      	mov	r4, r0
 8008c56:	4608      	mov	r0, r1
 8008c58:	4611      	mov	r1, r2
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	602a      	str	r2, [r5, #0]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	f7f9 fd0a 	bl	8002678 <_read>
 8008c64:	1c43      	adds	r3, r0, #1
 8008c66:	d102      	bne.n	8008c6e <_read_r+0x1e>
 8008c68:	682b      	ldr	r3, [r5, #0]
 8008c6a:	b103      	cbz	r3, 8008c6e <_read_r+0x1e>
 8008c6c:	6023      	str	r3, [r4, #0]
 8008c6e:	bd38      	pop	{r3, r4, r5, pc}
 8008c70:	20004de0 	.word	0x20004de0

08008c74 <_write_r>:
 8008c74:	b538      	push	{r3, r4, r5, lr}
 8008c76:	4d07      	ldr	r5, [pc, #28]	@ (8008c94 <_write_r+0x20>)
 8008c78:	4604      	mov	r4, r0
 8008c7a:	4608      	mov	r0, r1
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	2200      	movs	r2, #0
 8008c80:	602a      	str	r2, [r5, #0]
 8008c82:	461a      	mov	r2, r3
 8008c84:	f7f9 fcca 	bl	800261c <_write>
 8008c88:	1c43      	adds	r3, r0, #1
 8008c8a:	d102      	bne.n	8008c92 <_write_r+0x1e>
 8008c8c:	682b      	ldr	r3, [r5, #0]
 8008c8e:	b103      	cbz	r3, 8008c92 <_write_r+0x1e>
 8008c90:	6023      	str	r3, [r4, #0]
 8008c92:	bd38      	pop	{r3, r4, r5, pc}
 8008c94:	20004de0 	.word	0x20004de0

08008c98 <__errno>:
 8008c98:	4b01      	ldr	r3, [pc, #4]	@ (8008ca0 <__errno+0x8>)
 8008c9a:	6818      	ldr	r0, [r3, #0]
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	20002f90 	.word	0x20002f90

08008ca4 <__libc_init_array>:
 8008ca4:	b570      	push	{r4, r5, r6, lr}
 8008ca6:	4d0d      	ldr	r5, [pc, #52]	@ (8008cdc <__libc_init_array+0x38>)
 8008ca8:	4c0d      	ldr	r4, [pc, #52]	@ (8008ce0 <__libc_init_array+0x3c>)
 8008caa:	1b64      	subs	r4, r4, r5
 8008cac:	10a4      	asrs	r4, r4, #2
 8008cae:	2600      	movs	r6, #0
 8008cb0:	42a6      	cmp	r6, r4
 8008cb2:	d109      	bne.n	8008cc8 <__libc_init_array+0x24>
 8008cb4:	4d0b      	ldr	r5, [pc, #44]	@ (8008ce4 <__libc_init_array+0x40>)
 8008cb6:	4c0c      	ldr	r4, [pc, #48]	@ (8008ce8 <__libc_init_array+0x44>)
 8008cb8:	f001 fece 	bl	800aa58 <_init>
 8008cbc:	1b64      	subs	r4, r4, r5
 8008cbe:	10a4      	asrs	r4, r4, #2
 8008cc0:	2600      	movs	r6, #0
 8008cc2:	42a6      	cmp	r6, r4
 8008cc4:	d105      	bne.n	8008cd2 <__libc_init_array+0x2e>
 8008cc6:	bd70      	pop	{r4, r5, r6, pc}
 8008cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ccc:	4798      	blx	r3
 8008cce:	3601      	adds	r6, #1
 8008cd0:	e7ee      	b.n	8008cb0 <__libc_init_array+0xc>
 8008cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cd6:	4798      	blx	r3
 8008cd8:	3601      	adds	r6, #1
 8008cda:	e7f2      	b.n	8008cc2 <__libc_init_array+0x1e>
 8008cdc:	0801ccd0 	.word	0x0801ccd0
 8008ce0:	0801ccd0 	.word	0x0801ccd0
 8008ce4:	0801ccd0 	.word	0x0801ccd0
 8008ce8:	0801ccd4 	.word	0x0801ccd4

08008cec <__retarget_lock_init_recursive>:
 8008cec:	4770      	bx	lr

08008cee <__retarget_lock_acquire_recursive>:
 8008cee:	4770      	bx	lr

08008cf0 <__retarget_lock_release_recursive>:
 8008cf0:	4770      	bx	lr

08008cf2 <memcpy>:
 8008cf2:	440a      	add	r2, r1
 8008cf4:	4291      	cmp	r1, r2
 8008cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cfa:	d100      	bne.n	8008cfe <memcpy+0xc>
 8008cfc:	4770      	bx	lr
 8008cfe:	b510      	push	{r4, lr}
 8008d00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d08:	4291      	cmp	r1, r2
 8008d0a:	d1f9      	bne.n	8008d00 <memcpy+0xe>
 8008d0c:	bd10      	pop	{r4, pc}

08008d0e <quorem>:
 8008d0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d12:	6903      	ldr	r3, [r0, #16]
 8008d14:	690c      	ldr	r4, [r1, #16]
 8008d16:	42a3      	cmp	r3, r4
 8008d18:	4607      	mov	r7, r0
 8008d1a:	db7e      	blt.n	8008e1a <quorem+0x10c>
 8008d1c:	3c01      	subs	r4, #1
 8008d1e:	f101 0814 	add.w	r8, r1, #20
 8008d22:	00a3      	lsls	r3, r4, #2
 8008d24:	f100 0514 	add.w	r5, r0, #20
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d2e:	9301      	str	r3, [sp, #4]
 8008d30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d40:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d44:	d32e      	bcc.n	8008da4 <quorem+0x96>
 8008d46:	f04f 0a00 	mov.w	sl, #0
 8008d4a:	46c4      	mov	ip, r8
 8008d4c:	46ae      	mov	lr, r5
 8008d4e:	46d3      	mov	fp, sl
 8008d50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008d54:	b298      	uxth	r0, r3
 8008d56:	fb06 a000 	mla	r0, r6, r0, sl
 8008d5a:	0c02      	lsrs	r2, r0, #16
 8008d5c:	0c1b      	lsrs	r3, r3, #16
 8008d5e:	fb06 2303 	mla	r3, r6, r3, r2
 8008d62:	f8de 2000 	ldr.w	r2, [lr]
 8008d66:	b280      	uxth	r0, r0
 8008d68:	b292      	uxth	r2, r2
 8008d6a:	1a12      	subs	r2, r2, r0
 8008d6c:	445a      	add	r2, fp
 8008d6e:	f8de 0000 	ldr.w	r0, [lr]
 8008d72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008d7c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008d80:	b292      	uxth	r2, r2
 8008d82:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008d86:	45e1      	cmp	r9, ip
 8008d88:	f84e 2b04 	str.w	r2, [lr], #4
 8008d8c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008d90:	d2de      	bcs.n	8008d50 <quorem+0x42>
 8008d92:	9b00      	ldr	r3, [sp, #0]
 8008d94:	58eb      	ldr	r3, [r5, r3]
 8008d96:	b92b      	cbnz	r3, 8008da4 <quorem+0x96>
 8008d98:	9b01      	ldr	r3, [sp, #4]
 8008d9a:	3b04      	subs	r3, #4
 8008d9c:	429d      	cmp	r5, r3
 8008d9e:	461a      	mov	r2, r3
 8008da0:	d32f      	bcc.n	8008e02 <quorem+0xf4>
 8008da2:	613c      	str	r4, [r7, #16]
 8008da4:	4638      	mov	r0, r7
 8008da6:	f001 f979 	bl	800a09c <__mcmp>
 8008daa:	2800      	cmp	r0, #0
 8008dac:	db25      	blt.n	8008dfa <quorem+0xec>
 8008dae:	4629      	mov	r1, r5
 8008db0:	2000      	movs	r0, #0
 8008db2:	f858 2b04 	ldr.w	r2, [r8], #4
 8008db6:	f8d1 c000 	ldr.w	ip, [r1]
 8008dba:	fa1f fe82 	uxth.w	lr, r2
 8008dbe:	fa1f f38c 	uxth.w	r3, ip
 8008dc2:	eba3 030e 	sub.w	r3, r3, lr
 8008dc6:	4403      	add	r3, r0
 8008dc8:	0c12      	lsrs	r2, r2, #16
 8008dca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008dce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008dd8:	45c1      	cmp	r9, r8
 8008dda:	f841 3b04 	str.w	r3, [r1], #4
 8008dde:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008de2:	d2e6      	bcs.n	8008db2 <quorem+0xa4>
 8008de4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008de8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008dec:	b922      	cbnz	r2, 8008df8 <quorem+0xea>
 8008dee:	3b04      	subs	r3, #4
 8008df0:	429d      	cmp	r5, r3
 8008df2:	461a      	mov	r2, r3
 8008df4:	d30b      	bcc.n	8008e0e <quorem+0x100>
 8008df6:	613c      	str	r4, [r7, #16]
 8008df8:	3601      	adds	r6, #1
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	b003      	add	sp, #12
 8008dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e02:	6812      	ldr	r2, [r2, #0]
 8008e04:	3b04      	subs	r3, #4
 8008e06:	2a00      	cmp	r2, #0
 8008e08:	d1cb      	bne.n	8008da2 <quorem+0x94>
 8008e0a:	3c01      	subs	r4, #1
 8008e0c:	e7c6      	b.n	8008d9c <quorem+0x8e>
 8008e0e:	6812      	ldr	r2, [r2, #0]
 8008e10:	3b04      	subs	r3, #4
 8008e12:	2a00      	cmp	r2, #0
 8008e14:	d1ef      	bne.n	8008df6 <quorem+0xe8>
 8008e16:	3c01      	subs	r4, #1
 8008e18:	e7ea      	b.n	8008df0 <quorem+0xe2>
 8008e1a:	2000      	movs	r0, #0
 8008e1c:	e7ee      	b.n	8008dfc <quorem+0xee>
	...

08008e20 <_dtoa_r>:
 8008e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e24:	69c7      	ldr	r7, [r0, #28]
 8008e26:	b099      	sub	sp, #100	@ 0x64
 8008e28:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008e2c:	ec55 4b10 	vmov	r4, r5, d0
 8008e30:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008e32:	9109      	str	r1, [sp, #36]	@ 0x24
 8008e34:	4683      	mov	fp, r0
 8008e36:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e38:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008e3a:	b97f      	cbnz	r7, 8008e5c <_dtoa_r+0x3c>
 8008e3c:	2010      	movs	r0, #16
 8008e3e:	f000 fdfd 	bl	8009a3c <malloc>
 8008e42:	4602      	mov	r2, r0
 8008e44:	f8cb 001c 	str.w	r0, [fp, #28]
 8008e48:	b920      	cbnz	r0, 8008e54 <_dtoa_r+0x34>
 8008e4a:	4ba7      	ldr	r3, [pc, #668]	@ (80090e8 <_dtoa_r+0x2c8>)
 8008e4c:	21ef      	movs	r1, #239	@ 0xef
 8008e4e:	48a7      	ldr	r0, [pc, #668]	@ (80090ec <_dtoa_r+0x2cc>)
 8008e50:	f001 fb6c 	bl	800a52c <__assert_func>
 8008e54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008e58:	6007      	str	r7, [r0, #0]
 8008e5a:	60c7      	str	r7, [r0, #12]
 8008e5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008e60:	6819      	ldr	r1, [r3, #0]
 8008e62:	b159      	cbz	r1, 8008e7c <_dtoa_r+0x5c>
 8008e64:	685a      	ldr	r2, [r3, #4]
 8008e66:	604a      	str	r2, [r1, #4]
 8008e68:	2301      	movs	r3, #1
 8008e6a:	4093      	lsls	r3, r2
 8008e6c:	608b      	str	r3, [r1, #8]
 8008e6e:	4658      	mov	r0, fp
 8008e70:	f000 feda 	bl	8009c28 <_Bfree>
 8008e74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	601a      	str	r2, [r3, #0]
 8008e7c:	1e2b      	subs	r3, r5, #0
 8008e7e:	bfb9      	ittee	lt
 8008e80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008e84:	9303      	strlt	r3, [sp, #12]
 8008e86:	2300      	movge	r3, #0
 8008e88:	6033      	strge	r3, [r6, #0]
 8008e8a:	9f03      	ldr	r7, [sp, #12]
 8008e8c:	4b98      	ldr	r3, [pc, #608]	@ (80090f0 <_dtoa_r+0x2d0>)
 8008e8e:	bfbc      	itt	lt
 8008e90:	2201      	movlt	r2, #1
 8008e92:	6032      	strlt	r2, [r6, #0]
 8008e94:	43bb      	bics	r3, r7
 8008e96:	d112      	bne.n	8008ebe <_dtoa_r+0x9e>
 8008e98:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008e9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008e9e:	6013      	str	r3, [r2, #0]
 8008ea0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ea4:	4323      	orrs	r3, r4
 8008ea6:	f000 854d 	beq.w	8009944 <_dtoa_r+0xb24>
 8008eaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008eac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009104 <_dtoa_r+0x2e4>
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f000 854f 	beq.w	8009954 <_dtoa_r+0xb34>
 8008eb6:	f10a 0303 	add.w	r3, sl, #3
 8008eba:	f000 bd49 	b.w	8009950 <_dtoa_r+0xb30>
 8008ebe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	ec51 0b17 	vmov	r0, r1, d7
 8008ec8:	2300      	movs	r3, #0
 8008eca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008ece:	f7f7 fe0b 	bl	8000ae8 <__aeabi_dcmpeq>
 8008ed2:	4680      	mov	r8, r0
 8008ed4:	b158      	cbz	r0, 8008eee <_dtoa_r+0xce>
 8008ed6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008ed8:	2301      	movs	r3, #1
 8008eda:	6013      	str	r3, [r2, #0]
 8008edc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008ede:	b113      	cbz	r3, 8008ee6 <_dtoa_r+0xc6>
 8008ee0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008ee2:	4b84      	ldr	r3, [pc, #528]	@ (80090f4 <_dtoa_r+0x2d4>)
 8008ee4:	6013      	str	r3, [r2, #0]
 8008ee6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009108 <_dtoa_r+0x2e8>
 8008eea:	f000 bd33 	b.w	8009954 <_dtoa_r+0xb34>
 8008eee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008ef2:	aa16      	add	r2, sp, #88	@ 0x58
 8008ef4:	a917      	add	r1, sp, #92	@ 0x5c
 8008ef6:	4658      	mov	r0, fp
 8008ef8:	f001 f980 	bl	800a1fc <__d2b>
 8008efc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008f00:	4681      	mov	r9, r0
 8008f02:	2e00      	cmp	r6, #0
 8008f04:	d077      	beq.n	8008ff6 <_dtoa_r+0x1d6>
 8008f06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f08:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008f0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008f18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008f1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008f20:	4619      	mov	r1, r3
 8008f22:	2200      	movs	r2, #0
 8008f24:	4b74      	ldr	r3, [pc, #464]	@ (80090f8 <_dtoa_r+0x2d8>)
 8008f26:	f7f7 f9bf 	bl	80002a8 <__aeabi_dsub>
 8008f2a:	a369      	add	r3, pc, #420	@ (adr r3, 80090d0 <_dtoa_r+0x2b0>)
 8008f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f30:	f7f7 fb72 	bl	8000618 <__aeabi_dmul>
 8008f34:	a368      	add	r3, pc, #416	@ (adr r3, 80090d8 <_dtoa_r+0x2b8>)
 8008f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3a:	f7f7 f9b7 	bl	80002ac <__adddf3>
 8008f3e:	4604      	mov	r4, r0
 8008f40:	4630      	mov	r0, r6
 8008f42:	460d      	mov	r5, r1
 8008f44:	f7f7 fafe 	bl	8000544 <__aeabi_i2d>
 8008f48:	a365      	add	r3, pc, #404	@ (adr r3, 80090e0 <_dtoa_r+0x2c0>)
 8008f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4e:	f7f7 fb63 	bl	8000618 <__aeabi_dmul>
 8008f52:	4602      	mov	r2, r0
 8008f54:	460b      	mov	r3, r1
 8008f56:	4620      	mov	r0, r4
 8008f58:	4629      	mov	r1, r5
 8008f5a:	f7f7 f9a7 	bl	80002ac <__adddf3>
 8008f5e:	4604      	mov	r4, r0
 8008f60:	460d      	mov	r5, r1
 8008f62:	f7f7 fe09 	bl	8000b78 <__aeabi_d2iz>
 8008f66:	2200      	movs	r2, #0
 8008f68:	4607      	mov	r7, r0
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	4629      	mov	r1, r5
 8008f70:	f7f7 fdc4 	bl	8000afc <__aeabi_dcmplt>
 8008f74:	b140      	cbz	r0, 8008f88 <_dtoa_r+0x168>
 8008f76:	4638      	mov	r0, r7
 8008f78:	f7f7 fae4 	bl	8000544 <__aeabi_i2d>
 8008f7c:	4622      	mov	r2, r4
 8008f7e:	462b      	mov	r3, r5
 8008f80:	f7f7 fdb2 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f84:	b900      	cbnz	r0, 8008f88 <_dtoa_r+0x168>
 8008f86:	3f01      	subs	r7, #1
 8008f88:	2f16      	cmp	r7, #22
 8008f8a:	d851      	bhi.n	8009030 <_dtoa_r+0x210>
 8008f8c:	4b5b      	ldr	r3, [pc, #364]	@ (80090fc <_dtoa_r+0x2dc>)
 8008f8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f9a:	f7f7 fdaf 	bl	8000afc <__aeabi_dcmplt>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d048      	beq.n	8009034 <_dtoa_r+0x214>
 8008fa2:	3f01      	subs	r7, #1
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	9312      	str	r3, [sp, #72]	@ 0x48
 8008fa8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008faa:	1b9b      	subs	r3, r3, r6
 8008fac:	1e5a      	subs	r2, r3, #1
 8008fae:	bf44      	itt	mi
 8008fb0:	f1c3 0801 	rsbmi	r8, r3, #1
 8008fb4:	2300      	movmi	r3, #0
 8008fb6:	9208      	str	r2, [sp, #32]
 8008fb8:	bf54      	ite	pl
 8008fba:	f04f 0800 	movpl.w	r8, #0
 8008fbe:	9308      	strmi	r3, [sp, #32]
 8008fc0:	2f00      	cmp	r7, #0
 8008fc2:	db39      	blt.n	8009038 <_dtoa_r+0x218>
 8008fc4:	9b08      	ldr	r3, [sp, #32]
 8008fc6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008fc8:	443b      	add	r3, r7
 8008fca:	9308      	str	r3, [sp, #32]
 8008fcc:	2300      	movs	r3, #0
 8008fce:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fd2:	2b09      	cmp	r3, #9
 8008fd4:	d864      	bhi.n	80090a0 <_dtoa_r+0x280>
 8008fd6:	2b05      	cmp	r3, #5
 8008fd8:	bfc4      	itt	gt
 8008fda:	3b04      	subgt	r3, #4
 8008fdc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fe0:	f1a3 0302 	sub.w	r3, r3, #2
 8008fe4:	bfcc      	ite	gt
 8008fe6:	2400      	movgt	r4, #0
 8008fe8:	2401      	movle	r4, #1
 8008fea:	2b03      	cmp	r3, #3
 8008fec:	d863      	bhi.n	80090b6 <_dtoa_r+0x296>
 8008fee:	e8df f003 	tbb	[pc, r3]
 8008ff2:	372a      	.short	0x372a
 8008ff4:	5535      	.short	0x5535
 8008ff6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008ffa:	441e      	add	r6, r3
 8008ffc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009000:	2b20      	cmp	r3, #32
 8009002:	bfc1      	itttt	gt
 8009004:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009008:	409f      	lslgt	r7, r3
 800900a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800900e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009012:	bfd6      	itet	le
 8009014:	f1c3 0320 	rsble	r3, r3, #32
 8009018:	ea47 0003 	orrgt.w	r0, r7, r3
 800901c:	fa04 f003 	lslle.w	r0, r4, r3
 8009020:	f7f7 fa80 	bl	8000524 <__aeabi_ui2d>
 8009024:	2201      	movs	r2, #1
 8009026:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800902a:	3e01      	subs	r6, #1
 800902c:	9214      	str	r2, [sp, #80]	@ 0x50
 800902e:	e777      	b.n	8008f20 <_dtoa_r+0x100>
 8009030:	2301      	movs	r3, #1
 8009032:	e7b8      	b.n	8008fa6 <_dtoa_r+0x186>
 8009034:	9012      	str	r0, [sp, #72]	@ 0x48
 8009036:	e7b7      	b.n	8008fa8 <_dtoa_r+0x188>
 8009038:	427b      	negs	r3, r7
 800903a:	930a      	str	r3, [sp, #40]	@ 0x28
 800903c:	2300      	movs	r3, #0
 800903e:	eba8 0807 	sub.w	r8, r8, r7
 8009042:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009044:	e7c4      	b.n	8008fd0 <_dtoa_r+0x1b0>
 8009046:	2300      	movs	r3, #0
 8009048:	930b      	str	r3, [sp, #44]	@ 0x2c
 800904a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800904c:	2b00      	cmp	r3, #0
 800904e:	dc35      	bgt.n	80090bc <_dtoa_r+0x29c>
 8009050:	2301      	movs	r3, #1
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	9307      	str	r3, [sp, #28]
 8009056:	461a      	mov	r2, r3
 8009058:	920e      	str	r2, [sp, #56]	@ 0x38
 800905a:	e00b      	b.n	8009074 <_dtoa_r+0x254>
 800905c:	2301      	movs	r3, #1
 800905e:	e7f3      	b.n	8009048 <_dtoa_r+0x228>
 8009060:	2300      	movs	r3, #0
 8009062:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009064:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009066:	18fb      	adds	r3, r7, r3
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	3301      	adds	r3, #1
 800906c:	2b01      	cmp	r3, #1
 800906e:	9307      	str	r3, [sp, #28]
 8009070:	bfb8      	it	lt
 8009072:	2301      	movlt	r3, #1
 8009074:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009078:	2100      	movs	r1, #0
 800907a:	2204      	movs	r2, #4
 800907c:	f102 0514 	add.w	r5, r2, #20
 8009080:	429d      	cmp	r5, r3
 8009082:	d91f      	bls.n	80090c4 <_dtoa_r+0x2a4>
 8009084:	6041      	str	r1, [r0, #4]
 8009086:	4658      	mov	r0, fp
 8009088:	f000 fd8e 	bl	8009ba8 <_Balloc>
 800908c:	4682      	mov	sl, r0
 800908e:	2800      	cmp	r0, #0
 8009090:	d13c      	bne.n	800910c <_dtoa_r+0x2ec>
 8009092:	4b1b      	ldr	r3, [pc, #108]	@ (8009100 <_dtoa_r+0x2e0>)
 8009094:	4602      	mov	r2, r0
 8009096:	f240 11af 	movw	r1, #431	@ 0x1af
 800909a:	e6d8      	b.n	8008e4e <_dtoa_r+0x2e>
 800909c:	2301      	movs	r3, #1
 800909e:	e7e0      	b.n	8009062 <_dtoa_r+0x242>
 80090a0:	2401      	movs	r4, #1
 80090a2:	2300      	movs	r3, #0
 80090a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80090a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80090a8:	f04f 33ff 	mov.w	r3, #4294967295
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	9307      	str	r3, [sp, #28]
 80090b0:	2200      	movs	r2, #0
 80090b2:	2312      	movs	r3, #18
 80090b4:	e7d0      	b.n	8009058 <_dtoa_r+0x238>
 80090b6:	2301      	movs	r3, #1
 80090b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80090ba:	e7f5      	b.n	80090a8 <_dtoa_r+0x288>
 80090bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	9307      	str	r3, [sp, #28]
 80090c2:	e7d7      	b.n	8009074 <_dtoa_r+0x254>
 80090c4:	3101      	adds	r1, #1
 80090c6:	0052      	lsls	r2, r2, #1
 80090c8:	e7d8      	b.n	800907c <_dtoa_r+0x25c>
 80090ca:	bf00      	nop
 80090cc:	f3af 8000 	nop.w
 80090d0:	636f4361 	.word	0x636f4361
 80090d4:	3fd287a7 	.word	0x3fd287a7
 80090d8:	8b60c8b3 	.word	0x8b60c8b3
 80090dc:	3fc68a28 	.word	0x3fc68a28
 80090e0:	509f79fb 	.word	0x509f79fb
 80090e4:	3fd34413 	.word	0x3fd34413
 80090e8:	0801c999 	.word	0x0801c999
 80090ec:	0801c9b0 	.word	0x0801c9b0
 80090f0:	7ff00000 	.word	0x7ff00000
 80090f4:	0801c969 	.word	0x0801c969
 80090f8:	3ff80000 	.word	0x3ff80000
 80090fc:	0801caa8 	.word	0x0801caa8
 8009100:	0801ca08 	.word	0x0801ca08
 8009104:	0801c995 	.word	0x0801c995
 8009108:	0801c968 	.word	0x0801c968
 800910c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009110:	6018      	str	r0, [r3, #0]
 8009112:	9b07      	ldr	r3, [sp, #28]
 8009114:	2b0e      	cmp	r3, #14
 8009116:	f200 80a4 	bhi.w	8009262 <_dtoa_r+0x442>
 800911a:	2c00      	cmp	r4, #0
 800911c:	f000 80a1 	beq.w	8009262 <_dtoa_r+0x442>
 8009120:	2f00      	cmp	r7, #0
 8009122:	dd33      	ble.n	800918c <_dtoa_r+0x36c>
 8009124:	4bad      	ldr	r3, [pc, #692]	@ (80093dc <_dtoa_r+0x5bc>)
 8009126:	f007 020f 	and.w	r2, r7, #15
 800912a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800912e:	ed93 7b00 	vldr	d7, [r3]
 8009132:	05f8      	lsls	r0, r7, #23
 8009134:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009138:	ea4f 1427 	mov.w	r4, r7, asr #4
 800913c:	d516      	bpl.n	800916c <_dtoa_r+0x34c>
 800913e:	4ba8      	ldr	r3, [pc, #672]	@ (80093e0 <_dtoa_r+0x5c0>)
 8009140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009144:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009148:	f7f7 fb90 	bl	800086c <__aeabi_ddiv>
 800914c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009150:	f004 040f 	and.w	r4, r4, #15
 8009154:	2603      	movs	r6, #3
 8009156:	4da2      	ldr	r5, [pc, #648]	@ (80093e0 <_dtoa_r+0x5c0>)
 8009158:	b954      	cbnz	r4, 8009170 <_dtoa_r+0x350>
 800915a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800915e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009162:	f7f7 fb83 	bl	800086c <__aeabi_ddiv>
 8009166:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800916a:	e028      	b.n	80091be <_dtoa_r+0x39e>
 800916c:	2602      	movs	r6, #2
 800916e:	e7f2      	b.n	8009156 <_dtoa_r+0x336>
 8009170:	07e1      	lsls	r1, r4, #31
 8009172:	d508      	bpl.n	8009186 <_dtoa_r+0x366>
 8009174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009178:	e9d5 2300 	ldrd	r2, r3, [r5]
 800917c:	f7f7 fa4c 	bl	8000618 <__aeabi_dmul>
 8009180:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009184:	3601      	adds	r6, #1
 8009186:	1064      	asrs	r4, r4, #1
 8009188:	3508      	adds	r5, #8
 800918a:	e7e5      	b.n	8009158 <_dtoa_r+0x338>
 800918c:	f000 80d2 	beq.w	8009334 <_dtoa_r+0x514>
 8009190:	427c      	negs	r4, r7
 8009192:	4b92      	ldr	r3, [pc, #584]	@ (80093dc <_dtoa_r+0x5bc>)
 8009194:	4d92      	ldr	r5, [pc, #584]	@ (80093e0 <_dtoa_r+0x5c0>)
 8009196:	f004 020f 	and.w	r2, r4, #15
 800919a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800919e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091a6:	f7f7 fa37 	bl	8000618 <__aeabi_dmul>
 80091aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091ae:	1124      	asrs	r4, r4, #4
 80091b0:	2300      	movs	r3, #0
 80091b2:	2602      	movs	r6, #2
 80091b4:	2c00      	cmp	r4, #0
 80091b6:	f040 80b2 	bne.w	800931e <_dtoa_r+0x4fe>
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1d3      	bne.n	8009166 <_dtoa_r+0x346>
 80091be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80091c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 80b7 	beq.w	8009338 <_dtoa_r+0x518>
 80091ca:	4b86      	ldr	r3, [pc, #536]	@ (80093e4 <_dtoa_r+0x5c4>)
 80091cc:	2200      	movs	r2, #0
 80091ce:	4620      	mov	r0, r4
 80091d0:	4629      	mov	r1, r5
 80091d2:	f7f7 fc93 	bl	8000afc <__aeabi_dcmplt>
 80091d6:	2800      	cmp	r0, #0
 80091d8:	f000 80ae 	beq.w	8009338 <_dtoa_r+0x518>
 80091dc:	9b07      	ldr	r3, [sp, #28]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f000 80aa 	beq.w	8009338 <_dtoa_r+0x518>
 80091e4:	9b00      	ldr	r3, [sp, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	dd37      	ble.n	800925a <_dtoa_r+0x43a>
 80091ea:	1e7b      	subs	r3, r7, #1
 80091ec:	9304      	str	r3, [sp, #16]
 80091ee:	4620      	mov	r0, r4
 80091f0:	4b7d      	ldr	r3, [pc, #500]	@ (80093e8 <_dtoa_r+0x5c8>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	4629      	mov	r1, r5
 80091f6:	f7f7 fa0f 	bl	8000618 <__aeabi_dmul>
 80091fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091fe:	9c00      	ldr	r4, [sp, #0]
 8009200:	3601      	adds	r6, #1
 8009202:	4630      	mov	r0, r6
 8009204:	f7f7 f99e 	bl	8000544 <__aeabi_i2d>
 8009208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800920c:	f7f7 fa04 	bl	8000618 <__aeabi_dmul>
 8009210:	4b76      	ldr	r3, [pc, #472]	@ (80093ec <_dtoa_r+0x5cc>)
 8009212:	2200      	movs	r2, #0
 8009214:	f7f7 f84a 	bl	80002ac <__adddf3>
 8009218:	4605      	mov	r5, r0
 800921a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800921e:	2c00      	cmp	r4, #0
 8009220:	f040 808d 	bne.w	800933e <_dtoa_r+0x51e>
 8009224:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009228:	4b71      	ldr	r3, [pc, #452]	@ (80093f0 <_dtoa_r+0x5d0>)
 800922a:	2200      	movs	r2, #0
 800922c:	f7f7 f83c 	bl	80002a8 <__aeabi_dsub>
 8009230:	4602      	mov	r2, r0
 8009232:	460b      	mov	r3, r1
 8009234:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009238:	462a      	mov	r2, r5
 800923a:	4633      	mov	r3, r6
 800923c:	f7f7 fc7c 	bl	8000b38 <__aeabi_dcmpgt>
 8009240:	2800      	cmp	r0, #0
 8009242:	f040 828b 	bne.w	800975c <_dtoa_r+0x93c>
 8009246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800924a:	462a      	mov	r2, r5
 800924c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009250:	f7f7 fc54 	bl	8000afc <__aeabi_dcmplt>
 8009254:	2800      	cmp	r0, #0
 8009256:	f040 8128 	bne.w	80094aa <_dtoa_r+0x68a>
 800925a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800925e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009262:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009264:	2b00      	cmp	r3, #0
 8009266:	f2c0 815a 	blt.w	800951e <_dtoa_r+0x6fe>
 800926a:	2f0e      	cmp	r7, #14
 800926c:	f300 8157 	bgt.w	800951e <_dtoa_r+0x6fe>
 8009270:	4b5a      	ldr	r3, [pc, #360]	@ (80093dc <_dtoa_r+0x5bc>)
 8009272:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009276:	ed93 7b00 	vldr	d7, [r3]
 800927a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800927c:	2b00      	cmp	r3, #0
 800927e:	ed8d 7b00 	vstr	d7, [sp]
 8009282:	da03      	bge.n	800928c <_dtoa_r+0x46c>
 8009284:	9b07      	ldr	r3, [sp, #28]
 8009286:	2b00      	cmp	r3, #0
 8009288:	f340 8101 	ble.w	800948e <_dtoa_r+0x66e>
 800928c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009290:	4656      	mov	r6, sl
 8009292:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009296:	4620      	mov	r0, r4
 8009298:	4629      	mov	r1, r5
 800929a:	f7f7 fae7 	bl	800086c <__aeabi_ddiv>
 800929e:	f7f7 fc6b 	bl	8000b78 <__aeabi_d2iz>
 80092a2:	4680      	mov	r8, r0
 80092a4:	f7f7 f94e 	bl	8000544 <__aeabi_i2d>
 80092a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092ac:	f7f7 f9b4 	bl	8000618 <__aeabi_dmul>
 80092b0:	4602      	mov	r2, r0
 80092b2:	460b      	mov	r3, r1
 80092b4:	4620      	mov	r0, r4
 80092b6:	4629      	mov	r1, r5
 80092b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80092bc:	f7f6 fff4 	bl	80002a8 <__aeabi_dsub>
 80092c0:	f806 4b01 	strb.w	r4, [r6], #1
 80092c4:	9d07      	ldr	r5, [sp, #28]
 80092c6:	eba6 040a 	sub.w	r4, r6, sl
 80092ca:	42a5      	cmp	r5, r4
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	f040 8117 	bne.w	8009502 <_dtoa_r+0x6e2>
 80092d4:	f7f6 ffea 	bl	80002ac <__adddf3>
 80092d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092dc:	4604      	mov	r4, r0
 80092de:	460d      	mov	r5, r1
 80092e0:	f7f7 fc2a 	bl	8000b38 <__aeabi_dcmpgt>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	f040 80f9 	bne.w	80094dc <_dtoa_r+0x6bc>
 80092ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092ee:	4620      	mov	r0, r4
 80092f0:	4629      	mov	r1, r5
 80092f2:	f7f7 fbf9 	bl	8000ae8 <__aeabi_dcmpeq>
 80092f6:	b118      	cbz	r0, 8009300 <_dtoa_r+0x4e0>
 80092f8:	f018 0f01 	tst.w	r8, #1
 80092fc:	f040 80ee 	bne.w	80094dc <_dtoa_r+0x6bc>
 8009300:	4649      	mov	r1, r9
 8009302:	4658      	mov	r0, fp
 8009304:	f000 fc90 	bl	8009c28 <_Bfree>
 8009308:	2300      	movs	r3, #0
 800930a:	7033      	strb	r3, [r6, #0]
 800930c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800930e:	3701      	adds	r7, #1
 8009310:	601f      	str	r7, [r3, #0]
 8009312:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 831d 	beq.w	8009954 <_dtoa_r+0xb34>
 800931a:	601e      	str	r6, [r3, #0]
 800931c:	e31a      	b.n	8009954 <_dtoa_r+0xb34>
 800931e:	07e2      	lsls	r2, r4, #31
 8009320:	d505      	bpl.n	800932e <_dtoa_r+0x50e>
 8009322:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009326:	f7f7 f977 	bl	8000618 <__aeabi_dmul>
 800932a:	3601      	adds	r6, #1
 800932c:	2301      	movs	r3, #1
 800932e:	1064      	asrs	r4, r4, #1
 8009330:	3508      	adds	r5, #8
 8009332:	e73f      	b.n	80091b4 <_dtoa_r+0x394>
 8009334:	2602      	movs	r6, #2
 8009336:	e742      	b.n	80091be <_dtoa_r+0x39e>
 8009338:	9c07      	ldr	r4, [sp, #28]
 800933a:	9704      	str	r7, [sp, #16]
 800933c:	e761      	b.n	8009202 <_dtoa_r+0x3e2>
 800933e:	4b27      	ldr	r3, [pc, #156]	@ (80093dc <_dtoa_r+0x5bc>)
 8009340:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009342:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009346:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800934a:	4454      	add	r4, sl
 800934c:	2900      	cmp	r1, #0
 800934e:	d053      	beq.n	80093f8 <_dtoa_r+0x5d8>
 8009350:	4928      	ldr	r1, [pc, #160]	@ (80093f4 <_dtoa_r+0x5d4>)
 8009352:	2000      	movs	r0, #0
 8009354:	f7f7 fa8a 	bl	800086c <__aeabi_ddiv>
 8009358:	4633      	mov	r3, r6
 800935a:	462a      	mov	r2, r5
 800935c:	f7f6 ffa4 	bl	80002a8 <__aeabi_dsub>
 8009360:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009364:	4656      	mov	r6, sl
 8009366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800936a:	f7f7 fc05 	bl	8000b78 <__aeabi_d2iz>
 800936e:	4605      	mov	r5, r0
 8009370:	f7f7 f8e8 	bl	8000544 <__aeabi_i2d>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800937c:	f7f6 ff94 	bl	80002a8 <__aeabi_dsub>
 8009380:	3530      	adds	r5, #48	@ 0x30
 8009382:	4602      	mov	r2, r0
 8009384:	460b      	mov	r3, r1
 8009386:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800938a:	f806 5b01 	strb.w	r5, [r6], #1
 800938e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009392:	f7f7 fbb3 	bl	8000afc <__aeabi_dcmplt>
 8009396:	2800      	cmp	r0, #0
 8009398:	d171      	bne.n	800947e <_dtoa_r+0x65e>
 800939a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800939e:	4911      	ldr	r1, [pc, #68]	@ (80093e4 <_dtoa_r+0x5c4>)
 80093a0:	2000      	movs	r0, #0
 80093a2:	f7f6 ff81 	bl	80002a8 <__aeabi_dsub>
 80093a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80093aa:	f7f7 fba7 	bl	8000afc <__aeabi_dcmplt>
 80093ae:	2800      	cmp	r0, #0
 80093b0:	f040 8095 	bne.w	80094de <_dtoa_r+0x6be>
 80093b4:	42a6      	cmp	r6, r4
 80093b6:	f43f af50 	beq.w	800925a <_dtoa_r+0x43a>
 80093ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80093be:	4b0a      	ldr	r3, [pc, #40]	@ (80093e8 <_dtoa_r+0x5c8>)
 80093c0:	2200      	movs	r2, #0
 80093c2:	f7f7 f929 	bl	8000618 <__aeabi_dmul>
 80093c6:	4b08      	ldr	r3, [pc, #32]	@ (80093e8 <_dtoa_r+0x5c8>)
 80093c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80093cc:	2200      	movs	r2, #0
 80093ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093d2:	f7f7 f921 	bl	8000618 <__aeabi_dmul>
 80093d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093da:	e7c4      	b.n	8009366 <_dtoa_r+0x546>
 80093dc:	0801caa8 	.word	0x0801caa8
 80093e0:	0801ca80 	.word	0x0801ca80
 80093e4:	3ff00000 	.word	0x3ff00000
 80093e8:	40240000 	.word	0x40240000
 80093ec:	401c0000 	.word	0x401c0000
 80093f0:	40140000 	.word	0x40140000
 80093f4:	3fe00000 	.word	0x3fe00000
 80093f8:	4631      	mov	r1, r6
 80093fa:	4628      	mov	r0, r5
 80093fc:	f7f7 f90c 	bl	8000618 <__aeabi_dmul>
 8009400:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009404:	9415      	str	r4, [sp, #84]	@ 0x54
 8009406:	4656      	mov	r6, sl
 8009408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800940c:	f7f7 fbb4 	bl	8000b78 <__aeabi_d2iz>
 8009410:	4605      	mov	r5, r0
 8009412:	f7f7 f897 	bl	8000544 <__aeabi_i2d>
 8009416:	4602      	mov	r2, r0
 8009418:	460b      	mov	r3, r1
 800941a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800941e:	f7f6 ff43 	bl	80002a8 <__aeabi_dsub>
 8009422:	3530      	adds	r5, #48	@ 0x30
 8009424:	f806 5b01 	strb.w	r5, [r6], #1
 8009428:	4602      	mov	r2, r0
 800942a:	460b      	mov	r3, r1
 800942c:	42a6      	cmp	r6, r4
 800942e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009432:	f04f 0200 	mov.w	r2, #0
 8009436:	d124      	bne.n	8009482 <_dtoa_r+0x662>
 8009438:	4bac      	ldr	r3, [pc, #688]	@ (80096ec <_dtoa_r+0x8cc>)
 800943a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800943e:	f7f6 ff35 	bl	80002ac <__adddf3>
 8009442:	4602      	mov	r2, r0
 8009444:	460b      	mov	r3, r1
 8009446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800944a:	f7f7 fb75 	bl	8000b38 <__aeabi_dcmpgt>
 800944e:	2800      	cmp	r0, #0
 8009450:	d145      	bne.n	80094de <_dtoa_r+0x6be>
 8009452:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009456:	49a5      	ldr	r1, [pc, #660]	@ (80096ec <_dtoa_r+0x8cc>)
 8009458:	2000      	movs	r0, #0
 800945a:	f7f6 ff25 	bl	80002a8 <__aeabi_dsub>
 800945e:	4602      	mov	r2, r0
 8009460:	460b      	mov	r3, r1
 8009462:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009466:	f7f7 fb49 	bl	8000afc <__aeabi_dcmplt>
 800946a:	2800      	cmp	r0, #0
 800946c:	f43f aef5 	beq.w	800925a <_dtoa_r+0x43a>
 8009470:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009472:	1e73      	subs	r3, r6, #1
 8009474:	9315      	str	r3, [sp, #84]	@ 0x54
 8009476:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800947a:	2b30      	cmp	r3, #48	@ 0x30
 800947c:	d0f8      	beq.n	8009470 <_dtoa_r+0x650>
 800947e:	9f04      	ldr	r7, [sp, #16]
 8009480:	e73e      	b.n	8009300 <_dtoa_r+0x4e0>
 8009482:	4b9b      	ldr	r3, [pc, #620]	@ (80096f0 <_dtoa_r+0x8d0>)
 8009484:	f7f7 f8c8 	bl	8000618 <__aeabi_dmul>
 8009488:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800948c:	e7bc      	b.n	8009408 <_dtoa_r+0x5e8>
 800948e:	d10c      	bne.n	80094aa <_dtoa_r+0x68a>
 8009490:	4b98      	ldr	r3, [pc, #608]	@ (80096f4 <_dtoa_r+0x8d4>)
 8009492:	2200      	movs	r2, #0
 8009494:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009498:	f7f7 f8be 	bl	8000618 <__aeabi_dmul>
 800949c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094a0:	f7f7 fb40 	bl	8000b24 <__aeabi_dcmpge>
 80094a4:	2800      	cmp	r0, #0
 80094a6:	f000 8157 	beq.w	8009758 <_dtoa_r+0x938>
 80094aa:	2400      	movs	r4, #0
 80094ac:	4625      	mov	r5, r4
 80094ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094b0:	43db      	mvns	r3, r3
 80094b2:	9304      	str	r3, [sp, #16]
 80094b4:	4656      	mov	r6, sl
 80094b6:	2700      	movs	r7, #0
 80094b8:	4621      	mov	r1, r4
 80094ba:	4658      	mov	r0, fp
 80094bc:	f000 fbb4 	bl	8009c28 <_Bfree>
 80094c0:	2d00      	cmp	r5, #0
 80094c2:	d0dc      	beq.n	800947e <_dtoa_r+0x65e>
 80094c4:	b12f      	cbz	r7, 80094d2 <_dtoa_r+0x6b2>
 80094c6:	42af      	cmp	r7, r5
 80094c8:	d003      	beq.n	80094d2 <_dtoa_r+0x6b2>
 80094ca:	4639      	mov	r1, r7
 80094cc:	4658      	mov	r0, fp
 80094ce:	f000 fbab 	bl	8009c28 <_Bfree>
 80094d2:	4629      	mov	r1, r5
 80094d4:	4658      	mov	r0, fp
 80094d6:	f000 fba7 	bl	8009c28 <_Bfree>
 80094da:	e7d0      	b.n	800947e <_dtoa_r+0x65e>
 80094dc:	9704      	str	r7, [sp, #16]
 80094de:	4633      	mov	r3, r6
 80094e0:	461e      	mov	r6, r3
 80094e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094e6:	2a39      	cmp	r2, #57	@ 0x39
 80094e8:	d107      	bne.n	80094fa <_dtoa_r+0x6da>
 80094ea:	459a      	cmp	sl, r3
 80094ec:	d1f8      	bne.n	80094e0 <_dtoa_r+0x6c0>
 80094ee:	9a04      	ldr	r2, [sp, #16]
 80094f0:	3201      	adds	r2, #1
 80094f2:	9204      	str	r2, [sp, #16]
 80094f4:	2230      	movs	r2, #48	@ 0x30
 80094f6:	f88a 2000 	strb.w	r2, [sl]
 80094fa:	781a      	ldrb	r2, [r3, #0]
 80094fc:	3201      	adds	r2, #1
 80094fe:	701a      	strb	r2, [r3, #0]
 8009500:	e7bd      	b.n	800947e <_dtoa_r+0x65e>
 8009502:	4b7b      	ldr	r3, [pc, #492]	@ (80096f0 <_dtoa_r+0x8d0>)
 8009504:	2200      	movs	r2, #0
 8009506:	f7f7 f887 	bl	8000618 <__aeabi_dmul>
 800950a:	2200      	movs	r2, #0
 800950c:	2300      	movs	r3, #0
 800950e:	4604      	mov	r4, r0
 8009510:	460d      	mov	r5, r1
 8009512:	f7f7 fae9 	bl	8000ae8 <__aeabi_dcmpeq>
 8009516:	2800      	cmp	r0, #0
 8009518:	f43f aebb 	beq.w	8009292 <_dtoa_r+0x472>
 800951c:	e6f0      	b.n	8009300 <_dtoa_r+0x4e0>
 800951e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009520:	2a00      	cmp	r2, #0
 8009522:	f000 80db 	beq.w	80096dc <_dtoa_r+0x8bc>
 8009526:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009528:	2a01      	cmp	r2, #1
 800952a:	f300 80bf 	bgt.w	80096ac <_dtoa_r+0x88c>
 800952e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009530:	2a00      	cmp	r2, #0
 8009532:	f000 80b7 	beq.w	80096a4 <_dtoa_r+0x884>
 8009536:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800953a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800953c:	4646      	mov	r6, r8
 800953e:	9a08      	ldr	r2, [sp, #32]
 8009540:	2101      	movs	r1, #1
 8009542:	441a      	add	r2, r3
 8009544:	4658      	mov	r0, fp
 8009546:	4498      	add	r8, r3
 8009548:	9208      	str	r2, [sp, #32]
 800954a:	f000 fc21 	bl	8009d90 <__i2b>
 800954e:	4605      	mov	r5, r0
 8009550:	b15e      	cbz	r6, 800956a <_dtoa_r+0x74a>
 8009552:	9b08      	ldr	r3, [sp, #32]
 8009554:	2b00      	cmp	r3, #0
 8009556:	dd08      	ble.n	800956a <_dtoa_r+0x74a>
 8009558:	42b3      	cmp	r3, r6
 800955a:	9a08      	ldr	r2, [sp, #32]
 800955c:	bfa8      	it	ge
 800955e:	4633      	movge	r3, r6
 8009560:	eba8 0803 	sub.w	r8, r8, r3
 8009564:	1af6      	subs	r6, r6, r3
 8009566:	1ad3      	subs	r3, r2, r3
 8009568:	9308      	str	r3, [sp, #32]
 800956a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800956c:	b1f3      	cbz	r3, 80095ac <_dtoa_r+0x78c>
 800956e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009570:	2b00      	cmp	r3, #0
 8009572:	f000 80b7 	beq.w	80096e4 <_dtoa_r+0x8c4>
 8009576:	b18c      	cbz	r4, 800959c <_dtoa_r+0x77c>
 8009578:	4629      	mov	r1, r5
 800957a:	4622      	mov	r2, r4
 800957c:	4658      	mov	r0, fp
 800957e:	f000 fcc7 	bl	8009f10 <__pow5mult>
 8009582:	464a      	mov	r2, r9
 8009584:	4601      	mov	r1, r0
 8009586:	4605      	mov	r5, r0
 8009588:	4658      	mov	r0, fp
 800958a:	f000 fc17 	bl	8009dbc <__multiply>
 800958e:	4649      	mov	r1, r9
 8009590:	9004      	str	r0, [sp, #16]
 8009592:	4658      	mov	r0, fp
 8009594:	f000 fb48 	bl	8009c28 <_Bfree>
 8009598:	9b04      	ldr	r3, [sp, #16]
 800959a:	4699      	mov	r9, r3
 800959c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800959e:	1b1a      	subs	r2, r3, r4
 80095a0:	d004      	beq.n	80095ac <_dtoa_r+0x78c>
 80095a2:	4649      	mov	r1, r9
 80095a4:	4658      	mov	r0, fp
 80095a6:	f000 fcb3 	bl	8009f10 <__pow5mult>
 80095aa:	4681      	mov	r9, r0
 80095ac:	2101      	movs	r1, #1
 80095ae:	4658      	mov	r0, fp
 80095b0:	f000 fbee 	bl	8009d90 <__i2b>
 80095b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095b6:	4604      	mov	r4, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f000 81cf 	beq.w	800995c <_dtoa_r+0xb3c>
 80095be:	461a      	mov	r2, r3
 80095c0:	4601      	mov	r1, r0
 80095c2:	4658      	mov	r0, fp
 80095c4:	f000 fca4 	bl	8009f10 <__pow5mult>
 80095c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	4604      	mov	r4, r0
 80095ce:	f300 8095 	bgt.w	80096fc <_dtoa_r+0x8dc>
 80095d2:	9b02      	ldr	r3, [sp, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f040 8087 	bne.w	80096e8 <_dtoa_r+0x8c8>
 80095da:	9b03      	ldr	r3, [sp, #12]
 80095dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f040 8089 	bne.w	80096f8 <_dtoa_r+0x8d8>
 80095e6:	9b03      	ldr	r3, [sp, #12]
 80095e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80095ec:	0d1b      	lsrs	r3, r3, #20
 80095ee:	051b      	lsls	r3, r3, #20
 80095f0:	b12b      	cbz	r3, 80095fe <_dtoa_r+0x7de>
 80095f2:	9b08      	ldr	r3, [sp, #32]
 80095f4:	3301      	adds	r3, #1
 80095f6:	9308      	str	r3, [sp, #32]
 80095f8:	f108 0801 	add.w	r8, r8, #1
 80095fc:	2301      	movs	r3, #1
 80095fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009600:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009602:	2b00      	cmp	r3, #0
 8009604:	f000 81b0 	beq.w	8009968 <_dtoa_r+0xb48>
 8009608:	6923      	ldr	r3, [r4, #16]
 800960a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800960e:	6918      	ldr	r0, [r3, #16]
 8009610:	f000 fb72 	bl	8009cf8 <__hi0bits>
 8009614:	f1c0 0020 	rsb	r0, r0, #32
 8009618:	9b08      	ldr	r3, [sp, #32]
 800961a:	4418      	add	r0, r3
 800961c:	f010 001f 	ands.w	r0, r0, #31
 8009620:	d077      	beq.n	8009712 <_dtoa_r+0x8f2>
 8009622:	f1c0 0320 	rsb	r3, r0, #32
 8009626:	2b04      	cmp	r3, #4
 8009628:	dd6b      	ble.n	8009702 <_dtoa_r+0x8e2>
 800962a:	9b08      	ldr	r3, [sp, #32]
 800962c:	f1c0 001c 	rsb	r0, r0, #28
 8009630:	4403      	add	r3, r0
 8009632:	4480      	add	r8, r0
 8009634:	4406      	add	r6, r0
 8009636:	9308      	str	r3, [sp, #32]
 8009638:	f1b8 0f00 	cmp.w	r8, #0
 800963c:	dd05      	ble.n	800964a <_dtoa_r+0x82a>
 800963e:	4649      	mov	r1, r9
 8009640:	4642      	mov	r2, r8
 8009642:	4658      	mov	r0, fp
 8009644:	f000 fcbe 	bl	8009fc4 <__lshift>
 8009648:	4681      	mov	r9, r0
 800964a:	9b08      	ldr	r3, [sp, #32]
 800964c:	2b00      	cmp	r3, #0
 800964e:	dd05      	ble.n	800965c <_dtoa_r+0x83c>
 8009650:	4621      	mov	r1, r4
 8009652:	461a      	mov	r2, r3
 8009654:	4658      	mov	r0, fp
 8009656:	f000 fcb5 	bl	8009fc4 <__lshift>
 800965a:	4604      	mov	r4, r0
 800965c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800965e:	2b00      	cmp	r3, #0
 8009660:	d059      	beq.n	8009716 <_dtoa_r+0x8f6>
 8009662:	4621      	mov	r1, r4
 8009664:	4648      	mov	r0, r9
 8009666:	f000 fd19 	bl	800a09c <__mcmp>
 800966a:	2800      	cmp	r0, #0
 800966c:	da53      	bge.n	8009716 <_dtoa_r+0x8f6>
 800966e:	1e7b      	subs	r3, r7, #1
 8009670:	9304      	str	r3, [sp, #16]
 8009672:	4649      	mov	r1, r9
 8009674:	2300      	movs	r3, #0
 8009676:	220a      	movs	r2, #10
 8009678:	4658      	mov	r0, fp
 800967a:	f000 faf7 	bl	8009c6c <__multadd>
 800967e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009680:	4681      	mov	r9, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	f000 8172 	beq.w	800996c <_dtoa_r+0xb4c>
 8009688:	2300      	movs	r3, #0
 800968a:	4629      	mov	r1, r5
 800968c:	220a      	movs	r2, #10
 800968e:	4658      	mov	r0, fp
 8009690:	f000 faec 	bl	8009c6c <__multadd>
 8009694:	9b00      	ldr	r3, [sp, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	4605      	mov	r5, r0
 800969a:	dc67      	bgt.n	800976c <_dtoa_r+0x94c>
 800969c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800969e:	2b02      	cmp	r3, #2
 80096a0:	dc41      	bgt.n	8009726 <_dtoa_r+0x906>
 80096a2:	e063      	b.n	800976c <_dtoa_r+0x94c>
 80096a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80096a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80096aa:	e746      	b.n	800953a <_dtoa_r+0x71a>
 80096ac:	9b07      	ldr	r3, [sp, #28]
 80096ae:	1e5c      	subs	r4, r3, #1
 80096b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096b2:	42a3      	cmp	r3, r4
 80096b4:	bfbf      	itttt	lt
 80096b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80096b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80096ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80096bc:	1ae3      	sublt	r3, r4, r3
 80096be:	bfb4      	ite	lt
 80096c0:	18d2      	addlt	r2, r2, r3
 80096c2:	1b1c      	subge	r4, r3, r4
 80096c4:	9b07      	ldr	r3, [sp, #28]
 80096c6:	bfbc      	itt	lt
 80096c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80096ca:	2400      	movlt	r4, #0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	bfb5      	itete	lt
 80096d0:	eba8 0603 	sublt.w	r6, r8, r3
 80096d4:	9b07      	ldrge	r3, [sp, #28]
 80096d6:	2300      	movlt	r3, #0
 80096d8:	4646      	movge	r6, r8
 80096da:	e730      	b.n	800953e <_dtoa_r+0x71e>
 80096dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80096de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80096e0:	4646      	mov	r6, r8
 80096e2:	e735      	b.n	8009550 <_dtoa_r+0x730>
 80096e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80096e6:	e75c      	b.n	80095a2 <_dtoa_r+0x782>
 80096e8:	2300      	movs	r3, #0
 80096ea:	e788      	b.n	80095fe <_dtoa_r+0x7de>
 80096ec:	3fe00000 	.word	0x3fe00000
 80096f0:	40240000 	.word	0x40240000
 80096f4:	40140000 	.word	0x40140000
 80096f8:	9b02      	ldr	r3, [sp, #8]
 80096fa:	e780      	b.n	80095fe <_dtoa_r+0x7de>
 80096fc:	2300      	movs	r3, #0
 80096fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009700:	e782      	b.n	8009608 <_dtoa_r+0x7e8>
 8009702:	d099      	beq.n	8009638 <_dtoa_r+0x818>
 8009704:	9a08      	ldr	r2, [sp, #32]
 8009706:	331c      	adds	r3, #28
 8009708:	441a      	add	r2, r3
 800970a:	4498      	add	r8, r3
 800970c:	441e      	add	r6, r3
 800970e:	9208      	str	r2, [sp, #32]
 8009710:	e792      	b.n	8009638 <_dtoa_r+0x818>
 8009712:	4603      	mov	r3, r0
 8009714:	e7f6      	b.n	8009704 <_dtoa_r+0x8e4>
 8009716:	9b07      	ldr	r3, [sp, #28]
 8009718:	9704      	str	r7, [sp, #16]
 800971a:	2b00      	cmp	r3, #0
 800971c:	dc20      	bgt.n	8009760 <_dtoa_r+0x940>
 800971e:	9300      	str	r3, [sp, #0]
 8009720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009722:	2b02      	cmp	r3, #2
 8009724:	dd1e      	ble.n	8009764 <_dtoa_r+0x944>
 8009726:	9b00      	ldr	r3, [sp, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	f47f aec0 	bne.w	80094ae <_dtoa_r+0x68e>
 800972e:	4621      	mov	r1, r4
 8009730:	2205      	movs	r2, #5
 8009732:	4658      	mov	r0, fp
 8009734:	f000 fa9a 	bl	8009c6c <__multadd>
 8009738:	4601      	mov	r1, r0
 800973a:	4604      	mov	r4, r0
 800973c:	4648      	mov	r0, r9
 800973e:	f000 fcad 	bl	800a09c <__mcmp>
 8009742:	2800      	cmp	r0, #0
 8009744:	f77f aeb3 	ble.w	80094ae <_dtoa_r+0x68e>
 8009748:	4656      	mov	r6, sl
 800974a:	2331      	movs	r3, #49	@ 0x31
 800974c:	f806 3b01 	strb.w	r3, [r6], #1
 8009750:	9b04      	ldr	r3, [sp, #16]
 8009752:	3301      	adds	r3, #1
 8009754:	9304      	str	r3, [sp, #16]
 8009756:	e6ae      	b.n	80094b6 <_dtoa_r+0x696>
 8009758:	9c07      	ldr	r4, [sp, #28]
 800975a:	9704      	str	r7, [sp, #16]
 800975c:	4625      	mov	r5, r4
 800975e:	e7f3      	b.n	8009748 <_dtoa_r+0x928>
 8009760:	9b07      	ldr	r3, [sp, #28]
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009766:	2b00      	cmp	r3, #0
 8009768:	f000 8104 	beq.w	8009974 <_dtoa_r+0xb54>
 800976c:	2e00      	cmp	r6, #0
 800976e:	dd05      	ble.n	800977c <_dtoa_r+0x95c>
 8009770:	4629      	mov	r1, r5
 8009772:	4632      	mov	r2, r6
 8009774:	4658      	mov	r0, fp
 8009776:	f000 fc25 	bl	8009fc4 <__lshift>
 800977a:	4605      	mov	r5, r0
 800977c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800977e:	2b00      	cmp	r3, #0
 8009780:	d05a      	beq.n	8009838 <_dtoa_r+0xa18>
 8009782:	6869      	ldr	r1, [r5, #4]
 8009784:	4658      	mov	r0, fp
 8009786:	f000 fa0f 	bl	8009ba8 <_Balloc>
 800978a:	4606      	mov	r6, r0
 800978c:	b928      	cbnz	r0, 800979a <_dtoa_r+0x97a>
 800978e:	4b84      	ldr	r3, [pc, #528]	@ (80099a0 <_dtoa_r+0xb80>)
 8009790:	4602      	mov	r2, r0
 8009792:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009796:	f7ff bb5a 	b.w	8008e4e <_dtoa_r+0x2e>
 800979a:	692a      	ldr	r2, [r5, #16]
 800979c:	3202      	adds	r2, #2
 800979e:	0092      	lsls	r2, r2, #2
 80097a0:	f105 010c 	add.w	r1, r5, #12
 80097a4:	300c      	adds	r0, #12
 80097a6:	f7ff faa4 	bl	8008cf2 <memcpy>
 80097aa:	2201      	movs	r2, #1
 80097ac:	4631      	mov	r1, r6
 80097ae:	4658      	mov	r0, fp
 80097b0:	f000 fc08 	bl	8009fc4 <__lshift>
 80097b4:	f10a 0301 	add.w	r3, sl, #1
 80097b8:	9307      	str	r3, [sp, #28]
 80097ba:	9b00      	ldr	r3, [sp, #0]
 80097bc:	4453      	add	r3, sl
 80097be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80097c0:	9b02      	ldr	r3, [sp, #8]
 80097c2:	f003 0301 	and.w	r3, r3, #1
 80097c6:	462f      	mov	r7, r5
 80097c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80097ca:	4605      	mov	r5, r0
 80097cc:	9b07      	ldr	r3, [sp, #28]
 80097ce:	4621      	mov	r1, r4
 80097d0:	3b01      	subs	r3, #1
 80097d2:	4648      	mov	r0, r9
 80097d4:	9300      	str	r3, [sp, #0]
 80097d6:	f7ff fa9a 	bl	8008d0e <quorem>
 80097da:	4639      	mov	r1, r7
 80097dc:	9002      	str	r0, [sp, #8]
 80097de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80097e2:	4648      	mov	r0, r9
 80097e4:	f000 fc5a 	bl	800a09c <__mcmp>
 80097e8:	462a      	mov	r2, r5
 80097ea:	9008      	str	r0, [sp, #32]
 80097ec:	4621      	mov	r1, r4
 80097ee:	4658      	mov	r0, fp
 80097f0:	f000 fc70 	bl	800a0d4 <__mdiff>
 80097f4:	68c2      	ldr	r2, [r0, #12]
 80097f6:	4606      	mov	r6, r0
 80097f8:	bb02      	cbnz	r2, 800983c <_dtoa_r+0xa1c>
 80097fa:	4601      	mov	r1, r0
 80097fc:	4648      	mov	r0, r9
 80097fe:	f000 fc4d 	bl	800a09c <__mcmp>
 8009802:	4602      	mov	r2, r0
 8009804:	4631      	mov	r1, r6
 8009806:	4658      	mov	r0, fp
 8009808:	920e      	str	r2, [sp, #56]	@ 0x38
 800980a:	f000 fa0d 	bl	8009c28 <_Bfree>
 800980e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009810:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009812:	9e07      	ldr	r6, [sp, #28]
 8009814:	ea43 0102 	orr.w	r1, r3, r2
 8009818:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800981a:	4319      	orrs	r1, r3
 800981c:	d110      	bne.n	8009840 <_dtoa_r+0xa20>
 800981e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009822:	d029      	beq.n	8009878 <_dtoa_r+0xa58>
 8009824:	9b08      	ldr	r3, [sp, #32]
 8009826:	2b00      	cmp	r3, #0
 8009828:	dd02      	ble.n	8009830 <_dtoa_r+0xa10>
 800982a:	9b02      	ldr	r3, [sp, #8]
 800982c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009830:	9b00      	ldr	r3, [sp, #0]
 8009832:	f883 8000 	strb.w	r8, [r3]
 8009836:	e63f      	b.n	80094b8 <_dtoa_r+0x698>
 8009838:	4628      	mov	r0, r5
 800983a:	e7bb      	b.n	80097b4 <_dtoa_r+0x994>
 800983c:	2201      	movs	r2, #1
 800983e:	e7e1      	b.n	8009804 <_dtoa_r+0x9e4>
 8009840:	9b08      	ldr	r3, [sp, #32]
 8009842:	2b00      	cmp	r3, #0
 8009844:	db04      	blt.n	8009850 <_dtoa_r+0xa30>
 8009846:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009848:	430b      	orrs	r3, r1
 800984a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800984c:	430b      	orrs	r3, r1
 800984e:	d120      	bne.n	8009892 <_dtoa_r+0xa72>
 8009850:	2a00      	cmp	r2, #0
 8009852:	dded      	ble.n	8009830 <_dtoa_r+0xa10>
 8009854:	4649      	mov	r1, r9
 8009856:	2201      	movs	r2, #1
 8009858:	4658      	mov	r0, fp
 800985a:	f000 fbb3 	bl	8009fc4 <__lshift>
 800985e:	4621      	mov	r1, r4
 8009860:	4681      	mov	r9, r0
 8009862:	f000 fc1b 	bl	800a09c <__mcmp>
 8009866:	2800      	cmp	r0, #0
 8009868:	dc03      	bgt.n	8009872 <_dtoa_r+0xa52>
 800986a:	d1e1      	bne.n	8009830 <_dtoa_r+0xa10>
 800986c:	f018 0f01 	tst.w	r8, #1
 8009870:	d0de      	beq.n	8009830 <_dtoa_r+0xa10>
 8009872:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009876:	d1d8      	bne.n	800982a <_dtoa_r+0xa0a>
 8009878:	9a00      	ldr	r2, [sp, #0]
 800987a:	2339      	movs	r3, #57	@ 0x39
 800987c:	7013      	strb	r3, [r2, #0]
 800987e:	4633      	mov	r3, r6
 8009880:	461e      	mov	r6, r3
 8009882:	3b01      	subs	r3, #1
 8009884:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009888:	2a39      	cmp	r2, #57	@ 0x39
 800988a:	d052      	beq.n	8009932 <_dtoa_r+0xb12>
 800988c:	3201      	adds	r2, #1
 800988e:	701a      	strb	r2, [r3, #0]
 8009890:	e612      	b.n	80094b8 <_dtoa_r+0x698>
 8009892:	2a00      	cmp	r2, #0
 8009894:	dd07      	ble.n	80098a6 <_dtoa_r+0xa86>
 8009896:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800989a:	d0ed      	beq.n	8009878 <_dtoa_r+0xa58>
 800989c:	9a00      	ldr	r2, [sp, #0]
 800989e:	f108 0301 	add.w	r3, r8, #1
 80098a2:	7013      	strb	r3, [r2, #0]
 80098a4:	e608      	b.n	80094b8 <_dtoa_r+0x698>
 80098a6:	9b07      	ldr	r3, [sp, #28]
 80098a8:	9a07      	ldr	r2, [sp, #28]
 80098aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80098ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d028      	beq.n	8009906 <_dtoa_r+0xae6>
 80098b4:	4649      	mov	r1, r9
 80098b6:	2300      	movs	r3, #0
 80098b8:	220a      	movs	r2, #10
 80098ba:	4658      	mov	r0, fp
 80098bc:	f000 f9d6 	bl	8009c6c <__multadd>
 80098c0:	42af      	cmp	r7, r5
 80098c2:	4681      	mov	r9, r0
 80098c4:	f04f 0300 	mov.w	r3, #0
 80098c8:	f04f 020a 	mov.w	r2, #10
 80098cc:	4639      	mov	r1, r7
 80098ce:	4658      	mov	r0, fp
 80098d0:	d107      	bne.n	80098e2 <_dtoa_r+0xac2>
 80098d2:	f000 f9cb 	bl	8009c6c <__multadd>
 80098d6:	4607      	mov	r7, r0
 80098d8:	4605      	mov	r5, r0
 80098da:	9b07      	ldr	r3, [sp, #28]
 80098dc:	3301      	adds	r3, #1
 80098de:	9307      	str	r3, [sp, #28]
 80098e0:	e774      	b.n	80097cc <_dtoa_r+0x9ac>
 80098e2:	f000 f9c3 	bl	8009c6c <__multadd>
 80098e6:	4629      	mov	r1, r5
 80098e8:	4607      	mov	r7, r0
 80098ea:	2300      	movs	r3, #0
 80098ec:	220a      	movs	r2, #10
 80098ee:	4658      	mov	r0, fp
 80098f0:	f000 f9bc 	bl	8009c6c <__multadd>
 80098f4:	4605      	mov	r5, r0
 80098f6:	e7f0      	b.n	80098da <_dtoa_r+0xaba>
 80098f8:	9b00      	ldr	r3, [sp, #0]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	bfcc      	ite	gt
 80098fe:	461e      	movgt	r6, r3
 8009900:	2601      	movle	r6, #1
 8009902:	4456      	add	r6, sl
 8009904:	2700      	movs	r7, #0
 8009906:	4649      	mov	r1, r9
 8009908:	2201      	movs	r2, #1
 800990a:	4658      	mov	r0, fp
 800990c:	f000 fb5a 	bl	8009fc4 <__lshift>
 8009910:	4621      	mov	r1, r4
 8009912:	4681      	mov	r9, r0
 8009914:	f000 fbc2 	bl	800a09c <__mcmp>
 8009918:	2800      	cmp	r0, #0
 800991a:	dcb0      	bgt.n	800987e <_dtoa_r+0xa5e>
 800991c:	d102      	bne.n	8009924 <_dtoa_r+0xb04>
 800991e:	f018 0f01 	tst.w	r8, #1
 8009922:	d1ac      	bne.n	800987e <_dtoa_r+0xa5e>
 8009924:	4633      	mov	r3, r6
 8009926:	461e      	mov	r6, r3
 8009928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800992c:	2a30      	cmp	r2, #48	@ 0x30
 800992e:	d0fa      	beq.n	8009926 <_dtoa_r+0xb06>
 8009930:	e5c2      	b.n	80094b8 <_dtoa_r+0x698>
 8009932:	459a      	cmp	sl, r3
 8009934:	d1a4      	bne.n	8009880 <_dtoa_r+0xa60>
 8009936:	9b04      	ldr	r3, [sp, #16]
 8009938:	3301      	adds	r3, #1
 800993a:	9304      	str	r3, [sp, #16]
 800993c:	2331      	movs	r3, #49	@ 0x31
 800993e:	f88a 3000 	strb.w	r3, [sl]
 8009942:	e5b9      	b.n	80094b8 <_dtoa_r+0x698>
 8009944:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009946:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80099a4 <_dtoa_r+0xb84>
 800994a:	b11b      	cbz	r3, 8009954 <_dtoa_r+0xb34>
 800994c:	f10a 0308 	add.w	r3, sl, #8
 8009950:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009952:	6013      	str	r3, [r2, #0]
 8009954:	4650      	mov	r0, sl
 8009956:	b019      	add	sp, #100	@ 0x64
 8009958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800995c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800995e:	2b01      	cmp	r3, #1
 8009960:	f77f ae37 	ble.w	80095d2 <_dtoa_r+0x7b2>
 8009964:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009966:	930a      	str	r3, [sp, #40]	@ 0x28
 8009968:	2001      	movs	r0, #1
 800996a:	e655      	b.n	8009618 <_dtoa_r+0x7f8>
 800996c:	9b00      	ldr	r3, [sp, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	f77f aed6 	ble.w	8009720 <_dtoa_r+0x900>
 8009974:	4656      	mov	r6, sl
 8009976:	4621      	mov	r1, r4
 8009978:	4648      	mov	r0, r9
 800997a:	f7ff f9c8 	bl	8008d0e <quorem>
 800997e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009982:	f806 8b01 	strb.w	r8, [r6], #1
 8009986:	9b00      	ldr	r3, [sp, #0]
 8009988:	eba6 020a 	sub.w	r2, r6, sl
 800998c:	4293      	cmp	r3, r2
 800998e:	ddb3      	ble.n	80098f8 <_dtoa_r+0xad8>
 8009990:	4649      	mov	r1, r9
 8009992:	2300      	movs	r3, #0
 8009994:	220a      	movs	r2, #10
 8009996:	4658      	mov	r0, fp
 8009998:	f000 f968 	bl	8009c6c <__multadd>
 800999c:	4681      	mov	r9, r0
 800999e:	e7ea      	b.n	8009976 <_dtoa_r+0xb56>
 80099a0:	0801ca08 	.word	0x0801ca08
 80099a4:	0801c98c 	.word	0x0801c98c

080099a8 <_free_r>:
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	4605      	mov	r5, r0
 80099ac:	2900      	cmp	r1, #0
 80099ae:	d041      	beq.n	8009a34 <_free_r+0x8c>
 80099b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099b4:	1f0c      	subs	r4, r1, #4
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	bfb8      	it	lt
 80099ba:	18e4      	addlt	r4, r4, r3
 80099bc:	f000 f8e8 	bl	8009b90 <__malloc_lock>
 80099c0:	4a1d      	ldr	r2, [pc, #116]	@ (8009a38 <_free_r+0x90>)
 80099c2:	6813      	ldr	r3, [r2, #0]
 80099c4:	b933      	cbnz	r3, 80099d4 <_free_r+0x2c>
 80099c6:	6063      	str	r3, [r4, #4]
 80099c8:	6014      	str	r4, [r2, #0]
 80099ca:	4628      	mov	r0, r5
 80099cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099d0:	f000 b8e4 	b.w	8009b9c <__malloc_unlock>
 80099d4:	42a3      	cmp	r3, r4
 80099d6:	d908      	bls.n	80099ea <_free_r+0x42>
 80099d8:	6820      	ldr	r0, [r4, #0]
 80099da:	1821      	adds	r1, r4, r0
 80099dc:	428b      	cmp	r3, r1
 80099de:	bf01      	itttt	eq
 80099e0:	6819      	ldreq	r1, [r3, #0]
 80099e2:	685b      	ldreq	r3, [r3, #4]
 80099e4:	1809      	addeq	r1, r1, r0
 80099e6:	6021      	streq	r1, [r4, #0]
 80099e8:	e7ed      	b.n	80099c6 <_free_r+0x1e>
 80099ea:	461a      	mov	r2, r3
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	b10b      	cbz	r3, 80099f4 <_free_r+0x4c>
 80099f0:	42a3      	cmp	r3, r4
 80099f2:	d9fa      	bls.n	80099ea <_free_r+0x42>
 80099f4:	6811      	ldr	r1, [r2, #0]
 80099f6:	1850      	adds	r0, r2, r1
 80099f8:	42a0      	cmp	r0, r4
 80099fa:	d10b      	bne.n	8009a14 <_free_r+0x6c>
 80099fc:	6820      	ldr	r0, [r4, #0]
 80099fe:	4401      	add	r1, r0
 8009a00:	1850      	adds	r0, r2, r1
 8009a02:	4283      	cmp	r3, r0
 8009a04:	6011      	str	r1, [r2, #0]
 8009a06:	d1e0      	bne.n	80099ca <_free_r+0x22>
 8009a08:	6818      	ldr	r0, [r3, #0]
 8009a0a:	685b      	ldr	r3, [r3, #4]
 8009a0c:	6053      	str	r3, [r2, #4]
 8009a0e:	4408      	add	r0, r1
 8009a10:	6010      	str	r0, [r2, #0]
 8009a12:	e7da      	b.n	80099ca <_free_r+0x22>
 8009a14:	d902      	bls.n	8009a1c <_free_r+0x74>
 8009a16:	230c      	movs	r3, #12
 8009a18:	602b      	str	r3, [r5, #0]
 8009a1a:	e7d6      	b.n	80099ca <_free_r+0x22>
 8009a1c:	6820      	ldr	r0, [r4, #0]
 8009a1e:	1821      	adds	r1, r4, r0
 8009a20:	428b      	cmp	r3, r1
 8009a22:	bf04      	itt	eq
 8009a24:	6819      	ldreq	r1, [r3, #0]
 8009a26:	685b      	ldreq	r3, [r3, #4]
 8009a28:	6063      	str	r3, [r4, #4]
 8009a2a:	bf04      	itt	eq
 8009a2c:	1809      	addeq	r1, r1, r0
 8009a2e:	6021      	streq	r1, [r4, #0]
 8009a30:	6054      	str	r4, [r2, #4]
 8009a32:	e7ca      	b.n	80099ca <_free_r+0x22>
 8009a34:	bd38      	pop	{r3, r4, r5, pc}
 8009a36:	bf00      	nop
 8009a38:	20004dec 	.word	0x20004dec

08009a3c <malloc>:
 8009a3c:	4b02      	ldr	r3, [pc, #8]	@ (8009a48 <malloc+0xc>)
 8009a3e:	4601      	mov	r1, r0
 8009a40:	6818      	ldr	r0, [r3, #0]
 8009a42:	f000 b825 	b.w	8009a90 <_malloc_r>
 8009a46:	bf00      	nop
 8009a48:	20002f90 	.word	0x20002f90

08009a4c <sbrk_aligned>:
 8009a4c:	b570      	push	{r4, r5, r6, lr}
 8009a4e:	4e0f      	ldr	r6, [pc, #60]	@ (8009a8c <sbrk_aligned+0x40>)
 8009a50:	460c      	mov	r4, r1
 8009a52:	6831      	ldr	r1, [r6, #0]
 8009a54:	4605      	mov	r5, r0
 8009a56:	b911      	cbnz	r1, 8009a5e <sbrk_aligned+0x12>
 8009a58:	f000 fd58 	bl	800a50c <_sbrk_r>
 8009a5c:	6030      	str	r0, [r6, #0]
 8009a5e:	4621      	mov	r1, r4
 8009a60:	4628      	mov	r0, r5
 8009a62:	f000 fd53 	bl	800a50c <_sbrk_r>
 8009a66:	1c43      	adds	r3, r0, #1
 8009a68:	d103      	bne.n	8009a72 <sbrk_aligned+0x26>
 8009a6a:	f04f 34ff 	mov.w	r4, #4294967295
 8009a6e:	4620      	mov	r0, r4
 8009a70:	bd70      	pop	{r4, r5, r6, pc}
 8009a72:	1cc4      	adds	r4, r0, #3
 8009a74:	f024 0403 	bic.w	r4, r4, #3
 8009a78:	42a0      	cmp	r0, r4
 8009a7a:	d0f8      	beq.n	8009a6e <sbrk_aligned+0x22>
 8009a7c:	1a21      	subs	r1, r4, r0
 8009a7e:	4628      	mov	r0, r5
 8009a80:	f000 fd44 	bl	800a50c <_sbrk_r>
 8009a84:	3001      	adds	r0, #1
 8009a86:	d1f2      	bne.n	8009a6e <sbrk_aligned+0x22>
 8009a88:	e7ef      	b.n	8009a6a <sbrk_aligned+0x1e>
 8009a8a:	bf00      	nop
 8009a8c:	20004de8 	.word	0x20004de8

08009a90 <_malloc_r>:
 8009a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a94:	1ccd      	adds	r5, r1, #3
 8009a96:	f025 0503 	bic.w	r5, r5, #3
 8009a9a:	3508      	adds	r5, #8
 8009a9c:	2d0c      	cmp	r5, #12
 8009a9e:	bf38      	it	cc
 8009aa0:	250c      	movcc	r5, #12
 8009aa2:	2d00      	cmp	r5, #0
 8009aa4:	4606      	mov	r6, r0
 8009aa6:	db01      	blt.n	8009aac <_malloc_r+0x1c>
 8009aa8:	42a9      	cmp	r1, r5
 8009aaa:	d904      	bls.n	8009ab6 <_malloc_r+0x26>
 8009aac:	230c      	movs	r3, #12
 8009aae:	6033      	str	r3, [r6, #0]
 8009ab0:	2000      	movs	r0, #0
 8009ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ab6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009b8c <_malloc_r+0xfc>
 8009aba:	f000 f869 	bl	8009b90 <__malloc_lock>
 8009abe:	f8d8 3000 	ldr.w	r3, [r8]
 8009ac2:	461c      	mov	r4, r3
 8009ac4:	bb44      	cbnz	r4, 8009b18 <_malloc_r+0x88>
 8009ac6:	4629      	mov	r1, r5
 8009ac8:	4630      	mov	r0, r6
 8009aca:	f7ff ffbf 	bl	8009a4c <sbrk_aligned>
 8009ace:	1c43      	adds	r3, r0, #1
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	d158      	bne.n	8009b86 <_malloc_r+0xf6>
 8009ad4:	f8d8 4000 	ldr.w	r4, [r8]
 8009ad8:	4627      	mov	r7, r4
 8009ada:	2f00      	cmp	r7, #0
 8009adc:	d143      	bne.n	8009b66 <_malloc_r+0xd6>
 8009ade:	2c00      	cmp	r4, #0
 8009ae0:	d04b      	beq.n	8009b7a <_malloc_r+0xea>
 8009ae2:	6823      	ldr	r3, [r4, #0]
 8009ae4:	4639      	mov	r1, r7
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	eb04 0903 	add.w	r9, r4, r3
 8009aec:	f000 fd0e 	bl	800a50c <_sbrk_r>
 8009af0:	4581      	cmp	r9, r0
 8009af2:	d142      	bne.n	8009b7a <_malloc_r+0xea>
 8009af4:	6821      	ldr	r1, [r4, #0]
 8009af6:	1a6d      	subs	r5, r5, r1
 8009af8:	4629      	mov	r1, r5
 8009afa:	4630      	mov	r0, r6
 8009afc:	f7ff ffa6 	bl	8009a4c <sbrk_aligned>
 8009b00:	3001      	adds	r0, #1
 8009b02:	d03a      	beq.n	8009b7a <_malloc_r+0xea>
 8009b04:	6823      	ldr	r3, [r4, #0]
 8009b06:	442b      	add	r3, r5
 8009b08:	6023      	str	r3, [r4, #0]
 8009b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8009b0e:	685a      	ldr	r2, [r3, #4]
 8009b10:	bb62      	cbnz	r2, 8009b6c <_malloc_r+0xdc>
 8009b12:	f8c8 7000 	str.w	r7, [r8]
 8009b16:	e00f      	b.n	8009b38 <_malloc_r+0xa8>
 8009b18:	6822      	ldr	r2, [r4, #0]
 8009b1a:	1b52      	subs	r2, r2, r5
 8009b1c:	d420      	bmi.n	8009b60 <_malloc_r+0xd0>
 8009b1e:	2a0b      	cmp	r2, #11
 8009b20:	d917      	bls.n	8009b52 <_malloc_r+0xc2>
 8009b22:	1961      	adds	r1, r4, r5
 8009b24:	42a3      	cmp	r3, r4
 8009b26:	6025      	str	r5, [r4, #0]
 8009b28:	bf18      	it	ne
 8009b2a:	6059      	strne	r1, [r3, #4]
 8009b2c:	6863      	ldr	r3, [r4, #4]
 8009b2e:	bf08      	it	eq
 8009b30:	f8c8 1000 	streq.w	r1, [r8]
 8009b34:	5162      	str	r2, [r4, r5]
 8009b36:	604b      	str	r3, [r1, #4]
 8009b38:	4630      	mov	r0, r6
 8009b3a:	f000 f82f 	bl	8009b9c <__malloc_unlock>
 8009b3e:	f104 000b 	add.w	r0, r4, #11
 8009b42:	1d23      	adds	r3, r4, #4
 8009b44:	f020 0007 	bic.w	r0, r0, #7
 8009b48:	1ac2      	subs	r2, r0, r3
 8009b4a:	bf1c      	itt	ne
 8009b4c:	1a1b      	subne	r3, r3, r0
 8009b4e:	50a3      	strne	r3, [r4, r2]
 8009b50:	e7af      	b.n	8009ab2 <_malloc_r+0x22>
 8009b52:	6862      	ldr	r2, [r4, #4]
 8009b54:	42a3      	cmp	r3, r4
 8009b56:	bf0c      	ite	eq
 8009b58:	f8c8 2000 	streq.w	r2, [r8]
 8009b5c:	605a      	strne	r2, [r3, #4]
 8009b5e:	e7eb      	b.n	8009b38 <_malloc_r+0xa8>
 8009b60:	4623      	mov	r3, r4
 8009b62:	6864      	ldr	r4, [r4, #4]
 8009b64:	e7ae      	b.n	8009ac4 <_malloc_r+0x34>
 8009b66:	463c      	mov	r4, r7
 8009b68:	687f      	ldr	r7, [r7, #4]
 8009b6a:	e7b6      	b.n	8009ada <_malloc_r+0x4a>
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	42a3      	cmp	r3, r4
 8009b72:	d1fb      	bne.n	8009b6c <_malloc_r+0xdc>
 8009b74:	2300      	movs	r3, #0
 8009b76:	6053      	str	r3, [r2, #4]
 8009b78:	e7de      	b.n	8009b38 <_malloc_r+0xa8>
 8009b7a:	230c      	movs	r3, #12
 8009b7c:	6033      	str	r3, [r6, #0]
 8009b7e:	4630      	mov	r0, r6
 8009b80:	f000 f80c 	bl	8009b9c <__malloc_unlock>
 8009b84:	e794      	b.n	8009ab0 <_malloc_r+0x20>
 8009b86:	6005      	str	r5, [r0, #0]
 8009b88:	e7d6      	b.n	8009b38 <_malloc_r+0xa8>
 8009b8a:	bf00      	nop
 8009b8c:	20004dec 	.word	0x20004dec

08009b90 <__malloc_lock>:
 8009b90:	4801      	ldr	r0, [pc, #4]	@ (8009b98 <__malloc_lock+0x8>)
 8009b92:	f7ff b8ac 	b.w	8008cee <__retarget_lock_acquire_recursive>
 8009b96:	bf00      	nop
 8009b98:	20004de4 	.word	0x20004de4

08009b9c <__malloc_unlock>:
 8009b9c:	4801      	ldr	r0, [pc, #4]	@ (8009ba4 <__malloc_unlock+0x8>)
 8009b9e:	f7ff b8a7 	b.w	8008cf0 <__retarget_lock_release_recursive>
 8009ba2:	bf00      	nop
 8009ba4:	20004de4 	.word	0x20004de4

08009ba8 <_Balloc>:
 8009ba8:	b570      	push	{r4, r5, r6, lr}
 8009baa:	69c6      	ldr	r6, [r0, #28]
 8009bac:	4604      	mov	r4, r0
 8009bae:	460d      	mov	r5, r1
 8009bb0:	b976      	cbnz	r6, 8009bd0 <_Balloc+0x28>
 8009bb2:	2010      	movs	r0, #16
 8009bb4:	f7ff ff42 	bl	8009a3c <malloc>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	61e0      	str	r0, [r4, #28]
 8009bbc:	b920      	cbnz	r0, 8009bc8 <_Balloc+0x20>
 8009bbe:	4b18      	ldr	r3, [pc, #96]	@ (8009c20 <_Balloc+0x78>)
 8009bc0:	4818      	ldr	r0, [pc, #96]	@ (8009c24 <_Balloc+0x7c>)
 8009bc2:	216b      	movs	r1, #107	@ 0x6b
 8009bc4:	f000 fcb2 	bl	800a52c <__assert_func>
 8009bc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bcc:	6006      	str	r6, [r0, #0]
 8009bce:	60c6      	str	r6, [r0, #12]
 8009bd0:	69e6      	ldr	r6, [r4, #28]
 8009bd2:	68f3      	ldr	r3, [r6, #12]
 8009bd4:	b183      	cbz	r3, 8009bf8 <_Balloc+0x50>
 8009bd6:	69e3      	ldr	r3, [r4, #28]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009bde:	b9b8      	cbnz	r0, 8009c10 <_Balloc+0x68>
 8009be0:	2101      	movs	r1, #1
 8009be2:	fa01 f605 	lsl.w	r6, r1, r5
 8009be6:	1d72      	adds	r2, r6, #5
 8009be8:	0092      	lsls	r2, r2, #2
 8009bea:	4620      	mov	r0, r4
 8009bec:	f000 fcbc 	bl	800a568 <_calloc_r>
 8009bf0:	b160      	cbz	r0, 8009c0c <_Balloc+0x64>
 8009bf2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009bf6:	e00e      	b.n	8009c16 <_Balloc+0x6e>
 8009bf8:	2221      	movs	r2, #33	@ 0x21
 8009bfa:	2104      	movs	r1, #4
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	f000 fcb3 	bl	800a568 <_calloc_r>
 8009c02:	69e3      	ldr	r3, [r4, #28]
 8009c04:	60f0      	str	r0, [r6, #12]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d1e4      	bne.n	8009bd6 <_Balloc+0x2e>
 8009c0c:	2000      	movs	r0, #0
 8009c0e:	bd70      	pop	{r4, r5, r6, pc}
 8009c10:	6802      	ldr	r2, [r0, #0]
 8009c12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c16:	2300      	movs	r3, #0
 8009c18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c1c:	e7f7      	b.n	8009c0e <_Balloc+0x66>
 8009c1e:	bf00      	nop
 8009c20:	0801c999 	.word	0x0801c999
 8009c24:	0801ca19 	.word	0x0801ca19

08009c28 <_Bfree>:
 8009c28:	b570      	push	{r4, r5, r6, lr}
 8009c2a:	69c6      	ldr	r6, [r0, #28]
 8009c2c:	4605      	mov	r5, r0
 8009c2e:	460c      	mov	r4, r1
 8009c30:	b976      	cbnz	r6, 8009c50 <_Bfree+0x28>
 8009c32:	2010      	movs	r0, #16
 8009c34:	f7ff ff02 	bl	8009a3c <malloc>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	61e8      	str	r0, [r5, #28]
 8009c3c:	b920      	cbnz	r0, 8009c48 <_Bfree+0x20>
 8009c3e:	4b09      	ldr	r3, [pc, #36]	@ (8009c64 <_Bfree+0x3c>)
 8009c40:	4809      	ldr	r0, [pc, #36]	@ (8009c68 <_Bfree+0x40>)
 8009c42:	218f      	movs	r1, #143	@ 0x8f
 8009c44:	f000 fc72 	bl	800a52c <__assert_func>
 8009c48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c4c:	6006      	str	r6, [r0, #0]
 8009c4e:	60c6      	str	r6, [r0, #12]
 8009c50:	b13c      	cbz	r4, 8009c62 <_Bfree+0x3a>
 8009c52:	69eb      	ldr	r3, [r5, #28]
 8009c54:	6862      	ldr	r2, [r4, #4]
 8009c56:	68db      	ldr	r3, [r3, #12]
 8009c58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c5c:	6021      	str	r1, [r4, #0]
 8009c5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c62:	bd70      	pop	{r4, r5, r6, pc}
 8009c64:	0801c999 	.word	0x0801c999
 8009c68:	0801ca19 	.word	0x0801ca19

08009c6c <__multadd>:
 8009c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c70:	690d      	ldr	r5, [r1, #16]
 8009c72:	4607      	mov	r7, r0
 8009c74:	460c      	mov	r4, r1
 8009c76:	461e      	mov	r6, r3
 8009c78:	f101 0c14 	add.w	ip, r1, #20
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	f8dc 3000 	ldr.w	r3, [ip]
 8009c82:	b299      	uxth	r1, r3
 8009c84:	fb02 6101 	mla	r1, r2, r1, r6
 8009c88:	0c1e      	lsrs	r6, r3, #16
 8009c8a:	0c0b      	lsrs	r3, r1, #16
 8009c8c:	fb02 3306 	mla	r3, r2, r6, r3
 8009c90:	b289      	uxth	r1, r1
 8009c92:	3001      	adds	r0, #1
 8009c94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c98:	4285      	cmp	r5, r0
 8009c9a:	f84c 1b04 	str.w	r1, [ip], #4
 8009c9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ca2:	dcec      	bgt.n	8009c7e <__multadd+0x12>
 8009ca4:	b30e      	cbz	r6, 8009cea <__multadd+0x7e>
 8009ca6:	68a3      	ldr	r3, [r4, #8]
 8009ca8:	42ab      	cmp	r3, r5
 8009caa:	dc19      	bgt.n	8009ce0 <__multadd+0x74>
 8009cac:	6861      	ldr	r1, [r4, #4]
 8009cae:	4638      	mov	r0, r7
 8009cb0:	3101      	adds	r1, #1
 8009cb2:	f7ff ff79 	bl	8009ba8 <_Balloc>
 8009cb6:	4680      	mov	r8, r0
 8009cb8:	b928      	cbnz	r0, 8009cc6 <__multadd+0x5a>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8009cf0 <__multadd+0x84>)
 8009cbe:	480d      	ldr	r0, [pc, #52]	@ (8009cf4 <__multadd+0x88>)
 8009cc0:	21ba      	movs	r1, #186	@ 0xba
 8009cc2:	f000 fc33 	bl	800a52c <__assert_func>
 8009cc6:	6922      	ldr	r2, [r4, #16]
 8009cc8:	3202      	adds	r2, #2
 8009cca:	f104 010c 	add.w	r1, r4, #12
 8009cce:	0092      	lsls	r2, r2, #2
 8009cd0:	300c      	adds	r0, #12
 8009cd2:	f7ff f80e 	bl	8008cf2 <memcpy>
 8009cd6:	4621      	mov	r1, r4
 8009cd8:	4638      	mov	r0, r7
 8009cda:	f7ff ffa5 	bl	8009c28 <_Bfree>
 8009cde:	4644      	mov	r4, r8
 8009ce0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ce4:	3501      	adds	r5, #1
 8009ce6:	615e      	str	r6, [r3, #20]
 8009ce8:	6125      	str	r5, [r4, #16]
 8009cea:	4620      	mov	r0, r4
 8009cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cf0:	0801ca08 	.word	0x0801ca08
 8009cf4:	0801ca19 	.word	0x0801ca19

08009cf8 <__hi0bits>:
 8009cf8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	bf36      	itet	cc
 8009d00:	0403      	lslcc	r3, r0, #16
 8009d02:	2000      	movcs	r0, #0
 8009d04:	2010      	movcc	r0, #16
 8009d06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d0a:	bf3c      	itt	cc
 8009d0c:	021b      	lslcc	r3, r3, #8
 8009d0e:	3008      	addcc	r0, #8
 8009d10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d14:	bf3c      	itt	cc
 8009d16:	011b      	lslcc	r3, r3, #4
 8009d18:	3004      	addcc	r0, #4
 8009d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d1e:	bf3c      	itt	cc
 8009d20:	009b      	lslcc	r3, r3, #2
 8009d22:	3002      	addcc	r0, #2
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	db05      	blt.n	8009d34 <__hi0bits+0x3c>
 8009d28:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009d2c:	f100 0001 	add.w	r0, r0, #1
 8009d30:	bf08      	it	eq
 8009d32:	2020      	moveq	r0, #32
 8009d34:	4770      	bx	lr

08009d36 <__lo0bits>:
 8009d36:	6803      	ldr	r3, [r0, #0]
 8009d38:	4602      	mov	r2, r0
 8009d3a:	f013 0007 	ands.w	r0, r3, #7
 8009d3e:	d00b      	beq.n	8009d58 <__lo0bits+0x22>
 8009d40:	07d9      	lsls	r1, r3, #31
 8009d42:	d421      	bmi.n	8009d88 <__lo0bits+0x52>
 8009d44:	0798      	lsls	r0, r3, #30
 8009d46:	bf49      	itett	mi
 8009d48:	085b      	lsrmi	r3, r3, #1
 8009d4a:	089b      	lsrpl	r3, r3, #2
 8009d4c:	2001      	movmi	r0, #1
 8009d4e:	6013      	strmi	r3, [r2, #0]
 8009d50:	bf5c      	itt	pl
 8009d52:	6013      	strpl	r3, [r2, #0]
 8009d54:	2002      	movpl	r0, #2
 8009d56:	4770      	bx	lr
 8009d58:	b299      	uxth	r1, r3
 8009d5a:	b909      	cbnz	r1, 8009d60 <__lo0bits+0x2a>
 8009d5c:	0c1b      	lsrs	r3, r3, #16
 8009d5e:	2010      	movs	r0, #16
 8009d60:	b2d9      	uxtb	r1, r3
 8009d62:	b909      	cbnz	r1, 8009d68 <__lo0bits+0x32>
 8009d64:	3008      	adds	r0, #8
 8009d66:	0a1b      	lsrs	r3, r3, #8
 8009d68:	0719      	lsls	r1, r3, #28
 8009d6a:	bf04      	itt	eq
 8009d6c:	091b      	lsreq	r3, r3, #4
 8009d6e:	3004      	addeq	r0, #4
 8009d70:	0799      	lsls	r1, r3, #30
 8009d72:	bf04      	itt	eq
 8009d74:	089b      	lsreq	r3, r3, #2
 8009d76:	3002      	addeq	r0, #2
 8009d78:	07d9      	lsls	r1, r3, #31
 8009d7a:	d403      	bmi.n	8009d84 <__lo0bits+0x4e>
 8009d7c:	085b      	lsrs	r3, r3, #1
 8009d7e:	f100 0001 	add.w	r0, r0, #1
 8009d82:	d003      	beq.n	8009d8c <__lo0bits+0x56>
 8009d84:	6013      	str	r3, [r2, #0]
 8009d86:	4770      	bx	lr
 8009d88:	2000      	movs	r0, #0
 8009d8a:	4770      	bx	lr
 8009d8c:	2020      	movs	r0, #32
 8009d8e:	4770      	bx	lr

08009d90 <__i2b>:
 8009d90:	b510      	push	{r4, lr}
 8009d92:	460c      	mov	r4, r1
 8009d94:	2101      	movs	r1, #1
 8009d96:	f7ff ff07 	bl	8009ba8 <_Balloc>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	b928      	cbnz	r0, 8009daa <__i2b+0x1a>
 8009d9e:	4b05      	ldr	r3, [pc, #20]	@ (8009db4 <__i2b+0x24>)
 8009da0:	4805      	ldr	r0, [pc, #20]	@ (8009db8 <__i2b+0x28>)
 8009da2:	f240 1145 	movw	r1, #325	@ 0x145
 8009da6:	f000 fbc1 	bl	800a52c <__assert_func>
 8009daa:	2301      	movs	r3, #1
 8009dac:	6144      	str	r4, [r0, #20]
 8009dae:	6103      	str	r3, [r0, #16]
 8009db0:	bd10      	pop	{r4, pc}
 8009db2:	bf00      	nop
 8009db4:	0801ca08 	.word	0x0801ca08
 8009db8:	0801ca19 	.word	0x0801ca19

08009dbc <__multiply>:
 8009dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc0:	4614      	mov	r4, r2
 8009dc2:	690a      	ldr	r2, [r1, #16]
 8009dc4:	6923      	ldr	r3, [r4, #16]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	bfa8      	it	ge
 8009dca:	4623      	movge	r3, r4
 8009dcc:	460f      	mov	r7, r1
 8009dce:	bfa4      	itt	ge
 8009dd0:	460c      	movge	r4, r1
 8009dd2:	461f      	movge	r7, r3
 8009dd4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009dd8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009ddc:	68a3      	ldr	r3, [r4, #8]
 8009dde:	6861      	ldr	r1, [r4, #4]
 8009de0:	eb0a 0609 	add.w	r6, sl, r9
 8009de4:	42b3      	cmp	r3, r6
 8009de6:	b085      	sub	sp, #20
 8009de8:	bfb8      	it	lt
 8009dea:	3101      	addlt	r1, #1
 8009dec:	f7ff fedc 	bl	8009ba8 <_Balloc>
 8009df0:	b930      	cbnz	r0, 8009e00 <__multiply+0x44>
 8009df2:	4602      	mov	r2, r0
 8009df4:	4b44      	ldr	r3, [pc, #272]	@ (8009f08 <__multiply+0x14c>)
 8009df6:	4845      	ldr	r0, [pc, #276]	@ (8009f0c <__multiply+0x150>)
 8009df8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009dfc:	f000 fb96 	bl	800a52c <__assert_func>
 8009e00:	f100 0514 	add.w	r5, r0, #20
 8009e04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e08:	462b      	mov	r3, r5
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	4543      	cmp	r3, r8
 8009e0e:	d321      	bcc.n	8009e54 <__multiply+0x98>
 8009e10:	f107 0114 	add.w	r1, r7, #20
 8009e14:	f104 0214 	add.w	r2, r4, #20
 8009e18:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009e1c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009e20:	9302      	str	r3, [sp, #8]
 8009e22:	1b13      	subs	r3, r2, r4
 8009e24:	3b15      	subs	r3, #21
 8009e26:	f023 0303 	bic.w	r3, r3, #3
 8009e2a:	3304      	adds	r3, #4
 8009e2c:	f104 0715 	add.w	r7, r4, #21
 8009e30:	42ba      	cmp	r2, r7
 8009e32:	bf38      	it	cc
 8009e34:	2304      	movcc	r3, #4
 8009e36:	9301      	str	r3, [sp, #4]
 8009e38:	9b02      	ldr	r3, [sp, #8]
 8009e3a:	9103      	str	r1, [sp, #12]
 8009e3c:	428b      	cmp	r3, r1
 8009e3e:	d80c      	bhi.n	8009e5a <__multiply+0x9e>
 8009e40:	2e00      	cmp	r6, #0
 8009e42:	dd03      	ble.n	8009e4c <__multiply+0x90>
 8009e44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d05b      	beq.n	8009f04 <__multiply+0x148>
 8009e4c:	6106      	str	r6, [r0, #16]
 8009e4e:	b005      	add	sp, #20
 8009e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e54:	f843 2b04 	str.w	r2, [r3], #4
 8009e58:	e7d8      	b.n	8009e0c <__multiply+0x50>
 8009e5a:	f8b1 a000 	ldrh.w	sl, [r1]
 8009e5e:	f1ba 0f00 	cmp.w	sl, #0
 8009e62:	d024      	beq.n	8009eae <__multiply+0xf2>
 8009e64:	f104 0e14 	add.w	lr, r4, #20
 8009e68:	46a9      	mov	r9, r5
 8009e6a:	f04f 0c00 	mov.w	ip, #0
 8009e6e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009e72:	f8d9 3000 	ldr.w	r3, [r9]
 8009e76:	fa1f fb87 	uxth.w	fp, r7
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009e80:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009e84:	f8d9 7000 	ldr.w	r7, [r9]
 8009e88:	4463      	add	r3, ip
 8009e8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009e8e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009e92:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009e9c:	4572      	cmp	r2, lr
 8009e9e:	f849 3b04 	str.w	r3, [r9], #4
 8009ea2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009ea6:	d8e2      	bhi.n	8009e6e <__multiply+0xb2>
 8009ea8:	9b01      	ldr	r3, [sp, #4]
 8009eaa:	f845 c003 	str.w	ip, [r5, r3]
 8009eae:	9b03      	ldr	r3, [sp, #12]
 8009eb0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009eb4:	3104      	adds	r1, #4
 8009eb6:	f1b9 0f00 	cmp.w	r9, #0
 8009eba:	d021      	beq.n	8009f00 <__multiply+0x144>
 8009ebc:	682b      	ldr	r3, [r5, #0]
 8009ebe:	f104 0c14 	add.w	ip, r4, #20
 8009ec2:	46ae      	mov	lr, r5
 8009ec4:	f04f 0a00 	mov.w	sl, #0
 8009ec8:	f8bc b000 	ldrh.w	fp, [ip]
 8009ecc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009ed0:	fb09 770b 	mla	r7, r9, fp, r7
 8009ed4:	4457      	add	r7, sl
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009edc:	f84e 3b04 	str.w	r3, [lr], #4
 8009ee0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009ee4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ee8:	f8be 3000 	ldrh.w	r3, [lr]
 8009eec:	fb09 330a 	mla	r3, r9, sl, r3
 8009ef0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009ef4:	4562      	cmp	r2, ip
 8009ef6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009efa:	d8e5      	bhi.n	8009ec8 <__multiply+0x10c>
 8009efc:	9f01      	ldr	r7, [sp, #4]
 8009efe:	51eb      	str	r3, [r5, r7]
 8009f00:	3504      	adds	r5, #4
 8009f02:	e799      	b.n	8009e38 <__multiply+0x7c>
 8009f04:	3e01      	subs	r6, #1
 8009f06:	e79b      	b.n	8009e40 <__multiply+0x84>
 8009f08:	0801ca08 	.word	0x0801ca08
 8009f0c:	0801ca19 	.word	0x0801ca19

08009f10 <__pow5mult>:
 8009f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f14:	4615      	mov	r5, r2
 8009f16:	f012 0203 	ands.w	r2, r2, #3
 8009f1a:	4607      	mov	r7, r0
 8009f1c:	460e      	mov	r6, r1
 8009f1e:	d007      	beq.n	8009f30 <__pow5mult+0x20>
 8009f20:	4c25      	ldr	r4, [pc, #148]	@ (8009fb8 <__pow5mult+0xa8>)
 8009f22:	3a01      	subs	r2, #1
 8009f24:	2300      	movs	r3, #0
 8009f26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f2a:	f7ff fe9f 	bl	8009c6c <__multadd>
 8009f2e:	4606      	mov	r6, r0
 8009f30:	10ad      	asrs	r5, r5, #2
 8009f32:	d03d      	beq.n	8009fb0 <__pow5mult+0xa0>
 8009f34:	69fc      	ldr	r4, [r7, #28]
 8009f36:	b97c      	cbnz	r4, 8009f58 <__pow5mult+0x48>
 8009f38:	2010      	movs	r0, #16
 8009f3a:	f7ff fd7f 	bl	8009a3c <malloc>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	61f8      	str	r0, [r7, #28]
 8009f42:	b928      	cbnz	r0, 8009f50 <__pow5mult+0x40>
 8009f44:	4b1d      	ldr	r3, [pc, #116]	@ (8009fbc <__pow5mult+0xac>)
 8009f46:	481e      	ldr	r0, [pc, #120]	@ (8009fc0 <__pow5mult+0xb0>)
 8009f48:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009f4c:	f000 faee 	bl	800a52c <__assert_func>
 8009f50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f54:	6004      	str	r4, [r0, #0]
 8009f56:	60c4      	str	r4, [r0, #12]
 8009f58:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009f5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f60:	b94c      	cbnz	r4, 8009f76 <__pow5mult+0x66>
 8009f62:	f240 2171 	movw	r1, #625	@ 0x271
 8009f66:	4638      	mov	r0, r7
 8009f68:	f7ff ff12 	bl	8009d90 <__i2b>
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f72:	4604      	mov	r4, r0
 8009f74:	6003      	str	r3, [r0, #0]
 8009f76:	f04f 0900 	mov.w	r9, #0
 8009f7a:	07eb      	lsls	r3, r5, #31
 8009f7c:	d50a      	bpl.n	8009f94 <__pow5mult+0x84>
 8009f7e:	4631      	mov	r1, r6
 8009f80:	4622      	mov	r2, r4
 8009f82:	4638      	mov	r0, r7
 8009f84:	f7ff ff1a 	bl	8009dbc <__multiply>
 8009f88:	4631      	mov	r1, r6
 8009f8a:	4680      	mov	r8, r0
 8009f8c:	4638      	mov	r0, r7
 8009f8e:	f7ff fe4b 	bl	8009c28 <_Bfree>
 8009f92:	4646      	mov	r6, r8
 8009f94:	106d      	asrs	r5, r5, #1
 8009f96:	d00b      	beq.n	8009fb0 <__pow5mult+0xa0>
 8009f98:	6820      	ldr	r0, [r4, #0]
 8009f9a:	b938      	cbnz	r0, 8009fac <__pow5mult+0x9c>
 8009f9c:	4622      	mov	r2, r4
 8009f9e:	4621      	mov	r1, r4
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	f7ff ff0b 	bl	8009dbc <__multiply>
 8009fa6:	6020      	str	r0, [r4, #0]
 8009fa8:	f8c0 9000 	str.w	r9, [r0]
 8009fac:	4604      	mov	r4, r0
 8009fae:	e7e4      	b.n	8009f7a <__pow5mult+0x6a>
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fb6:	bf00      	nop
 8009fb8:	0801ca74 	.word	0x0801ca74
 8009fbc:	0801c999 	.word	0x0801c999
 8009fc0:	0801ca19 	.word	0x0801ca19

08009fc4 <__lshift>:
 8009fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc8:	460c      	mov	r4, r1
 8009fca:	6849      	ldr	r1, [r1, #4]
 8009fcc:	6923      	ldr	r3, [r4, #16]
 8009fce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009fd2:	68a3      	ldr	r3, [r4, #8]
 8009fd4:	4607      	mov	r7, r0
 8009fd6:	4691      	mov	r9, r2
 8009fd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009fdc:	f108 0601 	add.w	r6, r8, #1
 8009fe0:	42b3      	cmp	r3, r6
 8009fe2:	db0b      	blt.n	8009ffc <__lshift+0x38>
 8009fe4:	4638      	mov	r0, r7
 8009fe6:	f7ff fddf 	bl	8009ba8 <_Balloc>
 8009fea:	4605      	mov	r5, r0
 8009fec:	b948      	cbnz	r0, 800a002 <__lshift+0x3e>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	4b28      	ldr	r3, [pc, #160]	@ (800a094 <__lshift+0xd0>)
 8009ff2:	4829      	ldr	r0, [pc, #164]	@ (800a098 <__lshift+0xd4>)
 8009ff4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009ff8:	f000 fa98 	bl	800a52c <__assert_func>
 8009ffc:	3101      	adds	r1, #1
 8009ffe:	005b      	lsls	r3, r3, #1
 800a000:	e7ee      	b.n	8009fe0 <__lshift+0x1c>
 800a002:	2300      	movs	r3, #0
 800a004:	f100 0114 	add.w	r1, r0, #20
 800a008:	f100 0210 	add.w	r2, r0, #16
 800a00c:	4618      	mov	r0, r3
 800a00e:	4553      	cmp	r3, sl
 800a010:	db33      	blt.n	800a07a <__lshift+0xb6>
 800a012:	6920      	ldr	r0, [r4, #16]
 800a014:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a018:	f104 0314 	add.w	r3, r4, #20
 800a01c:	f019 091f 	ands.w	r9, r9, #31
 800a020:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a024:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a028:	d02b      	beq.n	800a082 <__lshift+0xbe>
 800a02a:	f1c9 0e20 	rsb	lr, r9, #32
 800a02e:	468a      	mov	sl, r1
 800a030:	2200      	movs	r2, #0
 800a032:	6818      	ldr	r0, [r3, #0]
 800a034:	fa00 f009 	lsl.w	r0, r0, r9
 800a038:	4310      	orrs	r0, r2
 800a03a:	f84a 0b04 	str.w	r0, [sl], #4
 800a03e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a042:	459c      	cmp	ip, r3
 800a044:	fa22 f20e 	lsr.w	r2, r2, lr
 800a048:	d8f3      	bhi.n	800a032 <__lshift+0x6e>
 800a04a:	ebac 0304 	sub.w	r3, ip, r4
 800a04e:	3b15      	subs	r3, #21
 800a050:	f023 0303 	bic.w	r3, r3, #3
 800a054:	3304      	adds	r3, #4
 800a056:	f104 0015 	add.w	r0, r4, #21
 800a05a:	4584      	cmp	ip, r0
 800a05c:	bf38      	it	cc
 800a05e:	2304      	movcc	r3, #4
 800a060:	50ca      	str	r2, [r1, r3]
 800a062:	b10a      	cbz	r2, 800a068 <__lshift+0xa4>
 800a064:	f108 0602 	add.w	r6, r8, #2
 800a068:	3e01      	subs	r6, #1
 800a06a:	4638      	mov	r0, r7
 800a06c:	612e      	str	r6, [r5, #16]
 800a06e:	4621      	mov	r1, r4
 800a070:	f7ff fdda 	bl	8009c28 <_Bfree>
 800a074:	4628      	mov	r0, r5
 800a076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a07a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a07e:	3301      	adds	r3, #1
 800a080:	e7c5      	b.n	800a00e <__lshift+0x4a>
 800a082:	3904      	subs	r1, #4
 800a084:	f853 2b04 	ldr.w	r2, [r3], #4
 800a088:	f841 2f04 	str.w	r2, [r1, #4]!
 800a08c:	459c      	cmp	ip, r3
 800a08e:	d8f9      	bhi.n	800a084 <__lshift+0xc0>
 800a090:	e7ea      	b.n	800a068 <__lshift+0xa4>
 800a092:	bf00      	nop
 800a094:	0801ca08 	.word	0x0801ca08
 800a098:	0801ca19 	.word	0x0801ca19

0800a09c <__mcmp>:
 800a09c:	690a      	ldr	r2, [r1, #16]
 800a09e:	4603      	mov	r3, r0
 800a0a0:	6900      	ldr	r0, [r0, #16]
 800a0a2:	1a80      	subs	r0, r0, r2
 800a0a4:	b530      	push	{r4, r5, lr}
 800a0a6:	d10e      	bne.n	800a0c6 <__mcmp+0x2a>
 800a0a8:	3314      	adds	r3, #20
 800a0aa:	3114      	adds	r1, #20
 800a0ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a0b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a0b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a0b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a0bc:	4295      	cmp	r5, r2
 800a0be:	d003      	beq.n	800a0c8 <__mcmp+0x2c>
 800a0c0:	d205      	bcs.n	800a0ce <__mcmp+0x32>
 800a0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c6:	bd30      	pop	{r4, r5, pc}
 800a0c8:	42a3      	cmp	r3, r4
 800a0ca:	d3f3      	bcc.n	800a0b4 <__mcmp+0x18>
 800a0cc:	e7fb      	b.n	800a0c6 <__mcmp+0x2a>
 800a0ce:	2001      	movs	r0, #1
 800a0d0:	e7f9      	b.n	800a0c6 <__mcmp+0x2a>
	...

0800a0d4 <__mdiff>:
 800a0d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d8:	4689      	mov	r9, r1
 800a0da:	4606      	mov	r6, r0
 800a0dc:	4611      	mov	r1, r2
 800a0de:	4648      	mov	r0, r9
 800a0e0:	4614      	mov	r4, r2
 800a0e2:	f7ff ffdb 	bl	800a09c <__mcmp>
 800a0e6:	1e05      	subs	r5, r0, #0
 800a0e8:	d112      	bne.n	800a110 <__mdiff+0x3c>
 800a0ea:	4629      	mov	r1, r5
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	f7ff fd5b 	bl	8009ba8 <_Balloc>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	b928      	cbnz	r0, 800a102 <__mdiff+0x2e>
 800a0f6:	4b3f      	ldr	r3, [pc, #252]	@ (800a1f4 <__mdiff+0x120>)
 800a0f8:	f240 2137 	movw	r1, #567	@ 0x237
 800a0fc:	483e      	ldr	r0, [pc, #248]	@ (800a1f8 <__mdiff+0x124>)
 800a0fe:	f000 fa15 	bl	800a52c <__assert_func>
 800a102:	2301      	movs	r3, #1
 800a104:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a108:	4610      	mov	r0, r2
 800a10a:	b003      	add	sp, #12
 800a10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a110:	bfbc      	itt	lt
 800a112:	464b      	movlt	r3, r9
 800a114:	46a1      	movlt	r9, r4
 800a116:	4630      	mov	r0, r6
 800a118:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a11c:	bfba      	itte	lt
 800a11e:	461c      	movlt	r4, r3
 800a120:	2501      	movlt	r5, #1
 800a122:	2500      	movge	r5, #0
 800a124:	f7ff fd40 	bl	8009ba8 <_Balloc>
 800a128:	4602      	mov	r2, r0
 800a12a:	b918      	cbnz	r0, 800a134 <__mdiff+0x60>
 800a12c:	4b31      	ldr	r3, [pc, #196]	@ (800a1f4 <__mdiff+0x120>)
 800a12e:	f240 2145 	movw	r1, #581	@ 0x245
 800a132:	e7e3      	b.n	800a0fc <__mdiff+0x28>
 800a134:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a138:	6926      	ldr	r6, [r4, #16]
 800a13a:	60c5      	str	r5, [r0, #12]
 800a13c:	f109 0310 	add.w	r3, r9, #16
 800a140:	f109 0514 	add.w	r5, r9, #20
 800a144:	f104 0e14 	add.w	lr, r4, #20
 800a148:	f100 0b14 	add.w	fp, r0, #20
 800a14c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a150:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a154:	9301      	str	r3, [sp, #4]
 800a156:	46d9      	mov	r9, fp
 800a158:	f04f 0c00 	mov.w	ip, #0
 800a15c:	9b01      	ldr	r3, [sp, #4]
 800a15e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a162:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a166:	9301      	str	r3, [sp, #4]
 800a168:	fa1f f38a 	uxth.w	r3, sl
 800a16c:	4619      	mov	r1, r3
 800a16e:	b283      	uxth	r3, r0
 800a170:	1acb      	subs	r3, r1, r3
 800a172:	0c00      	lsrs	r0, r0, #16
 800a174:	4463      	add	r3, ip
 800a176:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a17a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a17e:	b29b      	uxth	r3, r3
 800a180:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a184:	4576      	cmp	r6, lr
 800a186:	f849 3b04 	str.w	r3, [r9], #4
 800a18a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a18e:	d8e5      	bhi.n	800a15c <__mdiff+0x88>
 800a190:	1b33      	subs	r3, r6, r4
 800a192:	3b15      	subs	r3, #21
 800a194:	f023 0303 	bic.w	r3, r3, #3
 800a198:	3415      	adds	r4, #21
 800a19a:	3304      	adds	r3, #4
 800a19c:	42a6      	cmp	r6, r4
 800a19e:	bf38      	it	cc
 800a1a0:	2304      	movcc	r3, #4
 800a1a2:	441d      	add	r5, r3
 800a1a4:	445b      	add	r3, fp
 800a1a6:	461e      	mov	r6, r3
 800a1a8:	462c      	mov	r4, r5
 800a1aa:	4544      	cmp	r4, r8
 800a1ac:	d30e      	bcc.n	800a1cc <__mdiff+0xf8>
 800a1ae:	f108 0103 	add.w	r1, r8, #3
 800a1b2:	1b49      	subs	r1, r1, r5
 800a1b4:	f021 0103 	bic.w	r1, r1, #3
 800a1b8:	3d03      	subs	r5, #3
 800a1ba:	45a8      	cmp	r8, r5
 800a1bc:	bf38      	it	cc
 800a1be:	2100      	movcc	r1, #0
 800a1c0:	440b      	add	r3, r1
 800a1c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a1c6:	b191      	cbz	r1, 800a1ee <__mdiff+0x11a>
 800a1c8:	6117      	str	r7, [r2, #16]
 800a1ca:	e79d      	b.n	800a108 <__mdiff+0x34>
 800a1cc:	f854 1b04 	ldr.w	r1, [r4], #4
 800a1d0:	46e6      	mov	lr, ip
 800a1d2:	0c08      	lsrs	r0, r1, #16
 800a1d4:	fa1c fc81 	uxtah	ip, ip, r1
 800a1d8:	4471      	add	r1, lr
 800a1da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a1de:	b289      	uxth	r1, r1
 800a1e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a1e4:	f846 1b04 	str.w	r1, [r6], #4
 800a1e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a1ec:	e7dd      	b.n	800a1aa <__mdiff+0xd6>
 800a1ee:	3f01      	subs	r7, #1
 800a1f0:	e7e7      	b.n	800a1c2 <__mdiff+0xee>
 800a1f2:	bf00      	nop
 800a1f4:	0801ca08 	.word	0x0801ca08
 800a1f8:	0801ca19 	.word	0x0801ca19

0800a1fc <__d2b>:
 800a1fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a200:	460f      	mov	r7, r1
 800a202:	2101      	movs	r1, #1
 800a204:	ec59 8b10 	vmov	r8, r9, d0
 800a208:	4616      	mov	r6, r2
 800a20a:	f7ff fccd 	bl	8009ba8 <_Balloc>
 800a20e:	4604      	mov	r4, r0
 800a210:	b930      	cbnz	r0, 800a220 <__d2b+0x24>
 800a212:	4602      	mov	r2, r0
 800a214:	4b23      	ldr	r3, [pc, #140]	@ (800a2a4 <__d2b+0xa8>)
 800a216:	4824      	ldr	r0, [pc, #144]	@ (800a2a8 <__d2b+0xac>)
 800a218:	f240 310f 	movw	r1, #783	@ 0x30f
 800a21c:	f000 f986 	bl	800a52c <__assert_func>
 800a220:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a224:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a228:	b10d      	cbz	r5, 800a22e <__d2b+0x32>
 800a22a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a22e:	9301      	str	r3, [sp, #4]
 800a230:	f1b8 0300 	subs.w	r3, r8, #0
 800a234:	d023      	beq.n	800a27e <__d2b+0x82>
 800a236:	4668      	mov	r0, sp
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	f7ff fd7c 	bl	8009d36 <__lo0bits>
 800a23e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a242:	b1d0      	cbz	r0, 800a27a <__d2b+0x7e>
 800a244:	f1c0 0320 	rsb	r3, r0, #32
 800a248:	fa02 f303 	lsl.w	r3, r2, r3
 800a24c:	430b      	orrs	r3, r1
 800a24e:	40c2      	lsrs	r2, r0
 800a250:	6163      	str	r3, [r4, #20]
 800a252:	9201      	str	r2, [sp, #4]
 800a254:	9b01      	ldr	r3, [sp, #4]
 800a256:	61a3      	str	r3, [r4, #24]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	bf0c      	ite	eq
 800a25c:	2201      	moveq	r2, #1
 800a25e:	2202      	movne	r2, #2
 800a260:	6122      	str	r2, [r4, #16]
 800a262:	b1a5      	cbz	r5, 800a28e <__d2b+0x92>
 800a264:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a268:	4405      	add	r5, r0
 800a26a:	603d      	str	r5, [r7, #0]
 800a26c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a270:	6030      	str	r0, [r6, #0]
 800a272:	4620      	mov	r0, r4
 800a274:	b003      	add	sp, #12
 800a276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a27a:	6161      	str	r1, [r4, #20]
 800a27c:	e7ea      	b.n	800a254 <__d2b+0x58>
 800a27e:	a801      	add	r0, sp, #4
 800a280:	f7ff fd59 	bl	8009d36 <__lo0bits>
 800a284:	9b01      	ldr	r3, [sp, #4]
 800a286:	6163      	str	r3, [r4, #20]
 800a288:	3020      	adds	r0, #32
 800a28a:	2201      	movs	r2, #1
 800a28c:	e7e8      	b.n	800a260 <__d2b+0x64>
 800a28e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a292:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a296:	6038      	str	r0, [r7, #0]
 800a298:	6918      	ldr	r0, [r3, #16]
 800a29a:	f7ff fd2d 	bl	8009cf8 <__hi0bits>
 800a29e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a2a2:	e7e5      	b.n	800a270 <__d2b+0x74>
 800a2a4:	0801ca08 	.word	0x0801ca08
 800a2a8:	0801ca19 	.word	0x0801ca19

0800a2ac <__sflush_r>:
 800a2ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b4:	0716      	lsls	r6, r2, #28
 800a2b6:	4605      	mov	r5, r0
 800a2b8:	460c      	mov	r4, r1
 800a2ba:	d454      	bmi.n	800a366 <__sflush_r+0xba>
 800a2bc:	684b      	ldr	r3, [r1, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	dc02      	bgt.n	800a2c8 <__sflush_r+0x1c>
 800a2c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	dd48      	ble.n	800a35a <__sflush_r+0xae>
 800a2c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a2ca:	2e00      	cmp	r6, #0
 800a2cc:	d045      	beq.n	800a35a <__sflush_r+0xae>
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a2d4:	682f      	ldr	r7, [r5, #0]
 800a2d6:	6a21      	ldr	r1, [r4, #32]
 800a2d8:	602b      	str	r3, [r5, #0]
 800a2da:	d030      	beq.n	800a33e <__sflush_r+0x92>
 800a2dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a2de:	89a3      	ldrh	r3, [r4, #12]
 800a2e0:	0759      	lsls	r1, r3, #29
 800a2e2:	d505      	bpl.n	800a2f0 <__sflush_r+0x44>
 800a2e4:	6863      	ldr	r3, [r4, #4]
 800a2e6:	1ad2      	subs	r2, r2, r3
 800a2e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a2ea:	b10b      	cbz	r3, 800a2f0 <__sflush_r+0x44>
 800a2ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a2ee:	1ad2      	subs	r2, r2, r3
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a2f4:	6a21      	ldr	r1, [r4, #32]
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	47b0      	blx	r6
 800a2fa:	1c43      	adds	r3, r0, #1
 800a2fc:	89a3      	ldrh	r3, [r4, #12]
 800a2fe:	d106      	bne.n	800a30e <__sflush_r+0x62>
 800a300:	6829      	ldr	r1, [r5, #0]
 800a302:	291d      	cmp	r1, #29
 800a304:	d82b      	bhi.n	800a35e <__sflush_r+0xb2>
 800a306:	4a2a      	ldr	r2, [pc, #168]	@ (800a3b0 <__sflush_r+0x104>)
 800a308:	410a      	asrs	r2, r1
 800a30a:	07d6      	lsls	r6, r2, #31
 800a30c:	d427      	bmi.n	800a35e <__sflush_r+0xb2>
 800a30e:	2200      	movs	r2, #0
 800a310:	6062      	str	r2, [r4, #4]
 800a312:	04d9      	lsls	r1, r3, #19
 800a314:	6922      	ldr	r2, [r4, #16]
 800a316:	6022      	str	r2, [r4, #0]
 800a318:	d504      	bpl.n	800a324 <__sflush_r+0x78>
 800a31a:	1c42      	adds	r2, r0, #1
 800a31c:	d101      	bne.n	800a322 <__sflush_r+0x76>
 800a31e:	682b      	ldr	r3, [r5, #0]
 800a320:	b903      	cbnz	r3, 800a324 <__sflush_r+0x78>
 800a322:	6560      	str	r0, [r4, #84]	@ 0x54
 800a324:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a326:	602f      	str	r7, [r5, #0]
 800a328:	b1b9      	cbz	r1, 800a35a <__sflush_r+0xae>
 800a32a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a32e:	4299      	cmp	r1, r3
 800a330:	d002      	beq.n	800a338 <__sflush_r+0x8c>
 800a332:	4628      	mov	r0, r5
 800a334:	f7ff fb38 	bl	80099a8 <_free_r>
 800a338:	2300      	movs	r3, #0
 800a33a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a33c:	e00d      	b.n	800a35a <__sflush_r+0xae>
 800a33e:	2301      	movs	r3, #1
 800a340:	4628      	mov	r0, r5
 800a342:	47b0      	blx	r6
 800a344:	4602      	mov	r2, r0
 800a346:	1c50      	adds	r0, r2, #1
 800a348:	d1c9      	bne.n	800a2de <__sflush_r+0x32>
 800a34a:	682b      	ldr	r3, [r5, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d0c6      	beq.n	800a2de <__sflush_r+0x32>
 800a350:	2b1d      	cmp	r3, #29
 800a352:	d001      	beq.n	800a358 <__sflush_r+0xac>
 800a354:	2b16      	cmp	r3, #22
 800a356:	d11e      	bne.n	800a396 <__sflush_r+0xea>
 800a358:	602f      	str	r7, [r5, #0]
 800a35a:	2000      	movs	r0, #0
 800a35c:	e022      	b.n	800a3a4 <__sflush_r+0xf8>
 800a35e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a362:	b21b      	sxth	r3, r3
 800a364:	e01b      	b.n	800a39e <__sflush_r+0xf2>
 800a366:	690f      	ldr	r7, [r1, #16]
 800a368:	2f00      	cmp	r7, #0
 800a36a:	d0f6      	beq.n	800a35a <__sflush_r+0xae>
 800a36c:	0793      	lsls	r3, r2, #30
 800a36e:	680e      	ldr	r6, [r1, #0]
 800a370:	bf08      	it	eq
 800a372:	694b      	ldreq	r3, [r1, #20]
 800a374:	600f      	str	r7, [r1, #0]
 800a376:	bf18      	it	ne
 800a378:	2300      	movne	r3, #0
 800a37a:	eba6 0807 	sub.w	r8, r6, r7
 800a37e:	608b      	str	r3, [r1, #8]
 800a380:	f1b8 0f00 	cmp.w	r8, #0
 800a384:	dde9      	ble.n	800a35a <__sflush_r+0xae>
 800a386:	6a21      	ldr	r1, [r4, #32]
 800a388:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a38a:	4643      	mov	r3, r8
 800a38c:	463a      	mov	r2, r7
 800a38e:	4628      	mov	r0, r5
 800a390:	47b0      	blx	r6
 800a392:	2800      	cmp	r0, #0
 800a394:	dc08      	bgt.n	800a3a8 <__sflush_r+0xfc>
 800a396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a39a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a39e:	81a3      	strh	r3, [r4, #12]
 800a3a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3a8:	4407      	add	r7, r0
 800a3aa:	eba8 0800 	sub.w	r8, r8, r0
 800a3ae:	e7e7      	b.n	800a380 <__sflush_r+0xd4>
 800a3b0:	dfbffffe 	.word	0xdfbffffe

0800a3b4 <_fflush_r>:
 800a3b4:	b538      	push	{r3, r4, r5, lr}
 800a3b6:	690b      	ldr	r3, [r1, #16]
 800a3b8:	4605      	mov	r5, r0
 800a3ba:	460c      	mov	r4, r1
 800a3bc:	b913      	cbnz	r3, 800a3c4 <_fflush_r+0x10>
 800a3be:	2500      	movs	r5, #0
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	bd38      	pop	{r3, r4, r5, pc}
 800a3c4:	b118      	cbz	r0, 800a3ce <_fflush_r+0x1a>
 800a3c6:	6a03      	ldr	r3, [r0, #32]
 800a3c8:	b90b      	cbnz	r3, 800a3ce <_fflush_r+0x1a>
 800a3ca:	f7fe fae5 	bl	8008998 <__sinit>
 800a3ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d0f3      	beq.n	800a3be <_fflush_r+0xa>
 800a3d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a3d8:	07d0      	lsls	r0, r2, #31
 800a3da:	d404      	bmi.n	800a3e6 <_fflush_r+0x32>
 800a3dc:	0599      	lsls	r1, r3, #22
 800a3de:	d402      	bmi.n	800a3e6 <_fflush_r+0x32>
 800a3e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3e2:	f7fe fc84 	bl	8008cee <__retarget_lock_acquire_recursive>
 800a3e6:	4628      	mov	r0, r5
 800a3e8:	4621      	mov	r1, r4
 800a3ea:	f7ff ff5f 	bl	800a2ac <__sflush_r>
 800a3ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3f0:	07da      	lsls	r2, r3, #31
 800a3f2:	4605      	mov	r5, r0
 800a3f4:	d4e4      	bmi.n	800a3c0 <_fflush_r+0xc>
 800a3f6:	89a3      	ldrh	r3, [r4, #12]
 800a3f8:	059b      	lsls	r3, r3, #22
 800a3fa:	d4e1      	bmi.n	800a3c0 <_fflush_r+0xc>
 800a3fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3fe:	f7fe fc77 	bl	8008cf0 <__retarget_lock_release_recursive>
 800a402:	e7dd      	b.n	800a3c0 <_fflush_r+0xc>

0800a404 <__swhatbuf_r>:
 800a404:	b570      	push	{r4, r5, r6, lr}
 800a406:	460c      	mov	r4, r1
 800a408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a40c:	2900      	cmp	r1, #0
 800a40e:	b096      	sub	sp, #88	@ 0x58
 800a410:	4615      	mov	r5, r2
 800a412:	461e      	mov	r6, r3
 800a414:	da0d      	bge.n	800a432 <__swhatbuf_r+0x2e>
 800a416:	89a3      	ldrh	r3, [r4, #12]
 800a418:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a41c:	f04f 0100 	mov.w	r1, #0
 800a420:	bf14      	ite	ne
 800a422:	2340      	movne	r3, #64	@ 0x40
 800a424:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a428:	2000      	movs	r0, #0
 800a42a:	6031      	str	r1, [r6, #0]
 800a42c:	602b      	str	r3, [r5, #0]
 800a42e:	b016      	add	sp, #88	@ 0x58
 800a430:	bd70      	pop	{r4, r5, r6, pc}
 800a432:	466a      	mov	r2, sp
 800a434:	f000 f848 	bl	800a4c8 <_fstat_r>
 800a438:	2800      	cmp	r0, #0
 800a43a:	dbec      	blt.n	800a416 <__swhatbuf_r+0x12>
 800a43c:	9901      	ldr	r1, [sp, #4]
 800a43e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a442:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a446:	4259      	negs	r1, r3
 800a448:	4159      	adcs	r1, r3
 800a44a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a44e:	e7eb      	b.n	800a428 <__swhatbuf_r+0x24>

0800a450 <__smakebuf_r>:
 800a450:	898b      	ldrh	r3, [r1, #12]
 800a452:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a454:	079d      	lsls	r5, r3, #30
 800a456:	4606      	mov	r6, r0
 800a458:	460c      	mov	r4, r1
 800a45a:	d507      	bpl.n	800a46c <__smakebuf_r+0x1c>
 800a45c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a460:	6023      	str	r3, [r4, #0]
 800a462:	6123      	str	r3, [r4, #16]
 800a464:	2301      	movs	r3, #1
 800a466:	6163      	str	r3, [r4, #20]
 800a468:	b003      	add	sp, #12
 800a46a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a46c:	ab01      	add	r3, sp, #4
 800a46e:	466a      	mov	r2, sp
 800a470:	f7ff ffc8 	bl	800a404 <__swhatbuf_r>
 800a474:	9f00      	ldr	r7, [sp, #0]
 800a476:	4605      	mov	r5, r0
 800a478:	4639      	mov	r1, r7
 800a47a:	4630      	mov	r0, r6
 800a47c:	f7ff fb08 	bl	8009a90 <_malloc_r>
 800a480:	b948      	cbnz	r0, 800a496 <__smakebuf_r+0x46>
 800a482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a486:	059a      	lsls	r2, r3, #22
 800a488:	d4ee      	bmi.n	800a468 <__smakebuf_r+0x18>
 800a48a:	f023 0303 	bic.w	r3, r3, #3
 800a48e:	f043 0302 	orr.w	r3, r3, #2
 800a492:	81a3      	strh	r3, [r4, #12]
 800a494:	e7e2      	b.n	800a45c <__smakebuf_r+0xc>
 800a496:	89a3      	ldrh	r3, [r4, #12]
 800a498:	6020      	str	r0, [r4, #0]
 800a49a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a49e:	81a3      	strh	r3, [r4, #12]
 800a4a0:	9b01      	ldr	r3, [sp, #4]
 800a4a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a4a6:	b15b      	cbz	r3, 800a4c0 <__smakebuf_r+0x70>
 800a4a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	f000 f81d 	bl	800a4ec <_isatty_r>
 800a4b2:	b128      	cbz	r0, 800a4c0 <__smakebuf_r+0x70>
 800a4b4:	89a3      	ldrh	r3, [r4, #12]
 800a4b6:	f023 0303 	bic.w	r3, r3, #3
 800a4ba:	f043 0301 	orr.w	r3, r3, #1
 800a4be:	81a3      	strh	r3, [r4, #12]
 800a4c0:	89a3      	ldrh	r3, [r4, #12]
 800a4c2:	431d      	orrs	r5, r3
 800a4c4:	81a5      	strh	r5, [r4, #12]
 800a4c6:	e7cf      	b.n	800a468 <__smakebuf_r+0x18>

0800a4c8 <_fstat_r>:
 800a4c8:	b538      	push	{r3, r4, r5, lr}
 800a4ca:	4d07      	ldr	r5, [pc, #28]	@ (800a4e8 <_fstat_r+0x20>)
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	4604      	mov	r4, r0
 800a4d0:	4608      	mov	r0, r1
 800a4d2:	4611      	mov	r1, r2
 800a4d4:	602b      	str	r3, [r5, #0]
 800a4d6:	f7f8 f8e7 	bl	80026a8 <_fstat>
 800a4da:	1c43      	adds	r3, r0, #1
 800a4dc:	d102      	bne.n	800a4e4 <_fstat_r+0x1c>
 800a4de:	682b      	ldr	r3, [r5, #0]
 800a4e0:	b103      	cbz	r3, 800a4e4 <_fstat_r+0x1c>
 800a4e2:	6023      	str	r3, [r4, #0]
 800a4e4:	bd38      	pop	{r3, r4, r5, pc}
 800a4e6:	bf00      	nop
 800a4e8:	20004de0 	.word	0x20004de0

0800a4ec <_isatty_r>:
 800a4ec:	b538      	push	{r3, r4, r5, lr}
 800a4ee:	4d06      	ldr	r5, [pc, #24]	@ (800a508 <_isatty_r+0x1c>)
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	4604      	mov	r4, r0
 800a4f4:	4608      	mov	r0, r1
 800a4f6:	602b      	str	r3, [r5, #0]
 800a4f8:	f7f8 f884 	bl	8002604 <_isatty>
 800a4fc:	1c43      	adds	r3, r0, #1
 800a4fe:	d102      	bne.n	800a506 <_isatty_r+0x1a>
 800a500:	682b      	ldr	r3, [r5, #0]
 800a502:	b103      	cbz	r3, 800a506 <_isatty_r+0x1a>
 800a504:	6023      	str	r3, [r4, #0]
 800a506:	bd38      	pop	{r3, r4, r5, pc}
 800a508:	20004de0 	.word	0x20004de0

0800a50c <_sbrk_r>:
 800a50c:	b538      	push	{r3, r4, r5, lr}
 800a50e:	4d06      	ldr	r5, [pc, #24]	@ (800a528 <_sbrk_r+0x1c>)
 800a510:	2300      	movs	r3, #0
 800a512:	4604      	mov	r4, r0
 800a514:	4608      	mov	r0, r1
 800a516:	602b      	str	r3, [r5, #0]
 800a518:	f7f9 fa6a 	bl	80039f0 <_sbrk>
 800a51c:	1c43      	adds	r3, r0, #1
 800a51e:	d102      	bne.n	800a526 <_sbrk_r+0x1a>
 800a520:	682b      	ldr	r3, [r5, #0]
 800a522:	b103      	cbz	r3, 800a526 <_sbrk_r+0x1a>
 800a524:	6023      	str	r3, [r4, #0]
 800a526:	bd38      	pop	{r3, r4, r5, pc}
 800a528:	20004de0 	.word	0x20004de0

0800a52c <__assert_func>:
 800a52c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a52e:	4614      	mov	r4, r2
 800a530:	461a      	mov	r2, r3
 800a532:	4b09      	ldr	r3, [pc, #36]	@ (800a558 <__assert_func+0x2c>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	4605      	mov	r5, r0
 800a538:	68d8      	ldr	r0, [r3, #12]
 800a53a:	b954      	cbnz	r4, 800a552 <__assert_func+0x26>
 800a53c:	4b07      	ldr	r3, [pc, #28]	@ (800a55c <__assert_func+0x30>)
 800a53e:	461c      	mov	r4, r3
 800a540:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a544:	9100      	str	r1, [sp, #0]
 800a546:	462b      	mov	r3, r5
 800a548:	4905      	ldr	r1, [pc, #20]	@ (800a560 <__assert_func+0x34>)
 800a54a:	f000 f841 	bl	800a5d0 <fiprintf>
 800a54e:	f000 f851 	bl	800a5f4 <abort>
 800a552:	4b04      	ldr	r3, [pc, #16]	@ (800a564 <__assert_func+0x38>)
 800a554:	e7f4      	b.n	800a540 <__assert_func+0x14>
 800a556:	bf00      	nop
 800a558:	20002f90 	.word	0x20002f90
 800a55c:	0801cbb5 	.word	0x0801cbb5
 800a560:	0801cb87 	.word	0x0801cb87
 800a564:	0801cb7a 	.word	0x0801cb7a

0800a568 <_calloc_r>:
 800a568:	b570      	push	{r4, r5, r6, lr}
 800a56a:	fba1 5402 	umull	r5, r4, r1, r2
 800a56e:	b93c      	cbnz	r4, 800a580 <_calloc_r+0x18>
 800a570:	4629      	mov	r1, r5
 800a572:	f7ff fa8d 	bl	8009a90 <_malloc_r>
 800a576:	4606      	mov	r6, r0
 800a578:	b928      	cbnz	r0, 800a586 <_calloc_r+0x1e>
 800a57a:	2600      	movs	r6, #0
 800a57c:	4630      	mov	r0, r6
 800a57e:	bd70      	pop	{r4, r5, r6, pc}
 800a580:	220c      	movs	r2, #12
 800a582:	6002      	str	r2, [r0, #0]
 800a584:	e7f9      	b.n	800a57a <_calloc_r+0x12>
 800a586:	462a      	mov	r2, r5
 800a588:	4621      	mov	r1, r4
 800a58a:	f7fe fb32 	bl	8008bf2 <memset>
 800a58e:	e7f5      	b.n	800a57c <_calloc_r+0x14>

0800a590 <__ascii_mbtowc>:
 800a590:	b082      	sub	sp, #8
 800a592:	b901      	cbnz	r1, 800a596 <__ascii_mbtowc+0x6>
 800a594:	a901      	add	r1, sp, #4
 800a596:	b142      	cbz	r2, 800a5aa <__ascii_mbtowc+0x1a>
 800a598:	b14b      	cbz	r3, 800a5ae <__ascii_mbtowc+0x1e>
 800a59a:	7813      	ldrb	r3, [r2, #0]
 800a59c:	600b      	str	r3, [r1, #0]
 800a59e:	7812      	ldrb	r2, [r2, #0]
 800a5a0:	1e10      	subs	r0, r2, #0
 800a5a2:	bf18      	it	ne
 800a5a4:	2001      	movne	r0, #1
 800a5a6:	b002      	add	sp, #8
 800a5a8:	4770      	bx	lr
 800a5aa:	4610      	mov	r0, r2
 800a5ac:	e7fb      	b.n	800a5a6 <__ascii_mbtowc+0x16>
 800a5ae:	f06f 0001 	mvn.w	r0, #1
 800a5b2:	e7f8      	b.n	800a5a6 <__ascii_mbtowc+0x16>

0800a5b4 <__ascii_wctomb>:
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	4608      	mov	r0, r1
 800a5b8:	b141      	cbz	r1, 800a5cc <__ascii_wctomb+0x18>
 800a5ba:	2aff      	cmp	r2, #255	@ 0xff
 800a5bc:	d904      	bls.n	800a5c8 <__ascii_wctomb+0x14>
 800a5be:	228a      	movs	r2, #138	@ 0x8a
 800a5c0:	601a      	str	r2, [r3, #0]
 800a5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c6:	4770      	bx	lr
 800a5c8:	700a      	strb	r2, [r1, #0]
 800a5ca:	2001      	movs	r0, #1
 800a5cc:	4770      	bx	lr
	...

0800a5d0 <fiprintf>:
 800a5d0:	b40e      	push	{r1, r2, r3}
 800a5d2:	b503      	push	{r0, r1, lr}
 800a5d4:	4601      	mov	r1, r0
 800a5d6:	ab03      	add	r3, sp, #12
 800a5d8:	4805      	ldr	r0, [pc, #20]	@ (800a5f0 <fiprintf+0x20>)
 800a5da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5de:	6800      	ldr	r0, [r0, #0]
 800a5e0:	9301      	str	r3, [sp, #4]
 800a5e2:	f000 f837 	bl	800a654 <_vfiprintf_r>
 800a5e6:	b002      	add	sp, #8
 800a5e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5ec:	b003      	add	sp, #12
 800a5ee:	4770      	bx	lr
 800a5f0:	20002f90 	.word	0x20002f90

0800a5f4 <abort>:
 800a5f4:	b508      	push	{r3, lr}
 800a5f6:	2006      	movs	r0, #6
 800a5f8:	f000 fa00 	bl	800a9fc <raise>
 800a5fc:	2001      	movs	r0, #1
 800a5fe:	f000 fa29 	bl	800aa54 <_exit>

0800a602 <__sfputc_r>:
 800a602:	6893      	ldr	r3, [r2, #8]
 800a604:	3b01      	subs	r3, #1
 800a606:	2b00      	cmp	r3, #0
 800a608:	b410      	push	{r4}
 800a60a:	6093      	str	r3, [r2, #8]
 800a60c:	da08      	bge.n	800a620 <__sfputc_r+0x1e>
 800a60e:	6994      	ldr	r4, [r2, #24]
 800a610:	42a3      	cmp	r3, r4
 800a612:	db01      	blt.n	800a618 <__sfputc_r+0x16>
 800a614:	290a      	cmp	r1, #10
 800a616:	d103      	bne.n	800a620 <__sfputc_r+0x1e>
 800a618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a61c:	f000 b932 	b.w	800a884 <__swbuf_r>
 800a620:	6813      	ldr	r3, [r2, #0]
 800a622:	1c58      	adds	r0, r3, #1
 800a624:	6010      	str	r0, [r2, #0]
 800a626:	7019      	strb	r1, [r3, #0]
 800a628:	4608      	mov	r0, r1
 800a62a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <__sfputs_r>:
 800a630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a632:	4606      	mov	r6, r0
 800a634:	460f      	mov	r7, r1
 800a636:	4614      	mov	r4, r2
 800a638:	18d5      	adds	r5, r2, r3
 800a63a:	42ac      	cmp	r4, r5
 800a63c:	d101      	bne.n	800a642 <__sfputs_r+0x12>
 800a63e:	2000      	movs	r0, #0
 800a640:	e007      	b.n	800a652 <__sfputs_r+0x22>
 800a642:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a646:	463a      	mov	r2, r7
 800a648:	4630      	mov	r0, r6
 800a64a:	f7ff ffda 	bl	800a602 <__sfputc_r>
 800a64e:	1c43      	adds	r3, r0, #1
 800a650:	d1f3      	bne.n	800a63a <__sfputs_r+0xa>
 800a652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a654 <_vfiprintf_r>:
 800a654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a658:	460d      	mov	r5, r1
 800a65a:	b09d      	sub	sp, #116	@ 0x74
 800a65c:	4614      	mov	r4, r2
 800a65e:	4698      	mov	r8, r3
 800a660:	4606      	mov	r6, r0
 800a662:	b118      	cbz	r0, 800a66c <_vfiprintf_r+0x18>
 800a664:	6a03      	ldr	r3, [r0, #32]
 800a666:	b90b      	cbnz	r3, 800a66c <_vfiprintf_r+0x18>
 800a668:	f7fe f996 	bl	8008998 <__sinit>
 800a66c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a66e:	07d9      	lsls	r1, r3, #31
 800a670:	d405      	bmi.n	800a67e <_vfiprintf_r+0x2a>
 800a672:	89ab      	ldrh	r3, [r5, #12]
 800a674:	059a      	lsls	r2, r3, #22
 800a676:	d402      	bmi.n	800a67e <_vfiprintf_r+0x2a>
 800a678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a67a:	f7fe fb38 	bl	8008cee <__retarget_lock_acquire_recursive>
 800a67e:	89ab      	ldrh	r3, [r5, #12]
 800a680:	071b      	lsls	r3, r3, #28
 800a682:	d501      	bpl.n	800a688 <_vfiprintf_r+0x34>
 800a684:	692b      	ldr	r3, [r5, #16]
 800a686:	b99b      	cbnz	r3, 800a6b0 <_vfiprintf_r+0x5c>
 800a688:	4629      	mov	r1, r5
 800a68a:	4630      	mov	r0, r6
 800a68c:	f000 f938 	bl	800a900 <__swsetup_r>
 800a690:	b170      	cbz	r0, 800a6b0 <_vfiprintf_r+0x5c>
 800a692:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a694:	07dc      	lsls	r4, r3, #31
 800a696:	d504      	bpl.n	800a6a2 <_vfiprintf_r+0x4e>
 800a698:	f04f 30ff 	mov.w	r0, #4294967295
 800a69c:	b01d      	add	sp, #116	@ 0x74
 800a69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a2:	89ab      	ldrh	r3, [r5, #12]
 800a6a4:	0598      	lsls	r0, r3, #22
 800a6a6:	d4f7      	bmi.n	800a698 <_vfiprintf_r+0x44>
 800a6a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6aa:	f7fe fb21 	bl	8008cf0 <__retarget_lock_release_recursive>
 800a6ae:	e7f3      	b.n	800a698 <_vfiprintf_r+0x44>
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6b4:	2320      	movs	r3, #32
 800a6b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a6ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6be:	2330      	movs	r3, #48	@ 0x30
 800a6c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a870 <_vfiprintf_r+0x21c>
 800a6c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a6c8:	f04f 0901 	mov.w	r9, #1
 800a6cc:	4623      	mov	r3, r4
 800a6ce:	469a      	mov	sl, r3
 800a6d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6d4:	b10a      	cbz	r2, 800a6da <_vfiprintf_r+0x86>
 800a6d6:	2a25      	cmp	r2, #37	@ 0x25
 800a6d8:	d1f9      	bne.n	800a6ce <_vfiprintf_r+0x7a>
 800a6da:	ebba 0b04 	subs.w	fp, sl, r4
 800a6de:	d00b      	beq.n	800a6f8 <_vfiprintf_r+0xa4>
 800a6e0:	465b      	mov	r3, fp
 800a6e2:	4622      	mov	r2, r4
 800a6e4:	4629      	mov	r1, r5
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	f7ff ffa2 	bl	800a630 <__sfputs_r>
 800a6ec:	3001      	adds	r0, #1
 800a6ee:	f000 80a7 	beq.w	800a840 <_vfiprintf_r+0x1ec>
 800a6f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6f4:	445a      	add	r2, fp
 800a6f6:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6f8:	f89a 3000 	ldrb.w	r3, [sl]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f000 809f 	beq.w	800a840 <_vfiprintf_r+0x1ec>
 800a702:	2300      	movs	r3, #0
 800a704:	f04f 32ff 	mov.w	r2, #4294967295
 800a708:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a70c:	f10a 0a01 	add.w	sl, sl, #1
 800a710:	9304      	str	r3, [sp, #16]
 800a712:	9307      	str	r3, [sp, #28]
 800a714:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a718:	931a      	str	r3, [sp, #104]	@ 0x68
 800a71a:	4654      	mov	r4, sl
 800a71c:	2205      	movs	r2, #5
 800a71e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a722:	4853      	ldr	r0, [pc, #332]	@ (800a870 <_vfiprintf_r+0x21c>)
 800a724:	f7f5 fd64 	bl	80001f0 <memchr>
 800a728:	9a04      	ldr	r2, [sp, #16]
 800a72a:	b9d8      	cbnz	r0, 800a764 <_vfiprintf_r+0x110>
 800a72c:	06d1      	lsls	r1, r2, #27
 800a72e:	bf44      	itt	mi
 800a730:	2320      	movmi	r3, #32
 800a732:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a736:	0713      	lsls	r3, r2, #28
 800a738:	bf44      	itt	mi
 800a73a:	232b      	movmi	r3, #43	@ 0x2b
 800a73c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a740:	f89a 3000 	ldrb.w	r3, [sl]
 800a744:	2b2a      	cmp	r3, #42	@ 0x2a
 800a746:	d015      	beq.n	800a774 <_vfiprintf_r+0x120>
 800a748:	9a07      	ldr	r2, [sp, #28]
 800a74a:	4654      	mov	r4, sl
 800a74c:	2000      	movs	r0, #0
 800a74e:	f04f 0c0a 	mov.w	ip, #10
 800a752:	4621      	mov	r1, r4
 800a754:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a758:	3b30      	subs	r3, #48	@ 0x30
 800a75a:	2b09      	cmp	r3, #9
 800a75c:	d94b      	bls.n	800a7f6 <_vfiprintf_r+0x1a2>
 800a75e:	b1b0      	cbz	r0, 800a78e <_vfiprintf_r+0x13a>
 800a760:	9207      	str	r2, [sp, #28]
 800a762:	e014      	b.n	800a78e <_vfiprintf_r+0x13a>
 800a764:	eba0 0308 	sub.w	r3, r0, r8
 800a768:	fa09 f303 	lsl.w	r3, r9, r3
 800a76c:	4313      	orrs	r3, r2
 800a76e:	9304      	str	r3, [sp, #16]
 800a770:	46a2      	mov	sl, r4
 800a772:	e7d2      	b.n	800a71a <_vfiprintf_r+0xc6>
 800a774:	9b03      	ldr	r3, [sp, #12]
 800a776:	1d19      	adds	r1, r3, #4
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	9103      	str	r1, [sp, #12]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	bfbb      	ittet	lt
 800a780:	425b      	neglt	r3, r3
 800a782:	f042 0202 	orrlt.w	r2, r2, #2
 800a786:	9307      	strge	r3, [sp, #28]
 800a788:	9307      	strlt	r3, [sp, #28]
 800a78a:	bfb8      	it	lt
 800a78c:	9204      	strlt	r2, [sp, #16]
 800a78e:	7823      	ldrb	r3, [r4, #0]
 800a790:	2b2e      	cmp	r3, #46	@ 0x2e
 800a792:	d10a      	bne.n	800a7aa <_vfiprintf_r+0x156>
 800a794:	7863      	ldrb	r3, [r4, #1]
 800a796:	2b2a      	cmp	r3, #42	@ 0x2a
 800a798:	d132      	bne.n	800a800 <_vfiprintf_r+0x1ac>
 800a79a:	9b03      	ldr	r3, [sp, #12]
 800a79c:	1d1a      	adds	r2, r3, #4
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	9203      	str	r2, [sp, #12]
 800a7a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a7a6:	3402      	adds	r4, #2
 800a7a8:	9305      	str	r3, [sp, #20]
 800a7aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a880 <_vfiprintf_r+0x22c>
 800a7ae:	7821      	ldrb	r1, [r4, #0]
 800a7b0:	2203      	movs	r2, #3
 800a7b2:	4650      	mov	r0, sl
 800a7b4:	f7f5 fd1c 	bl	80001f0 <memchr>
 800a7b8:	b138      	cbz	r0, 800a7ca <_vfiprintf_r+0x176>
 800a7ba:	9b04      	ldr	r3, [sp, #16]
 800a7bc:	eba0 000a 	sub.w	r0, r0, sl
 800a7c0:	2240      	movs	r2, #64	@ 0x40
 800a7c2:	4082      	lsls	r2, r0
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	3401      	adds	r4, #1
 800a7c8:	9304      	str	r3, [sp, #16]
 800a7ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ce:	4829      	ldr	r0, [pc, #164]	@ (800a874 <_vfiprintf_r+0x220>)
 800a7d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a7d4:	2206      	movs	r2, #6
 800a7d6:	f7f5 fd0b 	bl	80001f0 <memchr>
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	d03f      	beq.n	800a85e <_vfiprintf_r+0x20a>
 800a7de:	4b26      	ldr	r3, [pc, #152]	@ (800a878 <_vfiprintf_r+0x224>)
 800a7e0:	bb1b      	cbnz	r3, 800a82a <_vfiprintf_r+0x1d6>
 800a7e2:	9b03      	ldr	r3, [sp, #12]
 800a7e4:	3307      	adds	r3, #7
 800a7e6:	f023 0307 	bic.w	r3, r3, #7
 800a7ea:	3308      	adds	r3, #8
 800a7ec:	9303      	str	r3, [sp, #12]
 800a7ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7f0:	443b      	add	r3, r7
 800a7f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7f4:	e76a      	b.n	800a6cc <_vfiprintf_r+0x78>
 800a7f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	2001      	movs	r0, #1
 800a7fe:	e7a8      	b.n	800a752 <_vfiprintf_r+0xfe>
 800a800:	2300      	movs	r3, #0
 800a802:	3401      	adds	r4, #1
 800a804:	9305      	str	r3, [sp, #20]
 800a806:	4619      	mov	r1, r3
 800a808:	f04f 0c0a 	mov.w	ip, #10
 800a80c:	4620      	mov	r0, r4
 800a80e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a812:	3a30      	subs	r2, #48	@ 0x30
 800a814:	2a09      	cmp	r2, #9
 800a816:	d903      	bls.n	800a820 <_vfiprintf_r+0x1cc>
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d0c6      	beq.n	800a7aa <_vfiprintf_r+0x156>
 800a81c:	9105      	str	r1, [sp, #20]
 800a81e:	e7c4      	b.n	800a7aa <_vfiprintf_r+0x156>
 800a820:	fb0c 2101 	mla	r1, ip, r1, r2
 800a824:	4604      	mov	r4, r0
 800a826:	2301      	movs	r3, #1
 800a828:	e7f0      	b.n	800a80c <_vfiprintf_r+0x1b8>
 800a82a:	ab03      	add	r3, sp, #12
 800a82c:	9300      	str	r3, [sp, #0]
 800a82e:	462a      	mov	r2, r5
 800a830:	4b12      	ldr	r3, [pc, #72]	@ (800a87c <_vfiprintf_r+0x228>)
 800a832:	a904      	add	r1, sp, #16
 800a834:	4630      	mov	r0, r6
 800a836:	f7fd fc6b 	bl	8008110 <_printf_float>
 800a83a:	4607      	mov	r7, r0
 800a83c:	1c78      	adds	r0, r7, #1
 800a83e:	d1d6      	bne.n	800a7ee <_vfiprintf_r+0x19a>
 800a840:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a842:	07d9      	lsls	r1, r3, #31
 800a844:	d405      	bmi.n	800a852 <_vfiprintf_r+0x1fe>
 800a846:	89ab      	ldrh	r3, [r5, #12]
 800a848:	059a      	lsls	r2, r3, #22
 800a84a:	d402      	bmi.n	800a852 <_vfiprintf_r+0x1fe>
 800a84c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a84e:	f7fe fa4f 	bl	8008cf0 <__retarget_lock_release_recursive>
 800a852:	89ab      	ldrh	r3, [r5, #12]
 800a854:	065b      	lsls	r3, r3, #25
 800a856:	f53f af1f 	bmi.w	800a698 <_vfiprintf_r+0x44>
 800a85a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a85c:	e71e      	b.n	800a69c <_vfiprintf_r+0x48>
 800a85e:	ab03      	add	r3, sp, #12
 800a860:	9300      	str	r3, [sp, #0]
 800a862:	462a      	mov	r2, r5
 800a864:	4b05      	ldr	r3, [pc, #20]	@ (800a87c <_vfiprintf_r+0x228>)
 800a866:	a904      	add	r1, sp, #16
 800a868:	4630      	mov	r0, r6
 800a86a:	f7fd fee9 	bl	8008640 <_printf_i>
 800a86e:	e7e4      	b.n	800a83a <_vfiprintf_r+0x1e6>
 800a870:	0801ccb7 	.word	0x0801ccb7
 800a874:	0801ccc1 	.word	0x0801ccc1
 800a878:	08008111 	.word	0x08008111
 800a87c:	0800a631 	.word	0x0800a631
 800a880:	0801ccbd 	.word	0x0801ccbd

0800a884 <__swbuf_r>:
 800a884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a886:	460e      	mov	r6, r1
 800a888:	4614      	mov	r4, r2
 800a88a:	4605      	mov	r5, r0
 800a88c:	b118      	cbz	r0, 800a896 <__swbuf_r+0x12>
 800a88e:	6a03      	ldr	r3, [r0, #32]
 800a890:	b90b      	cbnz	r3, 800a896 <__swbuf_r+0x12>
 800a892:	f7fe f881 	bl	8008998 <__sinit>
 800a896:	69a3      	ldr	r3, [r4, #24]
 800a898:	60a3      	str	r3, [r4, #8]
 800a89a:	89a3      	ldrh	r3, [r4, #12]
 800a89c:	071a      	lsls	r2, r3, #28
 800a89e:	d501      	bpl.n	800a8a4 <__swbuf_r+0x20>
 800a8a0:	6923      	ldr	r3, [r4, #16]
 800a8a2:	b943      	cbnz	r3, 800a8b6 <__swbuf_r+0x32>
 800a8a4:	4621      	mov	r1, r4
 800a8a6:	4628      	mov	r0, r5
 800a8a8:	f000 f82a 	bl	800a900 <__swsetup_r>
 800a8ac:	b118      	cbz	r0, 800a8b6 <__swbuf_r+0x32>
 800a8ae:	f04f 37ff 	mov.w	r7, #4294967295
 800a8b2:	4638      	mov	r0, r7
 800a8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8b6:	6823      	ldr	r3, [r4, #0]
 800a8b8:	6922      	ldr	r2, [r4, #16]
 800a8ba:	1a98      	subs	r0, r3, r2
 800a8bc:	6963      	ldr	r3, [r4, #20]
 800a8be:	b2f6      	uxtb	r6, r6
 800a8c0:	4283      	cmp	r3, r0
 800a8c2:	4637      	mov	r7, r6
 800a8c4:	dc05      	bgt.n	800a8d2 <__swbuf_r+0x4e>
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	f7ff fd73 	bl	800a3b4 <_fflush_r>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d1ed      	bne.n	800a8ae <__swbuf_r+0x2a>
 800a8d2:	68a3      	ldr	r3, [r4, #8]
 800a8d4:	3b01      	subs	r3, #1
 800a8d6:	60a3      	str	r3, [r4, #8]
 800a8d8:	6823      	ldr	r3, [r4, #0]
 800a8da:	1c5a      	adds	r2, r3, #1
 800a8dc:	6022      	str	r2, [r4, #0]
 800a8de:	701e      	strb	r6, [r3, #0]
 800a8e0:	6962      	ldr	r2, [r4, #20]
 800a8e2:	1c43      	adds	r3, r0, #1
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d004      	beq.n	800a8f2 <__swbuf_r+0x6e>
 800a8e8:	89a3      	ldrh	r3, [r4, #12]
 800a8ea:	07db      	lsls	r3, r3, #31
 800a8ec:	d5e1      	bpl.n	800a8b2 <__swbuf_r+0x2e>
 800a8ee:	2e0a      	cmp	r6, #10
 800a8f0:	d1df      	bne.n	800a8b2 <__swbuf_r+0x2e>
 800a8f2:	4621      	mov	r1, r4
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	f7ff fd5d 	bl	800a3b4 <_fflush_r>
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	d0d9      	beq.n	800a8b2 <__swbuf_r+0x2e>
 800a8fe:	e7d6      	b.n	800a8ae <__swbuf_r+0x2a>

0800a900 <__swsetup_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	4b29      	ldr	r3, [pc, #164]	@ (800a9a8 <__swsetup_r+0xa8>)
 800a904:	4605      	mov	r5, r0
 800a906:	6818      	ldr	r0, [r3, #0]
 800a908:	460c      	mov	r4, r1
 800a90a:	b118      	cbz	r0, 800a914 <__swsetup_r+0x14>
 800a90c:	6a03      	ldr	r3, [r0, #32]
 800a90e:	b90b      	cbnz	r3, 800a914 <__swsetup_r+0x14>
 800a910:	f7fe f842 	bl	8008998 <__sinit>
 800a914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a918:	0719      	lsls	r1, r3, #28
 800a91a:	d422      	bmi.n	800a962 <__swsetup_r+0x62>
 800a91c:	06da      	lsls	r2, r3, #27
 800a91e:	d407      	bmi.n	800a930 <__swsetup_r+0x30>
 800a920:	2209      	movs	r2, #9
 800a922:	602a      	str	r2, [r5, #0]
 800a924:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a928:	81a3      	strh	r3, [r4, #12]
 800a92a:	f04f 30ff 	mov.w	r0, #4294967295
 800a92e:	e033      	b.n	800a998 <__swsetup_r+0x98>
 800a930:	0758      	lsls	r0, r3, #29
 800a932:	d512      	bpl.n	800a95a <__swsetup_r+0x5a>
 800a934:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a936:	b141      	cbz	r1, 800a94a <__swsetup_r+0x4a>
 800a938:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a93c:	4299      	cmp	r1, r3
 800a93e:	d002      	beq.n	800a946 <__swsetup_r+0x46>
 800a940:	4628      	mov	r0, r5
 800a942:	f7ff f831 	bl	80099a8 <_free_r>
 800a946:	2300      	movs	r3, #0
 800a948:	6363      	str	r3, [r4, #52]	@ 0x34
 800a94a:	89a3      	ldrh	r3, [r4, #12]
 800a94c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a950:	81a3      	strh	r3, [r4, #12]
 800a952:	2300      	movs	r3, #0
 800a954:	6063      	str	r3, [r4, #4]
 800a956:	6923      	ldr	r3, [r4, #16]
 800a958:	6023      	str	r3, [r4, #0]
 800a95a:	89a3      	ldrh	r3, [r4, #12]
 800a95c:	f043 0308 	orr.w	r3, r3, #8
 800a960:	81a3      	strh	r3, [r4, #12]
 800a962:	6923      	ldr	r3, [r4, #16]
 800a964:	b94b      	cbnz	r3, 800a97a <__swsetup_r+0x7a>
 800a966:	89a3      	ldrh	r3, [r4, #12]
 800a968:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a96c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a970:	d003      	beq.n	800a97a <__swsetup_r+0x7a>
 800a972:	4621      	mov	r1, r4
 800a974:	4628      	mov	r0, r5
 800a976:	f7ff fd6b 	bl	800a450 <__smakebuf_r>
 800a97a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a97e:	f013 0201 	ands.w	r2, r3, #1
 800a982:	d00a      	beq.n	800a99a <__swsetup_r+0x9a>
 800a984:	2200      	movs	r2, #0
 800a986:	60a2      	str	r2, [r4, #8]
 800a988:	6962      	ldr	r2, [r4, #20]
 800a98a:	4252      	negs	r2, r2
 800a98c:	61a2      	str	r2, [r4, #24]
 800a98e:	6922      	ldr	r2, [r4, #16]
 800a990:	b942      	cbnz	r2, 800a9a4 <__swsetup_r+0xa4>
 800a992:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a996:	d1c5      	bne.n	800a924 <__swsetup_r+0x24>
 800a998:	bd38      	pop	{r3, r4, r5, pc}
 800a99a:	0799      	lsls	r1, r3, #30
 800a99c:	bf58      	it	pl
 800a99e:	6962      	ldrpl	r2, [r4, #20]
 800a9a0:	60a2      	str	r2, [r4, #8]
 800a9a2:	e7f4      	b.n	800a98e <__swsetup_r+0x8e>
 800a9a4:	2000      	movs	r0, #0
 800a9a6:	e7f7      	b.n	800a998 <__swsetup_r+0x98>
 800a9a8:	20002f90 	.word	0x20002f90

0800a9ac <_raise_r>:
 800a9ac:	291f      	cmp	r1, #31
 800a9ae:	b538      	push	{r3, r4, r5, lr}
 800a9b0:	4605      	mov	r5, r0
 800a9b2:	460c      	mov	r4, r1
 800a9b4:	d904      	bls.n	800a9c0 <_raise_r+0x14>
 800a9b6:	2316      	movs	r3, #22
 800a9b8:	6003      	str	r3, [r0, #0]
 800a9ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a9be:	bd38      	pop	{r3, r4, r5, pc}
 800a9c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a9c2:	b112      	cbz	r2, 800a9ca <_raise_r+0x1e>
 800a9c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9c8:	b94b      	cbnz	r3, 800a9de <_raise_r+0x32>
 800a9ca:	4628      	mov	r0, r5
 800a9cc:	f000 f830 	bl	800aa30 <_getpid_r>
 800a9d0:	4622      	mov	r2, r4
 800a9d2:	4601      	mov	r1, r0
 800a9d4:	4628      	mov	r0, r5
 800a9d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9da:	f000 b817 	b.w	800aa0c <_kill_r>
 800a9de:	2b01      	cmp	r3, #1
 800a9e0:	d00a      	beq.n	800a9f8 <_raise_r+0x4c>
 800a9e2:	1c59      	adds	r1, r3, #1
 800a9e4:	d103      	bne.n	800a9ee <_raise_r+0x42>
 800a9e6:	2316      	movs	r3, #22
 800a9e8:	6003      	str	r3, [r0, #0]
 800a9ea:	2001      	movs	r0, #1
 800a9ec:	e7e7      	b.n	800a9be <_raise_r+0x12>
 800a9ee:	2100      	movs	r1, #0
 800a9f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	4798      	blx	r3
 800a9f8:	2000      	movs	r0, #0
 800a9fa:	e7e0      	b.n	800a9be <_raise_r+0x12>

0800a9fc <raise>:
 800a9fc:	4b02      	ldr	r3, [pc, #8]	@ (800aa08 <raise+0xc>)
 800a9fe:	4601      	mov	r1, r0
 800aa00:	6818      	ldr	r0, [r3, #0]
 800aa02:	f7ff bfd3 	b.w	800a9ac <_raise_r>
 800aa06:	bf00      	nop
 800aa08:	20002f90 	.word	0x20002f90

0800aa0c <_kill_r>:
 800aa0c:	b538      	push	{r3, r4, r5, lr}
 800aa0e:	4d07      	ldr	r5, [pc, #28]	@ (800aa2c <_kill_r+0x20>)
 800aa10:	2300      	movs	r3, #0
 800aa12:	4604      	mov	r4, r0
 800aa14:	4608      	mov	r0, r1
 800aa16:	4611      	mov	r1, r2
 800aa18:	602b      	str	r3, [r5, #0]
 800aa1a:	f000 f813 	bl	800aa44 <_kill>
 800aa1e:	1c43      	adds	r3, r0, #1
 800aa20:	d102      	bne.n	800aa28 <_kill_r+0x1c>
 800aa22:	682b      	ldr	r3, [r5, #0]
 800aa24:	b103      	cbz	r3, 800aa28 <_kill_r+0x1c>
 800aa26:	6023      	str	r3, [r4, #0]
 800aa28:	bd38      	pop	{r3, r4, r5, pc}
 800aa2a:	bf00      	nop
 800aa2c:	20004de0 	.word	0x20004de0

0800aa30 <_getpid_r>:
 800aa30:	f000 b800 	b.w	800aa34 <_getpid>

0800aa34 <_getpid>:
 800aa34:	4b02      	ldr	r3, [pc, #8]	@ (800aa40 <_getpid+0xc>)
 800aa36:	2258      	movs	r2, #88	@ 0x58
 800aa38:	601a      	str	r2, [r3, #0]
 800aa3a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa3e:	4770      	bx	lr
 800aa40:	20004de0 	.word	0x20004de0

0800aa44 <_kill>:
 800aa44:	4b02      	ldr	r3, [pc, #8]	@ (800aa50 <_kill+0xc>)
 800aa46:	2258      	movs	r2, #88	@ 0x58
 800aa48:	601a      	str	r2, [r3, #0]
 800aa4a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa4e:	4770      	bx	lr
 800aa50:	20004de0 	.word	0x20004de0

0800aa54 <_exit>:
 800aa54:	e7fe      	b.n	800aa54 <_exit>
	...

0800aa58 <_init>:
 800aa58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa5a:	bf00      	nop
 800aa5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa5e:	bc08      	pop	{r3}
 800aa60:	469e      	mov	lr, r3
 800aa62:	4770      	bx	lr

0800aa64 <_fini>:
 800aa64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa66:	bf00      	nop
 800aa68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa6a:	bc08      	pop	{r3}
 800aa6c:	469e      	mov	lr, r3
 800aa6e:	4770      	bx	lr
