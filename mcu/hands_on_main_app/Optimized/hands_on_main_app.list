
hands_on_main_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aad4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012650  0800ac88  0800ac88  0000bc88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d2d8  0801d2d8  0002214c  2**0
                  CONTENTS
  4 .ARM          00000008  0801d2d8  0801d2d8  0001e2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d2e0  0801d2e0  0002214c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d2e0  0801d2e0  0001e2e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d2e4  0801d2e4  0001e2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000314c  20000000  0801d2e8  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c9c  2000314c  08020434  0002214c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004de8  08020434  00022de8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002214c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038c86  00000000  00000000  0002217c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006d4e  00000000  00000000  0005ae02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000103c1  00000000  00000000  00061b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001728  00000000  00000000  00071f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013cf  00000000  00000000  00073640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003047c  00000000  00000000  00074a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002f84b  00000000  00000000  000a4e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001218e9  00000000  00000000  000d46d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  001f5fbf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e7c  00000000  00000000  001f607c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  001faef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0000982c  00000000  00000000  001faf59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000012a0  00000000  00000000  00204785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000314c 	.word	0x2000314c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ac6c 	.word	0x0800ac6c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20003150 	.word	0x20003150
 80001ec:	0800ac6c 	.word	0x0800ac6c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b96a 	b.w	8000eb4 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	460c      	mov	r4, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14e      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c04:	4694      	mov	ip, r2
 8000c06:	458c      	cmp	ip, r1
 8000c08:	4686      	mov	lr, r0
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	d962      	bls.n	8000cd6 <__udivmoddi4+0xde>
 8000c10:	b14a      	cbz	r2, 8000c26 <__udivmoddi4+0x2e>
 8000c12:	f1c2 0320 	rsb	r3, r2, #32
 8000c16:	4091      	lsls	r1, r2
 8000c18:	fa20 f303 	lsr.w	r3, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	4319      	orrs	r1, r3
 8000c22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f f68c 	uxth.w	r6, ip
 8000c2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c36:	fb07 1114 	mls	r1, r7, r4, r1
 8000c3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c3e:	fb04 f106 	mul.w	r1, r4, r6
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c4e:	f080 8112 	bcs.w	8000e76 <__udivmoddi4+0x27e>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 810f 	bls.w	8000e76 <__udivmoddi4+0x27e>
 8000c58:	3c02      	subs	r4, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a59      	subs	r1, r3, r1
 8000c5e:	fa1f f38e 	uxth.w	r3, lr
 8000c62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c66:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb00 f606 	mul.w	r6, r0, r6
 8000c72:	429e      	cmp	r6, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x94>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c7e:	f080 80fc 	bcs.w	8000e7a <__udivmoddi4+0x282>
 8000c82:	429e      	cmp	r6, r3
 8000c84:	f240 80f9 	bls.w	8000e7a <__udivmoddi4+0x282>
 8000c88:	4463      	add	r3, ip
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	1b9b      	subs	r3, r3, r6
 8000c8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c92:	2100      	movs	r1, #0
 8000c94:	b11d      	cbz	r5, 8000c9e <__udivmoddi4+0xa6>
 8000c96:	40d3      	lsrs	r3, r2
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d905      	bls.n	8000cb2 <__udivmoddi4+0xba>
 8000ca6:	b10d      	cbz	r5, 8000cac <__udivmoddi4+0xb4>
 8000ca8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cac:	2100      	movs	r1, #0
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e7f5      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d146      	bne.n	8000d48 <__udivmoddi4+0x150>
 8000cba:	42a3      	cmp	r3, r4
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xcc>
 8000cbe:	4290      	cmp	r0, r2
 8000cc0:	f0c0 80f0 	bcc.w	8000ea4 <__udivmoddi4+0x2ac>
 8000cc4:	1a86      	subs	r6, r0, r2
 8000cc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	2d00      	cmp	r5, #0
 8000cce:	d0e6      	beq.n	8000c9e <__udivmoddi4+0xa6>
 8000cd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cd4:	e7e3      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x204>
 8000cdc:	eba1 040c 	sub.w	r4, r1, ip
 8000ce0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ce4:	fa1f f78c 	uxth.w	r7, ip
 8000ce8:	2101      	movs	r1, #1
 8000cea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cf6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cfa:	fb07 f006 	mul.w	r0, r7, r6
 8000cfe:	4298      	cmp	r0, r3
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x11c>
 8000d02:	eb1c 0303 	adds.w	r3, ip, r3
 8000d06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x11a>
 8000d0c:	4298      	cmp	r0, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2b4>
 8000d12:	4626      	mov	r6, r4
 8000d14:	1a1c      	subs	r4, r3, r0
 8000d16:	fa1f f38e 	uxth.w	r3, lr
 8000d1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb00 f707 	mul.w	r7, r0, r7
 8000d2a:	429f      	cmp	r7, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x148>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x146>
 8000d38:	429f      	cmp	r7, r3
 8000d3a:	f200 80b0 	bhi.w	8000e9e <__udivmoddi4+0x2a6>
 8000d3e:	4620      	mov	r0, r4
 8000d40:	1bdb      	subs	r3, r3, r7
 8000d42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d46:	e7a5      	b.n	8000c94 <__udivmoddi4+0x9c>
 8000d48:	f1c1 0620 	rsb	r6, r1, #32
 8000d4c:	408b      	lsls	r3, r1
 8000d4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d52:	431f      	orrs	r7, r3
 8000d54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d58:	fa04 f301 	lsl.w	r3, r4, r1
 8000d5c:	ea43 030c 	orr.w	r3, r3, ip
 8000d60:	40f4      	lsrs	r4, r6
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	0c38      	lsrs	r0, r7, #16
 8000d68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d70:	fa1f fc87 	uxth.w	ip, r7
 8000d74:	fb00 441e 	mls	r4, r0, lr, r4
 8000d78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d80:	45a1      	cmp	r9, r4
 8000d82:	fa02 f201 	lsl.w	r2, r2, r1
 8000d86:	d90a      	bls.n	8000d9e <__udivmoddi4+0x1a6>
 8000d88:	193c      	adds	r4, r7, r4
 8000d8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d8e:	f080 8084 	bcs.w	8000e9a <__udivmoddi4+0x2a2>
 8000d92:	45a1      	cmp	r9, r4
 8000d94:	f240 8081 	bls.w	8000e9a <__udivmoddi4+0x2a2>
 8000d98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	eba4 0409 	sub.w	r4, r4, r9
 8000da2:	fa1f f983 	uxth.w	r9, r3
 8000da6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000daa:	fb00 4413 	mls	r4, r0, r3, r4
 8000dae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db6:	45a4      	cmp	ip, r4
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x1d2>
 8000dba:	193c      	adds	r4, r7, r4
 8000dbc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dc0:	d267      	bcs.n	8000e92 <__udivmoddi4+0x29a>
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d965      	bls.n	8000e92 <__udivmoddi4+0x29a>
 8000dc6:	3b02      	subs	r3, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dce:	fba0 9302 	umull	r9, r3, r0, r2
 8000dd2:	eba4 040c 	sub.w	r4, r4, ip
 8000dd6:	429c      	cmp	r4, r3
 8000dd8:	46ce      	mov	lr, r9
 8000dda:	469c      	mov	ip, r3
 8000ddc:	d351      	bcc.n	8000e82 <__udivmoddi4+0x28a>
 8000dde:	d04e      	beq.n	8000e7e <__udivmoddi4+0x286>
 8000de0:	b155      	cbz	r5, 8000df8 <__udivmoddi4+0x200>
 8000de2:	ebb8 030e 	subs.w	r3, r8, lr
 8000de6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dea:	fa04 f606 	lsl.w	r6, r4, r6
 8000dee:	40cb      	lsrs	r3, r1
 8000df0:	431e      	orrs	r6, r3
 8000df2:	40cc      	lsrs	r4, r1
 8000df4:	e9c5 6400 	strd	r6, r4, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e750      	b.n	8000c9e <__udivmoddi4+0xa6>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f103 	lsr.w	r1, r0, r3
 8000e04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e08:	fa24 f303 	lsr.w	r3, r4, r3
 8000e0c:	4094      	lsls	r4, r2
 8000e0e:	430c      	orrs	r4, r1
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e18:	fa1f f78c 	uxth.w	r7, ip
 8000e1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e20:	fb08 3110 	mls	r1, r8, r0, r3
 8000e24:	0c23      	lsrs	r3, r4, #16
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb00 f107 	mul.w	r1, r0, r7
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x24c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e3a:	d22c      	bcs.n	8000e96 <__udivmoddi4+0x29e>
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d92a      	bls.n	8000e96 <__udivmoddi4+0x29e>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4463      	add	r3, ip
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb01 f307 	mul.w	r3, r1, r7
 8000e58:	42a3      	cmp	r3, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x276>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e64:	d213      	bcs.n	8000e8e <__udivmoddi4+0x296>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d911      	bls.n	8000e8e <__udivmoddi4+0x296>
 8000e6a:	3902      	subs	r1, #2
 8000e6c:	4464      	add	r4, ip
 8000e6e:	1ae4      	subs	r4, r4, r3
 8000e70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e74:	e739      	b.n	8000cea <__udivmoddi4+0xf2>
 8000e76:	4604      	mov	r4, r0
 8000e78:	e6f0      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e706      	b.n	8000c8c <__udivmoddi4+0x94>
 8000e7e:	45c8      	cmp	r8, r9
 8000e80:	d2ae      	bcs.n	8000de0 <__udivmoddi4+0x1e8>
 8000e82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	e7a8      	b.n	8000de0 <__udivmoddi4+0x1e8>
 8000e8e:	4631      	mov	r1, r6
 8000e90:	e7ed      	b.n	8000e6e <__udivmoddi4+0x276>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e799      	b.n	8000dca <__udivmoddi4+0x1d2>
 8000e96:	4630      	mov	r0, r6
 8000e98:	e7d4      	b.n	8000e44 <__udivmoddi4+0x24c>
 8000e9a:	46d6      	mov	lr, sl
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1a6>
 8000e9e:	4463      	add	r3, ip
 8000ea0:	3802      	subs	r0, #2
 8000ea2:	e74d      	b.n	8000d40 <__udivmoddi4+0x148>
 8000ea4:	4606      	mov	r6, r0
 8000ea6:	4623      	mov	r3, r4
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e70f      	b.n	8000ccc <__udivmoddi4+0xd4>
 8000eac:	3e02      	subs	r6, #2
 8000eae:	4463      	add	r3, ip
 8000eb0:	e730      	b.n	8000d14 <__udivmoddi4+0x11c>
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000eb8:	b500      	push	{lr}
 8000eba:	b08b      	sub	sp, #44	@ 0x2c

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	9307      	str	r3, [sp, #28]
 8000ec0:	9308      	str	r3, [sp, #32]
 8000ec2:	9309      	str	r3, [sp, #36]	@ 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec4:	9301      	str	r3, [sp, #4]
 8000ec6:	9302      	str	r3, [sp, #8]
 8000ec8:	9303      	str	r3, [sp, #12]
 8000eca:	9304      	str	r3, [sp, #16]
 8000ecc:	9305      	str	r3, [sp, #20]
 8000ece:	9306      	str	r3, [sp, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ed0:	4821      	ldr	r0, [pc, #132]	@ (8000f58 <MX_ADC1_Init+0xa0>)
 8000ed2:	4a22      	ldr	r2, [pc, #136]	@ (8000f5c <MX_ADC1_Init+0xa4>)
 8000ed4:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000ed6:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8000eda:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000edc:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ede:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ee0:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee2:	2204      	movs	r2, #4
 8000ee4:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ee6:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ee8:	7643      	strb	r3, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000eea:	2201      	movs	r2, #1
 8000eec:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eee:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8000ef2:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8000ef6:	6281      	str	r1, [r0, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000ef8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000efc:	62c1      	str	r1, [r0, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000efe:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f02:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f04:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f08:	f002 fb00 	bl	800350c <HAL_ADC_Init>
 8000f0c:	b9d0      	cbnz	r0, 8000f44 <MX_ADC1_Init+0x8c>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	9307      	str	r3, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f12:	a907      	add	r1, sp, #28
 8000f14:	4810      	ldr	r0, [pc, #64]	@ (8000f58 <MX_ADC1_Init+0xa0>)
 8000f16:	f003 f911 	bl	800413c <HAL_ADCEx_MultiModeConfigChannel>
 8000f1a:	b9b0      	cbnz	r0, 8000f4a <MX_ADC1_Init+0x92>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f1c:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <MX_ADC1_Init+0xa8>)
 8000f1e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f20:	2306      	movs	r3, #6
 8000f22:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f24:	2300      	movs	r3, #0
 8000f26:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f28:	227f      	movs	r2, #127	@ 0x7f
 8000f2a:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 8000f30:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f32:	eb0d 0102 	add.w	r1, sp, r2
 8000f36:	4808      	ldr	r0, [pc, #32]	@ (8000f58 <MX_ADC1_Init+0xa0>)
 8000f38:	f002 fc30 	bl	800379c <HAL_ADC_ConfigChannel>
 8000f3c:	b940      	cbnz	r0, 8000f50 <MX_ADC1_Init+0x98>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f3e:	b00b      	add	sp, #44	@ 0x2c
 8000f40:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f44:	f000 fd3a 	bl	80019bc <Error_Handler>
 8000f48:	e7e1      	b.n	8000f0e <MX_ADC1_Init+0x56>
    Error_Handler();
 8000f4a:	f000 fd37 	bl	80019bc <Error_Handler>
 8000f4e:	e7e5      	b.n	8000f1c <MX_ADC1_Init+0x64>
    Error_Handler();
 8000f50:	f000 fd34 	bl	80019bc <Error_Handler>
}
 8000f54:	e7f3      	b.n	8000f3e <MX_ADC1_Init+0x86>
 8000f56:	bf00      	nop
 8000f58:	200031b0 	.word	0x200031b0
 8000f5c:	50040000 	.word	0x50040000
 8000f60:	14f00020 	.word	0x14f00020

08000f64 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f64:	b530      	push	{r4, r5, lr}
 8000f66:	b0ab      	sub	sp, #172	@ 0xac
 8000f68:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	9125      	str	r1, [sp, #148]	@ 0x94
 8000f6e:	9126      	str	r1, [sp, #152]	@ 0x98
 8000f70:	9127      	str	r1, [sp, #156]	@ 0x9c
 8000f72:	9128      	str	r1, [sp, #160]	@ 0xa0
 8000f74:	9129      	str	r1, [sp, #164]	@ 0xa4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f76:	228c      	movs	r2, #140	@ 0x8c
 8000f78:	a802      	add	r0, sp, #8
 8000f7a:	f007 ffd7 	bl	8008f2c <memset>
  if(adcHandle->Instance==ADC1)
 8000f7e:	6822      	ldr	r2, [r4, #0]
 8000f80:	4b25      	ldr	r3, [pc, #148]	@ (8001018 <HAL_ADC_MspInit+0xb4>)
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d001      	beq.n	8000f8a <HAL_ADC_MspInit+0x26>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f86:	b02b      	add	sp, #172	@ 0xac
 8000f88:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f8a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f8e:	9302      	str	r3, [sp, #8]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000f90:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8000f94:	9321      	str	r3, [sp, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f96:	a802      	add	r0, sp, #8
 8000f98:	f004 fa8e 	bl	80054b8 <HAL_RCCEx_PeriphCLKConfig>
 8000f9c:	2800      	cmp	r0, #0
 8000f9e:	d135      	bne.n	800100c <HAL_ADC_MspInit+0xa8>
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	@ (800101c <HAL_ADC_MspInit+0xb8>)
 8000fa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fa4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000fa8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000faa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fac:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8000fb0:	9200      	str	r2, [sp, #0]
 8000fb2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fb6:	f042 0201 	orr.w	r2, r2, #1
 8000fba:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	9301      	str	r3, [sp, #4]
 8000fc4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	9325      	str	r3, [sp, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	9326      	str	r3, [sp, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2500      	movs	r5, #0
 8000fd0:	9527      	str	r5, [sp, #156]	@ 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	a925      	add	r1, sp, #148	@ 0x94
 8000fd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fd8:	f003 faf0 	bl	80045bc <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8000fdc:	4810      	ldr	r0, [pc, #64]	@ (8001020 <HAL_ADC_MspInit+0xbc>)
 8000fde:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <HAL_ADC_MspInit+0xc0>)
 8000fe0:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000fe2:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fe4:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fe6:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fe8:	2380      	movs	r3, #128	@ 0x80
 8000fea:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ff0:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ff2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ff6:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ff8:	2320      	movs	r3, #32
 8000ffa:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ffc:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ffe:	f003 f985 	bl	800430c <HAL_DMA_Init>
 8001002:	b930      	cbnz	r0, 8001012 <HAL_ADC_MspInit+0xae>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <HAL_ADC_MspInit+0xbc>)
 8001006:	6523      	str	r3, [r4, #80]	@ 0x50
 8001008:	629c      	str	r4, [r3, #40]	@ 0x28
}
 800100a:	e7bc      	b.n	8000f86 <HAL_ADC_MspInit+0x22>
      Error_Handler();
 800100c:	f000 fcd6 	bl	80019bc <Error_Handler>
 8001010:	e7c6      	b.n	8000fa0 <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 8001012:	f000 fcd3 	bl	80019bc <Error_Handler>
 8001016:	e7f5      	b.n	8001004 <HAL_ADC_MspInit+0xa0>
 8001018:	50040000 	.word	0x50040000
 800101c:	40021000 	.word	0x40021000
 8001020:	20003168 	.word	0x20003168
 8001024:	40020008 	.word	0x40020008

08001028 <send_spectrogram>:
		DEBUG_PRINT("Packet counter overflow.\r\n");
		Error_Handler();
	}
}

static void send_spectrogram() {
 8001028:	b510      	push	{r4, lr}
 800102a:	f5ad 7d4e 	sub.w	sp, sp, #824	@ 0x338
	for (size_t i=0; i<N_MELVECS; i++) {
 800102e:	4919      	ldr	r1, [pc, #100]	@ (8001094 <send_spectrogram+0x6c>)
 8001030:	466b      	mov	r3, sp
 8001032:	acc8      	add	r4, sp, #800	@ 0x320
static void send_spectrogram() {
 8001034:	461a      	mov	r2, r3
 8001036:	4608      	mov	r0, r1
 8001038:	3328      	adds	r3, #40	@ 0x28
			(packet+PACKET_HEADER_LENGTH)[(i*MELVEC_LENGTH+j)*2]   = mel_vectors[i][j] >> 8;
 800103a:	f930 cf02 	ldrsh.w	ip, [r0, #2]!
 800103e:	ea4f 2e2c 	mov.w	lr, ip, asr #8
 8001042:	f882 e008 	strb.w	lr, [r2, #8]
			(packet+PACKET_HEADER_LENGTH)[(i*MELVEC_LENGTH+j)*2+1] = mel_vectors[i][j] & 0xFF;
 8001046:	f882 c009 	strb.w	ip, [r2, #9]
		for (size_t j=0; j<MELVEC_LENGTH; j++) {
 800104a:	3202      	adds	r2, #2
 800104c:	429a      	cmp	r2, r3
 800104e:	d1f4      	bne.n	800103a <send_spectrogram+0x12>
	for (size_t i=0; i<N_MELVECS; i++) {
 8001050:	3128      	adds	r1, #40	@ 0x28
 8001052:	429c      	cmp	r4, r3
 8001054:	d1ee      	bne.n	8001034 <send_spectrogram+0xc>
	make_packet(packet, PAYLOAD_LENGTH, 0, *packet_cnt);
 8001056:	4c10      	ldr	r4, [pc, #64]	@ (8001098 <send_spectrogram+0x70>)
 8001058:	6823      	ldr	r3, [r4, #0]
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001060:	4668      	mov	r0, sp
 8001062:	f000 fdbd 	bl	8001be0 <make_packet>
	*packet_cnt += 1;
 8001066:	6823      	ldr	r3, [r4, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	6023      	str	r3, [r4, #0]
	if (*packet_cnt == 0) {
 800106c:	b163      	cbz	r3, 8001088 <send_spectrogram+0x60>
//	start_cycle_count();
	encode_packet(packet, &packet_cnt);
//	stop_cycle_count("Encode packet");

//	start_cycle_count();
	S2LP_Send(packet, PACKET_LENGTH);
 800106e:	f44f 714e 	mov.w	r1, #824	@ 0x338
 8001072:	4668      	mov	r0, sp
 8001074:	f000 ff3a 	bl	8001eec <S2LP_Send>
//	stop_cycle_count("Radio WFI");

	start_cycle_count();
 8001078:	f002 f986 	bl	8003388 <start_cycle_count>
	stop_cycle_count("Send packet");
 800107c:	4807      	ldr	r0, [pc, #28]	@ (800109c <send_spectrogram+0x74>)
 800107e:	f002 f9a3 	bl	80033c8 <stop_cycle_count>

//	print_encoded_packet(packet);
}
 8001082:	f50d 7d4e 	add.w	sp, sp, #824	@ 0x338
 8001086:	bd10      	pop	{r4, pc}
		DEBUG_PRINT("Packet counter overflow.\r\n");
 8001088:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <send_spectrogram+0x78>)
 800108a:	f007 fdbb 	bl	8008c04 <puts>
		Error_Handler();
 800108e:	f000 fc95 	bl	80019bc <Error_Handler>
 8001092:	e7ec      	b.n	800106e <send_spectrogram+0x46>
 8001094:	2000321e 	.word	0x2000321e
 8001098:	2000321c 	.word	0x2000321c
 800109c:	0800af48 	.word	0x0800af48
 80010a0:	0800af2c 	.word	0x0800af2c

080010a4 <ADC_Callback>:

static void ADC_Callback(int buf_cplt) {
 80010a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a6:	4604      	mov	r4, r0
	if (rem_n_bufs != -1) {
 80010a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001120 <ADC_Callback+0x7c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b0:	d003      	beq.n	80010ba <ADC_Callback+0x16>
		rem_n_bufs--;
 80010b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001120 <ADC_Callback+0x7c>)
 80010b4:	6813      	ldr	r3, [r2, #0]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	6013      	str	r3, [r2, #0]
	}
	if (rem_n_bufs == 0) {
 80010ba:	4b19      	ldr	r3, [pc, #100]	@ (8001120 <ADC_Callback+0x7c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	b30b      	cbz	r3, 8001104 <ADC_Callback+0x60>
		StopADCAcq();
	} else if (ADCDataRdy[1-buf_cplt]) {
 80010c0:	f1c4 0301 	rsb	r3, r4, #1
 80010c4:	4a17      	ldr	r2, [pc, #92]	@ (8001124 <ADC_Callback+0x80>)
 80010c6:	5cd3      	ldrb	r3, [r2, r3]
 80010c8:	bb03      	cbnz	r3, 800110c <ADC_Callback+0x68>
		DEBUG_PRINT("Error: ADC Data buffer full\r\n");
		Error_Handler();
	}
	ADCDataRdy[buf_cplt] = 1;
 80010ca:	4e16      	ldr	r6, [pc, #88]	@ (8001124 <ADC_Callback+0x80>)
 80010cc:	2301      	movs	r3, #1
 80010ce:	5533      	strb	r3, [r6, r4]
	Spectrogram_Format((q15_t *)ADCData[buf_cplt]);
 80010d0:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <ADC_Callback+0x84>)
 80010d2:	f853 7024 	ldr.w	r7, [r3, r4, lsl #2]
 80010d6:	4638      	mov	r0, r7
 80010d8:	f001 fee2 	bl	8002ea0 <Spectrogram_Format>
	Spectrogram_Compute((q15_t *)ADCData[buf_cplt], mel_vectors[cur_melvec]);
 80010dc:	4d13      	ldr	r5, [pc, #76]	@ (800112c <ADC_Callback+0x88>)
 80010de:	7829      	ldrb	r1, [r5, #0]
 80010e0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <ADC_Callback+0x8c>)
 80010e6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80010ea:	4638      	mov	r0, r7
 80010ec:	f001 fefa 	bl	8002ee4 <Spectrogram_Compute>
	cur_melvec++;
 80010f0:	782b      	ldrb	r3, [r5, #0]
 80010f2:	3301      	adds	r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	702b      	strb	r3, [r5, #0]
	ADCDataRdy[buf_cplt] = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	5533      	strb	r3, [r6, r4]

	if (rem_n_bufs == 0) {
 80010fc:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <ADC_Callback+0x7c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	b153      	cbz	r3, 8001118 <ADC_Callback+0x74>
//		print_spectrogram();
//		stop_cycle_count("Total FV");
		send_spectrogram();
	}
}
 8001102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	HAL_ADC_Stop_DMA(&hadc1);
 8001104:	480b      	ldr	r0, [pc, #44]	@ (8001134 <ADC_Callback+0x90>)
 8001106:	f002 ff88 	bl	800401a <HAL_ADC_Stop_DMA>
}
 800110a:	e7de      	b.n	80010ca <ADC_Callback+0x26>
		DEBUG_PRINT("Error: ADC Data buffer full\r\n");
 800110c:	480a      	ldr	r0, [pc, #40]	@ (8001138 <ADC_Callback+0x94>)
 800110e:	f007 fd79 	bl	8008c04 <puts>
		Error_Handler();
 8001112:	f000 fc53 	bl	80019bc <Error_Handler>
 8001116:	e7d8      	b.n	80010ca <ADC_Callback+0x26>
		send_spectrogram();
 8001118:	f7ff ff86 	bl	8001028 <send_spectrogram>
}
 800111c:	e7f1      	b.n	8001102 <ADC_Callback+0x5e>
 800111e:	bf00      	nop
 8001120:	20003218 	.word	0x20003218
 8001124:	20003544 	.word	0x20003544
 8001128:	0800af74 	.word	0x0800af74
 800112c:	20003540 	.word	0x20003540
 8001130:	20003220 	.word	0x20003220
 8001134:	200031b0 	.word	0x200031b0
 8001138:	0800af54 	.word	0x0800af54

0800113c <StartADCAcq>:
int StartADCAcq(int32_t n_bufs) {
 800113c:	b508      	push	{r3, lr}
	rem_n_bufs = n_bufs;
 800113e:	4b07      	ldr	r3, [pc, #28]	@ (800115c <StartADCAcq+0x20>)
 8001140:	6018      	str	r0, [r3, #0]
	cur_melvec = 0;
 8001142:	4a07      	ldr	r2, [pc, #28]	@ (8001160 <StartADCAcq+0x24>)
 8001144:	2100      	movs	r1, #0
 8001146:	7011      	strb	r1, [r2, #0]
	if (rem_n_bufs != 0) {
 8001148:	6818      	ldr	r0, [r3, #0]
 800114a:	b900      	cbnz	r0, 800114e <StartADCAcq+0x12>
}
 800114c:	bd08      	pop	{r3, pc}
		return HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADCDoubleBuf, 2*ADC_BUF_SIZE);
 800114e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001152:	4904      	ldr	r1, [pc, #16]	@ (8001164 <StartADCAcq+0x28>)
 8001154:	4804      	ldr	r0, [pc, #16]	@ (8001168 <StartADCAcq+0x2c>)
 8001156:	f002 fe8f 	bl	8003e78 <HAL_ADC_Start_DMA>
 800115a:	e7f7      	b.n	800114c <StartADCAcq+0x10>
 800115c:	20003218 	.word	0x20003218
 8001160:	20003540 	.word	0x20003540
 8001164:	20003548 	.word	0x20003548
 8001168:	200031b0 	.word	0x200031b0

0800116c <IsADCFinished>:
	return (rem_n_bufs == 0);
 800116c:	4b02      	ldr	r3, [pc, #8]	@ (8001178 <IsADCFinished+0xc>)
 800116e:	6818      	ldr	r0, [r3, #0]
}
 8001170:	fab0 f080 	clz	r0, r0
 8001174:	0940      	lsrs	r0, r0, #5
 8001176:	4770      	bx	lr
 8001178:	20003218 	.word	0x20003218

0800117c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800117c:	b508      	push	{r3, lr}
	ADC_Callback(1);
 800117e:	2001      	movs	r0, #1
 8001180:	f7ff ff90 	bl	80010a4 <ADC_Callback>
}
 8001184:	bd08      	pop	{r3, pc}

08001186 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001186:	b508      	push	{r3, lr}
	ADC_Callback(0);
 8001188:	2000      	movs	r0, #0
 800118a:	f7ff ff8b 	bl	80010a4 <ADC_Callback>
}
 800118e:	bd08      	pop	{r3, pc}

08001190 <mul>:

word8 mul(word8 a, word8 b) {
  /* multiply two elements of GF(256)
   * required for MixColumns and InvMixColumns
   */
  if (a && b)
 8001190:	4603      	mov	r3, r0
 8001192:	b178      	cbz	r0, 80011b4 <mul+0x24>
 8001194:	b179      	cbz	r1, 80011b6 <mul+0x26>
    return Alogtable[(Logtable[a] + Logtable[b]) % 255];
 8001196:	4809      	ldr	r0, [pc, #36]	@ (80011bc <mul+0x2c>)
 8001198:	5cc2      	ldrb	r2, [r0, r3]
 800119a:	5c43      	ldrb	r3, [r0, r1]
 800119c:	441a      	add	r2, r3
 800119e:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <mul+0x30>)
 80011a0:	fb83 1302 	smull	r1, r3, r3, r2
 80011a4:	4413      	add	r3, r2
 80011a6:	11db      	asrs	r3, r3, #7
 80011a8:	ebc3 2303 	rsb	r3, r3, r3, lsl #8
 80011ac:	1ad2      	subs	r2, r2, r3
 80011ae:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <mul+0x34>)
 80011b0:	5c98      	ldrb	r0, [r3, r2]
 80011b2:	4770      	bx	lr
 80011b4:	4770      	bx	lr
  else
    return 0;
 80011b6:	4608      	mov	r0, r1
}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	20000278 	.word	0x20000278
 80011c0:	80808081 	.word	0x80808081
 80011c4:	20000178 	.word	0x20000178

080011c8 <AddRoundKey>:
void AddRoundKey(word8 a[4][MAXBC], word8 rk[4][MAXBC]) {
 80011c8:	b510      	push	{r4, lr}
  /* XOR corresponding text input and round key input bytes
   */
  int i, j;
  for (i = 0; i < 4; i++)
 80011ca:	3901      	subs	r1, #1
 80011cc:	f100 0c03 	add.w	ip, r0, #3
 80011d0:	f100 0423 	add.w	r4, r0, #35	@ 0x23
    for (j = 0; j < BC; j++)
 80011d4:	f1ac 0304 	sub.w	r3, ip, #4
void AddRoundKey(word8 a[4][MAXBC], word8 rk[4][MAXBC]) {
 80011d8:	4608      	mov	r0, r1
      a[i][j] ^= rk[i][j];
 80011da:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80011de:	f810 ef01 	ldrb.w	lr, [r0, #1]!
 80011e2:	ea82 020e 	eor.w	r2, r2, lr
 80011e6:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < BC; j++)
 80011e8:	4563      	cmp	r3, ip
 80011ea:	d1f6      	bne.n	80011da <AddRoundKey+0x12>
  for (i = 0; i < 4; i++)
 80011ec:	3108      	adds	r1, #8
 80011ee:	f10c 0c08 	add.w	ip, ip, #8
 80011f2:	45a4      	cmp	ip, r4
 80011f4:	d1ee      	bne.n	80011d4 <AddRoundKey+0xc>
}
 80011f6:	bd10      	pop	{r4, pc}

080011f8 <SubBytes>:
void SubBytes(word8 a[4][MAXBC], word8 box[256]) {
  /* Replace every byte of the input by the byte at that place
   * in the non-linear S-box
   */
  int i, j;
  for (i = 0; i < 4; i++)
 80011f8:	1cc2      	adds	r2, r0, #3
 80011fa:	f100 0c23 	add.w	ip, r0, #35	@ 0x23
    for (j = 0; j < BC; j++)
 80011fe:	1f13      	subs	r3, r2, #4
      a[i][j] = box[a[i][j]];
 8001200:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8001204:	5c08      	ldrb	r0, [r1, r0]
 8001206:	7018      	strb	r0, [r3, #0]
    for (j = 0; j < BC; j++)
 8001208:	4293      	cmp	r3, r2
 800120a:	d1f9      	bne.n	8001200 <SubBytes+0x8>
  for (i = 0; i < 4; i++)
 800120c:	3208      	adds	r2, #8
 800120e:	4562      	cmp	r2, ip
 8001210:	d1f5      	bne.n	80011fe <SubBytes+0x6>
}
 8001212:	4770      	bx	lr

08001214 <ShiftRows>:

void ShiftRows(word8 a[4][MAXBC], word8 d) {
 8001214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001216:	b083      	sub	sp, #12
  /* Row 0 remains unchanged
   * The other three rows are shifted a variable amount
   */
  word8 tmp[MAXBC];
  int i, j;
  if (d == 0) {
 8001218:	b361      	cbz	r1, 8001274 <ShiftRows+0x60>
 800121a:	4e2c      	ldr	r6, [pc, #176]	@ (80012cc <ShiftRows+0xb8>)
 800121c:	f100 0508 	add.w	r5, r0, #8
 8001220:	3020      	adds	r0, #32
 8001222:	ac01      	add	r4, sp, #4
        a[i][j] = tmp[j];
    }
  } else {
    for (i = 1; i < 4; i++) {
      for (j = 0; j < BC; j++)
        tmp[j] = a[i][(BC + j - shifts[BC - 4][i]) % BC];
 8001224:	46ae      	mov	lr, r5
 8001226:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800122a:	f1c3 0304 	rsb	r3, r3, #4
 800122e:	46ec      	mov	ip, sp
 8001230:	4259      	negs	r1, r3
 8001232:	f003 0203 	and.w	r2, r3, #3
 8001236:	f001 0103 	and.w	r1, r1, #3
 800123a:	bf58      	it	pl
 800123c:	424a      	negpl	r2, r1
 800123e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8001242:	f80c 2b01 	strb.w	r2, [ip], #1
      for (j = 0; j < BC; j++)
 8001246:	3301      	adds	r3, #1
 8001248:	4564      	cmp	r4, ip
 800124a:	d1f1      	bne.n	8001230 <ShiftRows+0x1c>
      for (j = 0; j < BC; j++)
        a[i][j] = tmp[j];
 800124c:	f89d 3000 	ldrb.w	r3, [sp]
 8001250:	f88e 3000 	strb.w	r3, [lr]
 8001254:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8001258:	f88e 3001 	strb.w	r3, [lr, #1]
 800125c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001260:	f88e 3002 	strb.w	r3, [lr, #2]
 8001264:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001268:	f88e 3003 	strb.w	r3, [lr, #3]
    for (i = 1; i < 4; i++) {
 800126c:	3508      	adds	r5, #8
 800126e:	4285      	cmp	r5, r0
 8001270:	d1d8      	bne.n	8001224 <ShiftRows+0x10>
 8001272:	e029      	b.n	80012c8 <ShiftRows+0xb4>
 8001274:	4e15      	ldr	r6, [pc, #84]	@ (80012cc <ShiftRows+0xb8>)
 8001276:	f100 0508 	add.w	r5, r0, #8
 800127a:	f100 0e20 	add.w	lr, r0, #32
 800127e:	466f      	mov	r7, sp
 8001280:	ac01      	add	r4, sp, #4
        tmp[j] = a[i][(j + shifts[BC - 4][i]) % BC];
 8001282:	4628      	mov	r0, r5
 8001284:	f816 cf01 	ldrb.w	ip, [r6, #1]!
 8001288:	463a      	mov	r2, r7
 800128a:	ebac 0c07 	sub.w	ip, ip, r7
 800128e:	eb0c 0302 	add.w	r3, ip, r2
 8001292:	4259      	negs	r1, r3
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	f001 0103 	and.w	r1, r1, #3
 800129c:	bf58      	it	pl
 800129e:	424b      	negpl	r3, r1
 80012a0:	5cc3      	ldrb	r3, [r0, r3]
 80012a2:	f802 3b01 	strb.w	r3, [r2], #1
      for (j = 0; j < BC; j++)
 80012a6:	4294      	cmp	r4, r2
 80012a8:	d1f1      	bne.n	800128e <ShiftRows+0x7a>
        a[i][j] = tmp[j];
 80012aa:	f89d 3000 	ldrb.w	r3, [sp]
 80012ae:	7003      	strb	r3, [r0, #0]
 80012b0:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80012b4:	7043      	strb	r3, [r0, #1]
 80012b6:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80012ba:	7083      	strb	r3, [r0, #2]
 80012bc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80012c0:	70c3      	strb	r3, [r0, #3]
    for (i = 1; i < 4; i++) {
 80012c2:	3508      	adds	r5, #8
 80012c4:	4575      	cmp	r5, lr
 80012c6:	d1dc      	bne.n	8001282 <ShiftRows+0x6e>
    }
  }
}
 80012c8:	b003      	add	sp, #12
 80012ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012cc:	0800af7c 	.word	0x0800af7c

080012d0 <MixColumns>:
void MixColumns(word8 a[4][MAXBC]) {
 80012d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012d4:	b089      	sub	sp, #36	@ 0x24
 80012d6:	4606      	mov	r6, r0
  /* Mix the four bytes of every column in a linear way
   */
  word8 b[4][MAXBC];
  int i, j;
  for (j = 0; j < BC; j++)
 80012d8:	f04f 0800 	mov.w	r8, #0
    for (i = 0; i < 4; i++)
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 80012dc:	f04f 0a02 	mov.w	sl, #2
 80012e0:	f04f 0903 	mov.w	r9, #3
    for (i = 0; i < 4; i++)
 80012e4:	4647      	mov	r7, r8
 80012e6:	2400      	movs	r4, #0
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 80012e8:	5df1      	ldrb	r1, [r6, r7]
 80012ea:	4650      	mov	r0, sl
 80012ec:	f7ff ff50 	bl	8001190 <mul>
 80012f0:	4605      	mov	r5, r0
 80012f2:	46a3      	mov	fp, r4
 80012f4:	3401      	adds	r4, #1
 80012f6:	4262      	negs	r2, r4
 80012f8:	f004 0303 	and.w	r3, r4, #3
 80012fc:	f002 0203 	and.w	r2, r2, #3
 8001300:	bf58      	it	pl
 8001302:	4253      	negpl	r3, r2
 8001304:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8001308:	f813 1008 	ldrb.w	r1, [r3, r8]
 800130c:	4648      	mov	r0, r9
 800130e:	f7ff ff3f 	bl	8001190 <mul>
                a[(i + 2) % 4][j] ^ a[(i + 3) % 4][j];
 8001312:	f10b 0302 	add.w	r3, fp, #2
 8001316:	425a      	negs	r2, r3
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	f002 0203 	and.w	r2, r2, #3
 8001320:	bf58      	it	pl
 8001322:	4253      	negpl	r3, r2
 8001324:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8001328:	f10b 0303 	add.w	r3, fp, #3
 800132c:	4259      	negs	r1, r3
 800132e:	f003 0303 	and.w	r3, r3, #3
 8001332:	f001 0103 	and.w	r1, r1, #3
 8001336:	bf58      	it	pl
 8001338:	424b      	negpl	r3, r1
 800133a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
      b[i][j] = mul(2, a[i][j]) ^ mul(3, a[(i + 1) % 4][j]) ^
 800133e:	f812 2008 	ldrb.w	r2, [r2, r8]
 8001342:	f813 3008 	ldrb.w	r3, [r3, r8]
 8001346:	4053      	eors	r3, r2
 8001348:	405d      	eors	r5, r3
 800134a:	4068      	eors	r0, r5
 800134c:	f80d 0007 	strb.w	r0, [sp, r7]
    for (i = 0; i < 4; i++)
 8001350:	3708      	adds	r7, #8
 8001352:	2c04      	cmp	r4, #4
 8001354:	d1c8      	bne.n	80012e8 <MixColumns+0x18>
  for (j = 0; j < BC; j++)
 8001356:	f108 0801 	add.w	r8, r8, #1
 800135a:	f1b8 0f04 	cmp.w	r8, #4
 800135e:	d1c1      	bne.n	80012e4 <MixColumns+0x14>
 8001360:	466a      	mov	r2, sp
 8001362:	4633      	mov	r3, r6
 8001364:	3620      	adds	r6, #32
  for (i = 0; i < 4; i++)
    for (j = 0; j < BC; j++)
      a[i][j] = b[i][j];
 8001366:	7811      	ldrb	r1, [r2, #0]
 8001368:	7019      	strb	r1, [r3, #0]
 800136a:	7851      	ldrb	r1, [r2, #1]
 800136c:	7059      	strb	r1, [r3, #1]
 800136e:	7891      	ldrb	r1, [r2, #2]
 8001370:	7099      	strb	r1, [r3, #2]
 8001372:	78d1      	ldrb	r1, [r2, #3]
 8001374:	70d9      	strb	r1, [r3, #3]
  for (i = 0; i < 4; i++)
 8001376:	3208      	adds	r2, #8
 8001378:	3308      	adds	r3, #8
 800137a:	42b3      	cmp	r3, r6
 800137c:	d1f3      	bne.n	8001366 <MixColumns+0x96>
}
 800137e:	b009      	add	sp, #36	@ 0x24
 8001380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001384 <KeyExpansion>:
                mul(0xd, a[(i + 2) % 4][j]) ^ mul(0x9, a[(i + 3) % 4][j]);
  for (i = 0; i < 4; i++)
    for (j = 0; j < BC; j++)
      a[i][j] = b[i][j];
}
int KeyExpansion(word8 k[4][MAXKC], word8 W[MAXROUNDS + 1][4][MAXBC]) {
 8001384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001386:	b089      	sub	sp, #36	@ 0x24
 8001388:	468e      	mov	lr, r1
  /* Calculate the required round keys
   */
  int i, j, t, RCpointer = 1;
  word8 tk[4][MAXKC];
  for (j = 0; j < KC; j++)
 800138a:	1e43      	subs	r3, r0, #1
 800138c:	1cc1      	adds	r1, r0, #3
int KeyExpansion(word8 k[4][MAXKC], word8 W[MAXROUNDS + 1][4][MAXBC]) {
 800138e:	466a      	mov	r2, sp
    for (i = 0; i < 4; i++)
      tk[i][j] = k[i][j];
 8001390:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8001394:	f802 0b01 	strb.w	r0, [r2], #1
 8001398:	7a18      	ldrb	r0, [r3, #8]
 800139a:	71d0      	strb	r0, [r2, #7]
 800139c:	7c18      	ldrb	r0, [r3, #16]
 800139e:	73d0      	strb	r0, [r2, #15]
 80013a0:	7e18      	ldrb	r0, [r3, #24]
 80013a2:	75d0      	strb	r0, [r2, #23]
  for (j = 0; j < KC; j++)
 80013a4:	428b      	cmp	r3, r1
 80013a6:	d1f3      	bne.n	8001390 <KeyExpansion+0xc>
 80013a8:	466a      	mov	r2, sp
  t = 0;
 80013aa:	2000      	movs	r0, #0
  /* copy values into round key array */
  for (j = 0; (j < KC) && (t < (ROUNDS + 1) * BC); j++, t++)
    for (i = 0; i < 4; i++)
      W[t / BC][i][t % BC] = tk[i][j];
 80013ac:	4603      	mov	r3, r0
 80013ae:	2800      	cmp	r0, #0
 80013b0:	bfb8      	it	lt
 80013b2:	1cc3      	addlt	r3, r0, #3
 80013b4:	109b      	asrs	r3, r3, #2
 80013b6:	eb0e 1343 	add.w	r3, lr, r3, lsl #5
 80013ba:	4244      	negs	r4, r0
 80013bc:	f000 0103 	and.w	r1, r0, #3
 80013c0:	f004 0403 	and.w	r4, r4, #3
 80013c4:	bf58      	it	pl
 80013c6:	4261      	negpl	r1, r4
 80013c8:	f812 4b01 	ldrb.w	r4, [r2], #1
 80013cc:	545c      	strb	r4, [r3, r1]
 80013ce:	440b      	add	r3, r1
 80013d0:	79d1      	ldrb	r1, [r2, #7]
 80013d2:	7219      	strb	r1, [r3, #8]
 80013d4:	7bd1      	ldrb	r1, [r2, #15]
 80013d6:	7419      	strb	r1, [r3, #16]
 80013d8:	7dd1      	ldrb	r1, [r2, #23]
 80013da:	7619      	strb	r1, [r3, #24]
  for (j = 0; (j < KC) && (t < (ROUNDS + 1) * BC); j++, t++)
 80013dc:	3001      	adds	r0, #1
 80013de:	2804      	cmp	r0, #4
 80013e0:	d1e4      	bne.n	80013ac <KeyExpansion+0x28>
  while (t < (ROUNDS + 1) * BC) {
 80013e2:	4d2e      	ldr	r5, [pc, #184]	@ (800149c <KeyExpansion+0x118>)
    /* while not enough round key material calculated,
     * calculate new values
     */
    for (i = 0; i < 4; i++)
      tk[i][0] ^= S[tk[(i + 1) % 4][KC - 1]];
 80013e4:	492e      	ldr	r1, [pc, #184]	@ (80014a0 <KeyExpansion+0x11c>)
 80013e6:	f10d 0423 	add.w	r4, sp, #35	@ 0x23
 80013ea:	e001      	b.n	80013f0 <KeyExpansion+0x6c>
  while (t < (ROUNDS + 1) * BC) {
 80013ec:	282b      	cmp	r0, #43	@ 0x2b
 80013ee:	dc51      	bgt.n	8001494 <KeyExpansion+0x110>
  t = 0;
 80013f0:	2301      	movs	r3, #1
      tk[i][0] ^= S[tk[(i + 1) % 4][KC - 1]];
 80013f2:	eb0d 0cc3 	add.w	ip, sp, r3, lsl #3
 80013f6:	425e      	negs	r6, r3
 80013f8:	f003 0203 	and.w	r2, r3, #3
 80013fc:	f006 0603 	and.w	r6, r6, #3
 8001400:	bf58      	it	pl
 8001402:	4272      	negpl	r2, r6
 8001404:	ae08      	add	r6, sp, #32
 8001406:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800140a:	f812 2c1d 	ldrb.w	r2, [r2, #-29]
 800140e:	5c8a      	ldrb	r2, [r1, r2]
 8001410:	f81c 6c08 	ldrb.w	r6, [ip, #-8]
 8001414:	4072      	eors	r2, r6
 8001416:	f80c 2c08 	strb.w	r2, [ip, #-8]
    for (i = 0; i < 4; i++)
 800141a:	3301      	adds	r3, #1
 800141c:	2b05      	cmp	r3, #5
 800141e:	d1e8      	bne.n	80013f2 <KeyExpansion+0x6e>
    tk[0][0] ^= RC[RCpointer++];
 8001420:	f855 2f04 	ldr.w	r2, [r5, #4]!
 8001424:	f89d 3000 	ldrb.w	r3, [sp]
 8001428:	4053      	eors	r3, r2
 800142a:	f88d 3000 	strb.w	r3, [sp]

    if (KC <= 6)
      for (j = 1; j < KC; j++)
 800142e:	f10d 0c20 	add.w	ip, sp, #32
        for (i = 0; i < 4; i++)
 8001432:	f1ac 0320 	sub.w	r3, ip, #32
          tk[i][j] ^= tk[i][j - 1];
 8001436:	785a      	ldrb	r2, [r3, #1]
 8001438:	781e      	ldrb	r6, [r3, #0]
 800143a:	4072      	eors	r2, r6
 800143c:	705a      	strb	r2, [r3, #1]
        for (i = 0; i < 4; i++)
 800143e:	3308      	adds	r3, #8
 8001440:	459c      	cmp	ip, r3
 8001442:	d1f8      	bne.n	8001436 <KeyExpansion+0xb2>
      for (j = 1; j < KC; j++)
 8001444:	f10c 0c01 	add.w	ip, ip, #1
 8001448:	4564      	cmp	r4, ip
 800144a:	d1f2      	bne.n	8001432 <KeyExpansion+0xae>
      for (j = 5; j < KC; j++)
        for (i = 0; i < 4; i++)
          tk[i][j] ^= tk[i][j - 1];
    }
    /* copy values into round key array */
    for (j = 0; (j < KC) && (t < (ROUNDS + 1) * BC); j++, t++)
 800144c:	282b      	cmp	r0, #43	@ 0x2b
 800144e:	dc21      	bgt.n	8001494 <KeyExpansion+0x110>
 8001450:	1d07      	adds	r7, r0, #4
 8001452:	466a      	mov	r2, sp
      for (i = 0; i < 4; i++)
        W[t / BC][i][t % BC] = tk[i][j];
 8001454:	4603      	mov	r3, r0
 8001456:	2800      	cmp	r0, #0
 8001458:	bfb8      	it	lt
 800145a:	1cc3      	addlt	r3, r0, #3
 800145c:	109b      	asrs	r3, r3, #2
 800145e:	eb0e 1343 	add.w	r3, lr, r3, lsl #5
 8001462:	f1d0 0c00 	rsbs	ip, r0, #0
 8001466:	f000 0603 	and.w	r6, r0, #3
 800146a:	f00c 0c03 	and.w	ip, ip, #3
 800146e:	bf58      	it	pl
 8001470:	f1cc 0600 	rsbpl	r6, ip, #0
 8001474:	f812 cb01 	ldrb.w	ip, [r2], #1
 8001478:	f803 c006 	strb.w	ip, [r3, r6]
 800147c:	4433      	add	r3, r6
 800147e:	79d6      	ldrb	r6, [r2, #7]
 8001480:	721e      	strb	r6, [r3, #8]
 8001482:	7bd6      	ldrb	r6, [r2, #15]
 8001484:	741e      	strb	r6, [r3, #16]
 8001486:	7dd6      	ldrb	r6, [r2, #23]
 8001488:	761e      	strb	r6, [r3, #24]
    for (j = 0; (j < KC) && (t < (ROUNDS + 1) * BC); j++, t++)
 800148a:	3001      	adds	r0, #1
 800148c:	42b8      	cmp	r0, r7
 800148e:	d0ad      	beq.n	80013ec <KeyExpansion+0x68>
 8001490:	282c      	cmp	r0, #44	@ 0x2c
 8001492:	d1df      	bne.n	8001454 <KeyExpansion+0xd0>
  }
  return 0;
}
 8001494:	2000      	movs	r0, #0
 8001496:	b009      	add	sp, #36	@ 0x24
 8001498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800149a:	bf00      	nop
 800149c:	20000000 	.word	0x20000000
 80014a0:	20000078 	.word	0x20000078

080014a4 <Encrypt>:
int Encrypt(word8 a[4][MAXBC], word8 rk[MAXROUNDS + 1][4][MAXBC]) {
 80014a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014a8:	4604      	mov	r4, r0
 80014aa:	4689      	mov	r9, r1
  /* Encryption of one block.
   */
  int r;
  /* begin with a key addition
   * */
  AddRoundKey(a, rk[0]);
 80014ac:	f7ff fe8c 	bl	80011c8 <AddRoundKey>
  /* ROUNDS-1 ordinary rounds
   */
  for (r = 1; r < ROUNDS; r++) {
 80014b0:	f109 0520 	add.w	r5, r9, #32
 80014b4:	f509 78a0 	add.w	r8, r9, #320	@ 0x140
    SubBytes(a, S);
 80014b8:	4f11      	ldr	r7, [pc, #68]	@ (8001500 <Encrypt+0x5c>)
    ShiftRows(a, 0);
 80014ba:	2600      	movs	r6, #0
    SubBytes(a, S);
 80014bc:	4639      	mov	r1, r7
 80014be:	4620      	mov	r0, r4
 80014c0:	f7ff fe9a 	bl	80011f8 <SubBytes>
    ShiftRows(a, 0);
 80014c4:	4631      	mov	r1, r6
 80014c6:	4620      	mov	r0, r4
 80014c8:	f7ff fea4 	bl	8001214 <ShiftRows>
    MixColumns(a);
 80014cc:	4620      	mov	r0, r4
 80014ce:	f7ff feff 	bl	80012d0 <MixColumns>
    AddRoundKey(a, rk[r]);
 80014d2:	4629      	mov	r1, r5
 80014d4:	4620      	mov	r0, r4
 80014d6:	f7ff fe77 	bl	80011c8 <AddRoundKey>
  for (r = 1; r < ROUNDS; r++) {
 80014da:	3520      	adds	r5, #32
 80014dc:	4545      	cmp	r5, r8
 80014de:	d1ed      	bne.n	80014bc <Encrypt+0x18>
  }
  /* Last round is special: there is no MixColumns
   */
  SubBytes(a, S);
 80014e0:	4907      	ldr	r1, [pc, #28]	@ (8001500 <Encrypt+0x5c>)
 80014e2:	4620      	mov	r0, r4
 80014e4:	f7ff fe88 	bl	80011f8 <SubBytes>
  ShiftRows(a, 0);
 80014e8:	2100      	movs	r1, #0
 80014ea:	4620      	mov	r0, r4
 80014ec:	f7ff fe92 	bl	8001214 <ShiftRows>
  AddRoundKey(a, rk[ROUNDS]);
 80014f0:	f509 71a0 	add.w	r1, r9, #320	@ 0x140
 80014f4:	4620      	mov	r0, r4
 80014f6:	f7ff fe67 	bl	80011c8 <AddRoundKey>
  return 0;
}
 80014fa:	2000      	movs	r0, #0
 80014fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001500:	20000078 	.word	0x20000078

08001504 <AES128_encrypt>:
   */
  AddRoundKey(a, rk[0]);
  return 0;
}

void AES128_encrypt(word8* block, const word8* key) {
 8001504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001506:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 800150a:	4605      	mov	r5, r0
  word8 a[4][MAXBC], rk[MAXROUNDS + 1][4][MAXBC], sk[4][MAXKC];
  for (int j=0; j<4; j++) {
 800150c:	ac80      	add	r4, sp, #512	@ 0x200
 800150e:	466e      	mov	r6, sp
      for (int i=0; i<4; i++) {
 8001510:	46a6      	mov	lr, r4
 8001512:	2700      	movs	r7, #0
 8001514:	eb07 0c05 	add.w	ip, r7, r5
 8001518:	19ca      	adds	r2, r1, r7
 800151a:	2300      	movs	r3, #0
          a[i][j] = block[4*j+i];
 800151c:	f81c 0b01 	ldrb.w	r0, [ip], #1
 8001520:	f80e 0033 	strb.w	r0, [lr, r3, lsl #3]
          sk[i][j] = key[4*j+i];
 8001524:	f812 0b01 	ldrb.w	r0, [r2], #1
 8001528:	f806 0033 	strb.w	r0, [r6, r3, lsl #3]
      for (int i=0; i<4; i++) {
 800152c:	3301      	adds	r3, #1
 800152e:	2b04      	cmp	r3, #4
 8001530:	d1f4      	bne.n	800151c <AES128_encrypt+0x18>
  for (int j=0; j<4; j++) {
 8001532:	3704      	adds	r7, #4
 8001534:	f10e 0e01 	add.w	lr, lr, #1
 8001538:	3601      	adds	r6, #1
 800153a:	2f10      	cmp	r7, #16
 800153c:	d1ea      	bne.n	8001514 <AES128_encrypt+0x10>
      }
  }
  KeyExpansion(sk, rk);
 800153e:	a908      	add	r1, sp, #32
 8001540:	4668      	mov	r0, sp
 8001542:	f7ff ff1f 	bl	8001384 <KeyExpansion>
  Encrypt(a, rk);
 8001546:	a908      	add	r1, sp, #32
 8001548:	a880      	add	r0, sp, #512	@ 0x200
 800154a:	f7ff ffab 	bl	80014a4 <Encrypt>
 800154e:	2000      	movs	r0, #0
  for (int j=0; j<4; j++) {
      for (int i=0; i<4; i++) {
 8001550:	182a      	adds	r2, r5, r0
 8001552:	2300      	movs	r3, #0
          block[4*j+i] = a[i][j];
 8001554:	f814 1033 	ldrb.w	r1, [r4, r3, lsl #3]
 8001558:	f802 1b01 	strb.w	r1, [r2], #1
      for (int i=0; i<4; i++) {
 800155c:	3301      	adds	r3, #1
 800155e:	2b04      	cmp	r3, #4
 8001560:	d1f8      	bne.n	8001554 <AES128_encrypt+0x50>
  for (int j=0; j<4; j++) {
 8001562:	3004      	adds	r0, #4
 8001564:	3401      	adds	r4, #1
 8001566:	2810      	cmp	r0, #16
 8001568:	d1f2      	bne.n	8001550 <AES128_encrypt+0x4c>
      }
  }
}
 800156a:	f50d 7d09 	add.w	sp, sp, #548	@ 0x224
 800156e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001570 <arm_absmax_q15>:
void arm_absmax_q15(
  const q15_t * pSrc,
        uint32_t blockSize,
        q15_t * pResult,
        uint32_t * pIndex)
{
 8001570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        uint32_t index;                                /* index of maximum value */                         \
                                                                                                            \
  /* Initialize index value to zero. */                                                                     \
  outIndex = 0U;                                                                                            \
  /* Load first input value that act as reference value for comparision */                                  \
  out = *pSrc++;                                                                                            \
 8001574:	4607      	mov	r7, r0
 8001576:	f937 cb02 	ldrsh.w	ip, [r7], #2
  out = (out > 0) ? out : (q15_t)__QSUB16(0, out);                                                                           \
 800157a:	f1bc 0f00 	cmp.w	ip, #0
 800157e:	dd0d      	ble.n	800159c <arm_absmax_q15+0x2c>
  /* Initialize index of extrema value. */                                                                  \
  index = 0U;                                                                                               \
                                                                                                            \
  /* Loop unrolling: Compute 4 outputs at a time */                                                         \
  blkCnt = (blockSize - 1U) >> 2U;                                                                          \
 8001580:	1e4d      	subs	r5, r1, #1
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 8001582:	ea5f 0a95 	movs.w	sl, r5, lsr #2
 8001586:	d057      	beq.n	8001638 <arm_absmax_q15+0xc8>
 8001588:	f100 060a 	add.w	r6, r0, #10
 800158c:	f10a 0901 	add.w	r9, sl, #1
 8001590:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8001594:	2404      	movs	r4, #4
  outIndex = 0U;                                                                                            \
 8001596:	2000      	movs	r0, #0

__STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001598:	4680      	mov	r8, r0
 800159a:	e01e      	b.n	80015da <arm_absmax_q15+0x6a>
 800159c:	2400      	movs	r4, #0
 800159e:	fad4 f41c 	qsub16	r4, r4, ip
  out = (out > 0) ? out : (q15_t)__QSUB16(0, out);                                                                           \
 80015a2:	fa0f fc84 	sxth.w	ip, r4
 80015a6:	e7eb      	b.n	8001580 <arm_absmax_q15+0x10>
 80015a8:	fad8 fe1e 	qsub16	lr, r8, lr
  {                                                                                                         \
    /* Initialize cur_absmax to next consecutive values one by one */                                         \
    cur_absmax = *pSrc++;                                                                                     \
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 80015ac:	fa0f fe8e 	sxth.w	lr, lr
 80015b0:	e019      	b.n	80015e6 <arm_absmax_q15+0x76>
 80015b2:	fad8 fe1e 	qsub16	lr, r8, lr
      out = cur_absmax;                                                                                       \
      outIndex = index + 1U;                                                                                \
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 80015b6:	fa0f fe8e 	sxth.w	lr, lr
 80015ba:	e01d      	b.n	80015f8 <arm_absmax_q15+0x88>
 80015bc:	fad8 fe1e 	qsub16	lr, r8, lr
      out = cur_absmax;                                                                                       \
      outIndex = index + 2U;                                                                                \
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 80015c0:	fa0f fe8e 	sxth.w	lr, lr
 80015c4:	e021      	b.n	800160a <arm_absmax_q15+0x9a>
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
    if (cur_absmax > out)                                                                          \
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 80015c6:	45f4      	cmp	ip, lr
 80015c8:	bfb8      	it	lt
 80015ca:	4620      	movlt	r0, r4
 80015cc:	45f4      	cmp	ip, lr
 80015ce:	bfb8      	it	lt
 80015d0:	46f4      	movlt	ip, lr
  while (blkCnt > 0U)                                                                                       \
 80015d2:	3608      	adds	r6, #8
 80015d4:	3404      	adds	r4, #4
 80015d6:	454c      	cmp	r4, r9
 80015d8:	d026      	beq.n	8001628 <arm_absmax_q15+0xb8>
    cur_absmax = *pSrc++;                                                                                     \
 80015da:	46b3      	mov	fp, r6
 80015dc:	f936 ec08 	ldrsh.w	lr, [r6, #-8]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 80015e0:	f1be 0f00 	cmp.w	lr, #0
 80015e4:	dde0      	ble.n	80015a8 <arm_absmax_q15+0x38>
    if (cur_absmax > out)                                                                         \
 80015e6:	45e6      	cmp	lr, ip
      outIndex = index + 1U;                                                                                \
 80015e8:	bfc4      	itt	gt
 80015ea:	1ee0      	subgt	r0, r4, #3
      out = cur_absmax;                                                                                       \
 80015ec:	46f4      	movgt	ip, lr
    cur_absmax = *pSrc++;                                                                                     \
 80015ee:	f93b ec06 	ldrsh.w	lr, [fp, #-6]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 80015f2:	f1be 0f00 	cmp.w	lr, #0
 80015f6:	dddc      	ble.n	80015b2 <arm_absmax_q15+0x42>
    if (cur_absmax > out)                                                                         \
 80015f8:	45f4      	cmp	ip, lr
      outIndex = index + 2U;                                                                                \
 80015fa:	bfbc      	itt	lt
 80015fc:	1ea0      	sublt	r0, r4, #2
      out = cur_absmax;                                                                                       \
 80015fe:	46f4      	movlt	ip, lr
    cur_absmax = *pSrc++;                                                                                     \
 8001600:	f93b ec04 	ldrsh.w	lr, [fp, #-4]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8001604:	f1be 0f00 	cmp.w	lr, #0
 8001608:	ddd8      	ble.n	80015bc <arm_absmax_q15+0x4c>
    if (cur_absmax > out)                                                                          \
 800160a:	45f4      	cmp	ip, lr
      outIndex = index + 3U;                                                                                \
 800160c:	bfbc      	itt	lt
 800160e:	f104 30ff 	addlt.w	r0, r4, #4294967295
      out = cur_absmax;                                                                                       \
 8001612:	46f4      	movlt	ip, lr
    cur_absmax = *pSrc++;                                                                                     \
 8001614:	f93b ec02 	ldrsh.w	lr, [fp, #-2]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8001618:	f1be 0f00 	cmp.w	lr, #0
 800161c:	dcd3      	bgt.n	80015c6 <arm_absmax_q15+0x56>
 800161e:	fad8 fe1e 	qsub16	lr, r8, lr
 8001622:	fa0f fe8e 	sxth.w	lr, lr
 8001626:	e7ce      	b.n	80015c6 <arm_absmax_q15+0x56>
    cur_absmax = *pSrc++;                                                                                     \
 8001628:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
                                                                                                            \
  /* Loop unrolling: Compute remaining outputs */                                                           \
  blkCnt = (blockSize - 1U) % 4U;                                                                           \
                                                                                                            \
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 800162c:	f015 0503 	ands.w	r5, r5, #3
 8001630:	d017      	beq.n	8001662 <arm_absmax_q15+0xf2>
 8001632:	1b4d      	subs	r5, r1, r5
 8001634:	2400      	movs	r4, #0
 8001636:	e00a      	b.n	800164e <arm_absmax_q15+0xde>
  outIndex = 0U;                                                                                            \
 8001638:	4650      	mov	r0, sl
 800163a:	e7f7      	b.n	800162c <arm_absmax_q15+0xbc>
  {                                                                                                         \
    cur_absmax = *pSrc++;                                                                                     \
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
    if (cur_absmax > out)                                                                         \
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 800163c:	45e6      	cmp	lr, ip
 800163e:	bfc8      	it	gt
 8001640:	4628      	movgt	r0, r5
 8001642:	45f4      	cmp	ip, lr
 8001644:	bfb8      	it	lt
 8001646:	46f4      	movlt	ip, lr
  while (blkCnt > 0U)                                                                                       \
 8001648:	3501      	adds	r5, #1
 800164a:	428d      	cmp	r5, r1
 800164c:	d009      	beq.n	8001662 <arm_absmax_q15+0xf2>
    cur_absmax = *pSrc++;                                                                                     \
 800164e:	f937 eb02 	ldrsh.w	lr, [r7], #2
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8001652:	f1be 0f00 	cmp.w	lr, #0
 8001656:	dcf1      	bgt.n	800163c <arm_absmax_q15+0xcc>
 8001658:	fad4 fe1e 	qsub16	lr, r4, lr
 800165c:	fa0f fe8e 	sxth.w	lr, lr
 8001660:	e7ec      	b.n	800163c <arm_absmax_q15+0xcc>
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
  }                                                                                                         \
                                                                                                            \
  /* Store the extrema value and it's index into destination pointers */                                    \
  *pResult = out;                                                                                           \
 8001662:	f8a2 c000 	strh.w	ip, [r2]
  *pIndex = outIndex;
 8001666:	6018      	str	r0, [r3, #0]
}
 8001668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800166c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800166c:	b500      	push	{lr}
 800166e:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001670:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <MX_DMA_Init+0x30>)
 8001672:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001674:	f042 0201 	orr.w	r2, r2, #1
 8001678:	649a      	str	r2, [r3, #72]	@ 0x48
 800167a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	9301      	str	r3, [sp, #4]
 8001682:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2101      	movs	r1, #1
 8001688:	200b      	movs	r0, #11
 800168a:	f002 fde7 	bl	800425c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800168e:	200b      	movs	r0, #11
 8001690:	f002 fe1a 	bl	80042c8 <HAL_NVIC_EnableIRQ>

}
 8001694:	b003      	add	sp, #12
 8001696:	f85d fb04 	ldr.w	pc, [sp], #4
 800169a:	bf00      	nop
 800169c:	40021000 	.word	0x40021000

080016a0 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 80016a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016a4:	b08f      	sub	sp, #60	@ 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a6:	2400      	movs	r4, #0
 80016a8:	9409      	str	r4, [sp, #36]	@ 0x24
 80016aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80016ac:	940b      	str	r4, [sp, #44]	@ 0x2c
 80016ae:	940c      	str	r4, [sp, #48]	@ 0x30
 80016b0:	940d      	str	r4, [sp, #52]	@ 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016b2:	4b94      	ldr	r3, [pc, #592]	@ (8001904 <MX_GPIO_Init+0x264>)
 80016b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016b6:	f042 0210 	orr.w	r2, r2, #16
 80016ba:	64da      	str	r2, [r3, #76]	@ 0x4c
 80016bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016be:	f002 0210 	and.w	r2, r2, #16
 80016c2:	9201      	str	r2, [sp, #4]
 80016c4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016c8:	f042 0204 	orr.w	r2, r2, #4
 80016cc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80016ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016d0:	f002 0204 	and.w	r2, r2, #4
 80016d4:	9202      	str	r2, [sp, #8]
 80016d6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016da:	f042 0220 	orr.w	r2, r2, #32
 80016de:	64da      	str	r2, [r3, #76]	@ 0x4c
 80016e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016e2:	f002 0220 	and.w	r2, r2, #32
 80016e6:	9203      	str	r2, [sp, #12]
 80016e8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016f0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80016f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016f4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80016f8:	9204      	str	r2, [sp, #16]
 80016fa:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80016fe:	f042 0201 	orr.w	r2, r2, #1
 8001702:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001704:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001706:	f002 0201 	and.w	r2, r2, #1
 800170a:	9205      	str	r2, [sp, #20]
 800170c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001710:	f042 0202 	orr.w	r2, r2, #2
 8001714:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001716:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001718:	f002 0202 	and.w	r2, r2, #2
 800171c:	9206      	str	r2, [sp, #24]
 800171e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001720:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001722:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001726:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001728:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800172a:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800172e:	9207      	str	r2, [sp, #28]
 8001730:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001732:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001734:	f042 0208 	orr.w	r2, r2, #8
 8001738:	64da      	str	r2, [r3, #76]	@ 0x4c
 800173a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	9308      	str	r3, [sp, #32]
 8001742:	9b08      	ldr	r3, [sp, #32]
  HAL_PWREx_EnableVddIO2();
 8001744:	f003 f88e 	bl	8004864 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001748:	f8df 81cc 	ldr.w	r8, [pc, #460]	@ 8001918 <MX_GPIO_Init+0x278>
 800174c:	2201      	movs	r2, #1
 800174e:	4611      	mov	r1, r2
 8001750:	4640      	mov	r0, r8
 8001752:	f003 f821 	bl	8004798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_SET);
 8001756:	f8df b1c4 	ldr.w	fp, [pc, #452]	@ 800191c <MX_GPIO_Init+0x27c>
 800175a:	2201      	movs	r2, #1
 800175c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001760:	4658      	mov	r0, fp
 8001762:	f003 f819 	bl	8004798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_EEPROM_CSN_GPIO_Port, RADIO_EEPROM_CSN_Pin, GPIO_PIN_SET);
 8001766:	f8df a1b8 	ldr.w	sl, [pc, #440]	@ 8001920 <MX_GPIO_Init+0x280>
 800176a:	2201      	movs	r2, #1
 800176c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001770:	4650      	mov	r0, sl
 8001772:	f003 f811 	bl	8004798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001776:	4622      	mov	r2, r4
 8001778:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 800177c:	4862      	ldr	r0, [pc, #392]	@ (8001908 <MX_GPIO_Init+0x268>)
 800177e:	f003 f80b 	bl	8004798 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001782:	4f62      	ldr	r7, [pc, #392]	@ (800190c <MX_GPIO_Init+0x26c>)
 8001784:	4622      	mov	r2, r4
 8001786:	2140      	movs	r1, #64	@ 0x40
 8001788:	4638      	mov	r0, r7
 800178a:	f003 f805 	bl	8004798 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE12 PE14 PE15
                           PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800178e:	f24d 73ff 	movw	r3, #55295	@ 0xd7ff
 8001792:	9309      	str	r3, [sp, #36]	@ 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001794:	2503      	movs	r5, #3
 8001796:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800179a:	a909      	add	r1, sp, #36	@ 0x24
 800179c:	4650      	mov	r0, sl
 800179e:	f002 ff0d 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017a6:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017ac:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017b0:	a909      	add	r1, sp, #36	@ 0x24
 80017b2:	4640      	mov	r0, r8
 80017b4:	f002 ff02 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017b8:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 80017bc:	9309      	str	r3, [sp, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017be:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017c2:	a909      	add	r1, sp, #36	@ 0x24
 80017c4:	4658      	mov	r0, fp
 80017c6:	f002 fef9 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80017ca:	f04f 0909 	mov.w	r9, #9
 80017ce:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d2:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017d6:	a909      	add	r1, sp, #36	@ 0x24
 80017d8:	484d      	ldr	r0, [pc, #308]	@ (8001910 <MX_GPIO_Init+0x270>)
 80017da:	f002 feef 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : RADIO_S2LP_CSN_Pin */
  GPIO_InitStruct.Pin = RADIO_S2LP_CSN_Pin;
 80017de:	2601      	movs	r6, #1
 80017e0:	9609      	str	r6, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	960a      	str	r6, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	950c      	str	r5, [sp, #48]	@ 0x30
  HAL_GPIO_Init(RADIO_S2LP_CSN_GPIO_Port, &GPIO_InitStruct);
 80017e8:	a909      	add	r1, sp, #36	@ 0x24
 80017ea:	4640      	mov	r0, r8
 80017ec:	f002 fee6 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80017f0:	f641 73fe 	movw	r3, #8190	@ 0x1ffe
 80017f4:	9309      	str	r3, [sp, #36]	@ 0x24
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f6:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fa:	a909      	add	r1, sp, #36	@ 0x24
 80017fc:	4640      	mov	r0, r8
 80017fe:	f002 fedd 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA4 PA5
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8001802:	f248 0336 	movw	r3, #32822	@ 0x8036
 8001806:	9309      	str	r3, [sp, #36]	@ 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001808:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	a909      	add	r1, sp, #36	@ 0x24
 800180e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001812:	f002 fed3 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : RADIO_INT_Pin */
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 8001816:	2308      	movs	r3, #8
 8001818:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800181a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800181e:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8001822:	a909      	add	r1, sp, #36	@ 0x24
 8001824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001828:	f002 fec8 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB15
                           PB4 PB5 PB6 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800182c:	f64b 7377 	movw	r3, #49015	@ 0xbf77
 8001830:	9309      	str	r3, [sp, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001832:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001836:	a909      	add	r1, sp, #36	@ 0x24
 8001838:	4833      	ldr	r0, [pc, #204]	@ (8001908 <MX_GPIO_Init+0x268>)
 800183a:	f002 febf 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : RADIO_SDN_Pin */
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
 800183e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001842:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001844:	960a      	str	r6, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001848:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 800184a:	a909      	add	r1, sp, #36	@ 0x24
 800184c:	4658      	mov	r0, fp
 800184e:	f002 feb5 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001852:	f64f 631f 	movw	r3, #65055	@ 0xfe1f
 8001856:	9309      	str	r3, [sp, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001858:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800185c:	a909      	add	r1, sp, #36	@ 0x24
 800185e:	4638      	mov	r0, r7
 8001860:	f002 feac 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : RADIO_EEPROM_CSN_Pin */
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
 8001864:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001868:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186a:	960a      	str	r6, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 8001870:	a909      	add	r1, sp, #36	@ 0x24
 8001872:	4650      	mov	r0, sl
 8001874:	f002 fea2 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001878:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800187c:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187e:	960a      	str	r6, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	a909      	add	r1, sp, #36	@ 0x24
 8001886:	4820      	ldr	r0, [pc, #128]	@ (8001908 <MX_GPIO_Init+0x268>)
 8001888:	f002 fe98 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800188c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001890:	9309      	str	r3, [sp, #36]	@ 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001892:	950a      	str	r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001896:	a909      	add	r1, sp, #36	@ 0x24
 8001898:	481e      	ldr	r0, [pc, #120]	@ (8001914 <MX_GPIO_Init+0x274>)
 800189a:	f002 fe8f 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800189e:	2320      	movs	r3, #32
 80018a0:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a2:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018a6:	a909      	add	r1, sp, #36	@ 0x24
 80018a8:	4638      	mov	r0, r7
 80018aa:	f002 fe87 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80018ae:	2340      	movs	r3, #64	@ 0x40
 80018b0:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b2:	960a      	str	r6, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80018b8:	a909      	add	r1, sp, #36	@ 0x24
 80018ba:	4638      	mov	r0, r7
 80018bc:	f002 fe7e 	bl	80045bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018c0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80018c4:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	950c      	str	r5, [sp, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018ce:	230a      	movs	r3, #10
 80018d0:	930d      	str	r3, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	a909      	add	r1, sp, #36	@ 0x24
 80018d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018d8:	f002 fe70 	bl	80045bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80018dc:	4622      	mov	r2, r4
 80018de:	4621      	mov	r1, r4
 80018e0:	4648      	mov	r0, r9
 80018e2:	f002 fcbb 	bl	800425c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80018e6:	4648      	mov	r0, r9
 80018e8:	f002 fcee 	bl	80042c8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018ec:	4622      	mov	r2, r4
 80018ee:	4621      	mov	r1, r4
 80018f0:	2028      	movs	r0, #40	@ 0x28
 80018f2:	f002 fcb3 	bl	800425c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018f6:	2028      	movs	r0, #40	@ 0x28
 80018f8:	f002 fce6 	bl	80042c8 <HAL_NVIC_EnableIRQ>

}
 80018fc:	b00f      	add	sp, #60	@ 0x3c
 80018fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000
 8001908:	48000400 	.word	0x48000400
 800190c:	48001800 	.word	0x48001800
 8001910:	48001c00 	.word	0x48001c00
 8001914:	48000c00 	.word	0x48000c00
 8001918:	48000800 	.word	0x48000800
 800191c:	48001400 	.word	0x48001400
 8001920:	48001000 	.word	0x48001000

08001924 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001924:	b508      	push	{r3, lr}
	if (GPIO_Pin == B1_Pin) {
 8001926:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 800192a:	d002      	beq.n	8001932 <HAL_GPIO_EXTI_Callback+0xe>
		btn_press = 1;
	}
	else if (GPIO_Pin == RADIO_INT_Pin)
 800192c:	2808      	cmp	r0, #8
 800192e:	d004      	beq.n	800193a <HAL_GPIO_EXTI_Callback+0x16>
		S2LP_IRQ_Handler();
}
 8001930:	bd08      	pop	{r3, pc}
		btn_press = 1;
 8001932:	4b03      	ldr	r3, [pc, #12]	@ (8001940 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001934:	2201      	movs	r2, #1
 8001936:	701a      	strb	r2, [r3, #0]
 8001938:	e7fa      	b.n	8001930 <HAL_GPIO_EXTI_Callback+0xc>
		S2LP_IRQ_Handler();
 800193a:	f001 fa7f 	bl	8002e3c <S2LP_IRQ_Handler>
}
 800193e:	e7f7      	b.n	8001930 <HAL_GPIO_EXTI_Callback+0xc>
 8001940:	20003d48 	.word	0x20003d48

08001944 <run>:
		__WFI();
	}
}

void run(void)
{
 8001944:	b508      	push	{r3, lr}
	btn_press = 0;
 8001946:	4b1a      	ldr	r3, [pc, #104]	@ (80019b0 <run+0x6c>)
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]

	while (1)
	{
	  while (!btn_press) {
 800194c:	461c      	mov	r4, r3
		DEBUG_PRINT("Error while enabling the DMA\r\n");
 800194e:	4e19      	ldr	r6, [pc, #100]	@ (80019b4 <run+0x70>)
 8001950:	e010      	b.n	8001974 <run+0x30>
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8001952:	4d19      	ldr	r5, [pc, #100]	@ (80019b8 <run+0x74>)
 8001954:	2201      	movs	r2, #1
 8001956:	2180      	movs	r1, #128	@ 0x80
 8001958:	4628      	mov	r0, r5
 800195a:	f002 ff1d 	bl	8004798 <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 800195e:	20c8      	movs	r0, #200	@ 0xc8
 8001960:	f001 fdc0 	bl	80034e4 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8001964:	2200      	movs	r2, #0
 8001966:	2180      	movs	r1, #128	@ 0x80
 8001968:	4628      	mov	r0, r5
 800196a:	f002 ff15 	bl	8004798 <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 800196e:	20c8      	movs	r0, #200	@ 0xc8
 8001970:	f001 fdb8 	bl	80034e4 <HAL_Delay>
	  while (!btn_press) {
 8001974:	7823      	ldrb	r3, [r4, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0eb      	beq.n	8001952 <run+0xe>
	  }
	  btn_press = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	7023      	strb	r3, [r4, #0]
#if (CONTINUOUS_ACQ == 1)
	  while (!btn_press) {
 800197e:	7823      	ldrb	r3, [r4, #0]
 8001980:	b993      	cbnz	r3, 80019a8 <run+0x64>
	if (StartADCAcq(N_MELVECS) != HAL_OK) {
 8001982:	2514      	movs	r5, #20
 8001984:	e005      	b.n	8001992 <run+0x4e>
		DEBUG_PRINT("Error while enabling the DMA\r\n");
 8001986:	4630      	mov	r0, r6
 8001988:	f007 f93c 	bl	8008c04 <puts>
 800198c:	e006      	b.n	800199c <run+0x58>
	  while (!btn_press) {
 800198e:	7823      	ldrb	r3, [r4, #0]
 8001990:	b953      	cbnz	r3, 80019a8 <run+0x64>
	if (StartADCAcq(N_MELVECS) != HAL_OK) {
 8001992:	4628      	mov	r0, r5
 8001994:	f7ff fbd2 	bl	800113c <StartADCAcq>
 8001998:	2800      	cmp	r0, #0
 800199a:	d1f4      	bne.n	8001986 <run+0x42>
	while (!IsADCFinished()) {
 800199c:	f7ff fbe6 	bl	800116c <IsADCFinished>
 80019a0:	2800      	cmp	r0, #0
 80019a2:	d1f4      	bne.n	800198e <run+0x4a>
		__WFI();
 80019a4:	bf30      	wfi
 80019a6:	e7f9      	b.n	800199c <run+0x58>
		  acquire_and_send_packet();
	  }
	  btn_press = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	7023      	strb	r3, [r4, #0]
	  while (!btn_press) {
 80019ac:	e7e2      	b.n	8001974 <run+0x30>
 80019ae:	bf00      	nop
 80019b0:	20003d48 	.word	0x20003d48
 80019b4:	0800af90 	.word	0x0800af90
 80019b8:	48000400 	.word	0x48000400

080019bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
 80019c0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  DEBUG_PRINT("Entering error Handler\r\n");
 80019c2:	481a      	ldr	r0, [pc, #104]	@ (8001a2c <Error_Handler+0x70>)
 80019c4:	f007 f91e 	bl	8008c04 <puts>
  while (1)
  {
	  // Blink LED3 (red)
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80019c8:	f8df 806c 	ldr.w	r8, [pc, #108]	@ 8001a38 <Error_Handler+0x7c>
 80019cc:	f04f 0901 	mov.w	r9, #1
 80019d0:	f44f 4780 	mov.w	r7, #16384	@ 0x4000
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 80019d4:	2400      	movs	r4, #0
 80019d6:	4e16      	ldr	r6, [pc, #88]	@ (8001a30 <Error_Handler+0x74>)
 80019d8:	4d16      	ldr	r5, [pc, #88]	@ (8001a34 <Error_Handler+0x78>)
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80019da:	464a      	mov	r2, r9
 80019dc:	4639      	mov	r1, r7
 80019de:	4640      	mov	r0, r8
 80019e0:	f002 feda 	bl	8004798 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 80019e4:	9400      	str	r4, [sp, #0]
 80019e6:	6833      	ldr	r3, [r6, #0]
 80019e8:	fba5 2303 	umull	r2, r3, r5, r3
 80019ec:	099a      	lsrs	r2, r3, #6
 80019ee:	9900      	ldr	r1, [sp, #0]
 80019f0:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
 80019f4:	d205      	bcs.n	8001a02 <Error_Handler+0x46>
 80019f6:	9b00      	ldr	r3, [sp, #0]
 80019f8:	3301      	adds	r3, #1
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	9b00      	ldr	r3, [sp, #0]
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d3f9      	bcc.n	80019f6 <Error_Handler+0x3a>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001a02:	4622      	mov	r2, r4
 8001a04:	4639      	mov	r1, r7
 8001a06:	4640      	mov	r0, r8
 8001a08:	f002 fec6 	bl	8004798 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8001a0c:	9401      	str	r4, [sp, #4]
 8001a0e:	6833      	ldr	r3, [r6, #0]
 8001a10:	fba5 2303 	umull	r2, r3, r5, r3
 8001a14:	0999      	lsrs	r1, r3, #6
 8001a16:	9a01      	ldr	r2, [sp, #4]
 8001a18:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
 8001a1c:	d2dd      	bcs.n	80019da <Error_Handler+0x1e>
 8001a1e:	9b01      	ldr	r3, [sp, #4]
 8001a20:	3301      	adds	r3, #1
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	9b01      	ldr	r3, [sp, #4]
 8001a26:	428b      	cmp	r3, r1
 8001a28:	d3f9      	bcc.n	8001a1e <Error_Handler+0x62>
 8001a2a:	e7d6      	b.n	80019da <Error_Handler+0x1e>
 8001a2c:	0800afb0 	.word	0x0800afb0
 8001a30:	20002f78 	.word	0x20002f78
 8001a34:	51eb851f 	.word	0x51eb851f
 8001a38:	48000400 	.word	0x48000400

08001a3c <SystemClock_Config>:
{
 8001a3c:	b500      	push	{lr}
 8001a3e:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a40:	2244      	movs	r2, #68	@ 0x44
 8001a42:	2100      	movs	r1, #0
 8001a44:	a805      	add	r0, sp, #20
 8001a46:	f007 fa71 	bl	8008f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	9302      	str	r3, [sp, #8]
 8001a52:	9303      	str	r3, [sp, #12]
 8001a54:	9304      	str	r3, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001a56:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a5a:	f002 feb9 	bl	80047d0 <HAL_PWREx_ControlVoltageScaling>
 8001a5e:	b9d8      	cbnz	r0, 8001a98 <SystemClock_Config+0x5c>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001a60:	2310      	movs	r3, #16
 8001a62:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001a64:	2301      	movs	r3, #1
 8001a66:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001a6c:	22b0      	movs	r2, #176	@ 0xb0
 8001a6e:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a70:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a72:	a805      	add	r0, sp, #20
 8001a74:	f002 ff96 	bl	80049a4 <HAL_RCC_OscConfig>
 8001a78:	b980      	cbnz	r0, 8001a9c <SystemClock_Config+0x60>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a7a:	230f      	movs	r3, #15
 8001a7c:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a82:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a84:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a86:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a88:	2102      	movs	r1, #2
 8001a8a:	4668      	mov	r0, sp
 8001a8c:	f003 fad2 	bl	8005034 <HAL_RCC_ClockConfig>
 8001a90:	b930      	cbnz	r0, 8001aa0 <SystemClock_Config+0x64>
}
 8001a92:	b017      	add	sp, #92	@ 0x5c
 8001a94:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001a98:	f7ff ff90 	bl	80019bc <Error_Handler>
    Error_Handler();
 8001a9c:	f7ff ff8e 	bl	80019bc <Error_Handler>
    Error_Handler();
 8001aa0:	f7ff ff8c 	bl	80019bc <Error_Handler>

08001aa4 <main>:
{
 8001aa4:	b508      	push	{r3, lr}
  HAL_Init();
 8001aa6:	f001 fcfb 	bl	80034a0 <HAL_Init>
  SystemClock_Config();
 8001aaa:	f7ff ffc7 	bl	8001a3c <SystemClock_Config>
  MX_GPIO_Init();
 8001aae:	f7ff fdf7 	bl	80016a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ab2:	f7ff fddb 	bl	800166c <MX_DMA_Init>
  MX_SPI1_Init();
 8001ab6:	f001 fab3 	bl	8003020 <MX_SPI1_Init>
  MX_TIM3_Init();
 8001aba:	f001 fba7 	bl	800320c <MX_TIM3_Init>
  MX_ADC1_Init();
 8001abe:	f7ff f9fb 	bl	8000eb8 <MX_ADC1_Init>
	  MX_LPUART1_UART_Init();
 8001ac2:	f001 fbfb 	bl	80032bc <MX_LPUART1_UART_Init>
  RetargetInit(&hlpuart1);
 8001ac6:	4814      	ldr	r0, [pc, #80]	@ (8001b18 <main+0x74>)
 8001ac8:	f000 f8b2 	bl	8001c30 <RetargetInit>
  DEBUG_PRINT("Hello world\r\n");
 8001acc:	4813      	ldr	r0, [pc, #76]	@ (8001b1c <main+0x78>)
 8001ace:	f007 f899 	bl	8008c04 <puts>
  HAL_StatusTypeDef err = S2LP_Init(&hspi1);
 8001ad2:	4813      	ldr	r0, [pc, #76]	@ (8001b20 <main+0x7c>)
 8001ad4:	f001 f910 	bl	8002cf8 <S2LP_Init>
  if (err)  {
 8001ad8:	b128      	cbz	r0, 8001ae6 <main+0x42>
 8001ada:	4601      	mov	r1, r0
	  DEBUG_PRINT("[S2LP] Error while initializing: %u\r\n", err);
 8001adc:	4811      	ldr	r0, [pc, #68]	@ (8001b24 <main+0x80>)
 8001ade:	f007 f829 	bl	8008b34 <iprintf>
	  Error_Handler();
 8001ae2:	f7ff ff6b 	bl	80019bc <Error_Handler>
	  DEBUG_PRINT("[S2LP] Init OK\r\n");
 8001ae6:	4810      	ldr	r0, [pc, #64]	@ (8001b28 <main+0x84>)
 8001ae8:	f007 f88c 	bl	8008c04 <puts>
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 8001aec:	217f      	movs	r1, #127	@ 0x7f
 8001aee:	480f      	ldr	r0, [pc, #60]	@ (8001b2c <main+0x88>)
 8001af0:	f002 fad7 	bl	80040a2 <HAL_ADCEx_Calibration_Start>
 8001af4:	b120      	cbz	r0, 8001b00 <main+0x5c>
	  DEBUG_PRINT("Error while calibrating the ADC\r\n");
 8001af6:	480e      	ldr	r0, [pc, #56]	@ (8001b30 <main+0x8c>)
 8001af8:	f007 f884 	bl	8008c04 <puts>
	  Error_Handler();
 8001afc:	f7ff ff5e 	bl	80019bc <Error_Handler>
  if (HAL_TIM_Base_Start(&htim3) != HAL_OK) {
 8001b00:	480c      	ldr	r0, [pc, #48]	@ (8001b34 <main+0x90>)
 8001b02:	f004 fa1b 	bl	8005f3c <HAL_TIM_Base_Start>
 8001b06:	b120      	cbz	r0, 8001b12 <main+0x6e>
	  DEBUG_PRINT("Error while enabling timer TIM3\r\n");
 8001b08:	480b      	ldr	r0, [pc, #44]	@ (8001b38 <main+0x94>)
 8001b0a:	f007 f87b 	bl	8008c04 <puts>
	  Error_Handler();
 8001b0e:	f7ff ff55 	bl	80019bc <Error_Handler>
  run();
 8001b12:	f7ff ff17 	bl	8001944 <run>
 8001b16:	bf00      	nop
 8001b18:	20004c0c 	.word	0x20004c0c
 8001b1c:	0800afc8 	.word	0x0800afc8
 8001b20:	20004b58 	.word	0x20004b58
 8001b24:	0800afd8 	.word	0x0800afd8
 8001b28:	0800b000 	.word	0x0800b000
 8001b2c:	200031b0 	.word	0x200031b0
 8001b30:	0800b010 	.word	0x0800b010
 8001b34:	20004bc0 	.word	0x20004bc0
 8001b38:	0800b034 	.word	0x0800b034

08001b3c <tag_cbc_mac>:
                            0x00,0x00,0x00,0x00,
							0x00,0x00,0x00,0x00,
							0x00,0x00,0x00,0x00,
							0x00,0x00,0x00,0x00};

void tag_cbc_mac(uint8_t *tag, const uint8_t *msg, size_t msg_len) {
 8001b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b40:	b089      	sub	sp, #36	@ 0x24
 8001b42:	4605      	mov	r5, r0
	// Allocate a buffer of the key size to store the input and result of AES
	// uint32_t[4] is 4*(32/8)= 16 bytes long
	uint32_t statew[4] = {0};
 8001b44:	2300      	movs	r3, #0
 8001b46:	9304      	str	r3, [sp, #16]
 8001b48:	9305      	str	r3, [sp, #20]
 8001b4a:	9306      	str	r3, [sp, #24]
 8001b4c:	9307      	str	r3, [sp, #28]
    size_t i;


    // TO DO : Complete the CBC-MAC_AES
	// Parse msg into blocks of 16 bytes
	size_t num_blocks = (msg_len + 15) / 16;
 8001b4e:	f102 030f 	add.w	r3, r2, #15
	uint8_t block[16];

	// Initialize state to 0
	memset(state, 0, 16);

	for (i = 0; i < num_blocks; i++) {
 8001b52:	2b0f      	cmp	r3, #15
 8001b54:	d933      	bls.n	8001bbe <tag_cbc_mac+0x82>
 8001b56:	091f      	lsrs	r7, r3, #4
 8001b58:	460c      	mov	r4, r1
 8001b5a:	2600      	movs	r6, #0
		// Copy the current block into the block buffer
		size_t block_len = (i == num_blocks - 1) ? (msg_len % 16) : 16;
 8001b5c:	f002 080f 	and.w	r8, r2, #15
		memcpy(block, msg + i * 16, block_len);

		// If the last block is not 16 bytes, pad with zeros
		if (block_len < 16) {
			memset(block + block_len, 0, 16 - block_len);
 8001b60:	eb0d 0908 	add.w	r9, sp, r8
 8001b64:	e020      	b.n	8001ba8 <tag_cbc_mac+0x6c>
		memcpy(block, msg + i * 16, block_len);
 8001b66:	4642      	mov	r2, r8
 8001b68:	4621      	mov	r1, r4
 8001b6a:	4668      	mov	r0, sp
 8001b6c:	f007 fa5d 	bl	800902a <memcpy>
			memset(block + block_len, 0, 16 - block_len);
 8001b70:	f1c8 0210 	rsb	r2, r8, #16
 8001b74:	2100      	movs	r1, #0
 8001b76:	4648      	mov	r0, r9
 8001b78:	f007 f9d8 	bl	8008f2c <memset>
		}

		// XOR the block with the current state
		for (size_t j = 0; j < 16; j++) {
 8001b7c:	f10d 030f 	add.w	r3, sp, #15
 8001b80:	f10d 31ff 	add.w	r1, sp, #4294967295
 8001b84:	f10d 0c1f 	add.w	ip, sp, #31
			state[j] ^= block[j];
 8001b88:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8001b8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8001b90:	4042      	eors	r2, r0
 8001b92:	701a      	strb	r2, [r3, #0]
		for (size_t j = 0; j < 16; j++) {
 8001b94:	4563      	cmp	r3, ip
 8001b96:	d1f7      	bne.n	8001b88 <tag_cbc_mac+0x4c>
		}

		// Encrypt the state with AES
		AES128_encrypt(state, AES_Key);
 8001b98:	4910      	ldr	r1, [pc, #64]	@ (8001bdc <tag_cbc_mac+0xa0>)
 8001b9a:	a804      	add	r0, sp, #16
 8001b9c:	f7ff fcb2 	bl	8001504 <AES128_encrypt>
	for (i = 0; i < num_blocks; i++) {
 8001ba0:	3601      	adds	r6, #1
 8001ba2:	3410      	adds	r4, #16
 8001ba4:	42b7      	cmp	r7, r6
 8001ba6:	d90a      	bls.n	8001bbe <tag_cbc_mac+0x82>
		size_t block_len = (i == num_blocks - 1) ? (msg_len % 16) : 16;
 8001ba8:	1e7b      	subs	r3, r7, #1
 8001baa:	42b3      	cmp	r3, r6
 8001bac:	d0db      	beq.n	8001b66 <tag_cbc_mac+0x2a>
		memcpy(block, msg + i * 16, block_len);
 8001bae:	46ec      	mov	ip, sp
 8001bb0:	6820      	ldr	r0, [r4, #0]
 8001bb2:	6861      	ldr	r1, [r4, #4]
 8001bb4:	68a2      	ldr	r2, [r4, #8]
 8001bb6:	68e3      	ldr	r3, [r4, #12]
 8001bb8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
		if (block_len < 16) {
 8001bbc:	e7de      	b.n	8001b7c <tag_cbc_mac+0x40>
	}

    // Copy the result of CBC-MAC-AES to the tag.
    for (int j=0; j<16; j++) {
 8001bbe:	f10d 030f 	add.w	r3, sp, #15
 8001bc2:	3d01      	subs	r5, #1
 8001bc4:	f10d 011f 	add.w	r1, sp, #31
        tag[j] = state[j];
 8001bc8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8001bcc:	f805 2f01 	strb.w	r2, [r5, #1]!
    for (int j=0; j<16; j++) {
 8001bd0:	428b      	cmp	r3, r1
 8001bd2:	d1f9      	bne.n	8001bc8 <tag_cbc_mac+0x8c>
    }
}
 8001bd4:	b009      	add	sp, #36	@ 0x24
 8001bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001bda:	bf00      	nop
 8001bdc:	0800b058 	.word	0x0800b058

08001be0 <make_packet>:

// Assumes payload is already in place in the packet
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 8001be0:	b510      	push	{r4, lr}
 8001be2:	4684      	mov	ip, r0
 8001be4:	460c      	mov	r4, r1
 8001be6:	4696      	mov	lr, r2
    size_t packet_len = payload_len + PACKET_HEADER_LENGTH + PACKET_TAG_LENGTH;
    // Initially, the whole packet header is set to 0s
    memset(packet, 0, PACKET_HEADER_LENGTH);
 8001be8:	2100      	movs	r1, #0
    // So is the tag
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 8001bea:	f104 0208 	add.w	r2, r4, #8
 8001bee:	4410      	add	r0, r2
 8001bf0:	f84c 1002 	str.w	r1, [ip, r2]
 8001bf4:	6041      	str	r1, [r0, #4]
 8001bf6:	6081      	str	r1, [r0, #8]
 8001bf8:	60c1      	str	r1, [r0, #12]
	 *		 	This will be helpful when setting fields that are on multiple bytes.
	*/

	// For the tag field, you have to calculate the tag. The function call below is correct but
	// tag_cbc_mac function, calculating the tag, is not implemented.
	packet[0] = 0x00;
 8001bfa:	f88c 1000 	strb.w	r1, [ip]
	packet[1] = sender_id;
 8001bfe:	f88c e001 	strb.w	lr, [ip, #1]
	packet[2] = (payload_len >> 8) & 0xFF;
 8001c02:	0a21      	lsrs	r1, r4, #8
 8001c04:	f88c 1002 	strb.w	r1, [ip, #2]
	packet[3] = payload_len & 0xFF;
 8001c08:	f88c 4003 	strb.w	r4, [ip, #3]
	packet[4] = (serial >> 24) & 0xFF;
 8001c0c:	0e19      	lsrs	r1, r3, #24
 8001c0e:	f88c 1004 	strb.w	r1, [ip, #4]
	packet[5] = (serial >> 16) & 0xFF;
 8001c12:	0c19      	lsrs	r1, r3, #16
 8001c14:	f88c 1005 	strb.w	r1, [ip, #5]
	packet[6] = (serial >> 8)  & 0XFF;
 8001c18:	0a19      	lsrs	r1, r3, #8
 8001c1a:	f88c 1006 	strb.w	r1, [ip, #6]
	packet[7] = serial & 0xFF;
 8001c1e:	f88c 3007 	strb.w	r3, [ip, #7]

    tag_cbc_mac(packet + payload_len + PACKET_HEADER_LENGTH, packet, payload_len + PACKET_HEADER_LENGTH);
 8001c22:	4661      	mov	r1, ip
 8001c24:	f7ff ff8a 	bl	8001b3c <tag_cbc_mac>

    return packet_len;
}
 8001c28:	f104 0018 	add.w	r0, r4, #24
 8001c2c:	bd10      	pop	{r4, pc}
	...

08001c30 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001c30:	b508      	push	{r3, lr}
  gHuart = huart;
 8001c32:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <RetargetInit+0x18>)
 8001c34:	6018      	str	r0, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001c36:	4b05      	ldr	r3, [pc, #20]	@ (8001c4c <RetargetInit+0x1c>)
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	6880      	ldr	r0, [r0, #8]
 8001c42:	f006 ffe7 	bl	8008c14 <setvbuf>
}
 8001c46:	bd08      	pop	{r3, pc}
 8001c48:	20003d4c 	.word	0x20003d4c
 8001c4c:	20002f90 	.word	0x20002f90

08001c50 <_isatty>:

int _isatty(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001c50:	2802      	cmp	r0, #2
 8001c52:	d801      	bhi.n	8001c58 <_isatty+0x8>
    return 1;
 8001c54:	2001      	movs	r0, #1

  errno = EBADF;
  return 0;
}
 8001c56:	4770      	bx	lr
int _isatty(int fd) {
 8001c58:	b508      	push	{r3, lr}
  errno = EBADF;
 8001c5a:	f007 f9b9 	bl	8008fd0 <__errno>
 8001c5e:	2309      	movs	r3, #9
 8001c60:	6003      	str	r3, [r0, #0]
  return 0;
 8001c62:	2000      	movs	r0, #0
}
 8001c64:	bd08      	pop	{r3, pc}
	...

08001c68 <_write>:

int _write(int fd, char* ptr, int len) {
 8001c68:	b510      	push	{r4, lr}
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001c6a:	3801      	subs	r0, #1
 8001c6c:	2801      	cmp	r0, #1
 8001c6e:	d80c      	bhi.n	8001c8a <_write+0x22>
 8001c70:	4614      	mov	r4, r2
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
 8001c76:	b292      	uxth	r2, r2
 8001c78:	4807      	ldr	r0, [pc, #28]	@ (8001c98 <_write+0x30>)
 8001c7a:	6800      	ldr	r0, [r0, #0]
 8001c7c:	f004 fedd 	bl	8006a3a <HAL_UART_Transmit>
    if (hstatus == HAL_OK)
      return len;
 8001c80:	2800      	cmp	r0, #0
 8001c82:	bf0c      	ite	eq
 8001c84:	4620      	moveq	r0, r4
 8001c86:	2005      	movne	r0, #5
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 8001c88:	bd10      	pop	{r4, pc}
  errno = EBADF;
 8001c8a:	f007 f9a1 	bl	8008fd0 <__errno>
 8001c8e:	2309      	movs	r3, #9
 8001c90:	6003      	str	r3, [r0, #0]
  return -1;
 8001c92:	f04f 30ff 	mov.w	r0, #4294967295
 8001c96:	e7f7      	b.n	8001c88 <_write+0x20>
 8001c98:	20003d4c 	.word	0x20003d4c

08001c9c <_close>:

int _close(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001c9c:	2802      	cmp	r0, #2
 8001c9e:	d801      	bhi.n	8001ca4 <_close+0x8>
    return 0;
 8001ca0:	2000      	movs	r0, #0

  errno = EBADF;
  return -1;
}
 8001ca2:	4770      	bx	lr
int _close(int fd) {
 8001ca4:	b508      	push	{r3, lr}
  errno = EBADF;
 8001ca6:	f007 f993 	bl	8008fd0 <__errno>
 8001caa:	2309      	movs	r3, #9
 8001cac:	6003      	str	r3, [r0, #0]
  return -1;
 8001cae:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001cb2:	bd08      	pop	{r3, pc}

08001cb4 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001cb4:	b508      	push	{r3, lr}
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001cb6:	f007 f98b 	bl	8008fd0 <__errno>
 8001cba:	2309      	movs	r3, #9
 8001cbc:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc2:	bd08      	pop	{r3, pc}

08001cc4 <_read>:

int _read(int fd, char* ptr, int len) {
 8001cc4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001cc6:	b958      	cbnz	r0, 8001ce0 <_read+0x1c>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4808      	ldr	r0, [pc, #32]	@ (8001cf0 <_read+0x2c>)
 8001cd0:	6800      	ldr	r0, [r0, #0]
 8001cd2:	f004 ff1d 	bl	8006b10 <HAL_UART_Receive>
    if (hstatus == HAL_OK)
      return 1;
 8001cd6:	2800      	cmp	r0, #0
 8001cd8:	bf14      	ite	ne
 8001cda:	2005      	movne	r0, #5
 8001cdc:	2001      	moveq	r0, #1
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 8001cde:	bd08      	pop	{r3, pc}
  errno = EBADF;
 8001ce0:	f007 f976 	bl	8008fd0 <__errno>
 8001ce4:	2309      	movs	r3, #9
 8001ce6:	6003      	str	r3, [r0, #0]
  return -1;
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cec:	e7f7      	b.n	8001cde <_read+0x1a>
 8001cee:	bf00      	nop
 8001cf0:	20003d4c 	.word	0x20003d4c

08001cf4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001cf4:	b508      	push	{r3, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001cf6:	2802      	cmp	r0, #2
 8001cf8:	d804      	bhi.n	8001d04 <_fstat+0x10>
    st->st_mode = S_IFCHR;
 8001cfa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cfe:	604b      	str	r3, [r1, #4]
    return 0;
  }

  errno = EBADF;
  return 0;
}
 8001d00:	2000      	movs	r0, #0
 8001d02:	bd08      	pop	{r3, pc}
  errno = EBADF;
 8001d04:	f007 f964 	bl	8008fd0 <__errno>
 8001d08:	2309      	movs	r3, #9
 8001d0a:	6003      	str	r3, [r0, #0]
  return 0;
 8001d0c:	e7f8      	b.n	8001d00 <_fstat+0xc>
	...

08001d10 <S2LP_Command>:
volatile uint8_t underflow = 0;

volatile uint16_t n_chunks_tx = 0;

HAL_StatusTypeDef S2LP_Command(uint8_t cmd, S2LPStatus *status)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	4603      	mov	r3, r0
 8001d18:	6039      	str	r1, [r7, #0]
 8001d1a:	71fb      	strb	r3, [r7, #7]
	uint8_t TxBuf[2] = {0x80, cmd};
 8001d1c:	2380      	movs	r3, #128	@ 0x80
 8001d1e:	733b      	strb	r3, [r7, #12]
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	737b      	strb	r3, [r7, #13]
 8001d24:	b672      	cpsid	i
}
 8001d26:	bf00      	nop
	uint8_t RxBuf[2];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	480f      	ldr	r0, [pc, #60]	@ (8001d6c <S2LP_Command+0x5c>)
 8001d2e:	f002 fd33 	bl	8004798 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 2, HAL_MAX_DELAY);
 8001d32:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <S2LP_Command+0x60>)
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	f107 0208 	add.w	r2, r7, #8
 8001d3a:	f107 010c 	add.w	r1, r7, #12
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	2302      	movs	r3, #2
 8001d46:	f003 ff7f 	bl	8005c48 <HAL_SPI_TransmitReceive>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001d4e:	2201      	movs	r2, #1
 8001d50:	2101      	movs	r1, #1
 8001d52:	4806      	ldr	r0, [pc, #24]	@ (8001d6c <S2LP_Command+0x5c>)
 8001d54:	f002 fd20 	bl	8004798 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001d58:	b662      	cpsie	i
}
 8001d5a:	bf00      	nop
	__enable_irq();

	memcpy(status, &RxBuf[0], 2);
 8001d5c:	893a      	ldrh	r2, [r7, #8]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	801a      	strh	r2, [r3, #0]
	return err;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3710      	adds	r7, #16
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	48000800 	.word	0x48000800
 8001d70:	20003d54 	.word	0x20003d54

08001d74 <S2LP_ReadReg>:

HAL_StatusTypeDef S2LP_ReadReg(uint8_t addr, uint8_t *retval, S2LPStatus *status)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
 8001d80:	73fb      	strb	r3, [r7, #15]
	uint8_t TxBuf[] = {0x01, addr, 0x0};
 8001d82:	2301      	movs	r3, #1
 8001d84:	753b      	strb	r3, [r7, #20]
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	757b      	strb	r3, [r7, #21]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	75bb      	strb	r3, [r7, #22]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d8e:	b672      	cpsid	i
}
 8001d90:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2101      	movs	r1, #1
 8001d96:	4814      	ldr	r0, [pc, #80]	@ (8001de8 <S2LP_ReadReg+0x74>)
 8001d98:	f002 fcfe 	bl	8004798 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 8001d9c:	4b13      	ldr	r3, [pc, #76]	@ (8001dec <S2LP_ReadReg+0x78>)
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	f107 0210 	add.w	r2, r7, #16
 8001da4:	f107 0114 	add.w	r1, r7, #20
 8001da8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2303      	movs	r3, #3
 8001db0:	f003 ff4a 	bl	8005c48 <HAL_SPI_TransmitReceive>
 8001db4:	4603      	mov	r3, r0
 8001db6:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001db8:	2201      	movs	r2, #1
 8001dba:	2101      	movs	r1, #1
 8001dbc:	480a      	ldr	r0, [pc, #40]	@ (8001de8 <S2LP_ReadReg+0x74>)
 8001dbe:	f002 fceb 	bl	8004798 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001dc2:	b662      	cpsie	i
}
 8001dc4:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d002      	beq.n	8001dd2 <S2LP_ReadReg+0x5e>
		memcpy(status, &RxBuf[0], 2);
 8001dcc:	8a3a      	ldrh	r2, [r7, #16]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	801a      	strh	r2, [r3, #0]
	if (retval != NULL)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <S2LP_ReadReg+0x6a>
		*retval = RxBuf[2];
 8001dd8:	7cba      	ldrb	r2, [r7, #18]
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	701a      	strb	r2, [r3, #0]
	return err;
 8001dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	48000800 	.word	0x48000800
 8001dec:	20003d54 	.word	0x20003d54

08001df0 <S2LP_WriteReg>:

HAL_StatusTypeDef S2LP_WriteReg(uint8_t addr, uint8_t val, S2LPStatus *status)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af02      	add	r7, sp, #8
 8001df6:	4603      	mov	r3, r0
 8001df8:	603a      	str	r2, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	71bb      	strb	r3, [r7, #6]
	uint8_t TxBuf[] = {0x00, addr, val};
 8001e00:	2300      	movs	r3, #0
 8001e02:	733b      	strb	r3, [r7, #12]
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	737b      	strb	r3, [r7, #13]
 8001e08:	79bb      	ldrb	r3, [r7, #6]
 8001e0a:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e0c:	b672      	cpsid	i
}
 8001e0e:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001e10:	2200      	movs	r2, #0
 8001e12:	2101      	movs	r1, #1
 8001e14:	4811      	ldr	r0, [pc, #68]	@ (8001e5c <S2LP_WriteReg+0x6c>)
 8001e16:	f002 fcbf 	bl	8004798 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 8001e1a:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <S2LP_WriteReg+0x70>)
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	f107 0208 	add.w	r2, r7, #8
 8001e22:	f107 010c 	add.w	r1, r7, #12
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	f003 ff0b 	bl	8005c48 <HAL_SPI_TransmitReceive>
 8001e32:	4603      	mov	r3, r0
 8001e34:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001e36:	2201      	movs	r2, #1
 8001e38:	2101      	movs	r1, #1
 8001e3a:	4808      	ldr	r0, [pc, #32]	@ (8001e5c <S2LP_WriteReg+0x6c>)
 8001e3c:	f002 fcac 	bl	8004798 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001e40:	b662      	cpsie	i
}
 8001e42:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <S2LP_WriteReg+0x60>
		memcpy(status, &RxBuf[0], 2);
 8001e4a:	893a      	ldrh	r2, [r7, #8]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	801a      	strh	r2, [r3, #0]
	return err;
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	48000800 	.word	0x48000800
 8001e60:	20003d54 	.word	0x20003d54

08001e64 <S2LP_WriteTxFIFO>:

HAL_StatusTypeDef S2LP_WriteTxFIFO(uint8_t *chunk, uint8_t chunk_len, S2LPStatus *status)
{
 8001e64:	b590      	push	{r4, r7, lr}
 8001e66:	b08d      	sub	sp, #52	@ 0x34
 8001e68:	af02      	add	r7, sp, #8
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	72fb      	strb	r3, [r7, #11]
	uint8_t TxBuf[FIFO_CHUNK_SIZE+2];
	uint8_t RxBuf[FIFO_CHUNK_SIZE+2];
	TxBuf[0] = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	773b      	strb	r3, [r7, #28]
	TxBuf[1] = 0xFF;
 8001e76:	23ff      	movs	r3, #255	@ 0xff
 8001e78:	777b      	strb	r3, [r7, #29]
	memcpy((void *)&TxBuf[2], (void *)chunk, chunk_len);
 8001e7a:	7afa      	ldrb	r2, [r7, #11]
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	3302      	adds	r3, #2
 8001e82:	68f9      	ldr	r1, [r7, #12]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f007 f8d0 	bl	800902a <memcpy>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e8a:	b672      	cpsid	i
}
 8001e8c:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2101      	movs	r1, #1
 8001e92:	4814      	ldr	r0, [pc, #80]	@ (8001ee4 <S2LP_WriteTxFIFO+0x80>)
 8001e94:	f002 fc80 	bl	8004798 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, chunk_len+2, HAL_MAX_DELAY);
 8001e98:	4b13      	ldr	r3, [pc, #76]	@ (8001ee8 <S2LP_WriteTxFIFO+0x84>)
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	7afb      	ldrb	r3, [r7, #11]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	3302      	adds	r3, #2
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	f107 0210 	add.w	r2, r7, #16
 8001ea8:	f107 011c 	add.w	r1, r7, #28
 8001eac:	f04f 34ff 	mov.w	r4, #4294967295
 8001eb0:	9400      	str	r4, [sp, #0]
 8001eb2:	f003 fec9 	bl	8005c48 <HAL_SPI_TransmitReceive>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4808      	ldr	r0, [pc, #32]	@ (8001ee4 <S2LP_WriteTxFIFO+0x80>)
 8001ec2:	f002 fc69 	bl	8004798 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001ec6:	b662      	cpsie	i
}
 8001ec8:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <S2LP_WriteTxFIFO+0x72>
		memcpy(status, &RxBuf[0], 2);
 8001ed0:	8a3a      	ldrh	r2, [r7, #16]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	801a      	strh	r2, [r3, #0]
	return err;
 8001ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	372c      	adds	r7, #44	@ 0x2c
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd90      	pop	{r4, r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	48000800 	.word	0x48000800
 8001ee8:	20003d54 	.word	0x20003d54

08001eec <S2LP_Send>:

HAL_StatusTypeDef S2LP_Send(uint8_t *payload, uint16_t pay_len)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	807b      	strh	r3, [r7, #2]
	S2LPStatus radio_status;
	HAL_StatusTypeDef err;

	// Flush the Tx FIFO
	S2LP_Command(CMD_FLUSHTXFIFO, &radio_status);
 8001ef8:	f107 030c 	add.w	r3, r7, #12
 8001efc:	4619      	mov	r1, r3
 8001efe:	2072      	movs	r0, #114	@ 0x72
 8001f00:	f7ff ff06 	bl	8001d10 <S2LP_Command>
	if (radio_status.MC_STATE != MC_STATE_READY) {
 8001f04:	7b7b      	ldrb	r3, [r7, #13]
 8001f06:	f023 0301 	bic.w	r3, r3, #1
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d004      	beq.n	8001f1a <S2LP_Send+0x2e>
		DEBUG_PRINT("[S2LP] Error: radio is not ready\r\n");
 8001f10:	4864      	ldr	r0, [pc, #400]	@ (80020a4 <S2LP_Send+0x1b8>)
 8001f12:	f006 fe77 	bl	8008c04 <puts>
		return HAL_BUSY;
 8001f16:	2302      	movs	r3, #2
 8001f18:	e0c0      	b.n	800209c <S2LP_Send+0x1b0>
	}
	// Reset global interrupt variables
	packet_sent = 0;
 8001f1a:	4b63      	ldr	r3, [pc, #396]	@ (80020a8 <S2LP_Send+0x1bc>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	701a      	strb	r2, [r3, #0]
	underflow = 0;
 8001f20:	4b62      	ldr	r3, [pc, #392]	@ (80020ac <S2LP_Send+0x1c0>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
	fifo_almost_empty = 0;
 8001f26:	4b62      	ldr	r3, [pc, #392]	@ (80020b0 <S2LP_Send+0x1c4>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]

	// Set the packet length
	S2LP_WriteReg(PCKTLEN1_ADDR, (uint8_t) (pay_len >> 8), NULL);
 8001f2c:	887b      	ldrh	r3, [r7, #2]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2200      	movs	r2, #0
 8001f36:	4619      	mov	r1, r3
 8001f38:	2031      	movs	r0, #49	@ 0x31
 8001f3a:	f7ff ff59 	bl	8001df0 <S2LP_WriteReg>
	S2LP_WriteReg(PCKTLEN0_ADDR, (uint8_t) (pay_len & 0xFF), NULL);
 8001f3e:	887b      	ldrh	r3, [r7, #2]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2200      	movs	r2, #0
 8001f44:	4619      	mov	r1, r3
 8001f46:	2032      	movs	r0, #50	@ 0x32
 8001f48:	f7ff ff52 	bl	8001df0 <S2LP_WriteReg>

	// Switch to lock Tx state
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 8001f4c:	e00f      	b.n	8001f6e <S2LP_Send+0x82>
		err = S2LP_Command(CMD_LOCKTX, &radio_status);
 8001f4e:	f107 030c 	add.w	r3, r7, #12
 8001f52:	4619      	mov	r1, r3
 8001f54:	2066      	movs	r0, #102	@ 0x66
 8001f56:	f7ff fedb 	bl	8001d10 <S2LP_Command>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	73bb      	strb	r3, [r7, #14]
		if (err) {
 8001f5e:	7bbb      	ldrb	r3, [r7, #14]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d004      	beq.n	8001f6e <S2LP_Send+0x82>
			DEBUG_PRINT("[S2LP] Error: cannot lock on Tx\r\n");
 8001f64:	4853      	ldr	r0, [pc, #332]	@ (80020b4 <S2LP_Send+0x1c8>)
 8001f66:	f006 fe4d 	bl	8008c04 <puts>
			return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e096      	b.n	800209c <S2LP_Send+0x1b0>
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 8001f6e:	7b7b      	ldrb	r3, [r7, #13]
 8001f70:	f023 0301 	bic.w	r3, r3, #1
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b18      	cmp	r3, #24
 8001f78:	d1e9      	bne.n	8001f4e <S2LP_Send+0x62>
		}
	}

	// Fill Tx FIFO with payload chunks
	uint8_t sending = 0;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	75fb      	strb	r3, [r7, #23]
	uint16_t n_chunks = (pay_len / FIFO_CHUNK_SIZE) + (pay_len % FIFO_CHUNK_SIZE != 0);
 8001f7e:	887b      	ldrh	r3, [r7, #2]
 8001f80:	08db      	lsrs	r3, r3, #3
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	887a      	ldrh	r2, [r7, #2]
 8001f86:	f002 0207 	and.w	r2, r2, #7
 8001f8a:	b292      	uxth	r2, r2
 8001f8c:	2a00      	cmp	r2, #0
 8001f8e:	bf14      	ite	ne
 8001f90:	2201      	movne	r2, #1
 8001f92:	2200      	moveq	r2, #0
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	4413      	add	r3, r2
 8001f98:	823b      	strh	r3, [r7, #16]

	uint16_t free_chunks = FIFO_SIZE / FIFO_CHUNK_SIZE;
 8001f9a:	2310      	movs	r3, #16
 8001f9c:	82bb      	strh	r3, [r7, #20]

	for(uint16_t i=0; i < n_chunks; i++) {
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	827b      	strh	r3, [r7, #18]
 8001fa2:	e063      	b.n	800206c <S2LP_Send+0x180>
		if (underflow) {
 8001fa4:	4b41      	ldr	r3, [pc, #260]	@ (80020ac <S2LP_Send+0x1c0>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d02f      	beq.n	800200e <S2LP_Send+0x122>
			DEBUG_PRINT("[S2LP] Error: Tx FIFO overflow or underflow!\r\n");
 8001fae:	4842      	ldr	r0, [pc, #264]	@ (80020b8 <S2LP_Send+0x1cc>)
 8001fb0:	f006 fe28 	bl	8008c04 <puts>
			err = S2LP_ReadReg(0, NULL, &radio_status); // fetch radio state
 8001fb4:	f107 030c 	add.w	r3, r7, #12
 8001fb8:	461a      	mov	r2, r3
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2000      	movs	r0, #0
 8001fbe:	f7ff fed9 	bl	8001d74 <S2LP_ReadReg>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	73bb      	strb	r3, [r7, #14]
			if (!err) {
 8001fc6:	7bbb      	ldrb	r3, [r7, #14]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d105      	bne.n	8001fd8 <S2LP_Send+0xec>
				S2LP_PrintStatus(&radio_status);
 8001fcc:	f107 030c 	add.w	r3, r7, #12
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f000 f879 	bl	80020c8 <S2LP_PrintStatus>
 8001fd6:	e002      	b.n	8001fde <S2LP_Send+0xf2>
			} else {
				DEBUG_PRINT("[S2LP] Error: unable to fetch radio status!\r\n");
 8001fd8:	4838      	ldr	r0, [pc, #224]	@ (80020bc <S2LP_Send+0x1d0>)
 8001fda:	f006 fe13 	bl	8008c04 <puts>
			}
			return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e05c      	b.n	800209c <S2LP_Send+0x1b0>
		}

		while (free_chunks == 0) {
			if (!sending) {// if FIFO is full and we are not sending yet ...
 8001fe2:	7dfb      	ldrb	r3, [r7, #23]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d107      	bne.n	8001ff8 <S2LP_Send+0x10c>
				S2LP_Command(CMD_TX, &radio_status); // start the transmission
 8001fe8:	f107 030c 	add.w	r3, r7, #12
 8001fec:	4619      	mov	r1, r3
 8001fee:	2060      	movs	r0, #96	@ 0x60
 8001ff0:	f7ff fe8e 	bl	8001d10 <S2LP_Command>
				sending = 1;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	75fb      	strb	r3, [r7, #23]
			}
//			stop_cycle_count("Radio WFI");
			__WFI();
 8001ff8:	bf30      	wfi
//			start_cycle_count();
			if (fifo_almost_empty) {
 8001ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80020b0 <S2LP_Send+0x1c4>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	2b00      	cmp	r3, #0
 8002002:	d004      	beq.n	800200e <S2LP_Send+0x122>
				free_chunks = FIFO_SIZE/FIFO_CHUNK_SIZE - FIFO_EMPTY_THRESH;
 8002004:	230c      	movs	r3, #12
 8002006:	82bb      	strh	r3, [r7, #20]
				fifo_almost_empty = 0;
 8002008:	4b29      	ldr	r3, [pc, #164]	@ (80020b0 <S2LP_Send+0x1c4>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
		while (free_chunks == 0) {
 800200e:	8abb      	ldrh	r3, [r7, #20]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0e6      	beq.n	8001fe2 <S2LP_Send+0xf6>
			}
		}

		uint8_t chunk_len = (i == n_chunks-1) ? pay_len-(n_chunks-1)*FIFO_CHUNK_SIZE : FIFO_CHUNK_SIZE;
 8002014:	8a7a      	ldrh	r2, [r7, #18]
 8002016:	8a3b      	ldrh	r3, [r7, #16]
 8002018:	3b01      	subs	r3, #1
 800201a:	429a      	cmp	r2, r3
 800201c:	d109      	bne.n	8002032 <S2LP_Send+0x146>
 800201e:	887b      	ldrh	r3, [r7, #2]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	8a3b      	ldrh	r3, [r7, #16]
 8002024:	3b01      	subs	r3, #1
 8002026:	b2db      	uxtb	r3, r3
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	b2db      	uxtb	r3, r3
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	b2db      	uxtb	r3, r3
 8002030:	e000      	b.n	8002034 <S2LP_Send+0x148>
 8002032:	2308      	movs	r3, #8
 8002034:	73fb      	strb	r3, [r7, #15]
		err = S2LP_WriteTxFIFO(&payload[i*FIFO_CHUNK_SIZE], chunk_len, &radio_status);
 8002036:	8a7b      	ldrh	r3, [r7, #18]
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	461a      	mov	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4413      	add	r3, r2
 8002040:	f107 020c 	add.w	r2, r7, #12
 8002044:	7bf9      	ldrb	r1, [r7, #15]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff ff0c 	bl	8001e64 <S2LP_WriteTxFIFO>
 800204c:	4603      	mov	r3, r0
 800204e:	73bb      	strb	r3, [r7, #14]
		if (err) {
 8002050:	7bbb      	ldrb	r3, [r7, #14]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d004      	beq.n	8002060 <S2LP_Send+0x174>
			DEBUG_PRINT("[S2LP] Error: cannot fill Tx FIFO\r\n");
 8002056:	481a      	ldr	r0, [pc, #104]	@ (80020c0 <S2LP_Send+0x1d4>)
 8002058:	f006 fdd4 	bl	8008c04 <puts>
			return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e01d      	b.n	800209c <S2LP_Send+0x1b0>
		}
		free_chunks--;
 8002060:	8abb      	ldrh	r3, [r7, #20]
 8002062:	3b01      	subs	r3, #1
 8002064:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i < n_chunks; i++) {
 8002066:	8a7b      	ldrh	r3, [r7, #18]
 8002068:	3301      	adds	r3, #1
 800206a:	827b      	strh	r3, [r7, #18]
 800206c:	8a7a      	ldrh	r2, [r7, #18]
 800206e:	8a3b      	ldrh	r3, [r7, #16]
 8002070:	429a      	cmp	r2, r3
 8002072:	d397      	bcc.n	8001fa4 <S2LP_Send+0xb8>
	}

	// Start transmission (for short payloads)
	if (!sending) {
 8002074:	7dfb      	ldrb	r3, [r7, #23]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d107      	bne.n	800208a <S2LP_Send+0x19e>
		S2LP_Command(CMD_TX, &radio_status);
 800207a:	f107 030c 	add.w	r3, r7, #12
 800207e:	4619      	mov	r1, r3
 8002080:	2060      	movs	r0, #96	@ 0x60
 8002082:	f7ff fe45 	bl	8001d10 <S2LP_Command>
	}

	while (!packet_sent) {
 8002086:	e000      	b.n	800208a <S2LP_Send+0x19e>
//		stop_cycle_count("Radio WFI");
		__WFI(); // wait until packet has been fully transmitted
 8002088:	bf30      	wfi
	while (!packet_sent) {
 800208a:	4b07      	ldr	r3, [pc, #28]	@ (80020a8 <S2LP_Send+0x1bc>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0f9      	beq.n	8002088 <S2LP_Send+0x19c>
//		start_cycle_count();
	}

	DEBUG_PRINT("[S2LP] Packet transmitted!\r\n");
 8002094:	480b      	ldr	r0, [pc, #44]	@ (80020c4 <S2LP_Send+0x1d8>)
 8002096:	f006 fdb5 	bl	8008c04 <puts>
	return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	0800ac88 	.word	0x0800ac88
 80020a8:	20003d50 	.word	0x20003d50
 80020ac:	20003d52 	.word	0x20003d52
 80020b0:	20003d51 	.word	0x20003d51
 80020b4:	0800acac 	.word	0x0800acac
 80020b8:	0800acd0 	.word	0x0800acd0
 80020bc:	0800ad00 	.word	0x0800ad00
 80020c0:	0800ad30 	.word	0x0800ad30
 80020c4:	0800ad54 	.word	0x0800ad54

080020c8 <S2LP_PrintStatus>:

void S2LP_PrintStatus(S2LPStatus *status)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	6078      	str	r0, [r7, #4]
	DEBUG_PRINT("=== S2LP Status ===\r\n");
 80020d0:	486f      	ldr	r0, [pc, #444]	@ (8002290 <S2LP_PrintStatus+0x1c8>)
 80020d2:	f006 fd97 	bl	8008c04 <puts>
	DEBUG_PRINT("  MC_STATE: ");
 80020d6:	486f      	ldr	r0, [pc, #444]	@ (8002294 <S2LP_PrintStatus+0x1cc>)
 80020d8:	f006 fd2c 	bl	8008b34 <iprintf>
	switch (status->MC_STATE) {
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	785b      	ldrb	r3, [r3, #1]
 80020e0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b5c      	cmp	r3, #92	@ 0x5c
 80020e8:	f000 808f 	beq.w	800220a <S2LP_PrintStatus+0x142>
 80020ec:	2b5c      	cmp	r3, #92	@ 0x5c
 80020ee:	f300 8094 	bgt.w	800221a <S2LP_PrintStatus+0x152>
 80020f2:	2b30      	cmp	r3, #48	@ 0x30
 80020f4:	dc6a      	bgt.n	80021cc <S2LP_PrintStatus+0x104>
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f2c0 808f 	blt.w	800221a <S2LP_PrintStatus+0x152>
 80020fc:	2b30      	cmp	r3, #48	@ 0x30
 80020fe:	f200 808c 	bhi.w	800221a <S2LP_PrintStatus+0x152>
 8002102:	a201      	add	r2, pc, #4	@ (adr r2, 8002108 <S2LP_PrintStatus+0x40>)
 8002104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002108:	080021d3 	.word	0x080021d3
 800210c:	080021eb 	.word	0x080021eb
 8002110:	080021db 	.word	0x080021db
 8002114:	080021e3 	.word	0x080021e3
 8002118:	0800221b 	.word	0x0800221b
 800211c:	0800221b 	.word	0x0800221b
 8002120:	0800221b 	.word	0x0800221b
 8002124:	0800221b 	.word	0x0800221b
 8002128:	0800221b 	.word	0x0800221b
 800212c:	0800221b 	.word	0x0800221b
 8002130:	0800221b 	.word	0x0800221b
 8002134:	0800221b 	.word	0x0800221b
 8002138:	080021f3 	.word	0x080021f3
 800213c:	0800221b 	.word	0x0800221b
 8002140:	0800221b 	.word	0x0800221b
 8002144:	0800221b 	.word	0x0800221b
 8002148:	0800221b 	.word	0x0800221b
 800214c:	0800221b 	.word	0x0800221b
 8002150:	0800221b 	.word	0x0800221b
 8002154:	0800221b 	.word	0x0800221b
 8002158:	08002203 	.word	0x08002203
 800215c:	0800221b 	.word	0x0800221b
 8002160:	0800221b 	.word	0x0800221b
 8002164:	0800221b 	.word	0x0800221b
 8002168:	0800221b 	.word	0x0800221b
 800216c:	0800221b 	.word	0x0800221b
 8002170:	0800221b 	.word	0x0800221b
 8002174:	0800221b 	.word	0x0800221b
 8002178:	0800221b 	.word	0x0800221b
 800217c:	0800221b 	.word	0x0800221b
 8002180:	0800221b 	.word	0x0800221b
 8002184:	0800221b 	.word	0x0800221b
 8002188:	0800221b 	.word	0x0800221b
 800218c:	0800221b 	.word	0x0800221b
 8002190:	0800221b 	.word	0x0800221b
 8002194:	0800221b 	.word	0x0800221b
 8002198:	0800221b 	.word	0x0800221b
 800219c:	0800221b 	.word	0x0800221b
 80021a0:	0800221b 	.word	0x0800221b
 80021a4:	0800221b 	.word	0x0800221b
 80021a8:	0800221b 	.word	0x0800221b
 80021ac:	0800221b 	.word	0x0800221b
 80021b0:	0800221b 	.word	0x0800221b
 80021b4:	0800221b 	.word	0x0800221b
 80021b8:	0800221b 	.word	0x0800221b
 80021bc:	0800221b 	.word	0x0800221b
 80021c0:	0800221b 	.word	0x0800221b
 80021c4:	0800221b 	.word	0x0800221b
 80021c8:	080021fb 	.word	0x080021fb
 80021cc:	2b50      	cmp	r3, #80	@ 0x50
 80021ce:	d020      	beq.n	8002212 <S2LP_PrintStatus+0x14a>
 80021d0:	e023      	b.n	800221a <S2LP_PrintStatus+0x152>
		case (MC_STATE_READY):
			DEBUG_PRINT("READY");
 80021d2:	4831      	ldr	r0, [pc, #196]	@ (8002298 <S2LP_PrintStatus+0x1d0>)
 80021d4:	f006 fcae 	bl	8008b34 <iprintf>
			break;
 80021d8:	e023      	b.n	8002222 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_STANDBY):
			DEBUG_PRINT("STANDBY");
 80021da:	4830      	ldr	r0, [pc, #192]	@ (800229c <S2LP_PrintStatus+0x1d4>)
 80021dc:	f006 fcaa 	bl	8008b34 <iprintf>
			break;
 80021e0:	e01f      	b.n	8002222 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SLEEP):
			DEBUG_PRINT("SLEEP");
 80021e2:	482f      	ldr	r0, [pc, #188]	@ (80022a0 <S2LP_PrintStatus+0x1d8>)
 80021e4:	f006 fca6 	bl	8008b34 <iprintf>
			break;
 80021e8:	e01b      	b.n	8002222 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SLEEP_NOFIFO):
			DEBUG_PRINT("SLEEP");
 80021ea:	482d      	ldr	r0, [pc, #180]	@ (80022a0 <S2LP_PrintStatus+0x1d8>)
 80021ec:	f006 fca2 	bl	8008b34 <iprintf>
			break;
 80021f0:	e017      	b.n	8002222 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_LOCKON):
			DEBUG_PRINT("LOCKON");
 80021f2:	482c      	ldr	r0, [pc, #176]	@ (80022a4 <S2LP_PrintStatus+0x1dc>)
 80021f4:	f006 fc9e 	bl	8008b34 <iprintf>
			break;
 80021f8:	e013      	b.n	8002222 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_RX):
			DEBUG_PRINT("RX");
 80021fa:	482b      	ldr	r0, [pc, #172]	@ (80022a8 <S2LP_PrintStatus+0x1e0>)
 80021fc:	f006 fc9a 	bl	8008b34 <iprintf>
			break;
 8002200:	e00f      	b.n	8002222 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_LOCK_ST):
			DEBUG_PRINT("LOCK_ST");
 8002202:	482a      	ldr	r0, [pc, #168]	@ (80022ac <S2LP_PrintStatus+0x1e4>)
 8002204:	f006 fc96 	bl	8008b34 <iprintf>
			break;
 8002208:	e00b      	b.n	8002222 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_TX):
			DEBUG_PRINT("TX");
 800220a:	4829      	ldr	r0, [pc, #164]	@ (80022b0 <S2LP_PrintStatus+0x1e8>)
 800220c:	f006 fc92 	bl	8008b34 <iprintf>
			break;
 8002210:	e007      	b.n	8002222 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SYNTH_SETUP):
			DEBUG_PRINT("SYNTH_SETUP");
 8002212:	4828      	ldr	r0, [pc, #160]	@ (80022b4 <S2LP_PrintStatus+0x1ec>)
 8002214:	f006 fc8e 	bl	8008b34 <iprintf>
			break;
 8002218:	e003      	b.n	8002222 <S2LP_PrintStatus+0x15a>
		default:
			DEBUG_PRINT("UNKNOWN");
 800221a:	4827      	ldr	r0, [pc, #156]	@ (80022b8 <S2LP_PrintStatus+0x1f0>)
 800221c:	f006 fc8a 	bl	8008b34 <iprintf>
			break;
 8002220:	bf00      	nop
	}
	DEBUG_PRINT("\r\n");
 8002222:	4826      	ldr	r0, [pc, #152]	@ (80022bc <S2LP_PrintStatus+0x1f4>)
 8002224:	f006 fcee 	bl	8008c04 <puts>
	DEBUG_PRINT("  XO_ON=%u, ERROR_LOCK=%u, RX_fifo_empty=%u, TX_FIFO_FULL=%u\r\n",
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	785b      	ldrb	r3, [r3, #1]
 800222c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002230:	b2db      	uxtb	r3, r3
 8002232:	4619      	mov	r1, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800223c:	b2db      	uxtb	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002248:	b2db      	uxtb	r3, r3
 800224a:	4618      	mov	r0, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002254:	b2db      	uxtb	r3, r3
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	4603      	mov	r3, r0
 800225a:	4819      	ldr	r0, [pc, #100]	@ (80022c0 <S2LP_PrintStatus+0x1f8>)
 800225c:	f006 fc6a 	bl	8008b34 <iprintf>
			status->XO_ON, status->ERROR_LOCK, status->RX_FIFO_EMPTY, status->TX_FIFO_FULL);
	DEBUG_PRINT("  ANT_SELECT=%u, RCCAL_OK=%u, RES=%u\r\n", status->ANT_SELECT, status->RCCAL_OK, status->RESERVED);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002268:	b2db      	uxtb	r3, r3
 800226a:	4619      	mov	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002274:	b2db      	uxtb	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	4810      	ldr	r0, [pc, #64]	@ (80022c4 <S2LP_PrintStatus+0x1fc>)
 8002284:	f006 fc56 	bl	8008b34 <iprintf>
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	0800ad70 	.word	0x0800ad70
 8002294:	0800ad88 	.word	0x0800ad88
 8002298:	0800ad98 	.word	0x0800ad98
 800229c:	0800ada0 	.word	0x0800ada0
 80022a0:	0800ada8 	.word	0x0800ada8
 80022a4:	0800adb0 	.word	0x0800adb0
 80022a8:	0800adb8 	.word	0x0800adb8
 80022ac:	0800adbc 	.word	0x0800adbc
 80022b0:	0800adc4 	.word	0x0800adc4
 80022b4:	0800adc8 	.word	0x0800adc8
 80022b8:	0800add4 	.word	0x0800add4
 80022bc:	0800addc 	.word	0x0800addc
 80022c0:	0800ade0 	.word	0x0800ade0
 80022c4:	0800ae20 	.word	0x0800ae20

080022c8 <S2LP_PLLConf>:
* @param  pfd_split pointer to the pfd register value.
* @param  lFc channel center frequency expressed in Hz (from 779 MHz to 915 MHz)
* @retval uint8_t Charge pump word.
*/
void S2LP_PLLConf(int32_t lFc)
{
 80022c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022cc:	b09e      	sub	sp, #120	@ 0x78
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
  uint32_t vcofreq, lFRef;
  uint8_t BFactor = 4; // 779-915 MHz range
 80022d2:	2304      	movs	r3, #4
 80022d4:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
  uint8_t refdiv = 1; // REFDIV=0 (XO_RCO_CONF0) by default
 80022d8:	2301      	movs	r3, #1
 80022da:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

  /* Calculates the syntheziser band select */
  uint64_t tgt1,tgt2,tgt;
  uint32_t synth;

  tgt = (((uint64_t)lFc)<<19)*(BFactor*refdiv);
 80022de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022e0:	17da      	asrs	r2, r3, #31
 80022e2:	469a      	mov	sl, r3
 80022e4:	4693      	mov	fp, r2
 80022e6:	ea4f 396a 	mov.w	r9, sl, asr #13
 80022ea:	ea4f 48ca 	mov.w	r8, sl, lsl #19
 80022ee:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 80022f2:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80022f6:	fb02 f303 	mul.w	r3, r2, r3
 80022fa:	17da      	asrs	r2, r3, #31
 80022fc:	623b      	str	r3, [r7, #32]
 80022fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8002300:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002304:	4603      	mov	r3, r0
 8002306:	fb03 f209 	mul.w	r2, r3, r9
 800230a:	460b      	mov	r3, r1
 800230c:	fb08 f303 	mul.w	r3, r8, r3
 8002310:	4413      	add	r3, r2
 8002312:	4602      	mov	r2, r0
 8002314:	fba8 4502 	umull	r4, r5, r8, r2
 8002318:	442b      	add	r3, r5
 800231a:	461d      	mov	r5, r3
 800231c:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
 8002320:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
  synth=(uint32_t)(tgt/XTAL_FREQ);
 8002324:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002328:	a374      	add	r3, pc, #464	@ (adr r3, 80024fc <S2LP_PLLConf+0x234>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	f7fe fc4b 	bl	8000bc8 <__aeabi_uldivmod>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4613      	mov	r3, r2
 8002338:	667b      	str	r3, [r7, #100]	@ 0x64
  tgt1 = (uint64_t)XTAL_FREQ*(synth);
 800233a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800233c:	2200      	movs	r2, #0
 800233e:	61bb      	str	r3, [r7, #24]
 8002340:	61fa      	str	r2, [r7, #28]
 8002342:	4b6b      	ldr	r3, [pc, #428]	@ (80024f0 <S2LP_PLLConf+0x228>)
 8002344:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002348:	462a      	mov	r2, r5
 800234a:	fb03 f202 	mul.w	r2, r3, r2
 800234e:	2300      	movs	r3, #0
 8002350:	4621      	mov	r1, r4
 8002352:	fb01 f303 	mul.w	r3, r1, r3
 8002356:	4413      	add	r3, r2
 8002358:	4a65      	ldr	r2, [pc, #404]	@ (80024f0 <S2LP_PLLConf+0x228>)
 800235a:	4621      	mov	r1, r4
 800235c:	fba1 1202 	umull	r1, r2, r1, r2
 8002360:	637a      	str	r2, [r7, #52]	@ 0x34
 8002362:	460a      	mov	r2, r1
 8002364:	633a      	str	r2, [r7, #48]	@ 0x30
 8002366:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002368:	4413      	add	r3, r2
 800236a:	637b      	str	r3, [r7, #52]	@ 0x34
 800236c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8002370:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
 8002374:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
  tgt2 = (uint64_t)XTAL_FREQ*(synth+1);
 8002378:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800237a:	3301      	adds	r3, #1
 800237c:	2200      	movs	r2, #0
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	617a      	str	r2, [r7, #20]
 8002382:	4b5b      	ldr	r3, [pc, #364]	@ (80024f0 <S2LP_PLLConf+0x228>)
 8002384:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002388:	462a      	mov	r2, r5
 800238a:	fb03 f202 	mul.w	r2, r3, r2
 800238e:	2300      	movs	r3, #0
 8002390:	4621      	mov	r1, r4
 8002392:	fb01 f303 	mul.w	r3, r1, r3
 8002396:	4413      	add	r3, r2
 8002398:	4a55      	ldr	r2, [pc, #340]	@ (80024f0 <S2LP_PLLConf+0x228>)
 800239a:	4621      	mov	r1, r4
 800239c:	fba1 1202 	umull	r1, r2, r1, r2
 80023a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023a2:	460a      	mov	r2, r1
 80023a4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80023a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023a8:	4413      	add	r3, r2
 80023aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023ac:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80023b0:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
 80023b4:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50

  synth=((tgt2-tgt)<(tgt-tgt1))?(synth+1):(synth);
 80023b8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80023bc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80023c0:	1a84      	subs	r4, r0, r2
 80023c2:	60bc      	str	r4, [r7, #8]
 80023c4:	eb61 0303 	sbc.w	r3, r1, r3
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80023ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80023d2:	1a84      	subs	r4, r0, r2
 80023d4:	603c      	str	r4, [r7, #0]
 80023d6:	eb61 0303 	sbc.w	r3, r1, r3
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023e0:	4623      	mov	r3, r4
 80023e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023e6:	4602      	mov	r2, r0
 80023e8:	4293      	cmp	r3, r2
 80023ea:	462b      	mov	r3, r5
 80023ec:	460a      	mov	r2, r1
 80023ee:	4193      	sbcs	r3, r2
 80023f0:	d202      	bcs.n	80023f8 <S2LP_PLLConf+0x130>
 80023f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023f4:	3301      	adds	r3, #1
 80023f6:	e000      	b.n	80023fa <S2LP_PLLConf+0x132>
 80023f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023fa:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc*BFactor;
 80023fc:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002400:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Calculates the reference frequency clock */
  lFRef = XTAL_FREQ/refdiv;
 8002408:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800240c:	4a38      	ldr	r2, [pc, #224]	@ (80024f0 <S2LP_PLLConf+0x228>)
 800240e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002412:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Set the correct charge pump word */
  if (vcofreq >= VCO_CENTER_FREQ) {
 8002414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002416:	4a37      	ldr	r2, [pc, #220]	@ (80024f4 <S2LP_PLLConf+0x22c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d911      	bls.n	8002440 <S2LP_PLLConf+0x178>
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 800241c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800241e:	4a36      	ldr	r2, [pc, #216]	@ (80024f8 <S2LP_PLLConf+0x230>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d906      	bls.n	8002432 <S2LP_PLLConf+0x16a>
      cp_isel = 0x02;
 8002424:	2302      	movs	r3, #2
 8002426:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 800242a:	2300      	movs	r3, #0
 800242c:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002430:	e017      	b.n	8002462 <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x01;
 8002432:	2301      	movs	r3, #1
 8002434:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 8002438:	2301      	movs	r3, #1
 800243a:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800243e:	e010      	b.n	8002462 <S2LP_PLLConf+0x19a>
    }
  }
  else {
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8002440:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002442:	4a2d      	ldr	r2, [pc, #180]	@ (80024f8 <S2LP_PLLConf+0x230>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d906      	bls.n	8002456 <S2LP_PLLConf+0x18e>
      cp_isel = 0x03;
 8002448:	2303      	movs	r3, #3
 800244a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002454:	e005      	b.n	8002462 <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x02;
 8002456:	2302      	movs	r3, #2
 8002458:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 800245c:	2301      	movs	r3, #1
 800245e:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    }
  }

  //DEBUG_PRINT("SYNT: %lu, cp_ise=%u, pfd_split=%u\r\n", synth, cp_isel, pfd_split);

  uint8_t SYNT3 = (uint8_t) ((cp_isel << 5) | (synth >> 24));
 8002462:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8002466:	015b      	lsls	r3, r3, #5
 8002468:	b2da      	uxtb	r2, r3
 800246a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800246c:	0e1b      	lsrs	r3, r3, #24
 800246e:	b2db      	uxtb	r3, r3
 8002470:	4313      	orrs	r3, r2
 8002472:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint8_t SYNT2 = (uint8_t) ((synth >> 16) & 0xFF);
 8002476:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002478:	0c1b      	lsrs	r3, r3, #16
 800247a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint8_t SYNT1 = (uint8_t) ((synth >> 8) & 0xFF);
 800247e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002480:	0a1b      	lsrs	r3, r3, #8
 8002482:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  uint8_t SYNT0 = (uint8_t) ((synth >> 0) & 0xFF);
 8002486:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002488:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

  uint8_t SYNTH_CONFIG2 = 0xD0 + (pfd_split << 2);
 800248c:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	b2db      	uxtb	r3, r3
 8002494:	3b30      	subs	r3, #48	@ 0x30
 8002496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  S2LP_WriteReg(SYNT3_ADDR, SYNT3, NULL);
 800249a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800249e:	2200      	movs	r2, #0
 80024a0:	4619      	mov	r1, r3
 80024a2:	2005      	movs	r0, #5
 80024a4:	f7ff fca4 	bl	8001df0 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT2_ADDR, SYNT2, NULL);
 80024a8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80024ac:	2200      	movs	r2, #0
 80024ae:	4619      	mov	r1, r3
 80024b0:	2006      	movs	r0, #6
 80024b2:	f7ff fc9d 	bl	8001df0 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT1_ADDR, SYNT1, NULL);
 80024b6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80024ba:	2200      	movs	r2, #0
 80024bc:	4619      	mov	r1, r3
 80024be:	2007      	movs	r0, #7
 80024c0:	f7ff fc96 	bl	8001df0 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT0_ADDR, SYNT0, NULL);
 80024c4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80024c8:	2200      	movs	r2, #0
 80024ca:	4619      	mov	r1, r3
 80024cc:	2008      	movs	r0, #8
 80024ce:	f7ff fc8f 	bl	8001df0 <S2LP_WriteReg>
  S2LP_WriteReg(SYNTH_CONFIG2_ADDR, SYNTH_CONFIG2, NULL);
 80024d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80024d6:	2200      	movs	r2, #0
 80024d8:	4619      	mov	r1, r3
 80024da:	2065      	movs	r0, #101	@ 0x65
 80024dc:	f7ff fc88 	bl	8001df0 <S2LP_WriteReg>
}
 80024e0:	bf00      	nop
 80024e2:	3778      	adds	r7, #120	@ 0x78
 80024e4:	46bd      	mov	sp, r7
 80024e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ea:	bf00      	nop
 80024ec:	f3af 8000 	nop.w
 80024f0:	02faf080 	.word	0x02faf080
 80024f4:	d693a3ff 	.word	0xd693a3ff
 80024f8:	01c9c380 	.word	0x01c9c380
 80024fc:	02faf080 	.word	0x02faf080
 8002500:	00000000 	.word	0x00000000

08002504 <ComputeDatarate>:

uint32_t ComputeDatarate(uint16_t cM, uint8_t cE)
{
 8002504:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002508:	b091      	sub	sp, #68	@ 0x44
 800250a:	af00      	add	r7, sp, #0
 800250c:	4603      	mov	r3, r0
 800250e:	460a      	mov	r2, r1
 8002510:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002512:	4613      	mov	r3, r2
 8002514:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint32_t f_dig=XTAL_FREQ;
 8002518:	4b3f      	ldr	r3, [pc, #252]	@ (8002618 <ComputeDatarate+0x114>)
 800251a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint64_t dr;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 800251c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800251e:	4b3f      	ldr	r3, [pc, #252]	@ (800261c <ComputeDatarate+0x118>)
 8002520:	429a      	cmp	r2, r3
 8002522:	d902      	bls.n	800252a <ComputeDatarate+0x26>
    f_dig >>= 1;
 8002524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002526:	085b      	lsrs	r3, r3, #1
 8002528:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  if(cE==0) {
 800252a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800252e:	2b00      	cmp	r3, #0
 8002530:	d128      	bne.n	8002584 <ComputeDatarate+0x80>
    dr=((uint64_t)f_dig*cM);
 8002532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002534:	2200      	movs	r2, #0
 8002536:	61bb      	str	r3, [r7, #24]
 8002538:	61fa      	str	r2, [r7, #28]
 800253a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800253c:	2200      	movs	r2, #0
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	617a      	str	r2, [r7, #20]
 8002542:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002546:	462b      	mov	r3, r5
 8002548:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800254c:	4642      	mov	r2, r8
 800254e:	fb02 f203 	mul.w	r2, r2, r3
 8002552:	464b      	mov	r3, r9
 8002554:	4621      	mov	r1, r4
 8002556:	fb01 f303 	mul.w	r3, r1, r3
 800255a:	4413      	add	r3, r2
 800255c:	4622      	mov	r2, r4
 800255e:	4641      	mov	r1, r8
 8002560:	fba2 ab01 	umull	sl, fp, r2, r1
 8002564:	445b      	add	r3, fp
 8002566:	469b      	mov	fp, r3
 8002568:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
 800256c:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
    return (uint32_t)(dr>>32);
 8002570:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	000a      	movs	r2, r1
 800257e:	2300      	movs	r3, #0
 8002580:	4613      	mov	r3, r2
 8002582:	e043      	b.n	800260c <ComputeDatarate+0x108>
  }

  dr=((uint64_t)f_dig)*((uint64_t)cM+65536);
 8002584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002586:	2200      	movs	r2, #0
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	60fa      	str	r2, [r7, #12]
 800258c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800258e:	2200      	movs	r2, #0
 8002590:	603b      	str	r3, [r7, #0]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002598:	460b      	mov	r3, r1
 800259a:	f513 3380 	adds.w	r3, r3, #65536	@ 0x10000
 800259e:	623b      	str	r3, [r7, #32]
 80025a0:	4613      	mov	r3, r2
 80025a2:	f143 0300 	adc.w	r3, r3, #0
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80025ac:	460b      	mov	r3, r1
 80025ae:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 80025b2:	4652      	mov	r2, sl
 80025b4:	fb02 f203 	mul.w	r2, r2, r3
 80025b8:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 80025bc:	465b      	mov	r3, fp
 80025be:	4682      	mov	sl, r0
 80025c0:	468b      	mov	fp, r1
 80025c2:	4651      	mov	r1, sl
 80025c4:	fb01 f303 	mul.w	r3, r1, r3
 80025c8:	4413      	add	r3, r2
 80025ca:	4652      	mov	r2, sl
 80025cc:	6a39      	ldr	r1, [r7, #32]
 80025ce:	fba2 4501 	umull	r4, r5, r2, r1
 80025d2:	442b      	add	r3, r5
 80025d4:	461d      	mov	r5, r3
 80025d6:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
 80025da:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30

  return (uint32_t)(dr>>(33-cE));
 80025de:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80025e2:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 80025e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80025ea:	f1c1 0420 	rsb	r4, r1, #32
 80025ee:	f1a1 0020 	sub.w	r0, r1, #32
 80025f2:	fa22 f801 	lsr.w	r8, r2, r1
 80025f6:	fa03 f404 	lsl.w	r4, r3, r4
 80025fa:	ea48 0804 	orr.w	r8, r8, r4
 80025fe:	fa23 f000 	lsr.w	r0, r3, r0
 8002602:	ea48 0800 	orr.w	r8, r8, r0
 8002606:	fa23 f901 	lsr.w	r9, r3, r1
 800260a:	4643      	mov	r3, r8
}
 800260c:	4618      	mov	r0, r3
 800260e:	3744      	adds	r7, #68	@ 0x44
 8002610:	46bd      	mov	sp, r7
 8002612:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002616:	4770      	bx	lr
 8002618:	02faf080 	.word	0x02faf080
 800261c:	01c9c380 	.word	0x01c9c380

08002620 <SearchDatarateME>:

void SearchDatarateME(uint32_t lDatarate, uint16_t* pcM, uint8_t* pcE)
{
 8002620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002624:	b0ae      	sub	sp, #184	@ 0xb8
 8002626:	af00      	add	r7, sp, #0
 8002628:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 800262c:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 8002630:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
  uint32_t lDatarateTmp, f_dig=XTAL_FREQ;
 8002634:	4ba5      	ldr	r3, [pc, #660]	@ (80028cc <SearchDatarateME+0x2ac>)
 8002636:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint8_t uDrE;
  uint64_t tgt1,tgt2,tgt;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 800263a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800263e:	4ba4      	ldr	r3, [pc, #656]	@ (80028d0 <SearchDatarateME+0x2b0>)
 8002640:	429a      	cmp	r2, r3
 8002642:	d904      	bls.n	800264e <SearchDatarateME+0x2e>
    f_dig >>= 1;
 8002644:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002648:	085b      	lsrs	r3, r3, #1
 800264a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  }

  /* Search the exponent value */
  for(uDrE = 0; uDrE != 12; uDrE++) {
 800264e:	2300      	movs	r3, #0
 8002650:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8002654:	e013      	b.n	800267e <SearchDatarateME+0x5e>
    lDatarateTmp = ComputeDatarate(0xFFFF, uDrE);
 8002656:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800265a:	4619      	mov	r1, r3
 800265c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002660:	f7ff ff50 	bl	8002504 <ComputeDatarate>
 8002664:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    if(lDatarate<=lDatarateTmp)
 8002668:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800266c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002670:	429a      	cmp	r2, r3
 8002672:	d909      	bls.n	8002688 <SearchDatarateME+0x68>
  for(uDrE = 0; uDrE != 12; uDrE++) {
 8002674:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002678:	3301      	adds	r3, #1
 800267a:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 800267e:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002682:	2b0c      	cmp	r3, #12
 8002684:	d1e7      	bne.n	8002656 <SearchDatarateME+0x36>
 8002686:	e000      	b.n	800268a <SearchDatarateME+0x6a>
      break;
 8002688:	bf00      	nop
  }
  (*pcE) = (uint8_t)uDrE;
 800268a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800268e:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002692:	7013      	strb	r3, [r2, #0]

  if(uDrE==0) {
 8002694:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d16b      	bne.n	8002774 <SearchDatarateME+0x154>
    tgt=((uint64_t)lDatarate)<<32;
 800269c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026a0:	2200      	movs	r2, #0
 80026a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80026a4:	667a      	str	r2, [r7, #100]	@ 0x64
 80026a6:	f04f 0200 	mov.w	r2, #0
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80026b0:	000b      	movs	r3, r1
 80026b2:	2200      	movs	r2, #0
 80026b4:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)(tgt/f_dig);
 80026b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80026bc:	2200      	movs	r2, #0
 80026be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026c0:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80026c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026c6:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80026ca:	f7fe fa7d 	bl	8000bc8 <__aeabi_uldivmod>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	b293      	uxth	r3, r2
 80026d4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80026d8:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*(*pcM);
 80026da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80026de:	2200      	movs	r2, #0
 80026e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80026e2:	657a      	str	r2, [r7, #84]	@ 0x54
 80026e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	b29b      	uxth	r3, r3
 80026ec:	2200      	movs	r2, #0
 80026ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026f0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80026f2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80026f6:	462b      	mov	r3, r5
 80026f8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80026fc:	4642      	mov	r2, r8
 80026fe:	fb02 f203 	mul.w	r2, r2, r3
 8002702:	464b      	mov	r3, r9
 8002704:	4621      	mov	r1, r4
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	4413      	add	r3, r2
 800270c:	4622      	mov	r2, r4
 800270e:	4641      	mov	r1, r8
 8002710:	fba2 1201 	umull	r1, r2, r2, r1
 8002714:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002716:	460a      	mov	r2, r1
 8002718:	67ba      	str	r2, [r7, #120]	@ 0x78
 800271a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800271c:	4413      	add	r3, r2
 800271e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002720:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8002724:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 8002728:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1);
 800272c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002730:	2200      	movs	r2, #0
 8002732:	643b      	str	r3, [r7, #64]	@ 0x40
 8002734:	647a      	str	r2, [r7, #68]	@ 0x44
 8002736:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800273a:	881b      	ldrh	r3, [r3, #0]
 800273c:	3301      	adds	r3, #1
 800273e:	17da      	asrs	r2, r3, #31
 8002740:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002742:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002744:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8002748:	462b      	mov	r3, r5
 800274a:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800274e:	4642      	mov	r2, r8
 8002750:	fb02 f203 	mul.w	r2, r2, r3
 8002754:	464b      	mov	r3, r9
 8002756:	4621      	mov	r1, r4
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	4622      	mov	r2, r4
 8002760:	4641      	mov	r1, r8
 8002762:	fba2 ab01 	umull	sl, fp, r2, r1
 8002766:	445b      	add	r3, fp
 8002768:	469b      	mov	fp, r3
 800276a:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 800276e:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 8002772:	e07d      	b.n	8002870 <SearchDatarateME+0x250>
  }
  else {
    tgt=((uint64_t)lDatarate)<<(33-uDrE);
 8002774:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002778:	2200      	movs	r2, #0
 800277a:	4698      	mov	r8, r3
 800277c:	4691      	mov	r9, r2
 800277e:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002782:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 8002786:	f1a1 0320 	sub.w	r3, r1, #32
 800278a:	f1c1 0220 	rsb	r2, r1, #32
 800278e:	fa09 f501 	lsl.w	r5, r9, r1
 8002792:	fa08 f303 	lsl.w	r3, r8, r3
 8002796:	431d      	orrs	r5, r3
 8002798:	fa28 f202 	lsr.w	r2, r8, r2
 800279c:	4315      	orrs	r5, r2
 800279e:	fa08 f401 	lsl.w	r4, r8, r1
 80027a2:	e9c7 4526 	strd	r4, r5, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)((tgt/f_dig)-65536);
 80027a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80027aa:	2200      	movs	r2, #0
 80027ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80027ae:	637a      	str	r2, [r7, #52]	@ 0x34
 80027b0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80027b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80027b8:	f7fe fa06 	bl	8000bc8 <__aeabi_uldivmod>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	b293      	uxth	r3, r2
 80027c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80027c6:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*((*pcM)+65536);
 80027c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80027cc:	2200      	movs	r2, #0
 80027ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027d6:	881b      	ldrh	r3, [r3, #0]
 80027d8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80027dc:	17da      	asrs	r2, r3, #31
 80027de:	623b      	str	r3, [r7, #32]
 80027e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80027e2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80027e6:	462b      	mov	r3, r5
 80027e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027ec:	4642      	mov	r2, r8
 80027ee:	fb02 f203 	mul.w	r2, r2, r3
 80027f2:	464b      	mov	r3, r9
 80027f4:	4621      	mov	r1, r4
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	4413      	add	r3, r2
 80027fc:	4622      	mov	r2, r4
 80027fe:	4641      	mov	r1, r8
 8002800:	fba2 1201 	umull	r1, r2, r2, r1
 8002804:	677a      	str	r2, [r7, #116]	@ 0x74
 8002806:	460a      	mov	r2, r1
 8002808:	673a      	str	r2, [r7, #112]	@ 0x70
 800280a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800280c:	4413      	add	r3, r2
 800280e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002810:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 8002814:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 8002818:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1+65536);
 800281c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002820:	2200      	movs	r2, #0
 8002822:	61bb      	str	r3, [r7, #24]
 8002824:	61fa      	str	r2, [r7, #28]
 8002826:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 8002830:	17da      	asrs	r2, r3, #31
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	617a      	str	r2, [r7, #20]
 8002836:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800283a:	462b      	mov	r3, r5
 800283c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002840:	4642      	mov	r2, r8
 8002842:	fb02 f203 	mul.w	r2, r2, r3
 8002846:	464b      	mov	r3, r9
 8002848:	4621      	mov	r1, r4
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	4622      	mov	r2, r4
 8002852:	4641      	mov	r1, r8
 8002854:	fba2 1201 	umull	r1, r2, r2, r1
 8002858:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800285a:	460a      	mov	r2, r1
 800285c:	66ba      	str	r2, [r7, #104]	@ 0x68
 800285e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002860:	4413      	add	r3, r2
 8002862:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002864:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8002868:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
 800286c:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
  }


  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 8002870:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002874:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002878:	1a84      	subs	r4, r0, r2
 800287a:	60bc      	str	r4, [r7, #8]
 800287c:	eb61 0303 	sbc.w	r3, r1, r3
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002886:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 800288a:	1a84      	subs	r4, r0, r2
 800288c:	603c      	str	r4, [r7, #0]
 800288e:	eb61 0303 	sbc.w	r3, r1, r3
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002898:	4623      	mov	r3, r4
 800289a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800289e:	4602      	mov	r2, r0
 80028a0:	4293      	cmp	r3, r2
 80028a2:	462b      	mov	r3, r5
 80028a4:	460a      	mov	r2, r1
 80028a6:	4193      	sbcs	r3, r2
 80028a8:	d205      	bcs.n	80028b6 <SearchDatarateME+0x296>
 80028aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	3301      	adds	r3, #1
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	e002      	b.n	80028bc <SearchDatarateME+0x29c>
 80028b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80028c0:	8013      	strh	r3, [r2, #0]

}
 80028c2:	bf00      	nop
 80028c4:	37b8      	adds	r7, #184	@ 0xb8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028cc:	02faf080 	.word	0x02faf080
 80028d0:	01c9c380 	.word	0x01c9c380

080028d4 <ComputeFreqDeviation>:

uint32_t ComputeFreqDeviation(uint8_t cM, uint8_t cE, uint8_t bs, uint8_t refdiv)
{
 80028d4:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80028d8:	b08c      	sub	sp, #48	@ 0x30
 80028da:	af00      	add	r7, sp, #0
 80028dc:	461e      	mov	r6, r3
 80028de:	4603      	mov	r3, r0
 80028e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80028e4:	460b      	mov	r3, r1
 80028e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80028ea:	4613      	mov	r3, r2
 80028ec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80028f0:	4633      	mov	r3, r6
 80028f2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint32_t f_xo=XTAL_FREQ;
 80028f6:	4b35      	ldr	r3, [pc, #212]	@ (80029cc <ComputeFreqDeviation+0xf8>)
 80028f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if(cE==0) {
 80028fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d127      	bne.n	8002952 <ComputeFreqDeviation+0x7e>
    return (uint32_t)(((uint64_t)f_xo*cM)>>22);
 8002902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002904:	2200      	movs	r2, #0
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	617a      	str	r2, [r7, #20]
 800290a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800290e:	2200      	movs	r2, #0
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	60fa      	str	r2, [r7, #12]
 8002914:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002918:	462b      	mov	r3, r5
 800291a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800291e:	4642      	mov	r2, r8
 8002920:	fb02 f203 	mul.w	r2, r2, r3
 8002924:	464b      	mov	r3, r9
 8002926:	4621      	mov	r1, r4
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	4413      	add	r3, r2
 800292e:	4622      	mov	r2, r4
 8002930:	4641      	mov	r1, r8
 8002932:	fba2 ab01 	umull	sl, fp, r2, r1
 8002936:	445b      	add	r3, fp
 8002938:	469b      	mov	fp, r3
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	ea4f 529a 	mov.w	r2, sl, lsr #22
 8002946:	ea42 228b 	orr.w	r2, r2, fp, lsl #10
 800294a:	ea4f 539b 	mov.w	r3, fp, lsr #22
 800294e:	4613      	mov	r3, r2
 8002950:	e036      	b.n	80029c0 <ComputeFreqDeviation+0xec>
  }

  return (uint32_t)(((uint64_t)f_xo*(256+cM))>>(23-cE));
 8002952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002954:	2200      	movs	r2, #0
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	607a      	str	r2, [r7, #4]
 800295a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800295e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002962:	17da      	asrs	r2, r3, #31
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	61fa      	str	r2, [r7, #28]
 8002968:	e9d7 0100 	ldrd	r0, r1, [r7]
 800296c:	460b      	mov	r3, r1
 800296e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002972:	4652      	mov	r2, sl
 8002974:	fb02 f203 	mul.w	r2, r2, r3
 8002978:	e9c7 ab06 	strd	sl, fp, [r7, #24]
 800297c:	465b      	mov	r3, fp
 800297e:	4682      	mov	sl, r0
 8002980:	468b      	mov	fp, r1
 8002982:	4651      	mov	r1, sl
 8002984:	fb01 f303 	mul.w	r3, r1, r3
 8002988:	4413      	add	r3, r2
 800298a:	4652      	mov	r2, sl
 800298c:	69b9      	ldr	r1, [r7, #24]
 800298e:	fba2 4501 	umull	r4, r5, r2, r1
 8002992:	442b      	add	r3, r5
 8002994:	461d      	mov	r5, r3
 8002996:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800299a:	f1c3 0317 	rsb	r3, r3, #23
 800299e:	f1c3 0120 	rsb	r1, r3, #32
 80029a2:	f1a3 0220 	sub.w	r2, r3, #32
 80029a6:	fa24 f803 	lsr.w	r8, r4, r3
 80029aa:	fa05 f101 	lsl.w	r1, r5, r1
 80029ae:	ea48 0801 	orr.w	r8, r8, r1
 80029b2:	fa25 f202 	lsr.w	r2, r5, r2
 80029b6:	ea48 0802 	orr.w	r8, r8, r2
 80029ba:	fa25 f903 	lsr.w	r9, r5, r3
 80029be:	4643      	mov	r3, r8
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3730      	adds	r7, #48	@ 0x30
 80029c4:	46bd      	mov	sp, r7
 80029c6:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80029ca:	4770      	bx	lr
 80029cc:	02faf080 	.word	0x02faf080

080029d0 <SearchFreqDevME>:

void SearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 80029d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029d4:	b0a2      	sub	sp, #136	@ 0x88
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	65f8      	str	r0, [r7, #92]	@ 0x5c
 80029da:	65b9      	str	r1, [r7, #88]	@ 0x58
 80029dc:	657a      	str	r2, [r7, #84]	@ 0x54
  uint8_t uFDevE, bs = 4, refdiv = 1;
 80029de:	2304      	movs	r3, #4
 80029e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80029e4:	2301      	movs	r3, #1
 80029e6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  uint32_t lFDevTmp;
  uint64_t tgt1,tgt2,tgt;

  /* Search the exponent of the frequency deviation value */
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 80029ea:	2300      	movs	r3, #0
 80029ec:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80029f0:	e012      	b.n	8002a18 <SearchFreqDevME+0x48>
    lFDevTmp = ComputeFreqDeviation(255, uFDevE, bs, refdiv);
 80029f2:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80029f6:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80029fa:	f897 1087 	ldrb.w	r1, [r7, #135]	@ 0x87
 80029fe:	20ff      	movs	r0, #255	@ 0xff
 8002a00:	f7ff ff68 	bl	80028d4 <ComputeFreqDeviation>
 8002a04:	6638      	str	r0, [r7, #96]	@ 0x60
    if(lFDev<lFDevTmp)
 8002a06:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002a08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d309      	bcc.n	8002a22 <SearchFreqDevME+0x52>
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8002a0e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002a12:	3301      	adds	r3, #1
 8002a14:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002a18:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002a1c:	2b0c      	cmp	r3, #12
 8002a1e:	d1e8      	bne.n	80029f2 <SearchFreqDevME+0x22>
 8002a20:	e000      	b.n	8002a24 <SearchFreqDevME+0x54>
      break;
 8002a22:	bf00      	nop
  }
  (*pcE) = (uint8_t)uFDevE;
 8002a24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002a26:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002a2a:	7013      	strb	r3, [r2, #0]

  if(uFDevE==0)
 8002a2c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d155      	bne.n	8002ae0 <SearchFreqDevME+0x110>
  {
    tgt=((uint64_t)lFDev)<<22;
 8002a34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a36:	2200      	movs	r2, #0
 8002a38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8002a48:	4629      	mov	r1, r5
 8002a4a:	058b      	lsls	r3, r1, #22
 8002a4c:	4621      	mov	r1, r4
 8002a4e:	ea43 2391 	orr.w	r3, r3, r1, lsr #10
 8002a52:	4621      	mov	r1, r4
 8002a54:	058a      	lsls	r2, r1, #22
 8002a56:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ);
 8002a5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a5e:	a36e      	add	r3, pc, #440	@ (adr r3, 8002c18 <SearchFreqDevME+0x248>)
 8002a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a64:	f7fe f8b0 	bl	8000bc8 <__aeabi_uldivmod>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	b2d3      	uxtb	r3, r2
 8002a6e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a70:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*(*pcM);
 8002a72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2200      	movs	r2, #0
 8002a7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a7c:	637a      	str	r2, [r7, #52]	@ 0x34
 8002a7e:	4b68      	ldr	r3, [pc, #416]	@ (8002c20 <SearchFreqDevME+0x250>)
 8002a80:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a84:	462a      	mov	r2, r5
 8002a86:	fb03 f202 	mul.w	r2, r3, r2
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	4621      	mov	r1, r4
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	4a62      	ldr	r2, [pc, #392]	@ (8002c20 <SearchFreqDevME+0x250>)
 8002a96:	4621      	mov	r1, r4
 8002a98:	fba1 ab02 	umull	sl, fp, r1, r2
 8002a9c:	445b      	add	r3, fp
 8002a9e:	469b      	mov	fp, r3
 8002aa0:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
 8002aa4:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1);
 8002aa8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	3301      	adds	r3, #1
 8002aae:	17da      	asrs	r2, r3, #31
 8002ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ab2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ab4:	4b5a      	ldr	r3, [pc, #360]	@ (8002c20 <SearchFreqDevME+0x250>)
 8002ab6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002aba:	462a      	mov	r2, r5
 8002abc:	fb03 f202 	mul.w	r2, r3, r2
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	4a55      	ldr	r2, [pc, #340]	@ (8002c20 <SearchFreqDevME+0x250>)
 8002acc:	4621      	mov	r1, r4
 8002ace:	fba1 8902 	umull	r8, r9, r1, r2
 8002ad2:	444b      	add	r3, r9
 8002ad4:	4699      	mov	r9, r3
 8002ad6:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 8002ada:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 8002ade:	e06d      	b.n	8002bbc <SearchFreqDevME+0x1ec>
  }
  else
  {
    tgt=((uint64_t)lFDev)<<(23-uFDevE);
 8002ae0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	623b      	str	r3, [r7, #32]
 8002ae6:	627a      	str	r2, [r7, #36]	@ 0x24
 8002ae8:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002aec:	f1c3 0117 	rsb	r1, r3, #23
 8002af0:	f1a1 0320 	sub.w	r3, r1, #32
 8002af4:	f1c1 0220 	rsb	r2, r1, #32
 8002af8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002afc:	4648      	mov	r0, r9
 8002afe:	fa00 f501 	lsl.w	r5, r0, r1
 8002b02:	4640      	mov	r0, r8
 8002b04:	fa00 f303 	lsl.w	r3, r0, r3
 8002b08:	431d      	orrs	r5, r3
 8002b0a:	4643      	mov	r3, r8
 8002b0c:	fa23 f202 	lsr.w	r2, r3, r2
 8002b10:	4315      	orrs	r5, r2
 8002b12:	4643      	mov	r3, r8
 8002b14:	408b      	lsls	r3, r1
 8002b16:	461c      	mov	r4, r3
 8002b18:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ)-256;
 8002b1c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b20:	a33d      	add	r3, pc, #244	@ (adr r3, 8002c18 <SearchFreqDevME+0x248>)
 8002b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b26:	f7fe f84f 	bl	8000bc8 <__aeabi_uldivmod>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	b2d3      	uxtb	r3, r2
 8002b30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b32:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*((*pcM)+256);
 8002b34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002b3c:	17da      	asrs	r2, r3, #31
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	61fa      	str	r2, [r7, #28]
 8002b42:	4b37      	ldr	r3, [pc, #220]	@ (8002c20 <SearchFreqDevME+0x250>)
 8002b44:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002b48:	462a      	mov	r2, r5
 8002b4a:	fb03 f202 	mul.w	r2, r3, r2
 8002b4e:	2300      	movs	r3, #0
 8002b50:	4621      	mov	r1, r4
 8002b52:	fb01 f303 	mul.w	r3, r1, r3
 8002b56:	4413      	add	r3, r2
 8002b58:	4a31      	ldr	r2, [pc, #196]	@ (8002c20 <SearchFreqDevME+0x250>)
 8002b5a:	4621      	mov	r1, r4
 8002b5c:	fba1 1202 	umull	r1, r2, r1, r2
 8002b60:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002b62:	460a      	mov	r2, r1
 8002b64:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002b66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b68:	4413      	add	r3, r2
 8002b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b6c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8002b70:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
 8002b74:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1+256);
 8002b78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8002b80:	17da      	asrs	r2, r3, #31
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	617a      	str	r2, [r7, #20]
 8002b86:	4b26      	ldr	r3, [pc, #152]	@ (8002c20 <SearchFreqDevME+0x250>)
 8002b88:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002b8c:	462a      	mov	r2, r5
 8002b8e:	fb03 f202 	mul.w	r2, r3, r2
 8002b92:	2300      	movs	r3, #0
 8002b94:	4621      	mov	r1, r4
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	4a20      	ldr	r2, [pc, #128]	@ (8002c20 <SearchFreqDevME+0x250>)
 8002b9e:	4621      	mov	r1, r4
 8002ba0:	fba1 1202 	umull	r1, r2, r1, r2
 8002ba4:	647a      	str	r2, [r7, #68]	@ 0x44
 8002ba6:	460a      	mov	r2, r1
 8002ba8:	643a      	str	r2, [r7, #64]	@ 0x40
 8002baa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bac:	4413      	add	r3, r2
 8002bae:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bb0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8002bb4:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
 8002bb8:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
  }

  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 8002bbc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002bc0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002bc4:	1a84      	subs	r4, r0, r2
 8002bc6:	60bc      	str	r4, [r7, #8]
 8002bc8:	eb61 0303 	sbc.w	r3, r1, r3
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002bd2:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002bd6:	1a84      	subs	r4, r0, r2
 8002bd8:	603c      	str	r4, [r7, #0]
 8002bda:	eb61 0303 	sbc.w	r3, r1, r3
 8002bde:	607b      	str	r3, [r7, #4]
 8002be0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002be4:	4623      	mov	r3, r4
 8002be6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002bea:	4602      	mov	r2, r0
 8002bec:	4293      	cmp	r3, r2
 8002bee:	462b      	mov	r3, r5
 8002bf0:	460a      	mov	r2, r1
 8002bf2:	4193      	sbcs	r3, r2
 8002bf4:	d204      	bcs.n	8002c00 <SearchFreqDevME+0x230>
 8002bf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	e001      	b.n	8002c04 <SearchFreqDevME+0x234>
 8002c00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c06:	7013      	strb	r3, [r2, #0]
}
 8002c08:	bf00      	nop
 8002c0a:	3788      	adds	r7, #136	@ 0x88
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c12:	bf00      	nop
 8002c14:	f3af 8000 	nop.w
 8002c18:	02faf080 	.word	0x02faf080
 8002c1c:	00000000 	.word	0x00000000
 8002c20:	02faf080 	.word	0x02faf080

08002c24 <S2LP_SetModulation>:
*         [100 500000].
*         Frequency deviation expressed in Hz.
* @retval None.
*/
void S2LP_SetModulation(uint8_t mod_type, uint32_t datarate, uint32_t fdev)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	73fb      	strb	r3, [r7, #15]
  uint8_t dr_e;
  uint16_t dr_m;
  uint8_t uFDevM, uFDevE;

  /* Calculates the datarate mantissa and exponent */
  SearchDatarateME(datarate, &dr_m, &dr_e);
 8002c32:	f107 0217 	add.w	r2, r7, #23
 8002c36:	f107 0314 	add.w	r3, r7, #20
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	68b8      	ldr	r0, [r7, #8]
 8002c3e:	f7ff fcef 	bl	8002620 <SearchDatarateME>
  /* Calculates the frequency deviation mantissa and exponent */
  SearchFreqDevME(fdev, &uFDevM, &uFDevE);
 8002c42:	f107 0212 	add.w	r2, r7, #18
 8002c46:	f107 0313 	add.w	r3, r7, #19
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f7ff febf 	bl	80029d0 <SearchFreqDevME>

  S2LP_WriteReg(MOD4_ADDR, (uint8_t)(dr_m >> 8), NULL);
 8002c52:	8abb      	ldrh	r3, [r7, #20]
 8002c54:	0a1b      	lsrs	r3, r3, #8
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	200e      	movs	r0, #14
 8002c60:	f7ff f8c6 	bl	8001df0 <S2LP_WriteReg>
  S2LP_WriteReg(MOD3_ADDR, (uint8_t)dr_m, NULL);
 8002c64:	8abb      	ldrh	r3, [r7, #20]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2200      	movs	r2, #0
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	200f      	movs	r0, #15
 8002c6e:	f7ff f8bf 	bl	8001df0 <S2LP_WriteReg>
  S2LP_WriteReg(MOD2_ADDR, mod_type | dr_e, NULL);
 8002c72:	7dfa      	ldrb	r2, [r7, #23]
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	2010      	movs	r0, #16
 8002c80:	f7ff f8b6 	bl	8001df0 <S2LP_WriteReg>

  S2LP_WriteReg(MOD0_ADDR, uFDevM, NULL);
 8002c84:	7cfb      	ldrb	r3, [r7, #19]
 8002c86:	2200      	movs	r2, #0
 8002c88:	4619      	mov	r1, r3
 8002c8a:	2012      	movs	r0, #18
 8002c8c:	f7ff f8b0 	bl	8001df0 <S2LP_WriteReg>
  S2LP_WriteReg(MOD1_ADDR, uFDevE, NULL);
 8002c90:	7cbb      	ldrb	r3, [r7, #18]
 8002c92:	2200      	movs	r2, #0
 8002c94:	4619      	mov	r1, r3
 8002c96:	2011      	movs	r0, #17
 8002c98:	f7ff f8aa 	bl	8001df0 <S2LP_WriteReg>
}
 8002c9c:	bf00      	nop
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <S2LP_SetPALeveldBm>:

void S2LP_SetPALeveldBm(int32_t lPowerdBm)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint8_t paLevelValue;
  if(lPowerdBm> 14)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b0e      	cmp	r3, #14
 8002cb0:	dd02      	ble.n	8002cb8 <S2LP_SetPALeveldBm+0x14>
  {
    paLevelValue = 1;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	73fb      	strb	r3, [r7, #15]
 8002cb6:	e006      	b.n	8002cc6 <S2LP_SetPALeveldBm+0x22>
  }
  else {
    paLevelValue = (uint8_t)((int32_t)29-2*lPowerdBm);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f1c3 031d 	rsb	r3, r3, #29
 8002cc4:	73fb      	strb	r3, [r7, #15]
  }

  S2LP_WriteReg(PA_POWER0_ADDR, 0, NULL);
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2100      	movs	r1, #0
 8002cca:	2062      	movs	r0, #98	@ 0x62
 8002ccc:	f7ff f890 	bl	8001df0 <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR+1, 0, NULL); // disable degeneration mode
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	2064      	movs	r0, #100	@ 0x64
 8002cd6:	f7ff f88b 	bl	8001df0 <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR, 0, NULL); // disable Tx Bessel FIR
 8002cda:	2200      	movs	r2, #0
 8002cdc:	2100      	movs	r1, #0
 8002cde:	2063      	movs	r0, #99	@ 0x63
 8002ce0:	f7ff f886 	bl	8001df0 <S2LP_WriteReg>
  S2LP_WriteReg(PA_POWER1_ADDR, paLevelValue, NULL);
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	4619      	mov	r1, r3
 8002cea:	2061      	movs	r0, #97	@ 0x61
 8002cec:	f7ff f880 	bl	8001df0 <S2LP_WriteReg>
}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <S2LP_Init>:

	return HAL_OK;
}

HAL_StatusTypeDef S2LP_Init(SPI_HandleTypeDef *spi_handle)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
	gSPI = spi_handle;
 8002d00:	4a48      	ldr	r2, [pc, #288]	@ (8002e24 <S2LP_Init+0x12c>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6013      	str	r3, [r2, #0]
	uint32_t ncycles_start = HAL_RCC_GetHCLKFreq()/9600;
 8002d06:	f002 fa63 	bl	80051d0 <HAL_RCC_GetHCLKFreq>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4a46      	ldr	r2, [pc, #280]	@ (8002e28 <S2LP_Init+0x130>)
 8002d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d12:	0a9b      	lsrs	r3, r3, #10
 8002d14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d16:	b672      	cpsid	i
}
 8002d18:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_RESET); // Power up S2LP
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d20:	4842      	ldr	r0, [pc, #264]	@ (8002e2c <S2LP_Init+0x134>)
 8002d22:	f001 fd39 	bl	8004798 <HAL_GPIO_WritePin>
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 8002d26:	2300      	movs	r3, #0
 8002d28:	617b      	str	r3, [r7, #20]
 8002d2a:	e003      	b.n	8002d34 <S2LP_Init+0x3c>
		asm volatile("nop");
 8002d2c:	bf00      	nop
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	3301      	adds	r3, #1
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d3f7      	bcc.n	8002d2c <S2LP_Init+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 8002d3c:	b662      	cpsie	i
}
 8002d3e:	bf00      	nop
	__enable_irq();

	S2LP_WriteReg(GPIO0_CONF_ADDR, 3, NULL); // Set GPIO as interrupt line
 8002d40:	2200      	movs	r2, #0
 8002d42:	2103      	movs	r1, #3
 8002d44:	2000      	movs	r0, #0
 8002d46:	f7ff f853 	bl	8001df0 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK0_ADDR, 0x80 | 0x20 | 0x04, NULL); // Enable "Tx Data sent" and "TX FIFO almost full" interrupts
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	21a4      	movs	r1, #164	@ 0xa4
 8002d4e:	2053      	movs	r0, #83	@ 0x53
 8002d50:	f7ff f84e 	bl	8001df0 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK1_ADDR, 0x01, NULL); // Enable "TX FIFO almost empty" interrupt
 8002d54:	2200      	movs	r2, #0
 8002d56:	2101      	movs	r1, #1
 8002d58:	2052      	movs	r0, #82	@ 0x52
 8002d5a:	f7ff f849 	bl	8001df0 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK2_ADDR, 0x00, NULL);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2100      	movs	r1, #0
 8002d62:	2051      	movs	r0, #81	@ 0x51
 8002d64:	f7ff f844 	bl	8001df0 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK3_ADDR, 0x00, NULL);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2100      	movs	r1, #0
 8002d6c:	2050      	movs	r0, #80	@ 0x50
 8002d6e:	f7ff f83f 	bl	8001df0 <S2LP_WriteReg>
	S2LP_WriteReg(FIFO_CONFIG0_ADDR, FIFO_EMPTY_THRESH * FIFO_CHUNK_SIZE, NULL);
 8002d72:	2200      	movs	r2, #0
 8002d74:	2120      	movs	r1, #32
 8002d76:	203f      	movs	r0, #63	@ 0x3f
 8002d78:	f7ff f83a 	bl	8001df0 <S2LP_WriteReg>

	// Change sync word bytes
	S2LP_WriteReg(SYNC3_ADDR, 0xB7, NULL);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	21b7      	movs	r1, #183	@ 0xb7
 8002d80:	2033      	movs	r0, #51	@ 0x33
 8002d82:	f7ff f835 	bl	8001df0 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC2_ADDR, 0x54, NULL);
 8002d86:	2200      	movs	r2, #0
 8002d88:	2154      	movs	r1, #84	@ 0x54
 8002d8a:	2034      	movs	r0, #52	@ 0x34
 8002d8c:	f7ff f830 	bl	8001df0 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC1_ADDR, 0x2A, NULL);
 8002d90:	2200      	movs	r2, #0
 8002d92:	212a      	movs	r1, #42	@ 0x2a
 8002d94:	2035      	movs	r0, #53	@ 0x35
 8002d96:	f7ff f82b 	bl	8001df0 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC0_ADDR, 0x3E, NULL);
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	213e      	movs	r1, #62	@ 0x3e
 8002d9e:	2036      	movs	r0, #54	@ 0x36
 8002da0:	f7ff f826 	bl	8001df0 <S2LP_WriteReg>

	// PLL and PA configuration
	S2LP_PLLConf(BASE_FREQ);
 8002da4:	4822      	ldr	r0, [pc, #136]	@ (8002e30 <S2LP_Init+0x138>)
 8002da6:	f7ff fa8f 	bl	80022c8 <S2LP_PLLConf>
	S2LP_SetPALeveldBm(PA_LEVEL);
 8002daa:	2000      	movs	r0, #0
 8002dac:	f7ff ff7a 	bl	8002ca4 <S2LP_SetPALeveldBm>

	// Modulation and packet configuration
	S2LP_SetModulation(MOD_2FSK, DATARATE, FREQDEV);
 8002db0:	f243 02d4 	movw	r2, #12500	@ 0x30d4
 8002db4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8002db8:	2000      	movs	r0, #0
 8002dba:	f7ff ff33 	bl	8002c24 <S2LP_SetModulation>
	S2LP_WriteReg(PCKTCTRL1_ADDR, 0x20, NULL); // No whitening, CRC with poly 0x07
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2120      	movs	r1, #32
 8002dc2:	2030      	movs	r0, #48	@ 0x30
 8002dc4:	f7ff f814 	bl	8001df0 <S2LP_WriteReg>
	S2LP_WriteReg(PCKTCTRL3_ADDR, 0x00, NULL); // Enable basic packet structure
 8002dc8:	2200      	movs	r2, #0
 8002dca:	2100      	movs	r1, #0
 8002dcc:	202e      	movs	r0, #46	@ 0x2e
 8002dce:	f7ff f80f 	bl	8001df0 <S2LP_WriteReg>

	S2LPStatus radio_status;
	uint8_t rco_conf;
	HAL_StatusTypeDef err = S2LP_ReadReg(XO_RCO_CONF1_ADDR, &rco_conf, &radio_status); // fetch radio state
 8002dd2:	f107 020c 	add.w	r2, r7, #12
 8002dd6:	f107 030b 	add.w	r3, r7, #11
 8002dda:	4619      	mov	r1, r3
 8002ddc:	206c      	movs	r0, #108	@ 0x6c
 8002dde:	f7fe ffc9 	bl	8001d74 <S2LP_ReadReg>
 8002de2:	4603      	mov	r3, r0
 8002de4:	73fb      	strb	r3, [r7, #15]
	if (err) {
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <S2LP_Init+0xf8>
		return err;
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
 8002dee:	e015      	b.n	8002e1c <S2LP_Init+0x124>
	} else if (rco_conf != 0x45) {
 8002df0:	7afb      	ldrb	r3, [r7, #11]
 8002df2:	2b45      	cmp	r3, #69	@ 0x45
 8002df4:	d006      	beq.n	8002e04 <S2LP_Init+0x10c>
		DEBUG_PRINT("[S2LP] Error: XO_RCO_CONF1 register is invalid (0x%X instead of 0x45), faulty SPI bus?\r\n", rco_conf);
 8002df6:	7afb      	ldrb	r3, [r7, #11]
 8002df8:	4619      	mov	r1, r3
 8002dfa:	480e      	ldr	r0, [pc, #56]	@ (8002e34 <S2LP_Init+0x13c>)
 8002dfc:	f005 fe9a 	bl	8008b34 <iprintf>
		return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e00b      	b.n	8002e1c <S2LP_Init+0x124>
	}

	if (radio_status.MC_STATE != MC_STATE_READY) {
 8002e04:	7b7b      	ldrb	r3, [r7, #13]
 8002e06:	f023 0301 	bic.w	r3, r3, #1
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d004      	beq.n	8002e1a <S2LP_Init+0x122>
		DEBUG_PRINT("[S2LP] Error: radio is not ready after initialization\r\n");
 8002e10:	4809      	ldr	r0, [pc, #36]	@ (8002e38 <S2LP_Init+0x140>)
 8002e12:	f005 fef7 	bl	8008c04 <puts>
		return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <S2LP_Init+0x124>
	}

	return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3718      	adds	r7, #24
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20003d54 	.word	0x20003d54
 8002e28:	1b4e81b5 	.word	0x1b4e81b5
 8002e2c:	48001400 	.word	0x48001400
 8002e30:	33611380 	.word	0x33611380
 8002e34:	0800ae98 	.word	0x0800ae98
 8002e38:	0800aef4 	.word	0x0800aef4

08002e3c <S2LP_IRQ_Handler>:

void S2LP_IRQ_Handler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
	uint8_t irq_status1, irq_status0;
	S2LP_ReadReg(IRQ_STATUS1_ADDR, &irq_status1, NULL);
 8002e42:	1dfb      	adds	r3, r7, #7
 8002e44:	2200      	movs	r2, #0
 8002e46:	4619      	mov	r1, r3
 8002e48:	20fc      	movs	r0, #252	@ 0xfc
 8002e4a:	f7fe ff93 	bl	8001d74 <S2LP_ReadReg>
	S2LP_ReadReg(IRQ_STATUS0_ADDR, &irq_status0, NULL);
 8002e4e:	1dbb      	adds	r3, r7, #6
 8002e50:	2200      	movs	r2, #0
 8002e52:	4619      	mov	r1, r3
 8002e54:	20fd      	movs	r0, #253	@ 0xfd
 8002e56:	f7fe ff8d 	bl	8001d74 <S2LP_ReadReg>

	if (irq_status1 & 0x01) // TX FIFO almost empty
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <S2LP_IRQ_Handler+0x2e>
		fifo_almost_empty = 1;
 8002e64:	4b0b      	ldr	r3, [pc, #44]	@ (8002e94 <S2LP_IRQ_Handler+0x58>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x20) // TX/RX FIFO underflow or overflow
 8002e6a:	79bb      	ldrb	r3, [r7, #6]
 8002e6c:	f003 0320 	and.w	r3, r3, #32
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <S2LP_IRQ_Handler+0x3e>
		underflow = 1;
 8002e74:	4b08      	ldr	r3, [pc, #32]	@ (8002e98 <S2LP_IRQ_Handler+0x5c>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x04) // Packet transmitted
 8002e7a:	79bb      	ldrb	r3, [r7, #6]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <S2LP_IRQ_Handler+0x4e>
		packet_sent = 1;
 8002e84:	4b05      	ldr	r3, [pc, #20]	@ (8002e9c <S2LP_IRQ_Handler+0x60>)
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	20003d51 	.word	0x20003d51
 8002e98:	20003d52 	.word	0x20003d52
 8002e9c:	20003d50 	.word	0x20003d50

08002ea0 <Spectrogram_Format>:
q15_t buf_fft[2*SAMPLES_PER_MELVEC  ]; // Double size (real|imag) buffer needed for arm_rfft_q15
q15_t buf_tmp[  SAMPLES_PER_MELVEC/2]; // Intermediate buffer for arm_mat_mult_fast_q15

// Convert 12-bit DC ADC samples to Q1.15 fixed point signal and remove DC component
void Spectrogram_Format(q15_t *buf)
{
 8002ea0:	b510      	push	{r4, lr}
 8002ea2:	4604      	mov	r4, r0
	start_cycle_count();
 8002ea4:	f000 fa70 	bl	8003388 <start_cycle_count>
	// That way, the value of buf[i] is in [0 , 2**15 - 1]

	// /!\ When multiplying/dividing by a power 2, always prefer shifting left/right instead, ARM instructions to do so are more efficient.
	// Here we should shift left by 3.

	arm_shift_q15(buf, 3, buf, SAMPLES_PER_MELVEC);
 8002ea8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002eac:	4622      	mov	r2, r4
 8002eae:	2103      	movs	r1, #3
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f004 fb71 	bl	8007598 <arm_shift_q15>
	stop_cycle_count("0.1");
 8002eb6:	4808      	ldr	r0, [pc, #32]	@ (8002ed8 <Spectrogram_Format+0x38>)
 8002eb8:	f000 fa86 	bl	80033c8 <stop_cycle_count>
	start_cycle_count();
 8002ebc:	f000 fa64 	bl	8003388 <start_cycle_count>

	// Since we use a signed representation, we should now center the value around zero, we can do this by substracting 2**14.
	// Now the value of buf[i] is in [-2**14 , 2**14 - 1]

	q15_t offset = -(1 << 14);
	arm_offset_q15(buf, offset, buf, SAMPLES_PER_MELVEC);
 8002ec0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ec4:	4622      	mov	r2, r4
 8002ec6:	4905      	ldr	r1, [pc, #20]	@ (8002edc <Spectrogram_Format+0x3c>)
 8002ec8:	4620      	mov	r0, r4
 8002eca:	f004 fbf7 	bl	80076bc <arm_offset_q15>

//	for(uint16_t i=0; i < SAMPLES_PER_MELVEC; i++) { // Remove DC component
//		buf[i] -= (1 << 14);
//	}
	stop_cycle_count("0.2");
 8002ece:	4804      	ldr	r0, [pc, #16]	@ (8002ee0 <Spectrogram_Format+0x40>)
 8002ed0:	f000 fa7a 	bl	80033c8 <stop_cycle_count>
}
 8002ed4:	bd10      	pop	{r4, pc}
 8002ed6:	bf00      	nop
 8002ed8:	0800b068 	.word	0x0800b068
 8002edc:	ffffc000 	.word	0xffffc000
 8002ee0:	0800b06c 	.word	0x0800b06c

08002ee4 <Spectrogram_Compute>:

// Compute spectrogram of samples and transform into MEL vectors.
void Spectrogram_Compute(q15_t *samples, q15_t *melvec)
{
 8002ee4:	b570      	push	{r4, r5, r6, lr}
 8002ee6:	b08e      	sub	sp, #56	@ 0x38
 8002ee8:	4606      	mov	r6, r0
 8002eea:	460d      	mov	r5, r1
	start_cycle_count();
 8002eec:	f000 fa4c 	bl	8003388 <start_cycle_count>
	// STEP 1  : Windowing of input samples
	//           --> Pointwise product
	//           Complexity: O(N)
	//           Number of cycles: <TODO>
	arm_mult_q15(samples, hamming_window, buf, SAMPLES_PER_MELVEC);
 8002ef0:	4c3f      	ldr	r4, [pc, #252]	@ (8002ff0 <Spectrogram_Compute+0x10c>)
 8002ef2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ef6:	4622      	mov	r2, r4
 8002ef8:	493e      	ldr	r1, [pc, #248]	@ (8002ff4 <Spectrogram_Compute+0x110>)
 8002efa:	4630      	mov	r0, r6
 8002efc:	f004 fc12 	bl	8007724 <arm_mult_q15>
	stop_cycle_count("1");
 8002f00:	483d      	ldr	r0, [pc, #244]	@ (8002ff8 <Spectrogram_Compute+0x114>)
 8002f02:	f000 fa61 	bl	80033c8 <stop_cycle_count>
	start_cycle_count();
 8002f06:	f000 fa3f 	bl	8003388 <start_cycle_count>
	//           Number of cycles: <TODO>

	// Since the FFT is a recursive algorithm, the values are rescaled in the function to ensure that overflow cannot happen.
	arm_rfft_instance_q15 rfft_inst;

	arm_rfft_init_q15(&rfft_inst, SAMPLES_PER_MELVEC, 0, 1);
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f12:	a808      	add	r0, sp, #32
 8002f14:	f004 f814 	bl	8006f40 <arm_rfft_init_q15>

	arm_rfft_q15(&rfft_inst, buf, buf_fft);
 8002f18:	4e38      	ldr	r6, [pc, #224]	@ (8002ffc <Spectrogram_Compute+0x118>)
 8002f1a:	4632      	mov	r2, r6
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	a808      	add	r0, sp, #32
 8002f20:	f003 ff92 	bl	8006e48 <arm_rfft_q15>
	stop_cycle_count("2");
 8002f24:	4836      	ldr	r0, [pc, #216]	@ (8003000 <Spectrogram_Compute+0x11c>)
 8002f26:	f000 fa4f 	bl	80033c8 <stop_cycle_count>
	start_cycle_count();
 8002f2a:	f000 fa2d 	bl	8003388 <start_cycle_count>
	// STEP 3.1: Find the extremum value (maximum of absolute values)
	//           Complexity: O(N)
	//           Number of cycles: <TODO>

	q15_t vmax;
	uint32_t pIndex=0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	9306      	str	r3, [sp, #24]

	arm_absmax_q15(buf_fft, SAMPLES_PER_MELVEC, &vmax, &pIndex);
 8002f32:	ab06      	add	r3, sp, #24
 8002f34:	f10d 021e 	add.w	r2, sp, #30
 8002f38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f3c:	4630      	mov	r0, r6
 8002f3e:	f7fe fb17 	bl	8001570 <arm_absmax_q15>
	stop_cycle_count("3.1");
 8002f42:	4830      	ldr	r0, [pc, #192]	@ (8003004 <Spectrogram_Compute+0x120>)
 8002f44:	f000 fa40 	bl	80033c8 <stop_cycle_count>
	start_cycle_count();
 8002f48:	f000 fa1e 	bl	8003388 <start_cycle_count>
	//           Complexity: O(N)
	//           Number of cycles: <TODO>

	for (int i=0; i < SAMPLES_PER_MELVEC; i++) // We don't use the second half of the symmetric spectrum
	{
		buf[i] = (q15_t) (((q31_t) buf_fft[i] << 15) /((q31_t)vmax));
 8002f4c:	f9bd c01e 	ldrsh.w	ip, [sp, #30]
 8002f50:	1eb3      	subs	r3, r6, #2
 8002f52:	3c02      	subs	r4, #2
 8002f54:	f206 30fe 	addw	r0, r6, #1022	@ 0x3fe
 8002f58:	4621      	mov	r1, r4
 8002f5a:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
 8002f5e:	03d2      	lsls	r2, r2, #15
 8002f60:	fb92 f2fc 	sdiv	r2, r2, ip
 8002f64:	f821 2f02 	strh.w	r2, [r1, #2]!
	for (int i=0; i < SAMPLES_PER_MELVEC; i++) // We don't use the second half of the symmetric spectrum
 8002f68:	4283      	cmp	r3, r0
 8002f6a:	d1f6      	bne.n	8002f5a <Spectrogram_Compute+0x76>
	}
	stop_cycle_count("3.2");
 8002f6c:	4826      	ldr	r0, [pc, #152]	@ (8003008 <Spectrogram_Compute+0x124>)
 8002f6e:	f000 fa2b 	bl	80033c8 <stop_cycle_count>
	start_cycle_count();
 8002f72:	f000 fa09 	bl	8003388 <start_cycle_count>
	// STEP 3.3: Compute the complex magnitude
	//           --> The output buffer is now two times smaller because (real|imag) --> (mag)
	//           Complexity: O(N)
	//           Number of cycles: <TODO>

	arm_cmplx_mag_q15(buf, buf, SAMPLES_PER_MELVEC/2);
 8002f76:	4e1e      	ldr	r6, [pc, #120]	@ (8002ff0 <Spectrogram_Compute+0x10c>)
 8002f78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f7c:	4631      	mov	r1, r6
 8002f7e:	4630      	mov	r0, r6
 8002f80:	f004 fa60 	bl	8007444 <arm_cmplx_mag_q15>
	stop_cycle_count("3.3");
 8002f84:	4821      	ldr	r0, [pc, #132]	@ (800300c <Spectrogram_Compute+0x128>)
 8002f86:	f000 fa1f 	bl	80033c8 <stop_cycle_count>
	start_cycle_count();
 8002f8a:	f000 f9fd 	bl	8003388 <start_cycle_count>
	//           Complexity: O(N)
	//           Number of cycles: <TODO>

	for (int i=0; i < SAMPLES_PER_MELVEC/2; i++)
	{
		buf[i] = (q15_t) ((((q31_t) buf[i]) * ((q31_t) vmax) ) >> 15 );
 8002f8e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8002f92:	f506 73ff 	add.w	r3, r6, #510	@ 0x1fe
 8002f96:	f934 2f02 	ldrsh.w	r2, [r4, #2]!
 8002f9a:	fb01 f202 	mul.w	r2, r1, r2
 8002f9e:	13d2      	asrs	r2, r2, #15
 8002fa0:	8022      	strh	r2, [r4, #0]
	for (int i=0; i < SAMPLES_PER_MELVEC/2; i++)
 8002fa2:	429c      	cmp	r4, r3
 8002fa4:	d1f7      	bne.n	8002f96 <Spectrogram_Compute+0xb2>
	}
	stop_cycle_count("3.4");
 8002fa6:	481a      	ldr	r0, [pc, #104]	@ (8003010 <Spectrogram_Compute+0x12c>)
 8002fa8:	f000 fa0e 	bl	80033c8 <stop_cycle_count>
	start_cycle_count();
 8002fac:	f000 f9ec 	bl	8003388 <start_cycle_count>
	// /!\ In order to avoid overflows completely the input signals should be scaled down. Scale down one of the input matrices by log2(numColsA) bits to avoid overflows,
	// as a total of numColsA additions are computed internally for each output element. Because our hz2mel_mat matrix contains lots of zeros in its rows, this is not necessary.
	
	arm_matrix_instance_q15 hz2mel_inst, fftmag_inst, melvec_inst;

	arm_mat_init_q15(&hz2mel_inst, MELVEC_LENGTH, SAMPLES_PER_MELVEC/2, hz2mel_mat);
 8002fb0:	4b18      	ldr	r3, [pc, #96]	@ (8003014 <Spectrogram_Compute+0x130>)
 8002fb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fb6:	2114      	movs	r1, #20
 8002fb8:	a804      	add	r0, sp, #16
 8002fba:	f004 fa3f 	bl	800743c <arm_mat_init_q15>
	arm_mat_init_q15(&fftmag_inst, SAMPLES_PER_MELVEC/2, 1, buf);
 8002fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff0 <Spectrogram_Compute+0x10c>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fc6:	a802      	add	r0, sp, #8
 8002fc8:	f004 fa38 	bl	800743c <arm_mat_init_q15>
	arm_mat_init_q15(&melvec_inst, MELVEC_LENGTH, 1, melvec);
 8002fcc:	462b      	mov	r3, r5
 8002fce:	2201      	movs	r2, #1
 8002fd0:	2114      	movs	r1, #20
 8002fd2:	4668      	mov	r0, sp
 8002fd4:	f004 fa32 	bl	800743c <arm_mat_init_q15>

	arm_mat_mult_fast_q15(&hz2mel_inst, &fftmag_inst, &melvec_inst, buf_tmp);
 8002fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8003018 <Spectrogram_Compute+0x134>)
 8002fda:	466a      	mov	r2, sp
 8002fdc:	a902      	add	r1, sp, #8
 8002fde:	a804      	add	r0, sp, #16
 8002fe0:	f004 f82a 	bl	8007038 <arm_mat_mult_fast_q15>
	stop_cycle_count("4");
 8002fe4:	480d      	ldr	r0, [pc, #52]	@ (800301c <Spectrogram_Compute+0x138>)
 8002fe6:	f000 f9ef 	bl	80033c8 <stop_cycle_count>
}
 8002fea:	b00e      	add	sp, #56	@ 0x38
 8002fec:	bd70      	pop	{r4, r5, r6, pc}
 8002fee:	bf00      	nop
 8002ff0:	20004758 	.word	0x20004758
 8002ff4:	20000378 	.word	0x20000378
 8002ff8:	0800b070 	.word	0x0800b070
 8002ffc:	20003f58 	.word	0x20003f58
 8003000:	0800b074 	.word	0x0800b074
 8003004:	0800b078 	.word	0x0800b078
 8003008:	0800b07c 	.word	0x0800b07c
 800300c:	0800b080 	.word	0x0800b080
 8003010:	0800b084 	.word	0x0800b084
 8003014:	20000778 	.word	0x20000778
 8003018:	20003d58 	.word	0x20003d58
 800301c:	0800b088 	.word	0x0800b088

08003020 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003020:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003022:	4810      	ldr	r0, [pc, #64]	@ (8003064 <MX_SPI1_Init+0x44>)
 8003024:	4b10      	ldr	r3, [pc, #64]	@ (8003068 <MX_SPI1_Init+0x48>)
 8003026:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003028:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800302c:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800302e:	2300      	movs	r3, #0
 8003030:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003032:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003036:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003038:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800303a:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800303c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003040:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003042:	2208      	movs	r2, #8
 8003044:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003046:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003048:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800304a:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800304c:	2107      	movs	r1, #7
 800304e:	62c1      	str	r1, [r0, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003050:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003052:	6342      	str	r2, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003054:	f002 fd8b 	bl	8005b6e <HAL_SPI_Init>
 8003058:	b900      	cbnz	r0, 800305c <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800305a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800305c:	f7fe fcae 	bl	80019bc <Error_Handler>
}
 8003060:	e7fb      	b.n	800305a <MX_SPI1_Init+0x3a>
 8003062:	bf00      	nop
 8003064:	20004b58 	.word	0x20004b58
 8003068:	40013000 	.word	0x40013000

0800306c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800306c:	b570      	push	{r4, r5, r6, lr}
 800306e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003070:	2300      	movs	r3, #0
 8003072:	9303      	str	r3, [sp, #12]
 8003074:	9304      	str	r3, [sp, #16]
 8003076:	9305      	str	r3, [sp, #20]
 8003078:	9306      	str	r3, [sp, #24]
 800307a:	9307      	str	r3, [sp, #28]
  if(spiHandle->Instance==SPI1)
 800307c:	6802      	ldr	r2, [r0, #0]
 800307e:	4b1e      	ldr	r3, [pc, #120]	@ (80030f8 <HAL_SPI_MspInit+0x8c>)
 8003080:	429a      	cmp	r2, r3
 8003082:	d001      	beq.n	8003088 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003084:	b008      	add	sp, #32
 8003086:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003088:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
 800308c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800308e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003092:	661a      	str	r2, [r3, #96]	@ 0x60
 8003094:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003096:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800309a:	9200      	str	r2, [sp, #0]
 800309c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800309e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80030a0:	f042 0201 	orr.w	r2, r2, #1
 80030a4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80030a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80030a8:	f002 0201 	and.w	r2, r2, #1
 80030ac:	9201      	str	r2, [sp, #4]
 80030ae:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80030b2:	f042 0210 	orr.w	r2, r2, #16
 80030b6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80030b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ba:	f003 0310 	and.w	r3, r3, #16
 80030be:	9302      	str	r3, [sp, #8]
 80030c0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030c2:	23c0      	movs	r3, #192	@ 0xc0
 80030c4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c6:	2602      	movs	r6, #2
 80030c8:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ca:	2503      	movs	r5, #3
 80030cc:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030ce:	2405      	movs	r4, #5
 80030d0:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030d2:	a903      	add	r1, sp, #12
 80030d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030d8:	f001 fa70 	bl	80045bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80030dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e2:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030ea:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030ec:	a903      	add	r1, sp, #12
 80030ee:	4803      	ldr	r0, [pc, #12]	@ (80030fc <HAL_SPI_MspInit+0x90>)
 80030f0:	f001 fa64 	bl	80045bc <HAL_GPIO_Init>
}
 80030f4:	e7c6      	b.n	8003084 <HAL_SPI_MspInit+0x18>
 80030f6:	bf00      	nop
 80030f8:	40013000 	.word	0x40013000
 80030fc:	48001000 	.word	0x48001000

08003100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003100:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003102:	4b0a      	ldr	r3, [pc, #40]	@ (800312c <HAL_MspInit+0x2c>)
 8003104:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	661a      	str	r2, [r3, #96]	@ 0x60
 800310c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800310e:	f002 0201 	and.w	r2, r2, #1
 8003112:	9200      	str	r2, [sp, #0]
 8003114:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003116:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003118:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800311c:	659a      	str	r2, [r3, #88]	@ 0x58
 800311e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003120:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003128:	b002      	add	sp, #8
 800312a:	4770      	bx	lr
 800312c:	40021000 	.word	0x40021000

08003130 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003130:	e7fe      	b.n	8003130 <NMI_Handler>

08003132 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003132:	e7fe      	b.n	8003132 <HardFault_Handler>

08003134 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003134:	e7fe      	b.n	8003134 <MemManage_Handler>

08003136 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003136:	e7fe      	b.n	8003136 <BusFault_Handler>

08003138 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003138:	e7fe      	b.n	8003138 <UsageFault_Handler>

0800313a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800313a:	4770      	bx	lr

0800313c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800313c:	4770      	bx	lr

0800313e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800313e:	4770      	bx	lr

08003140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003140:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003142:	f000 f9bd 	bl	80034c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003146:	bd08      	pop	{r3, pc}

08003148 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003148:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RADIO_INT_Pin);
 800314a:	2008      	movs	r0, #8
 800314c:	f001 fb2a 	bl	80047a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003150:	bd08      	pop	{r3, pc}
	...

08003154 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003154:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003156:	4802      	ldr	r0, [pc, #8]	@ (8003160 <DMA1_Channel1_IRQHandler+0xc>)
 8003158:	f001 f9cd 	bl	80044f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800315c:	bd08      	pop	{r3, pc}
 800315e:	bf00      	nop
 8003160:	20003168 	.word	0x20003168

08003164 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003164:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003166:	4802      	ldr	r0, [pc, #8]	@ (8003170 <TIM3_IRQHandler+0xc>)
 8003168:	f002 ff2f 	bl	8005fca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800316c:	bd08      	pop	{r3, pc}
 800316e:	bf00      	nop
 8003170:	20004bc0 	.word	0x20004bc0

08003174 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003174:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003176:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800317a:	f001 fb13 	bl	80047a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800317e:	bd08      	pop	{r3, pc}

08003180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003180:	b508      	push	{r3, lr}
 8003182:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003184:	4a0c      	ldr	r2, [pc, #48]	@ (80031b8 <_sbrk+0x38>)
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	b152      	cbz	r2, 80031a0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800318a:	4a0b      	ldr	r2, [pc, #44]	@ (80031b8 <_sbrk+0x38>)
 800318c:	6810      	ldr	r0, [r2, #0]
 800318e:	4403      	add	r3, r0
 8003190:	4a0a      	ldr	r2, [pc, #40]	@ (80031bc <_sbrk+0x3c>)
 8003192:	490b      	ldr	r1, [pc, #44]	@ (80031c0 <_sbrk+0x40>)
 8003194:	1a52      	subs	r2, r2, r1
 8003196:	4293      	cmp	r3, r2
 8003198:	d806      	bhi.n	80031a8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800319a:	4a07      	ldr	r2, [pc, #28]	@ (80031b8 <_sbrk+0x38>)
 800319c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800319e:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80031a0:	4a05      	ldr	r2, [pc, #20]	@ (80031b8 <_sbrk+0x38>)
 80031a2:	4908      	ldr	r1, [pc, #32]	@ (80031c4 <_sbrk+0x44>)
 80031a4:	6011      	str	r1, [r2, #0]
 80031a6:	e7f0      	b.n	800318a <_sbrk+0xa>
    errno = ENOMEM;
 80031a8:	f005 ff12 	bl	8008fd0 <__errno>
 80031ac:	230c      	movs	r3, #12
 80031ae:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80031b0:	f04f 30ff 	mov.w	r0, #4294967295
 80031b4:	e7f3      	b.n	800319e <_sbrk+0x1e>
 80031b6:	bf00      	nop
 80031b8:	20004bbc 	.word	0x20004bbc
 80031bc:	20050000 	.word	0x20050000
 80031c0:	00000400 	.word	0x00000400
 80031c4:	20004de8 	.word	0x20004de8

080031c8 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80031c8:	4a0e      	ldr	r2, [pc, #56]	@ (8003204 <SystemInit+0x3c>)
 80031ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80031ce:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031d2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80031d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003208 <SystemInit+0x40>)
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80031e0:	2100      	movs	r1, #0
 80031e2:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	f022 52a8 	bic.w	r2, r2, #352321536	@ 0x15000000
 80031ea:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 80031ee:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80031f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80031f4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80031fc:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80031fe:	6199      	str	r1, [r3, #24]
}
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	e000ed00 	.word	0xe000ed00
 8003208:	40021000 	.word	0x40021000

0800320c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800320c:	b500      	push	{lr}
 800320e:	b089      	sub	sp, #36	@ 0x24

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003210:	2300      	movs	r3, #0
 8003212:	9304      	str	r3, [sp, #16]
 8003214:	9305      	str	r3, [sp, #20]
 8003216:	9306      	str	r3, [sp, #24]
 8003218:	9307      	str	r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800321a:	9301      	str	r3, [sp, #4]
 800321c:	9302      	str	r3, [sp, #8]
 800321e:	9303      	str	r3, [sp, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003220:	4814      	ldr	r0, [pc, #80]	@ (8003274 <MX_TIM3_Init+0x68>)
 8003222:	4a15      	ldr	r2, [pc, #84]	@ (8003278 <MX_TIM3_Init+0x6c>)
 8003224:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 23;
 8003226:	2217      	movs	r2, #23
 8003228:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800322a:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 195;
 800322c:	22c3      	movs	r2, #195	@ 0xc3
 800322e:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003230:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003232:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003234:	f003 f838 	bl	80062a8 <HAL_TIM_Base_Init>
 8003238:	b998      	cbnz	r0, 8003262 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800323a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800323e:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003240:	a904      	add	r1, sp, #16
 8003242:	480c      	ldr	r0, [pc, #48]	@ (8003274 <MX_TIM3_Init+0x68>)
 8003244:	f003 f86e 	bl	8006324 <HAL_TIM_ConfigClockSource>
 8003248:	b970      	cbnz	r0, 8003268 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800324a:	2320      	movs	r3, #32
 800324c:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800324e:	2300      	movs	r3, #0
 8003250:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003252:	a901      	add	r1, sp, #4
 8003254:	4807      	ldr	r0, [pc, #28]	@ (8003274 <MX_TIM3_Init+0x68>)
 8003256:	f003 f91b 	bl	8006490 <HAL_TIMEx_MasterConfigSynchronization>
 800325a:	b940      	cbnz	r0, 800326e <MX_TIM3_Init+0x62>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800325c:	b009      	add	sp, #36	@ 0x24
 800325e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8003262:	f7fe fbab 	bl	80019bc <Error_Handler>
 8003266:	e7e8      	b.n	800323a <MX_TIM3_Init+0x2e>
    Error_Handler();
 8003268:	f7fe fba8 	bl	80019bc <Error_Handler>
 800326c:	e7ed      	b.n	800324a <MX_TIM3_Init+0x3e>
    Error_Handler();
 800326e:	f7fe fba5 	bl	80019bc <Error_Handler>
}
 8003272:	e7f3      	b.n	800325c <MX_TIM3_Init+0x50>
 8003274:	20004bc0 	.word	0x20004bc0
 8003278:	40000400 	.word	0x40000400

0800327c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 800327c:	6802      	ldr	r2, [r0, #0]
 800327e:	4b0e      	ldr	r3, [pc, #56]	@ (80032b8 <HAL_TIM_Base_MspInit+0x3c>)
 8003280:	429a      	cmp	r2, r3
 8003282:	d000      	beq.n	8003286 <HAL_TIM_Base_MspInit+0xa>
 8003284:	4770      	bx	lr
{
 8003286:	b500      	push	{lr}
 8003288:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800328a:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
 800328e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003290:	f042 0202 	orr.w	r2, r2, #2
 8003294:	659a      	str	r2, [r3, #88]	@ 0x58
 8003296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	9b01      	ldr	r3, [sp, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80032a0:	2200      	movs	r2, #0
 80032a2:	4611      	mov	r1, r2
 80032a4:	201d      	movs	r0, #29
 80032a6:	f000 ffd9 	bl	800425c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80032aa:	201d      	movs	r0, #29
 80032ac:	f001 f80c 	bl	80042c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80032b0:	b003      	add	sp, #12
 80032b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80032b6:	bf00      	nop
 80032b8:	40000400 	.word	0x40000400

080032bc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80032bc:	b508      	push	{r3, lr}
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80032be:	480b      	ldr	r0, [pc, #44]	@ (80032ec <MX_LPUART1_UART_Init+0x30>)
 80032c0:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <MX_LPUART1_UART_Init+0x34>)
 80032c2:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 115200;
 80032c4:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80032c8:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80032ca:	2300      	movs	r3, #0
 80032cc:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80032ce:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80032d0:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80032d2:	220c      	movs	r2, #12
 80032d4:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032d6:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032d8:	6203      	str	r3, [r0, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032da:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80032dc:	f003 fcfc 	bl	8006cd8 <HAL_UART_Init>
 80032e0:	b900      	cbnz	r0, 80032e4 <MX_LPUART1_UART_Init+0x28>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80032e2:	bd08      	pop	{r3, pc}
    Error_Handler();
 80032e4:	f7fe fb6a 	bl	80019bc <Error_Handler>
}
 80032e8:	e7fb      	b.n	80032e2 <MX_LPUART1_UART_Init+0x26>
 80032ea:	bf00      	nop
 80032ec:	20004c0c 	.word	0x20004c0c
 80032f0:	40008000 	.word	0x40008000

080032f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032f4:	b510      	push	{r4, lr}
 80032f6:	b0aa      	sub	sp, #168	@ 0xa8
 80032f8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032fa:	2100      	movs	r1, #0
 80032fc:	9125      	str	r1, [sp, #148]	@ 0x94
 80032fe:	9126      	str	r1, [sp, #152]	@ 0x98
 8003300:	9127      	str	r1, [sp, #156]	@ 0x9c
 8003302:	9128      	str	r1, [sp, #160]	@ 0xa0
 8003304:	9129      	str	r1, [sp, #164]	@ 0xa4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003306:	228c      	movs	r2, #140	@ 0x8c
 8003308:	a802      	add	r0, sp, #8
 800330a:	f005 fe0f 	bl	8008f2c <memset>
  if(uartHandle->Instance==LPUART1)
 800330e:	6822      	ldr	r2, [r4, #0]
 8003310:	4b1a      	ldr	r3, [pc, #104]	@ (800337c <HAL_UART_MspInit+0x88>)
 8003312:	429a      	cmp	r2, r3
 8003314:	d001      	beq.n	800331a <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8003316:	b02a      	add	sp, #168	@ 0xa8
 8003318:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800331a:	2320      	movs	r3, #32
 800331c:	9302      	str	r3, [sp, #8]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 800331e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003322:	9315      	str	r3, [sp, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003324:	a802      	add	r0, sp, #8
 8003326:	f002 f8c7 	bl	80054b8 <HAL_RCCEx_PeriphCLKConfig>
 800332a:	bb20      	cbnz	r0, 8003376 <HAL_UART_MspInit+0x82>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800332c:	4b14      	ldr	r3, [pc, #80]	@ (8003380 <HAL_UART_MspInit+0x8c>)
 800332e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003330:	f042 0201 	orr.w	r2, r2, #1
 8003334:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003336:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003338:	f002 0201 	and.w	r2, r2, #1
 800333c:	9200      	str	r2, [sp, #0]
 800333e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003340:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003342:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003346:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800334a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800334e:	9301      	str	r3, [sp, #4]
 8003350:	9b01      	ldr	r3, [sp, #4]
    HAL_PWREx_EnableVddIO2();
 8003352:	f001 fa87 	bl	8004864 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003356:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800335a:	9325      	str	r3, [sp, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335c:	2302      	movs	r3, #2
 800335e:	9326      	str	r3, [sp, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003360:	2300      	movs	r3, #0
 8003362:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003364:	2303      	movs	r3, #3
 8003366:	9328      	str	r3, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003368:	2308      	movs	r3, #8
 800336a:	9329      	str	r3, [sp, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800336c:	a925      	add	r1, sp, #148	@ 0x94
 800336e:	4805      	ldr	r0, [pc, #20]	@ (8003384 <HAL_UART_MspInit+0x90>)
 8003370:	f001 f924 	bl	80045bc <HAL_GPIO_Init>
}
 8003374:	e7cf      	b.n	8003316 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8003376:	f7fe fb21 	bl	80019bc <Error_Handler>
 800337a:	e7d7      	b.n	800332c <HAL_UART_MspInit+0x38>
 800337c:	40008000 	.word	0x40008000
 8003380:	40021000 	.word	0x40021000
 8003384:	48001800 	.word	0x48001800

08003388 <start_cycle_count>:

#if (PERF_COUNT == 1)

volatile uint8_t counting_cycles = 0;

void start_cycle_count() {
 8003388:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800338a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800338e:	b672      	cpsid	i
	uint32_t prim = __get_PRIMASK();
	__disable_irq();
	if (counting_cycles) {
 8003390:	4b0a      	ldr	r3, [pc, #40]	@ (80033bc <start_cycle_count+0x34>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	b963      	cbnz	r3, 80033b0 <start_cycle_count+0x28>
		DEBUG_PRINT("Tried re-entrant cycle counting.\r\n");
		Error_Handler();
	} else {
		counting_cycles = 1;
 8003396:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <start_cycle_count+0x34>)
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]
	}
	if (!prim) {
 800339c:	b904      	cbnz	r4, 80033a0 <start_cycle_count+0x18>
  __ASM volatile ("cpsie i" : : : "memory");
 800339e:	b662      	cpsie	i
		__enable_irq();
	}
	DWT->CTRL |= 1 ; // enable the counter
 80033a0:	4b07      	ldr	r3, [pc, #28]	@ (80033c0 <start_cycle_count+0x38>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	f042 0201 	orr.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]
	DWT->CYCCNT = 0; // reset the counter
 80033aa:	2200      	movs	r2, #0
 80033ac:	605a      	str	r2, [r3, #4]
}
 80033ae:	bd10      	pop	{r4, pc}
		DEBUG_PRINT("Tried re-entrant cycle counting.\r\n");
 80033b0:	4804      	ldr	r0, [pc, #16]	@ (80033c4 <start_cycle_count+0x3c>)
 80033b2:	f005 fc27 	bl	8008c04 <puts>
		Error_Handler();
 80033b6:	f7fe fb01 	bl	80019bc <Error_Handler>
 80033ba:	e7ef      	b.n	800339c <start_cycle_count+0x14>
 80033bc:	20004c94 	.word	0x20004c94
 80033c0:	e0001000 	.word	0xe0001000
 80033c4:	0800b0d4 	.word	0x0800b0d4

080033c8 <stop_cycle_count>:
void stop_cycle_count(char *s) {
 80033c8:	b538      	push	{r3, r4, r5, lr}
 80033ca:	4604      	mov	r4, r0
	uint32_t res = DWT->CYCCNT;
 80033cc:	4b07      	ldr	r3, [pc, #28]	@ (80033ec <stop_cycle_count+0x24>)
 80033ce:	685d      	ldr	r5, [r3, #4]
	counting_cycles = 0;
 80033d0:	4b07      	ldr	r3, [pc, #28]	@ (80033f0 <stop_cycle_count+0x28>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	701a      	strb	r2, [r3, #0]
	printf("[PERF] ");
 80033d6:	4807      	ldr	r0, [pc, #28]	@ (80033f4 <stop_cycle_count+0x2c>)
 80033d8:	f005 fbac 	bl	8008b34 <iprintf>
	printf(s);
 80033dc:	4620      	mov	r0, r4
 80033de:	f005 fba9 	bl	8008b34 <iprintf>
	printf(" %lu cycles.\r\n", res);
 80033e2:	4629      	mov	r1, r5
 80033e4:	4804      	ldr	r0, [pc, #16]	@ (80033f8 <stop_cycle_count+0x30>)
 80033e6:	f005 fba5 	bl	8008b34 <iprintf>
}
 80033ea:	bd38      	pop	{r3, r4, r5, pc}
 80033ec:	e0001000 	.word	0xe0001000
 80033f0:	20004c94 	.word	0x20004c94
 80033f4:	0800b0f8 	.word	0x0800b0f8
 80033f8:	0800b100 	.word	0x0800b100

080033fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80033fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003434 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003400:	f7ff fee2 	bl	80031c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003404:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003406:	e003      	b.n	8003410 <LoopCopyDataInit>

08003408 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003408:	4b0b      	ldr	r3, [pc, #44]	@ (8003438 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800340a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800340c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800340e:	3104      	adds	r1, #4

08003410 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003410:	480a      	ldr	r0, [pc, #40]	@ (800343c <LoopForever+0xa>)
	ldr	r3, =_edata
 8003412:	4b0b      	ldr	r3, [pc, #44]	@ (8003440 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003414:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003416:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003418:	d3f6      	bcc.n	8003408 <CopyDataInit>
	ldr	r2, =_sbss
 800341a:	4a0a      	ldr	r2, [pc, #40]	@ (8003444 <LoopForever+0x12>)
	b	LoopFillZerobss
 800341c:	e002      	b.n	8003424 <LoopFillZerobss>

0800341e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800341e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003420:	f842 3b04 	str.w	r3, [r2], #4

08003424 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003424:	4b08      	ldr	r3, [pc, #32]	@ (8003448 <LoopForever+0x16>)
	cmp	r2, r3
 8003426:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003428:	d3f9      	bcc.n	800341e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800342a:	f005 fdd7 	bl	8008fdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800342e:	f7fe fb39 	bl	8001aa4 <main>

08003432 <LoopForever>:

LoopForever:
    b LoopForever
 8003432:	e7fe      	b.n	8003432 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003434:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8003438:	0801d2e8 	.word	0x0801d2e8
	ldr	r0, =_sdata
 800343c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003440:	2000314c 	.word	0x2000314c
	ldr	r2, =_sbss
 8003444:	2000314c 	.word	0x2000314c
	ldr	r3, = _ebss
 8003448:	20004de8 	.word	0x20004de8

0800344c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800344c:	e7fe      	b.n	800344c <ADC1_2_IRQHandler>
	...

08003450 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003450:	4b10      	ldr	r3, [pc, #64]	@ (8003494 <HAL_InitTick+0x44>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	b90b      	cbnz	r3, 800345a <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003456:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8003458:	4770      	bx	lr
{
 800345a:	b510      	push	{r4, lr}
 800345c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800345e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003462:	fbb0 f3f3 	udiv	r3, r0, r3
 8003466:	4a0c      	ldr	r2, [pc, #48]	@ (8003498 <HAL_InitTick+0x48>)
 8003468:	6810      	ldr	r0, [r2, #0]
 800346a:	fbb0 f0f3 	udiv	r0, r0, r3
 800346e:	f000 ff39 	bl	80042e4 <HAL_SYSTICK_Config>
 8003472:	b968      	cbnz	r0, 8003490 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003474:	2c0f      	cmp	r4, #15
 8003476:	d901      	bls.n	800347c <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8003478:	2001      	movs	r0, #1
 800347a:	e00a      	b.n	8003492 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800347c:	2200      	movs	r2, #0
 800347e:	4621      	mov	r1, r4
 8003480:	f04f 30ff 	mov.w	r0, #4294967295
 8003484:	f000 feea 	bl	800425c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003488:	4b04      	ldr	r3, [pc, #16]	@ (800349c <HAL_InitTick+0x4c>)
 800348a:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 800348c:	2000      	movs	r0, #0
 800348e:	e000      	b.n	8003492 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8003490:	2001      	movs	r0, #1
}
 8003492:	bd10      	pop	{r4, pc}
 8003494:	20002f7c 	.word	0x20002f7c
 8003498:	20002f78 	.word	0x20002f78
 800349c:	20002f80 	.word	0x20002f80

080034a0 <HAL_Init>:
{
 80034a0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034a2:	2003      	movs	r0, #3
 80034a4:	f000 fec8 	bl	8004238 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80034a8:	2000      	movs	r0, #0
 80034aa:	f7ff ffd1 	bl	8003450 <HAL_InitTick>
 80034ae:	b110      	cbz	r0, 80034b6 <HAL_Init+0x16>
    status = HAL_ERROR;
 80034b0:	2401      	movs	r4, #1
}
 80034b2:	4620      	mov	r0, r4
 80034b4:	bd10      	pop	{r4, pc}
 80034b6:	4604      	mov	r4, r0
    HAL_MspInit();
 80034b8:	f7ff fe22 	bl	8003100 <HAL_MspInit>
 80034bc:	e7f9      	b.n	80034b2 <HAL_Init+0x12>
	...

080034c0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80034c0:	4a03      	ldr	r2, [pc, #12]	@ (80034d0 <HAL_IncTick+0x10>)
 80034c2:	6811      	ldr	r1, [r2, #0]
 80034c4:	4b03      	ldr	r3, [pc, #12]	@ (80034d4 <HAL_IncTick+0x14>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	440b      	add	r3, r1
 80034ca:	6013      	str	r3, [r2, #0]
}
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20004c98 	.word	0x20004c98
 80034d4:	20002f7c 	.word	0x20002f7c

080034d8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80034d8:	4b01      	ldr	r3, [pc, #4]	@ (80034e0 <HAL_GetTick+0x8>)
 80034da:	6818      	ldr	r0, [r3, #0]
}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	20004c98 	.word	0x20004c98

080034e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034e4:	b538      	push	{r3, r4, r5, lr}
 80034e6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80034e8:	f7ff fff6 	bl	80034d8 <HAL_GetTick>
 80034ec:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034ee:	f1b4 3fff 	cmp.w	r4, #4294967295
 80034f2:	d002      	beq.n	80034fa <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 80034f4:	4b04      	ldr	r3, [pc, #16]	@ (8003508 <HAL_Delay+0x24>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80034fa:	f7ff ffed 	bl	80034d8 <HAL_GetTick>
 80034fe:	1b40      	subs	r0, r0, r5
 8003500:	42a0      	cmp	r0, r4
 8003502:	d3fa      	bcc.n	80034fa <HAL_Delay+0x16>
  {
  }
}
 8003504:	bd38      	pop	{r3, r4, r5, pc}
 8003506:	bf00      	nop
 8003508:	20002f7c 	.word	0x20002f7c

0800350c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800350c:	b530      	push	{r4, r5, lr}
 800350e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003510:	2300      	movs	r3, #0
 8003512:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003514:	2800      	cmp	r0, #0
 8003516:	f000 80da 	beq.w	80036ce <HAL_ADC_Init+0x1c2>
 800351a:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800351c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 80a5 	beq.w	800366e <HAL_ADC_Init+0x162>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003524:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	f012 5f00 	tst.w	r2, #536870912	@ 0x20000000
 800352c:	d005      	beq.n	800353a <HAL_ADC_Init+0x2e>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	f022 4220 	bic.w	r2, r2, #2684354560	@ 0xa0000000
 8003534:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003538:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800353a:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800353c:	6893      	ldr	r3, [r2, #8]
 800353e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003542:	d119      	bne.n	8003578 <HAL_ADC_Init+0x6c>
  MODIFY_REG(ADCx->CR,
 8003544:	6893      	ldr	r3, [r2, #8]
 8003546:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800354a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800354e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003552:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003554:	4b5f      	ldr	r3, [pc, #380]	@ (80036d4 <HAL_ADC_Init+0x1c8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	099b      	lsrs	r3, r3, #6
 800355a:	4a5f      	ldr	r2, [pc, #380]	@ (80036d8 <HAL_ADC_Init+0x1cc>)
 800355c:	fba2 2303 	umull	r2, r3, r2, r3
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	3301      	adds	r3, #1
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003568:	9b01      	ldr	r3, [sp, #4]
 800356a:	b12b      	cbz	r3, 8003578 <HAL_ADC_Init+0x6c>
    {
      wait_loop_index--;
 800356c:	9b01      	ldr	r3, [sp, #4]
 800356e:	3b01      	subs	r3, #1
 8003570:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003572:	9b01      	ldr	r3, [sp, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1f9      	bne.n	800356c <HAL_ADC_Init+0x60>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003578:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800357a:	688b      	ldr	r3, [r1, #8]
 800357c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003580:	d17c      	bne.n	800367c <HAL_ADC_Init+0x170>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003582:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003584:	f043 0310 	orr.w	r3, r3, #16
 8003588:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800358a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800358c:	f043 0301 	orr.w	r3, r3, #1
 8003590:	65e3      	str	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003592:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003594:	688a      	ldr	r2, [r1, #8]
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003596:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	f002 0204 	and.w	r2, r2, #4
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f040 808d 	bne.w	80036c0 <HAL_ADC_Init+0x1b4>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80035a8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80035ac:	f043 0302 	orr.w	r3, r3, #2
 80035b0:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035b2:	688b      	ldr	r3, [r1, #8]
 80035b4:	f013 0f01 	tst.w	r3, #1
 80035b8:	d112      	bne.n	80035e0 <HAL_ADC_Init+0xd4>
 80035ba:	4b48      	ldr	r3, [pc, #288]	@ (80036dc <HAL_ADC_Init+0x1d0>)
 80035bc:	6899      	ldr	r1, [r3, #8]
 80035be:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	4a46      	ldr	r2, [pc, #280]	@ (80036e0 <HAL_ADC_Init+0x1d4>)
 80035c6:	6892      	ldr	r2, [r2, #8]
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035c8:	430b      	orrs	r3, r1
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f013 0f01 	tst.w	r3, #1
 80035d0:	d106      	bne.n	80035e0 <HAL_ADC_Init+0xd4>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80035d2:	4a44      	ldr	r2, [pc, #272]	@ (80036e4 <HAL_ADC_Init+0x1d8>)
 80035d4:	6893      	ldr	r3, [r2, #8]
 80035d6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80035da:	6861      	ldr	r1, [r4, #4]
 80035dc:	430b      	orrs	r3, r1
 80035de:	6093      	str	r3, [r2, #8]
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80035e0:	f894 2020 	ldrb.w	r2, [r4, #32]
                 hadc->Init.DataAlign                                                   |
 80035e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80035e6:	68e1      	ldr	r1, [r4, #12]
 80035e8:	430b      	orrs	r3, r1
 80035ea:	68a1      	ldr	r1, [r4, #8]
 80035ec:	430b      	orrs	r3, r1
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035ee:	7e61      	ldrb	r1, [r4, #25]
                 hadc->Init.DataAlign                                                   |
 80035f0:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80035f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80035f8:	2a01      	cmp	r2, #1
 80035fa:	d041      	beq.n	8003680 <HAL_ADC_Init+0x174>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035fc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80035fe:	b122      	cbz	r2, 800360a <HAL_ADC_Init+0xfe>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003600:	f402 7270 	and.w	r2, r2, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003604:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003606:	430a      	orrs	r2, r1
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003608:	4313      	orrs	r3, r2
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800360a:	6821      	ldr	r1, [r4, #0]
 800360c:	68cd      	ldr	r5, [r1, #12]
 800360e:	4a36      	ldr	r2, [pc, #216]	@ (80036e8 <HAL_ADC_Init+0x1dc>)
 8003610:	402a      	ands	r2, r5
 8003612:	431a      	orrs	r2, r3
 8003614:	60ca      	str	r2, [r1, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003616:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003618:	6893      	ldr	r3, [r2, #8]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800361a:	f013 0f08 	tst.w	r3, #8
 800361e:	d117      	bne.n	8003650 <HAL_ADC_Init+0x144>
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003620:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003622:	7e25      	ldrb	r5, [r4, #24]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003624:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8003628:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800362a:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
 800362e:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
 8003630:	432b      	orrs	r3, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003632:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8003636:	f021 0106 	bic.w	r1, r1, #6
 800363a:	430b      	orrs	r3, r1
 800363c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800363e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8003642:	2b01      	cmp	r3, #1
 8003644:	d021      	beq.n	800368a <HAL_ADC_Init+0x17e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003646:	6822      	ldr	r2, [r4, #0]
 8003648:	6913      	ldr	r3, [r2, #16]
 800364a:	f023 0301 	bic.w	r3, r3, #1
 800364e:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003650:	6923      	ldr	r3, [r4, #16]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d02b      	beq.n	80036ae <HAL_ADC_Init+0x1a2>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003656:	6822      	ldr	r2, [r4, #0]
 8003658:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800365a:	f023 030f 	bic.w	r3, r3, #15
 800365e:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003660:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003662:	f023 0303 	bic.w	r3, r3, #3
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800366c:	e02d      	b.n	80036ca <HAL_ADC_Init+0x1be>
    HAL_ADC_MspInit(hadc);
 800366e:	f7fd fc79 	bl	8000f64 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003672:	2300      	movs	r3, #0
 8003674:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8003676:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 800367a:	e753      	b.n	8003524 <HAL_ADC_Init+0x18>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800367c:	2000      	movs	r0, #0
 800367e:	e789      	b.n	8003594 <HAL_ADC_Init+0x88>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003680:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003682:	3a01      	subs	r2, #1
 8003684:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8003688:	e7b8      	b.n	80035fc <HAL_ADC_Init+0xf0>
        MODIFY_REG(hadc->Instance->CFGR2,
 800368a:	6821      	ldr	r1, [r4, #0]
 800368c:	690a      	ldr	r2, [r1, #16]
 800368e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003690:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8003692:	432b      	orrs	r3, r5
 8003694:	f422 62ff 	bic.w	r2, r2, #2040	@ 0x7f8
 8003698:	f022 0204 	bic.w	r2, r2, #4
 800369c:	4313      	orrs	r3, r2
 800369e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80036a0:	4313      	orrs	r3, r2
 80036a2:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f043 0301 	orr.w	r3, r3, #1
 80036aa:	610b      	str	r3, [r1, #16]
 80036ac:	e7d0      	b.n	8003650 <HAL_ADC_Init+0x144>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80036ae:	6821      	ldr	r1, [r4, #0]
 80036b0:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80036b2:	69e3      	ldr	r3, [r4, #28]
 80036b4:	3b01      	subs	r3, #1
 80036b6:	f022 020f 	bic.w	r2, r2, #15
 80036ba:	4313      	orrs	r3, r2
 80036bc:	630b      	str	r3, [r1, #48]	@ 0x30
 80036be:	e7cf      	b.n	8003660 <HAL_ADC_Init+0x154>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80036c2:	f043 0310 	orr.w	r3, r3, #16
 80036c6:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80036c8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 80036ca:	b003      	add	sp, #12
 80036cc:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80036ce:	2001      	movs	r0, #1
 80036d0:	e7fb      	b.n	80036ca <HAL_ADC_Init+0x1be>
 80036d2:	bf00      	nop
 80036d4:	20002f78 	.word	0x20002f78
 80036d8:	053e2d63 	.word	0x053e2d63
 80036dc:	50040000 	.word	0x50040000
 80036e0:	50040200 	.word	0x50040200
 80036e4:	50040300 	.word	0x50040300
 80036e8:	fff0c007 	.word	0xfff0c007

080036ec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80036ec:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036ee:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80036f0:	f7fd fd49 	bl	8001186 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80036f4:	bd08      	pop	{r3, pc}

080036f6 <HAL_ADC_ErrorCallback>:
}
 80036f6:	4770      	bx	lr

080036f8 <ADC_DMAConvCplt>:
{
 80036f8:	b508      	push	{r3, lr}
 80036fa:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036fc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80036fe:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8003700:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8003704:	d130      	bne.n	8003768 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003706:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003708:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800370c:	6583      	str	r3, [r0, #88]	@ 0x58
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800370e:	6803      	ldr	r3, [r0, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	f012 0f08 	tst.w	r2, #8
 8003716:	d014      	beq.n	8003742 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 800371e:	d120      	bne.n	8003762 <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8003726:	d11c      	bne.n	8003762 <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003728:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800372a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800372e:	6583      	str	r3, [r0, #88]	@ 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003730:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003732:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8003736:	d114      	bne.n	8003762 <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003738:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	6583      	str	r3, [r0, #88]	@ 0x58
 8003740:	e00f      	b.n	8003762 <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f013 0f02 	tst.w	r3, #2
 8003748:	d10b      	bne.n	8003762 <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800374a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800374c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003750:	6583      	str	r3, [r0, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003752:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003754:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8003758:	d103      	bne.n	8003762 <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800375a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8003762:	f7fd fd0b 	bl	800117c <HAL_ADC_ConvCpltCallback>
}
 8003766:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003768:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800376a:	f012 0f10 	tst.w	r2, #16
 800376e:	d104      	bne.n	800377a <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003770:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8003772:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003774:	4618      	mov	r0, r3
 8003776:	4790      	blx	r2
}
 8003778:	e7f5      	b.n	8003766 <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 800377a:	f7ff ffbc 	bl	80036f6 <HAL_ADC_ErrorCallback>
 800377e:	e7f2      	b.n	8003766 <ADC_DMAConvCplt+0x6e>

08003780 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003780:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003782:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003784:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800378a:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800378c:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800378e:	f043 0304 	orr.w	r3, r3, #4
 8003792:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003794:	f7ff ffaf 	bl	80036f6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003798:	bd08      	pop	{r3, pc}
	...

0800379c <HAL_ADC_ConfigChannel>:
{
 800379c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800379e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80037a0:	2200      	movs	r2, #0
 80037a2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80037a4:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 80037a8:	2a01      	cmp	r2, #1
 80037aa:	f000 824d 	beq.w	8003c48 <HAL_ADC_ConfigChannel+0x4ac>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2201      	movs	r2, #1
 80037b2:	f880 2054 	strb.w	r2, [r0, #84]	@ 0x54
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037b6:	6800      	ldr	r0, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037b8:	6882      	ldr	r2, [r0, #8]
 80037ba:	f012 0f04 	tst.w	r2, #4
 80037be:	d009      	beq.n	80037d4 <HAL_ADC_ConfigChannel+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80037c2:	f042 0220 	orr.w	r2, r2, #32
 80037c6:	659a      	str	r2, [r3, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 80037c8:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 80037d0:	b003      	add	sp, #12
 80037d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t config_rank = pConfig->Rank;
 80037d4:	684a      	ldr	r2, [r1, #4]
    if (pConfig->Rank <= 5U)
 80037d6:	2a05      	cmp	r2, #5
 80037d8:	d808      	bhi.n	80037ec <HAL_ADC_ConfigChannel+0x50>
      switch (pConfig->Rank)
 80037da:	3a02      	subs	r2, #2
 80037dc:	2a03      	cmp	r2, #3
 80037de:	f200 8098 	bhi.w	8003912 <HAL_ADC_ConfigChannel+0x176>
 80037e2:	e8df f002 	tbb	[pc, r2]
 80037e6:	9802      	.short	0x9802
 80037e8:	9391      	.short	0x9391
          config_rank = ADC_REGULAR_RANK_2;
 80037ea:	220c      	movs	r2, #12
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80037ec:	ea4f 1e92 	mov.w	lr, r2, lsr #6
 80037f0:	f00e 0e0c 	and.w	lr, lr, #12
 80037f4:	3030      	adds	r0, #48	@ 0x30
  MODIFY_REG(*preg,
 80037f6:	f850 400e 	ldr.w	r4, [r0, lr]
 80037fa:	f002 021f 	and.w	r2, r2, #31
 80037fe:	680d      	ldr	r5, [r1, #0]
 8003800:	f3c5 6c84 	ubfx	ip, r5, #26, #5
 8003804:	fa0c fc02 	lsl.w	ip, ip, r2
 8003808:	251f      	movs	r5, #31
 800380a:	fa05 f202 	lsl.w	r2, r5, r2
 800380e:	ea24 0202 	bic.w	r2, r4, r2
 8003812:	ea4c 0202 	orr.w	r2, ip, r2
 8003816:	f840 200e 	str.w	r2, [r0, lr]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800381a:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800381c:	68a0      	ldr	r0, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800381e:	68a2      	ldr	r2, [r4, #8]
 8003820:	f002 0208 	and.w	r2, r2, #8
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003824:	f000 0004 	and.w	r0, r0, #4
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003828:	4302      	orrs	r2, r0
 800382a:	d132      	bne.n	8003892 <HAL_ADC_ConfigChannel+0xf6>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800382c:	688a      	ldr	r2, [r1, #8]
 800382e:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8003832:	d072      	beq.n	800391a <HAL_ADC_ConfigChannel+0x17e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003834:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003836:	ea4f 5cd5 	mov.w	ip, r5, lsr #23
 800383a:	f00c 0c04 	and.w	ip, ip, #4
 800383e:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 8003840:	f854 000c 	ldr.w	r0, [r4, ip]
 8003844:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8003848:	2607      	movs	r6, #7
 800384a:	40ae      	lsls	r6, r5
 800384c:	ea20 0006 	bic.w	r0, r0, r6
 8003850:	40aa      	lsls	r2, r5
 8003852:	4302      	orrs	r2, r0
 8003854:	f844 200c 	str.w	r2, [r4, ip]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003858:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800385a:	6942      	ldr	r2, [r0, #20]
 800385c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003860:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003862:	694a      	ldr	r2, [r1, #20]
 8003864:	681c      	ldr	r4, [r3, #0]
 8003866:	68e0      	ldr	r0, [r4, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003868:	690d      	ldr	r5, [r1, #16]
 800386a:	2d04      	cmp	r5, #4
 800386c:	d069      	beq.n	8003942 <HAL_ADC_ConfigChannel+0x1a6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800386e:	3460      	adds	r4, #96	@ 0x60
  MODIFY_REG(*preg,
 8003870:	f854 7025 	ldr.w	r7, [r4, r5, lsl #2]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003874:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8003878:	0040      	lsls	r0, r0, #1
 800387a:	4082      	lsls	r2, r0
 800387c:	6808      	ldr	r0, [r1, #0]
 800387e:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8003882:	4eb3      	ldr	r6, [pc, #716]	@ (8003b50 <HAL_ADC_ConfigChannel+0x3b4>)
 8003884:	403e      	ands	r6, r7
 8003886:	4330      	orrs	r0, r6
 8003888:	4302      	orrs	r2, r0
 800388a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800388e:	f844 2025 	str.w	r2, [r4, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003892:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003894:	6882      	ldr	r2, [r0, #8]
 8003896:	f012 0f01 	tst.w	r2, #1
 800389a:	d115      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x12c>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800389c:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(ADCx->DIFSEL,
 800389e:	f8d0 50b0 	ldr.w	r5, [r0, #176]	@ 0xb0
 80038a2:	68ca      	ldr	r2, [r1, #12]
 80038a4:	f002 0c18 	and.w	ip, r2, #24
 80038a8:	4aaa      	ldr	r2, [pc, #680]	@ (8003b54 <HAL_ADC_ConfigChannel+0x3b8>)
 80038aa:	fa22 f20c 	lsr.w	r2, r2, ip
 80038ae:	4022      	ands	r2, r4
 80038b0:	f3c4 0412 	ubfx	r4, r4, #0, #19
 80038b4:	ea25 0404 	bic.w	r4, r5, r4
 80038b8:	4322      	orrs	r2, r4
 80038ba:	f8c0 20b0 	str.w	r2, [r0, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80038be:	68c8      	ldr	r0, [r1, #12]
 80038c0:	4aa5      	ldr	r2, [pc, #660]	@ (8003b58 <HAL_ADC_ConfigChannel+0x3bc>)
 80038c2:	4290      	cmp	r0, r2
 80038c4:	f000 80d4 	beq.w	8003a70 <HAL_ADC_ConfigChannel+0x2d4>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80038c8:	680a      	ldr	r2, [r1, #0]
 80038ca:	49a4      	ldr	r1, [pc, #656]	@ (8003b5c <HAL_ADC_ConfigChannel+0x3c0>)
 80038cc:	420a      	tst	r2, r1
 80038ce:	f000 81af 	beq.w	8003c30 <HAL_ADC_ConfigChannel+0x494>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038d2:	49a3      	ldr	r1, [pc, #652]	@ (8003b60 <HAL_ADC_ConfigChannel+0x3c4>)
 80038d4:	6889      	ldr	r1, [r1, #8]
 80038d6:	f001 74e0 	and.w	r4, r1, #29360128	@ 0x1c00000
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038da:	48a2      	ldr	r0, [pc, #648]	@ (8003b64 <HAL_ADC_ConfigChannel+0x3c8>)
 80038dc:	4282      	cmp	r2, r0
 80038de:	f000 815b 	beq.w	8003b98 <HAL_ADC_ConfigChannel+0x3fc>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80038e2:	48a1      	ldr	r0, [pc, #644]	@ (8003b68 <HAL_ADC_ConfigChannel+0x3cc>)
 80038e4:	4282      	cmp	r2, r0
 80038e6:	f000 8182 	beq.w	8003bee <HAL_ADC_ConfigChannel+0x452>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80038ea:	48a0      	ldr	r0, [pc, #640]	@ (8003b6c <HAL_ADC_ConfigChannel+0x3d0>)
 80038ec:	4282      	cmp	r2, r0
 80038ee:	f040 81a7 	bne.w	8003c40 <HAL_ADC_ConfigChannel+0x4a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038f2:	f411 0f80 	tst.w	r1, #4194304	@ 0x400000
 80038f6:	f040 81a5 	bne.w	8003c44 <HAL_ADC_ConfigChannel+0x4a8>
        if (ADC_VREFINT_INSTANCE(hadc))
 80038fa:	6819      	ldr	r1, [r3, #0]
 80038fc:	4a9c      	ldr	r2, [pc, #624]	@ (8003b70 <HAL_ADC_ConfigChannel+0x3d4>)
 80038fe:	4291      	cmp	r1, r2
 8003900:	f000 818c 	beq.w	8003c1c <HAL_ADC_ConfigChannel+0x480>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003904:	2000      	movs	r0, #0
 8003906:	e760      	b.n	80037ca <HAL_ADC_ConfigChannel+0x2e>
          config_rank = ADC_REGULAR_RANK_4;
 8003908:	2218      	movs	r2, #24
          break;
 800390a:	e76f      	b.n	80037ec <HAL_ADC_ConfigChannel+0x50>
          config_rank = ADC_REGULAR_RANK_5;
 800390c:	f44f 7280 	mov.w	r2, #256	@ 0x100
          break;
 8003910:	e76c      	b.n	80037ec <HAL_ADC_ConfigChannel+0x50>
          config_rank = ADC_REGULAR_RANK_1;
 8003912:	2206      	movs	r2, #6
          break;
 8003914:	e76a      	b.n	80037ec <HAL_ADC_ConfigChannel+0x50>
      switch (pConfig->Rank)
 8003916:	2212      	movs	r2, #18
 8003918:	e768      	b.n	80037ec <HAL_ADC_ConfigChannel+0x50>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800391a:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800391c:	0dc2      	lsrs	r2, r0, #23
 800391e:	f002 0204 	and.w	r2, r2, #4
 8003922:	3414      	adds	r4, #20
  MODIFY_REG(*preg,
 8003924:	58a5      	ldr	r5, [r4, r2]
 8003926:	f3c0 5004 	ubfx	r0, r0, #20, #5
 800392a:	2607      	movs	r6, #7
 800392c:	fa06 f000 	lsl.w	r0, r6, r0
 8003930:	ea25 0000 	bic.w	r0, r5, r0
 8003934:	50a0      	str	r0, [r4, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003936:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003938:	6942      	ldr	r2, [r0, #20]
 800393a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800393e:	6142      	str	r2, [r0, #20]
}
 8003940:	e78f      	b.n	8003862 <HAL_ADC_ConfigChannel+0xc6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003942:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8003944:	6e20      	ldr	r0, [r4, #96]	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003946:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800394a:	680a      	ldr	r2, [r1, #0]
 800394c:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003950:	bb5d      	cbnz	r5, 80039aa <HAL_ADC_ConfigChannel+0x20e>
 8003952:	f3c2 6584 	ubfx	r5, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003956:	42a8      	cmp	r0, r5
 8003958:	d057      	beq.n	8003a0a <HAL_ADC_ConfigChannel+0x26e>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800395a:	f104 0564 	add.w	r5, r4, #100	@ 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800395e:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8003960:	6e60      	ldr	r0, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003962:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003966:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800396a:	4282      	cmp	r2, r0
 800396c:	d05e      	beq.n	8003a2c <HAL_ADC_ConfigChannel+0x290>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	f102 0468 	add.w	r4, r2, #104	@ 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003974:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8003976:	6e90      	ldr	r0, [r2, #104]	@ 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003978:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800397c:	680a      	ldr	r2, [r1, #0]
 800397e:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003982:	4282      	cmp	r2, r0
 8003984:	d063      	beq.n	8003a4e <HAL_ADC_ConfigChannel+0x2b2>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	f102 046c 	add.w	r4, r2, #108	@ 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800398c:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 800398e:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003990:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003994:	680a      	ldr	r2, [r1, #0]
 8003996:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800399a:	4282      	cmp	r2, r0
 800399c:	f47f af79 	bne.w	8003892 <HAL_ADC_ConfigChannel+0xf6>
  MODIFY_REG(*preg,
 80039a0:	6822      	ldr	r2, [r4, #0]
 80039a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80039a6:	6022      	str	r2, [r4, #0]
}
 80039a8:	e773      	b.n	8003892 <HAL_ADC_ConfigChannel+0xf6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039aa:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80039ae:	b11d      	cbz	r5, 80039b8 <HAL_ADC_ConfigChannel+0x21c>
  return __builtin_clz(value);
 80039b0:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80039b4:	42a8      	cmp	r0, r5
 80039b6:	d028      	beq.n	8003a0a <HAL_ADC_ConfigChannel+0x26e>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039b8:	f104 0564 	add.w	r5, r4, #100	@ 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80039bc:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80039be:	6e60      	ldr	r0, [r4, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039c0:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c4:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80039c8:	b11a      	cbz	r2, 80039d2 <HAL_ADC_ConfigChannel+0x236>
  return __builtin_clz(value);
 80039ca:	fab2 f282 	clz	r2, r2
 80039ce:	4282      	cmp	r2, r0
 80039d0:	d02c      	beq.n	8003a2c <HAL_ADC_ConfigChannel+0x290>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	f102 0468 	add.w	r4, r2, #104	@ 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80039d8:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 80039da:	6e90      	ldr	r0, [r2, #104]	@ 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80039dc:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039e0:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e2:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80039e6:	b11a      	cbz	r2, 80039f0 <HAL_ADC_ConfigChannel+0x254>
  return __builtin_clz(value);
 80039e8:	fab2 f282 	clz	r2, r2
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80039ec:	4282      	cmp	r2, r0
 80039ee:	d02e      	beq.n	8003a4e <HAL_ADC_ConfigChannel+0x2b2>
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	f102 046c 	add.w	r4, r2, #108	@ 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80039f6:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 80039f8:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80039fa:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039fe:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a00:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8003a04:	fab2 f282 	clz	r2, r2
 8003a08:	e7c7      	b.n	800399a <HAL_ADC_ConfigChannel+0x1fe>
  MODIFY_REG(*preg,
 8003a0a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8003a0c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003a10:	6622      	str	r2, [r4, #96]	@ 0x60
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	f102 0564 	add.w	r5, r2, #100	@ 0x64
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a18:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8003a1a:	6e50      	ldr	r0, [r2, #100]	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a1c:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a20:	680a      	ldr	r2, [r1, #0]
 8003a22:	f3c2 0412 	ubfx	r4, r2, #0, #19
 8003a26:	2c00      	cmp	r4, #0
 8003a28:	d1cc      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x228>
 8003a2a:	e79c      	b.n	8003966 <HAL_ADC_ConfigChannel+0x1ca>
  MODIFY_REG(*preg,
 8003a2c:	682a      	ldr	r2, [r5, #0]
 8003a2e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003a32:	602a      	str	r2, [r5, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	f102 0468 	add.w	r4, r2, #104	@ 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a3a:	6e90      	ldr	r0, [r2, #104]	@ 0x68
 8003a3c:	6e90      	ldr	r0, [r2, #104]	@ 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a3e:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a42:	680a      	ldr	r2, [r1, #0]
 8003a44:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003a48:	2d00      	cmp	r5, #0
 8003a4a:	d1ca      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x246>
 8003a4c:	e797      	b.n	800397e <HAL_ADC_ConfigChannel+0x1e2>
  MODIFY_REG(*preg,
 8003a4e:	6822      	ldr	r2, [r4, #0]
 8003a50:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003a54:	6022      	str	r2, [r4, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	f102 046c 	add.w	r4, r2, #108	@ 0x6c
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a5c:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
 8003a5e:	6ed0      	ldr	r0, [r2, #108]	@ 0x6c
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a60:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a64:	680a      	ldr	r2, [r1, #0]
 8003a66:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003a6a:	2d00      	cmp	r5, #0
 8003a6c:	d1c8      	bne.n	8003a00 <HAL_ADC_ConfigChannel+0x264>
 8003a6e:	e792      	b.n	8003996 <HAL_ADC_ConfigChannel+0x1fa>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a70:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a72:	680a      	ldr	r2, [r1, #0]
 8003a74:	f3c2 0412 	ubfx	r4, r2, #0, #19
 8003a78:	bb14      	cbnz	r4, 8003ac0 <HAL_ADC_ConfigChannel+0x324>
 8003a7a:	0e94      	lsrs	r4, r2, #26
 8003a7c:	3401      	adds	r4, #1
 8003a7e:	f004 051f 	and.w	r5, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a82:	2d09      	cmp	r5, #9
 8003a84:	d876      	bhi.n	8003b74 <HAL_ADC_ConfigChannel+0x3d8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a86:	06a4      	lsls	r4, r4, #26
 8003a88:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	40aa      	lsls	r2, r5
 8003a90:	4314      	orrs	r4, r2
 8003a92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a96:	052a      	lsls	r2, r5, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a98:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003a9a:	0dd5      	lsrs	r5, r2, #23
 8003a9c:	f005 0504 	and.w	r5, r5, #4
 8003aa0:	3014      	adds	r0, #20
  MODIFY_REG(*preg,
 8003aa2:	5944      	ldr	r4, [r0, r5]
 8003aa4:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003aa8:	f04f 0c07 	mov.w	ip, #7
 8003aac:	fa0c fc02 	lsl.w	ip, ip, r2
 8003ab0:	ea24 040c 	bic.w	r4, r4, ip
 8003ab4:	688e      	ldr	r6, [r1, #8]
 8003ab6:	fa06 f202 	lsl.w	r2, r6, r2
 8003aba:	4322      	orrs	r2, r4
 8003abc:	5142      	str	r2, [r0, r5]
}
 8003abe:	e703      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x12c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac0:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8003ac4:	b334      	cbz	r4, 8003b14 <HAL_ADC_ConfigChannel+0x378>
  return __builtin_clz(value);
 8003ac6:	fab4 f484 	clz	r4, r4
 8003aca:	3401      	adds	r4, #1
 8003acc:	f004 041f 	and.w	r4, r4, #31
 8003ad0:	2c09      	cmp	r4, #9
 8003ad2:	d91f      	bls.n	8003b14 <HAL_ADC_ConfigChannel+0x378>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad4:	fa92 f5a2 	rbit	r5, r2
  return __builtin_clz(value);
 8003ad8:	fab5 f585 	clz	r5, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003adc:	3501      	adds	r5, #1
 8003ade:	06ad      	lsls	r5, r5, #26
 8003ae0:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ae4:	fa92 f6a2 	rbit	r6, r2
  return __builtin_clz(value);
 8003ae8:	fab6 f686 	clz	r6, r6
 8003aec:	3601      	adds	r6, #1
 8003aee:	f006 061f 	and.w	r6, r6, #31
 8003af2:	2401      	movs	r4, #1
 8003af4:	40b4      	lsls	r4, r6
 8003af6:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af8:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8003afc:	fab2 f282 	clz	r2, r2
 8003b00:	3201      	adds	r2, #1
 8003b02:	f002 021f 	and.w	r2, r2, #31
 8003b06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003b0a:	3a1e      	subs	r2, #30
 8003b0c:	0512      	lsls	r2, r2, #20
 8003b0e:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8003b12:	e03f      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b14:	fa92 f5a2 	rbit	r5, r2
  return __builtin_clz(value);
 8003b18:	fab5 f585 	clz	r5, r5
 8003b1c:	3501      	adds	r5, #1
 8003b1e:	06ad      	lsls	r5, r5, #26
 8003b20:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b24:	fa92 f6a2 	rbit	r6, r2
  return __builtin_clz(value);
 8003b28:	fab6 f686 	clz	r6, r6
 8003b2c:	3601      	adds	r6, #1
 8003b2e:	f006 061f 	and.w	r6, r6, #31
 8003b32:	2401      	movs	r4, #1
 8003b34:	40b4      	lsls	r4, r6
 8003b36:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b38:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8003b3c:	fab2 f282 	clz	r2, r2
 8003b40:	3201      	adds	r2, #1
 8003b42:	f002 021f 	and.w	r2, r2, #31
 8003b46:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003b4a:	0512      	lsls	r2, r2, #20
 8003b4c:	e7a4      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x2fc>
 8003b4e:	bf00      	nop
 8003b50:	03fff000 	.word	0x03fff000
 8003b54:	0007ffff 	.word	0x0007ffff
 8003b58:	407f0000 	.word	0x407f0000
 8003b5c:	80080000 	.word	0x80080000
 8003b60:	50040300 	.word	0x50040300
 8003b64:	c7520000 	.word	0xc7520000
 8003b68:	cb840000 	.word	0xcb840000
 8003b6c:	80000001 	.word	0x80000001
 8003b70:	50040000 	.word	0x50040000
 8003b74:	0e94      	lsrs	r4, r2, #26
 8003b76:	3401      	adds	r4, #1
 8003b78:	f004 021f 	and.w	r2, r4, #31
 8003b7c:	06a4      	lsls	r4, r4, #26
 8003b7e:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8003b82:	2501      	movs	r5, #1
 8003b84:	4095      	lsls	r5, r2
 8003b86:	432c      	orrs	r4, r5
 8003b88:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003b8c:	3a1e      	subs	r2, #30
 8003b8e:	0512      	lsls	r2, r2, #20
 8003b90:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b94:	4322      	orrs	r2, r4
 8003b96:	e780      	b.n	8003a9a <HAL_ADC_ConfigChannel+0x2fe>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b98:	f411 0f00 	tst.w	r1, #8388608	@ 0x800000
 8003b9c:	d14a      	bne.n	8003c34 <HAL_ADC_ConfigChannel+0x498>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	492a      	ldr	r1, [pc, #168]	@ (8003c4c <HAL_ADC_ConfigChannel+0x4b0>)
 8003ba2:	428a      	cmp	r2, r1
 8003ba4:	d005      	beq.n	8003bb2 <HAL_ADC_ConfigChannel+0x416>
 8003ba6:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8003baa:	428a      	cmp	r2, r1
 8003bac:	d001      	beq.n	8003bb2 <HAL_ADC_ConfigChannel+0x416>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bae:	2000      	movs	r0, #0
 8003bb0:	e60b      	b.n	80037ca <HAL_ADC_ConfigChannel+0x2e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003bb2:	4927      	ldr	r1, [pc, #156]	@ (8003c50 <HAL_ADC_ConfigChannel+0x4b4>)
 8003bb4:	688a      	ldr	r2, [r1, #8]
 8003bb6:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003bba:	4322      	orrs	r2, r4
 8003bbc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003bc0:	608a      	str	r2, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bc2:	4a24      	ldr	r2, [pc, #144]	@ (8003c54 <HAL_ADC_ConfigChannel+0x4b8>)
 8003bc4:	6812      	ldr	r2, [r2, #0]
 8003bc6:	0992      	lsrs	r2, r2, #6
 8003bc8:	4923      	ldr	r1, [pc, #140]	@ (8003c58 <HAL_ADC_ConfigChannel+0x4bc>)
 8003bca:	fba1 1202 	umull	r1, r2, r1, r2
 8003bce:	0992      	lsrs	r2, r2, #6
 8003bd0:	3201      	adds	r2, #1
 8003bd2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003bd6:	0092      	lsls	r2, r2, #2
 8003bd8:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003bda:	9a01      	ldr	r2, [sp, #4]
 8003bdc:	b362      	cbz	r2, 8003c38 <HAL_ADC_ConfigChannel+0x49c>
            wait_loop_index--;
 8003bde:	9a01      	ldr	r2, [sp, #4]
 8003be0:	3a01      	subs	r2, #1
 8003be2:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003be4:	9a01      	ldr	r2, [sp, #4]
 8003be6:	2a00      	cmp	r2, #0
 8003be8:	d1f9      	bne.n	8003bde <HAL_ADC_ConfigChannel+0x442>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bea:	2000      	movs	r0, #0
 8003bec:	e5ed      	b.n	80037ca <HAL_ADC_ConfigChannel+0x2e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003bee:	f011 7f80 	tst.w	r1, #16777216	@ 0x1000000
 8003bf2:	d123      	bne.n	8003c3c <HAL_ADC_ConfigChannel+0x4a0>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	4915      	ldr	r1, [pc, #84]	@ (8003c4c <HAL_ADC_ConfigChannel+0x4b0>)
 8003bf8:	428a      	cmp	r2, r1
 8003bfa:	d005      	beq.n	8003c08 <HAL_ADC_ConfigChannel+0x46c>
 8003bfc:	f501 7100 	add.w	r1, r1, #512	@ 0x200
 8003c00:	428a      	cmp	r2, r1
 8003c02:	d001      	beq.n	8003c08 <HAL_ADC_ConfigChannel+0x46c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c04:	2000      	movs	r0, #0
 8003c06:	e5e0      	b.n	80037ca <HAL_ADC_ConfigChannel+0x2e>
 8003c08:	4911      	ldr	r1, [pc, #68]	@ (8003c50 <HAL_ADC_ConfigChannel+0x4b4>)
 8003c0a:	688a      	ldr	r2, [r1, #8]
 8003c0c:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003c10:	4322      	orrs	r2, r4
 8003c12:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003c16:	608a      	str	r2, [r1, #8]
 8003c18:	2000      	movs	r0, #0
}
 8003c1a:	e5d6      	b.n	80037ca <HAL_ADC_ConfigChannel+0x2e>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003c1c:	490c      	ldr	r1, [pc, #48]	@ (8003c50 <HAL_ADC_ConfigChannel+0x4b4>)
 8003c1e:	688a      	ldr	r2, [r1, #8]
 8003c20:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003c24:	4322      	orrs	r2, r4
 8003c26:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8003c2a:	608a      	str	r2, [r1, #8]
 8003c2c:	2000      	movs	r0, #0
}
 8003c2e:	e5cc      	b.n	80037ca <HAL_ADC_ConfigChannel+0x2e>
 8003c30:	2000      	movs	r0, #0
 8003c32:	e5ca      	b.n	80037ca <HAL_ADC_ConfigChannel+0x2e>
 8003c34:	2000      	movs	r0, #0
 8003c36:	e5c8      	b.n	80037ca <HAL_ADC_ConfigChannel+0x2e>
 8003c38:	2000      	movs	r0, #0
 8003c3a:	e5c6      	b.n	80037ca <HAL_ADC_ConfigChannel+0x2e>
 8003c3c:	2000      	movs	r0, #0
 8003c3e:	e5c4      	b.n	80037ca <HAL_ADC_ConfigChannel+0x2e>
 8003c40:	2000      	movs	r0, #0
 8003c42:	e5c2      	b.n	80037ca <HAL_ADC_ConfigChannel+0x2e>
 8003c44:	2000      	movs	r0, #0
 8003c46:	e5c0      	b.n	80037ca <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8003c48:	2002      	movs	r0, #2
 8003c4a:	e5c1      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x34>
 8003c4c:	50040000 	.word	0x50040000
 8003c50:	50040300 	.word	0x50040300
 8003c54:	20002f78 	.word	0x20002f78
 8003c58:	053e2d63 	.word	0x053e2d63

08003c5c <ADC_ConversionStop>:
{
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c60:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c62:	6898      	ldr	r0, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	f002 0208 	and.w	r2, r2, #8
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c6a:	f000 0004 	and.w	r0, r0, #4
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003c6e:	4302      	orrs	r2, r0
 8003c70:	d076      	beq.n	8003d60 <ADC_ConversionStop+0x104>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003c72:	68da      	ldr	r2, [r3, #12]
 8003c74:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8003c78:	d004      	beq.n	8003c84 <ADC_ConversionStop+0x28>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003c7a:	8b20      	ldrh	r0, [r4, #24]
 8003c7c:	f240 1201 	movw	r2, #257	@ 0x101
 8003c80:	4290      	cmp	r0, r2
 8003c82:	d027      	beq.n	8003cd4 <ADC_ConversionStop+0x78>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003c84:	2902      	cmp	r1, #2
 8003c86:	d06d      	beq.n	8003d64 <ADC_ConversionStop+0x108>
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	f012 0f04 	tst.w	r2, #4
 8003c8e:	d00b      	beq.n	8003ca8 <ADC_ConversionStop+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	f012 0f02 	tst.w	r2, #2
 8003c96:	d107      	bne.n	8003ca8 <ADC_ConversionStop+0x4c>
  MODIFY_REG(ADCx->CR,
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003c9e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003ca2:	f042 0210 	orr.w	r2, r2, #16
 8003ca6:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003ca8:	2901      	cmp	r1, #1
 8003caa:	d03e      	beq.n	8003d2a <ADC_ConversionStop+0xce>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003cac:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	f012 0f08 	tst.w	r2, #8
 8003cb4:	d12c      	bne.n	8003d10 <ADC_ConversionStop+0xb4>
    switch (conversion_group_reassigned)
 8003cb6:	2902      	cmp	r1, #2
 8003cb8:	d05c      	beq.n	8003d74 <ADC_ConversionStop+0x118>
 8003cba:	2903      	cmp	r1, #3
 8003cbc:	bf0c      	ite	eq
 8003cbe:	250c      	moveq	r5, #12
 8003cc0:	2504      	movne	r5, #4
    tickstart = HAL_GetTick();
 8003cc2:	f7ff fc09 	bl	80034d8 <HAL_GetTick>
 8003cc6:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003cc8:	6823      	ldr	r3, [r4, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	421d      	tst	r5, r3
 8003cce:	d132      	bne.n	8003d36 <ADC_ConversionStop+0xda>
  return HAL_OK;
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	e046      	b.n	8003d62 <ADC_ConversionStop+0x106>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8003cda:	d110      	bne.n	8003cfe <ADC_ConversionStop+0xa2>
 8003cdc:	4a2a      	ldr	r2, [pc, #168]	@ (8003d88 <ADC_ConversionStop+0x12c>)
 8003cde:	6819      	ldr	r1, [r3, #0]
 8003ce0:	f011 0f40 	tst.w	r1, #64	@ 0x40
 8003ce4:	d10b      	bne.n	8003cfe <ADC_ConversionStop+0xa2>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003ce6:	3a01      	subs	r2, #1
 8003ce8:	d1f9      	bne.n	8003cde <ADC_ConversionStop+0x82>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003cec:	f043 0310 	orr.w	r3, r3, #16
 8003cf0:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cf2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003cf4:	f043 0301 	orr.w	r3, r3, #1
 8003cf8:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8003cfa:	2001      	movs	r0, #1
 8003cfc:	e031      	b.n	8003d62 <ADC_ConversionStop+0x106>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003cfe:	2240      	movs	r2, #64	@ 0x40
 8003d00:	601a      	str	r2, [r3, #0]
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003d02:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	f012 0f04 	tst.w	r2, #4
 8003d0a:	d135      	bne.n	8003d78 <ADC_ConversionStop+0x11c>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003d0c:	2504      	movs	r5, #4
 8003d0e:	e7d8      	b.n	8003cc2 <ADC_ConversionStop+0x66>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	f012 0f02 	tst.w	r2, #2
 8003d16:	d1ce      	bne.n	8003cb6 <ADC_ConversionStop+0x5a>
  MODIFY_REG(ADCx->CR,
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003d1e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003d22:	f042 0220 	orr.w	r2, r2, #32
 8003d26:	609a      	str	r2, [r3, #8]
}
 8003d28:	e7c5      	b.n	8003cb6 <ADC_ConversionStop+0x5a>
 8003d2a:	2504      	movs	r5, #4
 8003d2c:	e7c9      	b.n	8003cc2 <ADC_ConversionStop+0x66>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	422b      	tst	r3, r5
 8003d34:	d012      	beq.n	8003d5c <ADC_ConversionStop+0x100>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003d36:	f7ff fbcf 	bl	80034d8 <HAL_GetTick>
 8003d3a:	1b80      	subs	r0, r0, r6
 8003d3c:	2805      	cmp	r0, #5
 8003d3e:	d9f6      	bls.n	8003d2e <ADC_ConversionStop+0xd2>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	422b      	tst	r3, r5
 8003d46:	d0f2      	beq.n	8003d2e <ADC_ConversionStop+0xd2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003d4a:	f043 0310 	orr.w	r3, r3, #16
 8003d4e:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d50:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8003d58:	2001      	movs	r0, #1
 8003d5a:	e002      	b.n	8003d62 <ADC_ConversionStop+0x106>
  return HAL_OK;
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	e000      	b.n	8003d62 <ADC_ConversionStop+0x106>
 8003d60:	2000      	movs	r0, #0
}
 8003d62:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	f012 0f08 	tst.w	r2, #8
 8003d6a:	d003      	beq.n	8003d74 <ADC_ConversionStop+0x118>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	f012 0f02 	tst.w	r2, #2
 8003d72:	d0d1      	beq.n	8003d18 <ADC_ConversionStop+0xbc>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003d74:	2508      	movs	r5, #8
        break;
 8003d76:	e7a4      	b.n	8003cc2 <ADC_ConversionStop+0x66>
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	f012 0f02 	tst.w	r2, #2
 8003d7e:	d001      	beq.n	8003d84 <ADC_ConversionStop+0x128>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003d80:	2504      	movs	r5, #4
 8003d82:	e79e      	b.n	8003cc2 <ADC_ConversionStop+0x66>
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003d84:	2101      	movs	r1, #1
 8003d86:	e787      	b.n	8003c98 <ADC_ConversionStop+0x3c>
 8003d88:	a3400000 	.word	0xa3400000

08003d8c <ADC_Enable>:
{
 8003d8c:	b530      	push	{r4, r5, lr}
 8003d8e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8003d90:	2300      	movs	r3, #0
 8003d92:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d94:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	f012 0f01 	tst.w	r2, #1
 8003d9c:	d160      	bne.n	8003e60 <ADC_Enable+0xd4>
 8003d9e:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003da0:	6899      	ldr	r1, [r3, #8]
 8003da2:	4a31      	ldr	r2, [pc, #196]	@ (8003e68 <ADC_Enable+0xdc>)
 8003da4:	4211      	tst	r1, r2
 8003da6:	d12a      	bne.n	8003dfe <ADC_Enable+0x72>
  MODIFY_REG(ADCx->CR,
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003dae:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003db8:	4b2c      	ldr	r3, [pc, #176]	@ (8003e6c <ADC_Enable+0xe0>)
 8003dba:	689b      	ldr	r3, [r3, #8]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003dbc:	f413 0f00 	tst.w	r3, #8388608	@ 0x800000
 8003dc0:	d013      	beq.n	8003dea <ADC_Enable+0x5e>
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8003e70 <ADC_Enable+0xe4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	099b      	lsrs	r3, r3, #6
 8003dc8:	4a2a      	ldr	r2, [pc, #168]	@ (8003e74 <ADC_Enable+0xe8>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	099b      	lsrs	r3, r3, #6
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003dda:	9b01      	ldr	r3, [sp, #4]
 8003ddc:	b12b      	cbz	r3, 8003dea <ADC_Enable+0x5e>
        wait_loop_index--;
 8003dde:	9b01      	ldr	r3, [sp, #4]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003de4:	9b01      	ldr	r3, [sp, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f9      	bne.n	8003dde <ADC_Enable+0x52>
    tickstart = HAL_GetTick();
 8003dea:	f7ff fb75 	bl	80034d8 <HAL_GetTick>
 8003dee:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	f012 0f01 	tst.w	r2, #1
 8003df8:	d010      	beq.n	8003e1c <ADC_Enable+0x90>
  return HAL_OK;
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	e031      	b.n	8003e62 <ADC_Enable+0xd6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dfe:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003e00:	f043 0310 	orr.w	r3, r3, #16
 8003e04:	6583      	str	r3, [r0, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e06:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	65c3      	str	r3, [r0, #92]	@ 0x5c
      return HAL_ERROR;
 8003e0e:	2001      	movs	r0, #1
 8003e10:	e027      	b.n	8003e62 <ADC_Enable+0xd6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	f012 0f01 	tst.w	r2, #1
 8003e1a:	d11f      	bne.n	8003e5c <ADC_Enable+0xd0>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	f012 0f01 	tst.w	r2, #1
 8003e22:	d107      	bne.n	8003e34 <ADC_Enable+0xa8>
  MODIFY_REG(ADCx->CR,
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003e2a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003e34:	f7ff fb50 	bl	80034d8 <HAL_GetTick>
 8003e38:	1b43      	subs	r3, r0, r5
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d9e9      	bls.n	8003e12 <ADC_Enable+0x86>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f013 0f01 	tst.w	r3, #1
 8003e46:	d1e4      	bne.n	8003e12 <ADC_Enable+0x86>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e4a:	f043 0310 	orr.w	r3, r3, #16
 8003e4e:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e50:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8003e58:	2001      	movs	r0, #1
 8003e5a:	e002      	b.n	8003e62 <ADC_Enable+0xd6>
  return HAL_OK;
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	e000      	b.n	8003e62 <ADC_Enable+0xd6>
 8003e60:	2000      	movs	r0, #0
}
 8003e62:	b003      	add	sp, #12
 8003e64:	bd30      	pop	{r4, r5, pc}
 8003e66:	bf00      	nop
 8003e68:	8000003f 	.word	0x8000003f
 8003e6c:	50040300 	.word	0x50040300
 8003e70:	20002f78 	.word	0x20002f78
 8003e74:	053e2d63 	.word	0x053e2d63

08003e78 <HAL_ADC_Start_DMA>:
{
 8003e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7a:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003e7c:	4839      	ldr	r0, [pc, #228]	@ (8003f64 <HAL_ADC_Start_DMA+0xec>)
 8003e7e:	6883      	ldr	r3, [r0, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e80:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e82:	6885      	ldr	r5, [r0, #8]
 8003e84:	f015 0f04 	tst.w	r5, #4
 8003e88:	d164      	bne.n	8003f54 <HAL_ADC_Start_DMA+0xdc>
 8003e8a:	460f      	mov	r7, r1
 8003e8c:	4616      	mov	r6, r2
    __HAL_LOCK(hadc);
 8003e8e:	f894 2054 	ldrb.w	r2, [r4, #84]	@ 0x54
 8003e92:	2a01      	cmp	r2, #1
 8003e94:	d060      	beq.n	8003f58 <HAL_ADC_Start_DMA+0xe0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003e96:	f003 051f 	and.w	r5, r3, #31
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003ea0:	4b31      	ldr	r3, [pc, #196]	@ (8003f68 <HAL_ADC_Start_DMA+0xf0>)
 8003ea2:	4298      	cmp	r0, r3
 8003ea4:	d00a      	beq.n	8003ebc <HAL_ADC_Start_DMA+0x44>
 8003ea6:	f240 2321 	movw	r3, #545	@ 0x221
 8003eaa:	40eb      	lsrs	r3, r5
 8003eac:	f013 0f01 	tst.w	r3, #1
 8003eb0:	d104      	bne.n	8003ebc <HAL_ADC_Start_DMA+0x44>
      __HAL_UNLOCK(hadc);
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
      tmp_hal_status = HAL_ERROR;
 8003eb8:	2001      	movs	r0, #1
 8003eba:	e04c      	b.n	8003f56 <HAL_ADC_Start_DMA+0xde>
      tmp_hal_status = ADC_Enable(hadc);
 8003ebc:	4620      	mov	r0, r4
 8003ebe:	f7ff ff65 	bl	8003d8c <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8003ec2:	2800      	cmp	r0, #0
 8003ec4:	d142      	bne.n	8003f4c <HAL_ADC_Start_DMA+0xd4>
        ADC_STATE_CLR_SET(hadc->State,
 8003ec6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ec8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ecc:	f023 0301 	bic.w	r3, r3, #1
 8003ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ed4:	65a3      	str	r3, [r4, #88]	@ 0x58
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ed6:	6822      	ldr	r2, [r4, #0]
 8003ed8:	4b24      	ldr	r3, [pc, #144]	@ (8003f6c <HAL_ADC_Start_DMA+0xf4>)
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d03e      	beq.n	8003f5c <HAL_ADC_Start_DMA+0xe4>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ede:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ee0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ee4:	65a3      	str	r3, [r4, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003ee6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ee8:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003eec:	bf1a      	itte	ne
 8003eee:	6de3      	ldrne	r3, [r4, #92]	@ 0x5c
 8003ef0:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8003ef4:	2300      	moveq	r3, #0
 8003ef6:	65e3      	str	r3, [r4, #92]	@ 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ef8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8003efa:	4a1d      	ldr	r2, [pc, #116]	@ (8003f70 <HAL_ADC_Start_DMA+0xf8>)
 8003efc:	62da      	str	r2, [r3, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003efe:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8003f00:	4a1c      	ldr	r2, [pc, #112]	@ (8003f74 <HAL_ADC_Start_DMA+0xfc>)
 8003f02:	631a      	str	r2, [r3, #48]	@ 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003f04:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8003f06:	4a1c      	ldr	r2, [pc, #112]	@ (8003f78 <HAL_ADC_Start_DMA+0x100>)
 8003f08:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	221c      	movs	r2, #28
 8003f0e:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8003f10:	2300      	movs	r3, #0
 8003f12:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f16:	6822      	ldr	r2, [r4, #0]
 8003f18:	6853      	ldr	r3, [r2, #4]
 8003f1a:	f043 0310 	orr.w	r3, r3, #16
 8003f1e:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003f20:	6822      	ldr	r2, [r4, #0]
 8003f22:	68d3      	ldr	r3, [r2, #12]
 8003f24:	f043 0301 	orr.w	r3, r3, #1
 8003f28:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003f2a:	6821      	ldr	r1, [r4, #0]
 8003f2c:	4633      	mov	r3, r6
 8003f2e:	463a      	mov	r2, r7
 8003f30:	3140      	adds	r1, #64	@ 0x40
 8003f32:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8003f34:	f000 fa6a 	bl	800440c <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003f38:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003f3a:	6893      	ldr	r3, [r2, #8]
 8003f3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f40:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003f44:	f043 0304 	orr.w	r3, r3, #4
 8003f48:	6093      	str	r3, [r2, #8]
}
 8003f4a:	e004      	b.n	8003f56 <HAL_ADC_Start_DMA+0xde>
        __HAL_UNLOCK(hadc);
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8003f52:	e000      	b.n	8003f56 <HAL_ADC_Start_DMA+0xde>
    tmp_hal_status = HAL_BUSY;
 8003f54:	2002      	movs	r0, #2
}
 8003f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8003f58:	2002      	movs	r0, #2
 8003f5a:	e7fc      	b.n	8003f56 <HAL_ADC_Start_DMA+0xde>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f5c:	2d00      	cmp	r5, #0
 8003f5e:	d0be      	beq.n	8003ede <HAL_ADC_Start_DMA+0x66>
 8003f60:	e7c1      	b.n	8003ee6 <HAL_ADC_Start_DMA+0x6e>
 8003f62:	bf00      	nop
 8003f64:	50040300 	.word	0x50040300
 8003f68:	50040200 	.word	0x50040200
 8003f6c:	50040100 	.word	0x50040100
 8003f70:	080036f9 	.word	0x080036f9
 8003f74:	080036ed 	.word	0x080036ed
 8003f78:	08003781 	.word	0x08003781

08003f7c <ADC_Disable>:
{
 8003f7c:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f7e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003f80:	6899      	ldr	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	f012 0f01 	tst.w	r2, #1
 8003f88:	d043      	beq.n	8004012 <ADC_Disable+0x96>
 8003f8a:	4604      	mov	r4, r0
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f8c:	f011 0f02 	tst.w	r1, #2
 8003f90:	d141      	bne.n	8004016 <ADC_Disable+0x9a>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	f002 020d 	and.w	r2, r2, #13
 8003f98:	2a01      	cmp	r2, #1
 8003f9a:	d009      	beq.n	8003fb0 <ADC_Disable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f9c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8003f9e:	f043 0310 	orr.w	r3, r3, #16
 8003fa2:	6583      	str	r3, [r0, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fa4:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	65c3      	str	r3, [r0, #92]	@ 0x5c
      return HAL_ERROR;
 8003fac:	2001      	movs	r0, #1
 8003fae:	e031      	b.n	8004014 <ADC_Disable+0x98>
  MODIFY_REG(ADCx->CR,
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003fb6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003fba:	f042 0202 	orr.w	r2, r2, #2
 8003fbe:	609a      	str	r2, [r3, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003fc0:	6803      	ldr	r3, [r0, #0]
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003fc6:	f7ff fa87 	bl	80034d8 <HAL_GetTick>
 8003fca:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f013 0f01 	tst.w	r3, #1
  return HAL_OK;
 8003fd4:	bf08      	it	eq
 8003fd6:	2000      	moveq	r0, #0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fd8:	d105      	bne.n	8003fe6 <ADC_Disable+0x6a>
 8003fda:	e01b      	b.n	8004014 <ADC_Disable+0x98>
 8003fdc:	6823      	ldr	r3, [r4, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f013 0f01 	tst.w	r3, #1
 8003fe4:	d013      	beq.n	800400e <ADC_Disable+0x92>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003fe6:	f7ff fa77 	bl	80034d8 <HAL_GetTick>
 8003fea:	1b40      	subs	r0, r0, r5
 8003fec:	2802      	cmp	r0, #2
 8003fee:	d9f5      	bls.n	8003fdc <ADC_Disable+0x60>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ff0:	6823      	ldr	r3, [r4, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f013 0f01 	tst.w	r3, #1
 8003ff8:	d0f0      	beq.n	8003fdc <ADC_Disable+0x60>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ffa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ffc:	f043 0310 	orr.w	r3, r3, #16
 8004000:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004002:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800400a:	2001      	movs	r0, #1
 800400c:	e002      	b.n	8004014 <ADC_Disable+0x98>
  return HAL_OK;
 800400e:	2000      	movs	r0, #0
 8004010:	e000      	b.n	8004014 <ADC_Disable+0x98>
 8004012:	2000      	movs	r0, #0
}
 8004014:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8004016:	2000      	movs	r0, #0
 8004018:	e7fc      	b.n	8004014 <ADC_Disable+0x98>

0800401a <HAL_ADC_Stop_DMA>:
{
 800401a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 800401c:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8004020:	2b01      	cmp	r3, #1
 8004022:	d03c      	beq.n	800409e <HAL_ADC_Stop_DMA+0x84>
 8004024:	4604      	mov	r4, r0
 8004026:	2301      	movs	r3, #1
 8004028:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800402c:	2103      	movs	r1, #3
 800402e:	f7ff fe15 	bl	8003c5c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8004032:	4605      	mov	r5, r0
 8004034:	bb70      	cbnz	r0, 8004094 <HAL_ADC_Stop_DMA+0x7a>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004036:	6822      	ldr	r2, [r4, #0]
 8004038:	68d3      	ldr	r3, [r2, #12]
 800403a:	f023 0301 	bic.w	r3, r3, #1
 800403e:	60d3      	str	r3, [r2, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004040:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8004042:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d012      	beq.n	8004072 <HAL_ADC_Stop_DMA+0x58>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800404c:	6822      	ldr	r2, [r4, #0]
 800404e:	6853      	ldr	r3, [r2, #4]
 8004050:	f023 0310 	bic.w	r3, r3, #16
 8004054:	6053      	str	r3, [r2, #4]
      tmp_hal_status = ADC_Disable(hadc);
 8004056:	4620      	mov	r0, r4
 8004058:	f7ff ff90 	bl	8003f7c <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800405c:	4605      	mov	r5, r0
 800405e:	b9c8      	cbnz	r0, 8004094 <HAL_ADC_Stop_DMA+0x7a>
      ADC_STATE_CLR_SET(hadc->State,
 8004060:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004062:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004066:	f023 0301 	bic.w	r3, r3, #1
 800406a:	f043 0301 	orr.w	r3, r3, #1
 800406e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004070:	e010      	b.n	8004094 <HAL_ADC_Stop_DMA+0x7a>
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004072:	f000 fa1d 	bl	80044b0 <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 8004076:	4605      	mov	r5, r0
 8004078:	2800      	cmp	r0, #0
 800407a:	d0e7      	beq.n	800404c <HAL_ADC_Stop_DMA+0x32>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800407c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800407e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004082:	65a3      	str	r3, [r4, #88]	@ 0x58
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004084:	6822      	ldr	r2, [r4, #0]
 8004086:	6853      	ldr	r3, [r2, #4]
 8004088:	f023 0310 	bic.w	r3, r3, #16
 800408c:	6053      	str	r3, [r2, #4]
      (void)ADC_Disable(hadc);
 800408e:	4620      	mov	r0, r4
 8004090:	f7ff ff74 	bl	8003f7c <ADC_Disable>
  __HAL_UNLOCK(hadc);
 8004094:	2300      	movs	r3, #0
 8004096:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 800409a:	4628      	mov	r0, r5
 800409c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hadc);
 800409e:	2502      	movs	r5, #2
 80040a0:	e7fb      	b.n	800409a <HAL_ADC_Stop_DMA+0x80>

080040a2 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80040a2:	b530      	push	{r4, r5, lr}
 80040a4:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80040aa:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d041      	beq.n	8004136 <HAL_ADCEx_Calibration_Start+0x94>
 80040b2:	4604      	mov	r4, r0
 80040b4:	460d      	mov	r5, r1
 80040b6:	2301      	movs	r3, #1
 80040b8:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80040bc:	f7ff ff5e 	bl	8003f7c <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80040c0:	bb80      	cbnz	r0, 8004124 <HAL_ADCEx_Calibration_Start+0x82>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80040c4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80040c8:	f023 0302 	bic.w	r3, r3, #2
 80040cc:	f043 0302 	orr.w	r3, r3, #2
 80040d0:	65a3      	str	r3, [r4, #88]	@ 0x58
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80040d2:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80040d4:	6893      	ldr	r3, [r2, #8]
 80040d6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80040da:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80040de:	f005 4580 	and.w	r5, r5, #1073741824	@ 0x40000000
 80040e2:	432b      	orrs	r3, r5
 80040e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040e8:	6093      	str	r3, [r2, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80040ea:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80040ec:	6893      	ldr	r3, [r2, #8]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	db06      	blt.n	8004100 <HAL_ADCEx_Calibration_Start+0x5e>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80040f4:	f023 0303 	bic.w	r3, r3, #3
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	65a3      	str	r3, [r4, #88]	@ 0x58
 80040fe:	e015      	b.n	800412c <HAL_ADCEx_Calibration_Start+0x8a>
      wait_loop_index++;
 8004100:	9b01      	ldr	r3, [sp, #4]
 8004102:	3301      	adds	r3, #1
 8004104:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004106:	9b01      	ldr	r3, [sp, #4]
 8004108:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 800410c:	d3ee      	bcc.n	80040ec <HAL_ADCEx_Calibration_Start+0x4a>
        ADC_STATE_CLR_SET(hadc->State,
 800410e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004110:	f023 0312 	bic.w	r3, r3, #18
 8004114:	f043 0310 	orr.w	r3, r3, #16
 8004118:	65a3      	str	r3, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hadc);
 800411a:	2300      	movs	r3, #0
 800411c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
        return HAL_ERROR;
 8004120:	2001      	movs	r0, #1
 8004122:	e006      	b.n	8004132 <HAL_ADCEx_Calibration_Start+0x90>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004124:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004126:	f043 0310 	orr.w	r3, r3, #16
 800412a:	65a3      	str	r3, [r4, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800412c:	2300      	movs	r3, #0
 800412e:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8004132:	b003      	add	sp, #12
 8004134:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 8004136:	2002      	movs	r0, #2
 8004138:	e7fb      	b.n	8004132 <HAL_ADCEx_Calibration_Start+0x90>
	...

0800413c <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800413c:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 8004140:	2a01      	cmp	r2, #1
 8004142:	d040      	beq.n	80041c6 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
{
 8004144:	b410      	push	{r4}
 8004146:	b09b      	sub	sp, #108	@ 0x6c
 8004148:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800414a:	2201      	movs	r2, #1
 800414c:	f880 2054 	strb.w	r2, [r0, #84]	@ 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004150:	2200      	movs	r2, #0
 8004152:	9216      	str	r2, [sp, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004154:	9217      	str	r2, [sp, #92]	@ 0x5c

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004156:	6800      	ldr	r0, [r0, #0]
 8004158:	4a34      	ldr	r2, [pc, #208]	@ (800422c <HAL_ADCEx_MultiModeConfigChannel+0xf0>)
 800415a:	4290      	cmp	r0, r2
 800415c:	d035      	beq.n	80041ca <HAL_ADCEx_MultiModeConfigChannel+0x8e>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800415e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004160:	f042 0220 	orr.w	r2, r2, #32
 8004164:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    return HAL_ERROR;
 800416c:	2001      	movs	r0, #1
 800416e:	e022      	b.n	80041b6 <HAL_ADCEx_MultiModeConfigChannel+0x7a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004170:	492f      	ldr	r1, [pc, #188]	@ (8004230 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
 8004172:	688a      	ldr	r2, [r1, #8]
 8004174:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004178:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800417a:	4a2c      	ldr	r2, [pc, #176]	@ (800422c <HAL_ADCEx_MultiModeConfigChannel+0xf0>)
 800417c:	6890      	ldr	r0, [r2, #8]
 800417e:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8004182:	6892      	ldr	r2, [r2, #8]
 8004184:	f5a1 7180 	sub.w	r1, r1, #256	@ 0x100
 8004188:	6889      	ldr	r1, [r1, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800418a:	4302      	orrs	r2, r0
 800418c:	430a      	orrs	r2, r1
 800418e:	f012 0f01 	tst.w	r2, #1
 8004192:	d116      	bne.n	80041c2 <HAL_ADCEx_MultiModeConfigChannel+0x86>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004194:	4926      	ldr	r1, [pc, #152]	@ (8004230 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
 8004196:	688a      	ldr	r2, [r1, #8]
 8004198:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 800419c:	f022 020f 	bic.w	r2, r2, #15
 80041a0:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041a2:	2000      	movs	r0, #0
 80041a4:	e004      	b.n	80041b0 <HAL_ADCEx_MultiModeConfigChannel+0x74>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041a6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80041a8:	f042 0220 	orr.w	r2, r2, #32
 80041ac:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80041ae:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
}
 80041b6:	b01b      	add	sp, #108	@ 0x6c
 80041b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041bc:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041be:	2000      	movs	r0, #0
 80041c0:	e7f6      	b.n	80041b0 <HAL_ADCEx_MultiModeConfigChannel+0x74>
 80041c2:	2000      	movs	r0, #0
 80041c4:	e7f4      	b.n	80041b0 <HAL_ADCEx_MultiModeConfigChannel+0x74>
  __HAL_LOCK(hadc);
 80041c6:	2002      	movs	r0, #2
}
 80041c8:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004234 <HAL_ADCEx_MultiModeConfigChannel+0xf8>)
 80041cc:	6890      	ldr	r0, [r2, #8]
 80041ce:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 80041d2:	6892      	ldr	r2, [r2, #8]
 80041d4:	4302      	orrs	r2, r0
 80041d6:	f012 0f04 	tst.w	r2, #4
 80041da:	d1e4      	bne.n	80041a6 <HAL_ADCEx_MultiModeConfigChannel+0x6a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80041dc:	680a      	ldr	r2, [r1, #0]
 80041de:	2a00      	cmp	r2, #0
 80041e0:	d0c6      	beq.n	8004170 <HAL_ADCEx_MultiModeConfigChannel+0x34>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80041e2:	4813      	ldr	r0, [pc, #76]	@ (8004230 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
 80041e4:	6882      	ldr	r2, [r0, #8]
 80041e6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80041ea:	684c      	ldr	r4, [r1, #4]
 80041ec:	4322      	orrs	r2, r4
 80041ee:	f893 4030 	ldrb.w	r4, [r3, #48]	@ 0x30
 80041f2:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 80041f6:	6082      	str	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041f8:	4a0c      	ldr	r2, [pc, #48]	@ (800422c <HAL_ADCEx_MultiModeConfigChannel+0xf0>)
 80041fa:	6894      	ldr	r4, [r2, #8]
 80041fc:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8004200:	6892      	ldr	r2, [r2, #8]
 8004202:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 8004206:	6880      	ldr	r0, [r0, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004208:	4322      	orrs	r2, r4
 800420a:	4302      	orrs	r2, r0
 800420c:	f012 0f01 	tst.w	r2, #1
 8004210:	d1d5      	bne.n	80041be <HAL_ADCEx_MultiModeConfigChannel+0x82>
        MODIFY_REG(tmpADC_Common->CCR,
 8004212:	4c07      	ldr	r4, [pc, #28]	@ (8004230 <HAL_ADCEx_MultiModeConfigChannel+0xf4>)
 8004214:	68a0      	ldr	r0, [r4, #8]
 8004216:	680a      	ldr	r2, [r1, #0]
 8004218:	6889      	ldr	r1, [r1, #8]
 800421a:	430a      	orrs	r2, r1
 800421c:	f420 6171 	bic.w	r1, r0, #3856	@ 0xf10
 8004220:	f021 010f 	bic.w	r1, r1, #15
 8004224:	430a      	orrs	r2, r1
 8004226:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004228:	2000      	movs	r0, #0
 800422a:	e7c1      	b.n	80041b0 <HAL_ADCEx_MultiModeConfigChannel+0x74>
 800422c:	50040000 	.word	0x50040000
 8004230:	50040300 	.word	0x50040300
 8004234:	50040100 	.word	0x50040100

08004238 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004238:	4907      	ldr	r1, [pc, #28]	@ (8004258 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800423a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800423c:	0203      	lsls	r3, r0, #8
 800423e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004242:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004246:	0412      	lsls	r2, r2, #16
 8004248:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800424a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800424c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004250:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004254:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004256:	4770      	bx	lr
 8004258:	e000ed00 	.word	0xe000ed00

0800425c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800425c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800425e:	4b18      	ldr	r3, [pc, #96]	@ (80042c0 <HAL_NVIC_SetPriority+0x64>)
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004266:	f1c3 0c07 	rsb	ip, r3, #7
 800426a:	f1bc 0f04 	cmp.w	ip, #4
 800426e:	bf28      	it	cs
 8004270:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004274:	f103 0e04 	add.w	lr, r3, #4
 8004278:	f1be 0f06 	cmp.w	lr, #6
 800427c:	bf8c      	ite	hi
 800427e:	3b03      	subhi	r3, #3
 8004280:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004282:	f04f 3eff 	mov.w	lr, #4294967295
 8004286:	fa0e fc0c 	lsl.w	ip, lr, ip
 800428a:	ea21 010c 	bic.w	r1, r1, ip
 800428e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004290:	fa0e fe03 	lsl.w	lr, lr, r3
 8004294:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004298:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800429a:	2800      	cmp	r0, #0
 800429c:	db09      	blt.n	80042b2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800429e:	0109      	lsls	r1, r1, #4
 80042a0:	b2c9      	uxtb	r1, r1
 80042a2:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80042a6:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80042aa:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80042ae:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042b2:	f000 000f 	and.w	r0, r0, #15
 80042b6:	0109      	lsls	r1, r1, #4
 80042b8:	b2c9      	uxtb	r1, r1
 80042ba:	4b02      	ldr	r3, [pc, #8]	@ (80042c4 <HAL_NVIC_SetPriority+0x68>)
 80042bc:	5419      	strb	r1, [r3, r0]
 80042be:	e7f6      	b.n	80042ae <HAL_NVIC_SetPriority+0x52>
 80042c0:	e000ed00 	.word	0xe000ed00
 80042c4:	e000ed14 	.word	0xe000ed14

080042c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80042c8:	2800      	cmp	r0, #0
 80042ca:	db07      	blt.n	80042dc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042cc:	0941      	lsrs	r1, r0, #5
 80042ce:	f000 001f 	and.w	r0, r0, #31
 80042d2:	2301      	movs	r3, #1
 80042d4:	4083      	lsls	r3, r0
 80042d6:	4a02      	ldr	r2, [pc, #8]	@ (80042e0 <HAL_NVIC_EnableIRQ+0x18>)
 80042d8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	e000e100 	.word	0xe000e100

080042e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042e4:	3801      	subs	r0, #1
 80042e6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80042ea:	d20b      	bcs.n	8004304 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042ec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80042f0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f2:	4a05      	ldr	r2, [pc, #20]	@ (8004308 <HAL_SYSTICK_Config+0x24>)
 80042f4:	21f0      	movs	r1, #240	@ 0xf0
 80042f6:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042fa:	2000      	movs	r0, #0
 80042fc:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042fe:	2207      	movs	r2, #7
 8004300:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004302:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004304:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004306:	4770      	bx	lr
 8004308:	e000ed00 	.word	0xe000ed00

0800430c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800430c:	2800      	cmp	r0, #0
 800430e:	d06f      	beq.n	80043f0 <HAL_DMA_Init+0xe4>
{
 8004310:	b410      	push	{r4}
 8004312:	4603      	mov	r3, r0
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004314:	6801      	ldr	r1, [r0, #0]
 8004316:	4a37      	ldr	r2, [pc, #220]	@ (80043f4 <HAL_DMA_Init+0xe8>)
 8004318:	4291      	cmp	r1, r2
 800431a:	d849      	bhi.n	80043b0 <HAL_DMA_Init+0xa4>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800431c:	4a36      	ldr	r2, [pc, #216]	@ (80043f8 <HAL_DMA_Init+0xec>)
 800431e:	440a      	add	r2, r1
 8004320:	4836      	ldr	r0, [pc, #216]	@ (80043fc <HAL_DMA_Init+0xf0>)
 8004322:	fba0 0202 	umull	r0, r2, r0, r2
 8004326:	0912      	lsrs	r2, r2, #4
 8004328:	0092      	lsls	r2, r2, #2
    hdma->DmaBaseAddress = DMA1;
 800432a:	4835      	ldr	r0, [pc, #212]	@ (8004400 <HAL_DMA_Init+0xf4>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800432c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800432e:	6418      	str	r0, [r3, #64]	@ 0x40
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004330:	2202      	movs	r2, #2
 8004332:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004336:	6808      	ldr	r0, [r1, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004338:	f420 40ff 	bic.w	r0, r0, #32640	@ 0x7f80
 800433c:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	68dc      	ldr	r4, [r3, #12]
 8004344:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004346:	691c      	ldr	r4, [r3, #16]
 8004348:	4322      	orrs	r2, r4
 800434a:	695c      	ldr	r4, [r3, #20]
 800434c:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800434e:	699c      	ldr	r4, [r3, #24]
 8004350:	4322      	orrs	r2, r4
 8004352:	69dc      	ldr	r4, [r3, #28]
 8004354:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8004356:	6a1c      	ldr	r4, [r3, #32]
 8004358:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 800435a:	4302      	orrs	r2, r0

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800435c:	600a      	str	r2, [r1, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8004364:	d01a      	beq.n	800439c <HAL_DMA_Init+0x90>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004366:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004368:	4a25      	ldr	r2, [pc, #148]	@ (8004400 <HAL_DMA_Init+0xf4>)
 800436a:	4291      	cmp	r1, r2
 800436c:	d029      	beq.n	80043c2 <HAL_DMA_Init+0xb6>
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800436e:	4924      	ldr	r1, [pc, #144]	@ (8004400 <HAL_DMA_Init+0xf4>)
 8004370:	f8d1 24a8 	ldr.w	r2, [r1, #1192]	@ 0x4a8
 8004374:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8004376:	f000 0c1c 	and.w	ip, r0, #28
 800437a:	200f      	movs	r0, #15
 800437c:	fa00 f00c 	lsl.w	r0, r0, ip
 8004380:	ea22 0200 	bic.w	r2, r2, r0
 8004384:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004388:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	@ 0x4a8
 800438c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800438e:	f002 001c 	and.w	r0, r2, #28
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	4082      	lsls	r2, r0
 8004396:	4322      	orrs	r2, r4
 8004398:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800439c:	2000      	movs	r0, #0
 800439e:	63d8      	str	r0, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043a6:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24

  return HAL_OK;
}
 80043aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043ae:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80043b0:	4a14      	ldr	r2, [pc, #80]	@ (8004404 <HAL_DMA_Init+0xf8>)
 80043b2:	440a      	add	r2, r1
 80043b4:	4811      	ldr	r0, [pc, #68]	@ (80043fc <HAL_DMA_Init+0xf0>)
 80043b6:	fba0 0202 	umull	r0, r2, r0, r2
 80043ba:	0912      	lsrs	r2, r2, #4
 80043bc:	0092      	lsls	r2, r2, #2
 80043be:	4812      	ldr	r0, [pc, #72]	@ (8004408 <HAL_DMA_Init+0xfc>)
 80043c0:	e7b4      	b.n	800432c <HAL_DMA_Init+0x20>
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80043c2:	4611      	mov	r1, r2
 80043c4:	f8d2 20a8 	ldr.w	r2, [r2, #168]	@ 0xa8
 80043c8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80043ca:	f000 041c 	and.w	r4, r0, #28
 80043ce:	200f      	movs	r0, #15
 80043d0:	40a0      	lsls	r0, r4
 80043d2:	ea22 0200 	bic.w	r2, r2, r0
 80043d6:	f8c1 20a8 	str.w	r2, [r1, #168]	@ 0xa8
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80043da:	f8d1 40a8 	ldr.w	r4, [r1, #168]	@ 0xa8
 80043de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043e0:	f002 001c 	and.w	r0, r2, #28
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	4082      	lsls	r2, r0
 80043e8:	4322      	orrs	r2, r4
 80043ea:	f8c1 20a8 	str.w	r2, [r1, #168]	@ 0xa8
 80043ee:	e7d5      	b.n	800439c <HAL_DMA_Init+0x90>
    return HAL_ERROR;
 80043f0:	2001      	movs	r0, #1
}
 80043f2:	4770      	bx	lr
 80043f4:	40020407 	.word	0x40020407
 80043f8:	bffdfff8 	.word	0xbffdfff8
 80043fc:	cccccccd 	.word	0xcccccccd
 8004400:	40020000 	.word	0x40020000
 8004404:	bffdfbf8 	.word	0xbffdfbf8
 8004408:	40020400 	.word	0x40020400

0800440c <HAL_DMA_Start_IT>:

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800440c:	f890 c024 	ldrb.w	ip, [r0, #36]	@ 0x24
 8004410:	f1bc 0f01 	cmp.w	ip, #1
 8004414:	d04a      	beq.n	80044ac <HAL_DMA_Start_IT+0xa0>
 8004416:	f04f 0c01 	mov.w	ip, #1
 800441a:	f880 c024 	strb.w	ip, [r0, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800441e:	f890 c025 	ldrb.w	ip, [r0, #37]	@ 0x25
 8004422:	fa5f fc8c 	uxtb.w	ip, ip
 8004426:	f1bc 0f01 	cmp.w	ip, #1
 800442a:	d004      	beq.n	8004436 <HAL_DMA_Start_IT+0x2a>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800442c:	2300      	movs	r3, #0
 800442e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004432:	2002      	movs	r0, #2
 8004434:	4770      	bx	lr
{
 8004436:	b430      	push	{r4, r5}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004438:	2402      	movs	r4, #2
 800443a:	f880 4025 	strb.w	r4, [r0, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800443e:	2400      	movs	r4, #0
 8004440:	63c4      	str	r4, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004442:	6805      	ldr	r5, [r0, #0]
 8004444:	682c      	ldr	r4, [r5, #0]
 8004446:	f024 0401 	bic.w	r4, r4, #1
 800444a:	602c      	str	r4, [r5, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800444c:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800444e:	f004 0c1c 	and.w	ip, r4, #28
 8004452:	2401      	movs	r4, #1
 8004454:	fa04 f40c 	lsl.w	r4, r4, ip
 8004458:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800445a:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800445c:	6804      	ldr	r4, [r0, #0]
 800445e:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004460:	6883      	ldr	r3, [r0, #8]
 8004462:	2b10      	cmp	r3, #16
 8004464:	d012      	beq.n	800448c <HAL_DMA_Start_IT+0x80>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004466:	6803      	ldr	r3, [r0, #0]
 8004468:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800446a:	6803      	ldr	r3, [r0, #0]
 800446c:	60da      	str	r2, [r3, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 800446e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004470:	b18b      	cbz	r3, 8004496 <HAL_DMA_Start_IT+0x8a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004472:	6802      	ldr	r2, [r0, #0]
 8004474:	6813      	ldr	r3, [r2, #0]
 8004476:	f043 030e 	orr.w	r3, r3, #14
 800447a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800447c:	6802      	ldr	r2, [r0, #0]
 800447e:	6813      	ldr	r3, [r2, #0]
 8004480:	f043 0301 	orr.w	r3, r3, #1
 8004484:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004486:	2000      	movs	r0, #0
}
 8004488:	bc30      	pop	{r4, r5}
 800448a:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 800448c:	6803      	ldr	r3, [r0, #0]
 800448e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004490:	6803      	ldr	r3, [r0, #0]
 8004492:	60d9      	str	r1, [r3, #12]
 8004494:	e7eb      	b.n	800446e <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004496:	6802      	ldr	r2, [r0, #0]
 8004498:	6813      	ldr	r3, [r2, #0]
 800449a:	f023 0304 	bic.w	r3, r3, #4
 800449e:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80044a0:	6802      	ldr	r2, [r0, #0]
 80044a2:	6813      	ldr	r3, [r2, #0]
 80044a4:	f043 030a 	orr.w	r3, r3, #10
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	e7e7      	b.n	800447c <HAL_DMA_Start_IT+0x70>
  __HAL_LOCK(hdma);
 80044ac:	2002      	movs	r0, #2
}
 80044ae:	4770      	bx	lr

080044b0 <HAL_DMA_Abort>:
{
 80044b0:	4603      	mov	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80044b2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	2a02      	cmp	r2, #2
 80044ba:	d006      	beq.n	80044ca <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044bc:	2204      	movs	r2, #4
 80044be:	63c2      	str	r2, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 80044c0:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80044c8:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044ca:	6801      	ldr	r1, [r0, #0]
 80044cc:	680a      	ldr	r2, [r1, #0]
 80044ce:	f022 020e 	bic.w	r2, r2, #14
 80044d2:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80044d4:	6801      	ldr	r1, [r0, #0]
 80044d6:	680a      	ldr	r2, [r1, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80044de:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 80044e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044e2:	f002 021c 	and.w	r2, r2, #28
 80044e6:	2101      	movs	r1, #1
 80044e8:	fa01 f202 	lsl.w	r2, r1, r2
 80044ec:	6042      	str	r2, [r0, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80044ee:	f883 1025 	strb.w	r1, [r3, #37]	@ 0x25
    return status;
 80044f2:	2000      	movs	r0, #0
 80044f4:	e7e5      	b.n	80044c2 <HAL_DMA_Abort+0x12>

080044f6 <HAL_DMA_IRQHandler>:
{
 80044f6:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80044f8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80044fa:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80044fc:	6804      	ldr	r4, [r0, #0]
 80044fe:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004500:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004502:	f003 031c 	and.w	r3, r3, #28
 8004506:	2204      	movs	r2, #4
 8004508:	409a      	lsls	r2, r3
 800450a:	420a      	tst	r2, r1
 800450c:	d015      	beq.n	800453a <HAL_DMA_IRQHandler+0x44>
 800450e:	f015 0f04 	tst.w	r5, #4
 8004512:	d012      	beq.n	800453a <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004514:	6823      	ldr	r3, [r4, #0]
 8004516:	f013 0f20 	tst.w	r3, #32
 800451a:	d103      	bne.n	8004524 <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800451c:	6823      	ldr	r3, [r4, #0]
 800451e:	f023 0304 	bic.w	r3, r3, #4
 8004522:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004524:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8004526:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004528:	f003 021c 	and.w	r2, r3, #28
 800452c:	2304      	movs	r3, #4
 800452e:	4093      	lsls	r3, r2
 8004530:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8004532:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004534:	b103      	cbz	r3, 8004538 <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8004536:	4798      	blx	r3
}
 8004538:	bd38      	pop	{r3, r4, r5, pc}
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800453a:	2202      	movs	r2, #2
 800453c:	409a      	lsls	r2, r3
 800453e:	420a      	tst	r2, r1
 8004540:	d01c      	beq.n	800457c <HAL_DMA_IRQHandler+0x86>
 8004542:	f015 0f02 	tst.w	r5, #2
 8004546:	d019      	beq.n	800457c <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004548:	6823      	ldr	r3, [r4, #0]
 800454a:	f013 0f20 	tst.w	r3, #32
 800454e:	d106      	bne.n	800455e <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	f023 030a 	bic.w	r3, r3, #10
 8004556:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004558:	2301      	movs	r3, #1
 800455a:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800455e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8004560:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004562:	f003 021c 	and.w	r2, r3, #28
 8004566:	2302      	movs	r3, #2
 8004568:	4093      	lsls	r3, r2
 800456a:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 800456c:	2300      	movs	r3, #0
 800456e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 8004572:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0df      	beq.n	8004538 <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8004578:	4798      	blx	r3
 800457a:	e7dd      	b.n	8004538 <HAL_DMA_IRQHandler+0x42>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800457c:	2208      	movs	r2, #8
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	420b      	tst	r3, r1
 8004584:	d0d8      	beq.n	8004538 <HAL_DMA_IRQHandler+0x42>
 8004586:	f015 0f08 	tst.w	r5, #8
 800458a:	d0d5      	beq.n	8004538 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	f023 030e 	bic.w	r3, r3, #14
 8004592:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004594:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8004596:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004598:	f003 031c 	and.w	r3, r3, #28
 800459c:	2201      	movs	r2, #1
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045a4:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 80045a6:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 80045aa:	2300      	movs	r3, #0
 80045ac:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    if (hdma->XferErrorCallback != NULL)
 80045b0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0c0      	beq.n	8004538 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 80045b6:	4798      	blx	r3
  return;
 80045b8:	e7be      	b.n	8004538 <HAL_DMA_IRQHandler+0x42>
	...

080045bc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045bc:	680b      	ldr	r3, [r1, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 80e0 	beq.w	8004784 <HAL_GPIO_Init+0x1c8>
{
 80045c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c8:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045ca:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00u;
 80045ce:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045d0:	2501      	movs	r5, #1
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045d2:	f04f 0e03 	mov.w	lr, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80045d6:	f04f 080f 	mov.w	r8, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045da:	4c6b      	ldr	r4, [pc, #428]	@ (8004788 <HAL_GPIO_Init+0x1cc>)
 80045dc:	e048      	b.n	8004670 <HAL_GPIO_Init+0xb4>
        temp = GPIOx->OSPEEDR;
 80045de:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045e0:	fa0e fa0c 	lsl.w	sl, lr, ip
 80045e4:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2u));
 80045e8:	68cb      	ldr	r3, [r1, #12]
 80045ea:	fa03 f30c 	lsl.w	r3, r3, ip
 80045ee:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 80045f2:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 80045f4:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045f6:	ea23 0707 	bic.w	r7, r3, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045fa:	684b      	ldr	r3, [r1, #4]
 80045fc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004600:	4093      	lsls	r3, r2
 8004602:	433b      	orrs	r3, r7
        GPIOx->OTYPER = temp;
 8004604:	6043      	str	r3, [r0, #4]
 8004606:	e03e      	b.n	8004686 <HAL_GPIO_Init+0xca>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004608:	2700      	movs	r7, #0
 800460a:	fa07 f70b 	lsl.w	r7, r7, fp
 800460e:	ea47 070a 	orr.w	r7, r7, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004612:	609f      	str	r7, [r3, #8]
        temp = EXTI->RTSR1;
 8004614:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(iocurrent);
 8004616:	ea6f 0709 	mvn.w	r7, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800461a:	684e      	ldr	r6, [r1, #4]
 800461c:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 8004620:	bf0c      	ite	eq
 8004622:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8004624:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 8004628:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR1;
 800462a:	68e3      	ldr	r3, [r4, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800462c:	684e      	ldr	r6, [r1, #4]
 800462e:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 8004632:	bf0c      	ite	eq
 8004634:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8004636:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR1 = temp;
 800463a:	60e3      	str	r3, [r4, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800463c:	6863      	ldr	r3, [r4, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800463e:	684e      	ldr	r6, [r1, #4]
 8004640:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 8004644:	bf0c      	ite	eq
 8004646:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8004648:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->EMR1 = temp;
 800464c:	6063      	str	r3, [r4, #4]

        temp = EXTI->IMR1;
 800464e:	6823      	ldr	r3, [r4, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004650:	684e      	ldr	r6, [r1, #4]
 8004652:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
        temp &= ~(iocurrent);
 8004656:	bf0c      	ite	eq
 8004658:	401f      	andeq	r7, r3
        {
          temp |= iocurrent;
 800465a:	ea49 0703 	orrne.w	r7, r9, r3
        }
        EXTI->IMR1 = temp;
 800465e:	6027      	str	r7, [r4, #0]
      }
    }

    position++;
 8004660:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004662:	680b      	ldr	r3, [r1, #0]
 8004664:	f10c 0c02 	add.w	ip, ip, #2
 8004668:	fa33 f702 	lsrs.w	r7, r3, r2
 800466c:	f000 8087 	beq.w	800477e <HAL_GPIO_Init+0x1c2>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004670:	fa05 f702 	lsl.w	r7, r5, r2
    if (iocurrent != 0x00u)
 8004674:	ea17 0903 	ands.w	r9, r7, r3
 8004678:	d0f2      	beq.n	8004660 <HAL_GPIO_Init+0xa4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800467a:	684b      	ldr	r3, [r1, #4]
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	3b01      	subs	r3, #1
 8004682:	2b01      	cmp	r3, #1
 8004684:	d9ab      	bls.n	80045de <HAL_GPIO_Init+0x22>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004686:	684b      	ldr	r3, [r1, #4]
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	2b03      	cmp	r3, #3
 800468e:	d020      	beq.n	80046d2 <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 8004690:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004692:	fa0e f30c 	lsl.w	r3, lr, ip
 8004696:	ea27 0703 	bic.w	r7, r7, r3
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800469a:	688b      	ldr	r3, [r1, #8]
 800469c:	fa03 f30c 	lsl.w	r3, r3, ip
 80046a0:	433b      	orrs	r3, r7
        GPIOx->PUPDR = temp;
 80046a2:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046a4:	684b      	ldr	r3, [r1, #4]
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d111      	bne.n	80046d2 <HAL_GPIO_Init+0x116>
        temp = GPIOx->AFR[position >> 3u];
 80046ae:	08d7      	lsrs	r7, r2, #3
 80046b0:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80046b4:	6a3b      	ldr	r3, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046b6:	f002 0b07 	and.w	fp, r2, #7
 80046ba:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80046be:	fa08 fa0b 	lsl.w	sl, r8, fp
 80046c2:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046c6:	690b      	ldr	r3, [r1, #16]
 80046c8:	fa03 f30b 	lsl.w	r3, r3, fp
 80046cc:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3u] = temp;
 80046d0:	623b      	str	r3, [r7, #32]
      temp = GPIOx->MODER;
 80046d2:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046d4:	fa0e f30c 	lsl.w	r3, lr, ip
 80046d8:	ea27 0703 	bic.w	r7, r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046dc:	684b      	ldr	r3, [r1, #4]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	fa03 f30c 	lsl.w	r3, r3, ip
 80046e6:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 80046e8:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046ea:	684b      	ldr	r3, [r1, #4]
 80046ec:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 80046f0:	d0b6      	beq.n	8004660 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046f2:	4e26      	ldr	r6, [pc, #152]	@ (800478c <HAL_GPIO_Init+0x1d0>)
 80046f4:	6e33      	ldr	r3, [r6, #96]	@ 0x60
 80046f6:	f043 0301 	orr.w	r3, r3, #1
 80046fa:	6633      	str	r3, [r6, #96]	@ 0x60
 80046fc:	6e33      	ldr	r3, [r6, #96]	@ 0x60
 80046fe:	f003 0301 	and.w	r3, r3, #1
 8004702:	9301      	str	r3, [sp, #4]
 8004704:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8004706:	f022 0303 	bic.w	r3, r2, #3
 800470a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800470e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8004712:	689f      	ldr	r7, [r3, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004714:	f002 0b03 	and.w	fp, r2, #3
 8004718:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800471c:	fa08 fa0b 	lsl.w	sl, r8, fp
 8004720:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004724:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8004728:	f43f af6e 	beq.w	8004608 <HAL_GPIO_Init+0x4c>
 800472c:	4e18      	ldr	r6, [pc, #96]	@ (8004790 <HAL_GPIO_Init+0x1d4>)
 800472e:	42b0      	cmp	r0, r6
 8004730:	d019      	beq.n	8004766 <HAL_GPIO_Init+0x1aa>
 8004732:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004736:	42b0      	cmp	r0, r6
 8004738:	d017      	beq.n	800476a <HAL_GPIO_Init+0x1ae>
 800473a:	4f16      	ldr	r7, [pc, #88]	@ (8004794 <HAL_GPIO_Init+0x1d8>)
 800473c:	42b8      	cmp	r0, r7
 800473e:	d016      	beq.n	800476e <HAL_GPIO_Init+0x1b2>
 8004740:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8004744:	42b8      	cmp	r0, r7
 8004746:	d014      	beq.n	8004772 <HAL_GPIO_Init+0x1b6>
 8004748:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 800474c:	42b8      	cmp	r0, r7
 800474e:	d012      	beq.n	8004776 <HAL_GPIO_Init+0x1ba>
 8004750:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8004754:	42b8      	cmp	r0, r7
 8004756:	d010      	beq.n	800477a <HAL_GPIO_Init+0x1be>
 8004758:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 800475c:	42b8      	cmp	r0, r7
 800475e:	bf14      	ite	ne
 8004760:	2708      	movne	r7, #8
 8004762:	2707      	moveq	r7, #7
 8004764:	e751      	b.n	800460a <HAL_GPIO_Init+0x4e>
 8004766:	2701      	movs	r7, #1
 8004768:	e74f      	b.n	800460a <HAL_GPIO_Init+0x4e>
 800476a:	2702      	movs	r7, #2
 800476c:	e74d      	b.n	800460a <HAL_GPIO_Init+0x4e>
 800476e:	2703      	movs	r7, #3
 8004770:	e74b      	b.n	800460a <HAL_GPIO_Init+0x4e>
 8004772:	2704      	movs	r7, #4
 8004774:	e749      	b.n	800460a <HAL_GPIO_Init+0x4e>
 8004776:	2705      	movs	r7, #5
 8004778:	e747      	b.n	800460a <HAL_GPIO_Init+0x4e>
 800477a:	2706      	movs	r7, #6
 800477c:	e745      	b.n	800460a <HAL_GPIO_Init+0x4e>
  }
}
 800477e:	b003      	add	sp, #12
 8004780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40010400 	.word	0x40010400
 800478c:	40021000 	.word	0x40021000
 8004790:	48000400 	.word	0x48000400
 8004794:	48000c00 	.word	0x48000c00

08004798 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004798:	b10a      	cbz	r2, 800479e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800479a:	6181      	str	r1, [r0, #24]
 800479c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800479e:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80047a0:	4770      	bx	lr
	...

080047a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047a4:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80047a6:	4b05      	ldr	r3, [pc, #20]	@ (80047bc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	4203      	tst	r3, r0
 80047ac:	d100      	bne.n	80047b0 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80047ae:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047b0:	4b02      	ldr	r3, [pc, #8]	@ (80047bc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80047b2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047b4:	f7fd f8b6 	bl	8001924 <HAL_GPIO_EXTI_Callback>
}
 80047b8:	e7f9      	b.n	80047ae <HAL_GPIO_EXTI_IRQHandler+0xa>
 80047ba:	bf00      	nop
 80047bc:	40010400 	.word	0x40010400

080047c0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80047c0:	4b02      	ldr	r3, [pc, #8]	@ (80047cc <HAL_PWREx_GetVoltageRange+0xc>)
 80047c2:	6818      	ldr	r0, [r3, #0]
#endif
}
 80047c4:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40007000 	.word	0x40007000

080047d0 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047d0:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80047d4:	d00f      	beq.n	80047f6 <HAL_PWREx_ControlVoltageScaling+0x26>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80047d6:	4b20      	ldr	r3, [pc, #128]	@ (8004858 <HAL_PWREx_ControlVoltageScaling+0x88>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047e2:	d036      	beq.n	8004852 <HAL_PWREx_ControlVoltageScaling+0x82>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004858 <HAL_PWREx_ControlVoltageScaling+0x88>)
 80047e6:	6813      	ldr	r3, [r2, #0]
 80047e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047f0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80047f2:	2000      	movs	r0, #0
 80047f4:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80047f6:	4b18      	ldr	r3, [pc, #96]	@ (8004858 <HAL_PWREx_ControlVoltageScaling+0x88>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004802:	d024      	beq.n	800484e <HAL_PWREx_ControlVoltageScaling+0x7e>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004804:	4a14      	ldr	r2, [pc, #80]	@ (8004858 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8004806:	6813      	ldr	r3, [r2, #0]
 8004808:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800480c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004810:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004812:	4b12      	ldr	r3, [pc, #72]	@ (800485c <HAL_PWREx_ControlVoltageScaling+0x8c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2132      	movs	r1, #50	@ 0x32
 8004818:	fb01 f303 	mul.w	r3, r1, r3
 800481c:	4910      	ldr	r1, [pc, #64]	@ (8004860 <HAL_PWREx_ControlVoltageScaling+0x90>)
 800481e:	fba1 1303 	umull	r1, r3, r1, r3
 8004822:	0c9b      	lsrs	r3, r3, #18
 8004824:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004826:	6952      	ldr	r2, [r2, #20]
 8004828:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800482c:	d007      	beq.n	800483e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800482e:	490a      	ldr	r1, [pc, #40]	@ (8004858 <HAL_PWREx_ControlVoltageScaling+0x88>)
        wait_loop_index--;
 8004830:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004832:	694a      	ldr	r2, [r1, #20]
 8004834:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8004838:	d001      	beq.n	800483e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f8      	bne.n	8004830 <HAL_PWREx_ControlVoltageScaling+0x60>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800483e:	4b06      	ldr	r3, [pc, #24]	@ (8004858 <HAL_PWREx_ControlVoltageScaling+0x88>)
 8004840:	695b      	ldr	r3, [r3, #20]
  return HAL_OK;
 8004842:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8004846:	bf14      	ite	ne
 8004848:	2003      	movne	r0, #3
 800484a:	2000      	moveq	r0, #0
 800484c:	4770      	bx	lr
 800484e:	2000      	movs	r0, #0
 8004850:	4770      	bx	lr
 8004852:	2000      	movs	r0, #0
}
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40007000 	.word	0x40007000
 800485c:	20002f78 	.word	0x20002f78
 8004860:	431bde83 	.word	0x431bde83

08004864 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004864:	4a02      	ldr	r2, [pc, #8]	@ (8004870 <HAL_PWREx_EnableVddIO2+0xc>)
 8004866:	6853      	ldr	r3, [r2, #4]
 8004868:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800486c:	6053      	str	r3, [r2, #4]
}
 800486e:	4770      	bx	lr
 8004870:	40007000 	.word	0x40007000

08004874 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004874:	b530      	push	{r4, r5, lr}
 8004876:	b083      	sub	sp, #12
 8004878:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800487a:	4b1e      	ldr	r3, [pc, #120]	@ (80048f4 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800487c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800487e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004882:	d00c      	beq.n	800489e <RCC_SetFlashLatencyFromMSIRange+0x2a>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004884:	f7ff ff9c 	bl	80047c0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004888:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 800488c:	d018      	beq.n	80048c0 <RCC_SetFlashLatencyFromMSIRange+0x4c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800488e:	2c80      	cmp	r4, #128	@ 0x80
 8004890:	d81f      	bhi.n	80048d2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004892:	d02d      	beq.n	80048f0 <RCC_SetFlashLatencyFromMSIRange+0x7c>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004894:	2c70      	cmp	r4, #112	@ 0x70
 8004896:	bf14      	ite	ne
 8004898:	2400      	movne	r4, #0
 800489a:	2401      	moveq	r4, #1
 800489c:	e01a      	b.n	80048d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
    __HAL_RCC_PWR_CLK_ENABLE();
 800489e:	4d15      	ldr	r5, [pc, #84]	@ (80048f4 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80048a0:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80048a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048a6:	65ab      	str	r3, [r5, #88]	@ 0x58
 80048a8:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80048aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ae:	9301      	str	r3, [sp, #4]
 80048b0:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80048b2:	f7ff ff85 	bl	80047c0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80048b6:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80048b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048bc:	65ab      	str	r3, [r5, #88]	@ 0x58
 80048be:	e7e3      	b.n	8004888 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 80048c0:	2c80      	cmp	r4, #128	@ 0x80
 80048c2:	d904      	bls.n	80048ce <RCC_SetFlashLatencyFromMSIRange+0x5a>
        latency = FLASH_LATENCY_2; /* 2WS */
 80048c4:	2ca1      	cmp	r4, #161	@ 0xa1
 80048c6:	bf34      	ite	cc
 80048c8:	2401      	movcc	r4, #1
 80048ca:	2402      	movcs	r4, #2
 80048cc:	e002      	b.n	80048d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048ce:	2400      	movs	r4, #0
 80048d0:	e000      	b.n	80048d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
      latency = FLASH_LATENCY_3; /* 3WS */
 80048d2:	2403      	movs	r4, #3
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048d4:	4908      	ldr	r1, [pc, #32]	@ (80048f8 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 80048d6:	680b      	ldr	r3, [r1, #0]
 80048d8:	f023 0307 	bic.w	r3, r3, #7
 80048dc:	4323      	orrs	r3, r4
 80048de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048e0:	6808      	ldr	r0, [r1, #0]
 80048e2:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80048e6:	1b00      	subs	r0, r0, r4
 80048e8:	bf18      	it	ne
 80048ea:	2001      	movne	r0, #1
 80048ec:	b003      	add	sp, #12
 80048ee:	bd30      	pop	{r4, r5, pc}
        latency = FLASH_LATENCY_2; /* 2WS */
 80048f0:	2402      	movs	r4, #2
 80048f2:	e7ef      	b.n	80048d4 <RCC_SetFlashLatencyFromMSIRange+0x60>
 80048f4:	40021000 	.word	0x40021000
 80048f8:	40022000 	.word	0x40022000

080048fc <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048fc:	4a25      	ldr	r2, [pc, #148]	@ (8004994 <HAL_RCC_GetSysClockFreq+0x98>)
 80048fe:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004900:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004902:	f013 030c 	ands.w	r3, r3, #12
 8004906:	d00e      	beq.n	8004926 <HAL_RCC_GetSysClockFreq+0x2a>
 8004908:	2b0c      	cmp	r3, #12
 800490a:	d006      	beq.n	800491a <HAL_RCC_GetSysClockFreq+0x1e>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800490c:	2b04      	cmp	r3, #4
 800490e:	d03f      	beq.n	8004990 <HAL_RCC_GetSysClockFreq+0x94>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004910:	2b08      	cmp	r3, #8
 8004912:	4821      	ldr	r0, [pc, #132]	@ (8004998 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004914:	bf18      	it	ne
 8004916:	2000      	movne	r0, #0
 8004918:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800491a:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800491e:	2a01      	cmp	r2, #1
 8004920:	d001      	beq.n	8004926 <HAL_RCC_GetSysClockFreq+0x2a>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004922:	2000      	movs	r0, #0
 8004924:	e012      	b.n	800494c <HAL_RCC_GetSysClockFreq+0x50>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004926:	4a1b      	ldr	r2, [pc, #108]	@ (8004994 <HAL_RCC_GetSysClockFreq+0x98>)
 8004928:	6812      	ldr	r2, [r2, #0]
 800492a:	f012 0f08 	tst.w	r2, #8
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800492e:	4a19      	ldr	r2, [pc, #100]	@ (8004994 <HAL_RCC_GetSysClockFreq+0x98>)
 8004930:	bf07      	ittee	eq
 8004932:	f8d2 2094 	ldreq.w	r2, [r2, #148]	@ 0x94
 8004936:	f3c2 2203 	ubfxeq	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800493a:	6812      	ldrne	r2, [r2, #0]
 800493c:	f3c2 1203 	ubfxne	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8004940:	4916      	ldr	r1, [pc, #88]	@ (800499c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004942:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004946:	b323      	cbz	r3, 8004992 <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004948:	2b0c      	cmp	r3, #12
 800494a:	d11f      	bne.n	800498c <HAL_RCC_GetSysClockFreq+0x90>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800494c:	4b11      	ldr	r3, [pc, #68]	@ (8004994 <HAL_RCC_GetSysClockFreq+0x98>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8004954:	2b02      	cmp	r3, #2
 8004956:	d017      	beq.n	8004988 <HAL_RCC_GetSysClockFreq+0x8c>
 8004958:	4a0f      	ldr	r2, [pc, #60]	@ (8004998 <HAL_RCC_GetSysClockFreq+0x9c>)
 800495a:	2b03      	cmp	r3, #3
 800495c:	bf08      	it	eq
 800495e:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004960:	490c      	ldr	r1, [pc, #48]	@ (8004994 <HAL_RCC_GetSysClockFreq+0x98>)
 8004962:	68ca      	ldr	r2, [r1, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004964:	68cb      	ldr	r3, [r1, #12]
 8004966:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800496a:	fb00 f303 	mul.w	r3, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800496e:	68c8      	ldr	r0, [r1, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004970:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8004974:	3201      	adds	r2, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004976:	fbb3 f3f2 	udiv	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800497a:	f3c0 6041 	ubfx	r0, r0, #25, #2
 800497e:	3001      	adds	r0, #1
 8004980:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 8004982:	fbb3 f0f0 	udiv	r0, r3, r0
 8004986:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8004988:	4805      	ldr	r0, [pc, #20]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800498a:	e7e9      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x64>
 800498c:	2000      	movs	r0, #0
  return sysclockfreq;
 800498e:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8004990:	4803      	ldr	r0, [pc, #12]	@ (80049a0 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 8004992:	4770      	bx	lr
 8004994:	40021000 	.word	0x40021000
 8004998:	007a1200 	.word	0x007a1200
 800499c:	0800b08c 	.word	0x0800b08c
 80049a0:	00f42400 	.word	0x00f42400

080049a4 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 80049a4:	2800      	cmp	r0, #0
 80049a6:	f000 832a 	beq.w	8004ffe <HAL_RCC_OscConfig+0x65a>
{
 80049aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80049ae:	b083      	sub	sp, #12
 80049b0:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049b2:	4b98      	ldr	r3, [pc, #608]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 80049b4:	689d      	ldr	r5, [r3, #8]
 80049b6:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049ba:	68de      	ldr	r6, [r3, #12]
 80049bc:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049c0:	6803      	ldr	r3, [r0, #0]
 80049c2:	f013 0f10 	tst.w	r3, #16
 80049c6:	d05f      	beq.n	8004a88 <HAL_RCC_OscConfig+0xe4>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049c8:	b1f5      	cbz	r5, 8004a08 <HAL_RCC_OscConfig+0x64>
 80049ca:	2d0c      	cmp	r5, #12
 80049cc:	d01a      	beq.n	8004a04 <HAL_RCC_OscConfig+0x60>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049ce:	69a3      	ldr	r3, [r4, #24]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 80ba 	beq.w	8004b4a <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 80049d6:	4a8f      	ldr	r2, [pc, #572]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 80049d8:	6813      	ldr	r3, [r2, #0]
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80049e0:	f7fe fd7a 	bl	80034d8 <HAL_GetTick>
 80049e4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049e6:	f8df 822c 	ldr.w	r8, [pc, #556]	@ 8004c14 <HAL_RCC_OscConfig+0x270>
 80049ea:	f8d8 3000 	ldr.w	r3, [r8]
 80049ee:	f013 0f02 	tst.w	r3, #2
 80049f2:	f040 8097 	bne.w	8004b24 <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049f6:	f7fe fd6f 	bl	80034d8 <HAL_GetTick>
 80049fa:	1bc0      	subs	r0, r0, r7
 80049fc:	2802      	cmp	r0, #2
 80049fe:	d9f4      	bls.n	80049ea <HAL_RCC_OscConfig+0x46>
            return HAL_TIMEOUT;
 8004a00:	2003      	movs	r0, #3
 8004a02:	e307      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004a04:	2e01      	cmp	r6, #1
 8004a06:	d1e2      	bne.n	80049ce <HAL_RCC_OscConfig+0x2a>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a08:	4b82      	ldr	r3, [pc, #520]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f013 0f02 	tst.w	r3, #2
 8004a10:	d003      	beq.n	8004a1a <HAL_RCC_OscConfig+0x76>
 8004a12:	69a3      	ldr	r3, [r4, #24]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 82f4 	beq.w	8005002 <HAL_RCC_OscConfig+0x65e>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004a1a:	6a20      	ldr	r0, [r4, #32]
 8004a1c:	4b7d      	ldr	r3, [pc, #500]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f013 0f08 	tst.w	r3, #8
 8004a24:	4b7b      	ldr	r3, [pc, #492]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a26:	bf12      	itee	ne
 8004a28:	681b      	ldrne	r3, [r3, #0]
 8004a2a:	f8d3 3094 	ldreq.w	r3, [r3, #148]	@ 0x94
 8004a2e:	091b      	lsreq	r3, r3, #4
 8004a30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a34:	4298      	cmp	r0, r3
 8004a36:	d856      	bhi.n	8004ae6 <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a38:	4b76      	ldr	r3, [pc, #472]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	f042 0208 	orr.w	r2, r2, #8
 8004a40:	601a      	str	r2, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004a48:	6a21      	ldr	r1, [r4, #32]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	69e1      	ldr	r1, [r4, #28]
 8004a52:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004a56:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004a5a:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a5c:	2d00      	cmp	r5, #0
 8004a5e:	d05a      	beq.n	8004b16 <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a60:	f7ff ff4c 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 8004a64:	4b6b      	ldr	r3, [pc, #428]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004a6c:	4a6a      	ldr	r2, [pc, #424]	@ (8004c18 <HAL_RCC_OscConfig+0x274>)
 8004a6e:	5cd3      	ldrb	r3, [r2, r3]
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	40d8      	lsrs	r0, r3
 8004a76:	4b69      	ldr	r3, [pc, #420]	@ (8004c1c <HAL_RCC_OscConfig+0x278>)
 8004a78:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8004a7a:	4b69      	ldr	r3, [pc, #420]	@ (8004c20 <HAL_RCC_OscConfig+0x27c>)
 8004a7c:	6818      	ldr	r0, [r3, #0]
 8004a7e:	f7fe fce7 	bl	8003450 <HAL_InitTick>
        if(status != HAL_OK)
 8004a82:	2800      	cmp	r0, #0
 8004a84:	f040 82c6 	bne.w	8005014 <HAL_RCC_OscConfig+0x670>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a88:	6823      	ldr	r3, [r4, #0]
 8004a8a:	f013 0f01 	tst.w	r3, #1
 8004a8e:	d07d      	beq.n	8004b8c <HAL_RCC_OscConfig+0x1e8>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a90:	2d08      	cmp	r5, #8
 8004a92:	d072      	beq.n	8004b7a <HAL_RCC_OscConfig+0x1d6>
 8004a94:	2d0c      	cmp	r5, #12
 8004a96:	d06e      	beq.n	8004b76 <HAL_RCC_OscConfig+0x1d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a98:	6863      	ldr	r3, [r4, #4]
 8004a9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a9e:	f000 8094 	beq.w	8004bca <HAL_RCC_OscConfig+0x226>
 8004aa2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004aa6:	f000 8096 	beq.w	8004bd6 <HAL_RCC_OscConfig+0x232>
 8004aaa:	4b5a      	ldr	r3, [pc, #360]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004aba:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004abc:	6863      	ldr	r3, [r4, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 8096 	beq.w	8004bf0 <HAL_RCC_OscConfig+0x24c>
        tickstart = HAL_GetTick();
 8004ac4:	f7fe fd08 	bl	80034d8 <HAL_GetTick>
 8004ac8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aca:	f8df 8148 	ldr.w	r8, [pc, #328]	@ 8004c14 <HAL_RCC_OscConfig+0x270>
 8004ace:	f8d8 3000 	ldr.w	r3, [r8]
 8004ad2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004ad6:	d159      	bne.n	8004b8c <HAL_RCC_OscConfig+0x1e8>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad8:	f7fe fcfe 	bl	80034d8 <HAL_GetTick>
 8004adc:	1bc0      	subs	r0, r0, r7
 8004ade:	2864      	cmp	r0, #100	@ 0x64
 8004ae0:	d9f5      	bls.n	8004ace <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8004ae2:	2003      	movs	r0, #3
 8004ae4:	e296      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ae6:	f7ff fec5 	bl	8004874 <RCC_SetFlashLatencyFromMSIRange>
 8004aea:	2800      	cmp	r0, #0
 8004aec:	f040 828b 	bne.w	8005006 <HAL_RCC_OscConfig+0x662>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004af0:	4b48      	ldr	r3, [pc, #288]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	f042 0208 	orr.w	r2, r2, #8
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004b00:	6a21      	ldr	r1, [r4, #32]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	69e1      	ldr	r1, [r4, #28]
 8004b0a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004b0e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004b12:	605a      	str	r2, [r3, #4]
 8004b14:	e7a4      	b.n	8004a60 <HAL_RCC_OscConfig+0xbc>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b16:	6a20      	ldr	r0, [r4, #32]
 8004b18:	f7ff feac 	bl	8004874 <RCC_SetFlashLatencyFromMSIRange>
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	d09f      	beq.n	8004a60 <HAL_RCC_OscConfig+0xbc>
              return HAL_ERROR;
 8004b20:	2001      	movs	r0, #1
 8004b22:	e277      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b24:	4b3b      	ldr	r3, [pc, #236]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	f042 0208 	orr.w	r2, r2, #8
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004b34:	6a21      	ldr	r1, [r4, #32]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	69e1      	ldr	r1, [r4, #28]
 8004b3e:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004b42:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004b46:	605a      	str	r2, [r3, #4]
 8004b48:	e79e      	b.n	8004a88 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_MSI_DISABLE();
 8004b4a:	4a32      	ldr	r2, [pc, #200]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b4c:	6813      	ldr	r3, [r2, #0]
 8004b4e:	f023 0301 	bic.w	r3, r3, #1
 8004b52:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004b54:	f7fe fcc0 	bl	80034d8 <HAL_GetTick>
 8004b58:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b5a:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 8004c14 <HAL_RCC_OscConfig+0x270>
 8004b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8004b62:	f013 0f02 	tst.w	r3, #2
 8004b66:	d08f      	beq.n	8004a88 <HAL_RCC_OscConfig+0xe4>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b68:	f7fe fcb6 	bl	80034d8 <HAL_GetTick>
 8004b6c:	1bc0      	subs	r0, r0, r7
 8004b6e:	2802      	cmp	r0, #2
 8004b70:	d9f5      	bls.n	8004b5e <HAL_RCC_OscConfig+0x1ba>
            return HAL_TIMEOUT;
 8004b72:	2003      	movs	r0, #3
 8004b74:	e24e      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b76:	2e03      	cmp	r6, #3
 8004b78:	d18e      	bne.n	8004a98 <HAL_RCC_OscConfig+0xf4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b7a:	4b26      	ldr	r3, [pc, #152]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004b82:	d003      	beq.n	8004b8c <HAL_RCC_OscConfig+0x1e8>
 8004b84:	6863      	ldr	r3, [r4, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 823f 	beq.w	800500a <HAL_RCC_OscConfig+0x666>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b8c:	6823      	ldr	r3, [r4, #0]
 8004b8e:	f013 0f02 	tst.w	r3, #2
 8004b92:	d05a      	beq.n	8004c4a <HAL_RCC_OscConfig+0x2a6>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b94:	2d04      	cmp	r5, #4
 8004b96:	d047      	beq.n	8004c28 <HAL_RCC_OscConfig+0x284>
 8004b98:	2d0c      	cmp	r5, #12
 8004b9a:	d043      	beq.n	8004c24 <HAL_RCC_OscConfig+0x280>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b9c:	68e3      	ldr	r3, [r4, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d079      	beq.n	8004c96 <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_HSI_ENABLE();
 8004ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004ba4:	6813      	ldr	r3, [r2, #0]
 8004ba6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004baa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004bac:	f7fe fc94 	bl	80034d8 <HAL_GetTick>
 8004bb0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bb2:	4f18      	ldr	r7, [pc, #96]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8004bba:	d163      	bne.n	8004c84 <HAL_RCC_OscConfig+0x2e0>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bbc:	f7fe fc8c 	bl	80034d8 <HAL_GetTick>
 8004bc0:	1b80      	subs	r0, r0, r6
 8004bc2:	2802      	cmp	r0, #2
 8004bc4:	d9f6      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x210>
            return HAL_TIMEOUT;
 8004bc6:	2003      	movs	r0, #3
 8004bc8:	e224      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bca:	4a12      	ldr	r2, [pc, #72]	@ (8004c14 <HAL_RCC_OscConfig+0x270>)
 8004bcc:	6813      	ldr	r3, [r2, #0]
 8004bce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bd2:	6013      	str	r3, [r2, #0]
 8004bd4:	e772      	b.n	8004abc <HAL_RCC_OscConfig+0x118>
 8004bd6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004bda:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	e765      	b.n	8004abc <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8004bf0:	f7fe fc72 	bl	80034d8 <HAL_GetTick>
 8004bf4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bf6:	f8df 801c 	ldr.w	r8, [pc, #28]	@ 8004c14 <HAL_RCC_OscConfig+0x270>
 8004bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8004bfe:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8004c02:	d0c3      	beq.n	8004b8c <HAL_RCC_OscConfig+0x1e8>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c04:	f7fe fc68 	bl	80034d8 <HAL_GetTick>
 8004c08:	1bc0      	subs	r0, r0, r7
 8004c0a:	2864      	cmp	r0, #100	@ 0x64
 8004c0c:	d9f5      	bls.n	8004bfa <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 8004c0e:	2003      	movs	r0, #3
 8004c10:	e200      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
 8004c12:	bf00      	nop
 8004c14:	40021000 	.word	0x40021000
 8004c18:	0800b0c4 	.word	0x0800b0c4
 8004c1c:	20002f78 	.word	0x20002f78
 8004c20:	20002f80 	.word	0x20002f80
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c24:	2e02      	cmp	r6, #2
 8004c26:	d1b9      	bne.n	8004b9c <HAL_RCC_OscConfig+0x1f8>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c28:	4ba9      	ldr	r3, [pc, #676]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8004c30:	d003      	beq.n	8004c3a <HAL_RCC_OscConfig+0x296>
 8004c32:	68e3      	ldr	r3, [r4, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 81ea 	beq.w	800500e <HAL_RCC_OscConfig+0x66a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3a:	4aa5      	ldr	r2, [pc, #660]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004c3c:	6853      	ldr	r3, [r2, #4]
 8004c3e:	6921      	ldr	r1, [r4, #16]
 8004c40:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004c44:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004c48:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c4a:	6823      	ldr	r3, [r4, #0]
 8004c4c:	f013 0f08 	tst.w	r3, #8
 8004c50:	d04c      	beq.n	8004cec <HAL_RCC_OscConfig+0x348>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c52:	6963      	ldr	r3, [r4, #20]
 8004c54:	b39b      	cbz	r3, 8004cbe <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_LSI_ENABLE();
 8004c56:	4a9e      	ldr	r2, [pc, #632]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004c58:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8004c5c:	f043 0301 	orr.w	r3, r3, #1
 8004c60:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8004c64:	f7fe fc38 	bl	80034d8 <HAL_GetTick>
 8004c68:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c6a:	4f99      	ldr	r7, [pc, #612]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004c6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004c70:	f013 0f02 	tst.w	r3, #2
 8004c74:	d13a      	bne.n	8004cec <HAL_RCC_OscConfig+0x348>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c76:	f7fe fc2f 	bl	80034d8 <HAL_GetTick>
 8004c7a:	1b80      	subs	r0, r0, r6
 8004c7c:	2802      	cmp	r0, #2
 8004c7e:	d9f5      	bls.n	8004c6c <HAL_RCC_OscConfig+0x2c8>
          return HAL_TIMEOUT;
 8004c80:	2003      	movs	r0, #3
 8004c82:	e1c7      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c84:	4a92      	ldr	r2, [pc, #584]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004c86:	6853      	ldr	r3, [r2, #4]
 8004c88:	6921      	ldr	r1, [r4, #16]
 8004c8a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004c8e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004c92:	6053      	str	r3, [r2, #4]
 8004c94:	e7d9      	b.n	8004c4a <HAL_RCC_OscConfig+0x2a6>
        __HAL_RCC_HSI_DISABLE();
 8004c96:	4a8e      	ldr	r2, [pc, #568]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004c98:	6813      	ldr	r3, [r2, #0]
 8004c9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c9e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004ca0:	f7fe fc1a 	bl	80034d8 <HAL_GetTick>
 8004ca4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ca6:	4f8a      	ldr	r7, [pc, #552]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8004cae:	d0cc      	beq.n	8004c4a <HAL_RCC_OscConfig+0x2a6>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cb0:	f7fe fc12 	bl	80034d8 <HAL_GetTick>
 8004cb4:	1b80      	subs	r0, r0, r6
 8004cb6:	2802      	cmp	r0, #2
 8004cb8:	d9f6      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x304>
            return HAL_TIMEOUT;
 8004cba:	2003      	movs	r0, #3
 8004cbc:	e1aa      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
      __HAL_RCC_LSI_DISABLE();
 8004cbe:	4a84      	ldr	r2, [pc, #528]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004cc0:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8004cc4:	f023 0301 	bic.w	r3, r3, #1
 8004cc8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8004ccc:	f7fe fc04 	bl	80034d8 <HAL_GetTick>
 8004cd0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cd2:	4f7f      	ldr	r7, [pc, #508]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004cd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004cd8:	f013 0f02 	tst.w	r3, #2
 8004cdc:	d006      	beq.n	8004cec <HAL_RCC_OscConfig+0x348>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cde:	f7fe fbfb 	bl	80034d8 <HAL_GetTick>
 8004ce2:	1b80      	subs	r0, r0, r6
 8004ce4:	2802      	cmp	r0, #2
 8004ce6:	d9f5      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x330>
          return HAL_TIMEOUT;
 8004ce8:	2003      	movs	r0, #3
 8004cea:	e193      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	f013 0f04 	tst.w	r3, #4
 8004cf2:	d07e      	beq.n	8004df2 <HAL_RCC_OscConfig+0x44e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004cf4:	4b76      	ldr	r3, [pc, #472]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cf8:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004cfc:	d137      	bne.n	8004d6e <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cfe:	4b74      	ldr	r3, [pc, #464]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004d00:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004d02:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004d06:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d0e:	9301      	str	r3, [sp, #4]
 8004d10:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004d12:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d14:	4b6f      	ldr	r3, [pc, #444]	@ (8004ed4 <HAL_RCC_OscConfig+0x530>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004d1c:	d029      	beq.n	8004d72 <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d1e:	68a3      	ldr	r3, [r4, #8]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d03c      	beq.n	8004d9e <HAL_RCC_OscConfig+0x3fa>
 8004d24:	2b05      	cmp	r3, #5
 8004d26:	d042      	beq.n	8004dae <HAL_RCC_OscConfig+0x40a>
 8004d28:	4b69      	ldr	r3, [pc, #420]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004d2a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004d2e:	f022 0201 	bic.w	r2, r2, #1
 8004d32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8004d36:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004d3a:	f022 0204 	bic.w	r2, r2, #4
 8004d3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d42:	68a3      	ldr	r3, [r4, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d040      	beq.n	8004dca <HAL_RCC_OscConfig+0x426>
      tickstart = HAL_GetTick();
 8004d48:	f7fe fbc6 	bl	80034d8 <HAL_GetTick>
 8004d4c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d4e:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 8004ed0 <HAL_RCC_OscConfig+0x52c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d52:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d56:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 8004d5a:	f013 0f02 	tst.w	r3, #2
 8004d5e:	d147      	bne.n	8004df0 <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d60:	f7fe fbba 	bl	80034d8 <HAL_GetTick>
 8004d64:	1bc0      	subs	r0, r0, r7
 8004d66:	4548      	cmp	r0, r9
 8004d68:	d9f5      	bls.n	8004d56 <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 8004d6a:	2003      	movs	r0, #3
 8004d6c:	e152      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
    FlagStatus       pwrclkchanged = RESET;
 8004d6e:	2600      	movs	r6, #0
 8004d70:	e7d0      	b.n	8004d14 <HAL_RCC_OscConfig+0x370>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d72:	4a58      	ldr	r2, [pc, #352]	@ (8004ed4 <HAL_RCC_OscConfig+0x530>)
 8004d74:	6813      	ldr	r3, [r2, #0]
 8004d76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d7a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004d7c:	f7fe fbac 	bl	80034d8 <HAL_GetTick>
 8004d80:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d82:	f8df 8150 	ldr.w	r8, [pc, #336]	@ 8004ed4 <HAL_RCC_OscConfig+0x530>
 8004d86:	f8d8 3000 	ldr.w	r3, [r8]
 8004d8a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8004d8e:	d1c6      	bne.n	8004d1e <HAL_RCC_OscConfig+0x37a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d90:	f7fe fba2 	bl	80034d8 <HAL_GetTick>
 8004d94:	1bc0      	subs	r0, r0, r7
 8004d96:	2802      	cmp	r0, #2
 8004d98:	d9f5      	bls.n	8004d86 <HAL_RCC_OscConfig+0x3e2>
          return HAL_TIMEOUT;
 8004d9a:	2003      	movs	r0, #3
 8004d9c:	e13a      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d9e:	4a4c      	ldr	r2, [pc, #304]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004da0:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004da4:	f043 0301 	orr.w	r3, r3, #1
 8004da8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004dac:	e7c9      	b.n	8004d42 <HAL_RCC_OscConfig+0x39e>
 8004dae:	4b48      	ldr	r3, [pc, #288]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004db0:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004db4:	f042 0204 	orr.w	r2, r2, #4
 8004db8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8004dbc:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004dc0:	f042 0201 	orr.w	r2, r2, #1
 8004dc4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8004dc8:	e7bb      	b.n	8004d42 <HAL_RCC_OscConfig+0x39e>
      tickstart = HAL_GetTick();
 8004dca:	f7fe fb85 	bl	80034d8 <HAL_GetTick>
 8004dce:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dd0:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 8004ed0 <HAL_RCC_OscConfig+0x52c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd4:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dd8:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 8004ddc:	f013 0f02 	tst.w	r3, #2
 8004de0:	d006      	beq.n	8004df0 <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de2:	f7fe fb79 	bl	80034d8 <HAL_GetTick>
 8004de6:	1bc0      	subs	r0, r0, r7
 8004de8:	4548      	cmp	r0, r9
 8004dea:	d9f5      	bls.n	8004dd8 <HAL_RCC_OscConfig+0x434>
          return HAL_TIMEOUT;
 8004dec:	2003      	movs	r0, #3
 8004dee:	e111      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
    if(pwrclkchanged == SET)
 8004df0:	b9e6      	cbnz	r6, 8004e2c <HAL_RCC_OscConfig+0x488>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	f013 0f20 	tst.w	r3, #32
 8004df8:	d035      	beq.n	8004e66 <HAL_RCC_OscConfig+0x4c2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004dfa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004dfc:	b1e3      	cbz	r3, 8004e38 <HAL_RCC_OscConfig+0x494>
      __HAL_RCC_HSI48_ENABLE();
 8004dfe:	4a34      	ldr	r2, [pc, #208]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004e00:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 8004e04:	f043 0301 	orr.w	r3, r3, #1
 8004e08:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8004e0c:	f7fe fb64 	bl	80034d8 <HAL_GetTick>
 8004e10:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e12:	4f2f      	ldr	r7, [pc, #188]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004e14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e18:	f013 0f02 	tst.w	r3, #2
 8004e1c:	d123      	bne.n	8004e66 <HAL_RCC_OscConfig+0x4c2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e1e:	f7fe fb5b 	bl	80034d8 <HAL_GetTick>
 8004e22:	1b80      	subs	r0, r0, r6
 8004e24:	2802      	cmp	r0, #2
 8004e26:	d9f5      	bls.n	8004e14 <HAL_RCC_OscConfig+0x470>
          return HAL_TIMEOUT;
 8004e28:	2003      	movs	r0, #3
 8004e2a:	e0f3      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e2c:	4a28      	ldr	r2, [pc, #160]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004e2e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004e30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e34:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e36:	e7dc      	b.n	8004df2 <HAL_RCC_OscConfig+0x44e>
      __HAL_RCC_HSI48_DISABLE();
 8004e38:	4a25      	ldr	r2, [pc, #148]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004e3a:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 8004e3e:	f023 0301 	bic.w	r3, r3, #1
 8004e42:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8004e46:	f7fe fb47 	bl	80034d8 <HAL_GetTick>
 8004e4a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e4c:	4f20      	ldr	r7, [pc, #128]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004e4e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e52:	f013 0f02 	tst.w	r3, #2
 8004e56:	d006      	beq.n	8004e66 <HAL_RCC_OscConfig+0x4c2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e58:	f7fe fb3e 	bl	80034d8 <HAL_GetTick>
 8004e5c:	1b80      	subs	r0, r0, r6
 8004e5e:	2802      	cmp	r0, #2
 8004e60:	d9f5      	bls.n	8004e4e <HAL_RCC_OscConfig+0x4aa>
          return HAL_TIMEOUT;
 8004e62:	2003      	movs	r0, #3
 8004e64:	e0d6      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e66:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 80d2 	beq.w	8005012 <HAL_RCC_OscConfig+0x66e>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d017      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x4fe>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e72:	2d0c      	cmp	r5, #12
 8004e74:	f000 80d5 	beq.w	8005022 <HAL_RCC_OscConfig+0x67e>
        __HAL_RCC_PLL_DISABLE();
 8004e78:	4a15      	ldr	r2, [pc, #84]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004e7a:	6813      	ldr	r3, [r2, #0]
 8004e7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e80:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004e82:	f7fe fb29 	bl	80034d8 <HAL_GetTick>
 8004e86:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e88:	4d11      	ldr	r5, [pc, #68]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004e8a:	682b      	ldr	r3, [r5, #0]
 8004e8c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004e90:	f000 80ae 	beq.w	8004ff0 <HAL_RCC_OscConfig+0x64c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e94:	f7fe fb20 	bl	80034d8 <HAL_GetTick>
 8004e98:	1b00      	subs	r0, r0, r4
 8004e9a:	2802      	cmp	r0, #2
 8004e9c:	d9f5      	bls.n	8004e8a <HAL_RCC_OscConfig+0x4e6>
            return HAL_TIMEOUT;
 8004e9e:	2003      	movs	r0, #3
 8004ea0:	e0b8      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
      pll_config = RCC->PLLCFGR;
 8004ea2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004ea4:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ea6:	f003 0103 	and.w	r1, r3, #3
 8004eaa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004eac:	4291      	cmp	r1, r2
 8004eae:	d013      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x534>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004eb0:	2d0c      	cmp	r5, #12
 8004eb2:	f000 80b2 	beq.w	800501a <HAL_RCC_OscConfig+0x676>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004eb6:	4b06      	ldr	r3, [pc, #24]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 8004ebe:	f040 80ae 	bne.w	800501e <HAL_RCC_OscConfig+0x67a>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004ec2:	4b03      	ldr	r3, [pc, #12]	@ (8004ed0 <HAL_RCC_OscConfig+0x52c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8004eca:	d02f      	beq.n	8004f2c <HAL_RCC_OscConfig+0x588>
            return HAL_ERROR;
 8004ecc:	2001      	movs	r0, #1
 8004ece:	e0a1      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ed8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004edc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004ede:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee0:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8004ee4:	d1e4      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x50c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ee6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004eea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004eec:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004ef0:	d1de      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x50c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ef2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004ef6:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ef8:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8004efc:	d1d8      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x50c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004efe:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8004f02:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004f04:	0852      	lsrs	r2, r2, #1
 8004f06:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f08:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004f0c:	d1d0      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x50c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f0e:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8004f12:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004f14:	0852      	lsrs	r2, r2, #1
 8004f16:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f18:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8004f1c:	d1c8      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x50c>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f1e:	4b42      	ldr	r3, [pc, #264]	@ (8005028 <HAL_RCC_OscConfig+0x684>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004f26:	d049      	beq.n	8004fbc <HAL_RCC_OscConfig+0x618>
  return HAL_OK;
 8004f28:	2000      	movs	r0, #0
 8004f2a:	e073      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
            __HAL_RCC_PLL_DISABLE();
 8004f2c:	4a3e      	ldr	r2, [pc, #248]	@ (8005028 <HAL_RCC_OscConfig+0x684>)
 8004f2e:	6813      	ldr	r3, [r2, #0]
 8004f30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f34:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 8004f36:	f7fe facf 	bl	80034d8 <HAL_GetTick>
 8004f3a:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f3c:	4e3a      	ldr	r6, [pc, #232]	@ (8005028 <HAL_RCC_OscConfig+0x684>)
 8004f3e:	6833      	ldr	r3, [r6, #0]
 8004f40:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004f44:	d006      	beq.n	8004f54 <HAL_RCC_OscConfig+0x5b0>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f46:	f7fe fac7 	bl	80034d8 <HAL_GetTick>
 8004f4a:	1b40      	subs	r0, r0, r5
 8004f4c:	2802      	cmp	r0, #2
 8004f4e:	d9f6      	bls.n	8004f3e <HAL_RCC_OscConfig+0x59a>
                return HAL_TIMEOUT;
 8004f50:	2003      	movs	r0, #3
 8004f52:	e05f      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f54:	4a34      	ldr	r2, [pc, #208]	@ (8005028 <HAL_RCC_OscConfig+0x684>)
 8004f56:	68d1      	ldr	r1, [r2, #12]
 8004f58:	4b34      	ldr	r3, [pc, #208]	@ (800502c <HAL_RCC_OscConfig+0x688>)
 8004f5a:	400b      	ands	r3, r1
 8004f5c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004f5e:	430b      	orrs	r3, r1
 8004f60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f62:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004f66:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004f68:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 8004f6c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004f6e:	3901      	subs	r1, #1
 8004f70:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8004f74:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8004f76:	0849      	lsrs	r1, r1, #1
 8004f78:	3901      	subs	r1, #1
 8004f7a:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8004f7e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8004f80:	0849      	lsrs	r1, r1, #1
 8004f82:	3901      	subs	r1, #1
 8004f84:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8004f88:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8004f8a:	6813      	ldr	r3, [r2, #0]
 8004f8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f90:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f92:	68d3      	ldr	r3, [r2, #12]
 8004f94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f98:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8004f9a:	f7fe fa9d 	bl	80034d8 <HAL_GetTick>
 8004f9e:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fa0:	4d21      	ldr	r5, [pc, #132]	@ (8005028 <HAL_RCC_OscConfig+0x684>)
 8004fa2:	682b      	ldr	r3, [r5, #0]
 8004fa4:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004fa8:	d106      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x614>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004faa:	f7fe fa95 	bl	80034d8 <HAL_GetTick>
 8004fae:	1b00      	subs	r0, r0, r4
 8004fb0:	2802      	cmp	r0, #2
 8004fb2:	d9f6      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x5fe>
                return HAL_TIMEOUT;
 8004fb4:	2003      	movs	r0, #3
 8004fb6:	e02d      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
  return HAL_OK;
 8004fb8:	2000      	movs	r0, #0
 8004fba:	e02b      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
          __HAL_RCC_PLL_ENABLE();
 8004fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8005028 <HAL_RCC_OscConfig+0x684>)
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004fc4:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8004fcc:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 8004fce:	f7fe fa83 	bl	80034d8 <HAL_GetTick>
 8004fd2:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fd4:	4d14      	ldr	r5, [pc, #80]	@ (8005028 <HAL_RCC_OscConfig+0x684>)
 8004fd6:	682b      	ldr	r3, [r5, #0]
 8004fd8:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004fdc:	d106      	bne.n	8004fec <HAL_RCC_OscConfig+0x648>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fde:	f7fe fa7b 	bl	80034d8 <HAL_GetTick>
 8004fe2:	1b03      	subs	r3, r0, r4
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d9f6      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x632>
              return HAL_TIMEOUT;
 8004fe8:	2003      	movs	r0, #3
 8004fea:	e013      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
  return HAL_OK;
 8004fec:	2000      	movs	r0, #0
 8004fee:	e011      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8005028 <HAL_RCC_OscConfig+0x684>)
 8004ff2:	68d1      	ldr	r1, [r2, #12]
 8004ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8005030 <HAL_RCC_OscConfig+0x68c>)
 8004ff6:	400b      	ands	r3, r1
 8004ff8:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	e00a      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
    return HAL_ERROR;
 8004ffe:	2001      	movs	r0, #1
}
 8005000:	4770      	bx	lr
        return HAL_ERROR;
 8005002:	2001      	movs	r0, #1
 8005004:	e006      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
            return HAL_ERROR;
 8005006:	2001      	movs	r0, #1
 8005008:	e004      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
        return HAL_ERROR;
 800500a:	2001      	movs	r0, #1
 800500c:	e002      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
        return HAL_ERROR;
 800500e:	2001      	movs	r0, #1
 8005010:	e000      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
  return HAL_OK;
 8005012:	2000      	movs	r0, #0
}
 8005014:	b003      	add	sp, #12
 8005016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return HAL_ERROR;
 800501a:	2001      	movs	r0, #1
 800501c:	e7fa      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
            return HAL_ERROR;
 800501e:	2001      	movs	r0, #1
 8005020:	e7f8      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
        return HAL_ERROR;
 8005022:	2001      	movs	r0, #1
 8005024:	e7f6      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
 8005026:	bf00      	nop
 8005028:	40021000 	.word	0x40021000
 800502c:	019d808c 	.word	0x019d808c
 8005030:	feeefffc 	.word	0xfeeefffc

08005034 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005034:	2800      	cmp	r0, #0
 8005036:	d076      	beq.n	8005126 <HAL_RCC_ClockConfig+0xf2>
{
 8005038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800503c:	460d      	mov	r5, r1
 800503e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005040:	4b5e      	ldr	r3, [pc, #376]	@ (80051bc <HAL_RCC_ClockConfig+0x188>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	428b      	cmp	r3, r1
 800504a:	d20a      	bcs.n	8005062 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504c:	4a5b      	ldr	r2, [pc, #364]	@ (80051bc <HAL_RCC_ClockConfig+0x188>)
 800504e:	6813      	ldr	r3, [r2, #0]
 8005050:	f023 0307 	bic.w	r3, r3, #7
 8005054:	430b      	orrs	r3, r1
 8005056:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005058:	6813      	ldr	r3, [r2, #0]
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	428b      	cmp	r3, r1
 8005060:	d163      	bne.n	800512a <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	f013 0f02 	tst.w	r3, #2
 8005068:	d065      	beq.n	8005136 <HAL_RCC_ClockConfig+0x102>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800506a:	68a1      	ldr	r1, [r4, #8]
 800506c:	4a54      	ldr	r2, [pc, #336]	@ (80051c0 <HAL_RCC_ClockConfig+0x18c>)
 800506e:	6892      	ldr	r2, [r2, #8]
 8005070:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8005074:	4291      	cmp	r1, r2
 8005076:	f240 809c 	bls.w	80051b2 <HAL_RCC_ClockConfig+0x17e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800507a:	4a51      	ldr	r2, [pc, #324]	@ (80051c0 <HAL_RCC_ClockConfig+0x18c>)
 800507c:	6893      	ldr	r3, [r2, #8]
 800507e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005082:	430b      	orrs	r3, r1
 8005084:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	f013 0f01 	tst.w	r3, #1
 800508c:	d039      	beq.n	8005102 <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800508e:	6862      	ldr	r2, [r4, #4]
 8005090:	2a03      	cmp	r2, #3
 8005092:	d009      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x74>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005094:	2a02      	cmp	r2, #2
 8005096:	d026      	beq.n	80050e6 <HAL_RCC_ClockConfig+0xb2>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005098:	bb62      	cbnz	r2, 80050f4 <HAL_RCC_ClockConfig+0xc0>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800509a:	4b49      	ldr	r3, [pc, #292]	@ (80051c0 <HAL_RCC_ClockConfig+0x18c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f013 0f02 	tst.w	r3, #2
 80050a2:	d106      	bne.n	80050b2 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 80050a4:	2001      	movs	r0, #1
 80050a6:	e082      	b.n	80051ae <HAL_RCC_ClockConfig+0x17a>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050a8:	4b45      	ldr	r3, [pc, #276]	@ (80051c0 <HAL_RCC_ClockConfig+0x18c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80050b0:	d03d      	beq.n	800512e <HAL_RCC_ClockConfig+0xfa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050b2:	4943      	ldr	r1, [pc, #268]	@ (80051c0 <HAL_RCC_ClockConfig+0x18c>)
 80050b4:	688b      	ldr	r3, [r1, #8]
 80050b6:	f023 0303 	bic.w	r3, r3, #3
 80050ba:	4313      	orrs	r3, r2
 80050bc:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80050be:	f7fe fa0b 	bl	80034d8 <HAL_GetTick>
 80050c2:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c4:	4f3e      	ldr	r7, [pc, #248]	@ (80051c0 <HAL_RCC_ClockConfig+0x18c>)
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c6:	f241 3888 	movw	r8, #5000	@ 0x1388
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	f003 030c 	and.w	r3, r3, #12
 80050d0:	6862      	ldr	r2, [r4, #4]
 80050d2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80050d6:	d014      	beq.n	8005102 <HAL_RCC_ClockConfig+0xce>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050d8:	f7fe f9fe 	bl	80034d8 <HAL_GetTick>
 80050dc:	1b80      	subs	r0, r0, r6
 80050de:	4540      	cmp	r0, r8
 80050e0:	d9f3      	bls.n	80050ca <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 80050e2:	2003      	movs	r0, #3
 80050e4:	e063      	b.n	80051ae <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050e6:	4b36      	ldr	r3, [pc, #216]	@ (80051c0 <HAL_RCC_ClockConfig+0x18c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80050ee:	d1e0      	bne.n	80050b2 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 80050f0:	2001      	movs	r0, #1
 80050f2:	e05c      	b.n	80051ae <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050f4:	4b32      	ldr	r3, [pc, #200]	@ (80051c0 <HAL_RCC_ClockConfig+0x18c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80050fc:	d1d9      	bne.n	80050b2 <HAL_RCC_ClockConfig+0x7e>
          return HAL_ERROR;
 80050fe:	2001      	movs	r0, #1
 8005100:	e055      	b.n	80051ae <HAL_RCC_ClockConfig+0x17a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	f013 0f02 	tst.w	r3, #2
 8005108:	d018      	beq.n	800513c <HAL_RCC_ClockConfig+0x108>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800510a:	68a2      	ldr	r2, [r4, #8]
 800510c:	4b2c      	ldr	r3, [pc, #176]	@ (80051c0 <HAL_RCC_ClockConfig+0x18c>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005114:	429a      	cmp	r2, r3
 8005116:	d211      	bcs.n	800513c <HAL_RCC_ClockConfig+0x108>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005118:	4929      	ldr	r1, [pc, #164]	@ (80051c0 <HAL_RCC_ClockConfig+0x18c>)
 800511a:	688b      	ldr	r3, [r1, #8]
 800511c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005120:	4313      	orrs	r3, r2
 8005122:	608b      	str	r3, [r1, #8]
 8005124:	e00a      	b.n	800513c <HAL_RCC_ClockConfig+0x108>
    return HAL_ERROR;
 8005126:	2001      	movs	r0, #1
}
 8005128:	4770      	bx	lr
      return HAL_ERROR;
 800512a:	2001      	movs	r0, #1
 800512c:	e03f      	b.n	80051ae <HAL_RCC_ClockConfig+0x17a>
        return HAL_ERROR;
 800512e:	2001      	movs	r0, #1
 8005130:	e03d      	b.n	80051ae <HAL_RCC_ClockConfig+0x17a>
      return HAL_ERROR;
 8005132:	2001      	movs	r0, #1
 8005134:	e03b      	b.n	80051ae <HAL_RCC_ClockConfig+0x17a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005136:	f013 0f01 	tst.w	r3, #1
 800513a:	d1a8      	bne.n	800508e <HAL_RCC_ClockConfig+0x5a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800513c:	4b1f      	ldr	r3, [pc, #124]	@ (80051bc <HAL_RCC_ClockConfig+0x188>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0307 	and.w	r3, r3, #7
 8005144:	42ab      	cmp	r3, r5
 8005146:	d90a      	bls.n	800515e <HAL_RCC_ClockConfig+0x12a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005148:	4a1c      	ldr	r2, [pc, #112]	@ (80051bc <HAL_RCC_ClockConfig+0x188>)
 800514a:	6813      	ldr	r3, [r2, #0]
 800514c:	f023 0307 	bic.w	r3, r3, #7
 8005150:	432b      	orrs	r3, r5
 8005152:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005154:	6813      	ldr	r3, [r2, #0]
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	42ab      	cmp	r3, r5
 800515c:	d1e9      	bne.n	8005132 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	f013 0f04 	tst.w	r3, #4
 8005164:	d006      	beq.n	8005174 <HAL_RCC_ClockConfig+0x140>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005166:	4a16      	ldr	r2, [pc, #88]	@ (80051c0 <HAL_RCC_ClockConfig+0x18c>)
 8005168:	6893      	ldr	r3, [r2, #8]
 800516a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800516e:	68e1      	ldr	r1, [r4, #12]
 8005170:	430b      	orrs	r3, r1
 8005172:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005174:	6823      	ldr	r3, [r4, #0]
 8005176:	f013 0f08 	tst.w	r3, #8
 800517a:	d007      	beq.n	800518c <HAL_RCC_ClockConfig+0x158>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800517c:	4a10      	ldr	r2, [pc, #64]	@ (80051c0 <HAL_RCC_ClockConfig+0x18c>)
 800517e:	6893      	ldr	r3, [r2, #8]
 8005180:	6921      	ldr	r1, [r4, #16]
 8005182:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8005186:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800518a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800518c:	f7ff fbb6 	bl	80048fc <HAL_RCC_GetSysClockFreq>
 8005190:	4b0b      	ldr	r3, [pc, #44]	@ (80051c0 <HAL_RCC_ClockConfig+0x18c>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005198:	4a0a      	ldr	r2, [pc, #40]	@ (80051c4 <HAL_RCC_ClockConfig+0x190>)
 800519a:	5cd3      	ldrb	r3, [r2, r3]
 800519c:	f003 031f 	and.w	r3, r3, #31
 80051a0:	40d8      	lsrs	r0, r3
 80051a2:	4b09      	ldr	r3, [pc, #36]	@ (80051c8 <HAL_RCC_ClockConfig+0x194>)
 80051a4:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80051a6:	4b09      	ldr	r3, [pc, #36]	@ (80051cc <HAL_RCC_ClockConfig+0x198>)
 80051a8:	6818      	ldr	r0, [r3, #0]
 80051aa:	f7fe f951 	bl	8003450 <HAL_InitTick>
}
 80051ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051b2:	f013 0f01 	tst.w	r3, #1
 80051b6:	f47f af6a 	bne.w	800508e <HAL_RCC_ClockConfig+0x5a>
 80051ba:	e7a6      	b.n	800510a <HAL_RCC_ClockConfig+0xd6>
 80051bc:	40022000 	.word	0x40022000
 80051c0:	40021000 	.word	0x40021000
 80051c4:	0800b0c4 	.word	0x0800b0c4
 80051c8:	20002f78 	.word	0x20002f78
 80051cc:	20002f80 	.word	0x20002f80

080051d0 <HAL_RCC_GetHCLKFreq>:
}
 80051d0:	4b01      	ldr	r3, [pc, #4]	@ (80051d8 <HAL_RCC_GetHCLKFreq+0x8>)
 80051d2:	6818      	ldr	r0, [r3, #0]
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	20002f78 	.word	0x20002f78

080051dc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051dc:	4b05      	ldr	r3, [pc, #20]	@ (80051f4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80051e4:	4a04      	ldr	r2, [pc, #16]	@ (80051f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80051e6:	5cd3      	ldrb	r3, [r2, r3]
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	4a03      	ldr	r2, [pc, #12]	@ (80051fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80051ee:	6810      	ldr	r0, [r2, #0]
}
 80051f0:	40d8      	lsrs	r0, r3
 80051f2:	4770      	bx	lr
 80051f4:	40021000 	.word	0x40021000
 80051f8:	0800b0bc 	.word	0x0800b0bc
 80051fc:	20002f78 	.word	0x20002f78

08005200 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005200:	4b05      	ldr	r3, [pc, #20]	@ (8005218 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005208:	4a04      	ldr	r2, [pc, #16]	@ (800521c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800520a:	5cd3      	ldrb	r3, [r2, r3]
 800520c:	f003 031f 	and.w	r3, r3, #31
 8005210:	4a03      	ldr	r2, [pc, #12]	@ (8005220 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005212:	6810      	ldr	r0, [r2, #0]
}
 8005214:	40d8      	lsrs	r0, r3
 8005216:	4770      	bx	lr
 8005218:	40021000 	.word	0x40021000
 800521c:	0800b0bc 	.word	0x0800b0bc
 8005220:	20002f78 	.word	0x20002f78

08005224 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005226:	4604      	mov	r4, r0
 8005228:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800522a:	4b54      	ldr	r3, [pc, #336]	@ (800537c <RCCEx_PLLSAI1_Config+0x158>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	f013 0f03 	tst.w	r3, #3
 8005232:	d014      	beq.n	800525e <RCCEx_PLLSAI1_Config+0x3a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005234:	4b51      	ldr	r3, [pc, #324]	@ (800537c <RCCEx_PLLSAI1_Config+0x158>)
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	6802      	ldr	r2, [r0, #0]
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	4293      	cmp	r3, r2
 8005240:	d001      	beq.n	8005246 <RCCEx_PLLSAI1_Config+0x22>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005242:	2001      	movs	r0, #1
 8005244:	e013      	b.n	800526e <RCCEx_PLLSAI1_Config+0x4a>
       ||
 8005246:	2a00      	cmp	r2, #0
 8005248:	d079      	beq.n	800533e <RCCEx_PLLSAI1_Config+0x11a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800524a:	4b4c      	ldr	r3, [pc, #304]	@ (800537c <RCCEx_PLLSAI1_Config+0x158>)
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005252:	3301      	adds	r3, #1
       ||
 8005254:	6842      	ldr	r2, [r0, #4]
 8005256:	4293      	cmp	r3, r2
 8005258:	d019      	beq.n	800528e <RCCEx_PLLSAI1_Config+0x6a>
      status = HAL_ERROR;
 800525a:	2001      	movs	r0, #1
 800525c:	e007      	b.n	800526e <RCCEx_PLLSAI1_Config+0x4a>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800525e:	6803      	ldr	r3, [r0, #0]
 8005260:	2b02      	cmp	r3, #2
 8005262:	d028      	beq.n	80052b6 <RCCEx_PLLSAI1_Config+0x92>
 8005264:	2b03      	cmp	r3, #3
 8005266:	d02d      	beq.n	80052c4 <RCCEx_PLLSAI1_Config+0xa0>
 8005268:	2b01      	cmp	r3, #1
 800526a:	d001      	beq.n	8005270 <RCCEx_PLLSAI1_Config+0x4c>
 800526c:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 800526e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005270:	4a42      	ldr	r2, [pc, #264]	@ (800537c <RCCEx_PLLSAI1_Config+0x158>)
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	f012 0f02 	tst.w	r2, #2
 8005278:	d063      	beq.n	8005342 <RCCEx_PLLSAI1_Config+0x11e>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800527a:	4840      	ldr	r0, [pc, #256]	@ (800537c <RCCEx_PLLSAI1_Config+0x158>)
 800527c:	68c2      	ldr	r2, [r0, #12]
 800527e:	6861      	ldr	r1, [r4, #4]
 8005280:	3901      	subs	r1, #1
 8005282:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8005286:	4313      	orrs	r3, r2
 8005288:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800528c:	60c3      	str	r3, [r0, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 800528e:	4a3b      	ldr	r2, [pc, #236]	@ (800537c <RCCEx_PLLSAI1_Config+0x158>)
 8005290:	6813      	ldr	r3, [r2, #0]
 8005292:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005296:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005298:	f7fe f91e 	bl	80034d8 <HAL_GetTick>
 800529c:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800529e:	4f37      	ldr	r7, [pc, #220]	@ (800537c <RCCEx_PLLSAI1_Config+0x158>)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 80052a6:	d055      	beq.n	8005354 <RCCEx_PLLSAI1_Config+0x130>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052a8:	f7fe f916 	bl	80034d8 <HAL_GetTick>
 80052ac:	1b83      	subs	r3, r0, r6
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d9f6      	bls.n	80052a0 <RCCEx_PLLSAI1_Config+0x7c>
        status = HAL_TIMEOUT;
 80052b2:	2003      	movs	r0, #3
 80052b4:	e7db      	b.n	800526e <RCCEx_PLLSAI1_Config+0x4a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052b6:	4a31      	ldr	r2, [pc, #196]	@ (800537c <RCCEx_PLLSAI1_Config+0x158>)
 80052b8:	6812      	ldr	r2, [r2, #0]
 80052ba:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 80052be:	d1dc      	bne.n	800527a <RCCEx_PLLSAI1_Config+0x56>
 80052c0:	2001      	movs	r0, #1
 80052c2:	e7d4      	b.n	800526e <RCCEx_PLLSAI1_Config+0x4a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052c4:	4a2d      	ldr	r2, [pc, #180]	@ (800537c <RCCEx_PLLSAI1_Config+0x158>)
 80052c6:	6812      	ldr	r2, [r2, #0]
 80052c8:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 80052cc:	d1d5      	bne.n	800527a <RCCEx_PLLSAI1_Config+0x56>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052ce:	4a2b      	ldr	r2, [pc, #172]	@ (800537c <RCCEx_PLLSAI1_Config+0x158>)
 80052d0:	6812      	ldr	r2, [r2, #0]
 80052d2:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80052d6:	d1d0      	bne.n	800527a <RCCEx_PLLSAI1_Config+0x56>
 80052d8:	2001      	movs	r0, #1
 80052da:	e7c8      	b.n	800526e <RCCEx_PLLSAI1_Config+0x4a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052dc:	4927      	ldr	r1, [pc, #156]	@ (800537c <RCCEx_PLLSAI1_Config+0x158>)
 80052de:	690a      	ldr	r2, [r1, #16]
 80052e0:	68a0      	ldr	r0, [r4, #8]
 80052e2:	68e3      	ldr	r3, [r4, #12]
 80052e4:	06db      	lsls	r3, r3, #27
 80052e6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80052ea:	f022 4278 	bic.w	r2, r2, #4160749568	@ 0xf8000000
 80052ee:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 80052f2:	4313      	orrs	r3, r2
 80052f4:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80052f6:	4a21      	ldr	r2, [pc, #132]	@ (800537c <RCCEx_PLLSAI1_Config+0x158>)
 80052f8:	6813      	ldr	r3, [r2, #0]
 80052fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80052fe:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005300:	f7fe f8ea 	bl	80034d8 <HAL_GetTick>
 8005304:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005306:	4e1d      	ldr	r6, [pc, #116]	@ (800537c <RCCEx_PLLSAI1_Config+0x158>)
 8005308:	6833      	ldr	r3, [r6, #0]
 800530a:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 800530e:	d11a      	bne.n	8005346 <RCCEx_PLLSAI1_Config+0x122>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005310:	f7fe f8e2 	bl	80034d8 <HAL_GetTick>
 8005314:	1b40      	subs	r0, r0, r5
 8005316:	2802      	cmp	r0, #2
 8005318:	d9f6      	bls.n	8005308 <RCCEx_PLLSAI1_Config+0xe4>
          status = HAL_TIMEOUT;
 800531a:	2003      	movs	r0, #3
 800531c:	e7a7      	b.n	800526e <RCCEx_PLLSAI1_Config+0x4a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800531e:	4917      	ldr	r1, [pc, #92]	@ (800537c <RCCEx_PLLSAI1_Config+0x158>)
 8005320:	690b      	ldr	r3, [r1, #16]
 8005322:	6922      	ldr	r2, [r4, #16]
 8005324:	0852      	lsrs	r2, r2, #1
 8005326:	3a01      	subs	r2, #1
 8005328:	68a0      	ldr	r0, [r4, #8]
 800532a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800532e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005332:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005336:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800533a:	610b      	str	r3, [r1, #16]
 800533c:	e7db      	b.n	80052f6 <RCCEx_PLLSAI1_Config+0xd2>
      status = HAL_ERROR;
 800533e:	2001      	movs	r0, #1
 8005340:	e795      	b.n	800526e <RCCEx_PLLSAI1_Config+0x4a>
 8005342:	2001      	movs	r0, #1
 8005344:	e793      	b.n	800526e <RCCEx_PLLSAI1_Config+0x4a>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005346:	4a0d      	ldr	r2, [pc, #52]	@ (800537c <RCCEx_PLLSAI1_Config+0x158>)
 8005348:	6913      	ldr	r3, [r2, #16]
 800534a:	69a1      	ldr	r1, [r4, #24]
 800534c:	430b      	orrs	r3, r1
 800534e:	6113      	str	r3, [r2, #16]
 8005350:	2000      	movs	r0, #0
  return status;
 8005352:	e78c      	b.n	800526e <RCCEx_PLLSAI1_Config+0x4a>
      if(Divider == DIVIDER_P_UPDATE)
 8005354:	2d00      	cmp	r5, #0
 8005356:	d0c1      	beq.n	80052dc <RCCEx_PLLSAI1_Config+0xb8>
      else if(Divider == DIVIDER_Q_UPDATE)
 8005358:	2d01      	cmp	r5, #1
 800535a:	d0e0      	beq.n	800531e <RCCEx_PLLSAI1_Config+0xfa>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800535c:	4907      	ldr	r1, [pc, #28]	@ (800537c <RCCEx_PLLSAI1_Config+0x158>)
 800535e:	690b      	ldr	r3, [r1, #16]
 8005360:	6962      	ldr	r2, [r4, #20]
 8005362:	0852      	lsrs	r2, r2, #1
 8005364:	3a01      	subs	r2, #1
 8005366:	68a0      	ldr	r0, [r4, #8]
 8005368:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800536c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005370:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005374:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005378:	610b      	str	r3, [r1, #16]
 800537a:	e7bc      	b.n	80052f6 <RCCEx_PLLSAI1_Config+0xd2>
 800537c:	40021000 	.word	0x40021000

08005380 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005382:	4604      	mov	r4, r0
 8005384:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005386:	4b4b      	ldr	r3, [pc, #300]	@ (80054b4 <RCCEx_PLLSAI2_Config+0x134>)
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f013 0f03 	tst.w	r3, #3
 800538e:	d014      	beq.n	80053ba <RCCEx_PLLSAI2_Config+0x3a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005390:	4b48      	ldr	r3, [pc, #288]	@ (80054b4 <RCCEx_PLLSAI2_Config+0x134>)
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	6802      	ldr	r2, [r0, #0]
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	4293      	cmp	r3, r2
 800539c:	d001      	beq.n	80053a2 <RCCEx_PLLSAI2_Config+0x22>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800539e:	2001      	movs	r0, #1
 80053a0:	e013      	b.n	80053ca <RCCEx_PLLSAI2_Config+0x4a>
       ||
 80053a2:	2a00      	cmp	r2, #0
 80053a4:	d069      	beq.n	800547a <RCCEx_PLLSAI2_Config+0xfa>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80053a6:	4b43      	ldr	r3, [pc, #268]	@ (80054b4 <RCCEx_PLLSAI2_Config+0x134>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80053ae:	3301      	adds	r3, #1
       ||
 80053b0:	6842      	ldr	r2, [r0, #4]
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d019      	beq.n	80053ea <RCCEx_PLLSAI2_Config+0x6a>
      status = HAL_ERROR;
 80053b6:	2001      	movs	r0, #1
 80053b8:	e007      	b.n	80053ca <RCCEx_PLLSAI2_Config+0x4a>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80053ba:	6803      	ldr	r3, [r0, #0]
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d028      	beq.n	8005412 <RCCEx_PLLSAI2_Config+0x92>
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d02d      	beq.n	8005420 <RCCEx_PLLSAI2_Config+0xa0>
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d001      	beq.n	80053cc <RCCEx_PLLSAI2_Config+0x4c>
 80053c8:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80053ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053cc:	4a39      	ldr	r2, [pc, #228]	@ (80054b4 <RCCEx_PLLSAI2_Config+0x134>)
 80053ce:	6812      	ldr	r2, [r2, #0]
 80053d0:	f012 0f02 	tst.w	r2, #2
 80053d4:	d053      	beq.n	800547e <RCCEx_PLLSAI2_Config+0xfe>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053d6:	4837      	ldr	r0, [pc, #220]	@ (80054b4 <RCCEx_PLLSAI2_Config+0x134>)
 80053d8:	68c2      	ldr	r2, [r0, #12]
 80053da:	6861      	ldr	r1, [r4, #4]
 80053dc:	3901      	subs	r1, #1
 80053de:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 80053e2:	4313      	orrs	r3, r2
 80053e4:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80053e8:	60c3      	str	r3, [r0, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 80053ea:	4a32      	ldr	r2, [pc, #200]	@ (80054b4 <RCCEx_PLLSAI2_Config+0x134>)
 80053ec:	6813      	ldr	r3, [r2, #0]
 80053ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053f2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80053f4:	f7fe f870 	bl	80034d8 <HAL_GetTick>
 80053f8:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053fa:	4f2e      	ldr	r7, [pc, #184]	@ (80054b4 <RCCEx_PLLSAI2_Config+0x134>)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8005402:	d045      	beq.n	8005490 <RCCEx_PLLSAI2_Config+0x110>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005404:	f7fe f868 	bl	80034d8 <HAL_GetTick>
 8005408:	1b83      	subs	r3, r0, r6
 800540a:	2b02      	cmp	r3, #2
 800540c:	d9f6      	bls.n	80053fc <RCCEx_PLLSAI2_Config+0x7c>
        status = HAL_TIMEOUT;
 800540e:	2003      	movs	r0, #3
 8005410:	e7db      	b.n	80053ca <RCCEx_PLLSAI2_Config+0x4a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005412:	4a28      	ldr	r2, [pc, #160]	@ (80054b4 <RCCEx_PLLSAI2_Config+0x134>)
 8005414:	6812      	ldr	r2, [r2, #0]
 8005416:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800541a:	d1dc      	bne.n	80053d6 <RCCEx_PLLSAI2_Config+0x56>
 800541c:	2001      	movs	r0, #1
 800541e:	e7d4      	b.n	80053ca <RCCEx_PLLSAI2_Config+0x4a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005420:	4a24      	ldr	r2, [pc, #144]	@ (80054b4 <RCCEx_PLLSAI2_Config+0x134>)
 8005422:	6812      	ldr	r2, [r2, #0]
 8005424:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8005428:	d1d5      	bne.n	80053d6 <RCCEx_PLLSAI2_Config+0x56>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800542a:	4a22      	ldr	r2, [pc, #136]	@ (80054b4 <RCCEx_PLLSAI2_Config+0x134>)
 800542c:	6812      	ldr	r2, [r2, #0]
 800542e:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8005432:	d1d0      	bne.n	80053d6 <RCCEx_PLLSAI2_Config+0x56>
 8005434:	2001      	movs	r0, #1
 8005436:	e7c8      	b.n	80053ca <RCCEx_PLLSAI2_Config+0x4a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005438:	491e      	ldr	r1, [pc, #120]	@ (80054b4 <RCCEx_PLLSAI2_Config+0x134>)
 800543a:	694a      	ldr	r2, [r1, #20]
 800543c:	68a0      	ldr	r0, [r4, #8]
 800543e:	68e3      	ldr	r3, [r4, #12]
 8005440:	06db      	lsls	r3, r3, #27
 8005442:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005446:	f022 4278 	bic.w	r2, r2, #4160749568	@ 0xf8000000
 800544a:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 800544e:	4313      	orrs	r3, r2
 8005450:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8005452:	4a18      	ldr	r2, [pc, #96]	@ (80054b4 <RCCEx_PLLSAI2_Config+0x134>)
 8005454:	6813      	ldr	r3, [r2, #0]
 8005456:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800545a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800545c:	f7fe f83c 	bl	80034d8 <HAL_GetTick>
 8005460:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005462:	4e14      	ldr	r6, [pc, #80]	@ (80054b4 <RCCEx_PLLSAI2_Config+0x134>)
 8005464:	6833      	ldr	r3, [r6, #0]
 8005466:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 800546a:	d10a      	bne.n	8005482 <RCCEx_PLLSAI2_Config+0x102>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800546c:	f7fe f834 	bl	80034d8 <HAL_GetTick>
 8005470:	1b40      	subs	r0, r0, r5
 8005472:	2802      	cmp	r0, #2
 8005474:	d9f6      	bls.n	8005464 <RCCEx_PLLSAI2_Config+0xe4>
          status = HAL_TIMEOUT;
 8005476:	2003      	movs	r0, #3
 8005478:	e7a7      	b.n	80053ca <RCCEx_PLLSAI2_Config+0x4a>
      status = HAL_ERROR;
 800547a:	2001      	movs	r0, #1
 800547c:	e7a5      	b.n	80053ca <RCCEx_PLLSAI2_Config+0x4a>
 800547e:	2001      	movs	r0, #1
 8005480:	e7a3      	b.n	80053ca <RCCEx_PLLSAI2_Config+0x4a>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005482:	4a0c      	ldr	r2, [pc, #48]	@ (80054b4 <RCCEx_PLLSAI2_Config+0x134>)
 8005484:	6953      	ldr	r3, [r2, #20]
 8005486:	6961      	ldr	r1, [r4, #20]
 8005488:	430b      	orrs	r3, r1
 800548a:	6153      	str	r3, [r2, #20]
 800548c:	2000      	movs	r0, #0
  return status;
 800548e:	e79c      	b.n	80053ca <RCCEx_PLLSAI2_Config+0x4a>
      if(Divider == DIVIDER_P_UPDATE)
 8005490:	2d00      	cmp	r5, #0
 8005492:	d0d1      	beq.n	8005438 <RCCEx_PLLSAI2_Config+0xb8>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005494:	4907      	ldr	r1, [pc, #28]	@ (80054b4 <RCCEx_PLLSAI2_Config+0x134>)
 8005496:	694b      	ldr	r3, [r1, #20]
 8005498:	6922      	ldr	r2, [r4, #16]
 800549a:	0852      	lsrs	r2, r2, #1
 800549c:	3a01      	subs	r2, #1
 800549e:	68a0      	ldr	r0, [r4, #8]
 80054a0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80054a4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80054a8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80054ac:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80054b0:	614b      	str	r3, [r1, #20]
 80054b2:	e7ce      	b.n	8005452 <RCCEx_PLLSAI2_Config+0xd2>
 80054b4:	40021000 	.word	0x40021000

080054b8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80054b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054bc:	b083      	sub	sp, #12
 80054be:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80054c0:	6803      	ldr	r3, [r0, #0]
 80054c2:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 80054c6:	d02d      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai1ClockSelection)
 80054c8:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80054ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054ce:	d01c      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80054d0:	d80b      	bhi.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x32>
 80054d2:	b303      	cbz	r3, 8005516 <HAL_RCCEx_PeriphCLKConfig+0x5e>
 80054d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054d8:	bf18      	it	ne
 80054da:	2601      	movne	r6, #1
 80054dc:	d123      	bne.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80054de:	2100      	movs	r1, #0
 80054e0:	3020      	adds	r0, #32
 80054e2:	f7ff ff4d 	bl	8005380 <RCCEx_PLLSAI2_Config>
 80054e6:	4606      	mov	r6, r0
      break;
 80054e8:	e01a      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x68>
    switch(PeriphClkInit->Sai1ClockSelection)
 80054ea:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80054ee:	d10a      	bne.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054f0:	4a29      	ldr	r2, [pc, #164]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xe0>)
 80054f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80054f6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80054fa:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 80054fc:	430b      	orrs	r3, r1
 80054fe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8005502:	2600      	movs	r6, #0
 8005504:	e00f      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005506:	2601      	movs	r6, #1
 8005508:	e00d      	b.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800550a:	4a23      	ldr	r2, [pc, #140]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xe0>)
 800550c:	68d3      	ldr	r3, [r2, #12]
 800550e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005512:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 8005514:	e7ec      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x38>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005516:	2100      	movs	r1, #0
 8005518:	3004      	adds	r0, #4
 800551a:	f7ff fe83 	bl	8005224 <RCCEx_PLLSAI1_Config>
 800551e:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8005520:	b90e      	cbnz	r6, 8005526 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005522:	e7e5      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x38>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005524:	2600      	movs	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 800552c:	d036      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    switch(PeriphClkInit->Sai2ClockSelection)
 800552e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8005530:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005534:	d023      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0xc6>
 8005536:	d80d      	bhi.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8005538:	b343      	cbz	r3, 800558c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800553a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800553e:	d106      	bne.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005540:	2100      	movs	r1, #0
 8005542:	f104 0020 	add.w	r0, r4, #32
 8005546:	f7ff ff1b 	bl	8005380 <RCCEx_PLLSAI2_Config>
 800554a:	4680      	mov	r8, r0
      break;
 800554c:	e006      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai2ClockSelection)
 800554e:	2601      	movs	r6, #1
 8005550:	46b0      	mov	r8, r6
 8005552:	e024      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8005554:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005558:	d10e      	bne.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800555a:	46b0      	mov	r8, r6
    if(ret == HAL_OK)
 800555c:	f1b8 0f00 	cmp.w	r8, #0
 8005560:	f040 815f 	bne.w	8005822 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005564:	4a0c      	ldr	r2, [pc, #48]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xe0>)
 8005566:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800556a:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800556e:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8005570:	430b      	orrs	r3, r1
 8005572:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8005576:	e012      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xe6>
    switch(PeriphClkInit->Sai2ClockSelection)
 8005578:	2601      	movs	r6, #1
 800557a:	46b0      	mov	r8, r6
 800557c:	e00f      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800557e:	4a06      	ldr	r2, [pc, #24]	@ (8005598 <HAL_RCCEx_PeriphCLKConfig+0xe0>)
 8005580:	68d3      	ldr	r3, [r2, #12]
 8005582:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005586:	60d3      	str	r3, [r2, #12]
      break;
 8005588:	46b0      	mov	r8, r6
 800558a:	e7e7      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xa4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800558c:	2100      	movs	r1, #0
 800558e:	1d20      	adds	r0, r4, #4
 8005590:	f7ff fe48 	bl	8005224 <RCCEx_PLLSAI1_Config>
 8005594:	4680      	mov	r8, r0
      break;
 8005596:	e7e1      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005598:	40021000 	.word	0x40021000
 800559c:	46b0      	mov	r8, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80055a4:	d029      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x142>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055a6:	4ba1      	ldr	r3, [pc, #644]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055aa:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80055ae:	f040 813a 	bne.w	8005826 <HAL_RCCEx_PeriphCLKConfig+0x36e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80055b2:	4b9e      	ldr	r3, [pc, #632]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80055b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80055b6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80055ba:	659a      	str	r2, [r3, #88]	@ 0x58
 80055bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055c2:	9301      	str	r3, [sp, #4]
 80055c4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80055c6:	f04f 0901 	mov.w	r9, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055ca:	4a99      	ldr	r2, [pc, #612]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80055cc:	6813      	ldr	r3, [r2, #0]
 80055ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055d2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80055d4:	f7fd ff80 	bl	80034d8 <HAL_GetTick>
 80055d8:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055da:	4f95      	ldr	r7, [pc, #596]	@ (8005830 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80055e2:	f040 8127 	bne.w	8005834 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e6:	f7fd ff77 	bl	80034d8 <HAL_GetTick>
 80055ea:	1b40      	subs	r0, r0, r5
 80055ec:	2802      	cmp	r0, #2
 80055ee:	d9f5      	bls.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x124>
        ret = HAL_TIMEOUT;
 80055f0:	2603      	movs	r6, #3
    if(pwrclkchanged == SET)
 80055f2:	f1b9 0f00 	cmp.w	r9, #0
 80055f6:	f040 815f 	bne.w	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x400>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	f013 0f01 	tst.w	r3, #1
 8005600:	d008      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005602:	4a8a      	ldr	r2, [pc, #552]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005604:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8005608:	f023 0303 	bic.w	r3, r3, #3
 800560c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800560e:	430b      	orrs	r3, r1
 8005610:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	f013 0f02 	tst.w	r3, #2
 800561a:	d008      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800561c:	4a83      	ldr	r2, [pc, #524]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800561e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8005622:	f023 030c 	bic.w	r3, r3, #12
 8005626:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8005628:	430b      	orrs	r3, r1
 800562a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800562e:	6823      	ldr	r3, [r4, #0]
 8005630:	f013 0f04 	tst.w	r3, #4
 8005634:	d008      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x190>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005636:	4a7d      	ldr	r2, [pc, #500]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005638:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800563c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005640:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8005642:	430b      	orrs	r3, r1
 8005644:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005648:	6823      	ldr	r3, [r4, #0]
 800564a:	f013 0f08 	tst.w	r3, #8
 800564e:	d008      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005650:	4a76      	ldr	r2, [pc, #472]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005652:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8005656:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800565a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800565c:	430b      	orrs	r3, r1
 800565e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	f013 0f10 	tst.w	r3, #16
 8005668:	d008      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800566a:	4a70      	ldr	r2, [pc, #448]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800566c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8005670:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005674:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005676:	430b      	orrs	r3, r1
 8005678:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	f013 0f20 	tst.w	r3, #32
 8005682:	d008      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005684:	4a69      	ldr	r2, [pc, #420]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005686:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800568a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800568e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8005690:	430b      	orrs	r3, r1
 8005692:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005696:	6823      	ldr	r3, [r4, #0]
 8005698:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800569c:	d008      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800569e:	4a63      	ldr	r2, [pc, #396]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056a0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80056a4:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80056a8:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 80056aa:	430b      	orrs	r3, r1
 80056ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80056b6:	d008      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80056b8:	4a5c      	ldr	r2, [pc, #368]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80056be:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80056c2:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80056c4:	430b      	orrs	r3, r1
 80056c6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80056d0:	d008      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056d2:	4a56      	ldr	r2, [pc, #344]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056d4:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80056d8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80056dc:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80056de:	430b      	orrs	r3, r1
 80056e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80056ea:	d008      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x246>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056ec:	4a4f      	ldr	r2, [pc, #316]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056ee:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80056f2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80056f6:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 80056f8:	430b      	orrs	r3, r1
 80056fa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8005704:	d008      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x260>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005706:	4a49      	ldr	r2, [pc, #292]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005708:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800570c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005710:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8005712:	430b      	orrs	r3, r1
 8005714:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800571e:	d008      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005720:	4a42      	ldr	r2, [pc, #264]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005722:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8005726:	f023 0303 	bic.w	r3, r3, #3
 800572a:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 800572c:	430b      	orrs	r3, r1
 800572e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8005738:	d011      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800573a:	4a3c      	ldr	r2, [pc, #240]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800573c:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8005740:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8005744:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8005746:	430b      	orrs	r3, r1
 8005748:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800574c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800574e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005752:	f000 80b7 	beq.w	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005756:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800575a:	f000 80b8 	beq.w	80058ce <HAL_RCCEx_PeriphCLKConfig+0x416>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8005764:	d011      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005766:	4a31      	ldr	r2, [pc, #196]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005768:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800576c:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8005770:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8005772:	430b      	orrs	r3, r1
 8005774:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005778:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800577a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800577e:	f000 80ae 	beq.w	80058de <HAL_RCCEx_PeriphCLKConfig+0x426>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005782:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005786:	f000 80af 	beq.w	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x430>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 8005790:	d011      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005792:	4a26      	ldr	r2, [pc, #152]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005794:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8005798:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800579c:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 800579e:	430b      	orrs	r3, r1
 80057a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057a4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80057a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057aa:	f000 80a5 	beq.w	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x440>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80057b2:	f000 80a6 	beq.w	8005902 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 80057bc:	d011      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057be:	4a1b      	ldr	r2, [pc, #108]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057c0:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80057c4:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80057c8:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 80057ca:	430b      	orrs	r3, r1
 80057cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057d0:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 80057d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057d6:	f000 809c 	beq.w	8005912 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80057da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057de:	f000 80a0 	beq.w	8005922 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	f413 4f00 	tst.w	r3, #32768	@ 0x8000
 80057e8:	d009      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x346>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057ea:	4a10      	ldr	r2, [pc, #64]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80057ec:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80057f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80057f4:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 80057f8:	430b      	orrs	r3, r1
 80057fa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057fe:	6823      	ldr	r3, [r4, #0]
 8005800:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8005804:	d009      	beq.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x362>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005806:	4a09      	ldr	r2, [pc, #36]	@ (800582c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005808:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800580c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005810:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 8005814:	430b      	orrs	r3, r1
 8005816:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 800581a:	4630      	mov	r0, r6
 800581c:	b003      	add	sp, #12
 800581e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005822:	4646      	mov	r6, r8
 8005824:	e6bb      	b.n	800559e <HAL_RCCEx_PeriphCLKConfig+0xe6>
    FlagStatus       pwrclkchanged = RESET;
 8005826:	f04f 0900 	mov.w	r9, #0
 800582a:	e6ce      	b.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x112>
 800582c:	40021000 	.word	0x40021000
 8005830:	40007000 	.word	0x40007000
    if(ret == HAL_OK)
 8005834:	f1b8 0f00 	cmp.w	r8, #0
 8005838:	d13c      	bne.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800583a:	4b3e      	ldr	r3, [pc, #248]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x47c>)
 800583c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005840:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005844:	d02b      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8005846:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 800584a:	429a      	cmp	r2, r3
 800584c:	d012      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800584e:	4a39      	ldr	r2, [pc, #228]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x47c>)
 8005850:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005854:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8005858:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 800585c:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8005860:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005864:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 8005868:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800586c:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 8005870:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005874:	f013 0f01 	tst.w	r3, #1
 8005878:	d011      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        tickstart = HAL_GetTick();
 800587a:	f7fd fe2d 	bl	80034d8 <HAL_GetTick>
 800587e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005880:	4f2c      	ldr	r7, [pc, #176]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x47c>)
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005882:	f241 3888 	movw	r8, #5000	@ 0x1388
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005886:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800588a:	f013 0f02 	tst.w	r3, #2
 800588e:	d106      	bne.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005890:	f7fd fe22 	bl	80034d8 <HAL_GetTick>
 8005894:	1b40      	subs	r0, r0, r5
 8005896:	4540      	cmp	r0, r8
 8005898:	d9f5      	bls.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
            ret = HAL_TIMEOUT;
 800589a:	2603      	movs	r6, #3
 800589c:	e6a9      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800589e:	4a25      	ldr	r2, [pc, #148]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x47c>)
 80058a0:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80058a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058a8:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 80058ac:	430b      	orrs	r3, r1
 80058ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80058b2:	e69e      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
 80058b4:	4646      	mov	r6, r8
 80058b6:	e69c      	b.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80058b8:	4a1e      	ldr	r2, [pc, #120]	@ (8005934 <HAL_RCCEx_PeriphCLKConfig+0x47c>)
 80058ba:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80058bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80058c2:	e69a      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x142>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058c4:	68d3      	ldr	r3, [r2, #12]
 80058c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058ca:	60d3      	str	r3, [r2, #12]
 80058cc:	e747      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058ce:	2101      	movs	r1, #1
 80058d0:	1d20      	adds	r0, r4, #4
 80058d2:	f7ff fca7 	bl	8005224 <RCCEx_PLLSAI1_Config>
          status = ret;
 80058d6:	2800      	cmp	r0, #0
 80058d8:	bf18      	it	ne
 80058da:	4606      	movne	r6, r0
 80058dc:	e73f      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058de:	68d3      	ldr	r3, [r2, #12]
 80058e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058e4:	60d3      	str	r3, [r2, #12]
 80058e6:	e750      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058e8:	2101      	movs	r1, #1
 80058ea:	1d20      	adds	r0, r4, #4
 80058ec:	f7ff fc9a 	bl	8005224 <RCCEx_PLLSAI1_Config>
        status = ret;
 80058f0:	2800      	cmp	r0, #0
 80058f2:	bf18      	it	ne
 80058f4:	4606      	movne	r6, r0
 80058f6:	e748      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058f8:	68d3      	ldr	r3, [r2, #12]
 80058fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058fe:	60d3      	str	r3, [r2, #12]
 8005900:	e759      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005902:	2101      	movs	r1, #1
 8005904:	1d20      	adds	r0, r4, #4
 8005906:	f7ff fc8d 	bl	8005224 <RCCEx_PLLSAI1_Config>
        status = ret;
 800590a:	2800      	cmp	r0, #0
 800590c:	bf18      	it	ne
 800590e:	4606      	movne	r6, r0
 8005910:	e751      	b.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005912:	2102      	movs	r1, #2
 8005914:	1d20      	adds	r0, r4, #4
 8005916:	f7ff fc85 	bl	8005224 <RCCEx_PLLSAI1_Config>
        status = ret;
 800591a:	2800      	cmp	r0, #0
 800591c:	bf18      	it	ne
 800591e:	4606      	movne	r6, r0
 8005920:	e75f      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005922:	2102      	movs	r1, #2
 8005924:	f104 0020 	add.w	r0, r4, #32
 8005928:	f7ff fd2a 	bl	8005380 <RCCEx_PLLSAI2_Config>
        status = ret;
 800592c:	2800      	cmp	r0, #0
 800592e:	bf18      	it	ne
 8005930:	4606      	movne	r6, r0
 8005932:	e756      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8005934:	40021000 	.word	0x40021000

08005938 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800593c:	b082      	sub	sp, #8
 800593e:	4681      	mov	r9, r0
 8005940:	460f      	mov	r7, r1
 8005942:	4616      	mov	r6, r2
 8005944:	461d      	mov	r5, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005946:	f7fd fdc7 	bl	80034d8 <HAL_GetTick>
 800594a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800594c:	442b      	add	r3, r5
 800594e:	eba3 0800 	sub.w	r8, r3, r0
  tmp_tickstart = HAL_GetTick();
 8005952:	f7fd fdc1 	bl	80034d8 <HAL_GetTick>
 8005956:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005958:	4b2c      	ldr	r3, [pc, #176]	@ (8005a0c <SPI_WaitFlagStateUntilTimeout+0xd4>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005960:	fb08 f303 	mul.w	r3, r8, r3
 8005964:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005966:	f8d9 2000 	ldr.w	r2, [r9]
 800596a:	6894      	ldr	r4, [r2, #8]
 800596c:	ea37 0404 	bics.w	r4, r7, r4
 8005970:	bf0c      	ite	eq
 8005972:	2301      	moveq	r3, #1
 8005974:	2300      	movne	r3, #0
 8005976:	42b3      	cmp	r3, r6
 8005978:	d044      	beq.n	8005a04 <SPI_WaitFlagStateUntilTimeout+0xcc>
  {
    if (Timeout != HAL_MAX_DELAY)
 800597a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800597e:	d0f4      	beq.n	800596a <SPI_WaitFlagStateUntilTimeout+0x32>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005980:	f7fd fdaa 	bl	80034d8 <HAL_GetTick>
 8005984:	eba0 000a 	sub.w	r0, r0, sl
 8005988:	4540      	cmp	r0, r8
 800598a:	d207      	bcs.n	800599c <SPI_WaitFlagStateUntilTimeout+0x64>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800598c:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 800598e:	2b00      	cmp	r3, #0
 8005990:	bf08      	it	eq
 8005992:	4698      	moveq	r8, r3
      }
      count--;
 8005994:	9b01      	ldr	r3, [sp, #4]
 8005996:	3b01      	subs	r3, #1
 8005998:	9301      	str	r3, [sp, #4]
 800599a:	e7e4      	b.n	8005966 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800599c:	f8d9 2000 	ldr.w	r2, [r9]
 80059a0:	6853      	ldr	r3, [r2, #4]
 80059a2:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80059a6:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059a8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80059ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80059b0:	d00c      	beq.n	80059cc <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059b2:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 80059b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059ba:	d016      	beq.n	80059ea <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 80059bc:	2301      	movs	r3, #1
 80059be:	f889 305d 	strb.w	r3, [r9, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80059c2:	2300      	movs	r3, #0
 80059c4:	f889 305c 	strb.w	r3, [r9, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80059c8:	2003      	movs	r0, #3
 80059ca:	e01c      	b.n	8005a06 <SPI_WaitFlagStateUntilTimeout+0xce>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059cc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80059d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059d4:	d002      	beq.n	80059dc <SPI_WaitFlagStateUntilTimeout+0xa4>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059da:	d1ea      	bne.n	80059b2 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 80059dc:	f8d9 2000 	ldr.w	r2, [r9]
 80059e0:	6813      	ldr	r3, [r2, #0]
 80059e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	e7e3      	b.n	80059b2 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 80059ea:	f8d9 2000 	ldr.w	r2, [r9]
 80059ee:	6813      	ldr	r3, [r2, #0]
 80059f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	f8d9 2000 	ldr.w	r2, [r9]
 80059fa:	6813      	ldr	r3, [r2, #0]
 80059fc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	e7db      	b.n	80059bc <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 8005a04:	2000      	movs	r0, #0
}
 8005a06:	b002      	add	sp, #8
 8005a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a0c:	20002f78 	.word	0x20002f78

08005a10 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a14:	b082      	sub	sp, #8
 8005a16:	4680      	mov	r8, r0
 8005a18:	460c      	mov	r4, r1
 8005a1a:	4615      	mov	r5, r2
 8005a1c:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f88d 3003 	strb.w	r3, [sp, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005a24:	f7fd fd58 	bl	80034d8 <HAL_GetTick>
 8005a28:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8005a2a:	4437      	add	r7, r6
 8005a2c:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8005a2e:	f7fd fd53 	bl	80034d8 <HAL_GetTick>
 8005a32:	4681      	mov	r9, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005a34:	f8d8 a000 	ldr.w	sl, [r8]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a38:	4b33      	ldr	r3, [pc, #204]	@ (8005b08 <SPI_WaitFifoStateUntilTimeout+0xf8>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005a40:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005a44:	0d1b      	lsrs	r3, r3, #20
 8005a46:	fb07 f303 	mul.w	r3, r7, r3
 8005a4a:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8005a4c:	f8d8 2000 	ldr.w	r2, [r8]
 8005a50:	e002      	b.n	8005a58 <SPI_WaitFifoStateUntilTimeout+0x48>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8005a52:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005a56:	d111      	bne.n	8005a7c <SPI_WaitFifoStateUntilTimeout+0x6c>
  while ((hspi->Instance->SR & Fifo) != State)
 8005a58:	6893      	ldr	r3, [r2, #8]
 8005a5a:	ea03 0c04 	and.w	ip, r3, r4
 8005a5e:	45ac      	cmp	ip, r5
 8005a60:	d04e      	beq.n	8005b00 <SPI_WaitFifoStateUntilTimeout+0xf0>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005a62:	f5b4 6fc0 	cmp.w	r4, #1536	@ 0x600
 8005a66:	d1f4      	bne.n	8005a52 <SPI_WaitFifoStateUntilTimeout+0x42>
 8005a68:	2d00      	cmp	r5, #0
 8005a6a:	d1f2      	bne.n	8005a52 <SPI_WaitFifoStateUntilTimeout+0x42>
      tmpreg8 = *ptmpreg8;
 8005a6c:	f89a 300c 	ldrb.w	r3, [sl, #12]
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8005a76:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005a7a:	e7ea      	b.n	8005a52 <SPI_WaitFifoStateUntilTimeout+0x42>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a7c:	f7fd fd2c 	bl	80034d8 <HAL_GetTick>
 8005a80:	eba0 0009 	sub.w	r0, r0, r9
 8005a84:	42b8      	cmp	r0, r7
 8005a86:	d207      	bcs.n	8005a98 <SPI_WaitFifoStateUntilTimeout+0x88>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a88:	9b01      	ldr	r3, [sp, #4]
      {
        tmp_timeout = 0U;
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	bf08      	it	eq
 8005a8e:	461f      	moveq	r7, r3
      }
      count--;
 8005a90:	9b01      	ldr	r3, [sp, #4]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	9301      	str	r3, [sp, #4]
 8005a96:	e7d9      	b.n	8005a4c <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a98:	f8d8 2000 	ldr.w	r2, [r8]
 8005a9c:	6853      	ldr	r3, [r2, #4]
 8005a9e:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8005aa2:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aa4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005aa8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005aac:	d00c      	beq.n	8005ac8 <SPI_WaitFifoStateUntilTimeout+0xb8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005aae:	f8d8 3028 	ldr.w	r3, [r8, #40]	@ 0x28
 8005ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ab6:	d016      	beq.n	8005ae6 <SPI_WaitFifoStateUntilTimeout+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	f888 305d 	strb.w	r3, [r8, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f888 305c 	strb.w	r3, [r8, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005ac4:	2003      	movs	r0, #3
 8005ac6:	e01c      	b.n	8005b02 <SPI_WaitFifoStateUntilTimeout+0xf2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ac8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005acc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ad0:	d002      	beq.n	8005ad8 <SPI_WaitFifoStateUntilTimeout+0xc8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ad6:	d1ea      	bne.n	8005aae <SPI_WaitFifoStateUntilTimeout+0x9e>
          __HAL_SPI_DISABLE(hspi);
 8005ad8:	f8d8 2000 	ldr.w	r2, [r8]
 8005adc:	6813      	ldr	r3, [r2, #0]
 8005ade:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ae2:	6013      	str	r3, [r2, #0]
 8005ae4:	e7e3      	b.n	8005aae <SPI_WaitFifoStateUntilTimeout+0x9e>
          SPI_RESET_CRC(hspi);
 8005ae6:	f8d8 2000 	ldr.w	r2, [r8]
 8005aea:	6813      	ldr	r3, [r2, #0]
 8005aec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	f8d8 2000 	ldr.w	r2, [r8]
 8005af6:	6813      	ldr	r3, [r2, #0]
 8005af8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	e7db      	b.n	8005ab8 <SPI_WaitFifoStateUntilTimeout+0xa8>
    }
  }

  return HAL_OK;
 8005b00:	2000      	movs	r0, #0
}
 8005b02:	b002      	add	sp, #8
 8005b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b08:	20002f78 	.word	0x20002f78

08005b0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b0c:	b570      	push	{r4, r5, r6, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	4604      	mov	r4, r0
 8005b12:	460d      	mov	r5, r1
 8005b14:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b16:	9200      	str	r2, [sp, #0]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005b20:	f7ff ff76 	bl	8005a10 <SPI_WaitFifoStateUntilTimeout>
 8005b24:	b9b0      	cbnz	r0, 8005b54 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b26:	9600      	str	r6, [sp, #0]
 8005b28:	462b      	mov	r3, r5
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	2180      	movs	r1, #128	@ 0x80
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f7ff ff02 	bl	8005938 <SPI_WaitFlagStateUntilTimeout>
 8005b34:	b9a8      	cbnz	r0, 8005b62 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b36:	9600      	str	r6, [sp, #0]
 8005b38:	462b      	mov	r3, r5
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005b40:	4620      	mov	r0, r4
 8005b42:	f7ff ff65 	bl	8005a10 <SPI_WaitFifoStateUntilTimeout>
 8005b46:	b150      	cbz	r0, 8005b5e <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b48:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005b4a:	f043 0320 	orr.w	r3, r3, #32
 8005b4e:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005b50:	2003      	movs	r0, #3
 8005b52:	e004      	b.n	8005b5e <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b54:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005b56:	f043 0320 	orr.w	r3, r3, #32
 8005b5a:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005b5c:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 8005b5e:	b002      	add	sp, #8
 8005b60:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b62:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005b64:	f043 0320 	orr.w	r3, r3, #32
 8005b68:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005b6a:	2003      	movs	r0, #3
 8005b6c:	e7f7      	b.n	8005b5e <SPI_EndRxTxTransaction+0x52>

08005b6e <HAL_SPI_Init>:
  if (hspi == NULL)
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	d068      	beq.n	8005c44 <HAL_SPI_Init+0xd6>
{
 8005b72:	b510      	push	{r4, lr}
 8005b74:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b76:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8005b78:	b933      	cbnz	r3, 8005b88 <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b7a:	6843      	ldr	r3, [r0, #4]
 8005b7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b80:	d005      	beq.n	8005b8e <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b82:	2300      	movs	r3, #0
 8005b84:	61c3      	str	r3, [r0, #28]
 8005b86:	e002      	b.n	8005b8e <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b8c:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b92:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d04e      	beq.n	8005c38 <HAL_SPI_Init+0xca>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005ba0:	6822      	ldr	r2, [r4, #0]
 8005ba2:	6813      	ldr	r3, [r2, #0]
 8005ba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ba8:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005baa:	68e3      	ldr	r3, [r4, #12]
 8005bac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005bb0:	bf8c      	ite	hi
 8005bb2:	2100      	movhi	r1, #0
 8005bb4:	2101      	movls	r1, #1
 8005bb6:	0309      	lsls	r1, r1, #12
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005bb8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bbc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bc0:	bf1c      	itt	ne
 8005bc2:	2300      	movne	r3, #0
 8005bc4:	62a3      	strne	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bc6:	6822      	ldr	r2, [r4, #0]
 8005bc8:	6863      	ldr	r3, [r4, #4]
 8005bca:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8005bce:	68a0      	ldr	r0, [r4, #8]
 8005bd0:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 8005bd4:	4303      	orrs	r3, r0
 8005bd6:	6920      	ldr	r0, [r4, #16]
 8005bd8:	f000 0002 	and.w	r0, r0, #2
 8005bdc:	4303      	orrs	r3, r0
 8005bde:	6960      	ldr	r0, [r4, #20]
 8005be0:	f000 0001 	and.w	r0, r0, #1
 8005be4:	4303      	orrs	r3, r0
 8005be6:	69a0      	ldr	r0, [r4, #24]
 8005be8:	f400 7000 	and.w	r0, r0, #512	@ 0x200
 8005bec:	4303      	orrs	r3, r0
 8005bee:	69e0      	ldr	r0, [r4, #28]
 8005bf0:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8005bf4:	4303      	orrs	r3, r0
 8005bf6:	6a20      	ldr	r0, [r4, #32]
 8005bf8:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 8005bfc:	4303      	orrs	r3, r0
 8005bfe:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005c00:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 8005c04:	4303      	orrs	r3, r0
 8005c06:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c08:	6822      	ldr	r2, [r4, #0]
 8005c0a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005c0c:	f003 0310 	and.w	r3, r3, #16
 8005c10:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8005c12:	f000 0008 	and.w	r0, r0, #8
 8005c16:	4303      	orrs	r3, r0
 8005c18:	68e0      	ldr	r0, [r4, #12]
 8005c1a:	f400 6070 	and.w	r0, r0, #3840	@ 0xf00
 8005c1e:	4303      	orrs	r3, r0
 8005c20:	8b60      	ldrh	r0, [r4, #26]
 8005c22:	f000 0004 	and.w	r0, r0, #4
 8005c26:	4303      	orrs	r3, r0
 8005c28:	430b      	orrs	r3, r1
 8005c2a:	6053      	str	r3, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c30:	2301      	movs	r3, #1
 8005c32:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8005c36:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8005c38:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f7fd fa15 	bl	800306c <HAL_SPI_MspInit>
 8005c42:	e7aa      	b.n	8005b9a <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 8005c44:	2001      	movs	r0, #1
}
 8005c46:	4770      	bx	lr

08005c48 <HAL_SPI_TransmitReceive>:
{
 8005c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c4c:	4604      	mov	r4, r0
 8005c4e:	4688      	mov	r8, r1
 8005c50:	4691      	mov	r9, r2
 8005c52:	461f      	mov	r7, r3
 8005c54:	9d08      	ldr	r5, [sp, #32]
  tickstart = HAL_GetTick();
 8005c56:	f7fd fc3f 	bl	80034d8 <HAL_GetTick>
 8005c5a:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8005c5c:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8005c60:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8005c62:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d00a      	beq.n	8005c7e <HAL_SPI_TransmitReceive+0x36>
 8005c68:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8005c6c:	f040 8156 	bne.w	8005f1c <HAL_SPI_TransmitReceive+0x2d4>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005c70:	68a2      	ldr	r2, [r4, #8]
 8005c72:	2a00      	cmp	r2, #0
 8005c74:	f040 8155 	bne.w	8005f22 <HAL_SPI_TransmitReceive+0x2da>
 8005c78:	2b04      	cmp	r3, #4
 8005c7a:	f040 8154 	bne.w	8005f26 <HAL_SPI_TransmitReceive+0x2de>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c7e:	f1b8 0f00 	cmp.w	r8, #0
 8005c82:	f000 8152 	beq.w	8005f2a <HAL_SPI_TransmitReceive+0x2e2>
 8005c86:	f1b9 0f00 	cmp.w	r9, #0
 8005c8a:	f000 8150 	beq.w	8005f2e <HAL_SPI_TransmitReceive+0x2e6>
 8005c8e:	2f00      	cmp	r7, #0
 8005c90:	f000 814f 	beq.w	8005f32 <HAL_SPI_TransmitReceive+0x2ea>
  __HAL_LOCK(hspi);
 8005c94:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	f000 814c 	beq.w	8005f36 <HAL_SPI_TransmitReceive+0x2ee>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ca4:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005cac:	bf1c      	itt	ne
 8005cae:	2305      	movne	r3, #5
 8005cb0:	f884 305d 	strbne.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cb8:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005cbc:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8005cc0:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005cc4:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005cc8:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005cca:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->RxISR       = NULL;
 8005ccc:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005cce:	6523      	str	r3, [r4, #80]	@ 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005cd0:	68e3      	ldr	r3, [r4, #12]
 8005cd2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cd6:	d801      	bhi.n	8005cdc <HAL_SPI_TransmitReceive+0x94>
 8005cd8:	2f01      	cmp	r7, #1
 8005cda:	d924      	bls.n	8005d26 <HAL_SPI_TransmitReceive+0xde>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cdc:	6822      	ldr	r2, [r4, #0]
 8005cde:	6853      	ldr	r3, [r2, #4]
 8005ce0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ce4:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8005cee:	d103      	bne.n	8005cf8 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005cf6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cf8:	68e3      	ldr	r3, [r4, #12]
 8005cfa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005cfe:	d95e      	bls.n	8005dbe <HAL_SPI_TransmitReceive+0x176>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d00:	6863      	ldr	r3, [r4, #4]
 8005d02:	b10b      	cbz	r3, 8005d08 <HAL_SPI_TransmitReceive+0xc0>
 8005d04:	2f01      	cmp	r7, #1
 8005d06:	d10a      	bne.n	8005d1e <HAL_SPI_TransmitReceive+0xd6>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005d0c:	8812      	ldrh	r2, [r2, #0]
 8005d0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d10:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005d12:	3302      	adds	r3, #2
 8005d14:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8005d16:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8005d1e:	2701      	movs	r7, #1
        txallowed = 0U;
 8005d20:	f04f 0800 	mov.w	r8, #0
 8005d24:	e02e      	b.n	8005d84 <HAL_SPI_TransmitReceive+0x13c>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d26:	6822      	ldr	r2, [r4, #0]
 8005d28:	6853      	ldr	r3, [r2, #4]
 8005d2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005d2e:	6053      	str	r3, [r2, #4]
 8005d30:	e7d9      	b.n	8005ce6 <HAL_SPI_TransmitReceive+0x9e>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d32:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005d34:	8812      	ldrh	r2, [r2, #0]
 8005d36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d38:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005d3a:	3302      	adds	r3, #2
 8005d3c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005d3e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005d40:	3b01      	subs	r3, #1
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8005d46:	4647      	mov	r7, r8
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d48:	6822      	ldr	r2, [r4, #0]
 8005d4a:	6893      	ldr	r3, [r2, #8]
 8005d4c:	f013 0301 	ands.w	r3, r3, #1
 8005d50:	d010      	beq.n	8005d74 <HAL_SPI_TransmitReceive+0x12c>
 8005d52:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8005d56:	b289      	uxth	r1, r1
 8005d58:	b161      	cbz	r1, 8005d74 <HAL_SPI_TransmitReceive+0x12c>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d5a:	68d1      	ldr	r1, [r2, #12]
 8005d5c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005d5e:	8011      	strh	r1, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d60:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005d62:	3202      	adds	r2, #2
 8005d64:	6422      	str	r2, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8005d66:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8005d6a:	3a01      	subs	r2, #1
 8005d6c:	b292      	uxth	r2, r2
 8005d6e:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
        txallowed = 1U;
 8005d72:	461f      	mov	r7, r3
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d74:	f7fd fbb0 	bl	80034d8 <HAL_GetTick>
 8005d78:	1b83      	subs	r3, r0, r6
 8005d7a:	42ab      	cmp	r3, r5
 8005d7c:	d302      	bcc.n	8005d84 <HAL_SPI_TransmitReceive+0x13c>
 8005d7e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005d82:	d114      	bne.n	8005dae <HAL_SPI_TransmitReceive+0x166>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d84:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	b92b      	cbnz	r3, 8005d96 <HAL_SPI_TransmitReceive+0x14e>
 8005d8a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 80ab 	beq.w	8005eec <HAL_SPI_TransmitReceive+0x2a4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	f012 0f02 	tst.w	r2, #2
 8005d9e:	d0d3      	beq.n	8005d48 <HAL_SPI_TransmitReceive+0x100>
 8005da0:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8005da2:	b292      	uxth	r2, r2
 8005da4:	2a00      	cmp	r2, #0
 8005da6:	d0cf      	beq.n	8005d48 <HAL_SPI_TransmitReceive+0x100>
 8005da8:	2f01      	cmp	r7, #1
 8005daa:	d1cd      	bne.n	8005d48 <HAL_SPI_TransmitReceive+0x100>
 8005dac:	e7c1      	b.n	8005d32 <HAL_SPI_TransmitReceive+0xea>
        hspi->State = HAL_SPI_STATE_READY;
 8005dae:	2301      	movs	r3, #1
 8005db0:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005db4:	2300      	movs	r3, #0
 8005db6:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005dba:	2003      	movs	r0, #3
 8005dbc:	e0af      	b.n	8005f1e <HAL_SPI_TransmitReceive+0x2d6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dbe:	6863      	ldr	r3, [r4, #4]
 8005dc0:	b10b      	cbz	r3, 8005dc6 <HAL_SPI_TransmitReceive+0x17e>
 8005dc2:	2f01      	cmp	r7, #1
 8005dc4:	d10e      	bne.n	8005de4 <HAL_SPI_TransmitReceive+0x19c>
      if (hspi->TxXferCount > 1U)
 8005dc6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d90c      	bls.n	8005de8 <HAL_SPI_TransmitReceive+0x1a0>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005dd2:	8812      	ldrh	r2, [r2, #0]
 8005dd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dd6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005dd8:	3302      	adds	r3, #2
 8005dda:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005ddc:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005dde:	3b02      	subs	r3, #2
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8005de4:	2701      	movs	r7, #1
 8005de6:	e043      	b.n	8005e70 <HAL_SPI_TransmitReceive+0x228>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005de8:	6823      	ldr	r3, [r4, #0]
 8005dea:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005dec:	7812      	ldrb	r2, [r2, #0]
 8005dee:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8005df0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005df2:	3301      	adds	r3, #1
 8005df4:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005df6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8005dfe:	e7f1      	b.n	8005de4 <HAL_SPI_TransmitReceive+0x19c>
        if (hspi->TxXferCount > 1U)
 8005e00:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8005e02:	b292      	uxth	r2, r2
 8005e04:	2a01      	cmp	r2, #1
 8005e06:	d90b      	bls.n	8005e20 <HAL_SPI_TransmitReceive+0x1d8>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e08:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005e0a:	8812      	ldrh	r2, [r2, #0]
 8005e0c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e0e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005e10:	3302      	adds	r3, #2
 8005e12:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005e14:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005e16:	3b02      	subs	r3, #2
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8005e1c:	2700      	movs	r7, #0
 8005e1e:	e039      	b.n	8005e94 <HAL_SPI_TransmitReceive+0x24c>
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e20:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005e22:	7812      	ldrb	r2, [r2, #0]
 8005e24:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 8005e26:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005e28:	3301      	adds	r3, #1
 8005e2a:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8005e2c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8005e34:	2700      	movs	r7, #0
 8005e36:	e02d      	b.n	8005e94 <HAL_SPI_TransmitReceive+0x24c>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e38:	6821      	ldr	r1, [r4, #0]
 8005e3a:	684a      	ldr	r2, [r1, #4]
 8005e3c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e40:	604a      	str	r2, [r1, #4]
        txallowed = 1U;
 8005e42:	461f      	mov	r7, r3
 8005e44:	e00c      	b.n	8005e60 <HAL_SPI_TransmitReceive+0x218>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e46:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8005e48:	7b12      	ldrb	r2, [r2, #12]
 8005e4a:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 8005e4c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005e4e:	3201      	adds	r2, #1
 8005e50:	6422      	str	r2, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8005e52:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8005e56:	3a01      	subs	r2, #1
 8005e58:	b292      	uxth	r2, r2
 8005e5a:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
        txallowed = 1U;
 8005e5e:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e60:	f7fd fb3a 	bl	80034d8 <HAL_GetTick>
 8005e64:	1b80      	subs	r0, r0, r6
 8005e66:	42a8      	cmp	r0, r5
 8005e68:	d336      	bcc.n	8005ed8 <HAL_SPI_TransmitReceive+0x290>
 8005e6a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005e6e:	d135      	bne.n	8005edc <HAL_SPI_TransmitReceive+0x294>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e70:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	b923      	cbnz	r3, 8005e80 <HAL_SPI_TransmitReceive+0x238>
 8005e76:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d035      	beq.n	8005eec <HAL_SPI_TransmitReceive+0x2a4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	f012 0f02 	tst.w	r2, #2
 8005e88:	d004      	beq.n	8005e94 <HAL_SPI_TransmitReceive+0x24c>
 8005e8a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8005e8c:	b292      	uxth	r2, r2
 8005e8e:	b10a      	cbz	r2, 8005e94 <HAL_SPI_TransmitReceive+0x24c>
 8005e90:	2f00      	cmp	r7, #0
 8005e92:	d1b5      	bne.n	8005e00 <HAL_SPI_TransmitReceive+0x1b8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e94:	6822      	ldr	r2, [r4, #0]
 8005e96:	6893      	ldr	r3, [r2, #8]
 8005e98:	f013 0301 	ands.w	r3, r3, #1
 8005e9c:	d0e0      	beq.n	8005e60 <HAL_SPI_TransmitReceive+0x218>
 8005e9e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8005ea2:	b289      	uxth	r1, r1
 8005ea4:	2900      	cmp	r1, #0
 8005ea6:	d0db      	beq.n	8005e60 <HAL_SPI_TransmitReceive+0x218>
        if (hspi->RxXferCount > 1U)
 8005ea8:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8005eac:	b289      	uxth	r1, r1
 8005eae:	2901      	cmp	r1, #1
 8005eb0:	d9c9      	bls.n	8005e46 <HAL_SPI_TransmitReceive+0x1fe>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005eb2:	68d1      	ldr	r1, [r2, #12]
 8005eb4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005eb6:	8011      	strh	r1, [r2, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005eb8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005eba:	3202      	adds	r2, #2
 8005ebc:	6422      	str	r2, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005ebe:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8005ec2:	3a02      	subs	r2, #2
 8005ec4:	b292      	uxth	r2, r2
 8005ec6:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005eca:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 8005ece:	b292      	uxth	r2, r2
 8005ed0:	2a01      	cmp	r2, #1
 8005ed2:	d9b1      	bls.n	8005e38 <HAL_SPI_TransmitReceive+0x1f0>
        txallowed = 1U;
 8005ed4:	461f      	mov	r7, r3
 8005ed6:	e7c3      	b.n	8005e60 <HAL_SPI_TransmitReceive+0x218>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ed8:	2d00      	cmp	r5, #0
 8005eda:	d1c9      	bne.n	8005e70 <HAL_SPI_TransmitReceive+0x228>
        hspi->State = HAL_SPI_STATE_READY;
 8005edc:	2301      	movs	r3, #1
 8005ede:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005ee8:	2003      	movs	r0, #3
 8005eea:	e018      	b.n	8005f1e <HAL_SPI_TransmitReceive+0x2d6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005eec:	4632      	mov	r2, r6
 8005eee:	4629      	mov	r1, r5
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	f7ff fe0b 	bl	8005b0c <SPI_EndRxTxTransaction>
 8005ef6:	b950      	cbnz	r0, 8005f0e <HAL_SPI_TransmitReceive+0x2c6>
  hspi->State = HAL_SPI_STATE_READY;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 8005efe:	2300      	movs	r3, #0
 8005f00:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f04:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8005f06:	1ac0      	subs	r0, r0, r3
 8005f08:	bf18      	it	ne
 8005f0a:	2001      	movne	r0, #1
 8005f0c:	e007      	b.n	8005f1e <HAL_SPI_TransmitReceive+0x2d6>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f0e:	2320      	movs	r3, #32
 8005f10:	6623      	str	r3, [r4, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005f12:	2300      	movs	r3, #0
 8005f14:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8005f18:	2001      	movs	r0, #1
 8005f1a:	e000      	b.n	8005f1e <HAL_SPI_TransmitReceive+0x2d6>
    return HAL_BUSY;
 8005f1c:	2002      	movs	r0, #2
}
 8005f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8005f22:	2002      	movs	r0, #2
 8005f24:	e7fb      	b.n	8005f1e <HAL_SPI_TransmitReceive+0x2d6>
 8005f26:	2002      	movs	r0, #2
 8005f28:	e7f9      	b.n	8005f1e <HAL_SPI_TransmitReceive+0x2d6>
    return HAL_ERROR;
 8005f2a:	2001      	movs	r0, #1
 8005f2c:	e7f7      	b.n	8005f1e <HAL_SPI_TransmitReceive+0x2d6>
 8005f2e:	2001      	movs	r0, #1
 8005f30:	e7f5      	b.n	8005f1e <HAL_SPI_TransmitReceive+0x2d6>
 8005f32:	2001      	movs	r0, #1
 8005f34:	e7f3      	b.n	8005f1e <HAL_SPI_TransmitReceive+0x2d6>
  __HAL_LOCK(hspi);
 8005f36:	2002      	movs	r0, #2
 8005f38:	e7f1      	b.n	8005f1e <HAL_SPI_TransmitReceive+0x2d6>
	...

08005f3c <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f3c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d131      	bne.n	8005faa <HAL_TIM_Base_Start+0x6e>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f46:	2302      	movs	r3, #2
 8005f48:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f4c:	6803      	ldr	r3, [r0, #0]
 8005f4e:	4a1a      	ldr	r2, [pc, #104]	@ (8005fb8 <HAL_TIM_Base_Start+0x7c>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d01c      	beq.n	8005f8e <HAL_TIM_Base_Start+0x52>
 8005f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f58:	d019      	beq.n	8005f8e <HAL_TIM_Base_Start+0x52>
 8005f5a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d015      	beq.n	8005f8e <HAL_TIM_Base_Start+0x52>
 8005f62:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d011      	beq.n	8005f8e <HAL_TIM_Base_Start+0x52>
 8005f6a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d00d      	beq.n	8005f8e <HAL_TIM_Base_Start+0x52>
 8005f72:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d009      	beq.n	8005f8e <HAL_TIM_Base_Start+0x52>
 8005f7a:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d005      	beq.n	8005f8e <HAL_TIM_Base_Start+0x52>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	f042 0201 	orr.w	r2, r2, #1
 8005f88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f8e:	6899      	ldr	r1, [r3, #8]
 8005f90:	4a0a      	ldr	r2, [pc, #40]	@ (8005fbc <HAL_TIM_Base_Start+0x80>)
 8005f92:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f94:	2a06      	cmp	r2, #6
 8005f96:	d00a      	beq.n	8005fae <HAL_TIM_Base_Start+0x72>
 8005f98:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8005f9c:	d009      	beq.n	8005fb2 <HAL_TIM_Base_Start+0x76>
      __HAL_TIM_ENABLE(htim);
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	f042 0201 	orr.w	r2, r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	4770      	bx	lr
    return HAL_ERROR;
 8005faa:	2001      	movs	r0, #1
 8005fac:	4770      	bx	lr
  return HAL_OK;
 8005fae:	2000      	movs	r0, #0
 8005fb0:	4770      	bx	lr
 8005fb2:	2000      	movs	r0, #0
}
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	40012c00 	.word	0x40012c00
 8005fbc:	00010007 	.word	0x00010007

08005fc0 <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fc4:	4770      	bx	lr

08005fc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fc6:	4770      	bx	lr

08005fc8 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fc8:	4770      	bx	lr

08005fca <HAL_TIM_IRQHandler>:
{
 8005fca:	b570      	push	{r4, r5, r6, lr}
 8005fcc:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 8005fce:	6803      	ldr	r3, [r0, #0]
 8005fd0:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005fd2:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005fd4:	f015 0f02 	tst.w	r5, #2
 8005fd8:	d010      	beq.n	8005ffc <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005fda:	f016 0f02 	tst.w	r6, #2
 8005fde:	d00d      	beq.n	8005ffc <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005fe0:	f06f 0202 	mvn.w	r2, #2
 8005fe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fea:	6803      	ldr	r3, [r0, #0]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	f013 0f03 	tst.w	r3, #3
 8005ff2:	d05e      	beq.n	80060b2 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8005ff4:	f7ff ffe6 	bl	8005fc4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ffc:	f015 0f04 	tst.w	r5, #4
 8006000:	d012      	beq.n	8006028 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006002:	f016 0f04 	tst.w	r6, #4
 8006006:	d00f      	beq.n	8006028 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006008:	6823      	ldr	r3, [r4, #0]
 800600a:	f06f 0204 	mvn.w	r2, #4
 800600e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006010:	2302      	movs	r3, #2
 8006012:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800601c:	d04f      	beq.n	80060be <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 800601e:	4620      	mov	r0, r4
 8006020:	f7ff ffd0 	bl	8005fc4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006024:	2300      	movs	r3, #0
 8006026:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006028:	f015 0f08 	tst.w	r5, #8
 800602c:	d012      	beq.n	8006054 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800602e:	f016 0f08 	tst.w	r6, #8
 8006032:	d00f      	beq.n	8006054 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	f06f 0208 	mvn.w	r2, #8
 800603a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800603c:	2304      	movs	r3, #4
 800603e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	f013 0f03 	tst.w	r3, #3
 8006048:	d040      	beq.n	80060cc <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 800604a:	4620      	mov	r0, r4
 800604c:	f7ff ffba 	bl	8005fc4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006050:	2300      	movs	r3, #0
 8006052:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006054:	f015 0f10 	tst.w	r5, #16
 8006058:	d012      	beq.n	8006080 <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800605a:	f016 0f10 	tst.w	r6, #16
 800605e:	d00f      	beq.n	8006080 <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	f06f 0210 	mvn.w	r2, #16
 8006066:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006068:	2308      	movs	r3, #8
 800606a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8006074:	d031      	beq.n	80060da <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8006076:	4620      	mov	r0, r4
 8006078:	f7ff ffa4 	bl	8005fc4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800607c:	2300      	movs	r3, #0
 800607e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006080:	f015 0f01 	tst.w	r5, #1
 8006084:	d002      	beq.n	800608c <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006086:	f016 0f01 	tst.w	r6, #1
 800608a:	d12d      	bne.n	80060e8 <HAL_TIM_IRQHandler+0x11e>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800608c:	f415 5f02 	tst.w	r5, #8320	@ 0x2080
 8006090:	d044      	beq.n	800611c <HAL_TIM_IRQHandler+0x152>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006092:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8006096:	d12f      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006098:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800609c:	d002      	beq.n	80060a4 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800609e:	f016 0f40 	tst.w	r6, #64	@ 0x40
 80060a2:	d142      	bne.n	800612a <HAL_TIM_IRQHandler+0x160>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060a4:	f015 0f20 	tst.w	r5, #32
 80060a8:	d002      	beq.n	80060b0 <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80060aa:	f016 0f20 	tst.w	r6, #32
 80060ae:	d144      	bne.n	800613a <HAL_TIM_IRQHandler+0x170>
}
 80060b0:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060b2:	f7ff ff86 	bl	8005fc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060b6:	4620      	mov	r0, r4
 80060b8:	f7ff ff85 	bl	8005fc6 <HAL_TIM_PWM_PulseFinishedCallback>
 80060bc:	e79c      	b.n	8005ff8 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060be:	4620      	mov	r0, r4
 80060c0:	f7ff ff7f 	bl	8005fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c4:	4620      	mov	r0, r4
 80060c6:	f7ff ff7e 	bl	8005fc6 <HAL_TIM_PWM_PulseFinishedCallback>
 80060ca:	e7ab      	b.n	8006024 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060cc:	4620      	mov	r0, r4
 80060ce:	f7ff ff78 	bl	8005fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d2:	4620      	mov	r0, r4
 80060d4:	f7ff ff77 	bl	8005fc6 <HAL_TIM_PWM_PulseFinishedCallback>
 80060d8:	e7ba      	b.n	8006050 <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060da:	4620      	mov	r0, r4
 80060dc:	f7ff ff71 	bl	8005fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e0:	4620      	mov	r0, r4
 80060e2:	f7ff ff70 	bl	8005fc6 <HAL_TIM_PWM_PulseFinishedCallback>
 80060e6:	e7c9      	b.n	800607c <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	f06f 0201 	mvn.w	r2, #1
 80060ee:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80060f0:	4620      	mov	r0, r4
 80060f2:	f7ff ff65 	bl	8005fc0 <HAL_TIM_PeriodElapsedCallback>
 80060f6:	e7c9      	b.n	800608c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80060f8:	6823      	ldr	r3, [r4, #0]
 80060fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80060fe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006100:	4620      	mov	r0, r4
 8006102:	f000 fa12 	bl	800652a <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006106:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800610a:	d0c5      	beq.n	8006098 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006112:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006114:	4620      	mov	r0, r4
 8006116:	f000 fa09 	bl	800652c <HAL_TIMEx_Break2Callback>
 800611a:	e7bd      	b.n	8006098 <HAL_TIM_IRQHandler+0xce>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800611c:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8006120:	d0ba      	beq.n	8006098 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006122:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8006126:	d0b7      	beq.n	8006098 <HAL_TIM_IRQHandler+0xce>
 8006128:	e7f0      	b.n	800610c <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006130:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006132:	4620      	mov	r0, r4
 8006134:	f7ff ff48 	bl	8005fc8 <HAL_TIM_TriggerCallback>
 8006138:	e7b4      	b.n	80060a4 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	f06f 0220 	mvn.w	r2, #32
 8006140:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006142:	4620      	mov	r0, r4
 8006144:	f000 f9f0 	bl	8006528 <HAL_TIMEx_CommutCallback>
}
 8006148:	e7b2      	b.n	80060b0 <HAL_TIM_IRQHandler+0xe6>
	...

0800614c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800614c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800614e:	4a55      	ldr	r2, [pc, #340]	@ (80062a4 <TIM_Base_SetConfig+0x158>)
 8006150:	4290      	cmp	r0, r2
 8006152:	d054      	beq.n	80061fe <TIM_Base_SetConfig+0xb2>
 8006154:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006158:	d06f      	beq.n	800623a <TIM_Base_SetConfig+0xee>
 800615a:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800615e:	4290      	cmp	r0, r2
 8006160:	f000 8099 	beq.w	8006296 <TIM_Base_SetConfig+0x14a>
 8006164:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006168:	4290      	cmp	r0, r2
 800616a:	f000 808f 	beq.w	800628c <TIM_Base_SetConfig+0x140>
 800616e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006172:	4290      	cmp	r0, r2
 8006174:	d073      	beq.n	800625e <TIM_Base_SetConfig+0x112>
 8006176:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800617a:	4290      	cmp	r0, r2
 800617c:	d074      	beq.n	8006268 <TIM_Base_SetConfig+0x11c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800617e:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8006182:	4290      	cmp	r0, r2
 8006184:	d011      	beq.n	80061aa <TIM_Base_SetConfig+0x5e>
 8006186:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800618a:	4290      	cmp	r0, r2
 800618c:	d01b      	beq.n	80061c6 <TIM_Base_SetConfig+0x7a>
 800618e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006192:	4290      	cmp	r0, r2
 8006194:	d025      	beq.n	80061e2 <TIM_Base_SetConfig+0x96>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006196:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800619a:	694a      	ldr	r2, [r1, #20]
 800619c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800619e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061a0:	688b      	ldr	r3, [r1, #8]
 80061a2:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061a4:	680b      	ldr	r3, [r1, #0]
 80061a6:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061a8:	e03c      	b.n	8006224 <TIM_Base_SetConfig+0xd8>
    tmpcr1 &= ~TIM_CR1_CKD;
 80061aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061ae:	68ca      	ldr	r2, [r1, #12]
 80061b0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061b6:	694a      	ldr	r2, [r1, #20]
 80061b8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80061ba:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061bc:	688b      	ldr	r3, [r1, #8]
 80061be:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80061c0:	680b      	ldr	r3, [r1, #0]
 80061c2:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061c4:	e02c      	b.n	8006220 <TIM_Base_SetConfig+0xd4>
    tmpcr1 &= ~TIM_CR1_CKD;
 80061c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061ca:	68ca      	ldr	r2, [r1, #12]
 80061cc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061d2:	694a      	ldr	r2, [r1, #20]
 80061d4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80061d6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061d8:	688b      	ldr	r3, [r1, #8]
 80061da:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80061dc:	680b      	ldr	r3, [r1, #0]
 80061de:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061e0:	e01e      	b.n	8006220 <TIM_Base_SetConfig+0xd4>
    tmpcr1 &= ~TIM_CR1_CKD;
 80061e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061e6:	68ca      	ldr	r2, [r1, #12]
 80061e8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061ee:	694a      	ldr	r2, [r1, #20]
 80061f0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80061f2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061f4:	688b      	ldr	r3, [r1, #8]
 80061f6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80061f8:	680b      	ldr	r3, [r1, #0]
 80061fa:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061fc:	e010      	b.n	8006220 <TIM_Base_SetConfig+0xd4>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006202:	684a      	ldr	r2, [r1, #4]
 8006204:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8006206:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800620a:	68ca      	ldr	r2, [r1, #12]
 800620c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800620e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006212:	694a      	ldr	r2, [r1, #20]
 8006214:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006216:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006218:	688b      	ldr	r3, [r1, #8]
 800621a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800621c:	680b      	ldr	r3, [r1, #0]
 800621e:	6283      	str	r3, [r0, #40]	@ 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006220:	690b      	ldr	r3, [r1, #16]
 8006222:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006224:	2301      	movs	r3, #1
 8006226:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006228:	6903      	ldr	r3, [r0, #16]
 800622a:	f013 0f01 	tst.w	r3, #1
 800622e:	d037      	beq.n	80062a0 <TIM_Base_SetConfig+0x154>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006230:	6903      	ldr	r3, [r0, #16]
 8006232:	f023 0301 	bic.w	r3, r3, #1
 8006236:	6103      	str	r3, [r0, #16]
  }
}
 8006238:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800623a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800623e:	684a      	ldr	r2, [r1, #4]
 8006240:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8006242:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006246:	68ca      	ldr	r2, [r1, #12]
 8006248:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800624a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800624e:	694a      	ldr	r2, [r1, #20]
 8006250:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006252:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006254:	688b      	ldr	r3, [r1, #8]
 8006256:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006258:	680b      	ldr	r3, [r1, #0]
 800625a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800625c:	e7e2      	b.n	8006224 <TIM_Base_SetConfig+0xd8>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800625e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006262:	684a      	ldr	r2, [r1, #4]
 8006264:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006266:	e7ec      	b.n	8006242 <TIM_Base_SetConfig+0xf6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006268:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800626c:	684a      	ldr	r2, [r1, #4]
 800626e:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8006270:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006274:	68ca      	ldr	r2, [r1, #12]
 8006276:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006278:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800627c:	694a      	ldr	r2, [r1, #20]
 800627e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006280:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006282:	688b      	ldr	r3, [r1, #8]
 8006284:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006286:	680b      	ldr	r3, [r1, #0]
 8006288:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800628a:	e7c9      	b.n	8006220 <TIM_Base_SetConfig+0xd4>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800628c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006290:	684a      	ldr	r2, [r1, #4]
 8006292:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006294:	e7d5      	b.n	8006242 <TIM_Base_SetConfig+0xf6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800629a:	684a      	ldr	r2, [r1, #4]
 800629c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800629e:	e7d0      	b.n	8006242 <TIM_Base_SetConfig+0xf6>
}
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	40012c00 	.word	0x40012c00

080062a8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80062a8:	b360      	cbz	r0, 8006304 <HAL_TIM_Base_Init+0x5c>
{
 80062aa:	b510      	push	{r4, lr}
 80062ac:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80062ae:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80062b2:	b313      	cbz	r3, 80062fa <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80062b4:	2302      	movs	r3, #2
 80062b6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062ba:	4621      	mov	r1, r4
 80062bc:	f851 0b04 	ldr.w	r0, [r1], #4
 80062c0:	f7ff ff44 	bl	800614c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062c4:	2301      	movs	r3, #1
 80062c6:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062ca:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80062ce:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80062d2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80062d6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80062da:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80062de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80062e6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80062ea:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80062ee:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80062f2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80062f6:	2000      	movs	r0, #0
}
 80062f8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80062fa:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80062fe:	f7fc ffbd 	bl	800327c <HAL_TIM_Base_MspInit>
 8006302:	e7d7      	b.n	80062b4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8006304:	2001      	movs	r0, #1
}
 8006306:	4770      	bx	lr

08006308 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006308:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800630a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800630c:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006310:	430a      	orrs	r2, r1
 8006312:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8006316:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800631a:	6082      	str	r2, [r0, #8]
}
 800631c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006320:	4770      	bx	lr
	...

08006324 <HAL_TIM_ConfigClockSource>:
{
 8006324:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006326:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800632a:	2b01      	cmp	r3, #1
 800632c:	f000 80ab 	beq.w	8006486 <HAL_TIM_ConfigClockSource+0x162>
 8006330:	4604      	mov	r4, r0
 8006332:	2301      	movs	r3, #1
 8006334:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006338:	2302      	movs	r3, #2
 800633a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800633e:	6802      	ldr	r2, [r0, #0]
 8006340:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006342:	4b52      	ldr	r3, [pc, #328]	@ (800648c <HAL_TIM_ConfigClockSource+0x168>)
 8006344:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8006346:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8006348:	680b      	ldr	r3, [r1, #0]
 800634a:	2b60      	cmp	r3, #96	@ 0x60
 800634c:	d060      	beq.n	8006410 <HAL_TIM_ConfigClockSource+0xec>
 800634e:	d83d      	bhi.n	80063cc <HAL_TIM_ConfigClockSource+0xa8>
 8006350:	2b40      	cmp	r3, #64	@ 0x40
 8006352:	d079      	beq.n	8006448 <HAL_TIM_ConfigClockSource+0x124>
 8006354:	d91c      	bls.n	8006390 <HAL_TIM_ConfigClockSource+0x6c>
 8006356:	2b50      	cmp	r3, #80	@ 0x50
 8006358:	d136      	bne.n	80063c8 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800635a:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 800635c:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800635e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8006360:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006362:	6a1a      	ldr	r2, [r3, #32]
 8006364:	f022 0201 	bic.w	r2, r2, #1
 8006368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800636a:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800636c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006370:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006374:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8006378:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800637a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800637c:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800637e:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8006380:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006386:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 800638a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800638c:	2000      	movs	r0, #0
}
 800638e:	e012      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8006390:	2b20      	cmp	r3, #32
 8006392:	d002      	beq.n	800639a <HAL_TIM_ConfigClockSource+0x76>
 8006394:	d90b      	bls.n	80063ae <HAL_TIM_ConfigClockSource+0x8a>
 8006396:	2b30      	cmp	r3, #48	@ 0x30
 8006398:	d114      	bne.n	80063c4 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800639a:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800639c:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800639e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063a2:	4313      	orrs	r3, r2
 80063a4:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80063a8:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80063aa:	2000      	movs	r0, #0
}
 80063ac:	e003      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80063ae:	f033 0210 	bics.w	r2, r3, #16
 80063b2:	d0f2      	beq.n	800639a <HAL_TIM_ConfigClockSource+0x76>
 80063b4:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 80063b6:	2301      	movs	r3, #1
 80063b8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80063bc:	2300      	movs	r3, #0
 80063be:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80063c2:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 80063c4:	2001      	movs	r0, #1
 80063c6:	e7f6      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x92>
 80063c8:	2001      	movs	r0, #1
 80063ca:	e7f4      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x92>
 80063cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063d0:	d055      	beq.n	800647e <HAL_TIM_ConfigClockSource+0x15a>
 80063d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063d6:	d10c      	bne.n	80063f2 <HAL_TIM_ConfigClockSource+0xce>
      TIM_ETR_SetConfig(htim->Instance,
 80063d8:	68cb      	ldr	r3, [r1, #12]
 80063da:	684a      	ldr	r2, [r1, #4]
 80063dc:	6889      	ldr	r1, [r1, #8]
 80063de:	6820      	ldr	r0, [r4, #0]
 80063e0:	f7ff ff92 	bl	8006308 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063e4:	6822      	ldr	r2, [r4, #0]
 80063e6:	6893      	ldr	r3, [r2, #8]
 80063e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80063ec:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80063ee:	2000      	movs	r0, #0
      break;
 80063f0:	e7e1      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80063f2:	2b70      	cmp	r3, #112	@ 0x70
 80063f4:	d145      	bne.n	8006482 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80063f6:	68cb      	ldr	r3, [r1, #12]
 80063f8:	684a      	ldr	r2, [r1, #4]
 80063fa:	6889      	ldr	r1, [r1, #8]
 80063fc:	6820      	ldr	r0, [r4, #0]
 80063fe:	f7ff ff83 	bl	8006308 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006402:	6822      	ldr	r2, [r4, #0]
 8006404:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006406:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800640a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800640c:	2000      	movs	r0, #0
      break;
 800640e:	e7d2      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006410:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 8006412:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006414:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8006416:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006418:	6a19      	ldr	r1, [r3, #32]
 800641a:	f021 0110 	bic.w	r1, r1, #16
 800641e:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006420:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006422:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006426:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800642a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800642e:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8006432:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8006434:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006436:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8006438:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800643a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800643e:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8006442:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006444:	2000      	movs	r0, #0
}
 8006446:	e7b6      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006448:	6823      	ldr	r3, [r4, #0]
                               sClockSourceConfig->ClockPolarity,
 800644a:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800644c:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800644e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006450:	6a1a      	ldr	r2, [r3, #32]
 8006452:	f022 0201 	bic.w	r2, r2, #1
 8006456:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006458:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800645a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800645e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006462:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8006466:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8006468:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800646a:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800646c:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800646e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006470:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006474:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8006478:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800647a:	2000      	movs	r0, #0
}
 800647c:	e79b      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x92>
  HAL_StatusTypeDef status = HAL_OK;
 800647e:	2000      	movs	r0, #0
 8006480:	e799      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 8006482:	2001      	movs	r0, #1
 8006484:	e797      	b.n	80063b6 <HAL_TIM_ConfigClockSource+0x92>
  __HAL_LOCK(htim);
 8006486:	2002      	movs	r0, #2
 8006488:	e79b      	b.n	80063c2 <HAL_TIM_ConfigClockSource+0x9e>
 800648a:	bf00      	nop
 800648c:	fffe0088 	.word	0xfffe0088

08006490 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006490:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8006494:	2a01      	cmp	r2, #1
 8006496:	d042      	beq.n	800651e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
{
 8006498:	b430      	push	{r4, r5}
 800649a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800649c:	2201      	movs	r2, #1
 800649e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a2:	2202      	movs	r2, #2
 80064a4:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064a8:	6800      	ldr	r0, [r0, #0]
 80064aa:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064ac:	6884      	ldr	r4, [r0, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064ae:	4d1d      	ldr	r5, [pc, #116]	@ (8006524 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 80064b0:	42a8      	cmp	r0, r5
 80064b2:	d003      	beq.n	80064bc <HAL_TIMEx_MasterConfigSynchronization+0x2c>
 80064b4:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80064b8:	42a8      	cmp	r0, r5
 80064ba:	d103      	bne.n	80064c4 <HAL_TIMEx_MasterConfigSynchronization+0x34>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064bc:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064c0:	684d      	ldr	r5, [r1, #4]
 80064c2:	432a      	orrs	r2, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064c4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064c8:	680d      	ldr	r5, [r1, #0]
 80064ca:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064cc:	6042      	str	r2, [r0, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	4814      	ldr	r0, [pc, #80]	@ (8006524 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 80064d2:	4282      	cmp	r2, r0
 80064d4:	d016      	beq.n	8006504 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80064d6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80064da:	d013      	beq.n	8006504 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80064dc:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 80064e0:	4282      	cmp	r2, r0
 80064e2:	d00f      	beq.n	8006504 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80064e4:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80064e8:	4282      	cmp	r2, r0
 80064ea:	d00b      	beq.n	8006504 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80064ec:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80064f0:	4282      	cmp	r2, r0
 80064f2:	d007      	beq.n	8006504 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80064f4:	f500 3094 	add.w	r0, r0, #75776	@ 0x12800
 80064f8:	4282      	cmp	r2, r0
 80064fa:	d003      	beq.n	8006504 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80064fc:	f500 6040 	add.w	r0, r0, #3072	@ 0xc00
 8006500:	4282      	cmp	r2, r0
 8006502:	d104      	bne.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006504:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006508:	6889      	ldr	r1, [r1, #8]
 800650a:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800650c:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006514:	2000      	movs	r0, #0
 8006516:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800651a:	bc30      	pop	{r4, r5}
 800651c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800651e:	2002      	movs	r0, #2
}
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	40012c00 	.word	0x40012c00

08006528 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006528:	4770      	bx	lr

0800652a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800652a:	4770      	bx	lr

0800652c <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800652c:	4770      	bx	lr

0800652e <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800652e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006530:	e852 3f00 	ldrex	r3, [r2]
 8006534:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006538:	e842 3100 	strex	r1, r3, [r2]
 800653c:	2900      	cmp	r1, #0
 800653e:	d1f6      	bne.n	800652e <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006540:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006542:	f102 0308 	add.w	r3, r2, #8
 8006546:	e853 3f00 	ldrex	r3, [r3]
 800654a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	3208      	adds	r2, #8
 8006550:	e842 3100 	strex	r1, r3, [r2]
 8006554:	2900      	cmp	r1, #0
 8006556:	d1f3      	bne.n	8006540 <UART_EndRxTransfer+0x12>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006558:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800655a:	2b01      	cmp	r3, #1
 800655c:	d006      	beq.n	800656c <UART_EndRxTransfer+0x3e>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800655e:	2320      	movs	r3, #32
 8006560:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006564:	2300      	movs	r3, #0
 8006566:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006568:	6683      	str	r3, [r0, #104]	@ 0x68
}
 800656a:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800656c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656e:	e852 3f00 	ldrex	r3, [r2]
 8006572:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006576:	e842 3100 	strex	r1, r3, [r2]
 800657a:	2900      	cmp	r1, #0
 800657c:	d1f6      	bne.n	800656c <UART_EndRxTransfer+0x3e>
 800657e:	e7ee      	b.n	800655e <UART_EndRxTransfer+0x30>

08006580 <UART_SetConfig>:
{
 8006580:	b510      	push	{r4, lr}
 8006582:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8006584:	6801      	ldr	r1, [r0, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006586:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006588:	68a3      	ldr	r3, [r4, #8]
 800658a:	6922      	ldr	r2, [r4, #16]
 800658c:	4313      	orrs	r3, r2
 800658e:	6962      	ldr	r2, [r4, #20]
 8006590:	4313      	orrs	r3, r2
 8006592:	69e2      	ldr	r2, [r4, #28]
 8006594:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006596:	4a9f      	ldr	r2, [pc, #636]	@ (8006814 <UART_SetConfig+0x294>)
 8006598:	4002      	ands	r2, r0
 800659a:	4313      	orrs	r3, r2
 800659c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800659e:	6822      	ldr	r2, [r4, #0]
 80065a0:	6853      	ldr	r3, [r2, #4]
 80065a2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80065a6:	68e1      	ldr	r1, [r4, #12]
 80065a8:	430b      	orrs	r3, r1
 80065aa:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065ac:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065ae:	6822      	ldr	r2, [r4, #0]
 80065b0:	4b99      	ldr	r3, [pc, #612]	@ (8006818 <UART_SetConfig+0x298>)
 80065b2:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 80065b4:	bf1c      	itt	ne
 80065b6:	6a23      	ldrne	r3, [r4, #32]
 80065b8:	4319      	orrne	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065ba:	6893      	ldr	r3, [r2, #8]
 80065bc:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80065c0:	430b      	orrs	r3, r1
 80065c2:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	4a95      	ldr	r2, [pc, #596]	@ (800681c <UART_SetConfig+0x29c>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d011      	beq.n	80065f0 <UART_SetConfig+0x70>
 80065cc:	4a94      	ldr	r2, [pc, #592]	@ (8006820 <UART_SetConfig+0x2a0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d020      	beq.n	8006614 <UART_SetConfig+0x94>
 80065d2:	4a94      	ldr	r2, [pc, #592]	@ (8006824 <UART_SetConfig+0x2a4>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d03a      	beq.n	800664e <UART_SetConfig+0xce>
 80065d8:	4a93      	ldr	r2, [pc, #588]	@ (8006828 <UART_SetConfig+0x2a8>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d05f      	beq.n	800669e <UART_SetConfig+0x11e>
 80065de:	4a93      	ldr	r2, [pc, #588]	@ (800682c <UART_SetConfig+0x2ac>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d072      	beq.n	80066ca <UART_SetConfig+0x14a>
 80065e4:	4a8c      	ldr	r2, [pc, #560]	@ (8006818 <UART_SetConfig+0x298>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	f000 8087 	beq.w	80066fa <UART_SetConfig+0x17a>
 80065ec:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80065ee:	e03e      	b.n	800666e <UART_SetConfig+0xee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065f0:	f502 4258 	add.w	r2, r2, #55296	@ 0xd800
 80065f4:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80065f8:	f002 0203 	and.w	r2, r2, #3
 80065fc:	2a03      	cmp	r2, #3
 80065fe:	d807      	bhi.n	8006610 <UART_SetConfig+0x90>
 8006600:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006604:	015b0096 	.word	0x015b0096
 8006608:	00040159 	.word	0x00040159
 800660c:	2208      	movs	r2, #8
 800660e:	e02e      	b.n	800666e <UART_SetConfig+0xee>
 8006610:	2210      	movs	r2, #16
 8006612:	e02c      	b.n	800666e <UART_SetConfig+0xee>
 8006614:	f502 32e6 	add.w	r2, r2, #117760	@ 0x1cc00
 8006618:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 800661c:	f002 020c 	and.w	r2, r2, #12
 8006620:	2a0c      	cmp	r2, #12
 8006622:	d812      	bhi.n	800664a <UART_SetConfig+0xca>
 8006624:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006628:	001100a0 	.word	0x001100a0
 800662c:	00110011 	.word	0x00110011
 8006630:	0011014b 	.word	0x0011014b
 8006634:	00110011 	.word	0x00110011
 8006638:	0011000d 	.word	0x0011000d
 800663c:	00110011 	.word	0x00110011
 8006640:	000f      	.short	0x000f
 8006642:	2202      	movs	r2, #2
 8006644:	e013      	b.n	800666e <UART_SetConfig+0xee>
 8006646:	2208      	movs	r2, #8
 8006648:	e011      	b.n	800666e <UART_SetConfig+0xee>
 800664a:	2210      	movs	r2, #16
 800664c:	e00f      	b.n	800666e <UART_SetConfig+0xee>
 800664e:	4b78      	ldr	r3, [pc, #480]	@ (8006830 <UART_SetConfig+0x2b0>)
 8006650:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006654:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006658:	2b20      	cmp	r3, #32
 800665a:	f000 8132 	beq.w	80068c2 <UART_SetConfig+0x342>
 800665e:	d819      	bhi.n	8006694 <UART_SetConfig+0x114>
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 80ac 	beq.w	80067be <UART_SetConfig+0x23e>
 8006666:	2b10      	cmp	r3, #16
 8006668:	bf0c      	ite	eq
 800666a:	2204      	moveq	r2, #4
 800666c:	2210      	movne	r2, #16
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800666e:	69e0      	ldr	r0, [r4, #28]
 8006670:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006674:	f000 80a9 	beq.w	80067ca <UART_SetConfig+0x24a>
    switch (clocksource)
 8006678:	2a08      	cmp	r2, #8
 800667a:	f200 8116 	bhi.w	80068aa <UART_SetConfig+0x32a>
 800667e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8006682:	00e5      	.short	0x00e5
 8006684:	00e300fb 	.word	0x00e300fb
 8006688:	00fe0114 	.word	0x00fe0114
 800668c:	01140114 	.word	0x01140114
 8006690:	01010114 	.word	0x01010114
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006694:	2b30      	cmp	r3, #48	@ 0x30
 8006696:	bf0c      	ite	eq
 8006698:	2208      	moveq	r2, #8
 800669a:	2210      	movne	r2, #16
 800669c:	e7e7      	b.n	800666e <UART_SetConfig+0xee>
 800669e:	4b64      	ldr	r3, [pc, #400]	@ (8006830 <UART_SetConfig+0x2b0>)
 80066a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066a4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80066a8:	2b80      	cmp	r3, #128	@ 0x80
 80066aa:	f000 810c 	beq.w	80068c6 <UART_SetConfig+0x346>
 80066ae:	d807      	bhi.n	80066c0 <UART_SetConfig+0x140>
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 8086 	beq.w	80067c2 <UART_SetConfig+0x242>
 80066b6:	2b40      	cmp	r3, #64	@ 0x40
 80066b8:	bf0c      	ite	eq
 80066ba:	2204      	moveq	r2, #4
 80066bc:	2210      	movne	r2, #16
 80066be:	e7d6      	b.n	800666e <UART_SetConfig+0xee>
 80066c0:	2bc0      	cmp	r3, #192	@ 0xc0
 80066c2:	bf0c      	ite	eq
 80066c4:	2208      	moveq	r2, #8
 80066c6:	2210      	movne	r2, #16
 80066c8:	e7d1      	b.n	800666e <UART_SetConfig+0xee>
 80066ca:	4b59      	ldr	r3, [pc, #356]	@ (8006830 <UART_SetConfig+0x2b0>)
 80066cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066d8:	f000 80f7 	beq.w	80068ca <UART_SetConfig+0x34a>
 80066dc:	d807      	bhi.n	80066ee <UART_SetConfig+0x16e>
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d071      	beq.n	80067c6 <UART_SetConfig+0x246>
 80066e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066e6:	bf0c      	ite	eq
 80066e8:	2204      	moveq	r2, #4
 80066ea:	2210      	movne	r2, #16
 80066ec:	e7bf      	b.n	800666e <UART_SetConfig+0xee>
 80066ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066f2:	bf0c      	ite	eq
 80066f4:	2208      	moveq	r2, #8
 80066f6:	2210      	movne	r2, #16
 80066f8:	e7b9      	b.n	800666e <UART_SetConfig+0xee>
 80066fa:	4b4d      	ldr	r3, [pc, #308]	@ (8006830 <UART_SetConfig+0x2b0>)
 80066fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006700:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006704:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006708:	d055      	beq.n	80067b6 <UART_SetConfig+0x236>
 800670a:	d809      	bhi.n	8006720 <UART_SetConfig+0x1a0>
 800670c:	b38b      	cbz	r3, 8006772 <UART_SetConfig+0x1f2>
 800670e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006712:	bf18      	it	ne
 8006714:	2001      	movne	r0, #1
 8006716:	f040 80ab 	bne.w	8006870 <UART_SetConfig+0x2f0>
        pclk = HAL_RCC_GetSysClockFreq();
 800671a:	f7fe f8ef 	bl	80048fc <HAL_RCC_GetSysClockFreq>
        break;
 800671e:	e02a      	b.n	8006776 <UART_SetConfig+0x1f6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006720:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006724:	d102      	bne.n	800672c <UART_SetConfig+0x1ac>
 8006726:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800672a:	e027      	b.n	800677c <UART_SetConfig+0x1fc>
 800672c:	2001      	movs	r0, #1
 800672e:	e09f      	b.n	8006870 <UART_SetConfig+0x2f0>
 8006730:	2201      	movs	r2, #1
  if (UART_INSTANCE_LOWPOWER(huart))
 8006732:	4939      	ldr	r1, [pc, #228]	@ (8006818 <UART_SetConfig+0x298>)
 8006734:	428b      	cmp	r3, r1
 8006736:	d19a      	bne.n	800666e <UART_SetConfig+0xee>
    switch (clocksource)
 8006738:	2a08      	cmp	r2, #8
 800673a:	f200 80a6 	bhi.w	800688a <UART_SetConfig+0x30a>
 800673e:	a301      	add	r3, pc, #4	@ (adr r3, 8006744 <UART_SetConfig+0x1c4>)
 8006740:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8006744:	08006773 	.word	0x08006773
 8006748:	0800688b 	.word	0x0800688b
 800674c:	080067bb 	.word	0x080067bb
 8006750:	0800688b 	.word	0x0800688b
 8006754:	0800671b 	.word	0x0800671b
 8006758:	0800688b 	.word	0x0800688b
 800675c:	0800688b 	.word	0x0800688b
 8006760:	0800688b 	.word	0x0800688b
 8006764:	0800676d 	.word	0x0800676d
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006768:	2200      	movs	r2, #0
 800676a:	e7e2      	b.n	8006732 <UART_SetConfig+0x1b2>
        pclk = (uint32_t) LSE_VALUE;
 800676c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006770:	e004      	b.n	800677c <UART_SetConfig+0x1fc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006772:	f7fe fd33 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006776:	2800      	cmp	r0, #0
 8006778:	f000 8089 	beq.w	800688e <UART_SetConfig+0x30e>
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800677c:	6862      	ldr	r2, [r4, #4]
 800677e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8006782:	4283      	cmp	r3, r0
 8006784:	f200 8085 	bhi.w	8006892 <UART_SetConfig+0x312>
 8006788:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800678c:	f200 8083 	bhi.w	8006896 <UART_SetConfig+0x316>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006790:	0e01      	lsrs	r1, r0, #24
 8006792:	0200      	lsls	r0, r0, #8
 8006794:	0853      	lsrs	r3, r2, #1
 8006796:	18c0      	adds	r0, r0, r3
 8006798:	f04f 0300 	mov.w	r3, #0
 800679c:	f141 0100 	adc.w	r1, r1, #0
 80067a0:	f7fa fa12 	bl	8000bc8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80067a4:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80067a8:	4b22      	ldr	r3, [pc, #136]	@ (8006834 <UART_SetConfig+0x2b4>)
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d875      	bhi.n	800689a <UART_SetConfig+0x31a>
          huart->Instance->BRR = usartdiv;
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	60d8      	str	r0, [r3, #12]
 80067b2:	2000      	movs	r0, #0
 80067b4:	e05c      	b.n	8006870 <UART_SetConfig+0x2f0>
        pclk = (uint32_t) HSI_VALUE;
 80067b6:	4820      	ldr	r0, [pc, #128]	@ (8006838 <UART_SetConfig+0x2b8>)
 80067b8:	e7e0      	b.n	800677c <UART_SetConfig+0x1fc>
    switch (clocksource)
 80067ba:	481f      	ldr	r0, [pc, #124]	@ (8006838 <UART_SetConfig+0x2b8>)
 80067bc:	e7de      	b.n	800677c <UART_SetConfig+0x1fc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067be:	2200      	movs	r2, #0
 80067c0:	e755      	b.n	800666e <UART_SetConfig+0xee>
 80067c2:	2200      	movs	r2, #0
 80067c4:	e753      	b.n	800666e <UART_SetConfig+0xee>
 80067c6:	2200      	movs	r2, #0
 80067c8:	e751      	b.n	800666e <UART_SetConfig+0xee>
    switch (clocksource)
 80067ca:	2a08      	cmp	r2, #8
 80067cc:	d867      	bhi.n	800689e <UART_SetConfig+0x31e>
 80067ce:	e8df f002 	tbb	[pc, r2]
 80067d2:	3507      	.short	0x3507
 80067d4:	66386605 	.word	0x66386605
 80067d8:	6666      	.short	0x6666
 80067da:	0b          	.byte	0x0b
 80067db:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 80067dc:	4816      	ldr	r0, [pc, #88]	@ (8006838 <UART_SetConfig+0x2b8>)
 80067de:	e003      	b.n	80067e8 <UART_SetConfig+0x268>
        pclk = HAL_RCC_GetPCLK1Freq();
 80067e0:	f7fe fcfc 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80067e4:	2800      	cmp	r0, #0
 80067e6:	d05c      	beq.n	80068a2 <UART_SetConfig+0x322>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067e8:	6862      	ldr	r2, [r4, #4]
 80067ea:	0853      	lsrs	r3, r2, #1
 80067ec:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80067f0:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067f4:	f1a3 0110 	sub.w	r1, r3, #16
 80067f8:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 80067fc:	4291      	cmp	r1, r2
 80067fe:	d852      	bhi.n	80068a6 <UART_SetConfig+0x326>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006800:	f023 020f 	bic.w	r2, r3, #15
 8006804:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8006806:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006808:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800680c:	4313      	orrs	r3, r2
 800680e:	60cb      	str	r3, [r1, #12]
 8006810:	2000      	movs	r0, #0
 8006812:	e02d      	b.n	8006870 <UART_SetConfig+0x2f0>
 8006814:	efff69f3 	.word	0xefff69f3
 8006818:	40008000 	.word	0x40008000
 800681c:	40013800 	.word	0x40013800
 8006820:	40004400 	.word	0x40004400
 8006824:	40004800 	.word	0x40004800
 8006828:	40004c00 	.word	0x40004c00
 800682c:	40005000 	.word	0x40005000
 8006830:	40021000 	.word	0x40021000
 8006834:	000ffcff 	.word	0x000ffcff
 8006838:	00f42400 	.word	0x00f42400
        pclk = HAL_RCC_GetPCLK2Freq();
 800683c:	f7fe fce0 	bl	8005200 <HAL_RCC_GetPCLK2Freq>
        break;
 8006840:	e7d0      	b.n	80067e4 <UART_SetConfig+0x264>
        pclk = HAL_RCC_GetSysClockFreq();
 8006842:	f7fe f85b 	bl	80048fc <HAL_RCC_GetSysClockFreq>
        break;
 8006846:	e7cd      	b.n	80067e4 <UART_SetConfig+0x264>
        pclk = (uint32_t) HSI_VALUE;
 8006848:	4821      	ldr	r0, [pc, #132]	@ (80068d0 <UART_SetConfig+0x350>)
 800684a:	e002      	b.n	8006852 <UART_SetConfig+0x2d2>
        pclk = HAL_RCC_GetPCLK1Freq();
 800684c:	f7fe fcc6 	bl	80051dc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006850:	b368      	cbz	r0, 80068ae <UART_SetConfig+0x32e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006852:	6863      	ldr	r3, [r4, #4]
 8006854:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006858:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800685c:	f1a0 0210 	sub.w	r2, r0, #16
 8006860:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8006864:	429a      	cmp	r2, r3
 8006866:	d824      	bhi.n	80068b2 <UART_SetConfig+0x332>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	b280      	uxth	r0, r0
 800686c:	60d8      	str	r0, [r3, #12]
 800686e:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8006870:	2300      	movs	r3, #0
 8006872:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 8006874:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8006876:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8006878:	f7fe fcc2 	bl	8005200 <HAL_RCC_GetPCLK2Freq>
        break;
 800687c:	e7e8      	b.n	8006850 <UART_SetConfig+0x2d0>
        pclk = HAL_RCC_GetSysClockFreq();
 800687e:	f7fe f83d 	bl	80048fc <HAL_RCC_GetSysClockFreq>
        break;
 8006882:	e7e5      	b.n	8006850 <UART_SetConfig+0x2d0>
    switch (clocksource)
 8006884:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006888:	e7e3      	b.n	8006852 <UART_SetConfig+0x2d2>
    switch (clocksource)
 800688a:	2001      	movs	r0, #1
 800688c:	e7f0      	b.n	8006870 <UART_SetConfig+0x2f0>
 800688e:	2000      	movs	r0, #0
 8006890:	e7ee      	b.n	8006870 <UART_SetConfig+0x2f0>
        ret = HAL_ERROR;
 8006892:	2001      	movs	r0, #1
 8006894:	e7ec      	b.n	8006870 <UART_SetConfig+0x2f0>
 8006896:	2001      	movs	r0, #1
 8006898:	e7ea      	b.n	8006870 <UART_SetConfig+0x2f0>
          ret = HAL_ERROR;
 800689a:	2001      	movs	r0, #1
 800689c:	e7e8      	b.n	8006870 <UART_SetConfig+0x2f0>
    switch (clocksource)
 800689e:	2001      	movs	r0, #1
 80068a0:	e7e6      	b.n	8006870 <UART_SetConfig+0x2f0>
 80068a2:	2000      	movs	r0, #0
 80068a4:	e7e4      	b.n	8006870 <UART_SetConfig+0x2f0>
        ret = HAL_ERROR;
 80068a6:	2001      	movs	r0, #1
 80068a8:	e7e2      	b.n	8006870 <UART_SetConfig+0x2f0>
    switch (clocksource)
 80068aa:	2001      	movs	r0, #1
 80068ac:	e7e0      	b.n	8006870 <UART_SetConfig+0x2f0>
 80068ae:	2000      	movs	r0, #0
 80068b0:	e7de      	b.n	8006870 <UART_SetConfig+0x2f0>
        ret = HAL_ERROR;
 80068b2:	2001      	movs	r0, #1
 80068b4:	e7dc      	b.n	8006870 <UART_SetConfig+0x2f0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80068b6:	2202      	movs	r2, #2
 80068b8:	e6d9      	b.n	800666e <UART_SetConfig+0xee>
 80068ba:	2204      	movs	r2, #4
 80068bc:	e6d7      	b.n	800666e <UART_SetConfig+0xee>
 80068be:	2204      	movs	r2, #4
 80068c0:	e6d5      	b.n	800666e <UART_SetConfig+0xee>
 80068c2:	2202      	movs	r2, #2
 80068c4:	e6d3      	b.n	800666e <UART_SetConfig+0xee>
 80068c6:	2202      	movs	r2, #2
 80068c8:	e6d1      	b.n	800666e <UART_SetConfig+0xee>
 80068ca:	2202      	movs	r2, #2
 80068cc:	e6cf      	b.n	800666e <UART_SetConfig+0xee>
 80068ce:	bf00      	nop
 80068d0:	00f42400 	.word	0x00f42400

080068d4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068d4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80068d6:	f013 0f08 	tst.w	r3, #8
 80068da:	d006      	beq.n	80068ea <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068dc:	6802      	ldr	r2, [r0, #0]
 80068de:	6853      	ldr	r3, [r2, #4]
 80068e0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068e4:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80068e6:	430b      	orrs	r3, r1
 80068e8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068ea:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80068ec:	f013 0f01 	tst.w	r3, #1
 80068f0:	d006      	beq.n	8006900 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068f2:	6802      	ldr	r2, [r0, #0]
 80068f4:	6853      	ldr	r3, [r2, #4]
 80068f6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80068fa:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80068fc:	430b      	orrs	r3, r1
 80068fe:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006900:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006902:	f013 0f02 	tst.w	r3, #2
 8006906:	d006      	beq.n	8006916 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006908:	6802      	ldr	r2, [r0, #0]
 800690a:	6853      	ldr	r3, [r2, #4]
 800690c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006910:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8006912:	430b      	orrs	r3, r1
 8006914:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006916:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006918:	f013 0f04 	tst.w	r3, #4
 800691c:	d006      	beq.n	800692c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800691e:	6802      	ldr	r2, [r0, #0]
 8006920:	6853      	ldr	r3, [r2, #4]
 8006922:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006926:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8006928:	430b      	orrs	r3, r1
 800692a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800692c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800692e:	f013 0f10 	tst.w	r3, #16
 8006932:	d006      	beq.n	8006942 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006934:	6802      	ldr	r2, [r0, #0]
 8006936:	6893      	ldr	r3, [r2, #8]
 8006938:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800693c:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800693e:	430b      	orrs	r3, r1
 8006940:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006942:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006944:	f013 0f20 	tst.w	r3, #32
 8006948:	d006      	beq.n	8006958 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800694a:	6802      	ldr	r2, [r0, #0]
 800694c:	6893      	ldr	r3, [r2, #8]
 800694e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006952:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8006954:	430b      	orrs	r3, r1
 8006956:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006958:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800695a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800695e:	d00a      	beq.n	8006976 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006960:	6802      	ldr	r2, [r0, #0]
 8006962:	6853      	ldr	r3, [r2, #4]
 8006964:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006968:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800696a:	430b      	orrs	r3, r1
 800696c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800696e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8006970:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006974:	d00b      	beq.n	800698e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006976:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006978:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800697c:	d006      	beq.n	800698c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800697e:	6802      	ldr	r2, [r0, #0]
 8006980:	6853      	ldr	r3, [r2, #4]
 8006982:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006986:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8006988:	430b      	orrs	r3, r1
 800698a:	6053      	str	r3, [r2, #4]
}
 800698c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800698e:	6802      	ldr	r2, [r0, #0]
 8006990:	6853      	ldr	r3, [r2, #4]
 8006992:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006996:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8006998:	430b      	orrs	r3, r1
 800699a:	6053      	str	r3, [r2, #4]
 800699c:	e7eb      	b.n	8006976 <UART_AdvFeatureConfig+0xa2>

0800699e <UART_WaitOnFlagUntilTimeout>:
{
 800699e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069a2:	4680      	mov	r8, r0
 80069a4:	460d      	mov	r5, r1
 80069a6:	4616      	mov	r6, r2
 80069a8:	4699      	mov	r9, r3
 80069aa:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ac:	f8d8 3000 	ldr.w	r3, [r8]
 80069b0:	69dc      	ldr	r4, [r3, #28]
 80069b2:	ea35 0404 	bics.w	r4, r5, r4
 80069b6:	bf0c      	ite	eq
 80069b8:	2401      	moveq	r4, #1
 80069ba:	2400      	movne	r4, #0
 80069bc:	42b4      	cmp	r4, r6
 80069be:	d135      	bne.n	8006a2c <UART_WaitOnFlagUntilTimeout+0x8e>
    if (Timeout != HAL_MAX_DELAY)
 80069c0:	f1b7 3fff 	cmp.w	r7, #4294967295
 80069c4:	d0f4      	beq.n	80069b0 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c6:	f7fc fd87 	bl	80034d8 <HAL_GetTick>
 80069ca:	eba0 0009 	sub.w	r0, r0, r9
 80069ce:	42b8      	cmp	r0, r7
 80069d0:	d82f      	bhi.n	8006a32 <UART_WaitOnFlagUntilTimeout+0x94>
 80069d2:	b387      	cbz	r7, 8006a36 <UART_WaitOnFlagUntilTimeout+0x98>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069d4:	f8d8 3000 	ldr.w	r3, [r8]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	f012 0f04 	tst.w	r2, #4
 80069de:	d0e5      	beq.n	80069ac <UART_WaitOnFlagUntilTimeout+0xe>
 80069e0:	2d80      	cmp	r5, #128	@ 0x80
 80069e2:	d0e3      	beq.n	80069ac <UART_WaitOnFlagUntilTimeout+0xe>
 80069e4:	2d40      	cmp	r5, #64	@ 0x40
 80069e6:	d0e1      	beq.n	80069ac <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069e8:	69da      	ldr	r2, [r3, #28]
 80069ea:	f012 0f08 	tst.w	r2, #8
 80069ee:	d111      	bne.n	8006a14 <UART_WaitOnFlagUntilTimeout+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069f0:	69da      	ldr	r2, [r3, #28]
 80069f2:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 80069f6:	d0d9      	beq.n	80069ac <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069fc:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80069fe:	4640      	mov	r0, r8
 8006a00:	f7ff fd95 	bl	800652e <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a04:	2320      	movs	r3, #32
 8006a06:	f8c8 3084 	str.w	r3, [r8, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	f888 3078 	strb.w	r3, [r8, #120]	@ 0x78
          return HAL_TIMEOUT;
 8006a10:	2003      	movs	r0, #3
 8006a12:	e00c      	b.n	8006a2e <UART_WaitOnFlagUntilTimeout+0x90>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a14:	2408      	movs	r4, #8
 8006a16:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 8006a18:	4640      	mov	r0, r8
 8006a1a:	f7ff fd88 	bl	800652e <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a1e:	f8c8 4084 	str.w	r4, [r8, #132]	@ 0x84
          __HAL_UNLOCK(huart);
 8006a22:	2300      	movs	r3, #0
 8006a24:	f888 3078 	strb.w	r3, [r8, #120]	@ 0x78
          return HAL_ERROR;
 8006a28:	2001      	movs	r0, #1
 8006a2a:	e000      	b.n	8006a2e <UART_WaitOnFlagUntilTimeout+0x90>
  return HAL_OK;
 8006a2c:	2000      	movs	r0, #0
}
 8006a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8006a32:	2003      	movs	r0, #3
 8006a34:	e7fb      	b.n	8006a2e <UART_WaitOnFlagUntilTimeout+0x90>
 8006a36:	2003      	movs	r0, #3
 8006a38:	e7f9      	b.n	8006a2e <UART_WaitOnFlagUntilTimeout+0x90>

08006a3a <HAL_UART_Transmit>:
{
 8006a3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8006a42:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8006a44:	2b20      	cmp	r3, #32
 8006a46:	d15d      	bne.n	8006b04 <HAL_UART_Transmit+0xca>
 8006a48:	4604      	mov	r4, r0
 8006a4a:	460d      	mov	r5, r1
 8006a4c:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8006a4e:	2900      	cmp	r1, #0
 8006a50:	d05c      	beq.n	8006b0c <HAL_UART_Transmit+0xd2>
 8006a52:	b90a      	cbnz	r2, 8006a58 <HAL_UART_Transmit+0x1e>
      return  HAL_ERROR;
 8006a54:	2001      	movs	r0, #1
 8006a56:	e056      	b.n	8006b06 <HAL_UART_Transmit+0xcc>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a5e:	2321      	movs	r3, #33	@ 0x21
 8006a60:	67c3      	str	r3, [r0, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 8006a62:	f7fc fd39 	bl	80034d8 <HAL_GetTick>
 8006a66:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8006a68:	f8a4 8050 	strh.w	r8, [r4, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006a6c:	f8a4 8052 	strh.w	r8, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a70:	68a3      	ldr	r3, [r4, #8]
 8006a72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a76:	d00a      	beq.n	8006a8e <HAL_UART_Transmit+0x54>
      pdata16bits = NULL;
 8006a78:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 8006a7c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	b383      	cbz	r3, 8006ae6 <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a84:	f04f 0900 	mov.w	r9, #0
 8006a88:	f04f 0880 	mov.w	r8, #128	@ 0x80
 8006a8c:	e01b      	b.n	8006ac6 <HAL_UART_Transmit+0x8c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a8e:	6923      	ldr	r3, [r4, #16]
 8006a90:	b113      	cbz	r3, 8006a98 <HAL_UART_Transmit+0x5e>
      pdata16bits = NULL;
 8006a92:	f04f 0a00 	mov.w	sl, #0
 8006a96:	e7f1      	b.n	8006a7c <HAL_UART_Transmit+0x42>
      pdata16bits = (const uint16_t *) pData;
 8006a98:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8006a9a:	2500      	movs	r5, #0
 8006a9c:	e7ee      	b.n	8006a7c <HAL_UART_Transmit+0x42>
        huart->gState = HAL_UART_STATE_READY;
 8006a9e:	2320      	movs	r3, #32
 8006aa0:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8006aa2:	2003      	movs	r0, #3
 8006aa4:	e02f      	b.n	8006b06 <HAL_UART_Transmit+0xcc>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006aa6:	6822      	ldr	r2, [r4, #0]
 8006aa8:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8006aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab0:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8006ab2:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8006ab6:	3a01      	subs	r2, #1
 8006ab8:	b292      	uxth	r2, r2
 8006aba:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006abe:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	b17b      	cbz	r3, 8006ae6 <HAL_UART_Transmit+0xac>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ac6:	9600      	str	r6, [sp, #0]
 8006ac8:	463b      	mov	r3, r7
 8006aca:	464a      	mov	r2, r9
 8006acc:	4641      	mov	r1, r8
 8006ace:	4620      	mov	r0, r4
 8006ad0:	f7ff ff65 	bl	800699e <UART_WaitOnFlagUntilTimeout>
 8006ad4:	2800      	cmp	r0, #0
 8006ad6:	d1e2      	bne.n	8006a9e <HAL_UART_Transmit+0x64>
      if (pdata8bits == NULL)
 8006ad8:	2d00      	cmp	r5, #0
 8006ada:	d0e4      	beq.n	8006aa6 <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	f815 2b01 	ldrb.w	r2, [r5], #1
 8006ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006ae4:	e7e5      	b.n	8006ab2 <HAL_UART_Transmit+0x78>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ae6:	9600      	str	r6, [sp, #0]
 8006ae8:	463b      	mov	r3, r7
 8006aea:	2200      	movs	r2, #0
 8006aec:	2140      	movs	r1, #64	@ 0x40
 8006aee:	4620      	mov	r0, r4
 8006af0:	f7ff ff55 	bl	800699e <UART_WaitOnFlagUntilTimeout>
 8006af4:	b910      	cbnz	r0, 8006afc <HAL_UART_Transmit+0xc2>
    huart->gState = HAL_UART_STATE_READY;
 8006af6:	2320      	movs	r3, #32
 8006af8:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8006afa:	e004      	b.n	8006b06 <HAL_UART_Transmit+0xcc>
      huart->gState = HAL_UART_STATE_READY;
 8006afc:	2320      	movs	r3, #32
 8006afe:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8006b00:	2003      	movs	r0, #3
 8006b02:	e000      	b.n	8006b06 <HAL_UART_Transmit+0xcc>
    return HAL_BUSY;
 8006b04:	2002      	movs	r0, #2
}
 8006b06:	b002      	add	sp, #8
 8006b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8006b0c:	2001      	movs	r0, #1
 8006b0e:	e7fa      	b.n	8006b06 <HAL_UART_Transmit+0xcc>

08006b10 <HAL_UART_Receive>:
{
 8006b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b14:	b083      	sub	sp, #12
 8006b16:	461e      	mov	r6, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b18:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	d177      	bne.n	8006c10 <HAL_UART_Receive+0x100>
 8006b20:	4604      	mov	r4, r0
 8006b22:	460d      	mov	r5, r1
 8006b24:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8006b26:	2900      	cmp	r1, #0
 8006b28:	d076      	beq.n	8006c18 <HAL_UART_Receive+0x108>
 8006b2a:	b90a      	cbnz	r2, 8006b30 <HAL_UART_Receive+0x20>
      return  HAL_ERROR;
 8006b2c:	2001      	movs	r0, #1
 8006b2e:	e070      	b.n	8006c12 <HAL_UART_Receive+0x102>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b30:	2300      	movs	r3, #0
 8006b32:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b36:	2222      	movs	r2, #34	@ 0x22
 8006b38:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b3c:	6603      	str	r3, [r0, #96]	@ 0x60
    tickstart = HAL_GetTick();
 8006b3e:	f7fc fccb 	bl	80034d8 <HAL_GetTick>
 8006b42:	4607      	mov	r7, r0
    huart->RxXferSize  = Size;
 8006b44:	f8a4 8058 	strh.w	r8, [r4, #88]	@ 0x58
    huart->RxXferCount = Size;
 8006b48:	f8a4 805a 	strh.w	r8, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 8006b4c:	68a3      	ldr	r3, [r4, #8]
 8006b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b52:	d016      	beq.n	8006b82 <HAL_UART_Receive+0x72>
 8006b54:	b9e3      	cbnz	r3, 8006b90 <HAL_UART_Receive+0x80>
 8006b56:	6923      	ldr	r3, [r4, #16]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	bf0c      	ite	eq
 8006b5c:	f04f 08ff 	moveq.w	r8, #255	@ 0xff
 8006b60:	f04f 087f 	movne.w	r8, #127	@ 0x7f
      pdata8bits  = NULL;
 8006b64:	4643      	mov	r3, r8
      pdata16bits = NULL;
 8006b66:	f04f 0b00 	mov.w	fp, #0
    UART_MASK_COMPUTATION(huart);
 8006b6a:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
    while (huart->RxXferCount > 0U)
 8006b6e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d046      	beq.n	8006c06 <HAL_UART_Receive+0xf6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006b78:	f04f 0a00 	mov.w	sl, #0
 8006b7c:	f04f 0920 	mov.w	r9, #32
 8006b80:	e02f      	b.n	8006be2 <HAL_UART_Receive+0xd2>
    UART_MASK_COMPUTATION(huart);
 8006b82:	6923      	ldr	r3, [r4, #16]
 8006b84:	b193      	cbz	r3, 8006bac <HAL_UART_Receive+0x9c>
 8006b86:	23ff      	movs	r3, #255	@ 0xff
 8006b88:	4698      	mov	r8, r3
      pdata16bits = NULL;
 8006b8a:	f04f 0b00 	mov.w	fp, #0
 8006b8e:	e7ec      	b.n	8006b6a <HAL_UART_Receive+0x5a>
    UART_MASK_COMPUTATION(huart);
 8006b90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b94:	d002      	beq.n	8006b9c <HAL_UART_Receive+0x8c>
 8006b96:	f04f 0800 	mov.w	r8, #0
 8006b9a:	e7e3      	b.n	8006b64 <HAL_UART_Receive+0x54>
 8006b9c:	6923      	ldr	r3, [r4, #16]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	bf0c      	ite	eq
 8006ba2:	f04f 087f 	moveq.w	r8, #127	@ 0x7f
 8006ba6:	f04f 083f 	movne.w	r8, #63	@ 0x3f
 8006baa:	e7db      	b.n	8006b64 <HAL_UART_Receive+0x54>
      pdata16bits = (uint16_t *) pData;
 8006bac:	46ab      	mov	fp, r5
    UART_MASK_COMPUTATION(huart);
 8006bae:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8006bb2:	4698      	mov	r8, r3
      pdata8bits  = NULL;
 8006bb4:	2500      	movs	r5, #0
 8006bb6:	e7d8      	b.n	8006b6a <HAL_UART_Receive+0x5a>
        huart->RxState = HAL_UART_STATE_READY;
 8006bb8:	2320      	movs	r3, #32
 8006bba:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 8006bbe:	2003      	movs	r0, #3
 8006bc0:	e027      	b.n	8006c12 <HAL_UART_Receive+0x102>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006bc2:	6823      	ldr	r3, [r4, #0]
 8006bc4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006bc6:	ea08 0303 	and.w	r3, r8, r3
 8006bca:	f82b 3b02 	strh.w	r3, [fp], #2
      huart->RxXferCount--;
 8006bce:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006bda:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	b18b      	cbz	r3, 8006c06 <HAL_UART_Receive+0xf6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006be2:	9600      	str	r6, [sp, #0]
 8006be4:	463b      	mov	r3, r7
 8006be6:	4652      	mov	r2, sl
 8006be8:	4649      	mov	r1, r9
 8006bea:	4620      	mov	r0, r4
 8006bec:	f7ff fed7 	bl	800699e <UART_WaitOnFlagUntilTimeout>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	d1e1      	bne.n	8006bb8 <HAL_UART_Receive+0xa8>
      if (pdata8bits == NULL)
 8006bf4:	2d00      	cmp	r5, #0
 8006bf6:	d0e4      	beq.n	8006bc2 <HAL_UART_Receive+0xb2>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8006bfc:	ea08 0303 	and.w	r3, r8, r3
 8006c00:	f805 3b01 	strb.w	r3, [r5], #1
        pdata8bits++;
 8006c04:	e7e3      	b.n	8006bce <HAL_UART_Receive+0xbe>
    huart->RxState = HAL_UART_STATE_READY;
 8006c06:	2320      	movs	r3, #32
 8006c08:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    return HAL_OK;
 8006c0c:	2000      	movs	r0, #0
 8006c0e:	e000      	b.n	8006c12 <HAL_UART_Receive+0x102>
    return HAL_BUSY;
 8006c10:	2002      	movs	r0, #2
}
 8006c12:	b003      	add	sp, #12
 8006c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return  HAL_ERROR;
 8006c18:	2001      	movs	r0, #1
 8006c1a:	e7fa      	b.n	8006c12 <HAL_UART_Receive+0x102>

08006c1c <UART_CheckIdleState>:
{
 8006c1c:	b530      	push	{r4, r5, lr}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c22:	2300      	movs	r3, #0
 8006c24:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8006c28:	f7fc fc56 	bl	80034d8 <HAL_GetTick>
 8006c2c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c2e:	6822      	ldr	r2, [r4, #0]
 8006c30:	6812      	ldr	r2, [r2, #0]
 8006c32:	f012 0f08 	tst.w	r2, #8
 8006c36:	d110      	bne.n	8006c5a <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c38:	6823      	ldr	r3, [r4, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f013 0f04 	tst.w	r3, #4
 8006c40:	d124      	bne.n	8006c8c <UART_CheckIdleState+0x70>
  huart->gState = HAL_UART_STATE_READY;
 8006c42:	2320      	movs	r3, #32
 8006c44:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c46:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	6620      	str	r0, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c4e:	6660      	str	r0, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 8006c50:	2300      	movs	r3, #0
 8006c52:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8006c56:	b003      	add	sp, #12
 8006c58:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c5a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	4603      	mov	r3, r0
 8006c62:	2200      	movs	r2, #0
 8006c64:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c68:	4620      	mov	r0, r4
 8006c6a:	f7ff fe98 	bl	800699e <UART_WaitOnFlagUntilTimeout>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d0e2      	beq.n	8006c38 <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006c72:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c74:	e852 3f00 	ldrex	r3, [r2]
 8006c78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7c:	e842 3100 	strex	r1, r3, [r2]
 8006c80:	2900      	cmp	r1, #0
 8006c82:	d1f6      	bne.n	8006c72 <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 8006c84:	2320      	movs	r3, #32
 8006c86:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8006c88:	2003      	movs	r0, #3
 8006c8a:	e7e1      	b.n	8006c50 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c90:	9300      	str	r3, [sp, #0]
 8006c92:	462b      	mov	r3, r5
 8006c94:	2200      	movs	r2, #0
 8006c96:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f7ff fe7f 	bl	800699e <UART_WaitOnFlagUntilTimeout>
 8006ca0:	2800      	cmp	r0, #0
 8006ca2:	d0ce      	beq.n	8006c42 <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ca4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca6:	e852 3f00 	ldrex	r3, [r2]
 8006caa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cae:	e842 3100 	strex	r1, r3, [r2]
 8006cb2:	2900      	cmp	r1, #0
 8006cb4:	d1f6      	bne.n	8006ca4 <UART_CheckIdleState+0x88>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cb6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb8:	f102 0308 	add.w	r3, r2, #8
 8006cbc:	e853 3f00 	ldrex	r3, [r3]
 8006cc0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc4:	3208      	adds	r2, #8
 8006cc6:	e842 3100 	strex	r1, r3, [r2]
 8006cca:	2900      	cmp	r1, #0
 8006ccc:	d1f3      	bne.n	8006cb6 <UART_CheckIdleState+0x9a>
      huart->RxState = HAL_UART_STATE_READY;
 8006cce:	2320      	movs	r3, #32
 8006cd0:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 8006cd4:	2003      	movs	r0, #3
 8006cd6:	e7bb      	b.n	8006c50 <UART_CheckIdleState+0x34>

08006cd8 <HAL_UART_Init>:
  if (huart == NULL)
 8006cd8:	b368      	cbz	r0, 8006d36 <HAL_UART_Init+0x5e>
{
 8006cda:	b510      	push	{r4, lr}
 8006cdc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006cde:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8006ce0:	b303      	cbz	r3, 8006d24 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8006ce2:	2324      	movs	r3, #36	@ 0x24
 8006ce4:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8006ce6:	6822      	ldr	r2, [r4, #0]
 8006ce8:	6813      	ldr	r3, [r2, #0]
 8006cea:	f023 0301 	bic.w	r3, r3, #1
 8006cee:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006cf0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006cf2:	b9e3      	cbnz	r3, 8006d2e <HAL_UART_Init+0x56>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	f7ff fc43 	bl	8006580 <UART_SetConfig>
 8006cfa:	2801      	cmp	r0, #1
 8006cfc:	d011      	beq.n	8006d22 <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cfe:	6822      	ldr	r2, [r4, #0]
 8006d00:	6853      	ldr	r3, [r2, #4]
 8006d02:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8006d06:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d08:	6822      	ldr	r2, [r4, #0]
 8006d0a:	6893      	ldr	r3, [r2, #8]
 8006d0c:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8006d10:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8006d12:	6822      	ldr	r2, [r4, #0]
 8006d14:	6813      	ldr	r3, [r2, #0]
 8006d16:	f043 0301 	orr.w	r3, r3, #1
 8006d1a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	f7ff ff7d 	bl	8006c1c <UART_CheckIdleState>
}
 8006d22:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8006d24:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8006d28:	f7fc fae4 	bl	80032f4 <HAL_UART_MspInit>
 8006d2c:	e7d9      	b.n	8006ce2 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8006d2e:	4620      	mov	r0, r4
 8006d30:	f7ff fdd0 	bl	80068d4 <UART_AdvFeatureConfig>
 8006d34:	e7de      	b.n	8006cf4 <HAL_UART_Init+0x1c>
    return HAL_ERROR;
 8006d36:	2001      	movs	r0, #1
}
 8006d38:	4770      	bx	lr
	...

08006d3c <arm_split_rfft_q15>:
 8006d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d40:	b083      	sub	sp, #12
 8006d42:	f101 4580 	add.w	r5, r1, #1073741824	@ 0x40000000
 8006d46:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006d48:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8006d4a:	3d01      	subs	r5, #1
 8006d4c:	eb04 06c1 	add.w	r6, r4, r1, lsl #3
 8006d50:	00ac      	lsls	r4, r5, #2
 8006d52:	9401      	str	r4, [sp, #4]
 8006d54:	1e4c      	subs	r4, r1, #1
 8006d56:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8006d5a:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8006d5e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8006d62:	d02d      	beq.n	8006dc0 <arm_split_rfft_q15+0x84>
 8006d64:	2f01      	cmp	r7, #1
 8006d66:	f1a6 0c04 	sub.w	ip, r6, #4
 8006d6a:	f100 0604 	add.w	r6, r0, #4
 8006d6e:	d13e      	bne.n	8006dee <arm_split_rfft_q15+0xb2>
 8006d70:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8006d72:	f1ac 0104 	sub.w	r1, ip, #4
 8006d76:	f107 0808 	add.w	r8, r7, #8
 8006d7a:	f856 7b04 	ldr.w	r7, [r6], #4
 8006d7e:	f852 9b04 	ldr.w	r9, [r2], #4
 8006d82:	fb47 fc09 	smusd	ip, r7, r9
 8006d86:	f855 e904 	ldr.w	lr, [r5], #-4
 8006d8a:	f853 ab04 	ldr.w	sl, [r3], #4
 8006d8e:	fb2e cc0a 	smlad	ip, lr, sl, ip
 8006d92:	fb4e fe1a 	smusdx	lr, lr, sl
 8006d96:	fb27 e719 	smladx	r7, r7, r9, lr
 8006d9a:	143f      	asrs	r7, r7, #16
 8006d9c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8006da0:	f1c7 0e00 	rsb	lr, r7, #0
 8006da4:	3c01      	subs	r4, #1
 8006da6:	f828 7c02 	strh.w	r7, [r8, #-2]
 8006daa:	f828 cc04 	strh.w	ip, [r8, #-4]
 8006dae:	f1a1 0104 	sub.w	r1, r1, #4
 8006db2:	f8a1 e00a 	strh.w	lr, [r1, #10]
 8006db6:	f8a1 c008 	strh.w	ip, [r1, #8]
 8006dba:	f108 0804 	add.w	r8, r8, #4
 8006dbe:	d1dc      	bne.n	8006d7a <arm_split_rfft_q15+0x3e>
 8006dc0:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8006dc4:	f9b0 3000 	ldrsh.w	r3, [r0]
 8006dc8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006dca:	9a01      	ldr	r2, [sp, #4]
 8006dcc:	1a5b      	subs	r3, r3, r1
 8006dce:	4422      	add	r2, r4
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	105b      	asrs	r3, r3, #1
 8006dd4:	8093      	strh	r3, [r2, #4]
 8006dd6:	80d1      	strh	r1, [r2, #6]
 8006dd8:	f9b0 3000 	ldrsh.w	r3, [r0]
 8006ddc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8006de0:	8061      	strh	r1, [r4, #2]
 8006de2:	4413      	add	r3, r2
 8006de4:	105b      	asrs	r3, r3, #1
 8006de6:	8023      	strh	r3, [r4, #0]
 8006de8:	b003      	add	sp, #12
 8006dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dee:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8006df2:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8006df4:	f1ac 0104 	sub.w	r1, ip, #4
 8006df8:	f107 0808 	add.w	r8, r7, #8
 8006dfc:	f856 7b04 	ldr.w	r7, [r6], #4
 8006e00:	f8d2 9000 	ldr.w	r9, [r2]
 8006e04:	fb47 fc09 	smusd	ip, r7, r9
 8006e08:	f855 e904 	ldr.w	lr, [r5], #-4
 8006e0c:	f8d3 a000 	ldr.w	sl, [r3]
 8006e10:	fb2e cc0a 	smlad	ip, lr, sl, ip
 8006e14:	fb4e fe1a 	smusdx	lr, lr, sl
 8006e18:	fb27 e719 	smladx	r7, r7, r9, lr
 8006e1c:	143f      	asrs	r7, r7, #16
 8006e1e:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8006e22:	f1c7 0e00 	rsb	lr, r7, #0
 8006e26:	3c01      	subs	r4, #1
 8006e28:	f828 7c02 	strh.w	r7, [r8, #-2]
 8006e2c:	f828 cc04 	strh.w	ip, [r8, #-4]
 8006e30:	445b      	add	r3, fp
 8006e32:	f8a1 e006 	strh.w	lr, [r1, #6]
 8006e36:	f8a1 c004 	strh.w	ip, [r1, #4]
 8006e3a:	445a      	add	r2, fp
 8006e3c:	f108 0804 	add.w	r8, r8, #4
 8006e40:	f1a1 0104 	sub.w	r1, r1, #4
 8006e44:	d1da      	bne.n	8006dfc <arm_split_rfft_q15+0xc0>
 8006e46:	e7bb      	b.n	8006dc0 <arm_split_rfft_q15+0x84>

08006e48 <arm_rfft_q15>:
 8006e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4c:	f890 e004 	ldrb.w	lr, [r0, #4]
 8006e50:	6806      	ldr	r6, [r0, #0]
 8006e52:	f1be 0f01 	cmp.w	lr, #1
 8006e56:	4604      	mov	r4, r0
 8006e58:	b083      	sub	sp, #12
 8006e5a:	6940      	ldr	r0, [r0, #20]
 8006e5c:	4615      	mov	r5, r2
 8006e5e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006e62:	460f      	mov	r7, r1
 8006e64:	d00f      	beq.n	8006e86 <arm_rfft_q15+0x3e>
 8006e66:	7963      	ldrb	r3, [r4, #5]
 8006e68:	4672      	mov	r2, lr
 8006e6a:	f000 fd75 	bl	8007958 <arm_cfft_q15>
 8006e6e:	68a3      	ldr	r3, [r4, #8]
 8006e70:	9301      	str	r3, [sp, #4]
 8006e72:	9500      	str	r5, [sp, #0]
 8006e74:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 8006e78:	4631      	mov	r1, r6
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	f7ff ff5e 	bl	8006d3c <arm_split_rfft_q15>
 8006e80:	b003      	add	sp, #12
 8006e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e86:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
 8006e8a:	68a2      	ldr	r2, [r4, #8]
 8006e8c:	eb07 0c86 	add.w	ip, r7, r6, lsl #2
 8006e90:	b30e      	cbz	r6, 8006ed6 <arm_rfft_q15+0x8e>
 8006e92:	2a01      	cmp	r2, #1
 8006e94:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8006e98:	d132      	bne.n	8006f00 <arm_rfft_q15+0xb8>
 8006e9a:	46a9      	mov	r9, r5
 8006e9c:	f85c 8904 	ldr.w	r8, [ip], #-4
 8006ea0:	f851 2b04 	ldr.w	r2, [r1], #4
 8006ea4:	fb48 fa02 	smusd	sl, r8, r2
 8006ea8:	f857 bb04 	ldr.w	fp, [r7], #4
 8006eac:	f853 eb04 	ldr.w	lr, [r3], #4
 8006eb0:	fb2b aa0e 	smlad	sl, fp, lr, sl
 8006eb4:	fb28 f812 	smuadx	r8, r8, r2
 8006eb8:	f1c8 0200 	rsb	r2, r8, #0
 8006ebc:	fb4e 2e1b 	smlsdx	lr, lr, fp, r2
 8006ec0:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8006ec4:	0412      	lsls	r2, r2, #16
 8006ec6:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 8006eca:	3e01      	subs	r6, #1
 8006ecc:	f849 2b04 	str.w	r2, [r9], #4
 8006ed0:	d1e4      	bne.n	8006e9c <arm_rfft_q15+0x54>
 8006ed2:	f894 e004 	ldrb.w	lr, [r4, #4]
 8006ed6:	7963      	ldrb	r3, [r4, #5]
 8006ed8:	4672      	mov	r2, lr
 8006eda:	4629      	mov	r1, r5
 8006edc:	f000 fd3c 	bl	8007958 <arm_cfft_q15>
 8006ee0:	6823      	ldr	r3, [r4, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0cc      	beq.n	8006e80 <arm_rfft_q15+0x38>
 8006ee6:	3d02      	subs	r5, #2
 8006ee8:	2100      	movs	r1, #0
 8006eea:	f935 3f02 	ldrsh.w	r3, [r5, #2]!
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	802b      	strh	r3, [r5, #0]
 8006ef2:	6823      	ldr	r3, [r4, #0]
 8006ef4:	3101      	adds	r1, #1
 8006ef6:	428b      	cmp	r3, r1
 8006ef8:	d8f7      	bhi.n	8006eea <arm_rfft_q15+0xa2>
 8006efa:	b003      	add	sp, #12
 8006efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f00:	ee07 0a90 	vmov	s15, r0
 8006f04:	46a8      	mov	r8, r5
 8006f06:	f85c e904 	ldr.w	lr, [ip], #-4
 8006f0a:	6808      	ldr	r0, [r1, #0]
 8006f0c:	fb4e f900 	smusd	r9, lr, r0
 8006f10:	f857 ab04 	ldr.w	sl, [r7], #4
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	fb2a 9902 	smlad	r9, sl, r2, r9
 8006f1a:	fb2e fe10 	smuadx	lr, lr, r0
 8006f1e:	f1ce 0e00 	rsb	lr, lr, #0
 8006f22:	fb42 e21a 	smlsdx	r2, r2, sl, lr
 8006f26:	0c12      	lsrs	r2, r2, #16
 8006f28:	0412      	lsls	r2, r2, #16
 8006f2a:	ea42 4219 	orr.w	r2, r2, r9, lsr #16
 8006f2e:	3e01      	subs	r6, #1
 8006f30:	f848 2b04 	str.w	r2, [r8], #4
 8006f34:	4459      	add	r1, fp
 8006f36:	445b      	add	r3, fp
 8006f38:	d1e5      	bne.n	8006f06 <arm_rfft_q15+0xbe>
 8006f3a:	ee17 0a90 	vmov	r0, s15
 8006f3e:	e7c8      	b.n	8006ed2 <arm_rfft_q15+0x8a>

08006f40 <arm_rfft_init_q15>:
 8006f40:	b430      	push	{r4, r5}
 8006f42:	b289      	uxth	r1, r1
 8006f44:	4d31      	ldr	r5, [pc, #196]	@ (800700c <arm_rfft_init_q15+0xcc>)
 8006f46:	4c32      	ldr	r4, [pc, #200]	@ (8007010 <arm_rfft_init_q15+0xd0>)
 8006f48:	6001      	str	r1, [r0, #0]
 8006f4a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006f4e:	e9c0 5403 	strd	r5, r4, [r0, #12]
 8006f52:	7102      	strb	r2, [r0, #4]
 8006f54:	7143      	strb	r3, [r0, #5]
 8006f56:	d053      	beq.n	8007000 <arm_rfft_init_q15+0xc0>
 8006f58:	d91a      	bls.n	8006f90 <arm_rfft_init_q15+0x50>
 8006f5a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006f5e:	d033      	beq.n	8006fc8 <arm_rfft_init_q15+0x88>
 8006f60:	d909      	bls.n	8006f76 <arm_rfft_init_q15+0x36>
 8006f62:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8006f66:	d12b      	bne.n	8006fc0 <arm_rfft_init_q15+0x80>
 8006f68:	4b2a      	ldr	r3, [pc, #168]	@ (8007014 <arm_rfft_init_q15+0xd4>)
 8006f6a:	6143      	str	r3, [r0, #20]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	6082      	str	r2, [r0, #8]
 8006f70:	2000      	movs	r0, #0
 8006f72:	bc30      	pop	{r4, r5}
 8006f74:	4770      	bx	lr
 8006f76:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006f7a:	d02c      	beq.n	8006fd6 <arm_rfft_init_q15+0x96>
 8006f7c:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8006f80:	d11e      	bne.n	8006fc0 <arm_rfft_init_q15+0x80>
 8006f82:	4b25      	ldr	r3, [pc, #148]	@ (8007018 <arm_rfft_init_q15+0xd8>)
 8006f84:	6143      	str	r3, [r0, #20]
 8006f86:	2204      	movs	r2, #4
 8006f88:	6082      	str	r2, [r0, #8]
 8006f8a:	bc30      	pop	{r4, r5}
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	4770      	bx	lr
 8006f90:	2980      	cmp	r1, #128	@ 0x80
 8006f92:	d027      	beq.n	8006fe4 <arm_rfft_init_q15+0xa4>
 8006f94:	d909      	bls.n	8006faa <arm_rfft_init_q15+0x6a>
 8006f96:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8006f9a:	d111      	bne.n	8006fc0 <arm_rfft_init_q15+0x80>
 8006f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800701c <arm_rfft_init_q15+0xdc>)
 8006f9e:	6143      	str	r3, [r0, #20]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	6082      	str	r2, [r0, #8]
 8006fa4:	bc30      	pop	{r4, r5}
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	4770      	bx	lr
 8006faa:	2920      	cmp	r1, #32
 8006fac:	d021      	beq.n	8006ff2 <arm_rfft_init_q15+0xb2>
 8006fae:	2940      	cmp	r1, #64	@ 0x40
 8006fb0:	d106      	bne.n	8006fc0 <arm_rfft_init_q15+0x80>
 8006fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8007020 <arm_rfft_init_q15+0xe0>)
 8006fb4:	6143      	str	r3, [r0, #20]
 8006fb6:	2280      	movs	r2, #128	@ 0x80
 8006fb8:	6082      	str	r2, [r0, #8]
 8006fba:	bc30      	pop	{r4, r5}
 8006fbc:	2000      	movs	r0, #0
 8006fbe:	4770      	bx	lr
 8006fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc4:	bc30      	pop	{r4, r5}
 8006fc6:	4770      	bx	lr
 8006fc8:	4b16      	ldr	r3, [pc, #88]	@ (8007024 <arm_rfft_init_q15+0xe4>)
 8006fca:	6143      	str	r3, [r0, #20]
 8006fcc:	2202      	movs	r2, #2
 8006fce:	6082      	str	r2, [r0, #8]
 8006fd0:	bc30      	pop	{r4, r5}
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	4770      	bx	lr
 8006fd6:	4b14      	ldr	r3, [pc, #80]	@ (8007028 <arm_rfft_init_q15+0xe8>)
 8006fd8:	6143      	str	r3, [r0, #20]
 8006fda:	2208      	movs	r2, #8
 8006fdc:	6082      	str	r2, [r0, #8]
 8006fde:	bc30      	pop	{r4, r5}
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	4770      	bx	lr
 8006fe4:	4b11      	ldr	r3, [pc, #68]	@ (800702c <arm_rfft_init_q15+0xec>)
 8006fe6:	6143      	str	r3, [r0, #20]
 8006fe8:	2240      	movs	r2, #64	@ 0x40
 8006fea:	6082      	str	r2, [r0, #8]
 8006fec:	bc30      	pop	{r4, r5}
 8006fee:	2000      	movs	r0, #0
 8006ff0:	4770      	bx	lr
 8006ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8007030 <arm_rfft_init_q15+0xf0>)
 8006ff4:	6143      	str	r3, [r0, #20]
 8006ff6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006ffa:	6082      	str	r2, [r0, #8]
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	e7b8      	b.n	8006f72 <arm_rfft_init_q15+0x32>
 8007000:	4b0c      	ldr	r3, [pc, #48]	@ (8007034 <arm_rfft_init_q15+0xf4>)
 8007002:	6143      	str	r3, [r0, #20]
 8007004:	2210      	movs	r2, #16
 8007006:	6082      	str	r2, [r0, #8]
 8007008:	2000      	movs	r0, #0
 800700a:	e7b2      	b.n	8006f72 <arm_rfft_init_q15+0x32>
 800700c:	0800ef98 	.word	0x0800ef98
 8007010:	08012f98 	.word	0x08012f98
 8007014:	0800b170 	.word	0x0800b170
 8007018:	0800b110 	.word	0x0800b110
 800701c:	0800b120 	.word	0x0800b120
 8007020:	0800b160 	.word	0x0800b160
 8007024:	0800b140 	.word	0x0800b140
 8007028:	0800b180 	.word	0x0800b180
 800702c:	0800b190 	.word	0x0800b190
 8007030:	0800b130 	.word	0x0800b130
 8007034:	0800b150 	.word	0x0800b150

08007038 <arm_mat_mult_fast_q15>:
 8007038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800703c:	b09d      	sub	sp, #116	@ 0x74
 800703e:	880f      	ldrh	r7, [r1, #0]
 8007040:	9009      	str	r0, [sp, #36]	@ 0x24
 8007042:	4606      	mov	r6, r0
 8007044:	8840      	ldrh	r0, [r0, #2]
 8007046:	884d      	ldrh	r5, [r1, #2]
 8007048:	8836      	ldrh	r6, [r6, #0]
 800704a:	684c      	ldr	r4, [r1, #4]
 800704c:	9017      	str	r0, [sp, #92]	@ 0x5c
 800704e:	42b8      	cmp	r0, r7
 8007050:	971a      	str	r7, [sp, #104]	@ 0x68
 8007052:	9518      	str	r5, [sp, #96]	@ 0x60
 8007054:	9616      	str	r6, [sp, #88]	@ 0x58
 8007056:	9219      	str	r2, [sp, #100]	@ 0x64
 8007058:	9311      	str	r3, [sp, #68]	@ 0x44
 800705a:	f040 81e9 	bne.w	8007430 <arm_mat_mult_fast_q15+0x3f8>
 800705e:	8813      	ldrh	r3, [r2, #0]
 8007060:	42b3      	cmp	r3, r6
 8007062:	f040 81e5 	bne.w	8007430 <arm_mat_mult_fast_q15+0x3f8>
 8007066:	8853      	ldrh	r3, [r2, #2]
 8007068:	42ab      	cmp	r3, r5
 800706a:	f040 81e1 	bne.w	8007430 <arm_mat_mult_fast_q15+0x3f8>
 800706e:	0043      	lsls	r3, r0, #1
 8007070:	2801      	cmp	r0, #1
 8007072:	ea4f 0695 	mov.w	r6, r5, lsr #2
 8007076:	9306      	str	r3, [sp, #24]
 8007078:	f005 0703 	and.w	r7, r5, #3
 800707c:	d133      	bne.n	80070e6 <arm_mat_mult_fast_q15+0xae>
 800707e:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8007082:	fb06 fc03 	mul.w	ip, r6, r3
 8007086:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800708a:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 800708e:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8007092:	4655      	mov	r5, sl
 8007094:	4699      	mov	r9, r3
 8007096:	462b      	mov	r3, r5
 8007098:	b1ae      	cbz	r6, 80070c6 <arm_mat_mult_fast_q15+0x8e>
 800709a:	4621      	mov	r1, r4
 800709c:	4630      	mov	r0, r6
 800709e:	680a      	ldr	r2, [r1, #0]
 80070a0:	801a      	strh	r2, [r3, #0]
 80070a2:	1412      	asrs	r2, r2, #16
 80070a4:	f823 2009 	strh.w	r2, [r3, r9]
 80070a8:	684a      	ldr	r2, [r1, #4]
 80070aa:	f823 2019 	strh.w	r2, [r3, r9, lsl #1]
 80070ae:	3801      	subs	r0, #1
 80070b0:	ea4f 4222 	mov.w	r2, r2, asr #16
 80070b4:	80da      	strh	r2, [r3, #6]
 80070b6:	f101 0108 	add.w	r1, r1, #8
 80070ba:	f103 0308 	add.w	r3, r3, #8
 80070be:	d1ee      	bne.n	800709e <arm_mat_mult_fast_q15+0x66>
 80070c0:	4444      	add	r4, r8
 80070c2:	eb05 030c 	add.w	r3, r5, ip
 80070c6:	b147      	cbz	r7, 80070da <arm_mat_mult_fast_q15+0xa2>
 80070c8:	4621      	mov	r1, r4
 80070ca:	463a      	mov	r2, r7
 80070cc:	f931 0b02 	ldrsh.w	r0, [r1], #2
 80070d0:	8018      	strh	r0, [r3, #0]
 80070d2:	3a01      	subs	r2, #1
 80070d4:	444b      	add	r3, r9
 80070d6:	d1f9      	bne.n	80070cc <arm_mat_mult_fast_q15+0x94>
 80070d8:	4474      	add	r4, lr
 80070da:	45aa      	cmp	sl, r5
 80070dc:	f105 0302 	add.w	r3, r5, #2
 80070e0:	d038      	beq.n	8007154 <arm_mat_mult_fast_q15+0x11c>
 80070e2:	461d      	mov	r5, r3
 80070e4:	e7d7      	b.n	8007096 <arm_mat_mult_fast_q15+0x5e>
 80070e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80070e8:	181d      	adds	r5, r3, r0
 80070ea:	fb06 f803 	mul.w	r8, r6, r3
 80070ee:	4696      	mov	lr, r2
 80070f0:	441a      	add	r2, r3
 80070f2:	006d      	lsls	r5, r5, #1
 80070f4:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80070f8:	9212      	str	r2, [sp, #72]	@ 0x48
 80070fa:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 80070fe:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8007102:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8007106:	469b      	mov	fp, r3
 8007108:	4673      	mov	r3, lr
 800710a:	b1a6      	cbz	r6, 8007136 <arm_mat_mult_fast_q15+0xfe>
 800710c:	4621      	mov	r1, r4
 800710e:	4630      	mov	r0, r6
 8007110:	680a      	ldr	r2, [r1, #0]
 8007112:	801a      	strh	r2, [r3, #0]
 8007114:	1412      	asrs	r2, r2, #16
 8007116:	f823 200b 	strh.w	r2, [r3, fp]
 800711a:	684a      	ldr	r2, [r1, #4]
 800711c:	f823 201b 	strh.w	r2, [r3, fp, lsl #1]
 8007120:	3801      	subs	r0, #1
 8007122:	ea4f 4222 	mov.w	r2, r2, asr #16
 8007126:	535a      	strh	r2, [r3, r5]
 8007128:	f101 0108 	add.w	r1, r1, #8
 800712c:	4463      	add	r3, ip
 800712e:	d1ef      	bne.n	8007110 <arm_mat_mult_fast_q15+0xd8>
 8007130:	444c      	add	r4, r9
 8007132:	eb0e 0308 	add.w	r3, lr, r8
 8007136:	b147      	cbz	r7, 800714a <arm_mat_mult_fast_q15+0x112>
 8007138:	4621      	mov	r1, r4
 800713a:	463a      	mov	r2, r7
 800713c:	f931 0b02 	ldrsh.w	r0, [r1], #2
 8007140:	8018      	strh	r0, [r3, #0]
 8007142:	3a01      	subs	r2, #1
 8007144:	445b      	add	r3, fp
 8007146:	d1f9      	bne.n	800713c <arm_mat_mult_fast_q15+0x104>
 8007148:	4454      	add	r4, sl
 800714a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800714c:	f10e 0e02 	add.w	lr, lr, #2
 8007150:	4573      	cmp	r3, lr
 8007152:	d1d9      	bne.n	8007108 <arm_mat_mult_fast_q15+0xd0>
 8007154:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007156:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800715c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800715e:	004c      	lsls	r4, r1, #1
 8007160:	eb03 0541 	add.w	r5, r3, r1, lsl #1
 8007164:	0852      	lsrs	r2, r2, #1
 8007166:	9415      	str	r4, [sp, #84]	@ 0x54
 8007168:	950d      	str	r5, [sp, #52]	@ 0x34
 800716a:	9210      	str	r2, [sp, #64]	@ 0x40
 800716c:	f000 80b1 	beq.w	80072d2 <arm_mat_mult_fast_q15+0x29a>
 8007170:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8007172:	460a      	mov	r2, r1
 8007174:	0846      	lsrs	r6, r0, #1
 8007176:	f001 0101 	and.w	r1, r1, #1
 800717a:	f000 0001 	and.w	r0, r0, #1
 800717e:	0852      	lsrs	r2, r2, #1
 8007180:	911b      	str	r1, [sp, #108]	@ 0x6c
 8007182:	9607      	str	r6, [sp, #28]
 8007184:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007188:	900a      	str	r0, [sp, #40]	@ 0x28
 800718a:	f000 809f 	beq.w	80072cc <arm_mat_mult_fast_q15+0x294>
 800718e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007192:	1ac8      	subs	r0, r1, r3
 8007194:	3304      	adds	r3, #4
 8007196:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800719a:	9205      	str	r2, [sp, #20]
 800719c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800719e:	0092      	lsls	r2, r2, #2
 80071a0:	920b      	str	r2, [sp, #44]	@ 0x2c
 80071a2:	00b2      	lsls	r2, r6, #2
 80071a4:	1861      	adds	r1, r4, r1
 80071a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80071a8:	2200      	movs	r2, #0
 80071aa:	9114      	str	r1, [sp, #80]	@ 0x50
 80071ac:	920e      	str	r2, [sp, #56]	@ 0x38
 80071ae:	9906      	ldr	r1, [sp, #24]
 80071b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80071b2:	1828      	adds	r0, r5, r0
 80071b4:	440a      	add	r2, r1
 80071b6:	9013      	str	r0, [sp, #76]	@ 0x4c
 80071b8:	9212      	str	r2, [sp, #72]	@ 0x48
 80071ba:	9304      	str	r3, [sp, #16]
 80071bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071be:	005b      	lsls	r3, r3, #1
 80071c0:	9308      	str	r3, [sp, #32]
 80071c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071c4:	3304      	adds	r3, #4
 80071c6:	9303      	str	r3, [sp, #12]
 80071c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80071ca:	9301      	str	r3, [sp, #4]
 80071cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071d2:	9a08      	ldr	r2, [sp, #32]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	eb03 0b02 	add.w	fp, r3, r2
 80071da:	9b06      	ldr	r3, [sp, #24]
 80071dc:	eb0b 0203 	add.w	r2, fp, r3
 80071e0:	9b07      	ldr	r3, [sp, #28]
 80071e2:	9202      	str	r2, [sp, #8]
 80071e4:	e9dd e800 	ldrd	lr, r8, [sp]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d06a      	beq.n	80072c2 <arm_mat_mult_fast_q15+0x28a>
 80071ec:	2500      	movs	r5, #0
 80071ee:	462e      	mov	r6, r5
 80071f0:	462f      	mov	r7, r5
 80071f2:	46ac      	mov	ip, r5
 80071f4:	4692      	mov	sl, r2
 80071f6:	46d9      	mov	r9, fp
 80071f8:	f859 4b04 	ldr.w	r4, [r9], #4
 80071fc:	f858 0b04 	ldr.w	r0, [r8], #4
 8007200:	f85a 2b04 	ldr.w	r2, [sl], #4
 8007204:	f85e 1b04 	ldr.w	r1, [lr], #4
 8007208:	fb24 cc00 	smlad	ip, r4, r0, ip
 800720c:	fb24 7701 	smlad	r7, r4, r1, r7
 8007210:	fb22 6600 	smlad	r6, r2, r0, r6
 8007214:	fb22 5501 	smlad	r5, r2, r1, r5
 8007218:	3b01      	subs	r3, #1
 800721a:	d1ed      	bne.n	80071f8 <arm_mat_mult_fast_q15+0x1c0>
 800721c:	9a02      	ldr	r2, [sp, #8]
 800721e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007220:	4611      	mov	r1, r2
 8007222:	9a00      	ldr	r2, [sp, #0]
 8007224:	eb02 0e03 	add.w	lr, r2, r3
 8007228:	9a01      	ldr	r2, [sp, #4]
 800722a:	4419      	add	r1, r3
 800722c:	9102      	str	r1, [sp, #8]
 800722e:	449b      	add	fp, r3
 8007230:	eb02 0803 	add.w	r8, r2, r3
 8007234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007236:	b183      	cbz	r3, 800725a <arm_mat_mult_fast_q15+0x222>
 8007238:	9902      	ldr	r1, [sp, #8]
 800723a:	f9bb 3000 	ldrsh.w	r3, [fp]
 800723e:	f9b8 2000 	ldrsh.w	r2, [r8]
 8007242:	f9b1 1000 	ldrsh.w	r1, [r1]
 8007246:	f9be 0000 	ldrsh.w	r0, [lr]
 800724a:	fb03 cc02 	mla	ip, r3, r2, ip
 800724e:	fb02 6601 	mla	r6, r2, r1, r6
 8007252:	fb03 7700 	mla	r7, r3, r0, r7
 8007256:	fb01 5500 	mla	r5, r1, r0, r5
 800725a:	9b04      	ldr	r3, [sp, #16]
 800725c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800725e:	9801      	ldr	r0, [sp, #4]
 8007260:	ea4f 3cec 	mov.w	ip, ip, asr #15
 8007264:	13ff      	asrs	r7, r7, #15
 8007266:	1d19      	adds	r1, r3, #4
 8007268:	f823 cc04 	strh.w	ip, [r3, #-4]
 800726c:	f823 7c02 	strh.w	r7, [r3, #-2]
 8007270:	9b03      	ldr	r3, [sp, #12]
 8007272:	9104      	str	r1, [sp, #16]
 8007274:	13f6      	asrs	r6, r6, #15
 8007276:	13ed      	asrs	r5, r5, #15
 8007278:	f823 6c04 	strh.w	r6, [r3, #-4]
 800727c:	f823 5c02 	strh.w	r5, [r3, #-2]
 8007280:	3304      	adds	r3, #4
 8007282:	9303      	str	r3, [sp, #12]
 8007284:	9b00      	ldr	r3, [sp, #0]
 8007286:	4413      	add	r3, r2
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	9b05      	ldr	r3, [sp, #20]
 800728c:	4604      	mov	r4, r0
 800728e:	4414      	add	r4, r2
 8007290:	428b      	cmp	r3, r1
 8007292:	9401      	str	r4, [sp, #4]
 8007294:	d19c      	bne.n	80071d0 <arm_mat_mult_fast_q15+0x198>
 8007296:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007298:	9a06      	ldr	r2, [sp, #24]
 800729a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800729c:	4413      	add	r3, r2
 800729e:	930e      	str	r3, [sp, #56]	@ 0x38
 80072a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80072a2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80072a4:	4610      	mov	r0, r2
 80072a6:	4419      	add	r1, r3
 80072a8:	9a05      	ldr	r2, [sp, #20]
 80072aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80072ac:	910f      	str	r1, [sp, #60]	@ 0x3c
 80072ae:	4418      	add	r0, r3
 80072b0:	441a      	add	r2, r3
 80072b2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80072b4:	900d      	str	r0, [sp, #52]	@ 0x34
 80072b6:	3b01      	subs	r3, #1
 80072b8:	9205      	str	r2, [sp, #20]
 80072ba:	9310      	str	r3, [sp, #64]	@ 0x40
 80072bc:	d006      	beq.n	80072cc <arm_mat_mult_fast_q15+0x294>
 80072be:	1d0b      	adds	r3, r1, #4
 80072c0:	e77b      	b.n	80071ba <arm_mat_mult_fast_q15+0x182>
 80072c2:	469c      	mov	ip, r3
 80072c4:	461d      	mov	r5, r3
 80072c6:	461e      	mov	r6, r3
 80072c8:	461f      	mov	r7, r3
 80072ca:	e7b3      	b.n	8007234 <arm_mat_mult_fast_q15+0x1fc>
 80072cc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d155      	bne.n	800737e <arm_mat_mult_fast_q15+0x346>
 80072d2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80072d4:	07da      	lsls	r2, r3, #31
 80072d6:	d54e      	bpl.n	8007376 <arm_mat_mult_fast_q15+0x33e>
 80072d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80072da:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80072dc:	6852      	ldr	r2, [r2, #4]
 80072de:	3b01      	subs	r3, #1
 80072e0:	fb03 fe01 	mul.w	lr, r3, r1
 80072e4:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80072e8:	2900      	cmp	r1, #0
 80072ea:	d044      	beq.n	8007376 <arm_mat_mult_fast_q15+0x33e>
 80072ec:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80072ee:	fb03 f302 	mul.w	r3, r3, r2
 80072f2:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 80072f6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80072f8:	f8cd b008 	str.w	fp, [sp, #8]
 80072fc:	4473      	add	r3, lr
 80072fe:	f002 0903 	and.w	r9, r2, #3
 8007302:	ea4f 0892 	mov.w	r8, r2, lsr #2
 8007306:	9301      	str	r3, [sp, #4]
 8007308:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 800730c:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8007310:	ea4f 0ac8 	mov.w	sl, r8, lsl #3
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007318:	685d      	ldr	r5, [r3, #4]
 800731a:	9b02      	ldr	r3, [sp, #8]
 800731c:	441d      	add	r5, r3
 800731e:	f1b8 0f00 	cmp.w	r8, #0
 8007322:	f000 8083 	beq.w	800742c <arm_mat_mult_fast_q15+0x3f4>
 8007326:	4658      	mov	r0, fp
 8007328:	4629      	mov	r1, r5
 800732a:	4644      	mov	r4, r8
 800732c:	2300      	movs	r3, #0
 800732e:	680f      	ldr	r7, [r1, #0]
 8007330:	684a      	ldr	r2, [r1, #4]
 8007332:	f8d0 c000 	ldr.w	ip, [r0]
 8007336:	6846      	ldr	r6, [r0, #4]
 8007338:	3108      	adds	r1, #8
 800733a:	3008      	adds	r0, #8
 800733c:	fb27 330c 	smlad	r3, r7, ip, r3
 8007340:	fb22 3306 	smlad	r3, r2, r6, r3
 8007344:	3c01      	subs	r4, #1
 8007346:	d1f2      	bne.n	800732e <arm_mat_mult_fast_q15+0x2f6>
 8007348:	44d3      	add	fp, sl
 800734a:	4455      	add	r5, sl
 800734c:	f1b9 0f00 	cmp.w	r9, #0
 8007350:	d00b      	beq.n	800736a <arm_mat_mult_fast_q15+0x332>
 8007352:	4659      	mov	r1, fp
 8007354:	464a      	mov	r2, r9
 8007356:	f835 4b02 	ldrh.w	r4, [r5], #2
 800735a:	f831 0b02 	ldrh.w	r0, [r1], #2
 800735e:	3a01      	subs	r2, #1
 8007360:	fb14 3300 	smlabb	r3, r4, r0, r3
 8007364:	d1f7      	bne.n	8007356 <arm_mat_mult_fast_q15+0x31e>
 8007366:	9a00      	ldr	r2, [sp, #0]
 8007368:	4493      	add	fp, r2
 800736a:	13db      	asrs	r3, r3, #15
 800736c:	f82e 3b02 	strh.w	r3, [lr], #2
 8007370:	9b01      	ldr	r3, [sp, #4]
 8007372:	459e      	cmp	lr, r3
 8007374:	d1cf      	bne.n	8007316 <arm_mat_mult_fast_q15+0x2de>
 8007376:	2000      	movs	r0, #0
 8007378:	b01d      	add	sp, #116	@ 0x74
 800737a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800737e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8007380:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007382:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8007384:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8007388:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800738a:	f103 3bff 	add.w	fp, r3, #4294967295
 800738e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007390:	fb03 fb0b 	mul.w	fp, r3, fp
 8007394:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007396:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
 800739a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	f002 0903 	and.w	r9, r2, #3
 80073a2:	f1a1 0e02 	sub.w	lr, r1, #2
 80073a6:	ea4f 0892 	mov.w	r8, r2, lsr #2
 80073aa:	449e      	add	lr, r3
 80073ac:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80073b0:	eb0b 02c8 	add.w	r2, fp, r8, lsl #3
 80073b4:	9301      	str	r3, [sp, #4]
 80073b6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80073b8:	9202      	str	r2, [sp, #8]
 80073ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073be:	9200      	str	r2, [sp, #0]
 80073c0:	f023 0a01 	bic.w	sl, r3, #1
 80073c4:	f1b8 0f00 	cmp.w	r8, #0
 80073c8:	d02d      	beq.n	8007426 <arm_mat_mult_fast_q15+0x3ee>
 80073ca:	4658      	mov	r0, fp
 80073cc:	4661      	mov	r1, ip
 80073ce:	4644      	mov	r4, r8
 80073d0:	2300      	movs	r3, #0
 80073d2:	680e      	ldr	r6, [r1, #0]
 80073d4:	684a      	ldr	r2, [r1, #4]
 80073d6:	6807      	ldr	r7, [r0, #0]
 80073d8:	6845      	ldr	r5, [r0, #4]
 80073da:	3108      	adds	r1, #8
 80073dc:	3008      	adds	r0, #8
 80073de:	fb26 3307 	smlad	r3, r6, r7, r3
 80073e2:	fb22 3305 	smlad	r3, r2, r5, r3
 80073e6:	3c01      	subs	r4, #1
 80073e8:	d1f3      	bne.n	80073d2 <arm_mat_mult_fast_q15+0x39a>
 80073ea:	9a00      	ldr	r2, [sp, #0]
 80073ec:	9902      	ldr	r1, [sp, #8]
 80073ee:	4494      	add	ip, r2
 80073f0:	f1b9 0f00 	cmp.w	r9, #0
 80073f4:	d00b      	beq.n	800740e <arm_mat_mult_fast_q15+0x3d6>
 80073f6:	4660      	mov	r0, ip
 80073f8:	464a      	mov	r2, r9
 80073fa:	f830 5b02 	ldrh.w	r5, [r0], #2
 80073fe:	f831 4b02 	ldrh.w	r4, [r1], #2
 8007402:	3a01      	subs	r2, #1
 8007404:	fb15 3304 	smlabb	r3, r5, r4, r3
 8007408:	d1f7      	bne.n	80073fa <arm_mat_mult_fast_q15+0x3c2>
 800740a:	9a01      	ldr	r2, [sp, #4]
 800740c:	4494      	add	ip, r2
 800740e:	13db      	asrs	r3, r3, #15
 8007410:	f8ae 3000 	strh.w	r3, [lr]
 8007414:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007416:	f1ba 0a01 	subs.w	sl, sl, #1
 800741a:	449e      	add	lr, r3
 800741c:	f43f af59 	beq.w	80072d2 <arm_mat_mult_fast_q15+0x29a>
 8007420:	f1b8 0f00 	cmp.w	r8, #0
 8007424:	d1d1      	bne.n	80073ca <arm_mat_mult_fast_q15+0x392>
 8007426:	4659      	mov	r1, fp
 8007428:	4643      	mov	r3, r8
 800742a:	e7e1      	b.n	80073f0 <arm_mat_mult_fast_q15+0x3b8>
 800742c:	4643      	mov	r3, r8
 800742e:	e78d      	b.n	800734c <arm_mat_mult_fast_q15+0x314>
 8007430:	f06f 0002 	mvn.w	r0, #2
 8007434:	b01d      	add	sp, #116	@ 0x74
 8007436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800743a:	bf00      	nop

0800743c <arm_mat_init_q15>:
 800743c:	8001      	strh	r1, [r0, #0]
 800743e:	8042      	strh	r2, [r0, #2]
 8007440:	6043      	str	r3, [r0, #4]
 8007442:	4770      	bx	lr

08007444 <arm_cmplx_mag_q15>:
 8007444:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007448:	ea5f 0992 	movs.w	r9, r2, lsr #2
 800744c:	4617      	mov	r7, r2
 800744e:	4680      	mov	r8, r0
 8007450:	460e      	mov	r6, r1
 8007452:	d029      	beq.n	80074a8 <arm_cmplx_mag_q15+0x64>
 8007454:	4605      	mov	r5, r0
 8007456:	46ca      	mov	sl, r9
 8007458:	460c      	mov	r4, r1
 800745a:	6828      	ldr	r0, [r5, #0]
 800745c:	fb20 f000 	smuad	r0, r0, r0
 8007460:	4621      	mov	r1, r4
 8007462:	1440      	asrs	r0, r0, #17
 8007464:	f000 f832 	bl	80074cc <arm_sqrt_q15>
 8007468:	6868      	ldr	r0, [r5, #4]
 800746a:	fb20 f000 	smuad	r0, r0, r0
 800746e:	1ca1      	adds	r1, r4, #2
 8007470:	1440      	asrs	r0, r0, #17
 8007472:	f000 f82b 	bl	80074cc <arm_sqrt_q15>
 8007476:	68a8      	ldr	r0, [r5, #8]
 8007478:	fb20 f000 	smuad	r0, r0, r0
 800747c:	1d21      	adds	r1, r4, #4
 800747e:	1440      	asrs	r0, r0, #17
 8007480:	f000 f824 	bl	80074cc <arm_sqrt_q15>
 8007484:	3510      	adds	r5, #16
 8007486:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800748a:	fb23 f303 	smuad	r3, r3, r3
 800748e:	1da1      	adds	r1, r4, #6
 8007490:	1458      	asrs	r0, r3, #17
 8007492:	f000 f81b 	bl	80074cc <arm_sqrt_q15>
 8007496:	f1ba 0a01 	subs.w	sl, sl, #1
 800749a:	f104 0408 	add.w	r4, r4, #8
 800749e:	d1dc      	bne.n	800745a <arm_cmplx_mag_q15+0x16>
 80074a0:	eb06 06c9 	add.w	r6, r6, r9, lsl #3
 80074a4:	eb08 1809 	add.w	r8, r8, r9, lsl #4
 80074a8:	f017 0703 	ands.w	r7, r7, #3
 80074ac:	d00c      	beq.n	80074c8 <arm_cmplx_mag_q15+0x84>
 80074ae:	eb06 0747 	add.w	r7, r6, r7, lsl #1
 80074b2:	f858 0b04 	ldr.w	r0, [r8], #4
 80074b6:	fb20 f000 	smuad	r0, r0, r0
 80074ba:	4631      	mov	r1, r6
 80074bc:	1440      	asrs	r0, r0, #17
 80074be:	3602      	adds	r6, #2
 80074c0:	f000 f804 	bl	80074cc <arm_sqrt_q15>
 80074c4:	42be      	cmp	r6, r7
 80074c6:	d1f4      	bne.n	80074b2 <arm_cmplx_mag_q15+0x6e>
 80074c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080074cc <arm_sqrt_q15>:
 80074cc:	2800      	cmp	r0, #0
 80074ce:	dd5c      	ble.n	800758a <arm_sqrt_q15+0xbe>
 80074d0:	fab0 f280 	clz	r2, r0
 80074d4:	3a11      	subs	r2, #17
 80074d6:	b470      	push	{r4, r5, r6}
 80074d8:	b294      	uxth	r4, r2
 80074da:	f012 0201 	ands.w	r2, r2, #1
 80074de:	bf1a      	itte	ne
 80074e0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80074e4:	4098      	lslne	r0, r3
 80074e6:	40a0      	lsleq	r0, r4
 80074e8:	b200      	sxth	r0, r0
 80074ea:	ee07 0a90 	vmov	s15, r0
 80074ee:	eefa 7ae8 	vcvt.f32.s32	s15, s15, #15
 80074f2:	4b28      	ldr	r3, [pc, #160]	@ (8007594 <arm_sqrt_q15+0xc8>)
 80074f4:	ee17 5a90 	vmov	r5, s15
 80074f8:	eba3 0365 	sub.w	r3, r3, r5, asr #1
 80074fc:	ee07 3a90 	vmov	s15, r3
 8007500:	eefe 7ac9 	vcvt.s32.f32	s15, s15, #14
 8007504:	1046      	asrs	r6, r0, #1
 8007506:	ee17 3a90 	vmov	r3, s15
 800750a:	b21b      	sxth	r3, r3
 800750c:	fb03 f503 	mul.w	r5, r3, r3
 8007510:	13ed      	asrs	r5, r5, #15
 8007512:	fb15 f506 	smulbb	r5, r5, r6
 8007516:	13ed      	asrs	r5, r5, #15
 8007518:	f5c5 5540 	rsb	r5, r5, #12288	@ 0x3000
 800751c:	fb03 f305 	mul.w	r3, r3, r5
 8007520:	f343 334f 	sbfx	r3, r3, #13, #16
 8007524:	f023 0303 	bic.w	r3, r3, #3
 8007528:	fb03 f503 	mul.w	r5, r3, r3
 800752c:	13ed      	asrs	r5, r5, #15
 800752e:	fb15 f506 	smulbb	r5, r5, r6
 8007532:	13ed      	asrs	r5, r5, #15
 8007534:	f5c5 5540 	rsb	r5, r5, #12288	@ 0x3000
 8007538:	fb03 f305 	mul.w	r3, r3, r5
 800753c:	f343 334f 	sbfx	r3, r3, #13, #16
 8007540:	f023 0303 	bic.w	r3, r3, #3
 8007544:	fb03 f503 	mul.w	r5, r3, r3
 8007548:	13ed      	asrs	r5, r5, #15
 800754a:	fb15 f506 	smulbb	r5, r5, r6
 800754e:	13ed      	asrs	r5, r5, #15
 8007550:	f5c5 5540 	rsb	r5, r5, #12288	@ 0x3000
 8007554:	fb03 f305 	mul.w	r3, r3, r5
 8007558:	13db      	asrs	r3, r3, #15
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	fb13 f300 	smulbb	r3, r3, r0
 8007560:	f343 338f 	sbfx	r3, r3, #14, #16
 8007564:	f023 0301 	bic.w	r3, r3, #1
 8007568:	b13a      	cbz	r2, 800757a <arm_sqrt_q15+0xae>
 800756a:	3c01      	subs	r4, #1
 800756c:	1064      	asrs	r4, r4, #1
 800756e:	4123      	asrs	r3, r4
 8007570:	b21b      	sxth	r3, r3
 8007572:	2000      	movs	r0, #0
 8007574:	bc70      	pop	{r4, r5, r6}
 8007576:	800b      	strh	r3, [r1, #0]
 8007578:	4770      	bx	lr
 800757a:	f344 044e 	sbfx	r4, r4, #1, #15
 800757e:	4123      	asrs	r3, r4
 8007580:	b21b      	sxth	r3, r3
 8007582:	2000      	movs	r0, #0
 8007584:	bc70      	pop	{r4, r5, r6}
 8007586:	800b      	strh	r3, [r1, #0]
 8007588:	4770      	bx	lr
 800758a:	2300      	movs	r3, #0
 800758c:	800b      	strh	r3, [r1, #0]
 800758e:	f04f 30ff 	mov.w	r0, #4294967295
 8007592:	4770      	bx	lr
 8007594:	5f3759df 	.word	0x5f3759df

08007598 <arm_shift_q15>:
 8007598:	2900      	cmp	r1, #0
 800759a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800759e:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80075a2:	db4a      	blt.n	800763a <arm_shift_q15+0xa2>
 80075a4:	f1bc 0f00 	cmp.w	ip, #0
 80075a8:	d02b      	beq.n	8007602 <arm_shift_q15+0x6a>
 80075aa:	f100 0508 	add.w	r5, r0, #8
 80075ae:	4616      	mov	r6, r2
 80075b0:	4667      	mov	r7, ip
 80075b2:	f935 4c08 	ldrsh.w	r4, [r5, #-8]
 80075b6:	408c      	lsls	r4, r1
 80075b8:	f304 040f 	ssat	r4, #16, r4
 80075bc:	f935 ec06 	ldrsh.w	lr, [r5, #-6]
 80075c0:	fa0e fe01 	lsl.w	lr, lr, r1
 80075c4:	f30e 0e0f 	ssat	lr, #16, lr
 80075c8:	b2a4      	uxth	r4, r4
 80075ca:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80075ce:	6034      	str	r4, [r6, #0]
 80075d0:	f935 4c04 	ldrsh.w	r4, [r5, #-4]
 80075d4:	408c      	lsls	r4, r1
 80075d6:	f304 040f 	ssat	r4, #16, r4
 80075da:	f935 ec02 	ldrsh.w	lr, [r5, #-2]
 80075de:	fa0e fe01 	lsl.w	lr, lr, r1
 80075e2:	f30e 0e0f 	ssat	lr, #16, lr
 80075e6:	b2a4      	uxth	r4, r4
 80075e8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80075ec:	3f01      	subs	r7, #1
 80075ee:	6074      	str	r4, [r6, #4]
 80075f0:	f105 0508 	add.w	r5, r5, #8
 80075f4:	f106 0608 	add.w	r6, r6, #8
 80075f8:	d1db      	bne.n	80075b2 <arm_shift_q15+0x1a>
 80075fa:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 80075fe:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8007602:	f013 0303 	ands.w	r3, r3, #3
 8007606:	d016      	beq.n	8007636 <arm_shift_q15+0x9e>
 8007608:	f9b0 4000 	ldrsh.w	r4, [r0]
 800760c:	408c      	lsls	r4, r1
 800760e:	f304 040f 	ssat	r4, #16, r4
 8007612:	3b01      	subs	r3, #1
 8007614:	8014      	strh	r4, [r2, #0]
 8007616:	d00e      	beq.n	8007636 <arm_shift_q15+0x9e>
 8007618:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800761c:	408c      	lsls	r4, r1
 800761e:	f304 040f 	ssat	r4, #16, r4
 8007622:	2b01      	cmp	r3, #1
 8007624:	8054      	strh	r4, [r2, #2]
 8007626:	d006      	beq.n	8007636 <arm_shift_q15+0x9e>
 8007628:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800762c:	fa03 f101 	lsl.w	r1, r3, r1
 8007630:	f301 010f 	ssat	r1, #16, r1
 8007634:	8091      	strh	r1, [r2, #4]
 8007636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800763a:	f1bc 0f00 	cmp.w	ip, #0
 800763e:	d025      	beq.n	800768c <arm_shift_q15+0xf4>
 8007640:	424f      	negs	r7, r1
 8007642:	f100 0508 	add.w	r5, r0, #8
 8007646:	4616      	mov	r6, r2
 8007648:	46e6      	mov	lr, ip
 800764a:	f935 4c08 	ldrsh.w	r4, [r5, #-8]
 800764e:	f935 8c06 	ldrsh.w	r8, [r5, #-6]
 8007652:	413c      	asrs	r4, r7
 8007654:	fa48 f807 	asr.w	r8, r8, r7
 8007658:	b2a4      	uxth	r4, r4
 800765a:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800765e:	6034      	str	r4, [r6, #0]
 8007660:	f935 4c04 	ldrsh.w	r4, [r5, #-4]
 8007664:	f935 8c02 	ldrsh.w	r8, [r5, #-2]
 8007668:	413c      	asrs	r4, r7
 800766a:	b2a4      	uxth	r4, r4
 800766c:	fa48 f807 	asr.w	r8, r8, r7
 8007670:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8007674:	f1be 0e01 	subs.w	lr, lr, #1
 8007678:	6074      	str	r4, [r6, #4]
 800767a:	f105 0508 	add.w	r5, r5, #8
 800767e:	f106 0608 	add.w	r6, r6, #8
 8007682:	d1e2      	bne.n	800764a <arm_shift_q15+0xb2>
 8007684:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 8007688:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 800768c:	f013 0303 	ands.w	r3, r3, #3
 8007690:	d0d1      	beq.n	8007636 <arm_shift_q15+0x9e>
 8007692:	f9b0 4000 	ldrsh.w	r4, [r0]
 8007696:	4249      	negs	r1, r1
 8007698:	410c      	asrs	r4, r1
 800769a:	3b01      	subs	r3, #1
 800769c:	8014      	strh	r4, [r2, #0]
 800769e:	d0ca      	beq.n	8007636 <arm_shift_q15+0x9e>
 80076a0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	fa44 f401 	asr.w	r4, r4, r1
 80076aa:	8054      	strh	r4, [r2, #2]
 80076ac:	d0c3      	beq.n	8007636 <arm_shift_q15+0x9e>
 80076ae:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80076b2:	fa43 f101 	asr.w	r1, r3, r1
 80076b6:	8091      	strh	r1, [r2, #4]
 80076b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080076bc <arm_offset_q15>:
 80076bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076be:	fa1f fc81 	uxth.w	ip, r1
 80076c2:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 80076c6:	ea4c 4c01 	orr.w	ip, ip, r1, lsl #16
 80076ca:	d014      	beq.n	80076f6 <arm_offset_q15+0x3a>
 80076cc:	4615      	mov	r5, r2
 80076ce:	4604      	mov	r4, r0
 80076d0:	4677      	mov	r7, lr
 80076d2:	6826      	ldr	r6, [r4, #0]
 80076d4:	fa96 f61c 	qadd16	r6, r6, ip
 80076d8:	3f01      	subs	r7, #1
 80076da:	602e      	str	r6, [r5, #0]
 80076dc:	6866      	ldr	r6, [r4, #4]
 80076de:	fa96 f61c 	qadd16	r6, r6, ip
 80076e2:	f104 0408 	add.w	r4, r4, #8
 80076e6:	606e      	str	r6, [r5, #4]
 80076e8:	f105 0508 	add.w	r5, r5, #8
 80076ec:	d1f1      	bne.n	80076d2 <arm_offset_q15+0x16>
 80076ee:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
 80076f2:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
 80076f6:	f013 0303 	ands.w	r3, r3, #3
 80076fa:	d012      	beq.n	8007722 <arm_offset_q15+0x66>
 80076fc:	3b01      	subs	r3, #1
 80076fe:	f9b0 4000 	ldrsh.w	r4, [r0]
 8007702:	fa94 f411 	qadd16	r4, r4, r1
 8007706:	8014      	strh	r4, [r2, #0]
 8007708:	d00b      	beq.n	8007722 <arm_offset_q15+0x66>
 800770a:	2b01      	cmp	r3, #1
 800770c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8007710:	fa94 f411 	qadd16	r4, r4, r1
 8007714:	8054      	strh	r4, [r2, #2]
 8007716:	d004      	beq.n	8007722 <arm_offset_q15+0x66>
 8007718:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800771c:	fa93 f111 	qadd16	r1, r3, r1
 8007720:	8091      	strh	r1, [r2, #4]
 8007722:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007724 <arm_mult_q15>:
 8007724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007728:	ea5f 0893 	movs.w	r8, r3, lsr #2
 800772c:	d037      	beq.n	800779e <arm_mult_q15+0x7a>
 800772e:	4694      	mov	ip, r2
 8007730:	460f      	mov	r7, r1
 8007732:	4606      	mov	r6, r0
 8007734:	46c6      	mov	lr, r8
 8007736:	f8d6 a000 	ldr.w	sl, [r6]
 800773a:	683d      	ldr	r5, [r7, #0]
 800773c:	6874      	ldr	r4, [r6, #4]
 800773e:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8007742:	fb15 f93a 	smultt	r9, r5, sl
 8007746:	ea4f 39e9 	mov.w	r9, r9, asr #15
 800774a:	3608      	adds	r6, #8
 800774c:	3708      	adds	r7, #8
 800774e:	f309 090f 	ssat	r9, #16, r9
 8007752:	fb1a fa05 	smulbb	sl, sl, r5
 8007756:	ea4f 3aea 	mov.w	sl, sl, asr #15
 800775a:	f30a 0a0f 	ssat	sl, #16, sl
 800775e:	fb1b f534 	smultt	r5, fp, r4
 8007762:	13ed      	asrs	r5, r5, #15
 8007764:	f305 050f 	ssat	r5, #16, r5
 8007768:	fb14 f40b 	smulbb	r4, r4, fp
 800776c:	13e4      	asrs	r4, r4, #15
 800776e:	f304 040f 	ssat	r4, #16, r4
 8007772:	fa1f fa8a 	uxth.w	sl, sl
 8007776:	b2a4      	uxth	r4, r4
 8007778:	ea4a 4909 	orr.w	r9, sl, r9, lsl #16
 800777c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007780:	f1be 0e01 	subs.w	lr, lr, #1
 8007784:	f8cc 9000 	str.w	r9, [ip]
 8007788:	f8cc 4004 	str.w	r4, [ip, #4]
 800778c:	f10c 0c08 	add.w	ip, ip, #8
 8007790:	d1d1      	bne.n	8007736 <arm_mult_q15+0x12>
 8007792:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 8007796:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800779a:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 800779e:	f013 0303 	ands.w	r3, r3, #3
 80077a2:	d01b      	beq.n	80077dc <arm_mult_q15+0xb8>
 80077a4:	880c      	ldrh	r4, [r1, #0]
 80077a6:	8805      	ldrh	r5, [r0, #0]
 80077a8:	fb14 f405 	smulbb	r4, r4, r5
 80077ac:	13e4      	asrs	r4, r4, #15
 80077ae:	f304 040f 	ssat	r4, #16, r4
 80077b2:	3b01      	subs	r3, #1
 80077b4:	8014      	strh	r4, [r2, #0]
 80077b6:	d011      	beq.n	80077dc <arm_mult_q15+0xb8>
 80077b8:	884c      	ldrh	r4, [r1, #2]
 80077ba:	8845      	ldrh	r5, [r0, #2]
 80077bc:	fb14 f405 	smulbb	r4, r4, r5
 80077c0:	13e4      	asrs	r4, r4, #15
 80077c2:	f304 040f 	ssat	r4, #16, r4
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	8054      	strh	r4, [r2, #2]
 80077ca:	d007      	beq.n	80077dc <arm_mult_q15+0xb8>
 80077cc:	8883      	ldrh	r3, [r0, #4]
 80077ce:	8889      	ldrh	r1, [r1, #4]
 80077d0:	fb13 f301 	smulbb	r3, r3, r1
 80077d4:	13db      	asrs	r3, r3, #15
 80077d6:	f303 030f 	ssat	r3, #16, r3
 80077da:	8093      	strh	r3, [r2, #4]
 80077dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080077e0 <arm_cfft_radix4by2_q15>:
 80077e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077e4:	084d      	lsrs	r5, r1, #1
 80077e6:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 80077ea:	4616      	mov	r6, r2
 80077ec:	d047      	beq.n	800787e <arm_cfft_radix4by2_q15+0x9e>
 80077ee:	4604      	mov	r4, r0
 80077f0:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8007898 <arm_cfft_radix4by2_q15+0xb8>
 80077f4:	4696      	mov	lr, r2
 80077f6:	4638      	mov	r0, r7
 80077f8:	4621      	mov	r1, r4
 80077fa:	462a      	mov	r2, r5
 80077fc:	f04f 0c00 	mov.w	ip, #0
 8007800:	680b      	ldr	r3, [r1, #0]
 8007802:	f8d0 a000 	ldr.w	sl, [r0]
 8007806:	fa93 f32c 	shadd16	r3, r3, ip
 800780a:	fa9a fa2c 	shadd16	sl, sl, ip
 800780e:	fa93 f92a 	shadd16	r9, r3, sl
 8007812:	fad3 fa1a 	qsub16	sl, r3, sl
 8007816:	f85e 3b04 	ldr.w	r3, [lr], #4
 800781a:	f841 9b04 	str.w	r9, [r1], #4
 800781e:	fb23 f90a 	smuad	r9, r3, sl
 8007822:	fb43 f31a 	smusdx	r3, r3, sl
 8007826:	ea03 0308 	and.w	r3, r3, r8
 800782a:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 800782e:	3a01      	subs	r2, #1
 8007830:	f840 3b04 	str.w	r3, [r0], #4
 8007834:	d1e4      	bne.n	8007800 <arm_cfft_radix4by2_q15+0x20>
 8007836:	4629      	mov	r1, r5
 8007838:	2302      	movs	r3, #2
 800783a:	4632      	mov	r2, r6
 800783c:	4620      	mov	r0, r4
 800783e:	f000 f8e9 	bl	8007a14 <arm_radix4_butterfly_q15>
 8007842:	4638      	mov	r0, r7
 8007844:	4629      	mov	r1, r5
 8007846:	4632      	mov	r2, r6
 8007848:	2302      	movs	r3, #2
 800784a:	f000 f8e3 	bl	8007a14 <arm_radix4_butterfly_q15>
 800784e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8007852:	4620      	mov	r0, r4
 8007854:	f9b0 6000 	ldrsh.w	r6, [r0]
 8007858:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800785c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8007860:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8007864:	0076      	lsls	r6, r6, #1
 8007866:	0064      	lsls	r4, r4, #1
 8007868:	0052      	lsls	r2, r2, #1
 800786a:	005b      	lsls	r3, r3, #1
 800786c:	8006      	strh	r6, [r0, #0]
 800786e:	8044      	strh	r4, [r0, #2]
 8007870:	8082      	strh	r2, [r0, #4]
 8007872:	80c3      	strh	r3, [r0, #6]
 8007874:	3008      	adds	r0, #8
 8007876:	4285      	cmp	r5, r0
 8007878:	d1ec      	bne.n	8007854 <arm_cfft_radix4by2_q15+0x74>
 800787a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800787e:	4629      	mov	r1, r5
 8007880:	2302      	movs	r3, #2
 8007882:	f000 f8c7 	bl	8007a14 <arm_radix4_butterfly_q15>
 8007886:	4632      	mov	r2, r6
 8007888:	4629      	mov	r1, r5
 800788a:	4638      	mov	r0, r7
 800788c:	2302      	movs	r3, #2
 800788e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007892:	f000 b8bf 	b.w	8007a14 <arm_radix4_butterfly_q15>
 8007896:	bf00      	nop
 8007898:	ffff0000 	.word	0xffff0000

0800789c <arm_cfft_radix4by2_inverse_q15>:
 800789c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078a0:	084d      	lsrs	r5, r1, #1
 80078a2:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 80078a6:	4616      	mov	r6, r2
 80078a8:	d047      	beq.n	800793a <arm_cfft_radix4by2_inverse_q15+0x9e>
 80078aa:	4604      	mov	r4, r0
 80078ac:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8007954 <arm_cfft_radix4by2_inverse_q15+0xb8>
 80078b0:	4696      	mov	lr, r2
 80078b2:	4638      	mov	r0, r7
 80078b4:	4621      	mov	r1, r4
 80078b6:	462a      	mov	r2, r5
 80078b8:	f04f 0c00 	mov.w	ip, #0
 80078bc:	680b      	ldr	r3, [r1, #0]
 80078be:	f8d0 a000 	ldr.w	sl, [r0]
 80078c2:	fa93 f32c 	shadd16	r3, r3, ip
 80078c6:	fa9a fa2c 	shadd16	sl, sl, ip
 80078ca:	fa93 f92a 	shadd16	r9, r3, sl
 80078ce:	fad3 fa1a 	qsub16	sl, r3, sl
 80078d2:	f85e 3b04 	ldr.w	r3, [lr], #4
 80078d6:	f841 9b04 	str.w	r9, [r1], #4
 80078da:	fb43 f90a 	smusd	r9, r3, sl
 80078de:	fb23 f31a 	smuadx	r3, r3, sl
 80078e2:	ea03 0308 	and.w	r3, r3, r8
 80078e6:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 80078ea:	3a01      	subs	r2, #1
 80078ec:	f840 3b04 	str.w	r3, [r0], #4
 80078f0:	d1e4      	bne.n	80078bc <arm_cfft_radix4by2_inverse_q15+0x20>
 80078f2:	4629      	mov	r1, r5
 80078f4:	2302      	movs	r3, #2
 80078f6:	4632      	mov	r2, r6
 80078f8:	4620      	mov	r0, r4
 80078fa:	f000 fa35 	bl	8007d68 <arm_radix4_butterfly_inverse_q15>
 80078fe:	4638      	mov	r0, r7
 8007900:	4629      	mov	r1, r5
 8007902:	4632      	mov	r2, r6
 8007904:	2302      	movs	r3, #2
 8007906:	f000 fa2f 	bl	8007d68 <arm_radix4_butterfly_inverse_q15>
 800790a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800790e:	4620      	mov	r0, r4
 8007910:	f9b0 6000 	ldrsh.w	r6, [r0]
 8007914:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8007918:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800791c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8007920:	0076      	lsls	r6, r6, #1
 8007922:	0064      	lsls	r4, r4, #1
 8007924:	0052      	lsls	r2, r2, #1
 8007926:	005b      	lsls	r3, r3, #1
 8007928:	8006      	strh	r6, [r0, #0]
 800792a:	8044      	strh	r4, [r0, #2]
 800792c:	8082      	strh	r2, [r0, #4]
 800792e:	80c3      	strh	r3, [r0, #6]
 8007930:	3008      	adds	r0, #8
 8007932:	4285      	cmp	r5, r0
 8007934:	d1ec      	bne.n	8007910 <arm_cfft_radix4by2_inverse_q15+0x74>
 8007936:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800793a:	4629      	mov	r1, r5
 800793c:	2302      	movs	r3, #2
 800793e:	f000 fa13 	bl	8007d68 <arm_radix4_butterfly_inverse_q15>
 8007942:	4632      	mov	r2, r6
 8007944:	4629      	mov	r1, r5
 8007946:	4638      	mov	r0, r7
 8007948:	2302      	movs	r3, #2
 800794a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800794e:	f000 ba0b 	b.w	8007d68 <arm_radix4_butterfly_inverse_q15>
 8007952:	bf00      	nop
 8007954:	ffff0000 	.word	0xffff0000

08007958 <arm_cfft_q15>:
 8007958:	b5e0      	push	{r5, r6, r7, lr}
 800795a:	2a01      	cmp	r2, #1
 800795c:	460f      	mov	r7, r1
 800795e:	4605      	mov	r5, r0
 8007960:	8801      	ldrh	r1, [r0, #0]
 8007962:	461e      	mov	r6, r3
 8007964:	d02f      	beq.n	80079c6 <arm_cfft_q15+0x6e>
 8007966:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800796a:	d026      	beq.n	80079ba <arm_cfft_q15+0x62>
 800796c:	d908      	bls.n	8007980 <arm_cfft_q15+0x28>
 800796e:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8007972:	d017      	beq.n	80079a4 <arm_cfft_q15+0x4c>
 8007974:	d91b      	bls.n	80079ae <arm_cfft_q15+0x56>
 8007976:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800797a:	d01e      	beq.n	80079ba <arm_cfft_q15+0x62>
 800797c:	b93e      	cbnz	r6, 800798e <arm_cfft_q15+0x36>
 800797e:	bde0      	pop	{r5, r6, r7, pc}
 8007980:	2940      	cmp	r1, #64	@ 0x40
 8007982:	d01a      	beq.n	80079ba <arm_cfft_q15+0x62>
 8007984:	d90a      	bls.n	800799c <arm_cfft_q15+0x44>
 8007986:	2980      	cmp	r1, #128	@ 0x80
 8007988:	d00c      	beq.n	80079a4 <arm_cfft_q15+0x4c>
 800798a:	2e00      	cmp	r6, #0
 800798c:	d0f7      	beq.n	800797e <arm_cfft_q15+0x26>
 800798e:	68aa      	ldr	r2, [r5, #8]
 8007990:	89a9      	ldrh	r1, [r5, #12]
 8007992:	4638      	mov	r0, r7
 8007994:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
 8007998:	f000 bb90 	b.w	80080bc <arm_bitreversal_16>
 800799c:	2910      	cmp	r1, #16
 800799e:	d00c      	beq.n	80079ba <arm_cfft_q15+0x62>
 80079a0:	2920      	cmp	r1, #32
 80079a2:	d1eb      	bne.n	800797c <arm_cfft_q15+0x24>
 80079a4:	686a      	ldr	r2, [r5, #4]
 80079a6:	4638      	mov	r0, r7
 80079a8:	f7ff ff1a 	bl	80077e0 <arm_cfft_radix4by2_q15>
 80079ac:	e7e6      	b.n	800797c <arm_cfft_q15+0x24>
 80079ae:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80079b2:	d0f7      	beq.n	80079a4 <arm_cfft_q15+0x4c>
 80079b4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80079b8:	d1e0      	bne.n	800797c <arm_cfft_q15+0x24>
 80079ba:	686a      	ldr	r2, [r5, #4]
 80079bc:	2301      	movs	r3, #1
 80079be:	4638      	mov	r0, r7
 80079c0:	f000 f828 	bl	8007a14 <arm_radix4_butterfly_q15>
 80079c4:	e7da      	b.n	800797c <arm_cfft_q15+0x24>
 80079c6:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80079ca:	d01d      	beq.n	8007a08 <arm_cfft_q15+0xb0>
 80079cc:	d907      	bls.n	80079de <arm_cfft_q15+0x86>
 80079ce:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80079d2:	d00e      	beq.n	80079f2 <arm_cfft_q15+0x9a>
 80079d4:	d912      	bls.n	80079fc <arm_cfft_q15+0xa4>
 80079d6:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80079da:	d1cf      	bne.n	800797c <arm_cfft_q15+0x24>
 80079dc:	e014      	b.n	8007a08 <arm_cfft_q15+0xb0>
 80079de:	2940      	cmp	r1, #64	@ 0x40
 80079e0:	d012      	beq.n	8007a08 <arm_cfft_q15+0xb0>
 80079e2:	d902      	bls.n	80079ea <arm_cfft_q15+0x92>
 80079e4:	2980      	cmp	r1, #128	@ 0x80
 80079e6:	d004      	beq.n	80079f2 <arm_cfft_q15+0x9a>
 80079e8:	e7c8      	b.n	800797c <arm_cfft_q15+0x24>
 80079ea:	2910      	cmp	r1, #16
 80079ec:	d00c      	beq.n	8007a08 <arm_cfft_q15+0xb0>
 80079ee:	2920      	cmp	r1, #32
 80079f0:	d1c4      	bne.n	800797c <arm_cfft_q15+0x24>
 80079f2:	686a      	ldr	r2, [r5, #4]
 80079f4:	4638      	mov	r0, r7
 80079f6:	f7ff ff51 	bl	800789c <arm_cfft_radix4by2_inverse_q15>
 80079fa:	e7bf      	b.n	800797c <arm_cfft_q15+0x24>
 80079fc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007a00:	d0f7      	beq.n	80079f2 <arm_cfft_q15+0x9a>
 8007a02:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007a06:	d1b9      	bne.n	800797c <arm_cfft_q15+0x24>
 8007a08:	686a      	ldr	r2, [r5, #4]
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	4638      	mov	r0, r7
 8007a0e:	f000 f9ab 	bl	8007d68 <arm_radix4_butterfly_inverse_q15>
 8007a12:	e7b3      	b.n	800797c <arm_cfft_q15+0x24>

08007a14 <arm_radix4_butterfly_q15>:
 8007a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a18:	b093      	sub	sp, #76	@ 0x4c
 8007a1a:	f021 0a03 	bic.w	sl, r1, #3
 8007a1e:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 8007a22:	9210      	str	r2, [sp, #64]	@ 0x40
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	ea4f 0291 	mov.w	r2, r1, lsr #2
 8007a2a:	eb0c 050a 	add.w	r5, ip, sl
 8007a2e:	9101      	str	r1, [sp, #4]
 8007a30:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007a32:	9303      	str	r3, [sp, #12]
 8007a34:	4482      	add	sl, r0
 8007a36:	9211      	str	r2, [sp, #68]	@ 0x44
 8007a38:	f040 8124 	bne.w	8007c84 <arm_radix4_butterfly_q15+0x270>
 8007a3c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007a3e:	f8df e324 	ldr.w	lr, [pc, #804]	@ 8007d64 <arm_radix4_butterfly_q15+0x350>
 8007a42:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8007a44:	f8cd a008 	str.w	sl, [sp, #8]
 8007a48:	4693      	mov	fp, r2
 8007a4a:	4690      	mov	r8, r2
 8007a4c:	4657      	mov	r7, sl
 8007a4e:	2300      	movs	r3, #0
 8007a50:	4691      	mov	r9, r2
 8007a52:	6830      	ldr	r0, [r6, #0]
 8007a54:	f8dc 2000 	ldr.w	r2, [ip]
 8007a58:	6839      	ldr	r1, [r7, #0]
 8007a5a:	fa90 f023 	shadd16	r0, r0, r3
 8007a5e:	fa91 f123 	shadd16	r1, r1, r3
 8007a62:	fa90 f023 	shadd16	r0, r0, r3
 8007a66:	fa91 fa23 	shadd16	sl, r1, r3
 8007a6a:	fa92 f223 	shadd16	r2, r2, r3
 8007a6e:	6829      	ldr	r1, [r5, #0]
 8007a70:	fa92 f223 	shadd16	r2, r2, r3
 8007a74:	fa91 f123 	shadd16	r1, r1, r3
 8007a78:	fa90 f412 	qadd16	r4, r0, r2
 8007a7c:	fa91 f123 	shadd16	r1, r1, r3
 8007a80:	fa9a f111 	qadd16	r1, sl, r1
 8007a84:	fa94 fa21 	shadd16	sl, r4, r1
 8007a88:	f846 ab04 	str.w	sl, [r6], #4
 8007a8c:	fad4 f411 	qsub16	r4, r4, r1
 8007a90:	fad0 f212 	qsub16	r2, r0, r2
 8007a94:	f85b 1b08 	ldr.w	r1, [fp], #8
 8007a98:	fb21 f004 	smuad	r0, r1, r4
 8007a9c:	fb41 f114 	smusdx	r1, r1, r4
 8007aa0:	ea01 010e 	and.w	r1, r1, lr
 8007aa4:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8007aa8:	6838      	ldr	r0, [r7, #0]
 8007aaa:	f847 1b04 	str.w	r1, [r7], #4
 8007aae:	fa90 f023 	shadd16	r0, r0, r3
 8007ab2:	682c      	ldr	r4, [r5, #0]
 8007ab4:	fa90 f023 	shadd16	r0, r0, r3
 8007ab8:	fa94 f423 	shadd16	r4, r4, r3
 8007abc:	f859 1b04 	ldr.w	r1, [r9], #4
 8007ac0:	fa94 f423 	shadd16	r4, r4, r3
 8007ac4:	fad0 f014 	qsub16	r0, r0, r4
 8007ac8:	faa2 f410 	qasx	r4, r2, r0
 8007acc:	fae2 f210 	qsax	r2, r2, r0
 8007ad0:	fb21 fa02 	smuad	sl, r1, r2
 8007ad4:	fb41 f212 	smusdx	r2, r1, r2
 8007ad8:	ea02 020e 	and.w	r2, r2, lr
 8007adc:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 8007ae0:	f84c 2b04 	str.w	r2, [ip], #4
 8007ae4:	f858 2b0c 	ldr.w	r2, [r8], #12
 8007ae8:	fb22 f104 	smuad	r1, r2, r4
 8007aec:	fb42 f214 	smusdx	r2, r2, r4
 8007af0:	ea02 020e 	and.w	r2, r2, lr
 8007af4:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8007af8:	f845 2b04 	str.w	r2, [r5], #4
 8007afc:	9a02      	ldr	r2, [sp, #8]
 8007afe:	42b2      	cmp	r2, r6
 8007b00:	d1a7      	bne.n	8007a52 <arm_radix4_butterfly_q15+0x3e>
 8007b02:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007b04:	9b03      	ldr	r3, [sp, #12]
 8007b06:	2a04      	cmp	r2, #4
 8007b08:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007b0c:	f240 8127 	bls.w	8007d5e <arm_radix4_butterfly_q15+0x34a>
 8007b10:	f8df a250 	ldr.w	sl, [pc, #592]	@ 8007d64 <arm_radix4_butterfly_q15+0x350>
 8007b14:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b16:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007b18:	9102      	str	r1, [sp, #8]
 8007b1a:	4608      	mov	r0, r1
 8007b1c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007b20:	0889      	lsrs	r1, r1, #2
 8007b22:	0092      	lsls	r2, r2, #2
 8007b24:	0086      	lsls	r6, r0, #2
 8007b26:	9801      	ldr	r0, [sp, #4]
 8007b28:	920d      	str	r2, [sp, #52]	@ 0x34
 8007b2a:	008c      	lsls	r4, r1, #2
 8007b2c:	009a      	lsls	r2, r3, #2
 8007b2e:	00db      	lsls	r3, r3, #3
 8007b30:	4288      	cmp	r0, r1
 8007b32:	940a      	str	r4, [sp, #40]	@ 0x28
 8007b34:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b36:	4604      	mov	r4, r0
 8007b38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007b3a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8007b3c:	910e      	str	r1, [sp, #56]	@ 0x38
 8007b3e:	bf28      	it	cs
 8007b40:	460c      	movcs	r4, r1
 8007b42:	e9cd 0305 	strd	r0, r3, [sp, #20]
 8007b46:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8007b4a:	9308      	str	r3, [sp, #32]
 8007b4c:	9307      	str	r3, [sp, #28]
 8007b4e:	2300      	movs	r3, #0
 8007b50:	940c      	str	r4, [sp, #48]	@ 0x30
 8007b52:	9104      	str	r1, [sp, #16]
 8007b54:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b56:	9303      	str	r3, [sp, #12]
 8007b58:	9b08      	ldr	r3, [sp, #32]
 8007b5a:	9a05      	ldr	r2, [sp, #20]
 8007b5c:	f8d3 9000 	ldr.w	r9, [r3]
 8007b60:	9b07      	ldr	r3, [sp, #28]
 8007b62:	9f03      	ldr	r7, [sp, #12]
 8007b64:	f8d3 8000 	ldr.w	r8, [r3]
 8007b68:	9b06      	ldr	r3, [sp, #24]
 8007b6a:	f8d3 e000 	ldr.w	lr, [r3]
 8007b6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b70:	4615      	mov	r5, r2
 8007b72:	1898      	adds	r0, r3, r2
 8007b74:	9a04      	ldr	r2, [sp, #16]
 8007b76:	4614      	mov	r4, r2
 8007b78:	1899      	adds	r1, r3, r2
 8007b7a:	682a      	ldr	r2, [r5, #0]
 8007b7c:	6823      	ldr	r3, [r4, #0]
 8007b7e:	f8d0 b000 	ldr.w	fp, [r0]
 8007b82:	fa92 fc13 	qadd16	ip, r2, r3
 8007b86:	fad2 f213 	qsub16	r2, r2, r3
 8007b8a:	680b      	ldr	r3, [r1, #0]
 8007b8c:	fa9b f313 	qadd16	r3, fp, r3
 8007b90:	fa9c fb23 	shadd16	fp, ip, r3
 8007b94:	fadc f323 	shsub16	r3, ip, r3
 8007b98:	f04f 0c00 	mov.w	ip, #0
 8007b9c:	fa9b fb2c 	shadd16	fp, fp, ip
 8007ba0:	f8c5 b000 	str.w	fp, [r5]
 8007ba4:	4435      	add	r5, r6
 8007ba6:	fb28 fb03 	smuad	fp, r8, r3
 8007baa:	fb48 f313 	smusdx	r3, r8, r3
 8007bae:	ea03 030a 	and.w	r3, r3, sl
 8007bb2:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 8007bb6:	f8d0 b000 	ldr.w	fp, [r0]
 8007bba:	6003      	str	r3, [r0, #0]
 8007bbc:	f8d1 c000 	ldr.w	ip, [r1]
 8007bc0:	fadb fc1c 	qsub16	ip, fp, ip
 8007bc4:	4430      	add	r0, r6
 8007bc6:	faa2 f32c 	shasx	r3, r2, ip
 8007bca:	fae2 f22c 	shsax	r2, r2, ip
 8007bce:	fb29 fc02 	smuad	ip, r9, r2
 8007bd2:	fb49 f212 	smusdx	r2, r9, r2
 8007bd6:	ea02 020a 	and.w	r2, r2, sl
 8007bda:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 8007bde:	6022      	str	r2, [r4, #0]
 8007be0:	4434      	add	r4, r6
 8007be2:	fb2e f203 	smuad	r2, lr, r3
 8007be6:	fb4e f313 	smusdx	r3, lr, r3
 8007bea:	ea03 030a 	and.w	r3, r3, sl
 8007bee:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8007bf2:	9a02      	ldr	r2, [sp, #8]
 8007bf4:	600b      	str	r3, [r1, #0]
 8007bf6:	9b01      	ldr	r3, [sp, #4]
 8007bf8:	4417      	add	r7, r2
 8007bfa:	42bb      	cmp	r3, r7
 8007bfc:	4431      	add	r1, r6
 8007bfe:	d8bc      	bhi.n	8007b7a <arm_radix4_butterfly_q15+0x166>
 8007c00:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8007c04:	440a      	add	r2, r1
 8007c06:	9208      	str	r2, [sp, #32]
 8007c08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c0a:	9a07      	ldr	r2, [sp, #28]
 8007c0c:	9b03      	ldr	r3, [sp, #12]
 8007c0e:	440a      	add	r2, r1
 8007c10:	9207      	str	r2, [sp, #28]
 8007c12:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007c14:	9a06      	ldr	r2, [sp, #24]
 8007c16:	440a      	add	r2, r1
 8007c18:	9206      	str	r2, [sp, #24]
 8007c1a:	9a05      	ldr	r2, [sp, #20]
 8007c1c:	3204      	adds	r2, #4
 8007c1e:	9205      	str	r2, [sp, #20]
 8007c20:	9a04      	ldr	r2, [sp, #16]
 8007c22:	3204      	adds	r2, #4
 8007c24:	9204      	str	r2, [sp, #16]
 8007c26:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007c28:	3301      	adds	r3, #1
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	9303      	str	r3, [sp, #12]
 8007c2e:	d393      	bcc.n	8007b58 <arm_radix4_butterfly_q15+0x144>
 8007c30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c34:	2a04      	cmp	r2, #4
 8007c36:	f63f af6e 	bhi.w	8007b16 <arm_radix4_butterfly_q15+0x102>
 8007c3a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8007c3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c3e:	689d      	ldr	r5, [r3, #8]
 8007c40:	68de      	ldr	r6, [r3, #12]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	6859      	ldr	r1, [r3, #4]
 8007c46:	fa92 f015 	qadd16	r0, r2, r5
 8007c4a:	3c01      	subs	r4, #1
 8007c4c:	fad2 f215 	qsub16	r2, r2, r5
 8007c50:	f103 0310 	add.w	r3, r3, #16
 8007c54:	fa91 f516 	qadd16	r5, r1, r6
 8007c58:	fad1 f116 	qsub16	r1, r1, r6
 8007c5c:	fa90 f625 	shadd16	r6, r0, r5
 8007c60:	fad0 f025 	shsub16	r0, r0, r5
 8007c64:	f843 6c10 	str.w	r6, [r3, #-16]
 8007c68:	f843 0c0c 	str.w	r0, [r3, #-12]
 8007c6c:	fae2 f021 	shsax	r0, r2, r1
 8007c70:	faa2 f221 	shasx	r2, r2, r1
 8007c74:	f843 0c08 	str.w	r0, [r3, #-8]
 8007c78:	f843 2c04 	str.w	r2, [r3, #-4]
 8007c7c:	d1df      	bne.n	8007c3e <arm_radix4_butterfly_q15+0x22a>
 8007c7e:	b013      	add	sp, #76	@ 0x4c
 8007c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c84:	2400      	movs	r4, #0
 8007c86:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 8007d64 <arm_radix4_butterfly_q15+0x350>
 8007c8a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8007c8c:	4623      	mov	r3, r4
 8007c8e:	4680      	mov	r8, r0
 8007c90:	4691      	mov	r9, r2
 8007c92:	f8d8 0000 	ldr.w	r0, [r8]
 8007c96:	f8dc 2000 	ldr.w	r2, [ip]
 8007c9a:	f8da 1000 	ldr.w	r1, [sl]
 8007c9e:	fa90 f023 	shadd16	r0, r0, r3
 8007ca2:	fa91 f123 	shadd16	r1, r1, r3
 8007ca6:	fa90 f023 	shadd16	r0, r0, r3
 8007caa:	fa91 fb23 	shadd16	fp, r1, r3
 8007cae:	fa92 f223 	shadd16	r2, r2, r3
 8007cb2:	6829      	ldr	r1, [r5, #0]
 8007cb4:	fa92 f223 	shadd16	r2, r2, r3
 8007cb8:	fa91 f123 	shadd16	r1, r1, r3
 8007cbc:	fa90 f612 	qadd16	r6, r0, r2
 8007cc0:	fa91 f123 	shadd16	r1, r1, r3
 8007cc4:	fa9b f111 	qadd16	r1, fp, r1
 8007cc8:	fa96 fb21 	shadd16	fp, r6, r1
 8007ccc:	f848 bb04 	str.w	fp, [r8], #4
 8007cd0:	fad6 f611 	qsub16	r6, r6, r1
 8007cd4:	fad0 f212 	qsub16	r2, r0, r2
 8007cd8:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 8007cdc:	fb21 f006 	smuad	r0, r1, r6
 8007ce0:	fb41 f116 	smusdx	r1, r1, r6
 8007ce4:	ea01 010e 	and.w	r1, r1, lr
 8007ce8:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8007cec:	f8da 0000 	ldr.w	r0, [sl]
 8007cf0:	f84a 1b04 	str.w	r1, [sl], #4
 8007cf4:	fa90 f023 	shadd16	r0, r0, r3
 8007cf8:	682e      	ldr	r6, [r5, #0]
 8007cfa:	fa90 f023 	shadd16	r0, r0, r3
 8007cfe:	fa96 f623 	shadd16	r6, r6, r3
 8007d02:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8007d06:	fa96 f623 	shadd16	r6, r6, r3
 8007d0a:	fad0 f016 	qsub16	r0, r0, r6
 8007d0e:	faa2 f610 	qasx	r6, r2, r0
 8007d12:	fae2 f210 	qsax	r2, r2, r0
 8007d16:	fb21 fb02 	smuad	fp, r1, r2
 8007d1a:	fb41 f212 	smusdx	r2, r1, r2
 8007d1e:	ea02 020e 	and.w	r2, r2, lr
 8007d22:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 8007d26:	f84c 2b04 	str.w	r2, [ip], #4
 8007d2a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8007d2e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8007d32:	fb22 f106 	smuad	r1, r2, r6
 8007d36:	fb42 f216 	smusdx	r2, r2, r6
 8007d3a:	ea02 020e 	and.w	r2, r2, lr
 8007d3e:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8007d42:	f845 2b04 	str.w	r2, [r5], #4
 8007d46:	9a03      	ldr	r2, [sp, #12]
 8007d48:	f1b9 0901 	subs.w	r9, r9, #1
 8007d4c:	4414      	add	r4, r2
 8007d4e:	d1a0      	bne.n	8007c92 <arm_radix4_butterfly_q15+0x27e>
 8007d50:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007d52:	9b03      	ldr	r3, [sp, #12]
 8007d54:	2a04      	cmp	r2, #4
 8007d56:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007d5a:	f63f aed9 	bhi.w	8007b10 <arm_radix4_butterfly_q15+0xfc>
 8007d5e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d60:	4614      	mov	r4, r2
 8007d62:	e76c      	b.n	8007c3e <arm_radix4_butterfly_q15+0x22a>
 8007d64:	ffff0000 	.word	0xffff0000

08007d68 <arm_radix4_butterfly_inverse_q15>:
 8007d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6c:	b093      	sub	sp, #76	@ 0x4c
 8007d6e:	f021 0a03 	bic.w	sl, r1, #3
 8007d72:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 8007d76:	9210      	str	r2, [sp, #64]	@ 0x40
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	ea4f 0291 	mov.w	r2, r1, lsr #2
 8007d7e:	eb0c 050a 	add.w	r5, ip, sl
 8007d82:	9101      	str	r1, [sp, #4]
 8007d84:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007d86:	9303      	str	r3, [sp, #12]
 8007d88:	4482      	add	sl, r0
 8007d8a:	9211      	str	r2, [sp, #68]	@ 0x44
 8007d8c:	f040 8124 	bne.w	8007fd8 <arm_radix4_butterfly_inverse_q15+0x270>
 8007d90:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007d92:	f8df e324 	ldr.w	lr, [pc, #804]	@ 80080b8 <arm_radix4_butterfly_inverse_q15+0x350>
 8007d96:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8007d98:	f8cd a008 	str.w	sl, [sp, #8]
 8007d9c:	4693      	mov	fp, r2
 8007d9e:	4690      	mov	r8, r2
 8007da0:	4657      	mov	r7, sl
 8007da2:	2300      	movs	r3, #0
 8007da4:	4691      	mov	r9, r2
 8007da6:	6830      	ldr	r0, [r6, #0]
 8007da8:	f8dc 2000 	ldr.w	r2, [ip]
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	fa90 f023 	shadd16	r0, r0, r3
 8007db2:	fa91 f123 	shadd16	r1, r1, r3
 8007db6:	fa90 f023 	shadd16	r0, r0, r3
 8007dba:	fa91 fa23 	shadd16	sl, r1, r3
 8007dbe:	fa92 f223 	shadd16	r2, r2, r3
 8007dc2:	6829      	ldr	r1, [r5, #0]
 8007dc4:	fa92 f223 	shadd16	r2, r2, r3
 8007dc8:	fa91 f123 	shadd16	r1, r1, r3
 8007dcc:	fa90 f412 	qadd16	r4, r0, r2
 8007dd0:	fa91 f123 	shadd16	r1, r1, r3
 8007dd4:	fa9a f111 	qadd16	r1, sl, r1
 8007dd8:	fa94 fa21 	shadd16	sl, r4, r1
 8007ddc:	f846 ab04 	str.w	sl, [r6], #4
 8007de0:	fad4 f411 	qsub16	r4, r4, r1
 8007de4:	fad0 f212 	qsub16	r2, r0, r2
 8007de8:	f85b 1b08 	ldr.w	r1, [fp], #8
 8007dec:	fb41 f004 	smusd	r0, r1, r4
 8007df0:	fb21 f114 	smuadx	r1, r1, r4
 8007df4:	ea01 010e 	and.w	r1, r1, lr
 8007df8:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8007dfc:	6838      	ldr	r0, [r7, #0]
 8007dfe:	f847 1b04 	str.w	r1, [r7], #4
 8007e02:	fa90 f023 	shadd16	r0, r0, r3
 8007e06:	682c      	ldr	r4, [r5, #0]
 8007e08:	fa90 f023 	shadd16	r0, r0, r3
 8007e0c:	fa94 f423 	shadd16	r4, r4, r3
 8007e10:	f859 1b04 	ldr.w	r1, [r9], #4
 8007e14:	fa94 f423 	shadd16	r4, r4, r3
 8007e18:	fad0 f014 	qsub16	r0, r0, r4
 8007e1c:	fae2 f410 	qsax	r4, r2, r0
 8007e20:	faa2 f210 	qasx	r2, r2, r0
 8007e24:	fb41 fa02 	smusd	sl, r1, r2
 8007e28:	fb21 f212 	smuadx	r2, r1, r2
 8007e2c:	ea02 020e 	and.w	r2, r2, lr
 8007e30:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 8007e34:	f84c 2b04 	str.w	r2, [ip], #4
 8007e38:	f858 2b0c 	ldr.w	r2, [r8], #12
 8007e3c:	fb42 f104 	smusd	r1, r2, r4
 8007e40:	fb22 f214 	smuadx	r2, r2, r4
 8007e44:	ea02 020e 	and.w	r2, r2, lr
 8007e48:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8007e4c:	f845 2b04 	str.w	r2, [r5], #4
 8007e50:	9a02      	ldr	r2, [sp, #8]
 8007e52:	42b2      	cmp	r2, r6
 8007e54:	d1a7      	bne.n	8007da6 <arm_radix4_butterfly_inverse_q15+0x3e>
 8007e56:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007e58:	9b03      	ldr	r3, [sp, #12]
 8007e5a:	2a04      	cmp	r2, #4
 8007e5c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007e60:	f240 8127 	bls.w	80080b2 <arm_radix4_butterfly_inverse_q15+0x34a>
 8007e64:	f8df a250 	ldr.w	sl, [pc, #592]	@ 80080b8 <arm_radix4_butterfly_inverse_q15+0x350>
 8007e68:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e6a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007e6c:	9102      	str	r1, [sp, #8]
 8007e6e:	4608      	mov	r0, r1
 8007e70:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007e74:	0889      	lsrs	r1, r1, #2
 8007e76:	0092      	lsls	r2, r2, #2
 8007e78:	0086      	lsls	r6, r0, #2
 8007e7a:	9801      	ldr	r0, [sp, #4]
 8007e7c:	920d      	str	r2, [sp, #52]	@ 0x34
 8007e7e:	008c      	lsls	r4, r1, #2
 8007e80:	009a      	lsls	r2, r3, #2
 8007e82:	00db      	lsls	r3, r3, #3
 8007e84:	4288      	cmp	r0, r1
 8007e86:	940a      	str	r4, [sp, #40]	@ 0x28
 8007e88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e8a:	4604      	mov	r4, r0
 8007e8c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007e8e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8007e90:	910e      	str	r1, [sp, #56]	@ 0x38
 8007e92:	bf28      	it	cs
 8007e94:	460c      	movcs	r4, r1
 8007e96:	e9cd 0305 	strd	r0, r3, [sp, #20]
 8007e9a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8007e9e:	9308      	str	r3, [sp, #32]
 8007ea0:	9307      	str	r3, [sp, #28]
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	940c      	str	r4, [sp, #48]	@ 0x30
 8007ea6:	9104      	str	r1, [sp, #16]
 8007ea8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007eaa:	9303      	str	r3, [sp, #12]
 8007eac:	9b08      	ldr	r3, [sp, #32]
 8007eae:	9a05      	ldr	r2, [sp, #20]
 8007eb0:	f8d3 9000 	ldr.w	r9, [r3]
 8007eb4:	9b07      	ldr	r3, [sp, #28]
 8007eb6:	9f03      	ldr	r7, [sp, #12]
 8007eb8:	f8d3 8000 	ldr.w	r8, [r3]
 8007ebc:	9b06      	ldr	r3, [sp, #24]
 8007ebe:	f8d3 e000 	ldr.w	lr, [r3]
 8007ec2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ec4:	4615      	mov	r5, r2
 8007ec6:	1898      	adds	r0, r3, r2
 8007ec8:	9a04      	ldr	r2, [sp, #16]
 8007eca:	4614      	mov	r4, r2
 8007ecc:	1899      	adds	r1, r3, r2
 8007ece:	682a      	ldr	r2, [r5, #0]
 8007ed0:	6823      	ldr	r3, [r4, #0]
 8007ed2:	f8d0 b000 	ldr.w	fp, [r0]
 8007ed6:	fa92 fc13 	qadd16	ip, r2, r3
 8007eda:	fad2 f213 	qsub16	r2, r2, r3
 8007ede:	680b      	ldr	r3, [r1, #0]
 8007ee0:	fa9b f313 	qadd16	r3, fp, r3
 8007ee4:	fa9c fb23 	shadd16	fp, ip, r3
 8007ee8:	fadc f323 	shsub16	r3, ip, r3
 8007eec:	f04f 0c00 	mov.w	ip, #0
 8007ef0:	fa9b fb2c 	shadd16	fp, fp, ip
 8007ef4:	f8c5 b000 	str.w	fp, [r5]
 8007ef8:	4435      	add	r5, r6
 8007efa:	fb48 fb03 	smusd	fp, r8, r3
 8007efe:	fb28 f313 	smuadx	r3, r8, r3
 8007f02:	ea03 030a 	and.w	r3, r3, sl
 8007f06:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 8007f0a:	f8d0 b000 	ldr.w	fp, [r0]
 8007f0e:	6003      	str	r3, [r0, #0]
 8007f10:	f8d1 c000 	ldr.w	ip, [r1]
 8007f14:	fadb fc1c 	qsub16	ip, fp, ip
 8007f18:	4430      	add	r0, r6
 8007f1a:	fae2 f32c 	shsax	r3, r2, ip
 8007f1e:	faa2 f22c 	shasx	r2, r2, ip
 8007f22:	fb49 fc02 	smusd	ip, r9, r2
 8007f26:	fb29 f212 	smuadx	r2, r9, r2
 8007f2a:	ea02 020a 	and.w	r2, r2, sl
 8007f2e:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 8007f32:	6022      	str	r2, [r4, #0]
 8007f34:	4434      	add	r4, r6
 8007f36:	fb4e f203 	smusd	r2, lr, r3
 8007f3a:	fb2e f313 	smuadx	r3, lr, r3
 8007f3e:	ea03 030a 	and.w	r3, r3, sl
 8007f42:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8007f46:	9a02      	ldr	r2, [sp, #8]
 8007f48:	600b      	str	r3, [r1, #0]
 8007f4a:	9b01      	ldr	r3, [sp, #4]
 8007f4c:	4417      	add	r7, r2
 8007f4e:	42bb      	cmp	r3, r7
 8007f50:	4431      	add	r1, r6
 8007f52:	d8bc      	bhi.n	8007ece <arm_radix4_butterfly_inverse_q15+0x166>
 8007f54:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8007f58:	440a      	add	r2, r1
 8007f5a:	9208      	str	r2, [sp, #32]
 8007f5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f5e:	9a07      	ldr	r2, [sp, #28]
 8007f60:	9b03      	ldr	r3, [sp, #12]
 8007f62:	440a      	add	r2, r1
 8007f64:	9207      	str	r2, [sp, #28]
 8007f66:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007f68:	9a06      	ldr	r2, [sp, #24]
 8007f6a:	440a      	add	r2, r1
 8007f6c:	9206      	str	r2, [sp, #24]
 8007f6e:	9a05      	ldr	r2, [sp, #20]
 8007f70:	3204      	adds	r2, #4
 8007f72:	9205      	str	r2, [sp, #20]
 8007f74:	9a04      	ldr	r2, [sp, #16]
 8007f76:	3204      	adds	r2, #4
 8007f78:	9204      	str	r2, [sp, #16]
 8007f7a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	9303      	str	r3, [sp, #12]
 8007f82:	d393      	bcc.n	8007eac <arm_radix4_butterfly_inverse_q15+0x144>
 8007f84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f88:	2a04      	cmp	r2, #4
 8007f8a:	f63f af6e 	bhi.w	8007e6a <arm_radix4_butterfly_inverse_q15+0x102>
 8007f8e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8007f90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f92:	689d      	ldr	r5, [r3, #8]
 8007f94:	68de      	ldr	r6, [r3, #12]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	6859      	ldr	r1, [r3, #4]
 8007f9a:	fa92 f015 	qadd16	r0, r2, r5
 8007f9e:	3c01      	subs	r4, #1
 8007fa0:	fad2 f215 	qsub16	r2, r2, r5
 8007fa4:	f103 0310 	add.w	r3, r3, #16
 8007fa8:	fa91 f516 	qadd16	r5, r1, r6
 8007fac:	fad1 f116 	qsub16	r1, r1, r6
 8007fb0:	fa90 f625 	shadd16	r6, r0, r5
 8007fb4:	fad0 f025 	shsub16	r0, r0, r5
 8007fb8:	f843 6c10 	str.w	r6, [r3, #-16]
 8007fbc:	f843 0c0c 	str.w	r0, [r3, #-12]
 8007fc0:	faa2 f021 	shasx	r0, r2, r1
 8007fc4:	fae2 f221 	shsax	r2, r2, r1
 8007fc8:	f843 0c08 	str.w	r0, [r3, #-8]
 8007fcc:	f843 2c04 	str.w	r2, [r3, #-4]
 8007fd0:	d1df      	bne.n	8007f92 <arm_radix4_butterfly_inverse_q15+0x22a>
 8007fd2:	b013      	add	sp, #76	@ 0x4c
 8007fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd8:	2400      	movs	r4, #0
 8007fda:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 80080b8 <arm_radix4_butterfly_inverse_q15+0x350>
 8007fde:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8007fe0:	4623      	mov	r3, r4
 8007fe2:	4680      	mov	r8, r0
 8007fe4:	4691      	mov	r9, r2
 8007fe6:	f8d8 0000 	ldr.w	r0, [r8]
 8007fea:	f8dc 2000 	ldr.w	r2, [ip]
 8007fee:	f8da 1000 	ldr.w	r1, [sl]
 8007ff2:	fa90 f023 	shadd16	r0, r0, r3
 8007ff6:	fa91 f123 	shadd16	r1, r1, r3
 8007ffa:	fa90 f023 	shadd16	r0, r0, r3
 8007ffe:	fa91 fb23 	shadd16	fp, r1, r3
 8008002:	fa92 f223 	shadd16	r2, r2, r3
 8008006:	6829      	ldr	r1, [r5, #0]
 8008008:	fa92 f223 	shadd16	r2, r2, r3
 800800c:	fa91 f123 	shadd16	r1, r1, r3
 8008010:	fa90 f612 	qadd16	r6, r0, r2
 8008014:	fa91 f123 	shadd16	r1, r1, r3
 8008018:	fa9b f111 	qadd16	r1, fp, r1
 800801c:	fa96 fb21 	shadd16	fp, r6, r1
 8008020:	f848 bb04 	str.w	fp, [r8], #4
 8008024:	fad6 f611 	qsub16	r6, r6, r1
 8008028:	fad0 f212 	qsub16	r2, r0, r2
 800802c:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 8008030:	fb41 f006 	smusd	r0, r1, r6
 8008034:	fb21 f116 	smuadx	r1, r1, r6
 8008038:	ea01 010e 	and.w	r1, r1, lr
 800803c:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8008040:	f8da 0000 	ldr.w	r0, [sl]
 8008044:	f84a 1b04 	str.w	r1, [sl], #4
 8008048:	fa90 f023 	shadd16	r0, r0, r3
 800804c:	682e      	ldr	r6, [r5, #0]
 800804e:	fa90 f023 	shadd16	r0, r0, r3
 8008052:	fa96 f623 	shadd16	r6, r6, r3
 8008056:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800805a:	fa96 f623 	shadd16	r6, r6, r3
 800805e:	fad0 f016 	qsub16	r0, r0, r6
 8008062:	fae2 f610 	qsax	r6, r2, r0
 8008066:	faa2 f210 	qasx	r2, r2, r0
 800806a:	fb41 fb02 	smusd	fp, r1, r2
 800806e:	fb21 f212 	smuadx	r2, r1, r2
 8008072:	ea02 020e 	and.w	r2, r2, lr
 8008076:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 800807a:	f84c 2b04 	str.w	r2, [ip], #4
 800807e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8008082:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8008086:	fb42 f106 	smusd	r1, r2, r6
 800808a:	fb22 f216 	smuadx	r2, r2, r6
 800808e:	ea02 020e 	and.w	r2, r2, lr
 8008092:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8008096:	f845 2b04 	str.w	r2, [r5], #4
 800809a:	9a03      	ldr	r2, [sp, #12]
 800809c:	f1b9 0901 	subs.w	r9, r9, #1
 80080a0:	4414      	add	r4, r2
 80080a2:	d1a0      	bne.n	8007fe6 <arm_radix4_butterfly_inverse_q15+0x27e>
 80080a4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80080a6:	9b03      	ldr	r3, [sp, #12]
 80080a8:	2a04      	cmp	r2, #4
 80080aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80080ae:	f63f aed9 	bhi.w	8007e64 <arm_radix4_butterfly_inverse_q15+0xfc>
 80080b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080b4:	4614      	mov	r4, r2
 80080b6:	e76c      	b.n	8007f92 <arm_radix4_butterfly_inverse_q15+0x22a>
 80080b8:	ffff0000 	.word	0xffff0000

080080bc <arm_bitreversal_16>:
 80080bc:	b1f1      	cbz	r1, 80080fc <arm_bitreversal_16+0x40>
 80080be:	b4f0      	push	{r4, r5, r6, r7}
 80080c0:	2400      	movs	r4, #0
 80080c2:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 80080c6:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 80080ca:	886d      	ldrh	r5, [r5, #2]
 80080cc:	08ad      	lsrs	r5, r5, #2
 80080ce:	089b      	lsrs	r3, r3, #2
 80080d0:	f830 6015 	ldrh.w	r6, [r0, r5, lsl #1]
 80080d4:	f830 7013 	ldrh.w	r7, [r0, r3, lsl #1]
 80080d8:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 80080dc:	006e      	lsls	r6, r5, #1
 80080de:	005b      	lsls	r3, r3, #1
 80080e0:	f820 7015 	strh.w	r7, [r0, r5, lsl #1]
 80080e4:	3302      	adds	r3, #2
 80080e6:	1cb5      	adds	r5, r6, #2
 80080e8:	3402      	adds	r4, #2
 80080ea:	b2a4      	uxth	r4, r4
 80080ec:	5ac6      	ldrh	r6, [r0, r3]
 80080ee:	5b47      	ldrh	r7, [r0, r5]
 80080f0:	52c7      	strh	r7, [r0, r3]
 80080f2:	42a1      	cmp	r1, r4
 80080f4:	5346      	strh	r6, [r0, r5]
 80080f6:	d8e4      	bhi.n	80080c2 <arm_bitreversal_16+0x6>
 80080f8:	bcf0      	pop	{r4, r5, r6, r7}
 80080fa:	4770      	bx	lr
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop

08008100 <__cvt>:
 8008100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008104:	ec57 6b10 	vmov	r6, r7, d0
 8008108:	2f00      	cmp	r7, #0
 800810a:	460c      	mov	r4, r1
 800810c:	4619      	mov	r1, r3
 800810e:	463b      	mov	r3, r7
 8008110:	bfbb      	ittet	lt
 8008112:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008116:	461f      	movlt	r7, r3
 8008118:	2300      	movge	r3, #0
 800811a:	232d      	movlt	r3, #45	@ 0x2d
 800811c:	700b      	strb	r3, [r1, #0]
 800811e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008120:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008124:	4691      	mov	r9, r2
 8008126:	f023 0820 	bic.w	r8, r3, #32
 800812a:	bfbc      	itt	lt
 800812c:	4632      	movlt	r2, r6
 800812e:	4616      	movlt	r6, r2
 8008130:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008134:	d005      	beq.n	8008142 <__cvt+0x42>
 8008136:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800813a:	d100      	bne.n	800813e <__cvt+0x3e>
 800813c:	3401      	adds	r4, #1
 800813e:	2102      	movs	r1, #2
 8008140:	e000      	b.n	8008144 <__cvt+0x44>
 8008142:	2103      	movs	r1, #3
 8008144:	ab03      	add	r3, sp, #12
 8008146:	9301      	str	r3, [sp, #4]
 8008148:	ab02      	add	r3, sp, #8
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	ec47 6b10 	vmov	d0, r6, r7
 8008150:	4653      	mov	r3, sl
 8008152:	4622      	mov	r2, r4
 8008154:	f001 f800 	bl	8009158 <_dtoa_r>
 8008158:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800815c:	4605      	mov	r5, r0
 800815e:	d119      	bne.n	8008194 <__cvt+0x94>
 8008160:	f019 0f01 	tst.w	r9, #1
 8008164:	d00e      	beq.n	8008184 <__cvt+0x84>
 8008166:	eb00 0904 	add.w	r9, r0, r4
 800816a:	2200      	movs	r2, #0
 800816c:	2300      	movs	r3, #0
 800816e:	4630      	mov	r0, r6
 8008170:	4639      	mov	r1, r7
 8008172:	f7f8 fcb9 	bl	8000ae8 <__aeabi_dcmpeq>
 8008176:	b108      	cbz	r0, 800817c <__cvt+0x7c>
 8008178:	f8cd 900c 	str.w	r9, [sp, #12]
 800817c:	2230      	movs	r2, #48	@ 0x30
 800817e:	9b03      	ldr	r3, [sp, #12]
 8008180:	454b      	cmp	r3, r9
 8008182:	d31e      	bcc.n	80081c2 <__cvt+0xc2>
 8008184:	9b03      	ldr	r3, [sp, #12]
 8008186:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008188:	1b5b      	subs	r3, r3, r5
 800818a:	4628      	mov	r0, r5
 800818c:	6013      	str	r3, [r2, #0]
 800818e:	b004      	add	sp, #16
 8008190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008194:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008198:	eb00 0904 	add.w	r9, r0, r4
 800819c:	d1e5      	bne.n	800816a <__cvt+0x6a>
 800819e:	7803      	ldrb	r3, [r0, #0]
 80081a0:	2b30      	cmp	r3, #48	@ 0x30
 80081a2:	d10a      	bne.n	80081ba <__cvt+0xba>
 80081a4:	2200      	movs	r2, #0
 80081a6:	2300      	movs	r3, #0
 80081a8:	4630      	mov	r0, r6
 80081aa:	4639      	mov	r1, r7
 80081ac:	f7f8 fc9c 	bl	8000ae8 <__aeabi_dcmpeq>
 80081b0:	b918      	cbnz	r0, 80081ba <__cvt+0xba>
 80081b2:	f1c4 0401 	rsb	r4, r4, #1
 80081b6:	f8ca 4000 	str.w	r4, [sl]
 80081ba:	f8da 3000 	ldr.w	r3, [sl]
 80081be:	4499      	add	r9, r3
 80081c0:	e7d3      	b.n	800816a <__cvt+0x6a>
 80081c2:	1c59      	adds	r1, r3, #1
 80081c4:	9103      	str	r1, [sp, #12]
 80081c6:	701a      	strb	r2, [r3, #0]
 80081c8:	e7d9      	b.n	800817e <__cvt+0x7e>

080081ca <__exponent>:
 80081ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081cc:	2900      	cmp	r1, #0
 80081ce:	bfba      	itte	lt
 80081d0:	4249      	neglt	r1, r1
 80081d2:	232d      	movlt	r3, #45	@ 0x2d
 80081d4:	232b      	movge	r3, #43	@ 0x2b
 80081d6:	2909      	cmp	r1, #9
 80081d8:	7002      	strb	r2, [r0, #0]
 80081da:	7043      	strb	r3, [r0, #1]
 80081dc:	dd29      	ble.n	8008232 <__exponent+0x68>
 80081de:	f10d 0307 	add.w	r3, sp, #7
 80081e2:	461d      	mov	r5, r3
 80081e4:	270a      	movs	r7, #10
 80081e6:	461a      	mov	r2, r3
 80081e8:	fbb1 f6f7 	udiv	r6, r1, r7
 80081ec:	fb07 1416 	mls	r4, r7, r6, r1
 80081f0:	3430      	adds	r4, #48	@ 0x30
 80081f2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80081f6:	460c      	mov	r4, r1
 80081f8:	2c63      	cmp	r4, #99	@ 0x63
 80081fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80081fe:	4631      	mov	r1, r6
 8008200:	dcf1      	bgt.n	80081e6 <__exponent+0x1c>
 8008202:	3130      	adds	r1, #48	@ 0x30
 8008204:	1e94      	subs	r4, r2, #2
 8008206:	f803 1c01 	strb.w	r1, [r3, #-1]
 800820a:	1c41      	adds	r1, r0, #1
 800820c:	4623      	mov	r3, r4
 800820e:	42ab      	cmp	r3, r5
 8008210:	d30a      	bcc.n	8008228 <__exponent+0x5e>
 8008212:	f10d 0309 	add.w	r3, sp, #9
 8008216:	1a9b      	subs	r3, r3, r2
 8008218:	42ac      	cmp	r4, r5
 800821a:	bf88      	it	hi
 800821c:	2300      	movhi	r3, #0
 800821e:	3302      	adds	r3, #2
 8008220:	4403      	add	r3, r0
 8008222:	1a18      	subs	r0, r3, r0
 8008224:	b003      	add	sp, #12
 8008226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008228:	f813 6b01 	ldrb.w	r6, [r3], #1
 800822c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008230:	e7ed      	b.n	800820e <__exponent+0x44>
 8008232:	2330      	movs	r3, #48	@ 0x30
 8008234:	3130      	adds	r1, #48	@ 0x30
 8008236:	7083      	strb	r3, [r0, #2]
 8008238:	70c1      	strb	r1, [r0, #3]
 800823a:	1d03      	adds	r3, r0, #4
 800823c:	e7f1      	b.n	8008222 <__exponent+0x58>
	...

08008240 <_printf_float>:
 8008240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008244:	b08d      	sub	sp, #52	@ 0x34
 8008246:	460c      	mov	r4, r1
 8008248:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800824c:	4616      	mov	r6, r2
 800824e:	461f      	mov	r7, r3
 8008250:	4605      	mov	r5, r0
 8008252:	f000 fe73 	bl	8008f3c <_localeconv_r>
 8008256:	6803      	ldr	r3, [r0, #0]
 8008258:	9304      	str	r3, [sp, #16]
 800825a:	4618      	mov	r0, r3
 800825c:	f7f8 f818 	bl	8000290 <strlen>
 8008260:	2300      	movs	r3, #0
 8008262:	930a      	str	r3, [sp, #40]	@ 0x28
 8008264:	f8d8 3000 	ldr.w	r3, [r8]
 8008268:	9005      	str	r0, [sp, #20]
 800826a:	3307      	adds	r3, #7
 800826c:	f023 0307 	bic.w	r3, r3, #7
 8008270:	f103 0208 	add.w	r2, r3, #8
 8008274:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008278:	f8d4 b000 	ldr.w	fp, [r4]
 800827c:	f8c8 2000 	str.w	r2, [r8]
 8008280:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008284:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008288:	9307      	str	r3, [sp, #28]
 800828a:	f8cd 8018 	str.w	r8, [sp, #24]
 800828e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008292:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008296:	4b9c      	ldr	r3, [pc, #624]	@ (8008508 <_printf_float+0x2c8>)
 8008298:	f04f 32ff 	mov.w	r2, #4294967295
 800829c:	f7f8 fc56 	bl	8000b4c <__aeabi_dcmpun>
 80082a0:	bb70      	cbnz	r0, 8008300 <_printf_float+0xc0>
 80082a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082a6:	4b98      	ldr	r3, [pc, #608]	@ (8008508 <_printf_float+0x2c8>)
 80082a8:	f04f 32ff 	mov.w	r2, #4294967295
 80082ac:	f7f8 fc30 	bl	8000b10 <__aeabi_dcmple>
 80082b0:	bb30      	cbnz	r0, 8008300 <_printf_float+0xc0>
 80082b2:	2200      	movs	r2, #0
 80082b4:	2300      	movs	r3, #0
 80082b6:	4640      	mov	r0, r8
 80082b8:	4649      	mov	r1, r9
 80082ba:	f7f8 fc1f 	bl	8000afc <__aeabi_dcmplt>
 80082be:	b110      	cbz	r0, 80082c6 <_printf_float+0x86>
 80082c0:	232d      	movs	r3, #45	@ 0x2d
 80082c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082c6:	4a91      	ldr	r2, [pc, #580]	@ (800850c <_printf_float+0x2cc>)
 80082c8:	4b91      	ldr	r3, [pc, #580]	@ (8008510 <_printf_float+0x2d0>)
 80082ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80082ce:	bf94      	ite	ls
 80082d0:	4690      	movls	r8, r2
 80082d2:	4698      	movhi	r8, r3
 80082d4:	2303      	movs	r3, #3
 80082d6:	6123      	str	r3, [r4, #16]
 80082d8:	f02b 0304 	bic.w	r3, fp, #4
 80082dc:	6023      	str	r3, [r4, #0]
 80082de:	f04f 0900 	mov.w	r9, #0
 80082e2:	9700      	str	r7, [sp, #0]
 80082e4:	4633      	mov	r3, r6
 80082e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80082e8:	4621      	mov	r1, r4
 80082ea:	4628      	mov	r0, r5
 80082ec:	f000 f9d2 	bl	8008694 <_printf_common>
 80082f0:	3001      	adds	r0, #1
 80082f2:	f040 808d 	bne.w	8008410 <_printf_float+0x1d0>
 80082f6:	f04f 30ff 	mov.w	r0, #4294967295
 80082fa:	b00d      	add	sp, #52	@ 0x34
 80082fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008300:	4642      	mov	r2, r8
 8008302:	464b      	mov	r3, r9
 8008304:	4640      	mov	r0, r8
 8008306:	4649      	mov	r1, r9
 8008308:	f7f8 fc20 	bl	8000b4c <__aeabi_dcmpun>
 800830c:	b140      	cbz	r0, 8008320 <_printf_float+0xe0>
 800830e:	464b      	mov	r3, r9
 8008310:	2b00      	cmp	r3, #0
 8008312:	bfbc      	itt	lt
 8008314:	232d      	movlt	r3, #45	@ 0x2d
 8008316:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800831a:	4a7e      	ldr	r2, [pc, #504]	@ (8008514 <_printf_float+0x2d4>)
 800831c:	4b7e      	ldr	r3, [pc, #504]	@ (8008518 <_printf_float+0x2d8>)
 800831e:	e7d4      	b.n	80082ca <_printf_float+0x8a>
 8008320:	6863      	ldr	r3, [r4, #4]
 8008322:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008326:	9206      	str	r2, [sp, #24]
 8008328:	1c5a      	adds	r2, r3, #1
 800832a:	d13b      	bne.n	80083a4 <_printf_float+0x164>
 800832c:	2306      	movs	r3, #6
 800832e:	6063      	str	r3, [r4, #4]
 8008330:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008334:	2300      	movs	r3, #0
 8008336:	6022      	str	r2, [r4, #0]
 8008338:	9303      	str	r3, [sp, #12]
 800833a:	ab0a      	add	r3, sp, #40	@ 0x28
 800833c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008340:	ab09      	add	r3, sp, #36	@ 0x24
 8008342:	9300      	str	r3, [sp, #0]
 8008344:	6861      	ldr	r1, [r4, #4]
 8008346:	ec49 8b10 	vmov	d0, r8, r9
 800834a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800834e:	4628      	mov	r0, r5
 8008350:	f7ff fed6 	bl	8008100 <__cvt>
 8008354:	9b06      	ldr	r3, [sp, #24]
 8008356:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008358:	2b47      	cmp	r3, #71	@ 0x47
 800835a:	4680      	mov	r8, r0
 800835c:	d129      	bne.n	80083b2 <_printf_float+0x172>
 800835e:	1cc8      	adds	r0, r1, #3
 8008360:	db02      	blt.n	8008368 <_printf_float+0x128>
 8008362:	6863      	ldr	r3, [r4, #4]
 8008364:	4299      	cmp	r1, r3
 8008366:	dd41      	ble.n	80083ec <_printf_float+0x1ac>
 8008368:	f1aa 0a02 	sub.w	sl, sl, #2
 800836c:	fa5f fa8a 	uxtb.w	sl, sl
 8008370:	3901      	subs	r1, #1
 8008372:	4652      	mov	r2, sl
 8008374:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008378:	9109      	str	r1, [sp, #36]	@ 0x24
 800837a:	f7ff ff26 	bl	80081ca <__exponent>
 800837e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008380:	1813      	adds	r3, r2, r0
 8008382:	2a01      	cmp	r2, #1
 8008384:	4681      	mov	r9, r0
 8008386:	6123      	str	r3, [r4, #16]
 8008388:	dc02      	bgt.n	8008390 <_printf_float+0x150>
 800838a:	6822      	ldr	r2, [r4, #0]
 800838c:	07d2      	lsls	r2, r2, #31
 800838e:	d501      	bpl.n	8008394 <_printf_float+0x154>
 8008390:	3301      	adds	r3, #1
 8008392:	6123      	str	r3, [r4, #16]
 8008394:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008398:	2b00      	cmp	r3, #0
 800839a:	d0a2      	beq.n	80082e2 <_printf_float+0xa2>
 800839c:	232d      	movs	r3, #45	@ 0x2d
 800839e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083a2:	e79e      	b.n	80082e2 <_printf_float+0xa2>
 80083a4:	9a06      	ldr	r2, [sp, #24]
 80083a6:	2a47      	cmp	r2, #71	@ 0x47
 80083a8:	d1c2      	bne.n	8008330 <_printf_float+0xf0>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d1c0      	bne.n	8008330 <_printf_float+0xf0>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e7bd      	b.n	800832e <_printf_float+0xee>
 80083b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80083b6:	d9db      	bls.n	8008370 <_printf_float+0x130>
 80083b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80083bc:	d118      	bne.n	80083f0 <_printf_float+0x1b0>
 80083be:	2900      	cmp	r1, #0
 80083c0:	6863      	ldr	r3, [r4, #4]
 80083c2:	dd0b      	ble.n	80083dc <_printf_float+0x19c>
 80083c4:	6121      	str	r1, [r4, #16]
 80083c6:	b913      	cbnz	r3, 80083ce <_printf_float+0x18e>
 80083c8:	6822      	ldr	r2, [r4, #0]
 80083ca:	07d0      	lsls	r0, r2, #31
 80083cc:	d502      	bpl.n	80083d4 <_printf_float+0x194>
 80083ce:	3301      	adds	r3, #1
 80083d0:	440b      	add	r3, r1
 80083d2:	6123      	str	r3, [r4, #16]
 80083d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80083d6:	f04f 0900 	mov.w	r9, #0
 80083da:	e7db      	b.n	8008394 <_printf_float+0x154>
 80083dc:	b913      	cbnz	r3, 80083e4 <_printf_float+0x1a4>
 80083de:	6822      	ldr	r2, [r4, #0]
 80083e0:	07d2      	lsls	r2, r2, #31
 80083e2:	d501      	bpl.n	80083e8 <_printf_float+0x1a8>
 80083e4:	3302      	adds	r3, #2
 80083e6:	e7f4      	b.n	80083d2 <_printf_float+0x192>
 80083e8:	2301      	movs	r3, #1
 80083ea:	e7f2      	b.n	80083d2 <_printf_float+0x192>
 80083ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80083f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083f2:	4299      	cmp	r1, r3
 80083f4:	db05      	blt.n	8008402 <_printf_float+0x1c2>
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	6121      	str	r1, [r4, #16]
 80083fa:	07d8      	lsls	r0, r3, #31
 80083fc:	d5ea      	bpl.n	80083d4 <_printf_float+0x194>
 80083fe:	1c4b      	adds	r3, r1, #1
 8008400:	e7e7      	b.n	80083d2 <_printf_float+0x192>
 8008402:	2900      	cmp	r1, #0
 8008404:	bfd4      	ite	le
 8008406:	f1c1 0202 	rsble	r2, r1, #2
 800840a:	2201      	movgt	r2, #1
 800840c:	4413      	add	r3, r2
 800840e:	e7e0      	b.n	80083d2 <_printf_float+0x192>
 8008410:	6823      	ldr	r3, [r4, #0]
 8008412:	055a      	lsls	r2, r3, #21
 8008414:	d407      	bmi.n	8008426 <_printf_float+0x1e6>
 8008416:	6923      	ldr	r3, [r4, #16]
 8008418:	4642      	mov	r2, r8
 800841a:	4631      	mov	r1, r6
 800841c:	4628      	mov	r0, r5
 800841e:	47b8      	blx	r7
 8008420:	3001      	adds	r0, #1
 8008422:	d12b      	bne.n	800847c <_printf_float+0x23c>
 8008424:	e767      	b.n	80082f6 <_printf_float+0xb6>
 8008426:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800842a:	f240 80dd 	bls.w	80085e8 <_printf_float+0x3a8>
 800842e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008432:	2200      	movs	r2, #0
 8008434:	2300      	movs	r3, #0
 8008436:	f7f8 fb57 	bl	8000ae8 <__aeabi_dcmpeq>
 800843a:	2800      	cmp	r0, #0
 800843c:	d033      	beq.n	80084a6 <_printf_float+0x266>
 800843e:	4a37      	ldr	r2, [pc, #220]	@ (800851c <_printf_float+0x2dc>)
 8008440:	2301      	movs	r3, #1
 8008442:	4631      	mov	r1, r6
 8008444:	4628      	mov	r0, r5
 8008446:	47b8      	blx	r7
 8008448:	3001      	adds	r0, #1
 800844a:	f43f af54 	beq.w	80082f6 <_printf_float+0xb6>
 800844e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008452:	4543      	cmp	r3, r8
 8008454:	db02      	blt.n	800845c <_printf_float+0x21c>
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	07d8      	lsls	r0, r3, #31
 800845a:	d50f      	bpl.n	800847c <_printf_float+0x23c>
 800845c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008460:	4631      	mov	r1, r6
 8008462:	4628      	mov	r0, r5
 8008464:	47b8      	blx	r7
 8008466:	3001      	adds	r0, #1
 8008468:	f43f af45 	beq.w	80082f6 <_printf_float+0xb6>
 800846c:	f04f 0900 	mov.w	r9, #0
 8008470:	f108 38ff 	add.w	r8, r8, #4294967295
 8008474:	f104 0a1a 	add.w	sl, r4, #26
 8008478:	45c8      	cmp	r8, r9
 800847a:	dc09      	bgt.n	8008490 <_printf_float+0x250>
 800847c:	6823      	ldr	r3, [r4, #0]
 800847e:	079b      	lsls	r3, r3, #30
 8008480:	f100 8103 	bmi.w	800868a <_printf_float+0x44a>
 8008484:	68e0      	ldr	r0, [r4, #12]
 8008486:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008488:	4298      	cmp	r0, r3
 800848a:	bfb8      	it	lt
 800848c:	4618      	movlt	r0, r3
 800848e:	e734      	b.n	80082fa <_printf_float+0xba>
 8008490:	2301      	movs	r3, #1
 8008492:	4652      	mov	r2, sl
 8008494:	4631      	mov	r1, r6
 8008496:	4628      	mov	r0, r5
 8008498:	47b8      	blx	r7
 800849a:	3001      	adds	r0, #1
 800849c:	f43f af2b 	beq.w	80082f6 <_printf_float+0xb6>
 80084a0:	f109 0901 	add.w	r9, r9, #1
 80084a4:	e7e8      	b.n	8008478 <_printf_float+0x238>
 80084a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	dc39      	bgt.n	8008520 <_printf_float+0x2e0>
 80084ac:	4a1b      	ldr	r2, [pc, #108]	@ (800851c <_printf_float+0x2dc>)
 80084ae:	2301      	movs	r3, #1
 80084b0:	4631      	mov	r1, r6
 80084b2:	4628      	mov	r0, r5
 80084b4:	47b8      	blx	r7
 80084b6:	3001      	adds	r0, #1
 80084b8:	f43f af1d 	beq.w	80082f6 <_printf_float+0xb6>
 80084bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80084c0:	ea59 0303 	orrs.w	r3, r9, r3
 80084c4:	d102      	bne.n	80084cc <_printf_float+0x28c>
 80084c6:	6823      	ldr	r3, [r4, #0]
 80084c8:	07d9      	lsls	r1, r3, #31
 80084ca:	d5d7      	bpl.n	800847c <_printf_float+0x23c>
 80084cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084d0:	4631      	mov	r1, r6
 80084d2:	4628      	mov	r0, r5
 80084d4:	47b8      	blx	r7
 80084d6:	3001      	adds	r0, #1
 80084d8:	f43f af0d 	beq.w	80082f6 <_printf_float+0xb6>
 80084dc:	f04f 0a00 	mov.w	sl, #0
 80084e0:	f104 0b1a 	add.w	fp, r4, #26
 80084e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084e6:	425b      	negs	r3, r3
 80084e8:	4553      	cmp	r3, sl
 80084ea:	dc01      	bgt.n	80084f0 <_printf_float+0x2b0>
 80084ec:	464b      	mov	r3, r9
 80084ee:	e793      	b.n	8008418 <_printf_float+0x1d8>
 80084f0:	2301      	movs	r3, #1
 80084f2:	465a      	mov	r2, fp
 80084f4:	4631      	mov	r1, r6
 80084f6:	4628      	mov	r0, r5
 80084f8:	47b8      	blx	r7
 80084fa:	3001      	adds	r0, #1
 80084fc:	f43f aefb 	beq.w	80082f6 <_printf_float+0xb6>
 8008500:	f10a 0a01 	add.w	sl, sl, #1
 8008504:	e7ee      	b.n	80084e4 <_printf_float+0x2a4>
 8008506:	bf00      	nop
 8008508:	7fefffff 	.word	0x7fefffff
 800850c:	0801cf68 	.word	0x0801cf68
 8008510:	0801cf6c 	.word	0x0801cf6c
 8008514:	0801cf70 	.word	0x0801cf70
 8008518:	0801cf74 	.word	0x0801cf74
 800851c:	0801cf78 	.word	0x0801cf78
 8008520:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008522:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008526:	4553      	cmp	r3, sl
 8008528:	bfa8      	it	ge
 800852a:	4653      	movge	r3, sl
 800852c:	2b00      	cmp	r3, #0
 800852e:	4699      	mov	r9, r3
 8008530:	dc36      	bgt.n	80085a0 <_printf_float+0x360>
 8008532:	f04f 0b00 	mov.w	fp, #0
 8008536:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800853a:	f104 021a 	add.w	r2, r4, #26
 800853e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008540:	9306      	str	r3, [sp, #24]
 8008542:	eba3 0309 	sub.w	r3, r3, r9
 8008546:	455b      	cmp	r3, fp
 8008548:	dc31      	bgt.n	80085ae <_printf_float+0x36e>
 800854a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800854c:	459a      	cmp	sl, r3
 800854e:	dc3a      	bgt.n	80085c6 <_printf_float+0x386>
 8008550:	6823      	ldr	r3, [r4, #0]
 8008552:	07da      	lsls	r2, r3, #31
 8008554:	d437      	bmi.n	80085c6 <_printf_float+0x386>
 8008556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008558:	ebaa 0903 	sub.w	r9, sl, r3
 800855c:	9b06      	ldr	r3, [sp, #24]
 800855e:	ebaa 0303 	sub.w	r3, sl, r3
 8008562:	4599      	cmp	r9, r3
 8008564:	bfa8      	it	ge
 8008566:	4699      	movge	r9, r3
 8008568:	f1b9 0f00 	cmp.w	r9, #0
 800856c:	dc33      	bgt.n	80085d6 <_printf_float+0x396>
 800856e:	f04f 0800 	mov.w	r8, #0
 8008572:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008576:	f104 0b1a 	add.w	fp, r4, #26
 800857a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800857c:	ebaa 0303 	sub.w	r3, sl, r3
 8008580:	eba3 0309 	sub.w	r3, r3, r9
 8008584:	4543      	cmp	r3, r8
 8008586:	f77f af79 	ble.w	800847c <_printf_float+0x23c>
 800858a:	2301      	movs	r3, #1
 800858c:	465a      	mov	r2, fp
 800858e:	4631      	mov	r1, r6
 8008590:	4628      	mov	r0, r5
 8008592:	47b8      	blx	r7
 8008594:	3001      	adds	r0, #1
 8008596:	f43f aeae 	beq.w	80082f6 <_printf_float+0xb6>
 800859a:	f108 0801 	add.w	r8, r8, #1
 800859e:	e7ec      	b.n	800857a <_printf_float+0x33a>
 80085a0:	4642      	mov	r2, r8
 80085a2:	4631      	mov	r1, r6
 80085a4:	4628      	mov	r0, r5
 80085a6:	47b8      	blx	r7
 80085a8:	3001      	adds	r0, #1
 80085aa:	d1c2      	bne.n	8008532 <_printf_float+0x2f2>
 80085ac:	e6a3      	b.n	80082f6 <_printf_float+0xb6>
 80085ae:	2301      	movs	r3, #1
 80085b0:	4631      	mov	r1, r6
 80085b2:	4628      	mov	r0, r5
 80085b4:	9206      	str	r2, [sp, #24]
 80085b6:	47b8      	blx	r7
 80085b8:	3001      	adds	r0, #1
 80085ba:	f43f ae9c 	beq.w	80082f6 <_printf_float+0xb6>
 80085be:	9a06      	ldr	r2, [sp, #24]
 80085c0:	f10b 0b01 	add.w	fp, fp, #1
 80085c4:	e7bb      	b.n	800853e <_printf_float+0x2fe>
 80085c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085ca:	4631      	mov	r1, r6
 80085cc:	4628      	mov	r0, r5
 80085ce:	47b8      	blx	r7
 80085d0:	3001      	adds	r0, #1
 80085d2:	d1c0      	bne.n	8008556 <_printf_float+0x316>
 80085d4:	e68f      	b.n	80082f6 <_printf_float+0xb6>
 80085d6:	9a06      	ldr	r2, [sp, #24]
 80085d8:	464b      	mov	r3, r9
 80085da:	4442      	add	r2, r8
 80085dc:	4631      	mov	r1, r6
 80085de:	4628      	mov	r0, r5
 80085e0:	47b8      	blx	r7
 80085e2:	3001      	adds	r0, #1
 80085e4:	d1c3      	bne.n	800856e <_printf_float+0x32e>
 80085e6:	e686      	b.n	80082f6 <_printf_float+0xb6>
 80085e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80085ec:	f1ba 0f01 	cmp.w	sl, #1
 80085f0:	dc01      	bgt.n	80085f6 <_printf_float+0x3b6>
 80085f2:	07db      	lsls	r3, r3, #31
 80085f4:	d536      	bpl.n	8008664 <_printf_float+0x424>
 80085f6:	2301      	movs	r3, #1
 80085f8:	4642      	mov	r2, r8
 80085fa:	4631      	mov	r1, r6
 80085fc:	4628      	mov	r0, r5
 80085fe:	47b8      	blx	r7
 8008600:	3001      	adds	r0, #1
 8008602:	f43f ae78 	beq.w	80082f6 <_printf_float+0xb6>
 8008606:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800860a:	4631      	mov	r1, r6
 800860c:	4628      	mov	r0, r5
 800860e:	47b8      	blx	r7
 8008610:	3001      	adds	r0, #1
 8008612:	f43f ae70 	beq.w	80082f6 <_printf_float+0xb6>
 8008616:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800861a:	2200      	movs	r2, #0
 800861c:	2300      	movs	r3, #0
 800861e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008622:	f7f8 fa61 	bl	8000ae8 <__aeabi_dcmpeq>
 8008626:	b9c0      	cbnz	r0, 800865a <_printf_float+0x41a>
 8008628:	4653      	mov	r3, sl
 800862a:	f108 0201 	add.w	r2, r8, #1
 800862e:	4631      	mov	r1, r6
 8008630:	4628      	mov	r0, r5
 8008632:	47b8      	blx	r7
 8008634:	3001      	adds	r0, #1
 8008636:	d10c      	bne.n	8008652 <_printf_float+0x412>
 8008638:	e65d      	b.n	80082f6 <_printf_float+0xb6>
 800863a:	2301      	movs	r3, #1
 800863c:	465a      	mov	r2, fp
 800863e:	4631      	mov	r1, r6
 8008640:	4628      	mov	r0, r5
 8008642:	47b8      	blx	r7
 8008644:	3001      	adds	r0, #1
 8008646:	f43f ae56 	beq.w	80082f6 <_printf_float+0xb6>
 800864a:	f108 0801 	add.w	r8, r8, #1
 800864e:	45d0      	cmp	r8, sl
 8008650:	dbf3      	blt.n	800863a <_printf_float+0x3fa>
 8008652:	464b      	mov	r3, r9
 8008654:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008658:	e6df      	b.n	800841a <_printf_float+0x1da>
 800865a:	f04f 0800 	mov.w	r8, #0
 800865e:	f104 0b1a 	add.w	fp, r4, #26
 8008662:	e7f4      	b.n	800864e <_printf_float+0x40e>
 8008664:	2301      	movs	r3, #1
 8008666:	4642      	mov	r2, r8
 8008668:	e7e1      	b.n	800862e <_printf_float+0x3ee>
 800866a:	2301      	movs	r3, #1
 800866c:	464a      	mov	r2, r9
 800866e:	4631      	mov	r1, r6
 8008670:	4628      	mov	r0, r5
 8008672:	47b8      	blx	r7
 8008674:	3001      	adds	r0, #1
 8008676:	f43f ae3e 	beq.w	80082f6 <_printf_float+0xb6>
 800867a:	f108 0801 	add.w	r8, r8, #1
 800867e:	68e3      	ldr	r3, [r4, #12]
 8008680:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008682:	1a5b      	subs	r3, r3, r1
 8008684:	4543      	cmp	r3, r8
 8008686:	dcf0      	bgt.n	800866a <_printf_float+0x42a>
 8008688:	e6fc      	b.n	8008484 <_printf_float+0x244>
 800868a:	f04f 0800 	mov.w	r8, #0
 800868e:	f104 0919 	add.w	r9, r4, #25
 8008692:	e7f4      	b.n	800867e <_printf_float+0x43e>

08008694 <_printf_common>:
 8008694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008698:	4616      	mov	r6, r2
 800869a:	4698      	mov	r8, r3
 800869c:	688a      	ldr	r2, [r1, #8]
 800869e:	690b      	ldr	r3, [r1, #16]
 80086a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086a4:	4293      	cmp	r3, r2
 80086a6:	bfb8      	it	lt
 80086a8:	4613      	movlt	r3, r2
 80086aa:	6033      	str	r3, [r6, #0]
 80086ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086b0:	4607      	mov	r7, r0
 80086b2:	460c      	mov	r4, r1
 80086b4:	b10a      	cbz	r2, 80086ba <_printf_common+0x26>
 80086b6:	3301      	adds	r3, #1
 80086b8:	6033      	str	r3, [r6, #0]
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	0699      	lsls	r1, r3, #26
 80086be:	bf42      	ittt	mi
 80086c0:	6833      	ldrmi	r3, [r6, #0]
 80086c2:	3302      	addmi	r3, #2
 80086c4:	6033      	strmi	r3, [r6, #0]
 80086c6:	6825      	ldr	r5, [r4, #0]
 80086c8:	f015 0506 	ands.w	r5, r5, #6
 80086cc:	d106      	bne.n	80086dc <_printf_common+0x48>
 80086ce:	f104 0a19 	add.w	sl, r4, #25
 80086d2:	68e3      	ldr	r3, [r4, #12]
 80086d4:	6832      	ldr	r2, [r6, #0]
 80086d6:	1a9b      	subs	r3, r3, r2
 80086d8:	42ab      	cmp	r3, r5
 80086da:	dc26      	bgt.n	800872a <_printf_common+0x96>
 80086dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80086e0:	6822      	ldr	r2, [r4, #0]
 80086e2:	3b00      	subs	r3, #0
 80086e4:	bf18      	it	ne
 80086e6:	2301      	movne	r3, #1
 80086e8:	0692      	lsls	r2, r2, #26
 80086ea:	d42b      	bmi.n	8008744 <_printf_common+0xb0>
 80086ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80086f0:	4641      	mov	r1, r8
 80086f2:	4638      	mov	r0, r7
 80086f4:	47c8      	blx	r9
 80086f6:	3001      	adds	r0, #1
 80086f8:	d01e      	beq.n	8008738 <_printf_common+0xa4>
 80086fa:	6823      	ldr	r3, [r4, #0]
 80086fc:	6922      	ldr	r2, [r4, #16]
 80086fe:	f003 0306 	and.w	r3, r3, #6
 8008702:	2b04      	cmp	r3, #4
 8008704:	bf02      	ittt	eq
 8008706:	68e5      	ldreq	r5, [r4, #12]
 8008708:	6833      	ldreq	r3, [r6, #0]
 800870a:	1aed      	subeq	r5, r5, r3
 800870c:	68a3      	ldr	r3, [r4, #8]
 800870e:	bf0c      	ite	eq
 8008710:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008714:	2500      	movne	r5, #0
 8008716:	4293      	cmp	r3, r2
 8008718:	bfc4      	itt	gt
 800871a:	1a9b      	subgt	r3, r3, r2
 800871c:	18ed      	addgt	r5, r5, r3
 800871e:	2600      	movs	r6, #0
 8008720:	341a      	adds	r4, #26
 8008722:	42b5      	cmp	r5, r6
 8008724:	d11a      	bne.n	800875c <_printf_common+0xc8>
 8008726:	2000      	movs	r0, #0
 8008728:	e008      	b.n	800873c <_printf_common+0xa8>
 800872a:	2301      	movs	r3, #1
 800872c:	4652      	mov	r2, sl
 800872e:	4641      	mov	r1, r8
 8008730:	4638      	mov	r0, r7
 8008732:	47c8      	blx	r9
 8008734:	3001      	adds	r0, #1
 8008736:	d103      	bne.n	8008740 <_printf_common+0xac>
 8008738:	f04f 30ff 	mov.w	r0, #4294967295
 800873c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008740:	3501      	adds	r5, #1
 8008742:	e7c6      	b.n	80086d2 <_printf_common+0x3e>
 8008744:	18e1      	adds	r1, r4, r3
 8008746:	1c5a      	adds	r2, r3, #1
 8008748:	2030      	movs	r0, #48	@ 0x30
 800874a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800874e:	4422      	add	r2, r4
 8008750:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008754:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008758:	3302      	adds	r3, #2
 800875a:	e7c7      	b.n	80086ec <_printf_common+0x58>
 800875c:	2301      	movs	r3, #1
 800875e:	4622      	mov	r2, r4
 8008760:	4641      	mov	r1, r8
 8008762:	4638      	mov	r0, r7
 8008764:	47c8      	blx	r9
 8008766:	3001      	adds	r0, #1
 8008768:	d0e6      	beq.n	8008738 <_printf_common+0xa4>
 800876a:	3601      	adds	r6, #1
 800876c:	e7d9      	b.n	8008722 <_printf_common+0x8e>
	...

08008770 <_printf_i>:
 8008770:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008774:	7e0f      	ldrb	r7, [r1, #24]
 8008776:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008778:	2f78      	cmp	r7, #120	@ 0x78
 800877a:	4691      	mov	r9, r2
 800877c:	4680      	mov	r8, r0
 800877e:	460c      	mov	r4, r1
 8008780:	469a      	mov	sl, r3
 8008782:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008786:	d807      	bhi.n	8008798 <_printf_i+0x28>
 8008788:	2f62      	cmp	r7, #98	@ 0x62
 800878a:	d80a      	bhi.n	80087a2 <_printf_i+0x32>
 800878c:	2f00      	cmp	r7, #0
 800878e:	f000 80d2 	beq.w	8008936 <_printf_i+0x1c6>
 8008792:	2f58      	cmp	r7, #88	@ 0x58
 8008794:	f000 80b9 	beq.w	800890a <_printf_i+0x19a>
 8008798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800879c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80087a0:	e03a      	b.n	8008818 <_printf_i+0xa8>
 80087a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80087a6:	2b15      	cmp	r3, #21
 80087a8:	d8f6      	bhi.n	8008798 <_printf_i+0x28>
 80087aa:	a101      	add	r1, pc, #4	@ (adr r1, 80087b0 <_printf_i+0x40>)
 80087ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087b0:	08008809 	.word	0x08008809
 80087b4:	0800881d 	.word	0x0800881d
 80087b8:	08008799 	.word	0x08008799
 80087bc:	08008799 	.word	0x08008799
 80087c0:	08008799 	.word	0x08008799
 80087c4:	08008799 	.word	0x08008799
 80087c8:	0800881d 	.word	0x0800881d
 80087cc:	08008799 	.word	0x08008799
 80087d0:	08008799 	.word	0x08008799
 80087d4:	08008799 	.word	0x08008799
 80087d8:	08008799 	.word	0x08008799
 80087dc:	0800891d 	.word	0x0800891d
 80087e0:	08008847 	.word	0x08008847
 80087e4:	080088d7 	.word	0x080088d7
 80087e8:	08008799 	.word	0x08008799
 80087ec:	08008799 	.word	0x08008799
 80087f0:	0800893f 	.word	0x0800893f
 80087f4:	08008799 	.word	0x08008799
 80087f8:	08008847 	.word	0x08008847
 80087fc:	08008799 	.word	0x08008799
 8008800:	08008799 	.word	0x08008799
 8008804:	080088df 	.word	0x080088df
 8008808:	6833      	ldr	r3, [r6, #0]
 800880a:	1d1a      	adds	r2, r3, #4
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	6032      	str	r2, [r6, #0]
 8008810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008814:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008818:	2301      	movs	r3, #1
 800881a:	e09d      	b.n	8008958 <_printf_i+0x1e8>
 800881c:	6833      	ldr	r3, [r6, #0]
 800881e:	6820      	ldr	r0, [r4, #0]
 8008820:	1d19      	adds	r1, r3, #4
 8008822:	6031      	str	r1, [r6, #0]
 8008824:	0606      	lsls	r6, r0, #24
 8008826:	d501      	bpl.n	800882c <_printf_i+0xbc>
 8008828:	681d      	ldr	r5, [r3, #0]
 800882a:	e003      	b.n	8008834 <_printf_i+0xc4>
 800882c:	0645      	lsls	r5, r0, #25
 800882e:	d5fb      	bpl.n	8008828 <_printf_i+0xb8>
 8008830:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008834:	2d00      	cmp	r5, #0
 8008836:	da03      	bge.n	8008840 <_printf_i+0xd0>
 8008838:	232d      	movs	r3, #45	@ 0x2d
 800883a:	426d      	negs	r5, r5
 800883c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008840:	4859      	ldr	r0, [pc, #356]	@ (80089a8 <_printf_i+0x238>)
 8008842:	230a      	movs	r3, #10
 8008844:	e011      	b.n	800886a <_printf_i+0xfa>
 8008846:	6821      	ldr	r1, [r4, #0]
 8008848:	6833      	ldr	r3, [r6, #0]
 800884a:	0608      	lsls	r0, r1, #24
 800884c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008850:	d402      	bmi.n	8008858 <_printf_i+0xe8>
 8008852:	0649      	lsls	r1, r1, #25
 8008854:	bf48      	it	mi
 8008856:	b2ad      	uxthmi	r5, r5
 8008858:	2f6f      	cmp	r7, #111	@ 0x6f
 800885a:	4853      	ldr	r0, [pc, #332]	@ (80089a8 <_printf_i+0x238>)
 800885c:	6033      	str	r3, [r6, #0]
 800885e:	bf14      	ite	ne
 8008860:	230a      	movne	r3, #10
 8008862:	2308      	moveq	r3, #8
 8008864:	2100      	movs	r1, #0
 8008866:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800886a:	6866      	ldr	r6, [r4, #4]
 800886c:	60a6      	str	r6, [r4, #8]
 800886e:	2e00      	cmp	r6, #0
 8008870:	bfa2      	ittt	ge
 8008872:	6821      	ldrge	r1, [r4, #0]
 8008874:	f021 0104 	bicge.w	r1, r1, #4
 8008878:	6021      	strge	r1, [r4, #0]
 800887a:	b90d      	cbnz	r5, 8008880 <_printf_i+0x110>
 800887c:	2e00      	cmp	r6, #0
 800887e:	d04b      	beq.n	8008918 <_printf_i+0x1a8>
 8008880:	4616      	mov	r6, r2
 8008882:	fbb5 f1f3 	udiv	r1, r5, r3
 8008886:	fb03 5711 	mls	r7, r3, r1, r5
 800888a:	5dc7      	ldrb	r7, [r0, r7]
 800888c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008890:	462f      	mov	r7, r5
 8008892:	42bb      	cmp	r3, r7
 8008894:	460d      	mov	r5, r1
 8008896:	d9f4      	bls.n	8008882 <_printf_i+0x112>
 8008898:	2b08      	cmp	r3, #8
 800889a:	d10b      	bne.n	80088b4 <_printf_i+0x144>
 800889c:	6823      	ldr	r3, [r4, #0]
 800889e:	07df      	lsls	r7, r3, #31
 80088a0:	d508      	bpl.n	80088b4 <_printf_i+0x144>
 80088a2:	6923      	ldr	r3, [r4, #16]
 80088a4:	6861      	ldr	r1, [r4, #4]
 80088a6:	4299      	cmp	r1, r3
 80088a8:	bfde      	ittt	le
 80088aa:	2330      	movle	r3, #48	@ 0x30
 80088ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80088b4:	1b92      	subs	r2, r2, r6
 80088b6:	6122      	str	r2, [r4, #16]
 80088b8:	f8cd a000 	str.w	sl, [sp]
 80088bc:	464b      	mov	r3, r9
 80088be:	aa03      	add	r2, sp, #12
 80088c0:	4621      	mov	r1, r4
 80088c2:	4640      	mov	r0, r8
 80088c4:	f7ff fee6 	bl	8008694 <_printf_common>
 80088c8:	3001      	adds	r0, #1
 80088ca:	d14a      	bne.n	8008962 <_printf_i+0x1f2>
 80088cc:	f04f 30ff 	mov.w	r0, #4294967295
 80088d0:	b004      	add	sp, #16
 80088d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	f043 0320 	orr.w	r3, r3, #32
 80088dc:	6023      	str	r3, [r4, #0]
 80088de:	4833      	ldr	r0, [pc, #204]	@ (80089ac <_printf_i+0x23c>)
 80088e0:	2778      	movs	r7, #120	@ 0x78
 80088e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	6831      	ldr	r1, [r6, #0]
 80088ea:	061f      	lsls	r7, r3, #24
 80088ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80088f0:	d402      	bmi.n	80088f8 <_printf_i+0x188>
 80088f2:	065f      	lsls	r7, r3, #25
 80088f4:	bf48      	it	mi
 80088f6:	b2ad      	uxthmi	r5, r5
 80088f8:	6031      	str	r1, [r6, #0]
 80088fa:	07d9      	lsls	r1, r3, #31
 80088fc:	bf44      	itt	mi
 80088fe:	f043 0320 	orrmi.w	r3, r3, #32
 8008902:	6023      	strmi	r3, [r4, #0]
 8008904:	b11d      	cbz	r5, 800890e <_printf_i+0x19e>
 8008906:	2310      	movs	r3, #16
 8008908:	e7ac      	b.n	8008864 <_printf_i+0xf4>
 800890a:	4827      	ldr	r0, [pc, #156]	@ (80089a8 <_printf_i+0x238>)
 800890c:	e7e9      	b.n	80088e2 <_printf_i+0x172>
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	f023 0320 	bic.w	r3, r3, #32
 8008914:	6023      	str	r3, [r4, #0]
 8008916:	e7f6      	b.n	8008906 <_printf_i+0x196>
 8008918:	4616      	mov	r6, r2
 800891a:	e7bd      	b.n	8008898 <_printf_i+0x128>
 800891c:	6833      	ldr	r3, [r6, #0]
 800891e:	6825      	ldr	r5, [r4, #0]
 8008920:	6961      	ldr	r1, [r4, #20]
 8008922:	1d18      	adds	r0, r3, #4
 8008924:	6030      	str	r0, [r6, #0]
 8008926:	062e      	lsls	r6, r5, #24
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	d501      	bpl.n	8008930 <_printf_i+0x1c0>
 800892c:	6019      	str	r1, [r3, #0]
 800892e:	e002      	b.n	8008936 <_printf_i+0x1c6>
 8008930:	0668      	lsls	r0, r5, #25
 8008932:	d5fb      	bpl.n	800892c <_printf_i+0x1bc>
 8008934:	8019      	strh	r1, [r3, #0]
 8008936:	2300      	movs	r3, #0
 8008938:	6123      	str	r3, [r4, #16]
 800893a:	4616      	mov	r6, r2
 800893c:	e7bc      	b.n	80088b8 <_printf_i+0x148>
 800893e:	6833      	ldr	r3, [r6, #0]
 8008940:	1d1a      	adds	r2, r3, #4
 8008942:	6032      	str	r2, [r6, #0]
 8008944:	681e      	ldr	r6, [r3, #0]
 8008946:	6862      	ldr	r2, [r4, #4]
 8008948:	2100      	movs	r1, #0
 800894a:	4630      	mov	r0, r6
 800894c:	f7f7 fc50 	bl	80001f0 <memchr>
 8008950:	b108      	cbz	r0, 8008956 <_printf_i+0x1e6>
 8008952:	1b80      	subs	r0, r0, r6
 8008954:	6060      	str	r0, [r4, #4]
 8008956:	6863      	ldr	r3, [r4, #4]
 8008958:	6123      	str	r3, [r4, #16]
 800895a:	2300      	movs	r3, #0
 800895c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008960:	e7aa      	b.n	80088b8 <_printf_i+0x148>
 8008962:	6923      	ldr	r3, [r4, #16]
 8008964:	4632      	mov	r2, r6
 8008966:	4649      	mov	r1, r9
 8008968:	4640      	mov	r0, r8
 800896a:	47d0      	blx	sl
 800896c:	3001      	adds	r0, #1
 800896e:	d0ad      	beq.n	80088cc <_printf_i+0x15c>
 8008970:	6823      	ldr	r3, [r4, #0]
 8008972:	079b      	lsls	r3, r3, #30
 8008974:	d413      	bmi.n	800899e <_printf_i+0x22e>
 8008976:	68e0      	ldr	r0, [r4, #12]
 8008978:	9b03      	ldr	r3, [sp, #12]
 800897a:	4298      	cmp	r0, r3
 800897c:	bfb8      	it	lt
 800897e:	4618      	movlt	r0, r3
 8008980:	e7a6      	b.n	80088d0 <_printf_i+0x160>
 8008982:	2301      	movs	r3, #1
 8008984:	4632      	mov	r2, r6
 8008986:	4649      	mov	r1, r9
 8008988:	4640      	mov	r0, r8
 800898a:	47d0      	blx	sl
 800898c:	3001      	adds	r0, #1
 800898e:	d09d      	beq.n	80088cc <_printf_i+0x15c>
 8008990:	3501      	adds	r5, #1
 8008992:	68e3      	ldr	r3, [r4, #12]
 8008994:	9903      	ldr	r1, [sp, #12]
 8008996:	1a5b      	subs	r3, r3, r1
 8008998:	42ab      	cmp	r3, r5
 800899a:	dcf2      	bgt.n	8008982 <_printf_i+0x212>
 800899c:	e7eb      	b.n	8008976 <_printf_i+0x206>
 800899e:	2500      	movs	r5, #0
 80089a0:	f104 0619 	add.w	r6, r4, #25
 80089a4:	e7f5      	b.n	8008992 <_printf_i+0x222>
 80089a6:	bf00      	nop
 80089a8:	0801cf7a 	.word	0x0801cf7a
 80089ac:	0801cf8b 	.word	0x0801cf8b

080089b0 <std>:
 80089b0:	2300      	movs	r3, #0
 80089b2:	b510      	push	{r4, lr}
 80089b4:	4604      	mov	r4, r0
 80089b6:	e9c0 3300 	strd	r3, r3, [r0]
 80089ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089be:	6083      	str	r3, [r0, #8]
 80089c0:	8181      	strh	r1, [r0, #12]
 80089c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80089c4:	81c2      	strh	r2, [r0, #14]
 80089c6:	6183      	str	r3, [r0, #24]
 80089c8:	4619      	mov	r1, r3
 80089ca:	2208      	movs	r2, #8
 80089cc:	305c      	adds	r0, #92	@ 0x5c
 80089ce:	f000 faad 	bl	8008f2c <memset>
 80089d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008a08 <std+0x58>)
 80089d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80089d6:	4b0d      	ldr	r3, [pc, #52]	@ (8008a0c <std+0x5c>)
 80089d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80089da:	4b0d      	ldr	r3, [pc, #52]	@ (8008a10 <std+0x60>)
 80089dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80089de:	4b0d      	ldr	r3, [pc, #52]	@ (8008a14 <std+0x64>)
 80089e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80089e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008a18 <std+0x68>)
 80089e4:	6224      	str	r4, [r4, #32]
 80089e6:	429c      	cmp	r4, r3
 80089e8:	d006      	beq.n	80089f8 <std+0x48>
 80089ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80089ee:	4294      	cmp	r4, r2
 80089f0:	d002      	beq.n	80089f8 <std+0x48>
 80089f2:	33d0      	adds	r3, #208	@ 0xd0
 80089f4:	429c      	cmp	r4, r3
 80089f6:	d105      	bne.n	8008a04 <std+0x54>
 80089f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80089fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a00:	f000 bb10 	b.w	8009024 <__retarget_lock_init_recursive>
 8008a04:	bd10      	pop	{r4, pc}
 8008a06:	bf00      	nop
 8008a08:	08008d7d 	.word	0x08008d7d
 8008a0c:	08008d9f 	.word	0x08008d9f
 8008a10:	08008dd7 	.word	0x08008dd7
 8008a14:	08008dfb 	.word	0x08008dfb
 8008a18:	20004c9c 	.word	0x20004c9c

08008a1c <stdio_exit_handler>:
 8008a1c:	4a02      	ldr	r2, [pc, #8]	@ (8008a28 <stdio_exit_handler+0xc>)
 8008a1e:	4903      	ldr	r1, [pc, #12]	@ (8008a2c <stdio_exit_handler+0x10>)
 8008a20:	4803      	ldr	r0, [pc, #12]	@ (8008a30 <stdio_exit_handler+0x14>)
 8008a22:	f000 b869 	b.w	8008af8 <_fwalk_sglue>
 8008a26:	bf00      	nop
 8008a28:	20002f84 	.word	0x20002f84
 8008a2c:	0800a971 	.word	0x0800a971
 8008a30:	20002f94 	.word	0x20002f94

08008a34 <cleanup_stdio>:
 8008a34:	6841      	ldr	r1, [r0, #4]
 8008a36:	4b0c      	ldr	r3, [pc, #48]	@ (8008a68 <cleanup_stdio+0x34>)
 8008a38:	4299      	cmp	r1, r3
 8008a3a:	b510      	push	{r4, lr}
 8008a3c:	4604      	mov	r4, r0
 8008a3e:	d001      	beq.n	8008a44 <cleanup_stdio+0x10>
 8008a40:	f001 ff96 	bl	800a970 <_fflush_r>
 8008a44:	68a1      	ldr	r1, [r4, #8]
 8008a46:	4b09      	ldr	r3, [pc, #36]	@ (8008a6c <cleanup_stdio+0x38>)
 8008a48:	4299      	cmp	r1, r3
 8008a4a:	d002      	beq.n	8008a52 <cleanup_stdio+0x1e>
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f001 ff8f 	bl	800a970 <_fflush_r>
 8008a52:	68e1      	ldr	r1, [r4, #12]
 8008a54:	4b06      	ldr	r3, [pc, #24]	@ (8008a70 <cleanup_stdio+0x3c>)
 8008a56:	4299      	cmp	r1, r3
 8008a58:	d004      	beq.n	8008a64 <cleanup_stdio+0x30>
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a60:	f001 bf86 	b.w	800a970 <_fflush_r>
 8008a64:	bd10      	pop	{r4, pc}
 8008a66:	bf00      	nop
 8008a68:	20004c9c 	.word	0x20004c9c
 8008a6c:	20004d04 	.word	0x20004d04
 8008a70:	20004d6c 	.word	0x20004d6c

08008a74 <global_stdio_init.part.0>:
 8008a74:	b510      	push	{r4, lr}
 8008a76:	4b0b      	ldr	r3, [pc, #44]	@ (8008aa4 <global_stdio_init.part.0+0x30>)
 8008a78:	4c0b      	ldr	r4, [pc, #44]	@ (8008aa8 <global_stdio_init.part.0+0x34>)
 8008a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8008aac <global_stdio_init.part.0+0x38>)
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	4620      	mov	r0, r4
 8008a80:	2200      	movs	r2, #0
 8008a82:	2104      	movs	r1, #4
 8008a84:	f7ff ff94 	bl	80089b0 <std>
 8008a88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	2109      	movs	r1, #9
 8008a90:	f7ff ff8e 	bl	80089b0 <std>
 8008a94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008a98:	2202      	movs	r2, #2
 8008a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a9e:	2112      	movs	r1, #18
 8008aa0:	f7ff bf86 	b.w	80089b0 <std>
 8008aa4:	20004dd4 	.word	0x20004dd4
 8008aa8:	20004c9c 	.word	0x20004c9c
 8008aac:	08008a1d 	.word	0x08008a1d

08008ab0 <__sfp_lock_acquire>:
 8008ab0:	4801      	ldr	r0, [pc, #4]	@ (8008ab8 <__sfp_lock_acquire+0x8>)
 8008ab2:	f000 bab8 	b.w	8009026 <__retarget_lock_acquire_recursive>
 8008ab6:	bf00      	nop
 8008ab8:	20004ddd 	.word	0x20004ddd

08008abc <__sfp_lock_release>:
 8008abc:	4801      	ldr	r0, [pc, #4]	@ (8008ac4 <__sfp_lock_release+0x8>)
 8008abe:	f000 bab3 	b.w	8009028 <__retarget_lock_release_recursive>
 8008ac2:	bf00      	nop
 8008ac4:	20004ddd 	.word	0x20004ddd

08008ac8 <__sinit>:
 8008ac8:	b510      	push	{r4, lr}
 8008aca:	4604      	mov	r4, r0
 8008acc:	f7ff fff0 	bl	8008ab0 <__sfp_lock_acquire>
 8008ad0:	6a23      	ldr	r3, [r4, #32]
 8008ad2:	b11b      	cbz	r3, 8008adc <__sinit+0x14>
 8008ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ad8:	f7ff bff0 	b.w	8008abc <__sfp_lock_release>
 8008adc:	4b04      	ldr	r3, [pc, #16]	@ (8008af0 <__sinit+0x28>)
 8008ade:	6223      	str	r3, [r4, #32]
 8008ae0:	4b04      	ldr	r3, [pc, #16]	@ (8008af4 <__sinit+0x2c>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1f5      	bne.n	8008ad4 <__sinit+0xc>
 8008ae8:	f7ff ffc4 	bl	8008a74 <global_stdio_init.part.0>
 8008aec:	e7f2      	b.n	8008ad4 <__sinit+0xc>
 8008aee:	bf00      	nop
 8008af0:	08008a35 	.word	0x08008a35
 8008af4:	20004dd4 	.word	0x20004dd4

08008af8 <_fwalk_sglue>:
 8008af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008afc:	4607      	mov	r7, r0
 8008afe:	4688      	mov	r8, r1
 8008b00:	4614      	mov	r4, r2
 8008b02:	2600      	movs	r6, #0
 8008b04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b08:	f1b9 0901 	subs.w	r9, r9, #1
 8008b0c:	d505      	bpl.n	8008b1a <_fwalk_sglue+0x22>
 8008b0e:	6824      	ldr	r4, [r4, #0]
 8008b10:	2c00      	cmp	r4, #0
 8008b12:	d1f7      	bne.n	8008b04 <_fwalk_sglue+0xc>
 8008b14:	4630      	mov	r0, r6
 8008b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b1a:	89ab      	ldrh	r3, [r5, #12]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d907      	bls.n	8008b30 <_fwalk_sglue+0x38>
 8008b20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b24:	3301      	adds	r3, #1
 8008b26:	d003      	beq.n	8008b30 <_fwalk_sglue+0x38>
 8008b28:	4629      	mov	r1, r5
 8008b2a:	4638      	mov	r0, r7
 8008b2c:	47c0      	blx	r8
 8008b2e:	4306      	orrs	r6, r0
 8008b30:	3568      	adds	r5, #104	@ 0x68
 8008b32:	e7e9      	b.n	8008b08 <_fwalk_sglue+0x10>

08008b34 <iprintf>:
 8008b34:	b40f      	push	{r0, r1, r2, r3}
 8008b36:	b507      	push	{r0, r1, r2, lr}
 8008b38:	4906      	ldr	r1, [pc, #24]	@ (8008b54 <iprintf+0x20>)
 8008b3a:	ab04      	add	r3, sp, #16
 8008b3c:	6808      	ldr	r0, [r1, #0]
 8008b3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b42:	6881      	ldr	r1, [r0, #8]
 8008b44:	9301      	str	r3, [sp, #4]
 8008b46:	f001 fd77 	bl	800a638 <_vfiprintf_r>
 8008b4a:	b003      	add	sp, #12
 8008b4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b50:	b004      	add	sp, #16
 8008b52:	4770      	bx	lr
 8008b54:	20002f90 	.word	0x20002f90

08008b58 <_puts_r>:
 8008b58:	6a03      	ldr	r3, [r0, #32]
 8008b5a:	b570      	push	{r4, r5, r6, lr}
 8008b5c:	6884      	ldr	r4, [r0, #8]
 8008b5e:	4605      	mov	r5, r0
 8008b60:	460e      	mov	r6, r1
 8008b62:	b90b      	cbnz	r3, 8008b68 <_puts_r+0x10>
 8008b64:	f7ff ffb0 	bl	8008ac8 <__sinit>
 8008b68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b6a:	07db      	lsls	r3, r3, #31
 8008b6c:	d405      	bmi.n	8008b7a <_puts_r+0x22>
 8008b6e:	89a3      	ldrh	r3, [r4, #12]
 8008b70:	0598      	lsls	r0, r3, #22
 8008b72:	d402      	bmi.n	8008b7a <_puts_r+0x22>
 8008b74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b76:	f000 fa56 	bl	8009026 <__retarget_lock_acquire_recursive>
 8008b7a:	89a3      	ldrh	r3, [r4, #12]
 8008b7c:	0719      	lsls	r1, r3, #28
 8008b7e:	d502      	bpl.n	8008b86 <_puts_r+0x2e>
 8008b80:	6923      	ldr	r3, [r4, #16]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d135      	bne.n	8008bf2 <_puts_r+0x9a>
 8008b86:	4621      	mov	r1, r4
 8008b88:	4628      	mov	r0, r5
 8008b8a:	f000 f979 	bl	8008e80 <__swsetup_r>
 8008b8e:	b380      	cbz	r0, 8008bf2 <_puts_r+0x9a>
 8008b90:	f04f 35ff 	mov.w	r5, #4294967295
 8008b94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b96:	07da      	lsls	r2, r3, #31
 8008b98:	d405      	bmi.n	8008ba6 <_puts_r+0x4e>
 8008b9a:	89a3      	ldrh	r3, [r4, #12]
 8008b9c:	059b      	lsls	r3, r3, #22
 8008b9e:	d402      	bmi.n	8008ba6 <_puts_r+0x4e>
 8008ba0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ba2:	f000 fa41 	bl	8009028 <__retarget_lock_release_recursive>
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	bd70      	pop	{r4, r5, r6, pc}
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	da04      	bge.n	8008bb8 <_puts_r+0x60>
 8008bae:	69a2      	ldr	r2, [r4, #24]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	dc17      	bgt.n	8008be4 <_puts_r+0x8c>
 8008bb4:	290a      	cmp	r1, #10
 8008bb6:	d015      	beq.n	8008be4 <_puts_r+0x8c>
 8008bb8:	6823      	ldr	r3, [r4, #0]
 8008bba:	1c5a      	adds	r2, r3, #1
 8008bbc:	6022      	str	r2, [r4, #0]
 8008bbe:	7019      	strb	r1, [r3, #0]
 8008bc0:	68a3      	ldr	r3, [r4, #8]
 8008bc2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	60a3      	str	r3, [r4, #8]
 8008bca:	2900      	cmp	r1, #0
 8008bcc:	d1ed      	bne.n	8008baa <_puts_r+0x52>
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	da11      	bge.n	8008bf6 <_puts_r+0x9e>
 8008bd2:	4622      	mov	r2, r4
 8008bd4:	210a      	movs	r1, #10
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	f000 f913 	bl	8008e02 <__swbuf_r>
 8008bdc:	3001      	adds	r0, #1
 8008bde:	d0d7      	beq.n	8008b90 <_puts_r+0x38>
 8008be0:	250a      	movs	r5, #10
 8008be2:	e7d7      	b.n	8008b94 <_puts_r+0x3c>
 8008be4:	4622      	mov	r2, r4
 8008be6:	4628      	mov	r0, r5
 8008be8:	f000 f90b 	bl	8008e02 <__swbuf_r>
 8008bec:	3001      	adds	r0, #1
 8008bee:	d1e7      	bne.n	8008bc0 <_puts_r+0x68>
 8008bf0:	e7ce      	b.n	8008b90 <_puts_r+0x38>
 8008bf2:	3e01      	subs	r6, #1
 8008bf4:	e7e4      	b.n	8008bc0 <_puts_r+0x68>
 8008bf6:	6823      	ldr	r3, [r4, #0]
 8008bf8:	1c5a      	adds	r2, r3, #1
 8008bfa:	6022      	str	r2, [r4, #0]
 8008bfc:	220a      	movs	r2, #10
 8008bfe:	701a      	strb	r2, [r3, #0]
 8008c00:	e7ee      	b.n	8008be0 <_puts_r+0x88>
	...

08008c04 <puts>:
 8008c04:	4b02      	ldr	r3, [pc, #8]	@ (8008c10 <puts+0xc>)
 8008c06:	4601      	mov	r1, r0
 8008c08:	6818      	ldr	r0, [r3, #0]
 8008c0a:	f7ff bfa5 	b.w	8008b58 <_puts_r>
 8008c0e:	bf00      	nop
 8008c10:	20002f90 	.word	0x20002f90

08008c14 <setvbuf>:
 8008c14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c18:	461d      	mov	r5, r3
 8008c1a:	4b57      	ldr	r3, [pc, #348]	@ (8008d78 <setvbuf+0x164>)
 8008c1c:	681f      	ldr	r7, [r3, #0]
 8008c1e:	4604      	mov	r4, r0
 8008c20:	460e      	mov	r6, r1
 8008c22:	4690      	mov	r8, r2
 8008c24:	b127      	cbz	r7, 8008c30 <setvbuf+0x1c>
 8008c26:	6a3b      	ldr	r3, [r7, #32]
 8008c28:	b913      	cbnz	r3, 8008c30 <setvbuf+0x1c>
 8008c2a:	4638      	mov	r0, r7
 8008c2c:	f7ff ff4c 	bl	8008ac8 <__sinit>
 8008c30:	f1b8 0f02 	cmp.w	r8, #2
 8008c34:	d006      	beq.n	8008c44 <setvbuf+0x30>
 8008c36:	f1b8 0f01 	cmp.w	r8, #1
 8008c3a:	f200 809a 	bhi.w	8008d72 <setvbuf+0x15e>
 8008c3e:	2d00      	cmp	r5, #0
 8008c40:	f2c0 8097 	blt.w	8008d72 <setvbuf+0x15e>
 8008c44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c46:	07d9      	lsls	r1, r3, #31
 8008c48:	d405      	bmi.n	8008c56 <setvbuf+0x42>
 8008c4a:	89a3      	ldrh	r3, [r4, #12]
 8008c4c:	059a      	lsls	r2, r3, #22
 8008c4e:	d402      	bmi.n	8008c56 <setvbuf+0x42>
 8008c50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c52:	f000 f9e8 	bl	8009026 <__retarget_lock_acquire_recursive>
 8008c56:	4621      	mov	r1, r4
 8008c58:	4638      	mov	r0, r7
 8008c5a:	f001 fe89 	bl	800a970 <_fflush_r>
 8008c5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c60:	b141      	cbz	r1, 8008c74 <setvbuf+0x60>
 8008c62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c66:	4299      	cmp	r1, r3
 8008c68:	d002      	beq.n	8008c70 <setvbuf+0x5c>
 8008c6a:	4638      	mov	r0, r7
 8008c6c:	f001 f838 	bl	8009ce0 <_free_r>
 8008c70:	2300      	movs	r3, #0
 8008c72:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c74:	2300      	movs	r3, #0
 8008c76:	61a3      	str	r3, [r4, #24]
 8008c78:	6063      	str	r3, [r4, #4]
 8008c7a:	89a3      	ldrh	r3, [r4, #12]
 8008c7c:	061b      	lsls	r3, r3, #24
 8008c7e:	d503      	bpl.n	8008c88 <setvbuf+0x74>
 8008c80:	6921      	ldr	r1, [r4, #16]
 8008c82:	4638      	mov	r0, r7
 8008c84:	f001 f82c 	bl	8009ce0 <_free_r>
 8008c88:	89a3      	ldrh	r3, [r4, #12]
 8008c8a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8008c8e:	f023 0303 	bic.w	r3, r3, #3
 8008c92:	f1b8 0f02 	cmp.w	r8, #2
 8008c96:	81a3      	strh	r3, [r4, #12]
 8008c98:	d061      	beq.n	8008d5e <setvbuf+0x14a>
 8008c9a:	ab01      	add	r3, sp, #4
 8008c9c:	466a      	mov	r2, sp
 8008c9e:	4621      	mov	r1, r4
 8008ca0:	4638      	mov	r0, r7
 8008ca2:	f001 fe8d 	bl	800a9c0 <__swhatbuf_r>
 8008ca6:	89a3      	ldrh	r3, [r4, #12]
 8008ca8:	4318      	orrs	r0, r3
 8008caa:	81a0      	strh	r0, [r4, #12]
 8008cac:	bb2d      	cbnz	r5, 8008cfa <setvbuf+0xe6>
 8008cae:	9d00      	ldr	r5, [sp, #0]
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	f001 f85f 	bl	8009d74 <malloc>
 8008cb6:	4606      	mov	r6, r0
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	d152      	bne.n	8008d62 <setvbuf+0x14e>
 8008cbc:	f8dd 9000 	ldr.w	r9, [sp]
 8008cc0:	45a9      	cmp	r9, r5
 8008cc2:	d140      	bne.n	8008d46 <setvbuf+0x132>
 8008cc4:	f04f 35ff 	mov.w	r5, #4294967295
 8008cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ccc:	f043 0202 	orr.w	r2, r3, #2
 8008cd0:	81a2      	strh	r2, [r4, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	60a2      	str	r2, [r4, #8]
 8008cd6:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8008cda:	6022      	str	r2, [r4, #0]
 8008cdc:	6122      	str	r2, [r4, #16]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	6162      	str	r2, [r4, #20]
 8008ce2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ce4:	07d6      	lsls	r6, r2, #31
 8008ce6:	d404      	bmi.n	8008cf2 <setvbuf+0xde>
 8008ce8:	0598      	lsls	r0, r3, #22
 8008cea:	d402      	bmi.n	8008cf2 <setvbuf+0xde>
 8008cec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cee:	f000 f99b 	bl	8009028 <__retarget_lock_release_recursive>
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	b003      	add	sp, #12
 8008cf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008cfa:	2e00      	cmp	r6, #0
 8008cfc:	d0d8      	beq.n	8008cb0 <setvbuf+0x9c>
 8008cfe:	6a3b      	ldr	r3, [r7, #32]
 8008d00:	b913      	cbnz	r3, 8008d08 <setvbuf+0xf4>
 8008d02:	4638      	mov	r0, r7
 8008d04:	f7ff fee0 	bl	8008ac8 <__sinit>
 8008d08:	f1b8 0f01 	cmp.w	r8, #1
 8008d0c:	bf08      	it	eq
 8008d0e:	89a3      	ldrheq	r3, [r4, #12]
 8008d10:	6026      	str	r6, [r4, #0]
 8008d12:	bf04      	itt	eq
 8008d14:	f043 0301 	orreq.w	r3, r3, #1
 8008d18:	81a3      	strheq	r3, [r4, #12]
 8008d1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d1e:	f013 0208 	ands.w	r2, r3, #8
 8008d22:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008d26:	d01e      	beq.n	8008d66 <setvbuf+0x152>
 8008d28:	07d9      	lsls	r1, r3, #31
 8008d2a:	bf41      	itttt	mi
 8008d2c:	2200      	movmi	r2, #0
 8008d2e:	426d      	negmi	r5, r5
 8008d30:	60a2      	strmi	r2, [r4, #8]
 8008d32:	61a5      	strmi	r5, [r4, #24]
 8008d34:	bf58      	it	pl
 8008d36:	60a5      	strpl	r5, [r4, #8]
 8008d38:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008d3a:	07d2      	lsls	r2, r2, #31
 8008d3c:	d401      	bmi.n	8008d42 <setvbuf+0x12e>
 8008d3e:	059b      	lsls	r3, r3, #22
 8008d40:	d513      	bpl.n	8008d6a <setvbuf+0x156>
 8008d42:	2500      	movs	r5, #0
 8008d44:	e7d5      	b.n	8008cf2 <setvbuf+0xde>
 8008d46:	4648      	mov	r0, r9
 8008d48:	f001 f814 	bl	8009d74 <malloc>
 8008d4c:	4606      	mov	r6, r0
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	d0b8      	beq.n	8008cc4 <setvbuf+0xb0>
 8008d52:	89a3      	ldrh	r3, [r4, #12]
 8008d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d58:	81a3      	strh	r3, [r4, #12]
 8008d5a:	464d      	mov	r5, r9
 8008d5c:	e7cf      	b.n	8008cfe <setvbuf+0xea>
 8008d5e:	2500      	movs	r5, #0
 8008d60:	e7b2      	b.n	8008cc8 <setvbuf+0xb4>
 8008d62:	46a9      	mov	r9, r5
 8008d64:	e7f5      	b.n	8008d52 <setvbuf+0x13e>
 8008d66:	60a2      	str	r2, [r4, #8]
 8008d68:	e7e6      	b.n	8008d38 <setvbuf+0x124>
 8008d6a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d6c:	f000 f95c 	bl	8009028 <__retarget_lock_release_recursive>
 8008d70:	e7e7      	b.n	8008d42 <setvbuf+0x12e>
 8008d72:	f04f 35ff 	mov.w	r5, #4294967295
 8008d76:	e7bc      	b.n	8008cf2 <setvbuf+0xde>
 8008d78:	20002f90 	.word	0x20002f90

08008d7c <__sread>:
 8008d7c:	b510      	push	{r4, lr}
 8008d7e:	460c      	mov	r4, r1
 8008d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d84:	f000 f900 	bl	8008f88 <_read_r>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	bfab      	itete	ge
 8008d8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d8e:	89a3      	ldrhlt	r3, [r4, #12]
 8008d90:	181b      	addge	r3, r3, r0
 8008d92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d96:	bfac      	ite	ge
 8008d98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d9a:	81a3      	strhlt	r3, [r4, #12]
 8008d9c:	bd10      	pop	{r4, pc}

08008d9e <__swrite>:
 8008d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008da2:	461f      	mov	r7, r3
 8008da4:	898b      	ldrh	r3, [r1, #12]
 8008da6:	05db      	lsls	r3, r3, #23
 8008da8:	4605      	mov	r5, r0
 8008daa:	460c      	mov	r4, r1
 8008dac:	4616      	mov	r6, r2
 8008dae:	d505      	bpl.n	8008dbc <__swrite+0x1e>
 8008db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008db4:	2302      	movs	r3, #2
 8008db6:	2200      	movs	r2, #0
 8008db8:	f000 f8d4 	bl	8008f64 <_lseek_r>
 8008dbc:	89a3      	ldrh	r3, [r4, #12]
 8008dbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008dc6:	81a3      	strh	r3, [r4, #12]
 8008dc8:	4632      	mov	r2, r6
 8008dca:	463b      	mov	r3, r7
 8008dcc:	4628      	mov	r0, r5
 8008dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd2:	f000 b8eb 	b.w	8008fac <_write_r>

08008dd6 <__sseek>:
 8008dd6:	b510      	push	{r4, lr}
 8008dd8:	460c      	mov	r4, r1
 8008dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dde:	f000 f8c1 	bl	8008f64 <_lseek_r>
 8008de2:	1c43      	adds	r3, r0, #1
 8008de4:	89a3      	ldrh	r3, [r4, #12]
 8008de6:	bf15      	itete	ne
 8008de8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008dea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008dee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008df2:	81a3      	strheq	r3, [r4, #12]
 8008df4:	bf18      	it	ne
 8008df6:	81a3      	strhne	r3, [r4, #12]
 8008df8:	bd10      	pop	{r4, pc}

08008dfa <__sclose>:
 8008dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dfe:	f000 b8a1 	b.w	8008f44 <_close_r>

08008e02 <__swbuf_r>:
 8008e02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e04:	460e      	mov	r6, r1
 8008e06:	4614      	mov	r4, r2
 8008e08:	4605      	mov	r5, r0
 8008e0a:	b118      	cbz	r0, 8008e14 <__swbuf_r+0x12>
 8008e0c:	6a03      	ldr	r3, [r0, #32]
 8008e0e:	b90b      	cbnz	r3, 8008e14 <__swbuf_r+0x12>
 8008e10:	f7ff fe5a 	bl	8008ac8 <__sinit>
 8008e14:	69a3      	ldr	r3, [r4, #24]
 8008e16:	60a3      	str	r3, [r4, #8]
 8008e18:	89a3      	ldrh	r3, [r4, #12]
 8008e1a:	071a      	lsls	r2, r3, #28
 8008e1c:	d501      	bpl.n	8008e22 <__swbuf_r+0x20>
 8008e1e:	6923      	ldr	r3, [r4, #16]
 8008e20:	b943      	cbnz	r3, 8008e34 <__swbuf_r+0x32>
 8008e22:	4621      	mov	r1, r4
 8008e24:	4628      	mov	r0, r5
 8008e26:	f000 f82b 	bl	8008e80 <__swsetup_r>
 8008e2a:	b118      	cbz	r0, 8008e34 <__swbuf_r+0x32>
 8008e2c:	f04f 37ff 	mov.w	r7, #4294967295
 8008e30:	4638      	mov	r0, r7
 8008e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	6922      	ldr	r2, [r4, #16]
 8008e38:	1a98      	subs	r0, r3, r2
 8008e3a:	6963      	ldr	r3, [r4, #20]
 8008e3c:	b2f6      	uxtb	r6, r6
 8008e3e:	4283      	cmp	r3, r0
 8008e40:	4637      	mov	r7, r6
 8008e42:	dc05      	bgt.n	8008e50 <__swbuf_r+0x4e>
 8008e44:	4621      	mov	r1, r4
 8008e46:	4628      	mov	r0, r5
 8008e48:	f001 fd92 	bl	800a970 <_fflush_r>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d1ed      	bne.n	8008e2c <__swbuf_r+0x2a>
 8008e50:	68a3      	ldr	r3, [r4, #8]
 8008e52:	3b01      	subs	r3, #1
 8008e54:	60a3      	str	r3, [r4, #8]
 8008e56:	6823      	ldr	r3, [r4, #0]
 8008e58:	1c5a      	adds	r2, r3, #1
 8008e5a:	6022      	str	r2, [r4, #0]
 8008e5c:	701e      	strb	r6, [r3, #0]
 8008e5e:	6962      	ldr	r2, [r4, #20]
 8008e60:	1c43      	adds	r3, r0, #1
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d004      	beq.n	8008e70 <__swbuf_r+0x6e>
 8008e66:	89a3      	ldrh	r3, [r4, #12]
 8008e68:	07db      	lsls	r3, r3, #31
 8008e6a:	d5e1      	bpl.n	8008e30 <__swbuf_r+0x2e>
 8008e6c:	2e0a      	cmp	r6, #10
 8008e6e:	d1df      	bne.n	8008e30 <__swbuf_r+0x2e>
 8008e70:	4621      	mov	r1, r4
 8008e72:	4628      	mov	r0, r5
 8008e74:	f001 fd7c 	bl	800a970 <_fflush_r>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d0d9      	beq.n	8008e30 <__swbuf_r+0x2e>
 8008e7c:	e7d6      	b.n	8008e2c <__swbuf_r+0x2a>
	...

08008e80 <__swsetup_r>:
 8008e80:	b538      	push	{r3, r4, r5, lr}
 8008e82:	4b29      	ldr	r3, [pc, #164]	@ (8008f28 <__swsetup_r+0xa8>)
 8008e84:	4605      	mov	r5, r0
 8008e86:	6818      	ldr	r0, [r3, #0]
 8008e88:	460c      	mov	r4, r1
 8008e8a:	b118      	cbz	r0, 8008e94 <__swsetup_r+0x14>
 8008e8c:	6a03      	ldr	r3, [r0, #32]
 8008e8e:	b90b      	cbnz	r3, 8008e94 <__swsetup_r+0x14>
 8008e90:	f7ff fe1a 	bl	8008ac8 <__sinit>
 8008e94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e98:	0719      	lsls	r1, r3, #28
 8008e9a:	d422      	bmi.n	8008ee2 <__swsetup_r+0x62>
 8008e9c:	06da      	lsls	r2, r3, #27
 8008e9e:	d407      	bmi.n	8008eb0 <__swsetup_r+0x30>
 8008ea0:	2209      	movs	r2, #9
 8008ea2:	602a      	str	r2, [r5, #0]
 8008ea4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ea8:	81a3      	strh	r3, [r4, #12]
 8008eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8008eae:	e033      	b.n	8008f18 <__swsetup_r+0x98>
 8008eb0:	0758      	lsls	r0, r3, #29
 8008eb2:	d512      	bpl.n	8008eda <__swsetup_r+0x5a>
 8008eb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008eb6:	b141      	cbz	r1, 8008eca <__swsetup_r+0x4a>
 8008eb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ebc:	4299      	cmp	r1, r3
 8008ebe:	d002      	beq.n	8008ec6 <__swsetup_r+0x46>
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	f000 ff0d 	bl	8009ce0 <_free_r>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008eca:	89a3      	ldrh	r3, [r4, #12]
 8008ecc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ed0:	81a3      	strh	r3, [r4, #12]
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	6063      	str	r3, [r4, #4]
 8008ed6:	6923      	ldr	r3, [r4, #16]
 8008ed8:	6023      	str	r3, [r4, #0]
 8008eda:	89a3      	ldrh	r3, [r4, #12]
 8008edc:	f043 0308 	orr.w	r3, r3, #8
 8008ee0:	81a3      	strh	r3, [r4, #12]
 8008ee2:	6923      	ldr	r3, [r4, #16]
 8008ee4:	b94b      	cbnz	r3, 8008efa <__swsetup_r+0x7a>
 8008ee6:	89a3      	ldrh	r3, [r4, #12]
 8008ee8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008eec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ef0:	d003      	beq.n	8008efa <__swsetup_r+0x7a>
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	f001 fd89 	bl	800aa0c <__smakebuf_r>
 8008efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008efe:	f013 0201 	ands.w	r2, r3, #1
 8008f02:	d00a      	beq.n	8008f1a <__swsetup_r+0x9a>
 8008f04:	2200      	movs	r2, #0
 8008f06:	60a2      	str	r2, [r4, #8]
 8008f08:	6962      	ldr	r2, [r4, #20]
 8008f0a:	4252      	negs	r2, r2
 8008f0c:	61a2      	str	r2, [r4, #24]
 8008f0e:	6922      	ldr	r2, [r4, #16]
 8008f10:	b942      	cbnz	r2, 8008f24 <__swsetup_r+0xa4>
 8008f12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008f16:	d1c5      	bne.n	8008ea4 <__swsetup_r+0x24>
 8008f18:	bd38      	pop	{r3, r4, r5, pc}
 8008f1a:	0799      	lsls	r1, r3, #30
 8008f1c:	bf58      	it	pl
 8008f1e:	6962      	ldrpl	r2, [r4, #20]
 8008f20:	60a2      	str	r2, [r4, #8]
 8008f22:	e7f4      	b.n	8008f0e <__swsetup_r+0x8e>
 8008f24:	2000      	movs	r0, #0
 8008f26:	e7f7      	b.n	8008f18 <__swsetup_r+0x98>
 8008f28:	20002f90 	.word	0x20002f90

08008f2c <memset>:
 8008f2c:	4402      	add	r2, r0
 8008f2e:	4603      	mov	r3, r0
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d100      	bne.n	8008f36 <memset+0xa>
 8008f34:	4770      	bx	lr
 8008f36:	f803 1b01 	strb.w	r1, [r3], #1
 8008f3a:	e7f9      	b.n	8008f30 <memset+0x4>

08008f3c <_localeconv_r>:
 8008f3c:	4800      	ldr	r0, [pc, #0]	@ (8008f40 <_localeconv_r+0x4>)
 8008f3e:	4770      	bx	lr
 8008f40:	200030d0 	.word	0x200030d0

08008f44 <_close_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	4d06      	ldr	r5, [pc, #24]	@ (8008f60 <_close_r+0x1c>)
 8008f48:	2300      	movs	r3, #0
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	4608      	mov	r0, r1
 8008f4e:	602b      	str	r3, [r5, #0]
 8008f50:	f7f8 fea4 	bl	8001c9c <_close>
 8008f54:	1c43      	adds	r3, r0, #1
 8008f56:	d102      	bne.n	8008f5e <_close_r+0x1a>
 8008f58:	682b      	ldr	r3, [r5, #0]
 8008f5a:	b103      	cbz	r3, 8008f5e <_close_r+0x1a>
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	bd38      	pop	{r3, r4, r5, pc}
 8008f60:	20004dd8 	.word	0x20004dd8

08008f64 <_lseek_r>:
 8008f64:	b538      	push	{r3, r4, r5, lr}
 8008f66:	4d07      	ldr	r5, [pc, #28]	@ (8008f84 <_lseek_r+0x20>)
 8008f68:	4604      	mov	r4, r0
 8008f6a:	4608      	mov	r0, r1
 8008f6c:	4611      	mov	r1, r2
 8008f6e:	2200      	movs	r2, #0
 8008f70:	602a      	str	r2, [r5, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	f7f8 fe9e 	bl	8001cb4 <_lseek>
 8008f78:	1c43      	adds	r3, r0, #1
 8008f7a:	d102      	bne.n	8008f82 <_lseek_r+0x1e>
 8008f7c:	682b      	ldr	r3, [r5, #0]
 8008f7e:	b103      	cbz	r3, 8008f82 <_lseek_r+0x1e>
 8008f80:	6023      	str	r3, [r4, #0]
 8008f82:	bd38      	pop	{r3, r4, r5, pc}
 8008f84:	20004dd8 	.word	0x20004dd8

08008f88 <_read_r>:
 8008f88:	b538      	push	{r3, r4, r5, lr}
 8008f8a:	4d07      	ldr	r5, [pc, #28]	@ (8008fa8 <_read_r+0x20>)
 8008f8c:	4604      	mov	r4, r0
 8008f8e:	4608      	mov	r0, r1
 8008f90:	4611      	mov	r1, r2
 8008f92:	2200      	movs	r2, #0
 8008f94:	602a      	str	r2, [r5, #0]
 8008f96:	461a      	mov	r2, r3
 8008f98:	f7f8 fe94 	bl	8001cc4 <_read>
 8008f9c:	1c43      	adds	r3, r0, #1
 8008f9e:	d102      	bne.n	8008fa6 <_read_r+0x1e>
 8008fa0:	682b      	ldr	r3, [r5, #0]
 8008fa2:	b103      	cbz	r3, 8008fa6 <_read_r+0x1e>
 8008fa4:	6023      	str	r3, [r4, #0]
 8008fa6:	bd38      	pop	{r3, r4, r5, pc}
 8008fa8:	20004dd8 	.word	0x20004dd8

08008fac <_write_r>:
 8008fac:	b538      	push	{r3, r4, r5, lr}
 8008fae:	4d07      	ldr	r5, [pc, #28]	@ (8008fcc <_write_r+0x20>)
 8008fb0:	4604      	mov	r4, r0
 8008fb2:	4608      	mov	r0, r1
 8008fb4:	4611      	mov	r1, r2
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	602a      	str	r2, [r5, #0]
 8008fba:	461a      	mov	r2, r3
 8008fbc:	f7f8 fe54 	bl	8001c68 <_write>
 8008fc0:	1c43      	adds	r3, r0, #1
 8008fc2:	d102      	bne.n	8008fca <_write_r+0x1e>
 8008fc4:	682b      	ldr	r3, [r5, #0]
 8008fc6:	b103      	cbz	r3, 8008fca <_write_r+0x1e>
 8008fc8:	6023      	str	r3, [r4, #0]
 8008fca:	bd38      	pop	{r3, r4, r5, pc}
 8008fcc:	20004dd8 	.word	0x20004dd8

08008fd0 <__errno>:
 8008fd0:	4b01      	ldr	r3, [pc, #4]	@ (8008fd8 <__errno+0x8>)
 8008fd2:	6818      	ldr	r0, [r3, #0]
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	20002f90 	.word	0x20002f90

08008fdc <__libc_init_array>:
 8008fdc:	b570      	push	{r4, r5, r6, lr}
 8008fde:	4d0d      	ldr	r5, [pc, #52]	@ (8009014 <__libc_init_array+0x38>)
 8008fe0:	4c0d      	ldr	r4, [pc, #52]	@ (8009018 <__libc_init_array+0x3c>)
 8008fe2:	1b64      	subs	r4, r4, r5
 8008fe4:	10a4      	asrs	r4, r4, #2
 8008fe6:	2600      	movs	r6, #0
 8008fe8:	42a6      	cmp	r6, r4
 8008fea:	d109      	bne.n	8009000 <__libc_init_array+0x24>
 8008fec:	4d0b      	ldr	r5, [pc, #44]	@ (800901c <__libc_init_array+0x40>)
 8008fee:	4c0c      	ldr	r4, [pc, #48]	@ (8009020 <__libc_init_array+0x44>)
 8008ff0:	f001 fe3c 	bl	800ac6c <_init>
 8008ff4:	1b64      	subs	r4, r4, r5
 8008ff6:	10a4      	asrs	r4, r4, #2
 8008ff8:	2600      	movs	r6, #0
 8008ffa:	42a6      	cmp	r6, r4
 8008ffc:	d105      	bne.n	800900a <__libc_init_array+0x2e>
 8008ffe:	bd70      	pop	{r4, r5, r6, pc}
 8009000:	f855 3b04 	ldr.w	r3, [r5], #4
 8009004:	4798      	blx	r3
 8009006:	3601      	adds	r6, #1
 8009008:	e7ee      	b.n	8008fe8 <__libc_init_array+0xc>
 800900a:	f855 3b04 	ldr.w	r3, [r5], #4
 800900e:	4798      	blx	r3
 8009010:	3601      	adds	r6, #1
 8009012:	e7f2      	b.n	8008ffa <__libc_init_array+0x1e>
 8009014:	0801d2e0 	.word	0x0801d2e0
 8009018:	0801d2e0 	.word	0x0801d2e0
 800901c:	0801d2e0 	.word	0x0801d2e0
 8009020:	0801d2e4 	.word	0x0801d2e4

08009024 <__retarget_lock_init_recursive>:
 8009024:	4770      	bx	lr

08009026 <__retarget_lock_acquire_recursive>:
 8009026:	4770      	bx	lr

08009028 <__retarget_lock_release_recursive>:
 8009028:	4770      	bx	lr

0800902a <memcpy>:
 800902a:	440a      	add	r2, r1
 800902c:	4291      	cmp	r1, r2
 800902e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009032:	d100      	bne.n	8009036 <memcpy+0xc>
 8009034:	4770      	bx	lr
 8009036:	b510      	push	{r4, lr}
 8009038:	f811 4b01 	ldrb.w	r4, [r1], #1
 800903c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009040:	4291      	cmp	r1, r2
 8009042:	d1f9      	bne.n	8009038 <memcpy+0xe>
 8009044:	bd10      	pop	{r4, pc}

08009046 <quorem>:
 8009046:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800904a:	6903      	ldr	r3, [r0, #16]
 800904c:	690c      	ldr	r4, [r1, #16]
 800904e:	42a3      	cmp	r3, r4
 8009050:	4607      	mov	r7, r0
 8009052:	db7e      	blt.n	8009152 <quorem+0x10c>
 8009054:	3c01      	subs	r4, #1
 8009056:	f101 0814 	add.w	r8, r1, #20
 800905a:	00a3      	lsls	r3, r4, #2
 800905c:	f100 0514 	add.w	r5, r0, #20
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009066:	9301      	str	r3, [sp, #4]
 8009068:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800906c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009070:	3301      	adds	r3, #1
 8009072:	429a      	cmp	r2, r3
 8009074:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009078:	fbb2 f6f3 	udiv	r6, r2, r3
 800907c:	d32e      	bcc.n	80090dc <quorem+0x96>
 800907e:	f04f 0a00 	mov.w	sl, #0
 8009082:	46c4      	mov	ip, r8
 8009084:	46ae      	mov	lr, r5
 8009086:	46d3      	mov	fp, sl
 8009088:	f85c 3b04 	ldr.w	r3, [ip], #4
 800908c:	b298      	uxth	r0, r3
 800908e:	fb06 a000 	mla	r0, r6, r0, sl
 8009092:	0c02      	lsrs	r2, r0, #16
 8009094:	0c1b      	lsrs	r3, r3, #16
 8009096:	fb06 2303 	mla	r3, r6, r3, r2
 800909a:	f8de 2000 	ldr.w	r2, [lr]
 800909e:	b280      	uxth	r0, r0
 80090a0:	b292      	uxth	r2, r2
 80090a2:	1a12      	subs	r2, r2, r0
 80090a4:	445a      	add	r2, fp
 80090a6:	f8de 0000 	ldr.w	r0, [lr]
 80090aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80090b4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80090b8:	b292      	uxth	r2, r2
 80090ba:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80090be:	45e1      	cmp	r9, ip
 80090c0:	f84e 2b04 	str.w	r2, [lr], #4
 80090c4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80090c8:	d2de      	bcs.n	8009088 <quorem+0x42>
 80090ca:	9b00      	ldr	r3, [sp, #0]
 80090cc:	58eb      	ldr	r3, [r5, r3]
 80090ce:	b92b      	cbnz	r3, 80090dc <quorem+0x96>
 80090d0:	9b01      	ldr	r3, [sp, #4]
 80090d2:	3b04      	subs	r3, #4
 80090d4:	429d      	cmp	r5, r3
 80090d6:	461a      	mov	r2, r3
 80090d8:	d32f      	bcc.n	800913a <quorem+0xf4>
 80090da:	613c      	str	r4, [r7, #16]
 80090dc:	4638      	mov	r0, r7
 80090de:	f001 f979 	bl	800a3d4 <__mcmp>
 80090e2:	2800      	cmp	r0, #0
 80090e4:	db25      	blt.n	8009132 <quorem+0xec>
 80090e6:	4629      	mov	r1, r5
 80090e8:	2000      	movs	r0, #0
 80090ea:	f858 2b04 	ldr.w	r2, [r8], #4
 80090ee:	f8d1 c000 	ldr.w	ip, [r1]
 80090f2:	fa1f fe82 	uxth.w	lr, r2
 80090f6:	fa1f f38c 	uxth.w	r3, ip
 80090fa:	eba3 030e 	sub.w	r3, r3, lr
 80090fe:	4403      	add	r3, r0
 8009100:	0c12      	lsrs	r2, r2, #16
 8009102:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009106:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800910a:	b29b      	uxth	r3, r3
 800910c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009110:	45c1      	cmp	r9, r8
 8009112:	f841 3b04 	str.w	r3, [r1], #4
 8009116:	ea4f 4022 	mov.w	r0, r2, asr #16
 800911a:	d2e6      	bcs.n	80090ea <quorem+0xa4>
 800911c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009120:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009124:	b922      	cbnz	r2, 8009130 <quorem+0xea>
 8009126:	3b04      	subs	r3, #4
 8009128:	429d      	cmp	r5, r3
 800912a:	461a      	mov	r2, r3
 800912c:	d30b      	bcc.n	8009146 <quorem+0x100>
 800912e:	613c      	str	r4, [r7, #16]
 8009130:	3601      	adds	r6, #1
 8009132:	4630      	mov	r0, r6
 8009134:	b003      	add	sp, #12
 8009136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800913a:	6812      	ldr	r2, [r2, #0]
 800913c:	3b04      	subs	r3, #4
 800913e:	2a00      	cmp	r2, #0
 8009140:	d1cb      	bne.n	80090da <quorem+0x94>
 8009142:	3c01      	subs	r4, #1
 8009144:	e7c6      	b.n	80090d4 <quorem+0x8e>
 8009146:	6812      	ldr	r2, [r2, #0]
 8009148:	3b04      	subs	r3, #4
 800914a:	2a00      	cmp	r2, #0
 800914c:	d1ef      	bne.n	800912e <quorem+0xe8>
 800914e:	3c01      	subs	r4, #1
 8009150:	e7ea      	b.n	8009128 <quorem+0xe2>
 8009152:	2000      	movs	r0, #0
 8009154:	e7ee      	b.n	8009134 <quorem+0xee>
	...

08009158 <_dtoa_r>:
 8009158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800915c:	69c7      	ldr	r7, [r0, #28]
 800915e:	b099      	sub	sp, #100	@ 0x64
 8009160:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009164:	ec55 4b10 	vmov	r4, r5, d0
 8009168:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800916a:	9109      	str	r1, [sp, #36]	@ 0x24
 800916c:	4683      	mov	fp, r0
 800916e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009170:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009172:	b97f      	cbnz	r7, 8009194 <_dtoa_r+0x3c>
 8009174:	2010      	movs	r0, #16
 8009176:	f000 fdfd 	bl	8009d74 <malloc>
 800917a:	4602      	mov	r2, r0
 800917c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009180:	b920      	cbnz	r0, 800918c <_dtoa_r+0x34>
 8009182:	4ba7      	ldr	r3, [pc, #668]	@ (8009420 <_dtoa_r+0x2c8>)
 8009184:	21ef      	movs	r1, #239	@ 0xef
 8009186:	48a7      	ldr	r0, [pc, #668]	@ (8009424 <_dtoa_r+0x2cc>)
 8009188:	f001 fcae 	bl	800aae8 <__assert_func>
 800918c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009190:	6007      	str	r7, [r0, #0]
 8009192:	60c7      	str	r7, [r0, #12]
 8009194:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009198:	6819      	ldr	r1, [r3, #0]
 800919a:	b159      	cbz	r1, 80091b4 <_dtoa_r+0x5c>
 800919c:	685a      	ldr	r2, [r3, #4]
 800919e:	604a      	str	r2, [r1, #4]
 80091a0:	2301      	movs	r3, #1
 80091a2:	4093      	lsls	r3, r2
 80091a4:	608b      	str	r3, [r1, #8]
 80091a6:	4658      	mov	r0, fp
 80091a8:	f000 feda 	bl	8009f60 <_Bfree>
 80091ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80091b0:	2200      	movs	r2, #0
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	1e2b      	subs	r3, r5, #0
 80091b6:	bfb9      	ittee	lt
 80091b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80091bc:	9303      	strlt	r3, [sp, #12]
 80091be:	2300      	movge	r3, #0
 80091c0:	6033      	strge	r3, [r6, #0]
 80091c2:	9f03      	ldr	r7, [sp, #12]
 80091c4:	4b98      	ldr	r3, [pc, #608]	@ (8009428 <_dtoa_r+0x2d0>)
 80091c6:	bfbc      	itt	lt
 80091c8:	2201      	movlt	r2, #1
 80091ca:	6032      	strlt	r2, [r6, #0]
 80091cc:	43bb      	bics	r3, r7
 80091ce:	d112      	bne.n	80091f6 <_dtoa_r+0x9e>
 80091d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80091d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80091d6:	6013      	str	r3, [r2, #0]
 80091d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80091dc:	4323      	orrs	r3, r4
 80091de:	f000 854d 	beq.w	8009c7c <_dtoa_r+0xb24>
 80091e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80091e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800943c <_dtoa_r+0x2e4>
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 854f 	beq.w	8009c8c <_dtoa_r+0xb34>
 80091ee:	f10a 0303 	add.w	r3, sl, #3
 80091f2:	f000 bd49 	b.w	8009c88 <_dtoa_r+0xb30>
 80091f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80091fa:	2200      	movs	r2, #0
 80091fc:	ec51 0b17 	vmov	r0, r1, d7
 8009200:	2300      	movs	r3, #0
 8009202:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009206:	f7f7 fc6f 	bl	8000ae8 <__aeabi_dcmpeq>
 800920a:	4680      	mov	r8, r0
 800920c:	b158      	cbz	r0, 8009226 <_dtoa_r+0xce>
 800920e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009210:	2301      	movs	r3, #1
 8009212:	6013      	str	r3, [r2, #0]
 8009214:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009216:	b113      	cbz	r3, 800921e <_dtoa_r+0xc6>
 8009218:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800921a:	4b84      	ldr	r3, [pc, #528]	@ (800942c <_dtoa_r+0x2d4>)
 800921c:	6013      	str	r3, [r2, #0]
 800921e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009440 <_dtoa_r+0x2e8>
 8009222:	f000 bd33 	b.w	8009c8c <_dtoa_r+0xb34>
 8009226:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800922a:	aa16      	add	r2, sp, #88	@ 0x58
 800922c:	a917      	add	r1, sp, #92	@ 0x5c
 800922e:	4658      	mov	r0, fp
 8009230:	f001 f980 	bl	800a534 <__d2b>
 8009234:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009238:	4681      	mov	r9, r0
 800923a:	2e00      	cmp	r6, #0
 800923c:	d077      	beq.n	800932e <_dtoa_r+0x1d6>
 800923e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009240:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009244:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009248:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800924c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009250:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009254:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009258:	4619      	mov	r1, r3
 800925a:	2200      	movs	r2, #0
 800925c:	4b74      	ldr	r3, [pc, #464]	@ (8009430 <_dtoa_r+0x2d8>)
 800925e:	f7f7 f823 	bl	80002a8 <__aeabi_dsub>
 8009262:	a369      	add	r3, pc, #420	@ (adr r3, 8009408 <_dtoa_r+0x2b0>)
 8009264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009268:	f7f7 f9d6 	bl	8000618 <__aeabi_dmul>
 800926c:	a368      	add	r3, pc, #416	@ (adr r3, 8009410 <_dtoa_r+0x2b8>)
 800926e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009272:	f7f7 f81b 	bl	80002ac <__adddf3>
 8009276:	4604      	mov	r4, r0
 8009278:	4630      	mov	r0, r6
 800927a:	460d      	mov	r5, r1
 800927c:	f7f7 f962 	bl	8000544 <__aeabi_i2d>
 8009280:	a365      	add	r3, pc, #404	@ (adr r3, 8009418 <_dtoa_r+0x2c0>)
 8009282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009286:	f7f7 f9c7 	bl	8000618 <__aeabi_dmul>
 800928a:	4602      	mov	r2, r0
 800928c:	460b      	mov	r3, r1
 800928e:	4620      	mov	r0, r4
 8009290:	4629      	mov	r1, r5
 8009292:	f7f7 f80b 	bl	80002ac <__adddf3>
 8009296:	4604      	mov	r4, r0
 8009298:	460d      	mov	r5, r1
 800929a:	f7f7 fc6d 	bl	8000b78 <__aeabi_d2iz>
 800929e:	2200      	movs	r2, #0
 80092a0:	4607      	mov	r7, r0
 80092a2:	2300      	movs	r3, #0
 80092a4:	4620      	mov	r0, r4
 80092a6:	4629      	mov	r1, r5
 80092a8:	f7f7 fc28 	bl	8000afc <__aeabi_dcmplt>
 80092ac:	b140      	cbz	r0, 80092c0 <_dtoa_r+0x168>
 80092ae:	4638      	mov	r0, r7
 80092b0:	f7f7 f948 	bl	8000544 <__aeabi_i2d>
 80092b4:	4622      	mov	r2, r4
 80092b6:	462b      	mov	r3, r5
 80092b8:	f7f7 fc16 	bl	8000ae8 <__aeabi_dcmpeq>
 80092bc:	b900      	cbnz	r0, 80092c0 <_dtoa_r+0x168>
 80092be:	3f01      	subs	r7, #1
 80092c0:	2f16      	cmp	r7, #22
 80092c2:	d851      	bhi.n	8009368 <_dtoa_r+0x210>
 80092c4:	4b5b      	ldr	r3, [pc, #364]	@ (8009434 <_dtoa_r+0x2dc>)
 80092c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80092ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092d2:	f7f7 fc13 	bl	8000afc <__aeabi_dcmplt>
 80092d6:	2800      	cmp	r0, #0
 80092d8:	d048      	beq.n	800936c <_dtoa_r+0x214>
 80092da:	3f01      	subs	r7, #1
 80092dc:	2300      	movs	r3, #0
 80092de:	9312      	str	r3, [sp, #72]	@ 0x48
 80092e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80092e2:	1b9b      	subs	r3, r3, r6
 80092e4:	1e5a      	subs	r2, r3, #1
 80092e6:	bf44      	itt	mi
 80092e8:	f1c3 0801 	rsbmi	r8, r3, #1
 80092ec:	2300      	movmi	r3, #0
 80092ee:	9208      	str	r2, [sp, #32]
 80092f0:	bf54      	ite	pl
 80092f2:	f04f 0800 	movpl.w	r8, #0
 80092f6:	9308      	strmi	r3, [sp, #32]
 80092f8:	2f00      	cmp	r7, #0
 80092fa:	db39      	blt.n	8009370 <_dtoa_r+0x218>
 80092fc:	9b08      	ldr	r3, [sp, #32]
 80092fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009300:	443b      	add	r3, r7
 8009302:	9308      	str	r3, [sp, #32]
 8009304:	2300      	movs	r3, #0
 8009306:	930a      	str	r3, [sp, #40]	@ 0x28
 8009308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800930a:	2b09      	cmp	r3, #9
 800930c:	d864      	bhi.n	80093d8 <_dtoa_r+0x280>
 800930e:	2b05      	cmp	r3, #5
 8009310:	bfc4      	itt	gt
 8009312:	3b04      	subgt	r3, #4
 8009314:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009318:	f1a3 0302 	sub.w	r3, r3, #2
 800931c:	bfcc      	ite	gt
 800931e:	2400      	movgt	r4, #0
 8009320:	2401      	movle	r4, #1
 8009322:	2b03      	cmp	r3, #3
 8009324:	d863      	bhi.n	80093ee <_dtoa_r+0x296>
 8009326:	e8df f003 	tbb	[pc, r3]
 800932a:	372a      	.short	0x372a
 800932c:	5535      	.short	0x5535
 800932e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009332:	441e      	add	r6, r3
 8009334:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009338:	2b20      	cmp	r3, #32
 800933a:	bfc1      	itttt	gt
 800933c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009340:	409f      	lslgt	r7, r3
 8009342:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009346:	fa24 f303 	lsrgt.w	r3, r4, r3
 800934a:	bfd6      	itet	le
 800934c:	f1c3 0320 	rsble	r3, r3, #32
 8009350:	ea47 0003 	orrgt.w	r0, r7, r3
 8009354:	fa04 f003 	lslle.w	r0, r4, r3
 8009358:	f7f7 f8e4 	bl	8000524 <__aeabi_ui2d>
 800935c:	2201      	movs	r2, #1
 800935e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009362:	3e01      	subs	r6, #1
 8009364:	9214      	str	r2, [sp, #80]	@ 0x50
 8009366:	e777      	b.n	8009258 <_dtoa_r+0x100>
 8009368:	2301      	movs	r3, #1
 800936a:	e7b8      	b.n	80092de <_dtoa_r+0x186>
 800936c:	9012      	str	r0, [sp, #72]	@ 0x48
 800936e:	e7b7      	b.n	80092e0 <_dtoa_r+0x188>
 8009370:	427b      	negs	r3, r7
 8009372:	930a      	str	r3, [sp, #40]	@ 0x28
 8009374:	2300      	movs	r3, #0
 8009376:	eba8 0807 	sub.w	r8, r8, r7
 800937a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800937c:	e7c4      	b.n	8009308 <_dtoa_r+0x1b0>
 800937e:	2300      	movs	r3, #0
 8009380:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009382:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009384:	2b00      	cmp	r3, #0
 8009386:	dc35      	bgt.n	80093f4 <_dtoa_r+0x29c>
 8009388:	2301      	movs	r3, #1
 800938a:	9300      	str	r3, [sp, #0]
 800938c:	9307      	str	r3, [sp, #28]
 800938e:	461a      	mov	r2, r3
 8009390:	920e      	str	r2, [sp, #56]	@ 0x38
 8009392:	e00b      	b.n	80093ac <_dtoa_r+0x254>
 8009394:	2301      	movs	r3, #1
 8009396:	e7f3      	b.n	8009380 <_dtoa_r+0x228>
 8009398:	2300      	movs	r3, #0
 800939a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800939c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800939e:	18fb      	adds	r3, r7, r3
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	3301      	adds	r3, #1
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	9307      	str	r3, [sp, #28]
 80093a8:	bfb8      	it	lt
 80093aa:	2301      	movlt	r3, #1
 80093ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 80093b0:	2100      	movs	r1, #0
 80093b2:	2204      	movs	r2, #4
 80093b4:	f102 0514 	add.w	r5, r2, #20
 80093b8:	429d      	cmp	r5, r3
 80093ba:	d91f      	bls.n	80093fc <_dtoa_r+0x2a4>
 80093bc:	6041      	str	r1, [r0, #4]
 80093be:	4658      	mov	r0, fp
 80093c0:	f000 fd8e 	bl	8009ee0 <_Balloc>
 80093c4:	4682      	mov	sl, r0
 80093c6:	2800      	cmp	r0, #0
 80093c8:	d13c      	bne.n	8009444 <_dtoa_r+0x2ec>
 80093ca:	4b1b      	ldr	r3, [pc, #108]	@ (8009438 <_dtoa_r+0x2e0>)
 80093cc:	4602      	mov	r2, r0
 80093ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80093d2:	e6d8      	b.n	8009186 <_dtoa_r+0x2e>
 80093d4:	2301      	movs	r3, #1
 80093d6:	e7e0      	b.n	800939a <_dtoa_r+0x242>
 80093d8:	2401      	movs	r4, #1
 80093da:	2300      	movs	r3, #0
 80093dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80093de:	940b      	str	r4, [sp, #44]	@ 0x2c
 80093e0:	f04f 33ff 	mov.w	r3, #4294967295
 80093e4:	9300      	str	r3, [sp, #0]
 80093e6:	9307      	str	r3, [sp, #28]
 80093e8:	2200      	movs	r2, #0
 80093ea:	2312      	movs	r3, #18
 80093ec:	e7d0      	b.n	8009390 <_dtoa_r+0x238>
 80093ee:	2301      	movs	r3, #1
 80093f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093f2:	e7f5      	b.n	80093e0 <_dtoa_r+0x288>
 80093f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	9307      	str	r3, [sp, #28]
 80093fa:	e7d7      	b.n	80093ac <_dtoa_r+0x254>
 80093fc:	3101      	adds	r1, #1
 80093fe:	0052      	lsls	r2, r2, #1
 8009400:	e7d8      	b.n	80093b4 <_dtoa_r+0x25c>
 8009402:	bf00      	nop
 8009404:	f3af 8000 	nop.w
 8009408:	636f4361 	.word	0x636f4361
 800940c:	3fd287a7 	.word	0x3fd287a7
 8009410:	8b60c8b3 	.word	0x8b60c8b3
 8009414:	3fc68a28 	.word	0x3fc68a28
 8009418:	509f79fb 	.word	0x509f79fb
 800941c:	3fd34413 	.word	0x3fd34413
 8009420:	0801cfa9 	.word	0x0801cfa9
 8009424:	0801cfc0 	.word	0x0801cfc0
 8009428:	7ff00000 	.word	0x7ff00000
 800942c:	0801cf79 	.word	0x0801cf79
 8009430:	3ff80000 	.word	0x3ff80000
 8009434:	0801d0b8 	.word	0x0801d0b8
 8009438:	0801d018 	.word	0x0801d018
 800943c:	0801cfa5 	.word	0x0801cfa5
 8009440:	0801cf78 	.word	0x0801cf78
 8009444:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009448:	6018      	str	r0, [r3, #0]
 800944a:	9b07      	ldr	r3, [sp, #28]
 800944c:	2b0e      	cmp	r3, #14
 800944e:	f200 80a4 	bhi.w	800959a <_dtoa_r+0x442>
 8009452:	2c00      	cmp	r4, #0
 8009454:	f000 80a1 	beq.w	800959a <_dtoa_r+0x442>
 8009458:	2f00      	cmp	r7, #0
 800945a:	dd33      	ble.n	80094c4 <_dtoa_r+0x36c>
 800945c:	4bad      	ldr	r3, [pc, #692]	@ (8009714 <_dtoa_r+0x5bc>)
 800945e:	f007 020f 	and.w	r2, r7, #15
 8009462:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009466:	ed93 7b00 	vldr	d7, [r3]
 800946a:	05f8      	lsls	r0, r7, #23
 800946c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009470:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009474:	d516      	bpl.n	80094a4 <_dtoa_r+0x34c>
 8009476:	4ba8      	ldr	r3, [pc, #672]	@ (8009718 <_dtoa_r+0x5c0>)
 8009478:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800947c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009480:	f7f7 f9f4 	bl	800086c <__aeabi_ddiv>
 8009484:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009488:	f004 040f 	and.w	r4, r4, #15
 800948c:	2603      	movs	r6, #3
 800948e:	4da2      	ldr	r5, [pc, #648]	@ (8009718 <_dtoa_r+0x5c0>)
 8009490:	b954      	cbnz	r4, 80094a8 <_dtoa_r+0x350>
 8009492:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800949a:	f7f7 f9e7 	bl	800086c <__aeabi_ddiv>
 800949e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094a2:	e028      	b.n	80094f6 <_dtoa_r+0x39e>
 80094a4:	2602      	movs	r6, #2
 80094a6:	e7f2      	b.n	800948e <_dtoa_r+0x336>
 80094a8:	07e1      	lsls	r1, r4, #31
 80094aa:	d508      	bpl.n	80094be <_dtoa_r+0x366>
 80094ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80094b4:	f7f7 f8b0 	bl	8000618 <__aeabi_dmul>
 80094b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094bc:	3601      	adds	r6, #1
 80094be:	1064      	asrs	r4, r4, #1
 80094c0:	3508      	adds	r5, #8
 80094c2:	e7e5      	b.n	8009490 <_dtoa_r+0x338>
 80094c4:	f000 80d2 	beq.w	800966c <_dtoa_r+0x514>
 80094c8:	427c      	negs	r4, r7
 80094ca:	4b92      	ldr	r3, [pc, #584]	@ (8009714 <_dtoa_r+0x5bc>)
 80094cc:	4d92      	ldr	r5, [pc, #584]	@ (8009718 <_dtoa_r+0x5c0>)
 80094ce:	f004 020f 	and.w	r2, r4, #15
 80094d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094de:	f7f7 f89b 	bl	8000618 <__aeabi_dmul>
 80094e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094e6:	1124      	asrs	r4, r4, #4
 80094e8:	2300      	movs	r3, #0
 80094ea:	2602      	movs	r6, #2
 80094ec:	2c00      	cmp	r4, #0
 80094ee:	f040 80b2 	bne.w	8009656 <_dtoa_r+0x4fe>
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1d3      	bne.n	800949e <_dtoa_r+0x346>
 80094f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80094f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f000 80b7 	beq.w	8009670 <_dtoa_r+0x518>
 8009502:	4b86      	ldr	r3, [pc, #536]	@ (800971c <_dtoa_r+0x5c4>)
 8009504:	2200      	movs	r2, #0
 8009506:	4620      	mov	r0, r4
 8009508:	4629      	mov	r1, r5
 800950a:	f7f7 faf7 	bl	8000afc <__aeabi_dcmplt>
 800950e:	2800      	cmp	r0, #0
 8009510:	f000 80ae 	beq.w	8009670 <_dtoa_r+0x518>
 8009514:	9b07      	ldr	r3, [sp, #28]
 8009516:	2b00      	cmp	r3, #0
 8009518:	f000 80aa 	beq.w	8009670 <_dtoa_r+0x518>
 800951c:	9b00      	ldr	r3, [sp, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	dd37      	ble.n	8009592 <_dtoa_r+0x43a>
 8009522:	1e7b      	subs	r3, r7, #1
 8009524:	9304      	str	r3, [sp, #16]
 8009526:	4620      	mov	r0, r4
 8009528:	4b7d      	ldr	r3, [pc, #500]	@ (8009720 <_dtoa_r+0x5c8>)
 800952a:	2200      	movs	r2, #0
 800952c:	4629      	mov	r1, r5
 800952e:	f7f7 f873 	bl	8000618 <__aeabi_dmul>
 8009532:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009536:	9c00      	ldr	r4, [sp, #0]
 8009538:	3601      	adds	r6, #1
 800953a:	4630      	mov	r0, r6
 800953c:	f7f7 f802 	bl	8000544 <__aeabi_i2d>
 8009540:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009544:	f7f7 f868 	bl	8000618 <__aeabi_dmul>
 8009548:	4b76      	ldr	r3, [pc, #472]	@ (8009724 <_dtoa_r+0x5cc>)
 800954a:	2200      	movs	r2, #0
 800954c:	f7f6 feae 	bl	80002ac <__adddf3>
 8009550:	4605      	mov	r5, r0
 8009552:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009556:	2c00      	cmp	r4, #0
 8009558:	f040 808d 	bne.w	8009676 <_dtoa_r+0x51e>
 800955c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009560:	4b71      	ldr	r3, [pc, #452]	@ (8009728 <_dtoa_r+0x5d0>)
 8009562:	2200      	movs	r2, #0
 8009564:	f7f6 fea0 	bl	80002a8 <__aeabi_dsub>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009570:	462a      	mov	r2, r5
 8009572:	4633      	mov	r3, r6
 8009574:	f7f7 fae0 	bl	8000b38 <__aeabi_dcmpgt>
 8009578:	2800      	cmp	r0, #0
 800957a:	f040 828b 	bne.w	8009a94 <_dtoa_r+0x93c>
 800957e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009582:	462a      	mov	r2, r5
 8009584:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009588:	f7f7 fab8 	bl	8000afc <__aeabi_dcmplt>
 800958c:	2800      	cmp	r0, #0
 800958e:	f040 8128 	bne.w	80097e2 <_dtoa_r+0x68a>
 8009592:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009596:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800959a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800959c:	2b00      	cmp	r3, #0
 800959e:	f2c0 815a 	blt.w	8009856 <_dtoa_r+0x6fe>
 80095a2:	2f0e      	cmp	r7, #14
 80095a4:	f300 8157 	bgt.w	8009856 <_dtoa_r+0x6fe>
 80095a8:	4b5a      	ldr	r3, [pc, #360]	@ (8009714 <_dtoa_r+0x5bc>)
 80095aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80095ae:	ed93 7b00 	vldr	d7, [r3]
 80095b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	ed8d 7b00 	vstr	d7, [sp]
 80095ba:	da03      	bge.n	80095c4 <_dtoa_r+0x46c>
 80095bc:	9b07      	ldr	r3, [sp, #28]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	f340 8101 	ble.w	80097c6 <_dtoa_r+0x66e>
 80095c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80095c8:	4656      	mov	r6, sl
 80095ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095ce:	4620      	mov	r0, r4
 80095d0:	4629      	mov	r1, r5
 80095d2:	f7f7 f94b 	bl	800086c <__aeabi_ddiv>
 80095d6:	f7f7 facf 	bl	8000b78 <__aeabi_d2iz>
 80095da:	4680      	mov	r8, r0
 80095dc:	f7f6 ffb2 	bl	8000544 <__aeabi_i2d>
 80095e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095e4:	f7f7 f818 	bl	8000618 <__aeabi_dmul>
 80095e8:	4602      	mov	r2, r0
 80095ea:	460b      	mov	r3, r1
 80095ec:	4620      	mov	r0, r4
 80095ee:	4629      	mov	r1, r5
 80095f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80095f4:	f7f6 fe58 	bl	80002a8 <__aeabi_dsub>
 80095f8:	f806 4b01 	strb.w	r4, [r6], #1
 80095fc:	9d07      	ldr	r5, [sp, #28]
 80095fe:	eba6 040a 	sub.w	r4, r6, sl
 8009602:	42a5      	cmp	r5, r4
 8009604:	4602      	mov	r2, r0
 8009606:	460b      	mov	r3, r1
 8009608:	f040 8117 	bne.w	800983a <_dtoa_r+0x6e2>
 800960c:	f7f6 fe4e 	bl	80002ac <__adddf3>
 8009610:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009614:	4604      	mov	r4, r0
 8009616:	460d      	mov	r5, r1
 8009618:	f7f7 fa8e 	bl	8000b38 <__aeabi_dcmpgt>
 800961c:	2800      	cmp	r0, #0
 800961e:	f040 80f9 	bne.w	8009814 <_dtoa_r+0x6bc>
 8009622:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009626:	4620      	mov	r0, r4
 8009628:	4629      	mov	r1, r5
 800962a:	f7f7 fa5d 	bl	8000ae8 <__aeabi_dcmpeq>
 800962e:	b118      	cbz	r0, 8009638 <_dtoa_r+0x4e0>
 8009630:	f018 0f01 	tst.w	r8, #1
 8009634:	f040 80ee 	bne.w	8009814 <_dtoa_r+0x6bc>
 8009638:	4649      	mov	r1, r9
 800963a:	4658      	mov	r0, fp
 800963c:	f000 fc90 	bl	8009f60 <_Bfree>
 8009640:	2300      	movs	r3, #0
 8009642:	7033      	strb	r3, [r6, #0]
 8009644:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009646:	3701      	adds	r7, #1
 8009648:	601f      	str	r7, [r3, #0]
 800964a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800964c:	2b00      	cmp	r3, #0
 800964e:	f000 831d 	beq.w	8009c8c <_dtoa_r+0xb34>
 8009652:	601e      	str	r6, [r3, #0]
 8009654:	e31a      	b.n	8009c8c <_dtoa_r+0xb34>
 8009656:	07e2      	lsls	r2, r4, #31
 8009658:	d505      	bpl.n	8009666 <_dtoa_r+0x50e>
 800965a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800965e:	f7f6 ffdb 	bl	8000618 <__aeabi_dmul>
 8009662:	3601      	adds	r6, #1
 8009664:	2301      	movs	r3, #1
 8009666:	1064      	asrs	r4, r4, #1
 8009668:	3508      	adds	r5, #8
 800966a:	e73f      	b.n	80094ec <_dtoa_r+0x394>
 800966c:	2602      	movs	r6, #2
 800966e:	e742      	b.n	80094f6 <_dtoa_r+0x39e>
 8009670:	9c07      	ldr	r4, [sp, #28]
 8009672:	9704      	str	r7, [sp, #16]
 8009674:	e761      	b.n	800953a <_dtoa_r+0x3e2>
 8009676:	4b27      	ldr	r3, [pc, #156]	@ (8009714 <_dtoa_r+0x5bc>)
 8009678:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800967a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800967e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009682:	4454      	add	r4, sl
 8009684:	2900      	cmp	r1, #0
 8009686:	d053      	beq.n	8009730 <_dtoa_r+0x5d8>
 8009688:	4928      	ldr	r1, [pc, #160]	@ (800972c <_dtoa_r+0x5d4>)
 800968a:	2000      	movs	r0, #0
 800968c:	f7f7 f8ee 	bl	800086c <__aeabi_ddiv>
 8009690:	4633      	mov	r3, r6
 8009692:	462a      	mov	r2, r5
 8009694:	f7f6 fe08 	bl	80002a8 <__aeabi_dsub>
 8009698:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800969c:	4656      	mov	r6, sl
 800969e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096a2:	f7f7 fa69 	bl	8000b78 <__aeabi_d2iz>
 80096a6:	4605      	mov	r5, r0
 80096a8:	f7f6 ff4c 	bl	8000544 <__aeabi_i2d>
 80096ac:	4602      	mov	r2, r0
 80096ae:	460b      	mov	r3, r1
 80096b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096b4:	f7f6 fdf8 	bl	80002a8 <__aeabi_dsub>
 80096b8:	3530      	adds	r5, #48	@ 0x30
 80096ba:	4602      	mov	r2, r0
 80096bc:	460b      	mov	r3, r1
 80096be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096c2:	f806 5b01 	strb.w	r5, [r6], #1
 80096c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80096ca:	f7f7 fa17 	bl	8000afc <__aeabi_dcmplt>
 80096ce:	2800      	cmp	r0, #0
 80096d0:	d171      	bne.n	80097b6 <_dtoa_r+0x65e>
 80096d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096d6:	4911      	ldr	r1, [pc, #68]	@ (800971c <_dtoa_r+0x5c4>)
 80096d8:	2000      	movs	r0, #0
 80096da:	f7f6 fde5 	bl	80002a8 <__aeabi_dsub>
 80096de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80096e2:	f7f7 fa0b 	bl	8000afc <__aeabi_dcmplt>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	f040 8095 	bne.w	8009816 <_dtoa_r+0x6be>
 80096ec:	42a6      	cmp	r6, r4
 80096ee:	f43f af50 	beq.w	8009592 <_dtoa_r+0x43a>
 80096f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80096f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009720 <_dtoa_r+0x5c8>)
 80096f8:	2200      	movs	r2, #0
 80096fa:	f7f6 ff8d 	bl	8000618 <__aeabi_dmul>
 80096fe:	4b08      	ldr	r3, [pc, #32]	@ (8009720 <_dtoa_r+0x5c8>)
 8009700:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009704:	2200      	movs	r2, #0
 8009706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800970a:	f7f6 ff85 	bl	8000618 <__aeabi_dmul>
 800970e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009712:	e7c4      	b.n	800969e <_dtoa_r+0x546>
 8009714:	0801d0b8 	.word	0x0801d0b8
 8009718:	0801d090 	.word	0x0801d090
 800971c:	3ff00000 	.word	0x3ff00000
 8009720:	40240000 	.word	0x40240000
 8009724:	401c0000 	.word	0x401c0000
 8009728:	40140000 	.word	0x40140000
 800972c:	3fe00000 	.word	0x3fe00000
 8009730:	4631      	mov	r1, r6
 8009732:	4628      	mov	r0, r5
 8009734:	f7f6 ff70 	bl	8000618 <__aeabi_dmul>
 8009738:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800973c:	9415      	str	r4, [sp, #84]	@ 0x54
 800973e:	4656      	mov	r6, sl
 8009740:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009744:	f7f7 fa18 	bl	8000b78 <__aeabi_d2iz>
 8009748:	4605      	mov	r5, r0
 800974a:	f7f6 fefb 	bl	8000544 <__aeabi_i2d>
 800974e:	4602      	mov	r2, r0
 8009750:	460b      	mov	r3, r1
 8009752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009756:	f7f6 fda7 	bl	80002a8 <__aeabi_dsub>
 800975a:	3530      	adds	r5, #48	@ 0x30
 800975c:	f806 5b01 	strb.w	r5, [r6], #1
 8009760:	4602      	mov	r2, r0
 8009762:	460b      	mov	r3, r1
 8009764:	42a6      	cmp	r6, r4
 8009766:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800976a:	f04f 0200 	mov.w	r2, #0
 800976e:	d124      	bne.n	80097ba <_dtoa_r+0x662>
 8009770:	4bac      	ldr	r3, [pc, #688]	@ (8009a24 <_dtoa_r+0x8cc>)
 8009772:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009776:	f7f6 fd99 	bl	80002ac <__adddf3>
 800977a:	4602      	mov	r2, r0
 800977c:	460b      	mov	r3, r1
 800977e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009782:	f7f7 f9d9 	bl	8000b38 <__aeabi_dcmpgt>
 8009786:	2800      	cmp	r0, #0
 8009788:	d145      	bne.n	8009816 <_dtoa_r+0x6be>
 800978a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800978e:	49a5      	ldr	r1, [pc, #660]	@ (8009a24 <_dtoa_r+0x8cc>)
 8009790:	2000      	movs	r0, #0
 8009792:	f7f6 fd89 	bl	80002a8 <__aeabi_dsub>
 8009796:	4602      	mov	r2, r0
 8009798:	460b      	mov	r3, r1
 800979a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800979e:	f7f7 f9ad 	bl	8000afc <__aeabi_dcmplt>
 80097a2:	2800      	cmp	r0, #0
 80097a4:	f43f aef5 	beq.w	8009592 <_dtoa_r+0x43a>
 80097a8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80097aa:	1e73      	subs	r3, r6, #1
 80097ac:	9315      	str	r3, [sp, #84]	@ 0x54
 80097ae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80097b2:	2b30      	cmp	r3, #48	@ 0x30
 80097b4:	d0f8      	beq.n	80097a8 <_dtoa_r+0x650>
 80097b6:	9f04      	ldr	r7, [sp, #16]
 80097b8:	e73e      	b.n	8009638 <_dtoa_r+0x4e0>
 80097ba:	4b9b      	ldr	r3, [pc, #620]	@ (8009a28 <_dtoa_r+0x8d0>)
 80097bc:	f7f6 ff2c 	bl	8000618 <__aeabi_dmul>
 80097c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097c4:	e7bc      	b.n	8009740 <_dtoa_r+0x5e8>
 80097c6:	d10c      	bne.n	80097e2 <_dtoa_r+0x68a>
 80097c8:	4b98      	ldr	r3, [pc, #608]	@ (8009a2c <_dtoa_r+0x8d4>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097d0:	f7f6 ff22 	bl	8000618 <__aeabi_dmul>
 80097d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097d8:	f7f7 f9a4 	bl	8000b24 <__aeabi_dcmpge>
 80097dc:	2800      	cmp	r0, #0
 80097de:	f000 8157 	beq.w	8009a90 <_dtoa_r+0x938>
 80097e2:	2400      	movs	r4, #0
 80097e4:	4625      	mov	r5, r4
 80097e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097e8:	43db      	mvns	r3, r3
 80097ea:	9304      	str	r3, [sp, #16]
 80097ec:	4656      	mov	r6, sl
 80097ee:	2700      	movs	r7, #0
 80097f0:	4621      	mov	r1, r4
 80097f2:	4658      	mov	r0, fp
 80097f4:	f000 fbb4 	bl	8009f60 <_Bfree>
 80097f8:	2d00      	cmp	r5, #0
 80097fa:	d0dc      	beq.n	80097b6 <_dtoa_r+0x65e>
 80097fc:	b12f      	cbz	r7, 800980a <_dtoa_r+0x6b2>
 80097fe:	42af      	cmp	r7, r5
 8009800:	d003      	beq.n	800980a <_dtoa_r+0x6b2>
 8009802:	4639      	mov	r1, r7
 8009804:	4658      	mov	r0, fp
 8009806:	f000 fbab 	bl	8009f60 <_Bfree>
 800980a:	4629      	mov	r1, r5
 800980c:	4658      	mov	r0, fp
 800980e:	f000 fba7 	bl	8009f60 <_Bfree>
 8009812:	e7d0      	b.n	80097b6 <_dtoa_r+0x65e>
 8009814:	9704      	str	r7, [sp, #16]
 8009816:	4633      	mov	r3, r6
 8009818:	461e      	mov	r6, r3
 800981a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800981e:	2a39      	cmp	r2, #57	@ 0x39
 8009820:	d107      	bne.n	8009832 <_dtoa_r+0x6da>
 8009822:	459a      	cmp	sl, r3
 8009824:	d1f8      	bne.n	8009818 <_dtoa_r+0x6c0>
 8009826:	9a04      	ldr	r2, [sp, #16]
 8009828:	3201      	adds	r2, #1
 800982a:	9204      	str	r2, [sp, #16]
 800982c:	2230      	movs	r2, #48	@ 0x30
 800982e:	f88a 2000 	strb.w	r2, [sl]
 8009832:	781a      	ldrb	r2, [r3, #0]
 8009834:	3201      	adds	r2, #1
 8009836:	701a      	strb	r2, [r3, #0]
 8009838:	e7bd      	b.n	80097b6 <_dtoa_r+0x65e>
 800983a:	4b7b      	ldr	r3, [pc, #492]	@ (8009a28 <_dtoa_r+0x8d0>)
 800983c:	2200      	movs	r2, #0
 800983e:	f7f6 feeb 	bl	8000618 <__aeabi_dmul>
 8009842:	2200      	movs	r2, #0
 8009844:	2300      	movs	r3, #0
 8009846:	4604      	mov	r4, r0
 8009848:	460d      	mov	r5, r1
 800984a:	f7f7 f94d 	bl	8000ae8 <__aeabi_dcmpeq>
 800984e:	2800      	cmp	r0, #0
 8009850:	f43f aebb 	beq.w	80095ca <_dtoa_r+0x472>
 8009854:	e6f0      	b.n	8009638 <_dtoa_r+0x4e0>
 8009856:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009858:	2a00      	cmp	r2, #0
 800985a:	f000 80db 	beq.w	8009a14 <_dtoa_r+0x8bc>
 800985e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009860:	2a01      	cmp	r2, #1
 8009862:	f300 80bf 	bgt.w	80099e4 <_dtoa_r+0x88c>
 8009866:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009868:	2a00      	cmp	r2, #0
 800986a:	f000 80b7 	beq.w	80099dc <_dtoa_r+0x884>
 800986e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009872:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009874:	4646      	mov	r6, r8
 8009876:	9a08      	ldr	r2, [sp, #32]
 8009878:	2101      	movs	r1, #1
 800987a:	441a      	add	r2, r3
 800987c:	4658      	mov	r0, fp
 800987e:	4498      	add	r8, r3
 8009880:	9208      	str	r2, [sp, #32]
 8009882:	f000 fc21 	bl	800a0c8 <__i2b>
 8009886:	4605      	mov	r5, r0
 8009888:	b15e      	cbz	r6, 80098a2 <_dtoa_r+0x74a>
 800988a:	9b08      	ldr	r3, [sp, #32]
 800988c:	2b00      	cmp	r3, #0
 800988e:	dd08      	ble.n	80098a2 <_dtoa_r+0x74a>
 8009890:	42b3      	cmp	r3, r6
 8009892:	9a08      	ldr	r2, [sp, #32]
 8009894:	bfa8      	it	ge
 8009896:	4633      	movge	r3, r6
 8009898:	eba8 0803 	sub.w	r8, r8, r3
 800989c:	1af6      	subs	r6, r6, r3
 800989e:	1ad3      	subs	r3, r2, r3
 80098a0:	9308      	str	r3, [sp, #32]
 80098a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098a4:	b1f3      	cbz	r3, 80098e4 <_dtoa_r+0x78c>
 80098a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f000 80b7 	beq.w	8009a1c <_dtoa_r+0x8c4>
 80098ae:	b18c      	cbz	r4, 80098d4 <_dtoa_r+0x77c>
 80098b0:	4629      	mov	r1, r5
 80098b2:	4622      	mov	r2, r4
 80098b4:	4658      	mov	r0, fp
 80098b6:	f000 fcc7 	bl	800a248 <__pow5mult>
 80098ba:	464a      	mov	r2, r9
 80098bc:	4601      	mov	r1, r0
 80098be:	4605      	mov	r5, r0
 80098c0:	4658      	mov	r0, fp
 80098c2:	f000 fc17 	bl	800a0f4 <__multiply>
 80098c6:	4649      	mov	r1, r9
 80098c8:	9004      	str	r0, [sp, #16]
 80098ca:	4658      	mov	r0, fp
 80098cc:	f000 fb48 	bl	8009f60 <_Bfree>
 80098d0:	9b04      	ldr	r3, [sp, #16]
 80098d2:	4699      	mov	r9, r3
 80098d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098d6:	1b1a      	subs	r2, r3, r4
 80098d8:	d004      	beq.n	80098e4 <_dtoa_r+0x78c>
 80098da:	4649      	mov	r1, r9
 80098dc:	4658      	mov	r0, fp
 80098de:	f000 fcb3 	bl	800a248 <__pow5mult>
 80098e2:	4681      	mov	r9, r0
 80098e4:	2101      	movs	r1, #1
 80098e6:	4658      	mov	r0, fp
 80098e8:	f000 fbee 	bl	800a0c8 <__i2b>
 80098ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098ee:	4604      	mov	r4, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f000 81cf 	beq.w	8009c94 <_dtoa_r+0xb3c>
 80098f6:	461a      	mov	r2, r3
 80098f8:	4601      	mov	r1, r0
 80098fa:	4658      	mov	r0, fp
 80098fc:	f000 fca4 	bl	800a248 <__pow5mult>
 8009900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009902:	2b01      	cmp	r3, #1
 8009904:	4604      	mov	r4, r0
 8009906:	f300 8095 	bgt.w	8009a34 <_dtoa_r+0x8dc>
 800990a:	9b02      	ldr	r3, [sp, #8]
 800990c:	2b00      	cmp	r3, #0
 800990e:	f040 8087 	bne.w	8009a20 <_dtoa_r+0x8c8>
 8009912:	9b03      	ldr	r3, [sp, #12]
 8009914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009918:	2b00      	cmp	r3, #0
 800991a:	f040 8089 	bne.w	8009a30 <_dtoa_r+0x8d8>
 800991e:	9b03      	ldr	r3, [sp, #12]
 8009920:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009924:	0d1b      	lsrs	r3, r3, #20
 8009926:	051b      	lsls	r3, r3, #20
 8009928:	b12b      	cbz	r3, 8009936 <_dtoa_r+0x7de>
 800992a:	9b08      	ldr	r3, [sp, #32]
 800992c:	3301      	adds	r3, #1
 800992e:	9308      	str	r3, [sp, #32]
 8009930:	f108 0801 	add.w	r8, r8, #1
 8009934:	2301      	movs	r3, #1
 8009936:	930a      	str	r3, [sp, #40]	@ 0x28
 8009938:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800993a:	2b00      	cmp	r3, #0
 800993c:	f000 81b0 	beq.w	8009ca0 <_dtoa_r+0xb48>
 8009940:	6923      	ldr	r3, [r4, #16]
 8009942:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009946:	6918      	ldr	r0, [r3, #16]
 8009948:	f000 fb72 	bl	800a030 <__hi0bits>
 800994c:	f1c0 0020 	rsb	r0, r0, #32
 8009950:	9b08      	ldr	r3, [sp, #32]
 8009952:	4418      	add	r0, r3
 8009954:	f010 001f 	ands.w	r0, r0, #31
 8009958:	d077      	beq.n	8009a4a <_dtoa_r+0x8f2>
 800995a:	f1c0 0320 	rsb	r3, r0, #32
 800995e:	2b04      	cmp	r3, #4
 8009960:	dd6b      	ble.n	8009a3a <_dtoa_r+0x8e2>
 8009962:	9b08      	ldr	r3, [sp, #32]
 8009964:	f1c0 001c 	rsb	r0, r0, #28
 8009968:	4403      	add	r3, r0
 800996a:	4480      	add	r8, r0
 800996c:	4406      	add	r6, r0
 800996e:	9308      	str	r3, [sp, #32]
 8009970:	f1b8 0f00 	cmp.w	r8, #0
 8009974:	dd05      	ble.n	8009982 <_dtoa_r+0x82a>
 8009976:	4649      	mov	r1, r9
 8009978:	4642      	mov	r2, r8
 800997a:	4658      	mov	r0, fp
 800997c:	f000 fcbe 	bl	800a2fc <__lshift>
 8009980:	4681      	mov	r9, r0
 8009982:	9b08      	ldr	r3, [sp, #32]
 8009984:	2b00      	cmp	r3, #0
 8009986:	dd05      	ble.n	8009994 <_dtoa_r+0x83c>
 8009988:	4621      	mov	r1, r4
 800998a:	461a      	mov	r2, r3
 800998c:	4658      	mov	r0, fp
 800998e:	f000 fcb5 	bl	800a2fc <__lshift>
 8009992:	4604      	mov	r4, r0
 8009994:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009996:	2b00      	cmp	r3, #0
 8009998:	d059      	beq.n	8009a4e <_dtoa_r+0x8f6>
 800999a:	4621      	mov	r1, r4
 800999c:	4648      	mov	r0, r9
 800999e:	f000 fd19 	bl	800a3d4 <__mcmp>
 80099a2:	2800      	cmp	r0, #0
 80099a4:	da53      	bge.n	8009a4e <_dtoa_r+0x8f6>
 80099a6:	1e7b      	subs	r3, r7, #1
 80099a8:	9304      	str	r3, [sp, #16]
 80099aa:	4649      	mov	r1, r9
 80099ac:	2300      	movs	r3, #0
 80099ae:	220a      	movs	r2, #10
 80099b0:	4658      	mov	r0, fp
 80099b2:	f000 faf7 	bl	8009fa4 <__multadd>
 80099b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099b8:	4681      	mov	r9, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f000 8172 	beq.w	8009ca4 <_dtoa_r+0xb4c>
 80099c0:	2300      	movs	r3, #0
 80099c2:	4629      	mov	r1, r5
 80099c4:	220a      	movs	r2, #10
 80099c6:	4658      	mov	r0, fp
 80099c8:	f000 faec 	bl	8009fa4 <__multadd>
 80099cc:	9b00      	ldr	r3, [sp, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	4605      	mov	r5, r0
 80099d2:	dc67      	bgt.n	8009aa4 <_dtoa_r+0x94c>
 80099d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	dc41      	bgt.n	8009a5e <_dtoa_r+0x906>
 80099da:	e063      	b.n	8009aa4 <_dtoa_r+0x94c>
 80099dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80099de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80099e2:	e746      	b.n	8009872 <_dtoa_r+0x71a>
 80099e4:	9b07      	ldr	r3, [sp, #28]
 80099e6:	1e5c      	subs	r4, r3, #1
 80099e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099ea:	42a3      	cmp	r3, r4
 80099ec:	bfbf      	itttt	lt
 80099ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80099f0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80099f2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80099f4:	1ae3      	sublt	r3, r4, r3
 80099f6:	bfb4      	ite	lt
 80099f8:	18d2      	addlt	r2, r2, r3
 80099fa:	1b1c      	subge	r4, r3, r4
 80099fc:	9b07      	ldr	r3, [sp, #28]
 80099fe:	bfbc      	itt	lt
 8009a00:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009a02:	2400      	movlt	r4, #0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	bfb5      	itete	lt
 8009a08:	eba8 0603 	sublt.w	r6, r8, r3
 8009a0c:	9b07      	ldrge	r3, [sp, #28]
 8009a0e:	2300      	movlt	r3, #0
 8009a10:	4646      	movge	r6, r8
 8009a12:	e730      	b.n	8009876 <_dtoa_r+0x71e>
 8009a14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009a16:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009a18:	4646      	mov	r6, r8
 8009a1a:	e735      	b.n	8009888 <_dtoa_r+0x730>
 8009a1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a1e:	e75c      	b.n	80098da <_dtoa_r+0x782>
 8009a20:	2300      	movs	r3, #0
 8009a22:	e788      	b.n	8009936 <_dtoa_r+0x7de>
 8009a24:	3fe00000 	.word	0x3fe00000
 8009a28:	40240000 	.word	0x40240000
 8009a2c:	40140000 	.word	0x40140000
 8009a30:	9b02      	ldr	r3, [sp, #8]
 8009a32:	e780      	b.n	8009936 <_dtoa_r+0x7de>
 8009a34:	2300      	movs	r3, #0
 8009a36:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a38:	e782      	b.n	8009940 <_dtoa_r+0x7e8>
 8009a3a:	d099      	beq.n	8009970 <_dtoa_r+0x818>
 8009a3c:	9a08      	ldr	r2, [sp, #32]
 8009a3e:	331c      	adds	r3, #28
 8009a40:	441a      	add	r2, r3
 8009a42:	4498      	add	r8, r3
 8009a44:	441e      	add	r6, r3
 8009a46:	9208      	str	r2, [sp, #32]
 8009a48:	e792      	b.n	8009970 <_dtoa_r+0x818>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	e7f6      	b.n	8009a3c <_dtoa_r+0x8e4>
 8009a4e:	9b07      	ldr	r3, [sp, #28]
 8009a50:	9704      	str	r7, [sp, #16]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	dc20      	bgt.n	8009a98 <_dtoa_r+0x940>
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a5a:	2b02      	cmp	r3, #2
 8009a5c:	dd1e      	ble.n	8009a9c <_dtoa_r+0x944>
 8009a5e:	9b00      	ldr	r3, [sp, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f47f aec0 	bne.w	80097e6 <_dtoa_r+0x68e>
 8009a66:	4621      	mov	r1, r4
 8009a68:	2205      	movs	r2, #5
 8009a6a:	4658      	mov	r0, fp
 8009a6c:	f000 fa9a 	bl	8009fa4 <__multadd>
 8009a70:	4601      	mov	r1, r0
 8009a72:	4604      	mov	r4, r0
 8009a74:	4648      	mov	r0, r9
 8009a76:	f000 fcad 	bl	800a3d4 <__mcmp>
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	f77f aeb3 	ble.w	80097e6 <_dtoa_r+0x68e>
 8009a80:	4656      	mov	r6, sl
 8009a82:	2331      	movs	r3, #49	@ 0x31
 8009a84:	f806 3b01 	strb.w	r3, [r6], #1
 8009a88:	9b04      	ldr	r3, [sp, #16]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	9304      	str	r3, [sp, #16]
 8009a8e:	e6ae      	b.n	80097ee <_dtoa_r+0x696>
 8009a90:	9c07      	ldr	r4, [sp, #28]
 8009a92:	9704      	str	r7, [sp, #16]
 8009a94:	4625      	mov	r5, r4
 8009a96:	e7f3      	b.n	8009a80 <_dtoa_r+0x928>
 8009a98:	9b07      	ldr	r3, [sp, #28]
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f000 8104 	beq.w	8009cac <_dtoa_r+0xb54>
 8009aa4:	2e00      	cmp	r6, #0
 8009aa6:	dd05      	ble.n	8009ab4 <_dtoa_r+0x95c>
 8009aa8:	4629      	mov	r1, r5
 8009aaa:	4632      	mov	r2, r6
 8009aac:	4658      	mov	r0, fp
 8009aae:	f000 fc25 	bl	800a2fc <__lshift>
 8009ab2:	4605      	mov	r5, r0
 8009ab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d05a      	beq.n	8009b70 <_dtoa_r+0xa18>
 8009aba:	6869      	ldr	r1, [r5, #4]
 8009abc:	4658      	mov	r0, fp
 8009abe:	f000 fa0f 	bl	8009ee0 <_Balloc>
 8009ac2:	4606      	mov	r6, r0
 8009ac4:	b928      	cbnz	r0, 8009ad2 <_dtoa_r+0x97a>
 8009ac6:	4b84      	ldr	r3, [pc, #528]	@ (8009cd8 <_dtoa_r+0xb80>)
 8009ac8:	4602      	mov	r2, r0
 8009aca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009ace:	f7ff bb5a 	b.w	8009186 <_dtoa_r+0x2e>
 8009ad2:	692a      	ldr	r2, [r5, #16]
 8009ad4:	3202      	adds	r2, #2
 8009ad6:	0092      	lsls	r2, r2, #2
 8009ad8:	f105 010c 	add.w	r1, r5, #12
 8009adc:	300c      	adds	r0, #12
 8009ade:	f7ff faa4 	bl	800902a <memcpy>
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	4631      	mov	r1, r6
 8009ae6:	4658      	mov	r0, fp
 8009ae8:	f000 fc08 	bl	800a2fc <__lshift>
 8009aec:	f10a 0301 	add.w	r3, sl, #1
 8009af0:	9307      	str	r3, [sp, #28]
 8009af2:	9b00      	ldr	r3, [sp, #0]
 8009af4:	4453      	add	r3, sl
 8009af6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009af8:	9b02      	ldr	r3, [sp, #8]
 8009afa:	f003 0301 	and.w	r3, r3, #1
 8009afe:	462f      	mov	r7, r5
 8009b00:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b02:	4605      	mov	r5, r0
 8009b04:	9b07      	ldr	r3, [sp, #28]
 8009b06:	4621      	mov	r1, r4
 8009b08:	3b01      	subs	r3, #1
 8009b0a:	4648      	mov	r0, r9
 8009b0c:	9300      	str	r3, [sp, #0]
 8009b0e:	f7ff fa9a 	bl	8009046 <quorem>
 8009b12:	4639      	mov	r1, r7
 8009b14:	9002      	str	r0, [sp, #8]
 8009b16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009b1a:	4648      	mov	r0, r9
 8009b1c:	f000 fc5a 	bl	800a3d4 <__mcmp>
 8009b20:	462a      	mov	r2, r5
 8009b22:	9008      	str	r0, [sp, #32]
 8009b24:	4621      	mov	r1, r4
 8009b26:	4658      	mov	r0, fp
 8009b28:	f000 fc70 	bl	800a40c <__mdiff>
 8009b2c:	68c2      	ldr	r2, [r0, #12]
 8009b2e:	4606      	mov	r6, r0
 8009b30:	bb02      	cbnz	r2, 8009b74 <_dtoa_r+0xa1c>
 8009b32:	4601      	mov	r1, r0
 8009b34:	4648      	mov	r0, r9
 8009b36:	f000 fc4d 	bl	800a3d4 <__mcmp>
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	4631      	mov	r1, r6
 8009b3e:	4658      	mov	r0, fp
 8009b40:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b42:	f000 fa0d 	bl	8009f60 <_Bfree>
 8009b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b4a:	9e07      	ldr	r6, [sp, #28]
 8009b4c:	ea43 0102 	orr.w	r1, r3, r2
 8009b50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b52:	4319      	orrs	r1, r3
 8009b54:	d110      	bne.n	8009b78 <_dtoa_r+0xa20>
 8009b56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b5a:	d029      	beq.n	8009bb0 <_dtoa_r+0xa58>
 8009b5c:	9b08      	ldr	r3, [sp, #32]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	dd02      	ble.n	8009b68 <_dtoa_r+0xa10>
 8009b62:	9b02      	ldr	r3, [sp, #8]
 8009b64:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009b68:	9b00      	ldr	r3, [sp, #0]
 8009b6a:	f883 8000 	strb.w	r8, [r3]
 8009b6e:	e63f      	b.n	80097f0 <_dtoa_r+0x698>
 8009b70:	4628      	mov	r0, r5
 8009b72:	e7bb      	b.n	8009aec <_dtoa_r+0x994>
 8009b74:	2201      	movs	r2, #1
 8009b76:	e7e1      	b.n	8009b3c <_dtoa_r+0x9e4>
 8009b78:	9b08      	ldr	r3, [sp, #32]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	db04      	blt.n	8009b88 <_dtoa_r+0xa30>
 8009b7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b80:	430b      	orrs	r3, r1
 8009b82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b84:	430b      	orrs	r3, r1
 8009b86:	d120      	bne.n	8009bca <_dtoa_r+0xa72>
 8009b88:	2a00      	cmp	r2, #0
 8009b8a:	dded      	ble.n	8009b68 <_dtoa_r+0xa10>
 8009b8c:	4649      	mov	r1, r9
 8009b8e:	2201      	movs	r2, #1
 8009b90:	4658      	mov	r0, fp
 8009b92:	f000 fbb3 	bl	800a2fc <__lshift>
 8009b96:	4621      	mov	r1, r4
 8009b98:	4681      	mov	r9, r0
 8009b9a:	f000 fc1b 	bl	800a3d4 <__mcmp>
 8009b9e:	2800      	cmp	r0, #0
 8009ba0:	dc03      	bgt.n	8009baa <_dtoa_r+0xa52>
 8009ba2:	d1e1      	bne.n	8009b68 <_dtoa_r+0xa10>
 8009ba4:	f018 0f01 	tst.w	r8, #1
 8009ba8:	d0de      	beq.n	8009b68 <_dtoa_r+0xa10>
 8009baa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009bae:	d1d8      	bne.n	8009b62 <_dtoa_r+0xa0a>
 8009bb0:	9a00      	ldr	r2, [sp, #0]
 8009bb2:	2339      	movs	r3, #57	@ 0x39
 8009bb4:	7013      	strb	r3, [r2, #0]
 8009bb6:	4633      	mov	r3, r6
 8009bb8:	461e      	mov	r6, r3
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009bc0:	2a39      	cmp	r2, #57	@ 0x39
 8009bc2:	d052      	beq.n	8009c6a <_dtoa_r+0xb12>
 8009bc4:	3201      	adds	r2, #1
 8009bc6:	701a      	strb	r2, [r3, #0]
 8009bc8:	e612      	b.n	80097f0 <_dtoa_r+0x698>
 8009bca:	2a00      	cmp	r2, #0
 8009bcc:	dd07      	ble.n	8009bde <_dtoa_r+0xa86>
 8009bce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009bd2:	d0ed      	beq.n	8009bb0 <_dtoa_r+0xa58>
 8009bd4:	9a00      	ldr	r2, [sp, #0]
 8009bd6:	f108 0301 	add.w	r3, r8, #1
 8009bda:	7013      	strb	r3, [r2, #0]
 8009bdc:	e608      	b.n	80097f0 <_dtoa_r+0x698>
 8009bde:	9b07      	ldr	r3, [sp, #28]
 8009be0:	9a07      	ldr	r2, [sp, #28]
 8009be2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009be6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d028      	beq.n	8009c3e <_dtoa_r+0xae6>
 8009bec:	4649      	mov	r1, r9
 8009bee:	2300      	movs	r3, #0
 8009bf0:	220a      	movs	r2, #10
 8009bf2:	4658      	mov	r0, fp
 8009bf4:	f000 f9d6 	bl	8009fa4 <__multadd>
 8009bf8:	42af      	cmp	r7, r5
 8009bfa:	4681      	mov	r9, r0
 8009bfc:	f04f 0300 	mov.w	r3, #0
 8009c00:	f04f 020a 	mov.w	r2, #10
 8009c04:	4639      	mov	r1, r7
 8009c06:	4658      	mov	r0, fp
 8009c08:	d107      	bne.n	8009c1a <_dtoa_r+0xac2>
 8009c0a:	f000 f9cb 	bl	8009fa4 <__multadd>
 8009c0e:	4607      	mov	r7, r0
 8009c10:	4605      	mov	r5, r0
 8009c12:	9b07      	ldr	r3, [sp, #28]
 8009c14:	3301      	adds	r3, #1
 8009c16:	9307      	str	r3, [sp, #28]
 8009c18:	e774      	b.n	8009b04 <_dtoa_r+0x9ac>
 8009c1a:	f000 f9c3 	bl	8009fa4 <__multadd>
 8009c1e:	4629      	mov	r1, r5
 8009c20:	4607      	mov	r7, r0
 8009c22:	2300      	movs	r3, #0
 8009c24:	220a      	movs	r2, #10
 8009c26:	4658      	mov	r0, fp
 8009c28:	f000 f9bc 	bl	8009fa4 <__multadd>
 8009c2c:	4605      	mov	r5, r0
 8009c2e:	e7f0      	b.n	8009c12 <_dtoa_r+0xaba>
 8009c30:	9b00      	ldr	r3, [sp, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	bfcc      	ite	gt
 8009c36:	461e      	movgt	r6, r3
 8009c38:	2601      	movle	r6, #1
 8009c3a:	4456      	add	r6, sl
 8009c3c:	2700      	movs	r7, #0
 8009c3e:	4649      	mov	r1, r9
 8009c40:	2201      	movs	r2, #1
 8009c42:	4658      	mov	r0, fp
 8009c44:	f000 fb5a 	bl	800a2fc <__lshift>
 8009c48:	4621      	mov	r1, r4
 8009c4a:	4681      	mov	r9, r0
 8009c4c:	f000 fbc2 	bl	800a3d4 <__mcmp>
 8009c50:	2800      	cmp	r0, #0
 8009c52:	dcb0      	bgt.n	8009bb6 <_dtoa_r+0xa5e>
 8009c54:	d102      	bne.n	8009c5c <_dtoa_r+0xb04>
 8009c56:	f018 0f01 	tst.w	r8, #1
 8009c5a:	d1ac      	bne.n	8009bb6 <_dtoa_r+0xa5e>
 8009c5c:	4633      	mov	r3, r6
 8009c5e:	461e      	mov	r6, r3
 8009c60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c64:	2a30      	cmp	r2, #48	@ 0x30
 8009c66:	d0fa      	beq.n	8009c5e <_dtoa_r+0xb06>
 8009c68:	e5c2      	b.n	80097f0 <_dtoa_r+0x698>
 8009c6a:	459a      	cmp	sl, r3
 8009c6c:	d1a4      	bne.n	8009bb8 <_dtoa_r+0xa60>
 8009c6e:	9b04      	ldr	r3, [sp, #16]
 8009c70:	3301      	adds	r3, #1
 8009c72:	9304      	str	r3, [sp, #16]
 8009c74:	2331      	movs	r3, #49	@ 0x31
 8009c76:	f88a 3000 	strb.w	r3, [sl]
 8009c7a:	e5b9      	b.n	80097f0 <_dtoa_r+0x698>
 8009c7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c7e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009cdc <_dtoa_r+0xb84>
 8009c82:	b11b      	cbz	r3, 8009c8c <_dtoa_r+0xb34>
 8009c84:	f10a 0308 	add.w	r3, sl, #8
 8009c88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009c8a:	6013      	str	r3, [r2, #0]
 8009c8c:	4650      	mov	r0, sl
 8009c8e:	b019      	add	sp, #100	@ 0x64
 8009c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	f77f ae37 	ble.w	800990a <_dtoa_r+0x7b2>
 8009c9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ca0:	2001      	movs	r0, #1
 8009ca2:	e655      	b.n	8009950 <_dtoa_r+0x7f8>
 8009ca4:	9b00      	ldr	r3, [sp, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f77f aed6 	ble.w	8009a58 <_dtoa_r+0x900>
 8009cac:	4656      	mov	r6, sl
 8009cae:	4621      	mov	r1, r4
 8009cb0:	4648      	mov	r0, r9
 8009cb2:	f7ff f9c8 	bl	8009046 <quorem>
 8009cb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009cba:	f806 8b01 	strb.w	r8, [r6], #1
 8009cbe:	9b00      	ldr	r3, [sp, #0]
 8009cc0:	eba6 020a 	sub.w	r2, r6, sl
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	ddb3      	ble.n	8009c30 <_dtoa_r+0xad8>
 8009cc8:	4649      	mov	r1, r9
 8009cca:	2300      	movs	r3, #0
 8009ccc:	220a      	movs	r2, #10
 8009cce:	4658      	mov	r0, fp
 8009cd0:	f000 f968 	bl	8009fa4 <__multadd>
 8009cd4:	4681      	mov	r9, r0
 8009cd6:	e7ea      	b.n	8009cae <_dtoa_r+0xb56>
 8009cd8:	0801d018 	.word	0x0801d018
 8009cdc:	0801cf9c 	.word	0x0801cf9c

08009ce0 <_free_r>:
 8009ce0:	b538      	push	{r3, r4, r5, lr}
 8009ce2:	4605      	mov	r5, r0
 8009ce4:	2900      	cmp	r1, #0
 8009ce6:	d041      	beq.n	8009d6c <_free_r+0x8c>
 8009ce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cec:	1f0c      	subs	r4, r1, #4
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	bfb8      	it	lt
 8009cf2:	18e4      	addlt	r4, r4, r3
 8009cf4:	f000 f8e8 	bl	8009ec8 <__malloc_lock>
 8009cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8009d70 <_free_r+0x90>)
 8009cfa:	6813      	ldr	r3, [r2, #0]
 8009cfc:	b933      	cbnz	r3, 8009d0c <_free_r+0x2c>
 8009cfe:	6063      	str	r3, [r4, #4]
 8009d00:	6014      	str	r4, [r2, #0]
 8009d02:	4628      	mov	r0, r5
 8009d04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d08:	f000 b8e4 	b.w	8009ed4 <__malloc_unlock>
 8009d0c:	42a3      	cmp	r3, r4
 8009d0e:	d908      	bls.n	8009d22 <_free_r+0x42>
 8009d10:	6820      	ldr	r0, [r4, #0]
 8009d12:	1821      	adds	r1, r4, r0
 8009d14:	428b      	cmp	r3, r1
 8009d16:	bf01      	itttt	eq
 8009d18:	6819      	ldreq	r1, [r3, #0]
 8009d1a:	685b      	ldreq	r3, [r3, #4]
 8009d1c:	1809      	addeq	r1, r1, r0
 8009d1e:	6021      	streq	r1, [r4, #0]
 8009d20:	e7ed      	b.n	8009cfe <_free_r+0x1e>
 8009d22:	461a      	mov	r2, r3
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	b10b      	cbz	r3, 8009d2c <_free_r+0x4c>
 8009d28:	42a3      	cmp	r3, r4
 8009d2a:	d9fa      	bls.n	8009d22 <_free_r+0x42>
 8009d2c:	6811      	ldr	r1, [r2, #0]
 8009d2e:	1850      	adds	r0, r2, r1
 8009d30:	42a0      	cmp	r0, r4
 8009d32:	d10b      	bne.n	8009d4c <_free_r+0x6c>
 8009d34:	6820      	ldr	r0, [r4, #0]
 8009d36:	4401      	add	r1, r0
 8009d38:	1850      	adds	r0, r2, r1
 8009d3a:	4283      	cmp	r3, r0
 8009d3c:	6011      	str	r1, [r2, #0]
 8009d3e:	d1e0      	bne.n	8009d02 <_free_r+0x22>
 8009d40:	6818      	ldr	r0, [r3, #0]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	6053      	str	r3, [r2, #4]
 8009d46:	4408      	add	r0, r1
 8009d48:	6010      	str	r0, [r2, #0]
 8009d4a:	e7da      	b.n	8009d02 <_free_r+0x22>
 8009d4c:	d902      	bls.n	8009d54 <_free_r+0x74>
 8009d4e:	230c      	movs	r3, #12
 8009d50:	602b      	str	r3, [r5, #0]
 8009d52:	e7d6      	b.n	8009d02 <_free_r+0x22>
 8009d54:	6820      	ldr	r0, [r4, #0]
 8009d56:	1821      	adds	r1, r4, r0
 8009d58:	428b      	cmp	r3, r1
 8009d5a:	bf04      	itt	eq
 8009d5c:	6819      	ldreq	r1, [r3, #0]
 8009d5e:	685b      	ldreq	r3, [r3, #4]
 8009d60:	6063      	str	r3, [r4, #4]
 8009d62:	bf04      	itt	eq
 8009d64:	1809      	addeq	r1, r1, r0
 8009d66:	6021      	streq	r1, [r4, #0]
 8009d68:	6054      	str	r4, [r2, #4]
 8009d6a:	e7ca      	b.n	8009d02 <_free_r+0x22>
 8009d6c:	bd38      	pop	{r3, r4, r5, pc}
 8009d6e:	bf00      	nop
 8009d70:	20004de4 	.word	0x20004de4

08009d74 <malloc>:
 8009d74:	4b02      	ldr	r3, [pc, #8]	@ (8009d80 <malloc+0xc>)
 8009d76:	4601      	mov	r1, r0
 8009d78:	6818      	ldr	r0, [r3, #0]
 8009d7a:	f000 b825 	b.w	8009dc8 <_malloc_r>
 8009d7e:	bf00      	nop
 8009d80:	20002f90 	.word	0x20002f90

08009d84 <sbrk_aligned>:
 8009d84:	b570      	push	{r4, r5, r6, lr}
 8009d86:	4e0f      	ldr	r6, [pc, #60]	@ (8009dc4 <sbrk_aligned+0x40>)
 8009d88:	460c      	mov	r4, r1
 8009d8a:	6831      	ldr	r1, [r6, #0]
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	b911      	cbnz	r1, 8009d96 <sbrk_aligned+0x12>
 8009d90:	f000 fe9a 	bl	800aac8 <_sbrk_r>
 8009d94:	6030      	str	r0, [r6, #0]
 8009d96:	4621      	mov	r1, r4
 8009d98:	4628      	mov	r0, r5
 8009d9a:	f000 fe95 	bl	800aac8 <_sbrk_r>
 8009d9e:	1c43      	adds	r3, r0, #1
 8009da0:	d103      	bne.n	8009daa <sbrk_aligned+0x26>
 8009da2:	f04f 34ff 	mov.w	r4, #4294967295
 8009da6:	4620      	mov	r0, r4
 8009da8:	bd70      	pop	{r4, r5, r6, pc}
 8009daa:	1cc4      	adds	r4, r0, #3
 8009dac:	f024 0403 	bic.w	r4, r4, #3
 8009db0:	42a0      	cmp	r0, r4
 8009db2:	d0f8      	beq.n	8009da6 <sbrk_aligned+0x22>
 8009db4:	1a21      	subs	r1, r4, r0
 8009db6:	4628      	mov	r0, r5
 8009db8:	f000 fe86 	bl	800aac8 <_sbrk_r>
 8009dbc:	3001      	adds	r0, #1
 8009dbe:	d1f2      	bne.n	8009da6 <sbrk_aligned+0x22>
 8009dc0:	e7ef      	b.n	8009da2 <sbrk_aligned+0x1e>
 8009dc2:	bf00      	nop
 8009dc4:	20004de0 	.word	0x20004de0

08009dc8 <_malloc_r>:
 8009dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dcc:	1ccd      	adds	r5, r1, #3
 8009dce:	f025 0503 	bic.w	r5, r5, #3
 8009dd2:	3508      	adds	r5, #8
 8009dd4:	2d0c      	cmp	r5, #12
 8009dd6:	bf38      	it	cc
 8009dd8:	250c      	movcc	r5, #12
 8009dda:	2d00      	cmp	r5, #0
 8009ddc:	4606      	mov	r6, r0
 8009dde:	db01      	blt.n	8009de4 <_malloc_r+0x1c>
 8009de0:	42a9      	cmp	r1, r5
 8009de2:	d904      	bls.n	8009dee <_malloc_r+0x26>
 8009de4:	230c      	movs	r3, #12
 8009de6:	6033      	str	r3, [r6, #0]
 8009de8:	2000      	movs	r0, #0
 8009dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ec4 <_malloc_r+0xfc>
 8009df2:	f000 f869 	bl	8009ec8 <__malloc_lock>
 8009df6:	f8d8 3000 	ldr.w	r3, [r8]
 8009dfa:	461c      	mov	r4, r3
 8009dfc:	bb44      	cbnz	r4, 8009e50 <_malloc_r+0x88>
 8009dfe:	4629      	mov	r1, r5
 8009e00:	4630      	mov	r0, r6
 8009e02:	f7ff ffbf 	bl	8009d84 <sbrk_aligned>
 8009e06:	1c43      	adds	r3, r0, #1
 8009e08:	4604      	mov	r4, r0
 8009e0a:	d158      	bne.n	8009ebe <_malloc_r+0xf6>
 8009e0c:	f8d8 4000 	ldr.w	r4, [r8]
 8009e10:	4627      	mov	r7, r4
 8009e12:	2f00      	cmp	r7, #0
 8009e14:	d143      	bne.n	8009e9e <_malloc_r+0xd6>
 8009e16:	2c00      	cmp	r4, #0
 8009e18:	d04b      	beq.n	8009eb2 <_malloc_r+0xea>
 8009e1a:	6823      	ldr	r3, [r4, #0]
 8009e1c:	4639      	mov	r1, r7
 8009e1e:	4630      	mov	r0, r6
 8009e20:	eb04 0903 	add.w	r9, r4, r3
 8009e24:	f000 fe50 	bl	800aac8 <_sbrk_r>
 8009e28:	4581      	cmp	r9, r0
 8009e2a:	d142      	bne.n	8009eb2 <_malloc_r+0xea>
 8009e2c:	6821      	ldr	r1, [r4, #0]
 8009e2e:	1a6d      	subs	r5, r5, r1
 8009e30:	4629      	mov	r1, r5
 8009e32:	4630      	mov	r0, r6
 8009e34:	f7ff ffa6 	bl	8009d84 <sbrk_aligned>
 8009e38:	3001      	adds	r0, #1
 8009e3a:	d03a      	beq.n	8009eb2 <_malloc_r+0xea>
 8009e3c:	6823      	ldr	r3, [r4, #0]
 8009e3e:	442b      	add	r3, r5
 8009e40:	6023      	str	r3, [r4, #0]
 8009e42:	f8d8 3000 	ldr.w	r3, [r8]
 8009e46:	685a      	ldr	r2, [r3, #4]
 8009e48:	bb62      	cbnz	r2, 8009ea4 <_malloc_r+0xdc>
 8009e4a:	f8c8 7000 	str.w	r7, [r8]
 8009e4e:	e00f      	b.n	8009e70 <_malloc_r+0xa8>
 8009e50:	6822      	ldr	r2, [r4, #0]
 8009e52:	1b52      	subs	r2, r2, r5
 8009e54:	d420      	bmi.n	8009e98 <_malloc_r+0xd0>
 8009e56:	2a0b      	cmp	r2, #11
 8009e58:	d917      	bls.n	8009e8a <_malloc_r+0xc2>
 8009e5a:	1961      	adds	r1, r4, r5
 8009e5c:	42a3      	cmp	r3, r4
 8009e5e:	6025      	str	r5, [r4, #0]
 8009e60:	bf18      	it	ne
 8009e62:	6059      	strne	r1, [r3, #4]
 8009e64:	6863      	ldr	r3, [r4, #4]
 8009e66:	bf08      	it	eq
 8009e68:	f8c8 1000 	streq.w	r1, [r8]
 8009e6c:	5162      	str	r2, [r4, r5]
 8009e6e:	604b      	str	r3, [r1, #4]
 8009e70:	4630      	mov	r0, r6
 8009e72:	f000 f82f 	bl	8009ed4 <__malloc_unlock>
 8009e76:	f104 000b 	add.w	r0, r4, #11
 8009e7a:	1d23      	adds	r3, r4, #4
 8009e7c:	f020 0007 	bic.w	r0, r0, #7
 8009e80:	1ac2      	subs	r2, r0, r3
 8009e82:	bf1c      	itt	ne
 8009e84:	1a1b      	subne	r3, r3, r0
 8009e86:	50a3      	strne	r3, [r4, r2]
 8009e88:	e7af      	b.n	8009dea <_malloc_r+0x22>
 8009e8a:	6862      	ldr	r2, [r4, #4]
 8009e8c:	42a3      	cmp	r3, r4
 8009e8e:	bf0c      	ite	eq
 8009e90:	f8c8 2000 	streq.w	r2, [r8]
 8009e94:	605a      	strne	r2, [r3, #4]
 8009e96:	e7eb      	b.n	8009e70 <_malloc_r+0xa8>
 8009e98:	4623      	mov	r3, r4
 8009e9a:	6864      	ldr	r4, [r4, #4]
 8009e9c:	e7ae      	b.n	8009dfc <_malloc_r+0x34>
 8009e9e:	463c      	mov	r4, r7
 8009ea0:	687f      	ldr	r7, [r7, #4]
 8009ea2:	e7b6      	b.n	8009e12 <_malloc_r+0x4a>
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	42a3      	cmp	r3, r4
 8009eaa:	d1fb      	bne.n	8009ea4 <_malloc_r+0xdc>
 8009eac:	2300      	movs	r3, #0
 8009eae:	6053      	str	r3, [r2, #4]
 8009eb0:	e7de      	b.n	8009e70 <_malloc_r+0xa8>
 8009eb2:	230c      	movs	r3, #12
 8009eb4:	6033      	str	r3, [r6, #0]
 8009eb6:	4630      	mov	r0, r6
 8009eb8:	f000 f80c 	bl	8009ed4 <__malloc_unlock>
 8009ebc:	e794      	b.n	8009de8 <_malloc_r+0x20>
 8009ebe:	6005      	str	r5, [r0, #0]
 8009ec0:	e7d6      	b.n	8009e70 <_malloc_r+0xa8>
 8009ec2:	bf00      	nop
 8009ec4:	20004de4 	.word	0x20004de4

08009ec8 <__malloc_lock>:
 8009ec8:	4801      	ldr	r0, [pc, #4]	@ (8009ed0 <__malloc_lock+0x8>)
 8009eca:	f7ff b8ac 	b.w	8009026 <__retarget_lock_acquire_recursive>
 8009ece:	bf00      	nop
 8009ed0:	20004ddc 	.word	0x20004ddc

08009ed4 <__malloc_unlock>:
 8009ed4:	4801      	ldr	r0, [pc, #4]	@ (8009edc <__malloc_unlock+0x8>)
 8009ed6:	f7ff b8a7 	b.w	8009028 <__retarget_lock_release_recursive>
 8009eda:	bf00      	nop
 8009edc:	20004ddc 	.word	0x20004ddc

08009ee0 <_Balloc>:
 8009ee0:	b570      	push	{r4, r5, r6, lr}
 8009ee2:	69c6      	ldr	r6, [r0, #28]
 8009ee4:	4604      	mov	r4, r0
 8009ee6:	460d      	mov	r5, r1
 8009ee8:	b976      	cbnz	r6, 8009f08 <_Balloc+0x28>
 8009eea:	2010      	movs	r0, #16
 8009eec:	f7ff ff42 	bl	8009d74 <malloc>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	61e0      	str	r0, [r4, #28]
 8009ef4:	b920      	cbnz	r0, 8009f00 <_Balloc+0x20>
 8009ef6:	4b18      	ldr	r3, [pc, #96]	@ (8009f58 <_Balloc+0x78>)
 8009ef8:	4818      	ldr	r0, [pc, #96]	@ (8009f5c <_Balloc+0x7c>)
 8009efa:	216b      	movs	r1, #107	@ 0x6b
 8009efc:	f000 fdf4 	bl	800aae8 <__assert_func>
 8009f00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f04:	6006      	str	r6, [r0, #0]
 8009f06:	60c6      	str	r6, [r0, #12]
 8009f08:	69e6      	ldr	r6, [r4, #28]
 8009f0a:	68f3      	ldr	r3, [r6, #12]
 8009f0c:	b183      	cbz	r3, 8009f30 <_Balloc+0x50>
 8009f0e:	69e3      	ldr	r3, [r4, #28]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f16:	b9b8      	cbnz	r0, 8009f48 <_Balloc+0x68>
 8009f18:	2101      	movs	r1, #1
 8009f1a:	fa01 f605 	lsl.w	r6, r1, r5
 8009f1e:	1d72      	adds	r2, r6, #5
 8009f20:	0092      	lsls	r2, r2, #2
 8009f22:	4620      	mov	r0, r4
 8009f24:	f000 fdfe 	bl	800ab24 <_calloc_r>
 8009f28:	b160      	cbz	r0, 8009f44 <_Balloc+0x64>
 8009f2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f2e:	e00e      	b.n	8009f4e <_Balloc+0x6e>
 8009f30:	2221      	movs	r2, #33	@ 0x21
 8009f32:	2104      	movs	r1, #4
 8009f34:	4620      	mov	r0, r4
 8009f36:	f000 fdf5 	bl	800ab24 <_calloc_r>
 8009f3a:	69e3      	ldr	r3, [r4, #28]
 8009f3c:	60f0      	str	r0, [r6, #12]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d1e4      	bne.n	8009f0e <_Balloc+0x2e>
 8009f44:	2000      	movs	r0, #0
 8009f46:	bd70      	pop	{r4, r5, r6, pc}
 8009f48:	6802      	ldr	r2, [r0, #0]
 8009f4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f4e:	2300      	movs	r3, #0
 8009f50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f54:	e7f7      	b.n	8009f46 <_Balloc+0x66>
 8009f56:	bf00      	nop
 8009f58:	0801cfa9 	.word	0x0801cfa9
 8009f5c:	0801d029 	.word	0x0801d029

08009f60 <_Bfree>:
 8009f60:	b570      	push	{r4, r5, r6, lr}
 8009f62:	69c6      	ldr	r6, [r0, #28]
 8009f64:	4605      	mov	r5, r0
 8009f66:	460c      	mov	r4, r1
 8009f68:	b976      	cbnz	r6, 8009f88 <_Bfree+0x28>
 8009f6a:	2010      	movs	r0, #16
 8009f6c:	f7ff ff02 	bl	8009d74 <malloc>
 8009f70:	4602      	mov	r2, r0
 8009f72:	61e8      	str	r0, [r5, #28]
 8009f74:	b920      	cbnz	r0, 8009f80 <_Bfree+0x20>
 8009f76:	4b09      	ldr	r3, [pc, #36]	@ (8009f9c <_Bfree+0x3c>)
 8009f78:	4809      	ldr	r0, [pc, #36]	@ (8009fa0 <_Bfree+0x40>)
 8009f7a:	218f      	movs	r1, #143	@ 0x8f
 8009f7c:	f000 fdb4 	bl	800aae8 <__assert_func>
 8009f80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f84:	6006      	str	r6, [r0, #0]
 8009f86:	60c6      	str	r6, [r0, #12]
 8009f88:	b13c      	cbz	r4, 8009f9a <_Bfree+0x3a>
 8009f8a:	69eb      	ldr	r3, [r5, #28]
 8009f8c:	6862      	ldr	r2, [r4, #4]
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f94:	6021      	str	r1, [r4, #0]
 8009f96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f9a:	bd70      	pop	{r4, r5, r6, pc}
 8009f9c:	0801cfa9 	.word	0x0801cfa9
 8009fa0:	0801d029 	.word	0x0801d029

08009fa4 <__multadd>:
 8009fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fa8:	690d      	ldr	r5, [r1, #16]
 8009faa:	4607      	mov	r7, r0
 8009fac:	460c      	mov	r4, r1
 8009fae:	461e      	mov	r6, r3
 8009fb0:	f101 0c14 	add.w	ip, r1, #20
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	f8dc 3000 	ldr.w	r3, [ip]
 8009fba:	b299      	uxth	r1, r3
 8009fbc:	fb02 6101 	mla	r1, r2, r1, r6
 8009fc0:	0c1e      	lsrs	r6, r3, #16
 8009fc2:	0c0b      	lsrs	r3, r1, #16
 8009fc4:	fb02 3306 	mla	r3, r2, r6, r3
 8009fc8:	b289      	uxth	r1, r1
 8009fca:	3001      	adds	r0, #1
 8009fcc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009fd0:	4285      	cmp	r5, r0
 8009fd2:	f84c 1b04 	str.w	r1, [ip], #4
 8009fd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009fda:	dcec      	bgt.n	8009fb6 <__multadd+0x12>
 8009fdc:	b30e      	cbz	r6, 800a022 <__multadd+0x7e>
 8009fde:	68a3      	ldr	r3, [r4, #8]
 8009fe0:	42ab      	cmp	r3, r5
 8009fe2:	dc19      	bgt.n	800a018 <__multadd+0x74>
 8009fe4:	6861      	ldr	r1, [r4, #4]
 8009fe6:	4638      	mov	r0, r7
 8009fe8:	3101      	adds	r1, #1
 8009fea:	f7ff ff79 	bl	8009ee0 <_Balloc>
 8009fee:	4680      	mov	r8, r0
 8009ff0:	b928      	cbnz	r0, 8009ffe <__multadd+0x5a>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	4b0c      	ldr	r3, [pc, #48]	@ (800a028 <__multadd+0x84>)
 8009ff6:	480d      	ldr	r0, [pc, #52]	@ (800a02c <__multadd+0x88>)
 8009ff8:	21ba      	movs	r1, #186	@ 0xba
 8009ffa:	f000 fd75 	bl	800aae8 <__assert_func>
 8009ffe:	6922      	ldr	r2, [r4, #16]
 800a000:	3202      	adds	r2, #2
 800a002:	f104 010c 	add.w	r1, r4, #12
 800a006:	0092      	lsls	r2, r2, #2
 800a008:	300c      	adds	r0, #12
 800a00a:	f7ff f80e 	bl	800902a <memcpy>
 800a00e:	4621      	mov	r1, r4
 800a010:	4638      	mov	r0, r7
 800a012:	f7ff ffa5 	bl	8009f60 <_Bfree>
 800a016:	4644      	mov	r4, r8
 800a018:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a01c:	3501      	adds	r5, #1
 800a01e:	615e      	str	r6, [r3, #20]
 800a020:	6125      	str	r5, [r4, #16]
 800a022:	4620      	mov	r0, r4
 800a024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a028:	0801d018 	.word	0x0801d018
 800a02c:	0801d029 	.word	0x0801d029

0800a030 <__hi0bits>:
 800a030:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a034:	4603      	mov	r3, r0
 800a036:	bf36      	itet	cc
 800a038:	0403      	lslcc	r3, r0, #16
 800a03a:	2000      	movcs	r0, #0
 800a03c:	2010      	movcc	r0, #16
 800a03e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a042:	bf3c      	itt	cc
 800a044:	021b      	lslcc	r3, r3, #8
 800a046:	3008      	addcc	r0, #8
 800a048:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a04c:	bf3c      	itt	cc
 800a04e:	011b      	lslcc	r3, r3, #4
 800a050:	3004      	addcc	r0, #4
 800a052:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a056:	bf3c      	itt	cc
 800a058:	009b      	lslcc	r3, r3, #2
 800a05a:	3002      	addcc	r0, #2
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	db05      	blt.n	800a06c <__hi0bits+0x3c>
 800a060:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a064:	f100 0001 	add.w	r0, r0, #1
 800a068:	bf08      	it	eq
 800a06a:	2020      	moveq	r0, #32
 800a06c:	4770      	bx	lr

0800a06e <__lo0bits>:
 800a06e:	6803      	ldr	r3, [r0, #0]
 800a070:	4602      	mov	r2, r0
 800a072:	f013 0007 	ands.w	r0, r3, #7
 800a076:	d00b      	beq.n	800a090 <__lo0bits+0x22>
 800a078:	07d9      	lsls	r1, r3, #31
 800a07a:	d421      	bmi.n	800a0c0 <__lo0bits+0x52>
 800a07c:	0798      	lsls	r0, r3, #30
 800a07e:	bf49      	itett	mi
 800a080:	085b      	lsrmi	r3, r3, #1
 800a082:	089b      	lsrpl	r3, r3, #2
 800a084:	2001      	movmi	r0, #1
 800a086:	6013      	strmi	r3, [r2, #0]
 800a088:	bf5c      	itt	pl
 800a08a:	6013      	strpl	r3, [r2, #0]
 800a08c:	2002      	movpl	r0, #2
 800a08e:	4770      	bx	lr
 800a090:	b299      	uxth	r1, r3
 800a092:	b909      	cbnz	r1, 800a098 <__lo0bits+0x2a>
 800a094:	0c1b      	lsrs	r3, r3, #16
 800a096:	2010      	movs	r0, #16
 800a098:	b2d9      	uxtb	r1, r3
 800a09a:	b909      	cbnz	r1, 800a0a0 <__lo0bits+0x32>
 800a09c:	3008      	adds	r0, #8
 800a09e:	0a1b      	lsrs	r3, r3, #8
 800a0a0:	0719      	lsls	r1, r3, #28
 800a0a2:	bf04      	itt	eq
 800a0a4:	091b      	lsreq	r3, r3, #4
 800a0a6:	3004      	addeq	r0, #4
 800a0a8:	0799      	lsls	r1, r3, #30
 800a0aa:	bf04      	itt	eq
 800a0ac:	089b      	lsreq	r3, r3, #2
 800a0ae:	3002      	addeq	r0, #2
 800a0b0:	07d9      	lsls	r1, r3, #31
 800a0b2:	d403      	bmi.n	800a0bc <__lo0bits+0x4e>
 800a0b4:	085b      	lsrs	r3, r3, #1
 800a0b6:	f100 0001 	add.w	r0, r0, #1
 800a0ba:	d003      	beq.n	800a0c4 <__lo0bits+0x56>
 800a0bc:	6013      	str	r3, [r2, #0]
 800a0be:	4770      	bx	lr
 800a0c0:	2000      	movs	r0, #0
 800a0c2:	4770      	bx	lr
 800a0c4:	2020      	movs	r0, #32
 800a0c6:	4770      	bx	lr

0800a0c8 <__i2b>:
 800a0c8:	b510      	push	{r4, lr}
 800a0ca:	460c      	mov	r4, r1
 800a0cc:	2101      	movs	r1, #1
 800a0ce:	f7ff ff07 	bl	8009ee0 <_Balloc>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	b928      	cbnz	r0, 800a0e2 <__i2b+0x1a>
 800a0d6:	4b05      	ldr	r3, [pc, #20]	@ (800a0ec <__i2b+0x24>)
 800a0d8:	4805      	ldr	r0, [pc, #20]	@ (800a0f0 <__i2b+0x28>)
 800a0da:	f240 1145 	movw	r1, #325	@ 0x145
 800a0de:	f000 fd03 	bl	800aae8 <__assert_func>
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	6144      	str	r4, [r0, #20]
 800a0e6:	6103      	str	r3, [r0, #16]
 800a0e8:	bd10      	pop	{r4, pc}
 800a0ea:	bf00      	nop
 800a0ec:	0801d018 	.word	0x0801d018
 800a0f0:	0801d029 	.word	0x0801d029

0800a0f4 <__multiply>:
 800a0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0f8:	4614      	mov	r4, r2
 800a0fa:	690a      	ldr	r2, [r1, #16]
 800a0fc:	6923      	ldr	r3, [r4, #16]
 800a0fe:	429a      	cmp	r2, r3
 800a100:	bfa8      	it	ge
 800a102:	4623      	movge	r3, r4
 800a104:	460f      	mov	r7, r1
 800a106:	bfa4      	itt	ge
 800a108:	460c      	movge	r4, r1
 800a10a:	461f      	movge	r7, r3
 800a10c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a110:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a114:	68a3      	ldr	r3, [r4, #8]
 800a116:	6861      	ldr	r1, [r4, #4]
 800a118:	eb0a 0609 	add.w	r6, sl, r9
 800a11c:	42b3      	cmp	r3, r6
 800a11e:	b085      	sub	sp, #20
 800a120:	bfb8      	it	lt
 800a122:	3101      	addlt	r1, #1
 800a124:	f7ff fedc 	bl	8009ee0 <_Balloc>
 800a128:	b930      	cbnz	r0, 800a138 <__multiply+0x44>
 800a12a:	4602      	mov	r2, r0
 800a12c:	4b44      	ldr	r3, [pc, #272]	@ (800a240 <__multiply+0x14c>)
 800a12e:	4845      	ldr	r0, [pc, #276]	@ (800a244 <__multiply+0x150>)
 800a130:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a134:	f000 fcd8 	bl	800aae8 <__assert_func>
 800a138:	f100 0514 	add.w	r5, r0, #20
 800a13c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a140:	462b      	mov	r3, r5
 800a142:	2200      	movs	r2, #0
 800a144:	4543      	cmp	r3, r8
 800a146:	d321      	bcc.n	800a18c <__multiply+0x98>
 800a148:	f107 0114 	add.w	r1, r7, #20
 800a14c:	f104 0214 	add.w	r2, r4, #20
 800a150:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a154:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a158:	9302      	str	r3, [sp, #8]
 800a15a:	1b13      	subs	r3, r2, r4
 800a15c:	3b15      	subs	r3, #21
 800a15e:	f023 0303 	bic.w	r3, r3, #3
 800a162:	3304      	adds	r3, #4
 800a164:	f104 0715 	add.w	r7, r4, #21
 800a168:	42ba      	cmp	r2, r7
 800a16a:	bf38      	it	cc
 800a16c:	2304      	movcc	r3, #4
 800a16e:	9301      	str	r3, [sp, #4]
 800a170:	9b02      	ldr	r3, [sp, #8]
 800a172:	9103      	str	r1, [sp, #12]
 800a174:	428b      	cmp	r3, r1
 800a176:	d80c      	bhi.n	800a192 <__multiply+0x9e>
 800a178:	2e00      	cmp	r6, #0
 800a17a:	dd03      	ble.n	800a184 <__multiply+0x90>
 800a17c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a180:	2b00      	cmp	r3, #0
 800a182:	d05b      	beq.n	800a23c <__multiply+0x148>
 800a184:	6106      	str	r6, [r0, #16]
 800a186:	b005      	add	sp, #20
 800a188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a18c:	f843 2b04 	str.w	r2, [r3], #4
 800a190:	e7d8      	b.n	800a144 <__multiply+0x50>
 800a192:	f8b1 a000 	ldrh.w	sl, [r1]
 800a196:	f1ba 0f00 	cmp.w	sl, #0
 800a19a:	d024      	beq.n	800a1e6 <__multiply+0xf2>
 800a19c:	f104 0e14 	add.w	lr, r4, #20
 800a1a0:	46a9      	mov	r9, r5
 800a1a2:	f04f 0c00 	mov.w	ip, #0
 800a1a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a1aa:	f8d9 3000 	ldr.w	r3, [r9]
 800a1ae:	fa1f fb87 	uxth.w	fp, r7
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	fb0a 330b 	mla	r3, sl, fp, r3
 800a1b8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a1bc:	f8d9 7000 	ldr.w	r7, [r9]
 800a1c0:	4463      	add	r3, ip
 800a1c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a1c6:	fb0a c70b 	mla	r7, sl, fp, ip
 800a1ca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a1d4:	4572      	cmp	r2, lr
 800a1d6:	f849 3b04 	str.w	r3, [r9], #4
 800a1da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a1de:	d8e2      	bhi.n	800a1a6 <__multiply+0xb2>
 800a1e0:	9b01      	ldr	r3, [sp, #4]
 800a1e2:	f845 c003 	str.w	ip, [r5, r3]
 800a1e6:	9b03      	ldr	r3, [sp, #12]
 800a1e8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a1ec:	3104      	adds	r1, #4
 800a1ee:	f1b9 0f00 	cmp.w	r9, #0
 800a1f2:	d021      	beq.n	800a238 <__multiply+0x144>
 800a1f4:	682b      	ldr	r3, [r5, #0]
 800a1f6:	f104 0c14 	add.w	ip, r4, #20
 800a1fa:	46ae      	mov	lr, r5
 800a1fc:	f04f 0a00 	mov.w	sl, #0
 800a200:	f8bc b000 	ldrh.w	fp, [ip]
 800a204:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a208:	fb09 770b 	mla	r7, r9, fp, r7
 800a20c:	4457      	add	r7, sl
 800a20e:	b29b      	uxth	r3, r3
 800a210:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a214:	f84e 3b04 	str.w	r3, [lr], #4
 800a218:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a21c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a220:	f8be 3000 	ldrh.w	r3, [lr]
 800a224:	fb09 330a 	mla	r3, r9, sl, r3
 800a228:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a22c:	4562      	cmp	r2, ip
 800a22e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a232:	d8e5      	bhi.n	800a200 <__multiply+0x10c>
 800a234:	9f01      	ldr	r7, [sp, #4]
 800a236:	51eb      	str	r3, [r5, r7]
 800a238:	3504      	adds	r5, #4
 800a23a:	e799      	b.n	800a170 <__multiply+0x7c>
 800a23c:	3e01      	subs	r6, #1
 800a23e:	e79b      	b.n	800a178 <__multiply+0x84>
 800a240:	0801d018 	.word	0x0801d018
 800a244:	0801d029 	.word	0x0801d029

0800a248 <__pow5mult>:
 800a248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a24c:	4615      	mov	r5, r2
 800a24e:	f012 0203 	ands.w	r2, r2, #3
 800a252:	4607      	mov	r7, r0
 800a254:	460e      	mov	r6, r1
 800a256:	d007      	beq.n	800a268 <__pow5mult+0x20>
 800a258:	4c25      	ldr	r4, [pc, #148]	@ (800a2f0 <__pow5mult+0xa8>)
 800a25a:	3a01      	subs	r2, #1
 800a25c:	2300      	movs	r3, #0
 800a25e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a262:	f7ff fe9f 	bl	8009fa4 <__multadd>
 800a266:	4606      	mov	r6, r0
 800a268:	10ad      	asrs	r5, r5, #2
 800a26a:	d03d      	beq.n	800a2e8 <__pow5mult+0xa0>
 800a26c:	69fc      	ldr	r4, [r7, #28]
 800a26e:	b97c      	cbnz	r4, 800a290 <__pow5mult+0x48>
 800a270:	2010      	movs	r0, #16
 800a272:	f7ff fd7f 	bl	8009d74 <malloc>
 800a276:	4602      	mov	r2, r0
 800a278:	61f8      	str	r0, [r7, #28]
 800a27a:	b928      	cbnz	r0, 800a288 <__pow5mult+0x40>
 800a27c:	4b1d      	ldr	r3, [pc, #116]	@ (800a2f4 <__pow5mult+0xac>)
 800a27e:	481e      	ldr	r0, [pc, #120]	@ (800a2f8 <__pow5mult+0xb0>)
 800a280:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a284:	f000 fc30 	bl	800aae8 <__assert_func>
 800a288:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a28c:	6004      	str	r4, [r0, #0]
 800a28e:	60c4      	str	r4, [r0, #12]
 800a290:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a294:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a298:	b94c      	cbnz	r4, 800a2ae <__pow5mult+0x66>
 800a29a:	f240 2171 	movw	r1, #625	@ 0x271
 800a29e:	4638      	mov	r0, r7
 800a2a0:	f7ff ff12 	bl	800a0c8 <__i2b>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2aa:	4604      	mov	r4, r0
 800a2ac:	6003      	str	r3, [r0, #0]
 800a2ae:	f04f 0900 	mov.w	r9, #0
 800a2b2:	07eb      	lsls	r3, r5, #31
 800a2b4:	d50a      	bpl.n	800a2cc <__pow5mult+0x84>
 800a2b6:	4631      	mov	r1, r6
 800a2b8:	4622      	mov	r2, r4
 800a2ba:	4638      	mov	r0, r7
 800a2bc:	f7ff ff1a 	bl	800a0f4 <__multiply>
 800a2c0:	4631      	mov	r1, r6
 800a2c2:	4680      	mov	r8, r0
 800a2c4:	4638      	mov	r0, r7
 800a2c6:	f7ff fe4b 	bl	8009f60 <_Bfree>
 800a2ca:	4646      	mov	r6, r8
 800a2cc:	106d      	asrs	r5, r5, #1
 800a2ce:	d00b      	beq.n	800a2e8 <__pow5mult+0xa0>
 800a2d0:	6820      	ldr	r0, [r4, #0]
 800a2d2:	b938      	cbnz	r0, 800a2e4 <__pow5mult+0x9c>
 800a2d4:	4622      	mov	r2, r4
 800a2d6:	4621      	mov	r1, r4
 800a2d8:	4638      	mov	r0, r7
 800a2da:	f7ff ff0b 	bl	800a0f4 <__multiply>
 800a2de:	6020      	str	r0, [r4, #0]
 800a2e0:	f8c0 9000 	str.w	r9, [r0]
 800a2e4:	4604      	mov	r4, r0
 800a2e6:	e7e4      	b.n	800a2b2 <__pow5mult+0x6a>
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2ee:	bf00      	nop
 800a2f0:	0801d084 	.word	0x0801d084
 800a2f4:	0801cfa9 	.word	0x0801cfa9
 800a2f8:	0801d029 	.word	0x0801d029

0800a2fc <__lshift>:
 800a2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a300:	460c      	mov	r4, r1
 800a302:	6849      	ldr	r1, [r1, #4]
 800a304:	6923      	ldr	r3, [r4, #16]
 800a306:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a30a:	68a3      	ldr	r3, [r4, #8]
 800a30c:	4607      	mov	r7, r0
 800a30e:	4691      	mov	r9, r2
 800a310:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a314:	f108 0601 	add.w	r6, r8, #1
 800a318:	42b3      	cmp	r3, r6
 800a31a:	db0b      	blt.n	800a334 <__lshift+0x38>
 800a31c:	4638      	mov	r0, r7
 800a31e:	f7ff fddf 	bl	8009ee0 <_Balloc>
 800a322:	4605      	mov	r5, r0
 800a324:	b948      	cbnz	r0, 800a33a <__lshift+0x3e>
 800a326:	4602      	mov	r2, r0
 800a328:	4b28      	ldr	r3, [pc, #160]	@ (800a3cc <__lshift+0xd0>)
 800a32a:	4829      	ldr	r0, [pc, #164]	@ (800a3d0 <__lshift+0xd4>)
 800a32c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a330:	f000 fbda 	bl	800aae8 <__assert_func>
 800a334:	3101      	adds	r1, #1
 800a336:	005b      	lsls	r3, r3, #1
 800a338:	e7ee      	b.n	800a318 <__lshift+0x1c>
 800a33a:	2300      	movs	r3, #0
 800a33c:	f100 0114 	add.w	r1, r0, #20
 800a340:	f100 0210 	add.w	r2, r0, #16
 800a344:	4618      	mov	r0, r3
 800a346:	4553      	cmp	r3, sl
 800a348:	db33      	blt.n	800a3b2 <__lshift+0xb6>
 800a34a:	6920      	ldr	r0, [r4, #16]
 800a34c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a350:	f104 0314 	add.w	r3, r4, #20
 800a354:	f019 091f 	ands.w	r9, r9, #31
 800a358:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a35c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a360:	d02b      	beq.n	800a3ba <__lshift+0xbe>
 800a362:	f1c9 0e20 	rsb	lr, r9, #32
 800a366:	468a      	mov	sl, r1
 800a368:	2200      	movs	r2, #0
 800a36a:	6818      	ldr	r0, [r3, #0]
 800a36c:	fa00 f009 	lsl.w	r0, r0, r9
 800a370:	4310      	orrs	r0, r2
 800a372:	f84a 0b04 	str.w	r0, [sl], #4
 800a376:	f853 2b04 	ldr.w	r2, [r3], #4
 800a37a:	459c      	cmp	ip, r3
 800a37c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a380:	d8f3      	bhi.n	800a36a <__lshift+0x6e>
 800a382:	ebac 0304 	sub.w	r3, ip, r4
 800a386:	3b15      	subs	r3, #21
 800a388:	f023 0303 	bic.w	r3, r3, #3
 800a38c:	3304      	adds	r3, #4
 800a38e:	f104 0015 	add.w	r0, r4, #21
 800a392:	4584      	cmp	ip, r0
 800a394:	bf38      	it	cc
 800a396:	2304      	movcc	r3, #4
 800a398:	50ca      	str	r2, [r1, r3]
 800a39a:	b10a      	cbz	r2, 800a3a0 <__lshift+0xa4>
 800a39c:	f108 0602 	add.w	r6, r8, #2
 800a3a0:	3e01      	subs	r6, #1
 800a3a2:	4638      	mov	r0, r7
 800a3a4:	612e      	str	r6, [r5, #16]
 800a3a6:	4621      	mov	r1, r4
 800a3a8:	f7ff fdda 	bl	8009f60 <_Bfree>
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	e7c5      	b.n	800a346 <__lshift+0x4a>
 800a3ba:	3904      	subs	r1, #4
 800a3bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3c4:	459c      	cmp	ip, r3
 800a3c6:	d8f9      	bhi.n	800a3bc <__lshift+0xc0>
 800a3c8:	e7ea      	b.n	800a3a0 <__lshift+0xa4>
 800a3ca:	bf00      	nop
 800a3cc:	0801d018 	.word	0x0801d018
 800a3d0:	0801d029 	.word	0x0801d029

0800a3d4 <__mcmp>:
 800a3d4:	690a      	ldr	r2, [r1, #16]
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	6900      	ldr	r0, [r0, #16]
 800a3da:	1a80      	subs	r0, r0, r2
 800a3dc:	b530      	push	{r4, r5, lr}
 800a3de:	d10e      	bne.n	800a3fe <__mcmp+0x2a>
 800a3e0:	3314      	adds	r3, #20
 800a3e2:	3114      	adds	r1, #20
 800a3e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a3e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a3ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a3f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a3f4:	4295      	cmp	r5, r2
 800a3f6:	d003      	beq.n	800a400 <__mcmp+0x2c>
 800a3f8:	d205      	bcs.n	800a406 <__mcmp+0x32>
 800a3fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a3fe:	bd30      	pop	{r4, r5, pc}
 800a400:	42a3      	cmp	r3, r4
 800a402:	d3f3      	bcc.n	800a3ec <__mcmp+0x18>
 800a404:	e7fb      	b.n	800a3fe <__mcmp+0x2a>
 800a406:	2001      	movs	r0, #1
 800a408:	e7f9      	b.n	800a3fe <__mcmp+0x2a>
	...

0800a40c <__mdiff>:
 800a40c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a410:	4689      	mov	r9, r1
 800a412:	4606      	mov	r6, r0
 800a414:	4611      	mov	r1, r2
 800a416:	4648      	mov	r0, r9
 800a418:	4614      	mov	r4, r2
 800a41a:	f7ff ffdb 	bl	800a3d4 <__mcmp>
 800a41e:	1e05      	subs	r5, r0, #0
 800a420:	d112      	bne.n	800a448 <__mdiff+0x3c>
 800a422:	4629      	mov	r1, r5
 800a424:	4630      	mov	r0, r6
 800a426:	f7ff fd5b 	bl	8009ee0 <_Balloc>
 800a42a:	4602      	mov	r2, r0
 800a42c:	b928      	cbnz	r0, 800a43a <__mdiff+0x2e>
 800a42e:	4b3f      	ldr	r3, [pc, #252]	@ (800a52c <__mdiff+0x120>)
 800a430:	f240 2137 	movw	r1, #567	@ 0x237
 800a434:	483e      	ldr	r0, [pc, #248]	@ (800a530 <__mdiff+0x124>)
 800a436:	f000 fb57 	bl	800aae8 <__assert_func>
 800a43a:	2301      	movs	r3, #1
 800a43c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a440:	4610      	mov	r0, r2
 800a442:	b003      	add	sp, #12
 800a444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a448:	bfbc      	itt	lt
 800a44a:	464b      	movlt	r3, r9
 800a44c:	46a1      	movlt	r9, r4
 800a44e:	4630      	mov	r0, r6
 800a450:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a454:	bfba      	itte	lt
 800a456:	461c      	movlt	r4, r3
 800a458:	2501      	movlt	r5, #1
 800a45a:	2500      	movge	r5, #0
 800a45c:	f7ff fd40 	bl	8009ee0 <_Balloc>
 800a460:	4602      	mov	r2, r0
 800a462:	b918      	cbnz	r0, 800a46c <__mdiff+0x60>
 800a464:	4b31      	ldr	r3, [pc, #196]	@ (800a52c <__mdiff+0x120>)
 800a466:	f240 2145 	movw	r1, #581	@ 0x245
 800a46a:	e7e3      	b.n	800a434 <__mdiff+0x28>
 800a46c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a470:	6926      	ldr	r6, [r4, #16]
 800a472:	60c5      	str	r5, [r0, #12]
 800a474:	f109 0310 	add.w	r3, r9, #16
 800a478:	f109 0514 	add.w	r5, r9, #20
 800a47c:	f104 0e14 	add.w	lr, r4, #20
 800a480:	f100 0b14 	add.w	fp, r0, #20
 800a484:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a488:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a48c:	9301      	str	r3, [sp, #4]
 800a48e:	46d9      	mov	r9, fp
 800a490:	f04f 0c00 	mov.w	ip, #0
 800a494:	9b01      	ldr	r3, [sp, #4]
 800a496:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a49a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a49e:	9301      	str	r3, [sp, #4]
 800a4a0:	fa1f f38a 	uxth.w	r3, sl
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	b283      	uxth	r3, r0
 800a4a8:	1acb      	subs	r3, r1, r3
 800a4aa:	0c00      	lsrs	r0, r0, #16
 800a4ac:	4463      	add	r3, ip
 800a4ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a4b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a4bc:	4576      	cmp	r6, lr
 800a4be:	f849 3b04 	str.w	r3, [r9], #4
 800a4c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a4c6:	d8e5      	bhi.n	800a494 <__mdiff+0x88>
 800a4c8:	1b33      	subs	r3, r6, r4
 800a4ca:	3b15      	subs	r3, #21
 800a4cc:	f023 0303 	bic.w	r3, r3, #3
 800a4d0:	3415      	adds	r4, #21
 800a4d2:	3304      	adds	r3, #4
 800a4d4:	42a6      	cmp	r6, r4
 800a4d6:	bf38      	it	cc
 800a4d8:	2304      	movcc	r3, #4
 800a4da:	441d      	add	r5, r3
 800a4dc:	445b      	add	r3, fp
 800a4de:	461e      	mov	r6, r3
 800a4e0:	462c      	mov	r4, r5
 800a4e2:	4544      	cmp	r4, r8
 800a4e4:	d30e      	bcc.n	800a504 <__mdiff+0xf8>
 800a4e6:	f108 0103 	add.w	r1, r8, #3
 800a4ea:	1b49      	subs	r1, r1, r5
 800a4ec:	f021 0103 	bic.w	r1, r1, #3
 800a4f0:	3d03      	subs	r5, #3
 800a4f2:	45a8      	cmp	r8, r5
 800a4f4:	bf38      	it	cc
 800a4f6:	2100      	movcc	r1, #0
 800a4f8:	440b      	add	r3, r1
 800a4fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a4fe:	b191      	cbz	r1, 800a526 <__mdiff+0x11a>
 800a500:	6117      	str	r7, [r2, #16]
 800a502:	e79d      	b.n	800a440 <__mdiff+0x34>
 800a504:	f854 1b04 	ldr.w	r1, [r4], #4
 800a508:	46e6      	mov	lr, ip
 800a50a:	0c08      	lsrs	r0, r1, #16
 800a50c:	fa1c fc81 	uxtah	ip, ip, r1
 800a510:	4471      	add	r1, lr
 800a512:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a516:	b289      	uxth	r1, r1
 800a518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a51c:	f846 1b04 	str.w	r1, [r6], #4
 800a520:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a524:	e7dd      	b.n	800a4e2 <__mdiff+0xd6>
 800a526:	3f01      	subs	r7, #1
 800a528:	e7e7      	b.n	800a4fa <__mdiff+0xee>
 800a52a:	bf00      	nop
 800a52c:	0801d018 	.word	0x0801d018
 800a530:	0801d029 	.word	0x0801d029

0800a534 <__d2b>:
 800a534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a538:	460f      	mov	r7, r1
 800a53a:	2101      	movs	r1, #1
 800a53c:	ec59 8b10 	vmov	r8, r9, d0
 800a540:	4616      	mov	r6, r2
 800a542:	f7ff fccd 	bl	8009ee0 <_Balloc>
 800a546:	4604      	mov	r4, r0
 800a548:	b930      	cbnz	r0, 800a558 <__d2b+0x24>
 800a54a:	4602      	mov	r2, r0
 800a54c:	4b23      	ldr	r3, [pc, #140]	@ (800a5dc <__d2b+0xa8>)
 800a54e:	4824      	ldr	r0, [pc, #144]	@ (800a5e0 <__d2b+0xac>)
 800a550:	f240 310f 	movw	r1, #783	@ 0x30f
 800a554:	f000 fac8 	bl	800aae8 <__assert_func>
 800a558:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a55c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a560:	b10d      	cbz	r5, 800a566 <__d2b+0x32>
 800a562:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a566:	9301      	str	r3, [sp, #4]
 800a568:	f1b8 0300 	subs.w	r3, r8, #0
 800a56c:	d023      	beq.n	800a5b6 <__d2b+0x82>
 800a56e:	4668      	mov	r0, sp
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	f7ff fd7c 	bl	800a06e <__lo0bits>
 800a576:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a57a:	b1d0      	cbz	r0, 800a5b2 <__d2b+0x7e>
 800a57c:	f1c0 0320 	rsb	r3, r0, #32
 800a580:	fa02 f303 	lsl.w	r3, r2, r3
 800a584:	430b      	orrs	r3, r1
 800a586:	40c2      	lsrs	r2, r0
 800a588:	6163      	str	r3, [r4, #20]
 800a58a:	9201      	str	r2, [sp, #4]
 800a58c:	9b01      	ldr	r3, [sp, #4]
 800a58e:	61a3      	str	r3, [r4, #24]
 800a590:	2b00      	cmp	r3, #0
 800a592:	bf0c      	ite	eq
 800a594:	2201      	moveq	r2, #1
 800a596:	2202      	movne	r2, #2
 800a598:	6122      	str	r2, [r4, #16]
 800a59a:	b1a5      	cbz	r5, 800a5c6 <__d2b+0x92>
 800a59c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a5a0:	4405      	add	r5, r0
 800a5a2:	603d      	str	r5, [r7, #0]
 800a5a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a5a8:	6030      	str	r0, [r6, #0]
 800a5aa:	4620      	mov	r0, r4
 800a5ac:	b003      	add	sp, #12
 800a5ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5b2:	6161      	str	r1, [r4, #20]
 800a5b4:	e7ea      	b.n	800a58c <__d2b+0x58>
 800a5b6:	a801      	add	r0, sp, #4
 800a5b8:	f7ff fd59 	bl	800a06e <__lo0bits>
 800a5bc:	9b01      	ldr	r3, [sp, #4]
 800a5be:	6163      	str	r3, [r4, #20]
 800a5c0:	3020      	adds	r0, #32
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	e7e8      	b.n	800a598 <__d2b+0x64>
 800a5c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a5ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a5ce:	6038      	str	r0, [r7, #0]
 800a5d0:	6918      	ldr	r0, [r3, #16]
 800a5d2:	f7ff fd2d 	bl	800a030 <__hi0bits>
 800a5d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a5da:	e7e5      	b.n	800a5a8 <__d2b+0x74>
 800a5dc:	0801d018 	.word	0x0801d018
 800a5e0:	0801d029 	.word	0x0801d029

0800a5e4 <__sfputc_r>:
 800a5e4:	6893      	ldr	r3, [r2, #8]
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	b410      	push	{r4}
 800a5ec:	6093      	str	r3, [r2, #8]
 800a5ee:	da08      	bge.n	800a602 <__sfputc_r+0x1e>
 800a5f0:	6994      	ldr	r4, [r2, #24]
 800a5f2:	42a3      	cmp	r3, r4
 800a5f4:	db01      	blt.n	800a5fa <__sfputc_r+0x16>
 800a5f6:	290a      	cmp	r1, #10
 800a5f8:	d103      	bne.n	800a602 <__sfputc_r+0x1e>
 800a5fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5fe:	f7fe bc00 	b.w	8008e02 <__swbuf_r>
 800a602:	6813      	ldr	r3, [r2, #0]
 800a604:	1c58      	adds	r0, r3, #1
 800a606:	6010      	str	r0, [r2, #0]
 800a608:	7019      	strb	r1, [r3, #0]
 800a60a:	4608      	mov	r0, r1
 800a60c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a610:	4770      	bx	lr

0800a612 <__sfputs_r>:
 800a612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a614:	4606      	mov	r6, r0
 800a616:	460f      	mov	r7, r1
 800a618:	4614      	mov	r4, r2
 800a61a:	18d5      	adds	r5, r2, r3
 800a61c:	42ac      	cmp	r4, r5
 800a61e:	d101      	bne.n	800a624 <__sfputs_r+0x12>
 800a620:	2000      	movs	r0, #0
 800a622:	e007      	b.n	800a634 <__sfputs_r+0x22>
 800a624:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a628:	463a      	mov	r2, r7
 800a62a:	4630      	mov	r0, r6
 800a62c:	f7ff ffda 	bl	800a5e4 <__sfputc_r>
 800a630:	1c43      	adds	r3, r0, #1
 800a632:	d1f3      	bne.n	800a61c <__sfputs_r+0xa>
 800a634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a638 <_vfiprintf_r>:
 800a638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a63c:	460d      	mov	r5, r1
 800a63e:	b09d      	sub	sp, #116	@ 0x74
 800a640:	4614      	mov	r4, r2
 800a642:	4698      	mov	r8, r3
 800a644:	4606      	mov	r6, r0
 800a646:	b118      	cbz	r0, 800a650 <_vfiprintf_r+0x18>
 800a648:	6a03      	ldr	r3, [r0, #32]
 800a64a:	b90b      	cbnz	r3, 800a650 <_vfiprintf_r+0x18>
 800a64c:	f7fe fa3c 	bl	8008ac8 <__sinit>
 800a650:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a652:	07d9      	lsls	r1, r3, #31
 800a654:	d405      	bmi.n	800a662 <_vfiprintf_r+0x2a>
 800a656:	89ab      	ldrh	r3, [r5, #12]
 800a658:	059a      	lsls	r2, r3, #22
 800a65a:	d402      	bmi.n	800a662 <_vfiprintf_r+0x2a>
 800a65c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a65e:	f7fe fce2 	bl	8009026 <__retarget_lock_acquire_recursive>
 800a662:	89ab      	ldrh	r3, [r5, #12]
 800a664:	071b      	lsls	r3, r3, #28
 800a666:	d501      	bpl.n	800a66c <_vfiprintf_r+0x34>
 800a668:	692b      	ldr	r3, [r5, #16]
 800a66a:	b99b      	cbnz	r3, 800a694 <_vfiprintf_r+0x5c>
 800a66c:	4629      	mov	r1, r5
 800a66e:	4630      	mov	r0, r6
 800a670:	f7fe fc06 	bl	8008e80 <__swsetup_r>
 800a674:	b170      	cbz	r0, 800a694 <_vfiprintf_r+0x5c>
 800a676:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a678:	07dc      	lsls	r4, r3, #31
 800a67a:	d504      	bpl.n	800a686 <_vfiprintf_r+0x4e>
 800a67c:	f04f 30ff 	mov.w	r0, #4294967295
 800a680:	b01d      	add	sp, #116	@ 0x74
 800a682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a686:	89ab      	ldrh	r3, [r5, #12]
 800a688:	0598      	lsls	r0, r3, #22
 800a68a:	d4f7      	bmi.n	800a67c <_vfiprintf_r+0x44>
 800a68c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a68e:	f7fe fccb 	bl	8009028 <__retarget_lock_release_recursive>
 800a692:	e7f3      	b.n	800a67c <_vfiprintf_r+0x44>
 800a694:	2300      	movs	r3, #0
 800a696:	9309      	str	r3, [sp, #36]	@ 0x24
 800a698:	2320      	movs	r3, #32
 800a69a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a69e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6a2:	2330      	movs	r3, #48	@ 0x30
 800a6a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a854 <_vfiprintf_r+0x21c>
 800a6a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a6ac:	f04f 0901 	mov.w	r9, #1
 800a6b0:	4623      	mov	r3, r4
 800a6b2:	469a      	mov	sl, r3
 800a6b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6b8:	b10a      	cbz	r2, 800a6be <_vfiprintf_r+0x86>
 800a6ba:	2a25      	cmp	r2, #37	@ 0x25
 800a6bc:	d1f9      	bne.n	800a6b2 <_vfiprintf_r+0x7a>
 800a6be:	ebba 0b04 	subs.w	fp, sl, r4
 800a6c2:	d00b      	beq.n	800a6dc <_vfiprintf_r+0xa4>
 800a6c4:	465b      	mov	r3, fp
 800a6c6:	4622      	mov	r2, r4
 800a6c8:	4629      	mov	r1, r5
 800a6ca:	4630      	mov	r0, r6
 800a6cc:	f7ff ffa1 	bl	800a612 <__sfputs_r>
 800a6d0:	3001      	adds	r0, #1
 800a6d2:	f000 80a7 	beq.w	800a824 <_vfiprintf_r+0x1ec>
 800a6d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6d8:	445a      	add	r2, fp
 800a6da:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f000 809f 	beq.w	800a824 <_vfiprintf_r+0x1ec>
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a6f0:	f10a 0a01 	add.w	sl, sl, #1
 800a6f4:	9304      	str	r3, [sp, #16]
 800a6f6:	9307      	str	r3, [sp, #28]
 800a6f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a6fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6fe:	4654      	mov	r4, sl
 800a700:	2205      	movs	r2, #5
 800a702:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a706:	4853      	ldr	r0, [pc, #332]	@ (800a854 <_vfiprintf_r+0x21c>)
 800a708:	f7f5 fd72 	bl	80001f0 <memchr>
 800a70c:	9a04      	ldr	r2, [sp, #16]
 800a70e:	b9d8      	cbnz	r0, 800a748 <_vfiprintf_r+0x110>
 800a710:	06d1      	lsls	r1, r2, #27
 800a712:	bf44      	itt	mi
 800a714:	2320      	movmi	r3, #32
 800a716:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a71a:	0713      	lsls	r3, r2, #28
 800a71c:	bf44      	itt	mi
 800a71e:	232b      	movmi	r3, #43	@ 0x2b
 800a720:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a724:	f89a 3000 	ldrb.w	r3, [sl]
 800a728:	2b2a      	cmp	r3, #42	@ 0x2a
 800a72a:	d015      	beq.n	800a758 <_vfiprintf_r+0x120>
 800a72c:	9a07      	ldr	r2, [sp, #28]
 800a72e:	4654      	mov	r4, sl
 800a730:	2000      	movs	r0, #0
 800a732:	f04f 0c0a 	mov.w	ip, #10
 800a736:	4621      	mov	r1, r4
 800a738:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a73c:	3b30      	subs	r3, #48	@ 0x30
 800a73e:	2b09      	cmp	r3, #9
 800a740:	d94b      	bls.n	800a7da <_vfiprintf_r+0x1a2>
 800a742:	b1b0      	cbz	r0, 800a772 <_vfiprintf_r+0x13a>
 800a744:	9207      	str	r2, [sp, #28]
 800a746:	e014      	b.n	800a772 <_vfiprintf_r+0x13a>
 800a748:	eba0 0308 	sub.w	r3, r0, r8
 800a74c:	fa09 f303 	lsl.w	r3, r9, r3
 800a750:	4313      	orrs	r3, r2
 800a752:	9304      	str	r3, [sp, #16]
 800a754:	46a2      	mov	sl, r4
 800a756:	e7d2      	b.n	800a6fe <_vfiprintf_r+0xc6>
 800a758:	9b03      	ldr	r3, [sp, #12]
 800a75a:	1d19      	adds	r1, r3, #4
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	9103      	str	r1, [sp, #12]
 800a760:	2b00      	cmp	r3, #0
 800a762:	bfbb      	ittet	lt
 800a764:	425b      	neglt	r3, r3
 800a766:	f042 0202 	orrlt.w	r2, r2, #2
 800a76a:	9307      	strge	r3, [sp, #28]
 800a76c:	9307      	strlt	r3, [sp, #28]
 800a76e:	bfb8      	it	lt
 800a770:	9204      	strlt	r2, [sp, #16]
 800a772:	7823      	ldrb	r3, [r4, #0]
 800a774:	2b2e      	cmp	r3, #46	@ 0x2e
 800a776:	d10a      	bne.n	800a78e <_vfiprintf_r+0x156>
 800a778:	7863      	ldrb	r3, [r4, #1]
 800a77a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a77c:	d132      	bne.n	800a7e4 <_vfiprintf_r+0x1ac>
 800a77e:	9b03      	ldr	r3, [sp, #12]
 800a780:	1d1a      	adds	r2, r3, #4
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	9203      	str	r2, [sp, #12]
 800a786:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a78a:	3402      	adds	r4, #2
 800a78c:	9305      	str	r3, [sp, #20]
 800a78e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a864 <_vfiprintf_r+0x22c>
 800a792:	7821      	ldrb	r1, [r4, #0]
 800a794:	2203      	movs	r2, #3
 800a796:	4650      	mov	r0, sl
 800a798:	f7f5 fd2a 	bl	80001f0 <memchr>
 800a79c:	b138      	cbz	r0, 800a7ae <_vfiprintf_r+0x176>
 800a79e:	9b04      	ldr	r3, [sp, #16]
 800a7a0:	eba0 000a 	sub.w	r0, r0, sl
 800a7a4:	2240      	movs	r2, #64	@ 0x40
 800a7a6:	4082      	lsls	r2, r0
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	3401      	adds	r4, #1
 800a7ac:	9304      	str	r3, [sp, #16]
 800a7ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7b2:	4829      	ldr	r0, [pc, #164]	@ (800a858 <_vfiprintf_r+0x220>)
 800a7b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a7b8:	2206      	movs	r2, #6
 800a7ba:	f7f5 fd19 	bl	80001f0 <memchr>
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	d03f      	beq.n	800a842 <_vfiprintf_r+0x20a>
 800a7c2:	4b26      	ldr	r3, [pc, #152]	@ (800a85c <_vfiprintf_r+0x224>)
 800a7c4:	bb1b      	cbnz	r3, 800a80e <_vfiprintf_r+0x1d6>
 800a7c6:	9b03      	ldr	r3, [sp, #12]
 800a7c8:	3307      	adds	r3, #7
 800a7ca:	f023 0307 	bic.w	r3, r3, #7
 800a7ce:	3308      	adds	r3, #8
 800a7d0:	9303      	str	r3, [sp, #12]
 800a7d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7d4:	443b      	add	r3, r7
 800a7d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7d8:	e76a      	b.n	800a6b0 <_vfiprintf_r+0x78>
 800a7da:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7de:	460c      	mov	r4, r1
 800a7e0:	2001      	movs	r0, #1
 800a7e2:	e7a8      	b.n	800a736 <_vfiprintf_r+0xfe>
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	3401      	adds	r4, #1
 800a7e8:	9305      	str	r3, [sp, #20]
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	f04f 0c0a 	mov.w	ip, #10
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7f6:	3a30      	subs	r2, #48	@ 0x30
 800a7f8:	2a09      	cmp	r2, #9
 800a7fa:	d903      	bls.n	800a804 <_vfiprintf_r+0x1cc>
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d0c6      	beq.n	800a78e <_vfiprintf_r+0x156>
 800a800:	9105      	str	r1, [sp, #20]
 800a802:	e7c4      	b.n	800a78e <_vfiprintf_r+0x156>
 800a804:	fb0c 2101 	mla	r1, ip, r1, r2
 800a808:	4604      	mov	r4, r0
 800a80a:	2301      	movs	r3, #1
 800a80c:	e7f0      	b.n	800a7f0 <_vfiprintf_r+0x1b8>
 800a80e:	ab03      	add	r3, sp, #12
 800a810:	9300      	str	r3, [sp, #0]
 800a812:	462a      	mov	r2, r5
 800a814:	4b12      	ldr	r3, [pc, #72]	@ (800a860 <_vfiprintf_r+0x228>)
 800a816:	a904      	add	r1, sp, #16
 800a818:	4630      	mov	r0, r6
 800a81a:	f7fd fd11 	bl	8008240 <_printf_float>
 800a81e:	4607      	mov	r7, r0
 800a820:	1c78      	adds	r0, r7, #1
 800a822:	d1d6      	bne.n	800a7d2 <_vfiprintf_r+0x19a>
 800a824:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a826:	07d9      	lsls	r1, r3, #31
 800a828:	d405      	bmi.n	800a836 <_vfiprintf_r+0x1fe>
 800a82a:	89ab      	ldrh	r3, [r5, #12]
 800a82c:	059a      	lsls	r2, r3, #22
 800a82e:	d402      	bmi.n	800a836 <_vfiprintf_r+0x1fe>
 800a830:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a832:	f7fe fbf9 	bl	8009028 <__retarget_lock_release_recursive>
 800a836:	89ab      	ldrh	r3, [r5, #12]
 800a838:	065b      	lsls	r3, r3, #25
 800a83a:	f53f af1f 	bmi.w	800a67c <_vfiprintf_r+0x44>
 800a83e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a840:	e71e      	b.n	800a680 <_vfiprintf_r+0x48>
 800a842:	ab03      	add	r3, sp, #12
 800a844:	9300      	str	r3, [sp, #0]
 800a846:	462a      	mov	r2, r5
 800a848:	4b05      	ldr	r3, [pc, #20]	@ (800a860 <_vfiprintf_r+0x228>)
 800a84a:	a904      	add	r1, sp, #16
 800a84c:	4630      	mov	r0, r6
 800a84e:	f7fd ff8f 	bl	8008770 <_printf_i>
 800a852:	e7e4      	b.n	800a81e <_vfiprintf_r+0x1e6>
 800a854:	0801d180 	.word	0x0801d180
 800a858:	0801d18a 	.word	0x0801d18a
 800a85c:	08008241 	.word	0x08008241
 800a860:	0800a613 	.word	0x0800a613
 800a864:	0801d186 	.word	0x0801d186

0800a868 <__sflush_r>:
 800a868:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a870:	0716      	lsls	r6, r2, #28
 800a872:	4605      	mov	r5, r0
 800a874:	460c      	mov	r4, r1
 800a876:	d454      	bmi.n	800a922 <__sflush_r+0xba>
 800a878:	684b      	ldr	r3, [r1, #4]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	dc02      	bgt.n	800a884 <__sflush_r+0x1c>
 800a87e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a880:	2b00      	cmp	r3, #0
 800a882:	dd48      	ble.n	800a916 <__sflush_r+0xae>
 800a884:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a886:	2e00      	cmp	r6, #0
 800a888:	d045      	beq.n	800a916 <__sflush_r+0xae>
 800a88a:	2300      	movs	r3, #0
 800a88c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a890:	682f      	ldr	r7, [r5, #0]
 800a892:	6a21      	ldr	r1, [r4, #32]
 800a894:	602b      	str	r3, [r5, #0]
 800a896:	d030      	beq.n	800a8fa <__sflush_r+0x92>
 800a898:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a89a:	89a3      	ldrh	r3, [r4, #12]
 800a89c:	0759      	lsls	r1, r3, #29
 800a89e:	d505      	bpl.n	800a8ac <__sflush_r+0x44>
 800a8a0:	6863      	ldr	r3, [r4, #4]
 800a8a2:	1ad2      	subs	r2, r2, r3
 800a8a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a8a6:	b10b      	cbz	r3, 800a8ac <__sflush_r+0x44>
 800a8a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a8aa:	1ad2      	subs	r2, r2, r3
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8b0:	6a21      	ldr	r1, [r4, #32]
 800a8b2:	4628      	mov	r0, r5
 800a8b4:	47b0      	blx	r6
 800a8b6:	1c43      	adds	r3, r0, #1
 800a8b8:	89a3      	ldrh	r3, [r4, #12]
 800a8ba:	d106      	bne.n	800a8ca <__sflush_r+0x62>
 800a8bc:	6829      	ldr	r1, [r5, #0]
 800a8be:	291d      	cmp	r1, #29
 800a8c0:	d82b      	bhi.n	800a91a <__sflush_r+0xb2>
 800a8c2:	4a2a      	ldr	r2, [pc, #168]	@ (800a96c <__sflush_r+0x104>)
 800a8c4:	410a      	asrs	r2, r1
 800a8c6:	07d6      	lsls	r6, r2, #31
 800a8c8:	d427      	bmi.n	800a91a <__sflush_r+0xb2>
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	6062      	str	r2, [r4, #4]
 800a8ce:	04d9      	lsls	r1, r3, #19
 800a8d0:	6922      	ldr	r2, [r4, #16]
 800a8d2:	6022      	str	r2, [r4, #0]
 800a8d4:	d504      	bpl.n	800a8e0 <__sflush_r+0x78>
 800a8d6:	1c42      	adds	r2, r0, #1
 800a8d8:	d101      	bne.n	800a8de <__sflush_r+0x76>
 800a8da:	682b      	ldr	r3, [r5, #0]
 800a8dc:	b903      	cbnz	r3, 800a8e0 <__sflush_r+0x78>
 800a8de:	6560      	str	r0, [r4, #84]	@ 0x54
 800a8e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8e2:	602f      	str	r7, [r5, #0]
 800a8e4:	b1b9      	cbz	r1, 800a916 <__sflush_r+0xae>
 800a8e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8ea:	4299      	cmp	r1, r3
 800a8ec:	d002      	beq.n	800a8f4 <__sflush_r+0x8c>
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	f7ff f9f6 	bl	8009ce0 <_free_r>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8f8:	e00d      	b.n	800a916 <__sflush_r+0xae>
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	4628      	mov	r0, r5
 800a8fe:	47b0      	blx	r6
 800a900:	4602      	mov	r2, r0
 800a902:	1c50      	adds	r0, r2, #1
 800a904:	d1c9      	bne.n	800a89a <__sflush_r+0x32>
 800a906:	682b      	ldr	r3, [r5, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d0c6      	beq.n	800a89a <__sflush_r+0x32>
 800a90c:	2b1d      	cmp	r3, #29
 800a90e:	d001      	beq.n	800a914 <__sflush_r+0xac>
 800a910:	2b16      	cmp	r3, #22
 800a912:	d11e      	bne.n	800a952 <__sflush_r+0xea>
 800a914:	602f      	str	r7, [r5, #0]
 800a916:	2000      	movs	r0, #0
 800a918:	e022      	b.n	800a960 <__sflush_r+0xf8>
 800a91a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a91e:	b21b      	sxth	r3, r3
 800a920:	e01b      	b.n	800a95a <__sflush_r+0xf2>
 800a922:	690f      	ldr	r7, [r1, #16]
 800a924:	2f00      	cmp	r7, #0
 800a926:	d0f6      	beq.n	800a916 <__sflush_r+0xae>
 800a928:	0793      	lsls	r3, r2, #30
 800a92a:	680e      	ldr	r6, [r1, #0]
 800a92c:	bf08      	it	eq
 800a92e:	694b      	ldreq	r3, [r1, #20]
 800a930:	600f      	str	r7, [r1, #0]
 800a932:	bf18      	it	ne
 800a934:	2300      	movne	r3, #0
 800a936:	eba6 0807 	sub.w	r8, r6, r7
 800a93a:	608b      	str	r3, [r1, #8]
 800a93c:	f1b8 0f00 	cmp.w	r8, #0
 800a940:	dde9      	ble.n	800a916 <__sflush_r+0xae>
 800a942:	6a21      	ldr	r1, [r4, #32]
 800a944:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a946:	4643      	mov	r3, r8
 800a948:	463a      	mov	r2, r7
 800a94a:	4628      	mov	r0, r5
 800a94c:	47b0      	blx	r6
 800a94e:	2800      	cmp	r0, #0
 800a950:	dc08      	bgt.n	800a964 <__sflush_r+0xfc>
 800a952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a956:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a95a:	81a3      	strh	r3, [r4, #12]
 800a95c:	f04f 30ff 	mov.w	r0, #4294967295
 800a960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a964:	4407      	add	r7, r0
 800a966:	eba8 0800 	sub.w	r8, r8, r0
 800a96a:	e7e7      	b.n	800a93c <__sflush_r+0xd4>
 800a96c:	dfbffffe 	.word	0xdfbffffe

0800a970 <_fflush_r>:
 800a970:	b538      	push	{r3, r4, r5, lr}
 800a972:	690b      	ldr	r3, [r1, #16]
 800a974:	4605      	mov	r5, r0
 800a976:	460c      	mov	r4, r1
 800a978:	b913      	cbnz	r3, 800a980 <_fflush_r+0x10>
 800a97a:	2500      	movs	r5, #0
 800a97c:	4628      	mov	r0, r5
 800a97e:	bd38      	pop	{r3, r4, r5, pc}
 800a980:	b118      	cbz	r0, 800a98a <_fflush_r+0x1a>
 800a982:	6a03      	ldr	r3, [r0, #32]
 800a984:	b90b      	cbnz	r3, 800a98a <_fflush_r+0x1a>
 800a986:	f7fe f89f 	bl	8008ac8 <__sinit>
 800a98a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d0f3      	beq.n	800a97a <_fflush_r+0xa>
 800a992:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a994:	07d0      	lsls	r0, r2, #31
 800a996:	d404      	bmi.n	800a9a2 <_fflush_r+0x32>
 800a998:	0599      	lsls	r1, r3, #22
 800a99a:	d402      	bmi.n	800a9a2 <_fflush_r+0x32>
 800a99c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a99e:	f7fe fb42 	bl	8009026 <__retarget_lock_acquire_recursive>
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	4621      	mov	r1, r4
 800a9a6:	f7ff ff5f 	bl	800a868 <__sflush_r>
 800a9aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9ac:	07da      	lsls	r2, r3, #31
 800a9ae:	4605      	mov	r5, r0
 800a9b0:	d4e4      	bmi.n	800a97c <_fflush_r+0xc>
 800a9b2:	89a3      	ldrh	r3, [r4, #12]
 800a9b4:	059b      	lsls	r3, r3, #22
 800a9b6:	d4e1      	bmi.n	800a97c <_fflush_r+0xc>
 800a9b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9ba:	f7fe fb35 	bl	8009028 <__retarget_lock_release_recursive>
 800a9be:	e7dd      	b.n	800a97c <_fflush_r+0xc>

0800a9c0 <__swhatbuf_r>:
 800a9c0:	b570      	push	{r4, r5, r6, lr}
 800a9c2:	460c      	mov	r4, r1
 800a9c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9c8:	2900      	cmp	r1, #0
 800a9ca:	b096      	sub	sp, #88	@ 0x58
 800a9cc:	4615      	mov	r5, r2
 800a9ce:	461e      	mov	r6, r3
 800a9d0:	da0d      	bge.n	800a9ee <__swhatbuf_r+0x2e>
 800a9d2:	89a3      	ldrh	r3, [r4, #12]
 800a9d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a9d8:	f04f 0100 	mov.w	r1, #0
 800a9dc:	bf14      	ite	ne
 800a9de:	2340      	movne	r3, #64	@ 0x40
 800a9e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	6031      	str	r1, [r6, #0]
 800a9e8:	602b      	str	r3, [r5, #0]
 800a9ea:	b016      	add	sp, #88	@ 0x58
 800a9ec:	bd70      	pop	{r4, r5, r6, pc}
 800a9ee:	466a      	mov	r2, sp
 800a9f0:	f000 f848 	bl	800aa84 <_fstat_r>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	dbec      	blt.n	800a9d2 <__swhatbuf_r+0x12>
 800a9f8:	9901      	ldr	r1, [sp, #4]
 800a9fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a9fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aa02:	4259      	negs	r1, r3
 800aa04:	4159      	adcs	r1, r3
 800aa06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa0a:	e7eb      	b.n	800a9e4 <__swhatbuf_r+0x24>

0800aa0c <__smakebuf_r>:
 800aa0c:	898b      	ldrh	r3, [r1, #12]
 800aa0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa10:	079d      	lsls	r5, r3, #30
 800aa12:	4606      	mov	r6, r0
 800aa14:	460c      	mov	r4, r1
 800aa16:	d507      	bpl.n	800aa28 <__smakebuf_r+0x1c>
 800aa18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	6123      	str	r3, [r4, #16]
 800aa20:	2301      	movs	r3, #1
 800aa22:	6163      	str	r3, [r4, #20]
 800aa24:	b003      	add	sp, #12
 800aa26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa28:	ab01      	add	r3, sp, #4
 800aa2a:	466a      	mov	r2, sp
 800aa2c:	f7ff ffc8 	bl	800a9c0 <__swhatbuf_r>
 800aa30:	9f00      	ldr	r7, [sp, #0]
 800aa32:	4605      	mov	r5, r0
 800aa34:	4639      	mov	r1, r7
 800aa36:	4630      	mov	r0, r6
 800aa38:	f7ff f9c6 	bl	8009dc8 <_malloc_r>
 800aa3c:	b948      	cbnz	r0, 800aa52 <__smakebuf_r+0x46>
 800aa3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa42:	059a      	lsls	r2, r3, #22
 800aa44:	d4ee      	bmi.n	800aa24 <__smakebuf_r+0x18>
 800aa46:	f023 0303 	bic.w	r3, r3, #3
 800aa4a:	f043 0302 	orr.w	r3, r3, #2
 800aa4e:	81a3      	strh	r3, [r4, #12]
 800aa50:	e7e2      	b.n	800aa18 <__smakebuf_r+0xc>
 800aa52:	89a3      	ldrh	r3, [r4, #12]
 800aa54:	6020      	str	r0, [r4, #0]
 800aa56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa5a:	81a3      	strh	r3, [r4, #12]
 800aa5c:	9b01      	ldr	r3, [sp, #4]
 800aa5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aa62:	b15b      	cbz	r3, 800aa7c <__smakebuf_r+0x70>
 800aa64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa68:	4630      	mov	r0, r6
 800aa6a:	f000 f81d 	bl	800aaa8 <_isatty_r>
 800aa6e:	b128      	cbz	r0, 800aa7c <__smakebuf_r+0x70>
 800aa70:	89a3      	ldrh	r3, [r4, #12]
 800aa72:	f023 0303 	bic.w	r3, r3, #3
 800aa76:	f043 0301 	orr.w	r3, r3, #1
 800aa7a:	81a3      	strh	r3, [r4, #12]
 800aa7c:	89a3      	ldrh	r3, [r4, #12]
 800aa7e:	431d      	orrs	r5, r3
 800aa80:	81a5      	strh	r5, [r4, #12]
 800aa82:	e7cf      	b.n	800aa24 <__smakebuf_r+0x18>

0800aa84 <_fstat_r>:
 800aa84:	b538      	push	{r3, r4, r5, lr}
 800aa86:	4d07      	ldr	r5, [pc, #28]	@ (800aaa4 <_fstat_r+0x20>)
 800aa88:	2300      	movs	r3, #0
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	4608      	mov	r0, r1
 800aa8e:	4611      	mov	r1, r2
 800aa90:	602b      	str	r3, [r5, #0]
 800aa92:	f7f7 f92f 	bl	8001cf4 <_fstat>
 800aa96:	1c43      	adds	r3, r0, #1
 800aa98:	d102      	bne.n	800aaa0 <_fstat_r+0x1c>
 800aa9a:	682b      	ldr	r3, [r5, #0]
 800aa9c:	b103      	cbz	r3, 800aaa0 <_fstat_r+0x1c>
 800aa9e:	6023      	str	r3, [r4, #0]
 800aaa0:	bd38      	pop	{r3, r4, r5, pc}
 800aaa2:	bf00      	nop
 800aaa4:	20004dd8 	.word	0x20004dd8

0800aaa8 <_isatty_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	4d06      	ldr	r5, [pc, #24]	@ (800aac4 <_isatty_r+0x1c>)
 800aaac:	2300      	movs	r3, #0
 800aaae:	4604      	mov	r4, r0
 800aab0:	4608      	mov	r0, r1
 800aab2:	602b      	str	r3, [r5, #0]
 800aab4:	f7f7 f8cc 	bl	8001c50 <_isatty>
 800aab8:	1c43      	adds	r3, r0, #1
 800aaba:	d102      	bne.n	800aac2 <_isatty_r+0x1a>
 800aabc:	682b      	ldr	r3, [r5, #0]
 800aabe:	b103      	cbz	r3, 800aac2 <_isatty_r+0x1a>
 800aac0:	6023      	str	r3, [r4, #0]
 800aac2:	bd38      	pop	{r3, r4, r5, pc}
 800aac4:	20004dd8 	.word	0x20004dd8

0800aac8 <_sbrk_r>:
 800aac8:	b538      	push	{r3, r4, r5, lr}
 800aaca:	4d06      	ldr	r5, [pc, #24]	@ (800aae4 <_sbrk_r+0x1c>)
 800aacc:	2300      	movs	r3, #0
 800aace:	4604      	mov	r4, r0
 800aad0:	4608      	mov	r0, r1
 800aad2:	602b      	str	r3, [r5, #0]
 800aad4:	f7f8 fb54 	bl	8003180 <_sbrk>
 800aad8:	1c43      	adds	r3, r0, #1
 800aada:	d102      	bne.n	800aae2 <_sbrk_r+0x1a>
 800aadc:	682b      	ldr	r3, [r5, #0]
 800aade:	b103      	cbz	r3, 800aae2 <_sbrk_r+0x1a>
 800aae0:	6023      	str	r3, [r4, #0]
 800aae2:	bd38      	pop	{r3, r4, r5, pc}
 800aae4:	20004dd8 	.word	0x20004dd8

0800aae8 <__assert_func>:
 800aae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aaea:	4614      	mov	r4, r2
 800aaec:	461a      	mov	r2, r3
 800aaee:	4b09      	ldr	r3, [pc, #36]	@ (800ab14 <__assert_func+0x2c>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4605      	mov	r5, r0
 800aaf4:	68d8      	ldr	r0, [r3, #12]
 800aaf6:	b954      	cbnz	r4, 800ab0e <__assert_func+0x26>
 800aaf8:	4b07      	ldr	r3, [pc, #28]	@ (800ab18 <__assert_func+0x30>)
 800aafa:	461c      	mov	r4, r3
 800aafc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab00:	9100      	str	r1, [sp, #0]
 800ab02:	462b      	mov	r3, r5
 800ab04:	4905      	ldr	r1, [pc, #20]	@ (800ab1c <__assert_func+0x34>)
 800ab06:	f000 f841 	bl	800ab8c <fiprintf>
 800ab0a:	f000 f851 	bl	800abb0 <abort>
 800ab0e:	4b04      	ldr	r3, [pc, #16]	@ (800ab20 <__assert_func+0x38>)
 800ab10:	e7f4      	b.n	800aafc <__assert_func+0x14>
 800ab12:	bf00      	nop
 800ab14:	20002f90 	.word	0x20002f90
 800ab18:	0801d1d6 	.word	0x0801d1d6
 800ab1c:	0801d1a8 	.word	0x0801d1a8
 800ab20:	0801d19b 	.word	0x0801d19b

0800ab24 <_calloc_r>:
 800ab24:	b570      	push	{r4, r5, r6, lr}
 800ab26:	fba1 5402 	umull	r5, r4, r1, r2
 800ab2a:	b93c      	cbnz	r4, 800ab3c <_calloc_r+0x18>
 800ab2c:	4629      	mov	r1, r5
 800ab2e:	f7ff f94b 	bl	8009dc8 <_malloc_r>
 800ab32:	4606      	mov	r6, r0
 800ab34:	b928      	cbnz	r0, 800ab42 <_calloc_r+0x1e>
 800ab36:	2600      	movs	r6, #0
 800ab38:	4630      	mov	r0, r6
 800ab3a:	bd70      	pop	{r4, r5, r6, pc}
 800ab3c:	220c      	movs	r2, #12
 800ab3e:	6002      	str	r2, [r0, #0]
 800ab40:	e7f9      	b.n	800ab36 <_calloc_r+0x12>
 800ab42:	462a      	mov	r2, r5
 800ab44:	4621      	mov	r1, r4
 800ab46:	f7fe f9f1 	bl	8008f2c <memset>
 800ab4a:	e7f5      	b.n	800ab38 <_calloc_r+0x14>

0800ab4c <__ascii_mbtowc>:
 800ab4c:	b082      	sub	sp, #8
 800ab4e:	b901      	cbnz	r1, 800ab52 <__ascii_mbtowc+0x6>
 800ab50:	a901      	add	r1, sp, #4
 800ab52:	b142      	cbz	r2, 800ab66 <__ascii_mbtowc+0x1a>
 800ab54:	b14b      	cbz	r3, 800ab6a <__ascii_mbtowc+0x1e>
 800ab56:	7813      	ldrb	r3, [r2, #0]
 800ab58:	600b      	str	r3, [r1, #0]
 800ab5a:	7812      	ldrb	r2, [r2, #0]
 800ab5c:	1e10      	subs	r0, r2, #0
 800ab5e:	bf18      	it	ne
 800ab60:	2001      	movne	r0, #1
 800ab62:	b002      	add	sp, #8
 800ab64:	4770      	bx	lr
 800ab66:	4610      	mov	r0, r2
 800ab68:	e7fb      	b.n	800ab62 <__ascii_mbtowc+0x16>
 800ab6a:	f06f 0001 	mvn.w	r0, #1
 800ab6e:	e7f8      	b.n	800ab62 <__ascii_mbtowc+0x16>

0800ab70 <__ascii_wctomb>:
 800ab70:	4603      	mov	r3, r0
 800ab72:	4608      	mov	r0, r1
 800ab74:	b141      	cbz	r1, 800ab88 <__ascii_wctomb+0x18>
 800ab76:	2aff      	cmp	r2, #255	@ 0xff
 800ab78:	d904      	bls.n	800ab84 <__ascii_wctomb+0x14>
 800ab7a:	228a      	movs	r2, #138	@ 0x8a
 800ab7c:	601a      	str	r2, [r3, #0]
 800ab7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab82:	4770      	bx	lr
 800ab84:	700a      	strb	r2, [r1, #0]
 800ab86:	2001      	movs	r0, #1
 800ab88:	4770      	bx	lr
	...

0800ab8c <fiprintf>:
 800ab8c:	b40e      	push	{r1, r2, r3}
 800ab8e:	b503      	push	{r0, r1, lr}
 800ab90:	4601      	mov	r1, r0
 800ab92:	ab03      	add	r3, sp, #12
 800ab94:	4805      	ldr	r0, [pc, #20]	@ (800abac <fiprintf+0x20>)
 800ab96:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab9a:	6800      	ldr	r0, [r0, #0]
 800ab9c:	9301      	str	r3, [sp, #4]
 800ab9e:	f7ff fd4b 	bl	800a638 <_vfiprintf_r>
 800aba2:	b002      	add	sp, #8
 800aba4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aba8:	b003      	add	sp, #12
 800abaa:	4770      	bx	lr
 800abac:	20002f90 	.word	0x20002f90

0800abb0 <abort>:
 800abb0:	b508      	push	{r3, lr}
 800abb2:	2006      	movs	r0, #6
 800abb4:	f000 f82c 	bl	800ac10 <raise>
 800abb8:	2001      	movs	r0, #1
 800abba:	f000 f855 	bl	800ac68 <_exit>

0800abbe <_raise_r>:
 800abbe:	291f      	cmp	r1, #31
 800abc0:	b538      	push	{r3, r4, r5, lr}
 800abc2:	4605      	mov	r5, r0
 800abc4:	460c      	mov	r4, r1
 800abc6:	d904      	bls.n	800abd2 <_raise_r+0x14>
 800abc8:	2316      	movs	r3, #22
 800abca:	6003      	str	r3, [r0, #0]
 800abcc:	f04f 30ff 	mov.w	r0, #4294967295
 800abd0:	bd38      	pop	{r3, r4, r5, pc}
 800abd2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800abd4:	b112      	cbz	r2, 800abdc <_raise_r+0x1e>
 800abd6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abda:	b94b      	cbnz	r3, 800abf0 <_raise_r+0x32>
 800abdc:	4628      	mov	r0, r5
 800abde:	f000 f831 	bl	800ac44 <_getpid_r>
 800abe2:	4622      	mov	r2, r4
 800abe4:	4601      	mov	r1, r0
 800abe6:	4628      	mov	r0, r5
 800abe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abec:	f000 b818 	b.w	800ac20 <_kill_r>
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d00a      	beq.n	800ac0a <_raise_r+0x4c>
 800abf4:	1c59      	adds	r1, r3, #1
 800abf6:	d103      	bne.n	800ac00 <_raise_r+0x42>
 800abf8:	2316      	movs	r3, #22
 800abfa:	6003      	str	r3, [r0, #0]
 800abfc:	2001      	movs	r0, #1
 800abfe:	e7e7      	b.n	800abd0 <_raise_r+0x12>
 800ac00:	2100      	movs	r1, #0
 800ac02:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ac06:	4620      	mov	r0, r4
 800ac08:	4798      	blx	r3
 800ac0a:	2000      	movs	r0, #0
 800ac0c:	e7e0      	b.n	800abd0 <_raise_r+0x12>
	...

0800ac10 <raise>:
 800ac10:	4b02      	ldr	r3, [pc, #8]	@ (800ac1c <raise+0xc>)
 800ac12:	4601      	mov	r1, r0
 800ac14:	6818      	ldr	r0, [r3, #0]
 800ac16:	f7ff bfd2 	b.w	800abbe <_raise_r>
 800ac1a:	bf00      	nop
 800ac1c:	20002f90 	.word	0x20002f90

0800ac20 <_kill_r>:
 800ac20:	b538      	push	{r3, r4, r5, lr}
 800ac22:	4d07      	ldr	r5, [pc, #28]	@ (800ac40 <_kill_r+0x20>)
 800ac24:	2300      	movs	r3, #0
 800ac26:	4604      	mov	r4, r0
 800ac28:	4608      	mov	r0, r1
 800ac2a:	4611      	mov	r1, r2
 800ac2c:	602b      	str	r3, [r5, #0]
 800ac2e:	f000 f813 	bl	800ac58 <_kill>
 800ac32:	1c43      	adds	r3, r0, #1
 800ac34:	d102      	bne.n	800ac3c <_kill_r+0x1c>
 800ac36:	682b      	ldr	r3, [r5, #0]
 800ac38:	b103      	cbz	r3, 800ac3c <_kill_r+0x1c>
 800ac3a:	6023      	str	r3, [r4, #0]
 800ac3c:	bd38      	pop	{r3, r4, r5, pc}
 800ac3e:	bf00      	nop
 800ac40:	20004dd8 	.word	0x20004dd8

0800ac44 <_getpid_r>:
 800ac44:	f000 b800 	b.w	800ac48 <_getpid>

0800ac48 <_getpid>:
 800ac48:	4b02      	ldr	r3, [pc, #8]	@ (800ac54 <_getpid+0xc>)
 800ac4a:	2258      	movs	r2, #88	@ 0x58
 800ac4c:	601a      	str	r2, [r3, #0]
 800ac4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac52:	4770      	bx	lr
 800ac54:	20004dd8 	.word	0x20004dd8

0800ac58 <_kill>:
 800ac58:	4b02      	ldr	r3, [pc, #8]	@ (800ac64 <_kill+0xc>)
 800ac5a:	2258      	movs	r2, #88	@ 0x58
 800ac5c:	601a      	str	r2, [r3, #0]
 800ac5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac62:	4770      	bx	lr
 800ac64:	20004dd8 	.word	0x20004dd8

0800ac68 <_exit>:
 800ac68:	e7fe      	b.n	800ac68 <_exit>
	...

0800ac6c <_init>:
 800ac6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6e:	bf00      	nop
 800ac70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac72:	bc08      	pop	{r3}
 800ac74:	469e      	mov	lr, r3
 800ac76:	4770      	bx	lr

0800ac78 <_fini>:
 800ac78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac7a:	bf00      	nop
 800ac7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac7e:	bc08      	pop	{r3}
 800ac80:	469e      	mov	lr, r3
 800ac82:	4770      	bx	lr
