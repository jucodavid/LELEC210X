
hands_on_main_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000adac  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000126fc  0800af60  0800af60  0000bf60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d65c  0801d65c  00021dd4  2**0
                  CONTENTS
  4 .ARM          00000008  0801d65c  0801d65c  0001e65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d664  0801d664  00021dd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d664  0801d664  0001e664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d668  0801d668  0001e668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002dd4  20000000  0801d66c  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d00  20002dd8  08020440  00021dd8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004ad8  08020440  00022ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021dd4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000430f4  00000000  00000000  00021e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007c3e  00000000  00000000  00064ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000189dd  00000000  00000000  0006cb36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a8  00000000  00000000  00085518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002cca  00000000  00000000  00086dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000312a1  00000000  00000000  00089a8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003b337  00000000  00000000  000bad2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012478c  00000000  00000000  000f6062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  0021a7ee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005938  00000000  00000000  0021a8ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  002201e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00009bbe  00000000  00000000  00220245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000012b0  00000000  00000000  00229e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20002dd8 	.word	0x20002dd8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800af44 	.word	0x0800af44

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20002ddc 	.word	0x20002ddc
 80001ec:	0800af44 	.word	0x0800af44

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b988 	b.w	8000ef0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	468e      	mov	lr, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	4688      	mov	r8, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d962      	bls.n	8000cd4 <__udivmoddi4+0xdc>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	b14e      	cbz	r6, 8000c28 <__udivmoddi4+0x30>
 8000c14:	f1c6 0320 	rsb	r3, r6, #32
 8000c18:	fa01 f806 	lsl.w	r8, r1, r6
 8000c1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c20:	40b7      	lsls	r7, r6
 8000c22:	ea43 0808 	orr.w	r8, r3, r8
 8000c26:	40b4      	lsls	r4, r6
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c34:	0c23      	lsrs	r3, r4, #16
 8000c36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c4c:	f080 80ea 	bcs.w	8000e24 <__udivmoddi4+0x22c>
 8000c50:	429a      	cmp	r2, r3
 8000c52:	f240 80e7 	bls.w	8000e24 <__udivmoddi4+0x22c>
 8000c56:	3902      	subs	r1, #2
 8000c58:	443b      	add	r3, r7
 8000c5a:	1a9a      	subs	r2, r3, r2
 8000c5c:	b2a3      	uxth	r3, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6e:	459c      	cmp	ip, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c78:	f080 80d6 	bcs.w	8000e28 <__udivmoddi4+0x230>
 8000c7c:	459c      	cmp	ip, r3
 8000c7e:	f240 80d3 	bls.w	8000e28 <__udivmoddi4+0x230>
 8000c82:	443b      	add	r3, r7
 8000c84:	3802      	subs	r0, #2
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	eba3 030c 	sub.w	r3, r3, ip
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40f3      	lsrs	r3, r6
 8000c94:	2200      	movs	r2, #0
 8000c96:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xb6>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb0>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d146      	bne.n	8000d44 <__udivmoddi4+0x14c>
 8000cb6:	4573      	cmp	r3, lr
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xc8>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 8105 	bhi.w	8000eca <__udivmoddi4+0x2d2>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	4690      	mov	r8, r2
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e5      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cce:	e9c5 4800 	strd	r4, r8, [r5]
 8000cd2:	e7e2      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f000 8090 	beq.w	8000dfa <__udivmoddi4+0x202>
 8000cda:	fab2 f682 	clz	r6, r2
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	f040 80a4 	bne.w	8000e2c <__udivmoddi4+0x234>
 8000ce4:	1a8a      	subs	r2, r1, r2
 8000ce6:	0c03      	lsrs	r3, r0, #16
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	b280      	uxth	r0, r0
 8000cee:	b2bc      	uxth	r4, r7
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cf6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x11e>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x11c>
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	f200 80e0 	bhi.w	8000ed4 <__udivmoddi4+0x2dc>
 8000d14:	46c4      	mov	ip, r8
 8000d16:	1a9b      	subs	r3, r3, r2
 8000d18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d24:	fb02 f404 	mul.w	r4, r2, r4
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x144>
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x142>
 8000d34:	429c      	cmp	r4, r3
 8000d36:	f200 80ca 	bhi.w	8000ece <__udivmoddi4+0x2d6>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	1b1b      	subs	r3, r3, r4
 8000d3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d42:	e7a5      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d44:	f1c1 0620 	rsb	r6, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4e:	431f      	orrs	r7, r3
 8000d50:	fa0e f401 	lsl.w	r4, lr, r1
 8000d54:	fa20 f306 	lsr.w	r3, r0, r6
 8000d58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	fa1f fc87 	uxth.w	ip, r7
 8000d6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x1a0>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d8a:	f080 809c 	bcs.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f240 8099 	bls.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d94:	3802      	subs	r0, #2
 8000d96:	443c      	add	r4, r7
 8000d98:	eba4 040e 	sub.w	r4, r4, lr
 8000d9c:	fa1f fe83 	uxth.w	lr, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db0:	45a4      	cmp	ip, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1ce>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dba:	f080 8082 	bcs.w	8000ec2 <__udivmoddi4+0x2ca>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d97f      	bls.n	8000ec2 <__udivmoddi4+0x2ca>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	443c      	add	r4, r7
 8000dc6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dca:	eba4 040c 	sub.w	r4, r4, ip
 8000dce:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	4673      	mov	r3, lr
 8000dd6:	46e1      	mov	r9, ip
 8000dd8:	d362      	bcc.n	8000ea0 <__udivmoddi4+0x2a8>
 8000dda:	d05f      	beq.n	8000e9c <__udivmoddi4+0x2a4>
 8000ddc:	b15d      	cbz	r5, 8000df6 <__udivmoddi4+0x1fe>
 8000dde:	ebb8 0203 	subs.w	r2, r8, r3
 8000de2:	eb64 0409 	sbc.w	r4, r4, r9
 8000de6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dea:	fa22 f301 	lsr.w	r3, r2, r1
 8000dee:	431e      	orrs	r6, r3
 8000df0:	40cc      	lsrs	r4, r1
 8000df2:	e9c5 6400 	strd	r6, r4, [r5]
 8000df6:	2100      	movs	r1, #0
 8000df8:	e74f      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000dfa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dfe:	0c01      	lsrs	r1, r0, #16
 8000e00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e04:	b280      	uxth	r0, r0
 8000e06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	463c      	mov	r4, r7
 8000e10:	46b8      	mov	r8, r7
 8000e12:	46be      	mov	lr, r7
 8000e14:	2620      	movs	r6, #32
 8000e16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e1a:	eba2 0208 	sub.w	r2, r2, r8
 8000e1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e22:	e766      	b.n	8000cf2 <__udivmoddi4+0xfa>
 8000e24:	4601      	mov	r1, r0
 8000e26:	e718      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e72c      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000e2c:	f1c6 0220 	rsb	r2, r6, #32
 8000e30:	fa2e f302 	lsr.w	r3, lr, r2
 8000e34:	40b7      	lsls	r7, r6
 8000e36:	40b1      	lsls	r1, r6
 8000e38:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e40:	430a      	orrs	r2, r1
 8000e42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e46:	b2bc      	uxth	r4, r7
 8000e48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb08 f904 	mul.w	r9, r8, r4
 8000e56:	40b0      	lsls	r0, r6
 8000e58:	4589      	cmp	r9, r1
 8000e5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e5e:	b280      	uxth	r0, r0
 8000e60:	d93e      	bls.n	8000ee0 <__udivmoddi4+0x2e8>
 8000e62:	1879      	adds	r1, r7, r1
 8000e64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e68:	d201      	bcs.n	8000e6e <__udivmoddi4+0x276>
 8000e6a:	4589      	cmp	r9, r1
 8000e6c:	d81f      	bhi.n	8000eae <__udivmoddi4+0x2b6>
 8000e6e:	eba1 0109 	sub.w	r1, r1, r9
 8000e72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e76:	fb09 f804 	mul.w	r8, r9, r4
 8000e7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e84:	4542      	cmp	r2, r8
 8000e86:	d229      	bcs.n	8000edc <__udivmoddi4+0x2e4>
 8000e88:	18ba      	adds	r2, r7, r2
 8000e8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e8e:	d2c4      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e90:	4542      	cmp	r2, r8
 8000e92:	d2c2      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e94:	f1a9 0102 	sub.w	r1, r9, #2
 8000e98:	443a      	add	r2, r7
 8000e9a:	e7be      	b.n	8000e1a <__udivmoddi4+0x222>
 8000e9c:	45f0      	cmp	r8, lr
 8000e9e:	d29d      	bcs.n	8000ddc <__udivmoddi4+0x1e4>
 8000ea0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ea4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	46e1      	mov	r9, ip
 8000eac:	e796      	b.n	8000ddc <__udivmoddi4+0x1e4>
 8000eae:	eba7 0909 	sub.w	r9, r7, r9
 8000eb2:	4449      	add	r1, r9
 8000eb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000eb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ebc:	fb09 f804 	mul.w	r8, r9, r4
 8000ec0:	e7db      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ec2:	4673      	mov	r3, lr
 8000ec4:	e77f      	b.n	8000dc6 <__udivmoddi4+0x1ce>
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	e766      	b.n	8000d98 <__udivmoddi4+0x1a0>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e6fd      	b.n	8000cca <__udivmoddi4+0xd2>
 8000ece:	443b      	add	r3, r7
 8000ed0:	3a02      	subs	r2, #2
 8000ed2:	e733      	b.n	8000d3c <__udivmoddi4+0x144>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	443b      	add	r3, r7
 8000eda:	e71c      	b.n	8000d16 <__udivmoddi4+0x11e>
 8000edc:	4649      	mov	r1, r9
 8000ede:	e79c      	b.n	8000e1a <__udivmoddi4+0x222>
 8000ee0:	eba1 0109 	sub.w	r1, r1, r9
 8000ee4:	46c4      	mov	ip, r8
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fb09 f804 	mul.w	r8, r9, r4
 8000eee:	e7c4      	b.n	8000e7a <__udivmoddi4+0x282>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ef4:	b510      	push	{r4, lr}

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ef6:	4826      	ldr	r0, [pc, #152]	@ (8000f90 <MX_ADC1_Init+0x9c>)
 8000ef8:	4a26      	ldr	r2, [pc, #152]	@ (8000f94 <MX_ADC1_Init+0xa0>)
{
 8000efa:	b08a      	sub	sp, #40	@ 0x28
  hadc1.Instance = ADC1;
 8000efc:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000efe:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
  ADC_MultiModeTypeDef multimode = {0};
 8000f02:	2300      	movs	r3, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000f04:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f06:	2204      	movs	r2, #4
 8000f08:	e9c0 3204 	strd	r3, r2, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 8000f0c:	2201      	movs	r2, #1
  ADC_MultiModeTypeDef multimode = {0};
 8000f0e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f12:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000f16:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000f1a:	e9cd 3307 	strd	r3, r3, [sp, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f22:	9309      	str	r3, [sp, #36]	@ 0x24
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f24:	8303      	strh	r3, [r0, #24]
  hadc1.Init.NbrOfConversion = 1;
 8000f26:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f28:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f2c:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f30:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f32:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f36:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000f3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f3e:	e9c0 230a 	strd	r2, r3, [r0, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f42:	f002 f9f3 	bl	800332c <HAL_ADC_Init>
 8000f46:	b9c0      	cbnz	r0, 8000f7a <MX_ADC1_Init+0x86>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f48:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f4a:	4811      	ldr	r0, [pc, #68]	@ (8000f90 <MX_ADC1_Init+0x9c>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f4c:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f4e:	a901      	add	r1, sp, #4
 8000f50:	f002 ffbc 	bl	8003ecc <HAL_ADCEx_MultiModeConfigChannel>
 8000f54:	b9c0      	cbnz	r0, 8000f88 <MX_ADC1_Init+0x94>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f56:	4810      	ldr	r0, [pc, #64]	@ (8000f98 <MX_ADC1_Init+0xa4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f58:	2206      	movs	r2, #6
 8000f5a:	e9cd 0204 	strd	r0, r2, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f5e:	2300      	movs	r3, #0
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f60:	247f      	movs	r4, #127	@ 0x7f
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f62:	2204      	movs	r2, #4
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f64:	480a      	ldr	r0, [pc, #40]	@ (8000f90 <MX_ADC1_Init+0x9c>)
 8000f66:	a904      	add	r1, sp, #16
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f68:	e9cd 3406 	strd	r3, r4, [sp, #24]
  sConfig.Offset = 0;
 8000f6c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f70:	f002 fb06 	bl	8003580 <HAL_ADC_ConfigChannel>
 8000f74:	b920      	cbnz	r0, 8000f80 <MX_ADC1_Init+0x8c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f76:	b00a      	add	sp, #40	@ 0x28
 8000f78:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f7a:	f000 fc25 	bl	80017c8 <Error_Handler>
 8000f7e:	e7e3      	b.n	8000f48 <MX_ADC1_Init+0x54>
    Error_Handler();
 8000f80:	f000 fc22 	bl	80017c8 <Error_Handler>
}
 8000f84:	b00a      	add	sp, #40	@ 0x28
 8000f86:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f88:	f000 fc1e 	bl	80017c8 <Error_Handler>
 8000f8c:	e7e3      	b.n	8000f56 <MX_ADC1_Init+0x62>
 8000f8e:	bf00      	nop
 8000f90:	20002e3c 	.word	0x20002e3c
 8000f94:	50040000 	.word	0x50040000
 8000f98:	14f00020 	.word	0x14f00020

08000f9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f9c:	b570      	push	{r4, r5, r6, lr}
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	b0aa      	sub	sp, #168	@ 0xa8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa4:	228c      	movs	r2, #140	@ 0x8c
 8000fa6:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000fac:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000fb0:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb2:	f008 f923 	bl	80091fc <memset>
  if(adcHandle->Instance==ADC1)
 8000fb6:	4b27      	ldr	r3, [pc, #156]	@ (8001054 <HAL_ADC_MspInit+0xb8>)
 8000fb8:	6822      	ldr	r2, [r4, #0]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d001      	beq.n	8000fc2 <HAL_ADC_MspInit+0x26>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fbe:	b02a      	add	sp, #168	@ 0xa8
 8000fc0:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fc2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000fc6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fca:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fcc:	9207      	str	r2, [sp, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000fce:	9326      	str	r3, [sp, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd0:	f004 fb36 	bl	8005640 <HAL_RCCEx_PeriphCLKConfig>
 8000fd4:	2800      	cmp	r0, #0
 8000fd6:	d136      	bne.n	8001046 <HAL_ADC_MspInit+0xaa>
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <HAL_ADC_MspInit+0xbc>)
    hdma_adc1.Instance = DMA1_Channel1;
 8000fda:	4d20      	ldr	r5, [pc, #128]	@ (800105c <HAL_ADC_MspInit+0xc0>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fdc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fde:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000fe2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000fe4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fe6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8000fea:	9200      	str	r2, [sp, #0]
 8000fec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ff0:	f042 0201 	orr.w	r2, r2, #1
 8000ff4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff8:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001000:	2201      	movs	r2, #1
 8001002:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001008:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800100a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f003 fb3d 	bl	8004690 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001016:	4a12      	ldr	r2, [pc, #72]	@ (8001060 <HAL_ADC_MspInit+0xc4>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001018:	2380      	movs	r3, #128	@ 0x80
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800101a:	e9c5 2600 	strd	r2, r6, [r5]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800101e:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001020:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001024:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001028:	e9c5 2305 	strd	r2, r3, [r5, #20]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800102c:	4628      	mov	r0, r5
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800102e:	2320      	movs	r3, #32
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001030:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001034:	e9c5 3607 	strd	r3, r6, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001038:	f003 fa08 	bl	800444c <HAL_DMA_Init>
 800103c:	b930      	cbnz	r0, 800104c <HAL_ADC_MspInit+0xb0>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800103e:	6525      	str	r5, [r4, #80]	@ 0x50
 8001040:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8001042:	b02a      	add	sp, #168	@ 0xa8
 8001044:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001046:	f000 fbbf 	bl	80017c8 <Error_Handler>
 800104a:	e7c5      	b.n	8000fd8 <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 800104c:	f000 fbbc 	bl	80017c8 <Error_Handler>
 8001050:	e7f5      	b.n	800103e <HAL_ADC_MspInit+0xa2>
 8001052:	bf00      	nop
 8001054:	50040000 	.word	0x50040000
 8001058:	40021000 	.word	0x40021000
 800105c:	20002df4 	.word	0x20002df4
 8001060:	40020008 	.word	0x40020008

08001064 <send_spectrogram>:
		DEBUG_PRINT("Packet counter overflow.\r\n");
		Error_Handler();
	}
}

static void send_spectrogram() {
 8001064:	b510      	push	{r4, lr}
 8001066:	4b1b      	ldr	r3, [pc, #108]	@ (80010d4 <send_spectrogram+0x70>)
 8001068:	f5ad 7d4e 	sub.w	sp, sp, #824	@ 0x338
	for (size_t i=0; i<N_MELVECS; i++) {
 800106c:	46ec      	mov	ip, sp
 800106e:	2000      	movs	r0, #0
static void send_spectrogram() {
 8001070:	4662      	mov	r2, ip
 8001072:	f103 0e28 	add.w	lr, r3, #40	@ 0x28
			(packet+PACKET_HEADER_LENGTH)[(i*MELVEC_LENGTH+j)*2]   = mel_vectors[i][j] >> 8;
 8001076:	f933 1f02 	ldrsh.w	r1, [r3, #2]!
			(packet+PACKET_HEADER_LENGTH)[(i*MELVEC_LENGTH+j)*2+1] = mel_vectors[i][j] & 0xFF;
 800107a:	7251      	strb	r1, [r2, #9]
		for (size_t j=0; j<MELVEC_LENGTH; j++) {
 800107c:	4573      	cmp	r3, lr
			(packet+PACKET_HEADER_LENGTH)[(i*MELVEC_LENGTH+j)*2]   = mel_vectors[i][j] >> 8;
 800107e:	ea4f 2121 	mov.w	r1, r1, asr #8
 8001082:	7211      	strb	r1, [r2, #8]
		for (size_t j=0; j<MELVEC_LENGTH; j++) {
 8001084:	f102 0202 	add.w	r2, r2, #2
 8001088:	d1f5      	bne.n	8001076 <send_spectrogram+0x12>
	for (size_t i=0; i<N_MELVECS; i++) {
 800108a:	3014      	adds	r0, #20
 800108c:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8001090:	f10c 0c28 	add.w	ip, ip, #40	@ 0x28
 8001094:	d1ec      	bne.n	8001070 <send_spectrogram+0xc>
	make_packet(packet, PAYLOAD_LENGTH, 0, *packet_cnt);
 8001096:	4c10      	ldr	r4, [pc, #64]	@ (80010d8 <send_spectrogram+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80010a0:	4668      	mov	r0, sp
 80010a2:	f000 fcd3 	bl	8001a4c <make_packet>
	*packet_cnt += 1;
 80010a6:	6823      	ldr	r3, [r4, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	6023      	str	r3, [r4, #0]
	if (*packet_cnt == 0) {
 80010ac:	b163      	cbz	r3, 80010c8 <send_spectrogram+0x64>
//	start_cycle_count();
	encode_packet(packet, &packet_cnt);
//	stop_cycle_count("Encode packet");

//	start_cycle_count();
	S2LP_Send(packet, PACKET_LENGTH);
 80010ae:	f44f 714e 	mov.w	r1, #824	@ 0x338
 80010b2:	4668      	mov	r0, sp
 80010b4:	f000 fe54 	bl	8001d60 <S2LP_Send>
//	stop_cycle_count("Radio WFI");

	start_cycle_count();
 80010b8:	f002 f8b0 	bl	800321c <start_cycle_count>
	stop_cycle_count("Send packet");
 80010bc:	4807      	ldr	r0, [pc, #28]	@ (80010dc <send_spectrogram+0x78>)
 80010be:	f002 f8af 	bl	8003220 <stop_cycle_count>

//	print_encoded_packet(packet);
}
 80010c2:	f50d 7d4e 	add.w	sp, sp, #824	@ 0x338
 80010c6:	bd10      	pop	{r4, pc}
		DEBUG_PRINT("Packet counter overflow.\r\n");
 80010c8:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <send_spectrogram+0x7c>)
 80010ca:	f007 ff03 	bl	8008ed4 <puts>
		Error_Handler();
 80010ce:	f000 fb7b 	bl	80017c8 <Error_Handler>
 80010d2:	e7ec      	b.n	80010ae <send_spectrogram+0x4a>
 80010d4:	20002eae 	.word	0x20002eae
 80010d8:	20002eac 	.word	0x20002eac
 80010dc:	0800b220 	.word	0x0800b220
 80010e0:	0800b204 	.word	0x0800b204

080010e4 <StartADCAcq>:
int StartADCAcq(int32_t n_bufs) {
 80010e4:	b508      	push	{r3, lr}
	cur_melvec = 0;
 80010e6:	4a07      	ldr	r2, [pc, #28]	@ (8001104 <StartADCAcq+0x20>)
	rem_n_bufs = n_bufs;
 80010e8:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <StartADCAcq+0x24>)
	cur_melvec = 0;
 80010ea:	2100      	movs	r1, #0
	rem_n_bufs = n_bufs;
 80010ec:	6018      	str	r0, [r3, #0]
	cur_melvec = 0;
 80010ee:	7011      	strb	r1, [r2, #0]
	if (rem_n_bufs != 0) {
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	b900      	cbnz	r0, 80010f6 <StartADCAcq+0x12>
}
 80010f4:	bd08      	pop	{r3, pc}
		return HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADCDoubleBuf, 2*ADC_BUF_SIZE);
 80010f6:	4905      	ldr	r1, [pc, #20]	@ (800110c <StartADCAcq+0x28>)
 80010f8:	4805      	ldr	r0, [pc, #20]	@ (8001110 <StartADCAcq+0x2c>)
 80010fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010fe:	f002 fd9b 	bl	8003c38 <HAL_ADC_Start_DMA>
}
 8001102:	bd08      	pop	{r3, pc}
 8001104:	200031d0 	.word	0x200031d0
 8001108:	20002ea8 	.word	0x20002ea8
 800110c:	200031d8 	.word	0x200031d8
 8001110:	20002e3c 	.word	0x20002e3c

08001114 <IsADCFinished>:
	return (rem_n_bufs == 0);
 8001114:	4b02      	ldr	r3, [pc, #8]	@ (8001120 <IsADCFinished+0xc>)
 8001116:	6818      	ldr	r0, [r3, #0]
}
 8001118:	fab0 f080 	clz	r0, r0
 800111c:	0940      	lsrs	r0, r0, #5
 800111e:	4770      	bx	lr
 8001120:	20002ea8 	.word	0x20002ea8

08001124 <HAL_ADC_ConvCpltCallback>:
#error "Wrong value for EVENT_DETECTION."
#endif
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001124:	b570      	push	{r4, r5, r6, lr}
	if (in_routine == 0) {
 8001126:	4d29      	ldr	r5, [pc, #164]	@ (80011cc <HAL_ADC_ConvCpltCallback+0xa8>)
 8001128:	782b      	ldrb	r3, [r5, #0]
{
 800112a:	b082      	sub	sp, #8
	if (in_routine == 0) {
 800112c:	b9cb      	cbnz	r3, 8001162 <HAL_ADC_ConvCpltCallback+0x3e>
	q15_t max = 0;
 800112e:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
	arm_max_q15((q15_t *)ADCData[buf_cplt], SAMPLES_PER_MELVEC, &max, &ignored);
 8001132:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001136:	ab01      	add	r3, sp, #4
	q15_t max = 0;
 8001138:	f8ad 0002 	strh.w	r0, [sp, #2]
	uint32_t ignored = 0;
 800113c:	9001      	str	r0, [sp, #4]
	arm_max_q15((q15_t *)ADCData[buf_cplt], SAMPLES_PER_MELVEC, &max, &ignored);
 800113e:	f10d 0202 	add.w	r2, sp, #2
 8001142:	4823      	ldr	r0, [pc, #140]	@ (80011d0 <HAL_ADC_ConvCpltCallback+0xac>)
 8001144:	f005 ff0e 	bl	8006f64 <arm_max_q15>
	if (max > threshold) {
 8001148:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 800114c:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001150:	4299      	cmp	r1, r3
 8001152:	dc01      	bgt.n	8001158 <HAL_ADC_ConvCpltCallback+0x34>
	ADC_Callback(1);
}
 8001154:	b002      	add	sp, #8
 8001156:	bd70      	pop	{r4, r5, r6, pc}
		DEBUG_PRINT("Metric value in buffer is %" PRId16 ". Found an event, start the routine.\r\n",max);
 8001158:	481e      	ldr	r0, [pc, #120]	@ (80011d4 <HAL_ADC_ConvCpltCallback+0xb0>)
 800115a:	f007 fe53 	bl	8008e04 <iprintf>
			in_routine = 1;
 800115e:	2301      	movs	r3, #1
 8001160:	702b      	strb	r3, [r5, #0]
	if (rem_n_bufs != -1) {
 8001162:	4c1d      	ldr	r4, [pc, #116]	@ (80011d8 <HAL_ADC_ConvCpltCallback+0xb4>)
 8001164:	6823      	ldr	r3, [r4, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	d002      	beq.n	8001170 <HAL_ADC_ConvCpltCallback+0x4c>
			rem_n_bufs--;
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	3b01      	subs	r3, #1
 800116e:	6023      	str	r3, [r4, #0]
	if (rem_n_bufs == 0) {
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	b1fb      	cbz	r3, 80011b4 <HAL_ADC_ConvCpltCallback+0x90>
	} else if (ADCDataRdy[1-buf_cplt]) {
 8001174:	4e19      	ldr	r6, [pc, #100]	@ (80011dc <HAL_ADC_ConvCpltCallback+0xb8>)
 8001176:	7833      	ldrb	r3, [r6, #0]
 8001178:	bb13      	cbnz	r3, 80011c0 <HAL_ADC_ConvCpltCallback+0x9c>
	Spectrogram_Compute((q15_t *)ADCData[buf_cplt], mel_vectors[cur_melvec]);
 800117a:	4d19      	ldr	r5, [pc, #100]	@ (80011e0 <HAL_ADC_ConvCpltCallback+0xbc>)
	Spectrogram_Format((q15_t *)ADCData[buf_cplt]);
 800117c:	4814      	ldr	r0, [pc, #80]	@ (80011d0 <HAL_ADC_ConvCpltCallback+0xac>)
	ADCDataRdy[buf_cplt] = 1;
 800117e:	2301      	movs	r3, #1
 8001180:	7073      	strb	r3, [r6, #1]
	Spectrogram_Format((q15_t *)ADCData[buf_cplt]);
 8001182:	f001 fdc9 	bl	8002d18 <Spectrogram_Format>
	Spectrogram_Compute((q15_t *)ADCData[buf_cplt], mel_vectors[cur_melvec]);
 8001186:	782b      	ldrb	r3, [r5, #0]
 8001188:	4916      	ldr	r1, [pc, #88]	@ (80011e4 <HAL_ADC_ConvCpltCallback+0xc0>)
 800118a:	4811      	ldr	r0, [pc, #68]	@ (80011d0 <HAL_ADC_ConvCpltCallback+0xac>)
 800118c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001190:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8001194:	f001 fde2 	bl	8002d5c <Spectrogram_Compute>
	cur_melvec++;
 8001198:	782b      	ldrb	r3, [r5, #0]
 800119a:	3301      	adds	r3, #1
 800119c:	b2db      	uxtb	r3, r3
	ADCDataRdy[buf_cplt] = 0;
 800119e:	2200      	movs	r2, #0
	cur_melvec++;
 80011a0:	702b      	strb	r3, [r5, #0]
	ADCDataRdy[buf_cplt] = 0;
 80011a2:	7072      	strb	r2, [r6, #1]
	if (rem_n_bufs == 0) {
 80011a4:	6823      	ldr	r3, [r4, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1d4      	bne.n	8001154 <HAL_ADC_ConvCpltCallback+0x30>
}
 80011aa:	b002      	add	sp, #8
 80011ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		send_spectrogram();
 80011b0:	f7ff bf58 	b.w	8001064 <send_spectrogram>
	HAL_ADC_Stop_DMA(&hadc1);
 80011b4:	480c      	ldr	r0, [pc, #48]	@ (80011e8 <HAL_ADC_ConvCpltCallback+0xc4>)
		in_routine = 0;
 80011b6:	702b      	strb	r3, [r5, #0]
	HAL_ADC_Stop_DMA(&hadc1);
 80011b8:	4e08      	ldr	r6, [pc, #32]	@ (80011dc <HAL_ADC_ConvCpltCallback+0xb8>)
 80011ba:	f002 fdf3 	bl	8003da4 <HAL_ADC_Stop_DMA>
}
 80011be:	e7dc      	b.n	800117a <HAL_ADC_ConvCpltCallback+0x56>
		DEBUG_PRINT("Error: ADC Data buffer full\r\n");
 80011c0:	480a      	ldr	r0, [pc, #40]	@ (80011ec <HAL_ADC_ConvCpltCallback+0xc8>)
 80011c2:	f007 fe87 	bl	8008ed4 <puts>
		Error_Handler();
 80011c6:	f000 faff 	bl	80017c8 <Error_Handler>
 80011ca:	e7d6      	b.n	800117a <HAL_ADC_ConvCpltCallback+0x56>
 80011cc:	20002ea4 	.word	0x20002ea4
 80011d0:	200035d8 	.word	0x200035d8
 80011d4:	0800b22c 	.word	0x0800b22c
 80011d8:	20002ea8 	.word	0x20002ea8
 80011dc:	200031d4 	.word	0x200031d4
 80011e0:	200031d0 	.word	0x200031d0
 80011e4:	20002eb0 	.word	0x20002eb0
 80011e8:	20002e3c 	.word	0x20002e3c
 80011ec:	0800b270 	.word	0x0800b270

080011f0 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80011f0:	b570      	push	{r4, r5, r6, lr}
	if (in_routine == 0) {
 80011f2:	4d29      	ldr	r5, [pc, #164]	@ (8001298 <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 80011f4:	782b      	ldrb	r3, [r5, #0]
{
 80011f6:	b082      	sub	sp, #8
	if (in_routine == 0) {
 80011f8:	b9cb      	cbnz	r3, 800122e <HAL_ADC_ConvHalfCpltCallback+0x3e>
	q15_t max = 0;
 80011fa:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
	arm_max_q15((q15_t *)ADCData[buf_cplt], SAMPLES_PER_MELVEC, &max, &ignored);
 80011fe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001202:	ab01      	add	r3, sp, #4
	q15_t max = 0;
 8001204:	f8ad 0002 	strh.w	r0, [sp, #2]
	uint32_t ignored = 0;
 8001208:	9001      	str	r0, [sp, #4]
	arm_max_q15((q15_t *)ADCData[buf_cplt], SAMPLES_PER_MELVEC, &max, &ignored);
 800120a:	f10d 0202 	add.w	r2, sp, #2
 800120e:	4823      	ldr	r0, [pc, #140]	@ (800129c <HAL_ADC_ConvHalfCpltCallback+0xac>)
 8001210:	f005 fea8 	bl	8006f64 <arm_max_q15>
	if (max > threshold) {
 8001214:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8001218:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800121c:	4299      	cmp	r1, r3
 800121e:	dc01      	bgt.n	8001224 <HAL_ADC_ConvHalfCpltCallback+0x34>
	ADC_Callback(0);
}
 8001220:	b002      	add	sp, #8
 8001222:	bd70      	pop	{r4, r5, r6, pc}
		DEBUG_PRINT("Metric value in buffer is %" PRId16 ". Found an event, start the routine.\r\n",max);
 8001224:	481e      	ldr	r0, [pc, #120]	@ (80012a0 <HAL_ADC_ConvHalfCpltCallback+0xb0>)
 8001226:	f007 fded 	bl	8008e04 <iprintf>
			in_routine = 1;
 800122a:	2301      	movs	r3, #1
 800122c:	702b      	strb	r3, [r5, #0]
	if (rem_n_bufs != -1) {
 800122e:	4c1d      	ldr	r4, [pc, #116]	@ (80012a4 <HAL_ADC_ConvHalfCpltCallback+0xb4>)
 8001230:	6823      	ldr	r3, [r4, #0]
 8001232:	3301      	adds	r3, #1
 8001234:	d002      	beq.n	800123c <HAL_ADC_ConvHalfCpltCallback+0x4c>
			rem_n_bufs--;
 8001236:	6823      	ldr	r3, [r4, #0]
 8001238:	3b01      	subs	r3, #1
 800123a:	6023      	str	r3, [r4, #0]
	if (rem_n_bufs == 0) {
 800123c:	6823      	ldr	r3, [r4, #0]
 800123e:	b1fb      	cbz	r3, 8001280 <HAL_ADC_ConvHalfCpltCallback+0x90>
	} else if (ADCDataRdy[1-buf_cplt]) {
 8001240:	4e19      	ldr	r6, [pc, #100]	@ (80012a8 <HAL_ADC_ConvHalfCpltCallback+0xb8>)
 8001242:	7873      	ldrb	r3, [r6, #1]
 8001244:	bb13      	cbnz	r3, 800128c <HAL_ADC_ConvHalfCpltCallback+0x9c>
	Spectrogram_Compute((q15_t *)ADCData[buf_cplt], mel_vectors[cur_melvec]);
 8001246:	4d19      	ldr	r5, [pc, #100]	@ (80012ac <HAL_ADC_ConvHalfCpltCallback+0xbc>)
	Spectrogram_Format((q15_t *)ADCData[buf_cplt]);
 8001248:	4814      	ldr	r0, [pc, #80]	@ (800129c <HAL_ADC_ConvHalfCpltCallback+0xac>)
	ADCDataRdy[buf_cplt] = 1;
 800124a:	2301      	movs	r3, #1
 800124c:	7033      	strb	r3, [r6, #0]
	Spectrogram_Format((q15_t *)ADCData[buf_cplt]);
 800124e:	f001 fd63 	bl	8002d18 <Spectrogram_Format>
	Spectrogram_Compute((q15_t *)ADCData[buf_cplt], mel_vectors[cur_melvec]);
 8001252:	782b      	ldrb	r3, [r5, #0]
 8001254:	4916      	ldr	r1, [pc, #88]	@ (80012b0 <HAL_ADC_ConvHalfCpltCallback+0xc0>)
 8001256:	4811      	ldr	r0, [pc, #68]	@ (800129c <HAL_ADC_ConvHalfCpltCallback+0xac>)
 8001258:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800125c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8001260:	f001 fd7c 	bl	8002d5c <Spectrogram_Compute>
	cur_melvec++;
 8001264:	782b      	ldrb	r3, [r5, #0]
 8001266:	3301      	adds	r3, #1
 8001268:	b2db      	uxtb	r3, r3
	ADCDataRdy[buf_cplt] = 0;
 800126a:	2200      	movs	r2, #0
	cur_melvec++;
 800126c:	702b      	strb	r3, [r5, #0]
	ADCDataRdy[buf_cplt] = 0;
 800126e:	7032      	strb	r2, [r6, #0]
	if (rem_n_bufs == 0) {
 8001270:	6823      	ldr	r3, [r4, #0]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1d4      	bne.n	8001220 <HAL_ADC_ConvHalfCpltCallback+0x30>
}
 8001276:	b002      	add	sp, #8
 8001278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		send_spectrogram();
 800127c:	f7ff bef2 	b.w	8001064 <send_spectrogram>
	HAL_ADC_Stop_DMA(&hadc1);
 8001280:	480c      	ldr	r0, [pc, #48]	@ (80012b4 <HAL_ADC_ConvHalfCpltCallback+0xc4>)
		in_routine = 0;
 8001282:	702b      	strb	r3, [r5, #0]
	HAL_ADC_Stop_DMA(&hadc1);
 8001284:	4e08      	ldr	r6, [pc, #32]	@ (80012a8 <HAL_ADC_ConvHalfCpltCallback+0xb8>)
 8001286:	f002 fd8d 	bl	8003da4 <HAL_ADC_Stop_DMA>
}
 800128a:	e7dc      	b.n	8001246 <HAL_ADC_ConvHalfCpltCallback+0x56>
		DEBUG_PRINT("Error: ADC Data buffer full\r\n");
 800128c:	480a      	ldr	r0, [pc, #40]	@ (80012b8 <HAL_ADC_ConvHalfCpltCallback+0xc8>)
 800128e:	f007 fe21 	bl	8008ed4 <puts>
		Error_Handler();
 8001292:	f000 fa99 	bl	80017c8 <Error_Handler>
 8001296:	e7d6      	b.n	8001246 <HAL_ADC_ConvHalfCpltCallback+0x56>
 8001298:	20002ea4 	.word	0x20002ea4
 800129c:	200031d8 	.word	0x200031d8
 80012a0:	0800b22c 	.word	0x0800b22c
 80012a4:	20002ea8 	.word	0x20002ea8
 80012a8:	200031d4 	.word	0x200031d4
 80012ac:	200031d0 	.word	0x200031d0
 80012b0:	20002eb0 	.word	0x20002eb0
 80012b4:	20002e3c 	.word	0x20002e3c
 80012b8:	0800b270 	.word	0x0800b270
 80012bc:	00000000 	.word	0x00000000

080012c0 <MX_AES_Init>:
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 80012c0:	480f      	ldr	r0, [pc, #60]	@ (8001300 <MX_AES_Init+0x40>)
 80012c2:	4a10      	ldr	r2, [pc, #64]	@ (8001304 <MX_AES_Init+0x44>)
  hcryp.Init.DataType = CRYP_DATATYPE_32B;
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
  hcryp.Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
  hcryp.Init.ChainingMode = CRYP_CHAINMODE_AES_CBC;
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
  hcryp.Init.pKey = (uint8_t *)pKeyAES;
 80012c4:	4910      	ldr	r1, [pc, #64]	@ (8001308 <MX_AES_Init+0x48>)
{
 80012c6:	b508      	push	{r3, lr}
  hcryp.Init.DataType = CRYP_DATATYPE_32B;
 80012c8:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80012f8 <MX_AES_Init+0x38>
  hcryp.Init.pInitVect = (uint8_t *)pInitVectAES;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <MX_AES_Init+0x4c>)
 80012ce:	6243      	str	r3, [r0, #36]	@ 0x24
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 80012d0:	2300      	movs	r3, #0
  hcryp.Instance = AES;
 80012d2:	6002      	str	r2, [r0, #0]
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 80012d4:	6183      	str	r3, [r0, #24]
  hcryp.Init.DataType = CRYP_DATATYPE_32B;
 80012d6:	2200      	movs	r2, #0
 80012d8:	2320      	movs	r3, #32
 80012da:	ed80 7b02 	vstr	d7, [r0, #8]
 80012de:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hcryp.Init.pKey = (uint8_t *)pKeyAES;
 80012e2:	6201      	str	r1, [r0, #32]
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 80012e4:	f002 ff02 	bl	80040ec <HAL_CRYP_Init>
 80012e8:	b900      	cbnz	r0, 80012ec <MX_AES_Init+0x2c>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 80012ea:	bd08      	pop	{r3, pc}
 80012ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80012f0:	f000 ba6a 	b.w	80017c8 <Error_Handler>
 80012f4:	f3af 8000 	nop.w
	...
 8001300:	200039d8 	.word	0x200039d8
 8001304:	50060000 	.word	0x50060000
 8001308:	0800b428 	.word	0x0800b428
 800130c:	0800b418 	.word	0x0800b418

08001310 <HAL_CRYP_MspInit>:

void HAL_CRYP_MspInit(CRYP_HandleTypeDef* crypHandle)
{

  if(crypHandle->Instance==AES)
 8001310:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <HAL_CRYP_MspInit+0x2c>)
 8001312:	6802      	ldr	r2, [r0, #0]
 8001314:	429a      	cmp	r2, r3
 8001316:	d000      	beq.n	800131a <HAL_CRYP_MspInit+0xa>
 8001318:	4770      	bx	lr
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* AES clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 800131a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 800131e:	f5a3 337c 	sub.w	r3, r3, #258048	@ 0x3f000
{
 8001322:	b082      	sub	sp, #8
    __HAL_RCC_AES_CLK_ENABLE();
 8001324:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001326:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800132a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800132c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001332:	9301      	str	r3, [sp, #4]
 8001334:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }
}
 8001336:	b002      	add	sp, #8
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	50060000 	.word	0x50060000

08001340 <arm_absmax_q15>:
void arm_absmax_q15(
  const q15_t * pSrc,
        uint32_t blockSize,
        q15_t * pResult,
        uint32_t * pIndex)
{
 8001340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        uint32_t index;                                /* index of maximum value */                         \
                                                                                                            \
  /* Initialize index value to zero. */                                                                     \
  outIndex = 0U;                                                                                            \
  /* Load first input value that act as reference value for comparision */                                  \
  out = *pSrc++;                                                                                            \
 8001344:	4680      	mov	r8, r0
 8001346:	f938 cb02 	ldrsh.w	ip, [r8], #2
  out = (out > 0) ? out : (q15_t)__QSUB16(0, out);                                                                           \
 800134a:	f1bc 0f00 	cmp.w	ip, #0
 800134e:	dc04      	bgt.n	800135a <arm_absmax_q15+0x1a>

__STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001350:	2400      	movs	r4, #0
 8001352:	fad4 f41c 	qsub16	r4, r4, ip
 8001356:	fa0f fc84 	sxth.w	ip, r4
  /* Initialize index of extrema value. */                                                                  \
  index = 0U;                                                                                               \
                                                                                                            \
  /* Loop unrolling: Compute 4 outputs at a time */                                                         \
  blkCnt = (blockSize - 1U) >> 2U;                                                                          \
 800135a:	f101 39ff 	add.w	r9, r1, #4294967295
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 800135e:	ea5f 0a99 	movs.w	sl, r9, lsr #2
 8001362:	d07c      	beq.n	800145e <arm_absmax_q15+0x11e>
  index = 0U;                                                                                               \
 8001364:	2400      	movs	r4, #0
 8001366:	300a      	adds	r0, #10
 8001368:	ea4f 078a 	mov.w	r7, sl, lsl #2
  outIndex = 0U;                                                                                            \
 800136c:	4625      	mov	r5, r4
 800136e:	4626      	mov	r6, r4
  {                                                                                                         \
    /* Initialize cur_absmax to next consecutive values one by one */                                         \
    cur_absmax = *pSrc++;                                                                                     \
 8001370:	f930 ec08 	ldrsh.w	lr, [r0, #-8]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8001374:	f1be 0f00 	cmp.w	lr, #0
 8001378:	dc03      	bgt.n	8001382 <arm_absmax_q15+0x42>
 800137a:	fad6 fe1e 	qsub16	lr, r6, lr
 800137e:	fa0f fe8e 	sxth.w	lr, lr
    /* compare for the extrema value */                                                                     \
    if (cur_absmax > out)                                                                         \
 8001382:	45e6      	cmp	lr, ip
    {                                                                                                       \
      /* Update the extrema value and it's index */                                                         \
      out = cur_absmax;                                                                                       \
 8001384:	bfc8      	it	gt
 8001386:	46f4      	movgt	ip, lr
      outIndex = index + 1U;                                                                                \
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8001388:	f930 ec06 	ldrsh.w	lr, [r0, #-6]
      outIndex = index + 1U;                                                                                \
 800138c:	bfc8      	it	gt
 800138e:	1c65      	addgt	r5, r4, #1
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8001390:	f1be 0f00 	cmp.w	lr, #0
 8001394:	dc03      	bgt.n	800139e <arm_absmax_q15+0x5e>
 8001396:	fad6 fe1e 	qsub16	lr, r6, lr
 800139a:	fa0f fe8e 	sxth.w	lr, lr
    if (cur_absmax > out)                                                                         \
 800139e:	45f4      	cmp	ip, lr
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 80013a0:	bfb8      	it	lt
 80013a2:	46f4      	movlt	ip, lr
      outIndex = index + 2U;                                                                                \
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 80013a4:	f930 ec04 	ldrsh.w	lr, [r0, #-4]
      outIndex = index + 2U;                                                                                \
 80013a8:	bfb8      	it	lt
 80013aa:	1ca5      	addlt	r5, r4, #2
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 80013ac:	f1be 0f00 	cmp.w	lr, #0
 80013b0:	dc03      	bgt.n	80013ba <arm_absmax_q15+0x7a>
 80013b2:	fad6 fe1e 	qsub16	lr, r6, lr
 80013b6:	fa0f fe8e 	sxth.w	lr, lr
    if (cur_absmax > out)                                                                          \
 80013ba:	45f4      	cmp	ip, lr
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
      outIndex = index + 3U;                                                                                \
 80013bc:	bfa8      	it	ge
 80013be:	46e6      	movge	lr, ip
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 80013c0:	f930 cc02 	ldrsh.w	ip, [r0, #-2]
      outIndex = index + 3U;                                                                                \
 80013c4:	bfb8      	it	lt
 80013c6:	1ce5      	addlt	r5, r4, #3
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 80013c8:	f1bc 0f00 	cmp.w	ip, #0
 80013cc:	dc03      	bgt.n	80013d6 <arm_absmax_q15+0x96>
 80013ce:	fad6 fc1c 	qsub16	ip, r6, ip
 80013d2:	fa0f fc8c 	sxth.w	ip, ip
    if (cur_absmax > out)                                                                          \
 80013d6:	45e6      	cmp	lr, ip
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
      outIndex = index + 4U;                                                                                \
 80013d8:	f104 0404 	add.w	r4, r4, #4
    if (cur_absmax > out)                                                                          \
 80013dc:	bfac      	ite	ge
 80013de:	46f4      	movge	ip, lr
      outIndex = index + 4U;                                                                                \
 80013e0:	4625      	movlt	r5, r4
  while (blkCnt > 0U)                                                                                       \
 80013e2:	42bc      	cmp	r4, r7
 80013e4:	f100 0008 	add.w	r0, r0, #8
 80013e8:	d1c2      	bne.n	8001370 <arm_absmax_q15+0x30>
 80013ea:	eb08 08ca 	add.w	r8, r8, sl, lsl #3
                                                                                                            \
  /* Loop unrolling: Compute remaining outputs */                                                           \
  blkCnt = (blockSize - 1U) % 4U;                                                                           \
                                                                                                            \
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 80013ee:	f019 0403 	ands.w	r4, r9, #3
 80013f2:	d01f      	beq.n	8001434 <arm_absmax_q15+0xf4>
  {                                                                                                         \
    cur_absmax = *pSrc++;                                                                                     \
 80013f4:	f9b8 0000 	ldrsh.w	r0, [r8]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 80013f8:	2800      	cmp	r0, #0
 80013fa:	dd20      	ble.n	800143e <arm_absmax_q15+0xfe>
    if (cur_absmax > out)                                                                         \
 80013fc:	4560      	cmp	r0, ip
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 80013fe:	bfc4      	itt	gt
 8001400:	4684      	movgt	ip, r0
      outIndex = blockSize - blkCnt;                                                                        \
 8001402:	1b0d      	subgt	r5, r1, r4
  while (blkCnt > 0U)                                                                                       \
 8001404:	1e66      	subs	r6, r4, #1
 8001406:	d015      	beq.n	8001434 <arm_absmax_q15+0xf4>
    cur_absmax = *pSrc++;                                                                                     \
 8001408:	f9b8 0002 	ldrsh.w	r0, [r8, #2]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 800140c:	2800      	cmp	r0, #0
 800140e:	dd1b      	ble.n	8001448 <arm_absmax_q15+0x108>
    if (cur_absmax > out)                                                                         \
 8001410:	4584      	cmp	ip, r0
      outIndex = blockSize - blkCnt;                                                                        \
 8001412:	bfbc      	itt	lt
 8001414:	1b8d      	sublt	r5, r1, r6
      out = cur_absmax;                                                                                       \
 8001416:	4684      	movlt	ip, r0
  while (blkCnt > 0U)                                                                                       \
 8001418:	2c02      	cmp	r4, #2
 800141a:	d00b      	beq.n	8001434 <arm_absmax_q15+0xf4>
    cur_absmax = *pSrc++;                                                                                     \
 800141c:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8001420:	2900      	cmp	r1, #0
 8001422:	dc03      	bgt.n	800142c <arm_absmax_q15+0xec>
 8001424:	2000      	movs	r0, #0
 8001426:	fad0 f111 	qsub16	r1, r0, r1
 800142a:	b209      	sxth	r1, r1
      out = cur_absmax;                                                                                       \
 800142c:	4561      	cmp	r1, ip
 800142e:	bfc4      	itt	gt
 8001430:	464d      	movgt	r5, r9
 8001432:	468c      	movgt	ip, r1
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
  }                                                                                                         \
                                                                                                            \
  /* Store the extrema value and it's index into destination pointers */                                    \
  *pResult = out;                                                                                           \
 8001434:	f8a2 c000 	strh.w	ip, [r2]
  *pIndex = outIndex;
 8001438:	601d      	str	r5, [r3, #0]
}
 800143a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800143e:	2600      	movs	r6, #0
 8001440:	fad6 f010 	qsub16	r0, r6, r0
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8001444:	b200      	sxth	r0, r0
 8001446:	e7d9      	b.n	80013fc <arm_absmax_q15+0xbc>
 8001448:	2700      	movs	r7, #0
 800144a:	fad7 f010 	qsub16	r0, r7, r0
 800144e:	b200      	sxth	r0, r0
    if (cur_absmax > out)                                                                         \
 8001450:	4584      	cmp	ip, r0
      outIndex = blockSize - blkCnt;                                                                        \
 8001452:	bfbc      	itt	lt
 8001454:	1b8d      	sublt	r5, r1, r6
      out = cur_absmax;                                                                                       \
 8001456:	4684      	movlt	ip, r0
  while (blkCnt > 0U)                                                                                       \
 8001458:	2c02      	cmp	r4, #2
 800145a:	d1df      	bne.n	800141c <arm_absmax_q15+0xdc>
 800145c:	e7ea      	b.n	8001434 <arm_absmax_q15+0xf4>
  outIndex = 0U;                                                                                            \
 800145e:	4655      	mov	r5, sl
 8001460:	e7c5      	b.n	80013ee <arm_absmax_q15+0xae>
 8001462:	bf00      	nop

08001464 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001464:	b500      	push	{lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001466:	4b0a      	ldr	r3, [pc, #40]	@ (8001490 <MX_DMA_Init+0x2c>)
 8001468:	6c98      	ldr	r0, [r3, #72]	@ 0x48

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800146a:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 800146c:	4308      	orrs	r0, r1
{
 800146e:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001470:	6498      	str	r0, [r3, #72]	@ 0x48
 8001472:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001474:	400b      	ands	r3, r1
 8001476:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800147c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800147e:	f002 fda7 	bl	8003fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001482:	200b      	movs	r0, #11

}
 8001484:	b003      	add	sp, #12
 8001486:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800148a:	f002 bddd 	b.w	8004048 <HAL_NVIC_EnableIRQ>
 800148e:	bf00      	nop
 8001490:	40021000 	.word	0x40021000

08001494 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8001494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	2400      	movs	r4, #0
{
 800149a:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80014a0:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014a4:	4b99      	ldr	r3, [pc, #612]	@ (800170c <MX_GPIO_Init+0x278>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a6:	940c      	str	r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  HAL_PWREx_EnableVddIO2();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 80014aa:	4f99      	ldr	r7, [pc, #612]	@ (8001710 <MX_GPIO_Init+0x27c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_SET);
 80014ac:	f8df a270 	ldr.w	sl, [pc, #624]	@ 8001720 <MX_GPIO_Init+0x28c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_EEPROM_CSN_GPIO_Port, RADIO_EEPROM_CSN_Pin, GPIO_PIN_SET);
 80014b0:	f8df 9270 	ldr.w	r9, [pc, #624]	@ 8001724 <MX_GPIO_Init+0x290>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80014b4:	f8df 8270 	ldr.w	r8, [pc, #624]	@ 8001728 <MX_GPIO_Init+0x294>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80014b8:	4e96      	ldr	r6, [pc, #600]	@ (8001714 <MX_GPIO_Init+0x280>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014ba:	f042 0210 	orr.w	r2, r2, #16
 80014be:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014c2:	f002 0210 	and.w	r2, r2, #16
 80014c6:	9200      	str	r2, [sp, #0]
 80014c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014cc:	f042 0204 	orr.w	r2, r2, #4
 80014d0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014d4:	f002 0204 	and.w	r2, r2, #4
 80014d8:	9201      	str	r2, [sp, #4]
 80014da:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014de:	f042 0220 	orr.w	r2, r2, #32
 80014e2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014e6:	f002 0220 	and.w	r2, r2, #32
 80014ea:	9202      	str	r2, [sp, #8]
 80014ec:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014f0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014f4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014f8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80014fc:	9203      	str	r2, [sp, #12]
 80014fe:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001500:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001502:	f042 0201 	orr.w	r2, r2, #1
 8001506:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001508:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800150a:	f002 0201 	and.w	r2, r2, #1
 800150e:	9204      	str	r2, [sp, #16]
 8001510:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001512:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001514:	f042 0202 	orr.w	r2, r2, #2
 8001518:	64da      	str	r2, [r3, #76]	@ 0x4c
 800151a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800151c:	f002 0202 	and.w	r2, r2, #2
 8001520:	9205      	str	r2, [sp, #20]
 8001522:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001524:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001526:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800152a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800152c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800152e:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001532:	9206      	str	r2, [sp, #24]
 8001534:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001536:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001538:	f042 0208 	orr.w	r2, r2, #8
 800153c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800153e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	9307      	str	r3, [sp, #28]
 8001546:	9b07      	ldr	r3, [sp, #28]
  HAL_PWREx_EnableVddIO2();
 8001548:	f003 fad8 	bl	8004afc <HAL_PWREx_EnableVddIO2>
  HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 800154c:	2201      	movs	r2, #1
 800154e:	4611      	mov	r1, r2
 8001550:	4638      	mov	r0, r7
 8001552:	f003 fa79 	bl	8004a48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_SET);
 8001556:	4650      	mov	r0, sl
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800155e:	f003 fa73 	bl	8004a48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_EEPROM_CSN_GPIO_Port, RADIO_EEPROM_CSN_Pin, GPIO_PIN_SET);
 8001562:	4648      	mov	r0, r9
 8001564:	2201      	movs	r2, #1
 8001566:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800156a:	f003 fa6d 	bl	8004a48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800156e:	4622      	mov	r2, r4
 8001570:	4640      	mov	r0, r8
 8001572:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001576:	f003 fa67 	bl	8004a48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800157a:	4622      	mov	r2, r4
 800157c:	4630      	mov	r0, r6
 800157e:	2140      	movs	r1, #64	@ 0x40
 8001580:	f003 fa62 	bl	8004a48 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001584:	a908      	add	r1, sp, #32
 8001586:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001588:	f24d 72ff 	movw	r2, #55295	@ 0xd7ff
 800158c:	2303      	movs	r3, #3
 800158e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001594:	f003 f87c 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001598:	a908      	add	r1, sp, #32
 800159a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = B1_Pin;
 800159c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f003 f871 	bl	8004690 <HAL_GPIO_Init>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015ae:	a908      	add	r1, sp, #32
 80015b0:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80015b2:	f64d 72ff 	movw	r2, #57343	@ 0xdfff
 80015b6:	2303      	movs	r3, #3
 80015b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015be:	f003 f867 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80015c2:	2209      	movs	r2, #9
 80015c4:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015c6:	a908      	add	r1, sp, #32
 80015c8:	4853      	ldr	r0, [pc, #332]	@ (8001718 <MX_GPIO_Init+0x284>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	940a      	str	r4, [sp, #40]	@ 0x28

  /*Configure GPIO pin : RADIO_S2LP_CSN_Pin */
  GPIO_InitStruct.Pin = RADIO_S2LP_CSN_Pin;
 80015cc:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80015ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d2:	f04f 0b03 	mov.w	fp, #3
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015d6:	f003 f85b 	bl	8004690 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_S2LP_CSN_GPIO_Port, &GPIO_InitStruct);
 80015da:	a908      	add	r1, sp, #32
 80015dc:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015de:	e9cd 5508 	strd	r5, r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_S2LP_CSN_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f003 f852 	bl	8004690 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ec:	4638      	mov	r0, r7
 80015ee:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80015f0:	f641 72fe 	movw	r2, #8190	@ 0x1ffe
 80015f4:	2303      	movs	r3, #3
 80015f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fc:	f003 f848 	bl	8004690 <HAL_GPIO_Init>
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001600:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8001602:	f248 0236 	movw	r2, #32822	@ 0x8036
 8001606:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001608:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 800160c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f003 f83d 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pin : RADIO_INT_Pin */
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8001616:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 8001618:	2208      	movs	r2, #8
 800161a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 800161e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 8001622:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 8001628:	f003 f832 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB15
                           PB4 PB5 PB6 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800162c:	f64b 7277 	movw	r2, #49015	@ 0xbf77
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001630:	a908      	add	r1, sp, #32
 8001632:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001634:	2303      	movs	r3, #3
 8001636:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	f003 f828 	bl	8004690 <HAL_GPIO_Init>
  /*Configure GPIO pin : RADIO_SDN_Pin */
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 8001640:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
 8001642:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 8001646:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
 8001648:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 8001650:	f003 f81e 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001654:	f64f 621f 	movw	r2, #65055	@ 0xfe1f
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001658:	a908      	add	r1, sp, #32
 800165a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800165c:	2303      	movs	r3, #3
 800165e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001664:	f003 f814 	bl	8004690 <HAL_GPIO_Init>
  /*Configure GPIO pin : RADIO_EEPROM_CSN_Pin */
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 8001668:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
 800166a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 800166e:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
 8001670:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 8001678:	f003 f80a 	bl	8004690 <HAL_GPIO_Init>
  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167c:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800167e:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001682:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001684:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168c:	f003 f800 	bl	8004690 <HAL_GPIO_Init>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001690:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001692:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001696:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001698:	4820      	ldr	r0, [pc, #128]	@ (800171c <MX_GPIO_Init+0x288>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800169c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a0:	f002 fff6 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80016a4:	2220      	movs	r2, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016a6:	a908      	add	r1, sp, #32
 80016a8:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016b2:	f002 ffed 	bl	8004690 <HAL_GPIO_Init>
  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016b6:	a908      	add	r1, sp, #32
 80016b8:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80016ba:	2340      	movs	r3, #64	@ 0x40
 80016bc:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016c4:	f002 ffe4 	bl	8004690 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016c8:	f44f 52e8 	mov.w	r2, #7424	@ 0x1d00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016d4:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016da:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016dc:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f002 ffd6 	bl	8004690 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80016e4:	4622      	mov	r2, r4
 80016e6:	4621      	mov	r1, r4
 80016e8:	2009      	movs	r0, #9
 80016ea:	f002 fc71 	bl	8003fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80016ee:	2009      	movs	r0, #9
 80016f0:	f002 fcaa 	bl	8004048 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016f4:	4622      	mov	r2, r4
 80016f6:	4621      	mov	r1, r4
 80016f8:	2028      	movs	r0, #40	@ 0x28
 80016fa:	f002 fc69 	bl	8003fd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016fe:	2028      	movs	r0, #40	@ 0x28
 8001700:	f002 fca2 	bl	8004048 <HAL_NVIC_EnableIRQ>

}
 8001704:	b00f      	add	sp, #60	@ 0x3c
 8001706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800170a:	bf00      	nop
 800170c:	40021000 	.word	0x40021000
 8001710:	48000800 	.word	0x48000800
 8001714:	48001800 	.word	0x48001800
 8001718:	48001c00 	.word	0x48001c00
 800171c:	48000c00 	.word	0x48000c00
 8001720:	48001400 	.word	0x48001400
 8001724:	48001000 	.word	0x48001000
 8001728:	48000400 	.word	0x48000400

0800172c <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if (GPIO_Pin == B1_Pin) {
 800172c:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8001730:	d002      	beq.n	8001738 <HAL_GPIO_EXTI_Callback+0xc>
		btn_press = 1;
	}
	else if (GPIO_Pin == RADIO_INT_Pin)
 8001732:	2808      	cmp	r0, #8
 8001734:	d004      	beq.n	8001740 <HAL_GPIO_EXTI_Callback+0x14>
		S2LP_IRQ_Handler();
}
 8001736:	4770      	bx	lr
		btn_press = 1;
 8001738:	4b02      	ldr	r3, [pc, #8]	@ (8001744 <HAL_GPIO_EXTI_Callback+0x18>)
 800173a:	2201      	movs	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]
 800173e:	4770      	bx	lr
		S2LP_IRQ_Handler();
 8001740:	f001 bab8 	b.w	8002cb4 <S2LP_IRQ_Handler>
 8001744:	20003a38 	.word	0x20003a38

08001748 <run>:
		__WFI();
	}
}

void run(void) {
	btn_press = 0;
 8001748:	4c1b      	ldr	r4, [pc, #108]	@ (80017b8 <run+0x70>)
		DEBUG_PRINT("Error while enabling the DMA\r\n");
 800174a:	4e1c      	ldr	r6, [pc, #112]	@ (80017bc <run+0x74>)

	while (1) {
	  while (!btn_press) {
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800174c:	4d1c      	ldr	r5, [pc, #112]	@ (80017c0 <run+0x78>)
	btn_press = 0;
 800174e:	2300      	movs	r3, #0
void run(void) {
 8001750:	b580      	push	{r7, lr}
	  }
	  btn_press = 0;
#if (CONTINUOUS_ACQ == 1)
#if (EVENT_DETECTION == 1)
#if (EVENT_DETECTION_MODE == HARD_THRESHOLD)
	  DEBUG_PRINT("Waiting for events. Event detection mode is set to Hard threshold. Threshold is set at %" PRIu16 ". Metric checked is %" PRIu16 " (0: Mean, 1: Max, 2: Power)\r\n", THRESHOLD, HT_METRIC);
 8001752:	4f1c      	ldr	r7, [pc, #112]	@ (80017c4 <run+0x7c>)
	btn_press = 0;
 8001754:	7023      	strb	r3, [r4, #0]
 8001756:	e00f      	b.n	8001778 <run+0x30>
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8001758:	2201      	movs	r2, #1
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4628      	mov	r0, r5
 800175e:	f003 f973 	bl	8004a48 <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 8001762:	20c8      	movs	r0, #200	@ 0xc8
 8001764:	f001 fdd0 	bl	8003308 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 8001768:	4628      	mov	r0, r5
 800176a:	4642      	mov	r2, r8
 800176c:	2180      	movs	r1, #128	@ 0x80
 800176e:	f003 f96b 	bl	8004a48 <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 8001772:	20c8      	movs	r0, #200	@ 0xc8
 8001774:	f001 fdc8 	bl	8003308 <HAL_Delay>
	  while (!btn_press) {
 8001778:	7823      	ldrb	r3, [r4, #0]
 800177a:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0ea      	beq.n	8001758 <run+0x10>
	  btn_press = 0;
 8001782:	2300      	movs	r3, #0
	  DEBUG_PRINT("Waiting for events. Event detection mode is set to Hard threshold. Threshold is set at %" PRIu16 ". Metric checked is %" PRIu16 " (0: Mean, 1: Max, 2: Power)\r\n", THRESHOLD, HT_METRIC);
 8001784:	2201      	movs	r2, #1
 8001786:	f640 11c4 	movw	r1, #2500	@ 0x9c4
 800178a:	4638      	mov	r0, r7
	  btn_press = 0;
 800178c:	7023      	strb	r3, [r4, #0]
	  DEBUG_PRINT("Waiting for events. Event detection mode is set to Hard threshold. Threshold is set at %" PRIu16 ". Metric checked is %" PRIu16 " (0: Mean, 1: Max, 2: Power)\r\n", THRESHOLD, HT_METRIC);
 800178e:	f007 fb39 	bl	8008e04 <iprintf>
#endif
#endif
	  while (!btn_press) {
 8001792:	7823      	ldrb	r3, [r4, #0]
 8001794:	b96b      	cbnz	r3, 80017b2 <run+0x6a>
	if (StartADCAcq(N_MELVECS) != HAL_OK) {
 8001796:	2014      	movs	r0, #20
 8001798:	f7ff fca4 	bl	80010e4 <StartADCAcq>
 800179c:	b928      	cbnz	r0, 80017aa <run+0x62>
	while (!IsADCFinished()) {
 800179e:	f7ff fcb9 	bl	8001114 <IsADCFinished>
 80017a2:	2800      	cmp	r0, #0
 80017a4:	d1f5      	bne.n	8001792 <run+0x4a>
		__WFI();
 80017a6:	bf30      	wfi
 80017a8:	e7f9      	b.n	800179e <run+0x56>
		DEBUG_PRINT("Error while enabling the DMA\r\n");
 80017aa:	4630      	mov	r0, r6
 80017ac:	f007 fb92 	bl	8008ed4 <puts>
 80017b0:	e7f5      	b.n	800179e <run+0x56>
		  acquire_and_send_packet();
	  }
	  btn_press = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	7023      	strb	r3, [r4, #0]
	  while (!btn_press) {
 80017b6:	e7df      	b.n	8001778 <run+0x30>
 80017b8:	20003a38 	.word	0x20003a38
 80017bc:	0800b320 	.word	0x0800b320
 80017c0:	48000400 	.word	0x48000400
 80017c4:	0800b290 	.word	0x0800b290

080017c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
 80017cc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  DEBUG_PRINT("Entering error Handler\r\n");
 80017ce:	481a      	ldr	r0, [pc, #104]	@ (8001838 <Error_Handler+0x70>)
 80017d0:	4f1a      	ldr	r7, [pc, #104]	@ (800183c <Error_Handler+0x74>)
  while (1)
  {
	  // Blink LED3 (red)
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80017d2:	4e1b      	ldr	r6, [pc, #108]	@ (8001840 <Error_Handler+0x78>)
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 80017d4:	4d1b      	ldr	r5, [pc, #108]	@ (8001844 <Error_Handler+0x7c>)
  DEBUG_PRINT("Entering error Handler\r\n");
 80017d6:	f007 fb7d 	bl	8008ed4 <puts>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 80017da:	2400      	movs	r4, #0
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 80017dc:	2201      	movs	r2, #1
 80017de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017e2:	4630      	mov	r0, r6
 80017e4:	f003 f930 	bl	8004a48 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	9400      	str	r4, [sp, #0]
 80017ec:	9900      	ldr	r1, [sp, #0]
 80017ee:	fba5 2303 	umull	r2, r3, r5, r3
 80017f2:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
 80017f6:	ea4f 1293 	mov.w	r2, r3, lsr #6
 80017fa:	d205      	bcs.n	8001808 <Error_Handler+0x40>
 80017fc:	9b00      	ldr	r3, [sp, #0]
 80017fe:	3301      	adds	r3, #1
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	9b00      	ldr	r3, [sp, #0]
 8001804:	4293      	cmp	r3, r2
 8001806:	d3f9      	bcc.n	80017fc <Error_Handler+0x34>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 8001808:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800180c:	2200      	movs	r2, #0
 800180e:	4630      	mov	r0, r6
 8001810:	f003 f91a 	bl	8004a48 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	9401      	str	r4, [sp, #4]
 8001818:	9a01      	ldr	r2, [sp, #4]
 800181a:	fba5 1303 	umull	r1, r3, r5, r3
 800181e:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
 8001822:	ea4f 1193 	mov.w	r1, r3, lsr #6
 8001826:	d2d9      	bcs.n	80017dc <Error_Handler+0x14>
 8001828:	9b01      	ldr	r3, [sp, #4]
 800182a:	3301      	adds	r3, #1
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	9b01      	ldr	r3, [sp, #4]
 8001830:	428b      	cmp	r3, r1
 8001832:	d3f9      	bcc.n	8001828 <Error_Handler+0x60>
 8001834:	e7d2      	b.n	80017dc <Error_Handler+0x14>
 8001836:	bf00      	nop
 8001838:	0800b340 	.word	0x0800b340
 800183c:	20002c00 	.word	0x20002c00
 8001840:	48000400 	.word	0x48000400
 8001844:	51eb851f 	.word	0x51eb851f

08001848 <SystemClock_Config>:
{
 8001848:	b500      	push	{lr}
 800184a:	b099      	sub	sp, #100	@ 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800184c:	2244      	movs	r2, #68	@ 0x44
 800184e:	2100      	movs	r1, #0
 8001850:	a806      	add	r0, sp, #24
 8001852:	f007 fcd3 	bl	80091fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001856:	2300      	movs	r3, #0
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001858:	f44f 7000 	mov.w	r0, #512	@ 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800185c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001860:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001864:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001866:	f003 f909 	bl	8004a7c <HAL_PWREx_ControlVoltageScaling>
 800186a:	b9e0      	cbnz	r0, 80018a6 <SystemClock_Config+0x5e>
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800186c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80018b0 <SystemClock_Config+0x68>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001870:	2210      	movs	r2, #16
 8001872:	4603      	mov	r3, r0
 8001874:	9206      	str	r2, [sp, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001876:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001878:	22b0      	movs	r2, #176	@ 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800187a:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800187c:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001880:	920e      	str	r2, [sp, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001882:	f003 f9d9 	bl	8004c38 <HAL_RCC_OscConfig>
 8001886:	4603      	mov	r3, r0
 8001888:	b968      	cbnz	r0, 80018a6 <SystemClock_Config+0x5e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800188a:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800188c:	2102      	movs	r1, #2
 800188e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001890:	e9cd 2301 	strd	r2, r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001894:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001898:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800189a:	f003 fce3 	bl	8005264 <HAL_RCC_ClockConfig>
 800189e:	b910      	cbnz	r0, 80018a6 <SystemClock_Config+0x5e>
}
 80018a0:	b019      	add	sp, #100	@ 0x64
 80018a2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80018a6:	f7ff ff8f 	bl	80017c8 <Error_Handler>
 80018aa:	bf00      	nop
 80018ac:	f3af 8000 	nop.w
 80018b0:	00000001 	.word	0x00000001
 80018b4:	00000000 	.word	0x00000000

080018b8 <main>:
{
 80018b8:	b508      	push	{r3, lr}
  HAL_Init();
 80018ba:	f001 fd03 	bl	80032c4 <HAL_Init>
  SystemClock_Config();
 80018be:	f7ff ffc3 	bl	8001848 <SystemClock_Config>
  MX_GPIO_Init();
 80018c2:	f7ff fde7 	bl	8001494 <MX_GPIO_Init>
  MX_DMA_Init();
 80018c6:	f7ff fdcd 	bl	8001464 <MX_DMA_Init>
  MX_SPI1_Init();
 80018ca:	f001 fae7 	bl	8002e9c <MX_SPI1_Init>
  MX_TIM3_Init();
 80018ce:	f001 fbd7 	bl	8003080 <MX_TIM3_Init>
  MX_ADC1_Init();
 80018d2:	f7ff fb0f 	bl	8000ef4 <MX_ADC1_Init>
  MX_AES_Init();
 80018d6:	f7ff fcf3 	bl	80012c0 <MX_AES_Init>
	  MX_LPUART1_UART_Init();
 80018da:	f001 fc2d 	bl	8003138 <MX_LPUART1_UART_Init>
  RetargetInit(&hlpuart1);
 80018de:	4814      	ldr	r0, [pc, #80]	@ (8001930 <main+0x78>)
 80018e0:	f000 f8de 	bl	8001aa0 <RetargetInit>
  DEBUG_PRINT("Hello world\r\n");
 80018e4:	4813      	ldr	r0, [pc, #76]	@ (8001934 <main+0x7c>)
 80018e6:	f007 faf5 	bl	8008ed4 <puts>
  HAL_StatusTypeDef err = S2LP_Init(&hspi1);
 80018ea:	4813      	ldr	r0, [pc, #76]	@ (8001938 <main+0x80>)
 80018ec:	f001 f940 	bl	8002b70 <S2LP_Init>
  if (err)  {
 80018f0:	b128      	cbz	r0, 80018fe <main+0x46>
 80018f2:	4601      	mov	r1, r0
	  DEBUG_PRINT("[S2LP] Error while initializing: %u\r\n", err);
 80018f4:	4811      	ldr	r0, [pc, #68]	@ (800193c <main+0x84>)
 80018f6:	f007 fa85 	bl	8008e04 <iprintf>
	  Error_Handler();
 80018fa:	f7ff ff65 	bl	80017c8 <Error_Handler>
	  DEBUG_PRINT("[S2LP] Init OK\r\n");
 80018fe:	4810      	ldr	r0, [pc, #64]	@ (8001940 <main+0x88>)
 8001900:	f007 fae8 	bl	8008ed4 <puts>
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 8001904:	480f      	ldr	r0, [pc, #60]	@ (8001944 <main+0x8c>)
 8001906:	217f      	movs	r1, #127	@ 0x7f
 8001908:	f002 fa94 	bl	8003e34 <HAL_ADCEx_Calibration_Start>
 800190c:	b120      	cbz	r0, 8001918 <main+0x60>
	  DEBUG_PRINT("Error while calibrating the ADC\r\n");
 800190e:	480e      	ldr	r0, [pc, #56]	@ (8001948 <main+0x90>)
 8001910:	f007 fae0 	bl	8008ed4 <puts>
	  Error_Handler();
 8001914:	f7ff ff58 	bl	80017c8 <Error_Handler>
  if (HAL_TIM_Base_Start(&htim3) != HAL_OK) {
 8001918:	480c      	ldr	r0, [pc, #48]	@ (800194c <main+0x94>)
 800191a:	f004 fccd 	bl	80062b8 <HAL_TIM_Base_Start>
 800191e:	b120      	cbz	r0, 800192a <main+0x72>
	  DEBUG_PRINT("Error while enabling timer TIM3\r\n");
 8001920:	480b      	ldr	r0, [pc, #44]	@ (8001950 <main+0x98>)
 8001922:	f007 fad7 	bl	8008ed4 <puts>
	  Error_Handler();
 8001926:	f7ff ff4f 	bl	80017c8 <Error_Handler>
  run();
 800192a:	f7ff ff0d 	bl	8001748 <run>
 800192e:	bf00      	nop
 8001930:	20004900 	.word	0x20004900
 8001934:	0800b358 	.word	0x0800b358
 8001938:	20004848 	.word	0x20004848
 800193c:	0800b368 	.word	0x0800b368
 8001940:	0800b390 	.word	0x0800b390
 8001944:	20002e3c 	.word	0x20002e3c
 8001948:	0800b3a0 	.word	0x0800b3a0
 800194c:	200048b0 	.word	0x200048b0
 8001950:	0800b3c4 	.word	0x0800b3c4

08001954 <tag_cbc_mac>:
                            0x00,0x00,0x00,0x00,
							0x00,0x00,0x00,0x00,
							0x00,0x00,0x00,0x00,
							0x00,0x00,0x00,0x00};

void tag_cbc_mac(uint8_t *tag, const uint8_t *msg, size_t msg_len) {
 8001954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001958:	b095      	sub	sp, #84	@ 0x54
	// Parse msg into blocks of 16 bytes
	size_t num_blocks = (msg_len + 15) / 16;
	uint8_t block[16];

	// Initialize state to 0
	memset(state, 0, 16);
 800195a:	ad08      	add	r5, sp, #32
	size_t num_blocks = (msg_len + 15) / 16;
 800195c:	f102 0e0f 	add.w	lr, r2, #15
	memset(state, 0, 16);
 8001960:	2400      	movs	r4, #0

	for (i = 0; i < num_blocks; i++) {
 8001962:	ea5f 1e1e 	movs.w	lr, lr, lsr #4
	memset(state, 0, 16);
 8001966:	9408      	str	r4, [sp, #32]
void tag_cbc_mac(uint8_t *tag, const uint8_t *msg, size_t msg_len) {
 8001968:	4684      	mov	ip, r0
	memset(state, 0, 16);
 800196a:	e9c5 4401 	strd	r4, r4, [r5, #4]
 800196e:	60ec      	str	r4, [r5, #12]
	for (i = 0; i < num_blocks; i++) {
 8001970:	d05c      	beq.n	8001a2c <tag_cbc_mac+0xd8>
		// Copy the current block into the block buffer
		size_t block_len = (i == num_blocks - 1) ? (msg_len % 16) : 16;
 8001972:	f002 000f 	and.w	r0, r2, #15
 8001976:	f10e 33ff 	add.w	r3, lr, #4294967295
 800197a:	9303      	str	r3, [sp, #12]
		memcpy(block, msg + i * 16, block_len);

		// If the last block is not 16 bytes, pad with zeros
		if (block_len < 16) {
			memset(block + block_len, 0, 16 - block_len);
 800197c:	f1c0 0310 	rsb	r3, r0, #16
 8001980:	4689      	mov	r9, r1
		size_t block_len = (i == num_blocks - 1) ? (msg_len % 16) : 16;
 8001982:	46a0      	mov	r8, r4
 8001984:	4627      	mov	r7, r4
 8001986:	4626      	mov	r6, r4
	for (i = 0; i < num_blocks; i++) {
 8001988:	46a3      	mov	fp, r4
 800198a:	f10d 0a40 	add.w	sl, sp, #64	@ 0x40
			memset(block + block_len, 0, 16 - block_len);
 800198e:	9306      	str	r3, [sp, #24]
 8001990:	f8cd e010 	str.w	lr, [sp, #16]
 8001994:	f8cd c01c 	str.w	ip, [sp, #28]
 8001998:	9005      	str	r0, [sp, #20]
 800199a:	e033      	b.n	8001a04 <tag_cbc_mac+0xb0>
		memcpy(block, msg + i * 16, block_len);
 800199c:	f8d9 0000 	ldr.w	r0, [r9]
 80019a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80019a4:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80019a8:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80019ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
		}

		// XOR the block with the current state
		for (size_t j = 0; j < 16; j++) {
			state[j] ^= block[j];
 80019b0:	e9dd 020d 	ldrd	r0, r2, [sp, #52]	@ 0x34
 80019b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80019b6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80019b8:	4078      	eors	r0, r7
 80019ba:	4062      	eors	r2, r4
 80019bc:	ea88 0303 	eor.w	r3, r8, r3
 80019c0:	4071      	eors	r1, r6
 80019c2:	e9cd 1008 	strd	r1, r0, [sp, #32]
 80019c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
		}
		start_cycle_count();
 80019ca:	f001 fc27 	bl	800321c <start_cycle_count>
		// Encrypt the state with AES
//		AES128_encrypt(state, AES_Key);
		uint8_t buffer[16];
		memcpy(buffer, state, 16);
 80019ce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019d2:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}


		// To implement
		// HAL_StatusTypeDef HAL_CRYPEx_AES(CRYP_HandleTypeDef *hcryp, uint8_t *pInputData, uint16_t Size, uint8_t *pOutputData, uint32_t Timeout)
		HAL_CRYPEx_AES(&hcryp, buffer, 16, state, HAL_MAX_DELAY);
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	2210      	movs	r2, #16
 80019de:	462b      	mov	r3, r5
 80019e0:	4651      	mov	r1, sl
 80019e2:	4818      	ldr	r0, [pc, #96]	@ (8001a44 <tag_cbc_mac+0xf0>)
 80019e4:	f002 fc32 	bl	800424c <HAL_CRYPEx_AES>
		stop_cycle_count("Encrypted");
 80019e8:	4817      	ldr	r0, [pc, #92]	@ (8001a48 <tag_cbc_mac+0xf4>)
 80019ea:	f001 fc19 	bl	8003220 <stop_cycle_count>
	for (i = 0; i < num_blocks; i++) {
 80019ee:	9b04      	ldr	r3, [sp, #16]
 80019f0:	f10b 0b01 	add.w	fp, fp, #1
 80019f4:	455b      	cmp	r3, fp
 80019f6:	f109 0910 	add.w	r9, r9, #16
 80019fa:	d015      	beq.n	8001a28 <tag_cbc_mac+0xd4>
	}

    // Copy the result of CBC-MAC-AES to the tag.
    for (int j=0; j<16; j++) {
        tag[j] = state[j];
 80019fc:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 8001a00:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	@ 0x28
		size_t block_len = (i == num_blocks - 1) ? (msg_len % 16) : 16;
 8001a04:	9b03      	ldr	r3, [sp, #12]
 8001a06:	459b      	cmp	fp, r3
		memcpy(block, msg + i * 16, block_len);
 8001a08:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
		size_t block_len = (i == num_blocks - 1) ? (msg_len % 16) : 16;
 8001a0c:	d1c6      	bne.n	800199c <tag_cbc_mac+0x48>
		memcpy(block, msg + i * 16, block_len);
 8001a0e:	9a05      	ldr	r2, [sp, #20]
 8001a10:	4649      	mov	r1, r9
 8001a12:	4660      	mov	r0, ip
 8001a14:	f007 fc71 	bl	80092fa <memcpy>
			memset(block + block_len, 0, 16 - block_len);
 8001a18:	9805      	ldr	r0, [sp, #20]
 8001a1a:	9a06      	ldr	r2, [sp, #24]
 8001a1c:	ab0c      	add	r3, sp, #48	@ 0x30
 8001a1e:	2100      	movs	r1, #0
 8001a20:	1818      	adds	r0, r3, r0
 8001a22:	f007 fbeb 	bl	80091fc <memset>
 8001a26:	e7c3      	b.n	80019b0 <tag_cbc_mac+0x5c>
 8001a28:	f8dd c01c 	ldr.w	ip, [sp, #28]
        tag[j] = state[j];
 8001a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a2e:	f8cc 0000 	str.w	r0, [ip]
 8001a32:	f8cc 1004 	str.w	r1, [ip, #4]
 8001a36:	f8cc 2008 	str.w	r2, [ip, #8]
 8001a3a:	f8cc 300c 	str.w	r3, [ip, #12]
    }
}
 8001a3e:	b015      	add	sp, #84	@ 0x54
 8001a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a44:	200039d8 	.word	0x200039d8
 8001a48:	0800b3e8 	.word	0x0800b3e8

08001a4c <make_packet>:

// Assumes payload is already in place in the packet
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 8001a4c:	b510      	push	{r4, lr}
 8001a4e:	460c      	mov	r4, r1
 8001a50:	4696      	mov	lr, r2
    size_t packet_len = payload_len + PACKET_HEADER_LENGTH + PACKET_TAG_LENGTH;
    // Initially, the whole packet header is set to 0s
    memset(packet, 0, PACKET_HEADER_LENGTH);
    // So is the tag
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 8001a52:	f104 0208 	add.w	r2, r4, #8
    memset(packet, 0, PACKET_HEADER_LENGTH);
 8001a56:	f04f 0c00 	mov.w	ip, #0
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 8001a5a:	f840 c002 	str.w	ip, [r0, r2]
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 8001a5e:	4601      	mov	r1, r0
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 8001a60:	4410      	add	r0, r2
 8001a62:	f8c0 c004 	str.w	ip, [r0, #4]
 8001a66:	f8c0 c008 	str.w	ip, [r0, #8]
 8001a6a:	f8c0 c00c 	str.w	ip, [r0, #12]
	 *		 	This will be helpful when setting fields that are on multiple bytes.
	*/

	// For the tag field, you have to calculate the tag. The function call below is correct but
	// tag_cbc_mac function, calculating the tag, is not implemented.
	packet[0] = 0x00;
 8001a6e:	f881 c000 	strb.w	ip, [r1]
	packet[1] = sender_id;
	packet[2] = (payload_len >> 8) & 0xFF;
 8001a72:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 8001a76:	f881 c002 	strb.w	ip, [r1, #2]
	packet[3] = payload_len & 0xFF;
	packet[4] = (serial >> 24) & 0xFF;
 8001a7a:	ea4f 6c13 	mov.w	ip, r3, lsr #24
	packet[5] = (serial >> 16) & 0xFF;
	packet[6] = (serial >> 8)  & 0XFF;
	packet[7] = serial & 0xFF;
 8001a7e:	71cb      	strb	r3, [r1, #7]
	packet[4] = (serial >> 24) & 0xFF;
 8001a80:	f881 c004 	strb.w	ip, [r1, #4]
	packet[5] = (serial >> 16) & 0xFF;
 8001a84:	ea4f 4c13 	mov.w	ip, r3, lsr #16
	packet[6] = (serial >> 8)  & 0XFF;
 8001a88:	0a1b      	lsrs	r3, r3, #8
	packet[1] = sender_id;
 8001a8a:	f881 e001 	strb.w	lr, [r1, #1]
	packet[3] = payload_len & 0xFF;
 8001a8e:	70cc      	strb	r4, [r1, #3]
	packet[5] = (serial >> 16) & 0xFF;
 8001a90:	f881 c005 	strb.w	ip, [r1, #5]
	packet[6] = (serial >> 8)  & 0XFF;
 8001a94:	718b      	strb	r3, [r1, #6]

    tag_cbc_mac(packet + payload_len + PACKET_HEADER_LENGTH, packet, payload_len + PACKET_HEADER_LENGTH);
 8001a96:	f7ff ff5d 	bl	8001954 <tag_cbc_mac>

    return packet_len;
}
 8001a9a:	f104 0018 	add.w	r0, r4, #24
 8001a9e:	bd10      	pop	{r4, pc}

08001aa0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001aa0:	b430      	push	{r4, r5}
  gHuart = huart;

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001aa2:	4b06      	ldr	r3, [pc, #24]	@ (8001abc <RetargetInit+0x1c>)
  gHuart = huart;
 8001aa4:	4906      	ldr	r1, [pc, #24]	@ (8001ac0 <RetargetInit+0x20>)
  setvbuf(stdout, NULL, _IONBF, 0);
 8001aa6:	681d      	ldr	r5, [r3, #0]
void RetargetInit(UART_HandleTypeDef *huart) {
 8001aa8:	4604      	mov	r4, r0
  setvbuf(stdout, NULL, _IONBF, 0);
 8001aaa:	2300      	movs	r3, #0
  gHuart = huart;
 8001aac:	600c      	str	r4, [r1, #0]
  setvbuf(stdout, NULL, _IONBF, 0);
 8001aae:	68a8      	ldr	r0, [r5, #8]
 8001ab0:	2202      	movs	r2, #2
}
 8001ab2:	bc30      	pop	{r4, r5}
  setvbuf(stdout, NULL, _IONBF, 0);
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f007 ba15 	b.w	8008ee4 <setvbuf>
 8001aba:	bf00      	nop
 8001abc:	20002c18 	.word	0x20002c18
 8001ac0:	20003a3c 	.word	0x20003a3c

08001ac4 <_isatty>:

int _isatty(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001ac4:	2802      	cmp	r0, #2
 8001ac6:	d801      	bhi.n	8001acc <_isatty+0x8>
    return 1;
 8001ac8:	2001      	movs	r0, #1

  errno = EBADF;
  return 0;
}
 8001aca:	4770      	bx	lr
int _isatty(int fd) {
 8001acc:	b508      	push	{r3, lr}
  errno = EBADF;
 8001ace:	f007 fbe7 	bl	80092a0 <__errno>
 8001ad2:	2309      	movs	r3, #9
 8001ad4:	6003      	str	r3, [r0, #0]
  return 0;
 8001ad6:	2000      	movs	r0, #0
}
 8001ad8:	bd08      	pop	{r3, pc}
 8001ada:	bf00      	nop

08001adc <_write>:

int _write(int fd, char* ptr, int len) {
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001adc:	3801      	subs	r0, #1
 8001ade:	2801      	cmp	r0, #1
int _write(int fd, char* ptr, int len) {
 8001ae0:	b510      	push	{r4, lr}
  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001ae2:	d80c      	bhi.n	8001afe <_write+0x22>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001ae4:	4614      	mov	r4, r2
 8001ae6:	4a09      	ldr	r2, [pc, #36]	@ (8001b0c <_write+0x30>)
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aec:	6810      	ldr	r0, [r2, #0]
 8001aee:	b2a2      	uxth	r2, r4
 8001af0:	f004 fdce 	bl	8006690 <HAL_UART_Transmit>
    if (hstatus == HAL_OK)
      return len;
 8001af4:	2800      	cmp	r0, #0
 8001af6:	bf0c      	ite	eq
 8001af8:	4620      	moveq	r0, r4
 8001afa:	2005      	movne	r0, #5
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 8001afc:	bd10      	pop	{r4, pc}
  errno = EBADF;
 8001afe:	f007 fbcf 	bl	80092a0 <__errno>
 8001b02:	2309      	movs	r3, #9
 8001b04:	6003      	str	r3, [r0, #0]
  return -1;
 8001b06:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001b0a:	bd10      	pop	{r4, pc}
 8001b0c:	20003a3c 	.word	0x20003a3c

08001b10 <_close>:

int _close(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001b10:	2802      	cmp	r0, #2
 8001b12:	d801      	bhi.n	8001b18 <_close+0x8>
    return 0;
 8001b14:	2000      	movs	r0, #0

  errno = EBADF;
  return -1;
}
 8001b16:	4770      	bx	lr
int _close(int fd) {
 8001b18:	b508      	push	{r3, lr}
  errno = EBADF;
 8001b1a:	f007 fbc1 	bl	80092a0 <__errno>
 8001b1e:	2309      	movs	r3, #9
 8001b20:	6003      	str	r3, [r0, #0]
  return -1;
 8001b22:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001b26:	bd08      	pop	{r3, pc}

08001b28 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001b28:	b508      	push	{r3, lr}
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001b2a:	f007 fbb9 	bl	80092a0 <__errno>
 8001b2e:	2309      	movs	r3, #9
 8001b30:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001b32:	f04f 30ff 	mov.w	r0, #4294967295
 8001b36:	bd08      	pop	{r3, pc}

08001b38 <_read>:

int _read(int fd, char* ptr, int len) {
 8001b38:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001b3a:	b958      	cbnz	r0, 8001b54 <_read+0x1c>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001b3c:	4a09      	ldr	r2, [pc, #36]	@ (8001b64 <_read+0x2c>)
 8001b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b42:	6810      	ldr	r0, [r2, #0]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f004 fe2d 	bl	80067a4 <HAL_UART_Receive>
    if (hstatus == HAL_OK)
      return 1;
 8001b4a:	2800      	cmp	r0, #0
 8001b4c:	bf14      	ite	ne
 8001b4e:	2005      	movne	r0, #5
 8001b50:	2001      	moveq	r0, #1
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 8001b52:	bd08      	pop	{r3, pc}
  errno = EBADF;
 8001b54:	f007 fba4 	bl	80092a0 <__errno>
 8001b58:	2309      	movs	r3, #9
 8001b5a:	6003      	str	r3, [r0, #0]
  return -1;
 8001b5c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001b60:	bd08      	pop	{r3, pc}
 8001b62:	bf00      	nop
 8001b64:	20003a3c 	.word	0x20003a3c

08001b68 <_fstat>:

int _fstat(int fd, struct stat* st) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001b68:	2802      	cmp	r0, #2
int _fstat(int fd, struct stat* st) {
 8001b6a:	b508      	push	{r3, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001b6c:	d804      	bhi.n	8001b78 <_fstat+0x10>
    st->st_mode = S_IFCHR;
 8001b6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b72:	604b      	str	r3, [r1, #4]
    return 0;
  }

  errno = EBADF;
  return 0;
}
 8001b74:	2000      	movs	r0, #0
 8001b76:	bd08      	pop	{r3, pc}
  errno = EBADF;
 8001b78:	f007 fb92 	bl	80092a0 <__errno>
 8001b7c:	2309      	movs	r3, #9
 8001b7e:	6003      	str	r3, [r0, #0]
}
 8001b80:	2000      	movs	r0, #0
 8001b82:	bd08      	pop	{r3, pc}

08001b84 <S2LP_Command>:
volatile uint8_t underflow = 0;

volatile uint16_t n_chunks_tx = 0;

HAL_StatusTypeDef S2LP_Command(uint8_t cmd, S2LPStatus *status)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af02      	add	r7, sp, #8
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	71fb      	strb	r3, [r7, #7]
	uint8_t TxBuf[2] = {0x80, cmd};
 8001b90:	2380      	movs	r3, #128	@ 0x80
 8001b92:	733b      	strb	r3, [r7, #12]
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	737b      	strb	r3, [r7, #13]
 8001b98:	b672      	cpsid	i
}
 8001b9a:	bf00      	nop
	uint8_t RxBuf[2];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	480f      	ldr	r0, [pc, #60]	@ (8001be0 <S2LP_Command+0x5c>)
 8001ba2:	f002 ff51 	bl	8004a48 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 2, HAL_MAX_DELAY);
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <S2LP_Command+0x60>)
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	f107 0208 	add.w	r2, r7, #8
 8001bae:	f107 010c 	add.w	r1, r7, #12
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	2302      	movs	r3, #2
 8001bba:	f004 f8f7 	bl	8005dac <HAL_SPI_TransmitReceive>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	4806      	ldr	r0, [pc, #24]	@ (8001be0 <S2LP_Command+0x5c>)
 8001bc8:	f002 ff3e 	bl	8004a48 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001bcc:	b662      	cpsie	i
}
 8001bce:	bf00      	nop
	__enable_irq();

	memcpy(status, &RxBuf[0], 2);
 8001bd0:	893a      	ldrh	r2, [r7, #8]
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	801a      	strh	r2, [r3, #0]
	return err;
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3710      	adds	r7, #16
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	48000800 	.word	0x48000800
 8001be4:	20003a44 	.word	0x20003a44

08001be8 <S2LP_ReadReg>:

HAL_StatusTypeDef S2LP_ReadReg(uint8_t addr, uint8_t *retval, S2LPStatus *status)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	4603      	mov	r3, r0
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	73fb      	strb	r3, [r7, #15]
	uint8_t TxBuf[] = {0x01, addr, 0x0};
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	753b      	strb	r3, [r7, #20]
 8001bfa:	7bfb      	ldrb	r3, [r7, #15]
 8001bfc:	757b      	strb	r3, [r7, #21]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	75bb      	strb	r3, [r7, #22]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c02:	b672      	cpsid	i
}
 8001c04:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2101      	movs	r1, #1
 8001c0a:	4814      	ldr	r0, [pc, #80]	@ (8001c5c <S2LP_ReadReg+0x74>)
 8001c0c:	f002 ff1c 	bl	8004a48 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 8001c10:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <S2LP_ReadReg+0x78>)
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	f107 0210 	add.w	r2, r7, #16
 8001c18:	f107 0114 	add.w	r1, r7, #20
 8001c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2303      	movs	r3, #3
 8001c24:	f004 f8c2 	bl	8005dac <HAL_SPI_TransmitReceive>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	2101      	movs	r1, #1
 8001c30:	480a      	ldr	r0, [pc, #40]	@ (8001c5c <S2LP_ReadReg+0x74>)
 8001c32:	f002 ff09 	bl	8004a48 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001c36:	b662      	cpsie	i
}
 8001c38:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d002      	beq.n	8001c46 <S2LP_ReadReg+0x5e>
		memcpy(status, &RxBuf[0], 2);
 8001c40:	8a3a      	ldrh	r2, [r7, #16]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	801a      	strh	r2, [r3, #0]
	if (retval != NULL)
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d002      	beq.n	8001c52 <S2LP_ReadReg+0x6a>
		*retval = RxBuf[2];
 8001c4c:	7cba      	ldrb	r2, [r7, #18]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	701a      	strb	r2, [r3, #0]
	return err;
 8001c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	48000800 	.word	0x48000800
 8001c60:	20003a44 	.word	0x20003a44

08001c64 <S2LP_WriteReg>:

HAL_StatusTypeDef S2LP_WriteReg(uint8_t addr, uint8_t val, S2LPStatus *status)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af02      	add	r7, sp, #8
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	603a      	str	r2, [r7, #0]
 8001c6e:	71fb      	strb	r3, [r7, #7]
 8001c70:	460b      	mov	r3, r1
 8001c72:	71bb      	strb	r3, [r7, #6]
	uint8_t TxBuf[] = {0x00, addr, val};
 8001c74:	2300      	movs	r3, #0
 8001c76:	733b      	strb	r3, [r7, #12]
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	737b      	strb	r3, [r7, #13]
 8001c7c:	79bb      	ldrb	r3, [r7, #6]
 8001c7e:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c80:	b672      	cpsid	i
}
 8001c82:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2101      	movs	r1, #1
 8001c88:	4811      	ldr	r0, [pc, #68]	@ (8001cd0 <S2LP_WriteReg+0x6c>)
 8001c8a:	f002 fedd 	bl	8004a48 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 8001c8e:	4b11      	ldr	r3, [pc, #68]	@ (8001cd4 <S2LP_WriteReg+0x70>)
 8001c90:	6818      	ldr	r0, [r3, #0]
 8001c92:	f107 0208 	add.w	r2, r7, #8
 8001c96:	f107 010c 	add.w	r1, r7, #12
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	f004 f883 	bl	8005dac <HAL_SPI_TransmitReceive>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001caa:	2201      	movs	r2, #1
 8001cac:	2101      	movs	r1, #1
 8001cae:	4808      	ldr	r0, [pc, #32]	@ (8001cd0 <S2LP_WriteReg+0x6c>)
 8001cb0:	f002 feca 	bl	8004a48 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001cb4:	b662      	cpsie	i
}
 8001cb6:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <S2LP_WriteReg+0x60>
		memcpy(status, &RxBuf[0], 2);
 8001cbe:	893a      	ldrh	r2, [r7, #8]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	801a      	strh	r2, [r3, #0]
	return err;
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	48000800 	.word	0x48000800
 8001cd4:	20003a44 	.word	0x20003a44

08001cd8 <S2LP_WriteTxFIFO>:

HAL_StatusTypeDef S2LP_WriteTxFIFO(uint8_t *chunk, uint8_t chunk_len, S2LPStatus *status)
{
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b08d      	sub	sp, #52	@ 0x34
 8001cdc:	af02      	add	r7, sp, #8
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	607a      	str	r2, [r7, #4]
 8001ce4:	72fb      	strb	r3, [r7, #11]
	uint8_t TxBuf[FIFO_CHUNK_SIZE+2];
	uint8_t RxBuf[FIFO_CHUNK_SIZE+2];
	TxBuf[0] = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	773b      	strb	r3, [r7, #28]
	TxBuf[1] = 0xFF;
 8001cea:	23ff      	movs	r3, #255	@ 0xff
 8001cec:	777b      	strb	r3, [r7, #29]
	memcpy((void *)&TxBuf[2], (void *)chunk, chunk_len);
 8001cee:	7afa      	ldrb	r2, [r7, #11]
 8001cf0:	f107 031c 	add.w	r3, r7, #28
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	68f9      	ldr	r1, [r7, #12]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f007 fafe 	bl	80092fa <memcpy>
  __ASM volatile ("cpsid i" : : : "memory");
 8001cfe:	b672      	cpsid	i
}
 8001d00:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2101      	movs	r1, #1
 8001d06:	4814      	ldr	r0, [pc, #80]	@ (8001d58 <S2LP_WriteTxFIFO+0x80>)
 8001d08:	f002 fe9e 	bl	8004a48 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, chunk_len+2, HAL_MAX_DELAY);
 8001d0c:	4b13      	ldr	r3, [pc, #76]	@ (8001d5c <S2LP_WriteTxFIFO+0x84>)
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	7afb      	ldrb	r3, [r7, #11]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3302      	adds	r3, #2
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	f107 0210 	add.w	r2, r7, #16
 8001d1c:	f107 011c 	add.w	r1, r7, #28
 8001d20:	f04f 34ff 	mov.w	r4, #4294967295
 8001d24:	9400      	str	r4, [sp, #0]
 8001d26:	f004 f841 	bl	8005dac <HAL_SPI_TransmitReceive>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001d30:	2201      	movs	r2, #1
 8001d32:	2101      	movs	r1, #1
 8001d34:	4808      	ldr	r0, [pc, #32]	@ (8001d58 <S2LP_WriteTxFIFO+0x80>)
 8001d36:	f002 fe87 	bl	8004a48 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001d3a:	b662      	cpsie	i
}
 8001d3c:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d002      	beq.n	8001d4a <S2LP_WriteTxFIFO+0x72>
		memcpy(status, &RxBuf[0], 2);
 8001d44:	8a3a      	ldrh	r2, [r7, #16]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	801a      	strh	r2, [r3, #0]
	return err;
 8001d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	372c      	adds	r7, #44	@ 0x2c
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd90      	pop	{r4, r7, pc}
 8001d56:	bf00      	nop
 8001d58:	48000800 	.word	0x48000800
 8001d5c:	20003a44 	.word	0x20003a44

08001d60 <S2LP_Send>:

HAL_StatusTypeDef S2LP_Send(uint8_t *payload, uint16_t pay_len)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
	S2LPStatus radio_status;
	HAL_StatusTypeDef err;

	// Flush the Tx FIFO
	S2LP_Command(CMD_FLUSHTXFIFO, &radio_status);
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	4619      	mov	r1, r3
 8001d72:	2072      	movs	r0, #114	@ 0x72
 8001d74:	f7ff ff06 	bl	8001b84 <S2LP_Command>
	if (radio_status.MC_STATE != MC_STATE_READY) {
 8001d78:	7b7b      	ldrb	r3, [r7, #13]
 8001d7a:	f023 0301 	bic.w	r3, r3, #1
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d004      	beq.n	8001d8e <S2LP_Send+0x2e>
		DEBUG_PRINT("[S2LP] Error: radio is not ready\r\n");
 8001d84:	4864      	ldr	r0, [pc, #400]	@ (8001f18 <S2LP_Send+0x1b8>)
 8001d86:	f007 f8a5 	bl	8008ed4 <puts>
		return HAL_BUSY;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e0c0      	b.n	8001f10 <S2LP_Send+0x1b0>
	}
	// Reset global interrupt variables
	packet_sent = 0;
 8001d8e:	4b63      	ldr	r3, [pc, #396]	@ (8001f1c <S2LP_Send+0x1bc>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
	underflow = 0;
 8001d94:	4b62      	ldr	r3, [pc, #392]	@ (8001f20 <S2LP_Send+0x1c0>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	701a      	strb	r2, [r3, #0]
	fifo_almost_empty = 0;
 8001d9a:	4b62      	ldr	r3, [pc, #392]	@ (8001f24 <S2LP_Send+0x1c4>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	701a      	strb	r2, [r3, #0]

	// Set the packet length
	S2LP_WriteReg(PCKTLEN1_ADDR, (uint8_t) (pay_len >> 8), NULL);
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	0a1b      	lsrs	r3, r3, #8
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2200      	movs	r2, #0
 8001daa:	4619      	mov	r1, r3
 8001dac:	2031      	movs	r0, #49	@ 0x31
 8001dae:	f7ff ff59 	bl	8001c64 <S2LP_WriteReg>
	S2LP_WriteReg(PCKTLEN0_ADDR, (uint8_t) (pay_len & 0xFF), NULL);
 8001db2:	887b      	ldrh	r3, [r7, #2]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2200      	movs	r2, #0
 8001db8:	4619      	mov	r1, r3
 8001dba:	2032      	movs	r0, #50	@ 0x32
 8001dbc:	f7ff ff52 	bl	8001c64 <S2LP_WriteReg>

	// Switch to lock Tx state
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 8001dc0:	e00f      	b.n	8001de2 <S2LP_Send+0x82>
		err = S2LP_Command(CMD_LOCKTX, &radio_status);
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	2066      	movs	r0, #102	@ 0x66
 8001dca:	f7ff fedb 	bl	8001b84 <S2LP_Command>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	73bb      	strb	r3, [r7, #14]
		if (err) {
 8001dd2:	7bbb      	ldrb	r3, [r7, #14]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d004      	beq.n	8001de2 <S2LP_Send+0x82>
			DEBUG_PRINT("[S2LP] Error: cannot lock on Tx\r\n");
 8001dd8:	4853      	ldr	r0, [pc, #332]	@ (8001f28 <S2LP_Send+0x1c8>)
 8001dda:	f007 f87b 	bl	8008ed4 <puts>
			return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e096      	b.n	8001f10 <S2LP_Send+0x1b0>
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 8001de2:	7b7b      	ldrb	r3, [r7, #13]
 8001de4:	f023 0301 	bic.w	r3, r3, #1
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b18      	cmp	r3, #24
 8001dec:	d1e9      	bne.n	8001dc2 <S2LP_Send+0x62>
		}
	}

	// Fill Tx FIFO with payload chunks
	uint8_t sending = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	75fb      	strb	r3, [r7, #23]
	uint16_t n_chunks = (pay_len / FIFO_CHUNK_SIZE) + (pay_len % FIFO_CHUNK_SIZE != 0);
 8001df2:	887b      	ldrh	r3, [r7, #2]
 8001df4:	08db      	lsrs	r3, r3, #3
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	887a      	ldrh	r2, [r7, #2]
 8001dfa:	f002 0207 	and.w	r2, r2, #7
 8001dfe:	b292      	uxth	r2, r2
 8001e00:	2a00      	cmp	r2, #0
 8001e02:	bf14      	ite	ne
 8001e04:	2201      	movne	r2, #1
 8001e06:	2200      	moveq	r2, #0
 8001e08:	b2d2      	uxtb	r2, r2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	823b      	strh	r3, [r7, #16]

	uint16_t free_chunks = FIFO_SIZE / FIFO_CHUNK_SIZE;
 8001e0e:	2310      	movs	r3, #16
 8001e10:	82bb      	strh	r3, [r7, #20]

	for(uint16_t i=0; i < n_chunks; i++) {
 8001e12:	2300      	movs	r3, #0
 8001e14:	827b      	strh	r3, [r7, #18]
 8001e16:	e063      	b.n	8001ee0 <S2LP_Send+0x180>
		if (underflow) {
 8001e18:	4b41      	ldr	r3, [pc, #260]	@ (8001f20 <S2LP_Send+0x1c0>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d02f      	beq.n	8001e82 <S2LP_Send+0x122>
			DEBUG_PRINT("[S2LP] Error: Tx FIFO overflow or underflow!\r\n");
 8001e22:	4842      	ldr	r0, [pc, #264]	@ (8001f2c <S2LP_Send+0x1cc>)
 8001e24:	f007 f856 	bl	8008ed4 <puts>
			err = S2LP_ReadReg(0, NULL, &radio_status); // fetch radio state
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	2100      	movs	r1, #0
 8001e30:	2000      	movs	r0, #0
 8001e32:	f7ff fed9 	bl	8001be8 <S2LP_ReadReg>
 8001e36:	4603      	mov	r3, r0
 8001e38:	73bb      	strb	r3, [r7, #14]
			if (!err) {
 8001e3a:	7bbb      	ldrb	r3, [r7, #14]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d105      	bne.n	8001e4c <S2LP_Send+0xec>
				S2LP_PrintStatus(&radio_status);
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 f879 	bl	8001f3c <S2LP_PrintStatus>
 8001e4a:	e002      	b.n	8001e52 <S2LP_Send+0xf2>
			} else {
				DEBUG_PRINT("[S2LP] Error: unable to fetch radio status!\r\n");
 8001e4c:	4838      	ldr	r0, [pc, #224]	@ (8001f30 <S2LP_Send+0x1d0>)
 8001e4e:	f007 f841 	bl	8008ed4 <puts>
			}
			return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e05c      	b.n	8001f10 <S2LP_Send+0x1b0>
		}

		while (free_chunks == 0) {
			if (!sending) {// if FIFO is full and we are not sending yet ...
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d107      	bne.n	8001e6c <S2LP_Send+0x10c>
				S2LP_Command(CMD_TX, &radio_status); // start the transmission
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	4619      	mov	r1, r3
 8001e62:	2060      	movs	r0, #96	@ 0x60
 8001e64:	f7ff fe8e 	bl	8001b84 <S2LP_Command>
				sending = 1;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	75fb      	strb	r3, [r7, #23]
			}
//			stop_cycle_count("Radio WFI");
			__WFI();
 8001e6c:	bf30      	wfi
//			start_cycle_count();
			if (fifo_almost_empty) {
 8001e6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001f24 <S2LP_Send+0x1c4>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d004      	beq.n	8001e82 <S2LP_Send+0x122>
				free_chunks = FIFO_SIZE/FIFO_CHUNK_SIZE - FIFO_EMPTY_THRESH;
 8001e78:	230c      	movs	r3, #12
 8001e7a:	82bb      	strh	r3, [r7, #20]
				fifo_almost_empty = 0;
 8001e7c:	4b29      	ldr	r3, [pc, #164]	@ (8001f24 <S2LP_Send+0x1c4>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
		while (free_chunks == 0) {
 8001e82:	8abb      	ldrh	r3, [r7, #20]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0e6      	beq.n	8001e56 <S2LP_Send+0xf6>
			}
		}

		uint8_t chunk_len = (i == n_chunks-1) ? pay_len-(n_chunks-1)*FIFO_CHUNK_SIZE : FIFO_CHUNK_SIZE;
 8001e88:	8a7a      	ldrh	r2, [r7, #18]
 8001e8a:	8a3b      	ldrh	r3, [r7, #16]
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d109      	bne.n	8001ea6 <S2LP_Send+0x146>
 8001e92:	887b      	ldrh	r3, [r7, #2]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	8a3b      	ldrh	r3, [r7, #16]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	e000      	b.n	8001ea8 <S2LP_Send+0x148>
 8001ea6:	2308      	movs	r3, #8
 8001ea8:	73fb      	strb	r3, [r7, #15]
		err = S2LP_WriteTxFIFO(&payload[i*FIFO_CHUNK_SIZE], chunk_len, &radio_status);
 8001eaa:	8a7b      	ldrh	r3, [r7, #18]
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f107 020c 	add.w	r2, r7, #12
 8001eb8:	7bf9      	ldrb	r1, [r7, #15]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ff0c 	bl	8001cd8 <S2LP_WriteTxFIFO>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	73bb      	strb	r3, [r7, #14]
		if (err) {
 8001ec4:	7bbb      	ldrb	r3, [r7, #14]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d004      	beq.n	8001ed4 <S2LP_Send+0x174>
			DEBUG_PRINT("[S2LP] Error: cannot fill Tx FIFO\r\n");
 8001eca:	481a      	ldr	r0, [pc, #104]	@ (8001f34 <S2LP_Send+0x1d4>)
 8001ecc:	f007 f802 	bl	8008ed4 <puts>
			return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e01d      	b.n	8001f10 <S2LP_Send+0x1b0>
		}
		free_chunks--;
 8001ed4:	8abb      	ldrh	r3, [r7, #20]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i < n_chunks; i++) {
 8001eda:	8a7b      	ldrh	r3, [r7, #18]
 8001edc:	3301      	adds	r3, #1
 8001ede:	827b      	strh	r3, [r7, #18]
 8001ee0:	8a7a      	ldrh	r2, [r7, #18]
 8001ee2:	8a3b      	ldrh	r3, [r7, #16]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d397      	bcc.n	8001e18 <S2LP_Send+0xb8>
	}

	// Start transmission (for short payloads)
	if (!sending) {
 8001ee8:	7dfb      	ldrb	r3, [r7, #23]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d107      	bne.n	8001efe <S2LP_Send+0x19e>
		S2LP_Command(CMD_TX, &radio_status);
 8001eee:	f107 030c 	add.w	r3, r7, #12
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	2060      	movs	r0, #96	@ 0x60
 8001ef6:	f7ff fe45 	bl	8001b84 <S2LP_Command>
	}

	while (!packet_sent) {
 8001efa:	e000      	b.n	8001efe <S2LP_Send+0x19e>
//		stop_cycle_count("Radio WFI");
		__WFI(); // wait until packet has been fully transmitted
 8001efc:	bf30      	wfi
	while (!packet_sent) {
 8001efe:	4b07      	ldr	r3, [pc, #28]	@ (8001f1c <S2LP_Send+0x1bc>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f9      	beq.n	8001efc <S2LP_Send+0x19c>
//		start_cycle_count();
	}

	DEBUG_PRINT("[S2LP] Packet transmitted!\r\n");
 8001f08:	480b      	ldr	r0, [pc, #44]	@ (8001f38 <S2LP_Send+0x1d8>)
 8001f0a:	f006 ffe3 	bl	8008ed4 <puts>
	return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	0800af60 	.word	0x0800af60
 8001f1c:	20003a40 	.word	0x20003a40
 8001f20:	20003a42 	.word	0x20003a42
 8001f24:	20003a41 	.word	0x20003a41
 8001f28:	0800af84 	.word	0x0800af84
 8001f2c:	0800afa8 	.word	0x0800afa8
 8001f30:	0800afd8 	.word	0x0800afd8
 8001f34:	0800b008 	.word	0x0800b008
 8001f38:	0800b02c 	.word	0x0800b02c

08001f3c <S2LP_PrintStatus>:

void S2LP_PrintStatus(S2LPStatus *status)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af02      	add	r7, sp, #8
 8001f42:	6078      	str	r0, [r7, #4]
	DEBUG_PRINT("=== S2LP Status ===\r\n");
 8001f44:	486f      	ldr	r0, [pc, #444]	@ (8002104 <S2LP_PrintStatus+0x1c8>)
 8001f46:	f006 ffc5 	bl	8008ed4 <puts>
	DEBUG_PRINT("  MC_STATE: ");
 8001f4a:	486f      	ldr	r0, [pc, #444]	@ (8002108 <S2LP_PrintStatus+0x1cc>)
 8001f4c:	f006 ff5a 	bl	8008e04 <iprintf>
	switch (status->MC_STATE) {
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	785b      	ldrb	r3, [r3, #1]
 8001f54:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b5c      	cmp	r3, #92	@ 0x5c
 8001f5c:	f000 808f 	beq.w	800207e <S2LP_PrintStatus+0x142>
 8001f60:	2b5c      	cmp	r3, #92	@ 0x5c
 8001f62:	f300 8094 	bgt.w	800208e <S2LP_PrintStatus+0x152>
 8001f66:	2b30      	cmp	r3, #48	@ 0x30
 8001f68:	dc6a      	bgt.n	8002040 <S2LP_PrintStatus+0x104>
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f2c0 808f 	blt.w	800208e <S2LP_PrintStatus+0x152>
 8001f70:	2b30      	cmp	r3, #48	@ 0x30
 8001f72:	f200 808c 	bhi.w	800208e <S2LP_PrintStatus+0x152>
 8001f76:	a201      	add	r2, pc, #4	@ (adr r2, 8001f7c <S2LP_PrintStatus+0x40>)
 8001f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f7c:	08002047 	.word	0x08002047
 8001f80:	0800205f 	.word	0x0800205f
 8001f84:	0800204f 	.word	0x0800204f
 8001f88:	08002057 	.word	0x08002057
 8001f8c:	0800208f 	.word	0x0800208f
 8001f90:	0800208f 	.word	0x0800208f
 8001f94:	0800208f 	.word	0x0800208f
 8001f98:	0800208f 	.word	0x0800208f
 8001f9c:	0800208f 	.word	0x0800208f
 8001fa0:	0800208f 	.word	0x0800208f
 8001fa4:	0800208f 	.word	0x0800208f
 8001fa8:	0800208f 	.word	0x0800208f
 8001fac:	08002067 	.word	0x08002067
 8001fb0:	0800208f 	.word	0x0800208f
 8001fb4:	0800208f 	.word	0x0800208f
 8001fb8:	0800208f 	.word	0x0800208f
 8001fbc:	0800208f 	.word	0x0800208f
 8001fc0:	0800208f 	.word	0x0800208f
 8001fc4:	0800208f 	.word	0x0800208f
 8001fc8:	0800208f 	.word	0x0800208f
 8001fcc:	08002077 	.word	0x08002077
 8001fd0:	0800208f 	.word	0x0800208f
 8001fd4:	0800208f 	.word	0x0800208f
 8001fd8:	0800208f 	.word	0x0800208f
 8001fdc:	0800208f 	.word	0x0800208f
 8001fe0:	0800208f 	.word	0x0800208f
 8001fe4:	0800208f 	.word	0x0800208f
 8001fe8:	0800208f 	.word	0x0800208f
 8001fec:	0800208f 	.word	0x0800208f
 8001ff0:	0800208f 	.word	0x0800208f
 8001ff4:	0800208f 	.word	0x0800208f
 8001ff8:	0800208f 	.word	0x0800208f
 8001ffc:	0800208f 	.word	0x0800208f
 8002000:	0800208f 	.word	0x0800208f
 8002004:	0800208f 	.word	0x0800208f
 8002008:	0800208f 	.word	0x0800208f
 800200c:	0800208f 	.word	0x0800208f
 8002010:	0800208f 	.word	0x0800208f
 8002014:	0800208f 	.word	0x0800208f
 8002018:	0800208f 	.word	0x0800208f
 800201c:	0800208f 	.word	0x0800208f
 8002020:	0800208f 	.word	0x0800208f
 8002024:	0800208f 	.word	0x0800208f
 8002028:	0800208f 	.word	0x0800208f
 800202c:	0800208f 	.word	0x0800208f
 8002030:	0800208f 	.word	0x0800208f
 8002034:	0800208f 	.word	0x0800208f
 8002038:	0800208f 	.word	0x0800208f
 800203c:	0800206f 	.word	0x0800206f
 8002040:	2b50      	cmp	r3, #80	@ 0x50
 8002042:	d020      	beq.n	8002086 <S2LP_PrintStatus+0x14a>
 8002044:	e023      	b.n	800208e <S2LP_PrintStatus+0x152>
		case (MC_STATE_READY):
			DEBUG_PRINT("READY");
 8002046:	4831      	ldr	r0, [pc, #196]	@ (800210c <S2LP_PrintStatus+0x1d0>)
 8002048:	f006 fedc 	bl	8008e04 <iprintf>
			break;
 800204c:	e023      	b.n	8002096 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_STANDBY):
			DEBUG_PRINT("STANDBY");
 800204e:	4830      	ldr	r0, [pc, #192]	@ (8002110 <S2LP_PrintStatus+0x1d4>)
 8002050:	f006 fed8 	bl	8008e04 <iprintf>
			break;
 8002054:	e01f      	b.n	8002096 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SLEEP):
			DEBUG_PRINT("SLEEP");
 8002056:	482f      	ldr	r0, [pc, #188]	@ (8002114 <S2LP_PrintStatus+0x1d8>)
 8002058:	f006 fed4 	bl	8008e04 <iprintf>
			break;
 800205c:	e01b      	b.n	8002096 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SLEEP_NOFIFO):
			DEBUG_PRINT("SLEEP");
 800205e:	482d      	ldr	r0, [pc, #180]	@ (8002114 <S2LP_PrintStatus+0x1d8>)
 8002060:	f006 fed0 	bl	8008e04 <iprintf>
			break;
 8002064:	e017      	b.n	8002096 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_LOCKON):
			DEBUG_PRINT("LOCKON");
 8002066:	482c      	ldr	r0, [pc, #176]	@ (8002118 <S2LP_PrintStatus+0x1dc>)
 8002068:	f006 fecc 	bl	8008e04 <iprintf>
			break;
 800206c:	e013      	b.n	8002096 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_RX):
			DEBUG_PRINT("RX");
 800206e:	482b      	ldr	r0, [pc, #172]	@ (800211c <S2LP_PrintStatus+0x1e0>)
 8002070:	f006 fec8 	bl	8008e04 <iprintf>
			break;
 8002074:	e00f      	b.n	8002096 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_LOCK_ST):
			DEBUG_PRINT("LOCK_ST");
 8002076:	482a      	ldr	r0, [pc, #168]	@ (8002120 <S2LP_PrintStatus+0x1e4>)
 8002078:	f006 fec4 	bl	8008e04 <iprintf>
			break;
 800207c:	e00b      	b.n	8002096 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_TX):
			DEBUG_PRINT("TX");
 800207e:	4829      	ldr	r0, [pc, #164]	@ (8002124 <S2LP_PrintStatus+0x1e8>)
 8002080:	f006 fec0 	bl	8008e04 <iprintf>
			break;
 8002084:	e007      	b.n	8002096 <S2LP_PrintStatus+0x15a>
		case (MC_STATE_SYNTH_SETUP):
			DEBUG_PRINT("SYNTH_SETUP");
 8002086:	4828      	ldr	r0, [pc, #160]	@ (8002128 <S2LP_PrintStatus+0x1ec>)
 8002088:	f006 febc 	bl	8008e04 <iprintf>
			break;
 800208c:	e003      	b.n	8002096 <S2LP_PrintStatus+0x15a>
		default:
			DEBUG_PRINT("UNKNOWN");
 800208e:	4827      	ldr	r0, [pc, #156]	@ (800212c <S2LP_PrintStatus+0x1f0>)
 8002090:	f006 feb8 	bl	8008e04 <iprintf>
			break;
 8002094:	bf00      	nop
	}
	DEBUG_PRINT("\r\n");
 8002096:	4826      	ldr	r0, [pc, #152]	@ (8002130 <S2LP_PrintStatus+0x1f4>)
 8002098:	f006 ff1c 	bl	8008ed4 <puts>
	DEBUG_PRINT("  XO_ON=%u, ERROR_LOCK=%u, RX_fifo_empty=%u, TX_FIFO_FULL=%u\r\n",
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	785b      	ldrb	r3, [r3, #1]
 80020a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	4619      	mov	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	461a      	mov	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	4618      	mov	r0, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	4603      	mov	r3, r0
 80020ce:	4819      	ldr	r0, [pc, #100]	@ (8002134 <S2LP_PrintStatus+0x1f8>)
 80020d0:	f006 fe98 	bl	8008e04 <iprintf>
			status->XO_ON, status->ERROR_LOCK, status->RX_FIFO_EMPTY, status->TX_FIFO_FULL);
	DEBUG_PRINT("  ANT_SELECT=%u, RCCAL_OK=%u, RES=%u\r\n", status->ANT_SELECT, status->RCCAL_OK, status->RESERVED);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	4619      	mov	r1, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	461a      	mov	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	4810      	ldr	r0, [pc, #64]	@ (8002138 <S2LP_PrintStatus+0x1fc>)
 80020f8:	f006 fe84 	bl	8008e04 <iprintf>
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	0800b048 	.word	0x0800b048
 8002108:	0800b060 	.word	0x0800b060
 800210c:	0800b070 	.word	0x0800b070
 8002110:	0800b078 	.word	0x0800b078
 8002114:	0800b080 	.word	0x0800b080
 8002118:	0800b088 	.word	0x0800b088
 800211c:	0800b090 	.word	0x0800b090
 8002120:	0800b094 	.word	0x0800b094
 8002124:	0800b09c 	.word	0x0800b09c
 8002128:	0800b0a0 	.word	0x0800b0a0
 800212c:	0800b0ac 	.word	0x0800b0ac
 8002130:	0800b0b4 	.word	0x0800b0b4
 8002134:	0800b0b8 	.word	0x0800b0b8
 8002138:	0800b0f8 	.word	0x0800b0f8
 800213c:	00000000 	.word	0x00000000

08002140 <S2LP_PLLConf>:
* @param  pfd_split pointer to the pfd register value.
* @param  lFc channel center frequency expressed in Hz (from 779 MHz to 915 MHz)
* @retval uint8_t Charge pump word.
*/
void S2LP_PLLConf(int32_t lFc)
{
 8002140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002144:	b09e      	sub	sp, #120	@ 0x78
 8002146:	af00      	add	r7, sp, #0
 8002148:	63f8      	str	r0, [r7, #60]	@ 0x3c
  uint32_t vcofreq, lFRef;
  uint8_t BFactor = 4; // 779-915 MHz range
 800214a:	2304      	movs	r3, #4
 800214c:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
  uint8_t refdiv = 1; // REFDIV=0 (XO_RCO_CONF0) by default
 8002150:	2301      	movs	r3, #1
 8002152:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

  /* Calculates the syntheziser band select */
  uint64_t tgt1,tgt2,tgt;
  uint32_t synth;

  tgt = (((uint64_t)lFc)<<19)*(BFactor*refdiv);
 8002156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002158:	17da      	asrs	r2, r3, #31
 800215a:	469a      	mov	sl, r3
 800215c:	4693      	mov	fp, r2
 800215e:	ea4f 396a 	mov.w	r9, sl, asr #13
 8002162:	ea4f 48ca 	mov.w	r8, sl, lsl #19
 8002166:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 800216a:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800216e:	fb02 f303 	mul.w	r3, r2, r3
 8002172:	17da      	asrs	r2, r3, #31
 8002174:	623b      	str	r3, [r7, #32]
 8002176:	627a      	str	r2, [r7, #36]	@ 0x24
 8002178:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800217c:	4603      	mov	r3, r0
 800217e:	fb03 f209 	mul.w	r2, r3, r9
 8002182:	460b      	mov	r3, r1
 8002184:	fb08 f303 	mul.w	r3, r8, r3
 8002188:	4413      	add	r3, r2
 800218a:	4602      	mov	r2, r0
 800218c:	fba8 4502 	umull	r4, r5, r8, r2
 8002190:	442b      	add	r3, r5
 8002192:	461d      	mov	r5, r3
 8002194:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
 8002198:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
  synth=(uint32_t)(tgt/XTAL_FREQ);
 800219c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80021a0:	a374      	add	r3, pc, #464	@ (adr r3, 8002374 <S2LP_PLLConf+0x234>)
 80021a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a6:	f7fe fd0f 	bl	8000bc8 <__aeabi_uldivmod>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4613      	mov	r3, r2
 80021b0:	667b      	str	r3, [r7, #100]	@ 0x64
  tgt1 = (uint64_t)XTAL_FREQ*(synth);
 80021b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021b4:	2200      	movs	r2, #0
 80021b6:	61bb      	str	r3, [r7, #24]
 80021b8:	61fa      	str	r2, [r7, #28]
 80021ba:	4b6b      	ldr	r3, [pc, #428]	@ (8002368 <S2LP_PLLConf+0x228>)
 80021bc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80021c0:	462a      	mov	r2, r5
 80021c2:	fb03 f202 	mul.w	r2, r3, r2
 80021c6:	2300      	movs	r3, #0
 80021c8:	4621      	mov	r1, r4
 80021ca:	fb01 f303 	mul.w	r3, r1, r3
 80021ce:	4413      	add	r3, r2
 80021d0:	4a65      	ldr	r2, [pc, #404]	@ (8002368 <S2LP_PLLConf+0x228>)
 80021d2:	4621      	mov	r1, r4
 80021d4:	fba1 1202 	umull	r1, r2, r1, r2
 80021d8:	637a      	str	r2, [r7, #52]	@ 0x34
 80021da:	460a      	mov	r2, r1
 80021dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80021de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80021e0:	4413      	add	r3, r2
 80021e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80021e4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80021e8:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
 80021ec:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
  tgt2 = (uint64_t)XTAL_FREQ*(synth+1);
 80021f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021f2:	3301      	adds	r3, #1
 80021f4:	2200      	movs	r2, #0
 80021f6:	613b      	str	r3, [r7, #16]
 80021f8:	617a      	str	r2, [r7, #20]
 80021fa:	4b5b      	ldr	r3, [pc, #364]	@ (8002368 <S2LP_PLLConf+0x228>)
 80021fc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002200:	462a      	mov	r2, r5
 8002202:	fb03 f202 	mul.w	r2, r3, r2
 8002206:	2300      	movs	r3, #0
 8002208:	4621      	mov	r1, r4
 800220a:	fb01 f303 	mul.w	r3, r1, r3
 800220e:	4413      	add	r3, r2
 8002210:	4a55      	ldr	r2, [pc, #340]	@ (8002368 <S2LP_PLLConf+0x228>)
 8002212:	4621      	mov	r1, r4
 8002214:	fba1 1202 	umull	r1, r2, r1, r2
 8002218:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800221a:	460a      	mov	r2, r1
 800221c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800221e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002220:	4413      	add	r3, r2
 8002222:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002224:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8002228:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
 800222c:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50

  synth=((tgt2-tgt)<(tgt-tgt1))?(synth+1):(synth);
 8002230:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002234:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002238:	1a84      	subs	r4, r0, r2
 800223a:	60bc      	str	r4, [r7, #8]
 800223c:	eb61 0303 	sbc.w	r3, r1, r3
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002246:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800224a:	1a84      	subs	r4, r0, r2
 800224c:	603c      	str	r4, [r7, #0]
 800224e:	eb61 0303 	sbc.w	r3, r1, r3
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002258:	4623      	mov	r3, r4
 800225a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800225e:	4602      	mov	r2, r0
 8002260:	4293      	cmp	r3, r2
 8002262:	462b      	mov	r3, r5
 8002264:	460a      	mov	r2, r1
 8002266:	4193      	sbcs	r3, r2
 8002268:	d202      	bcs.n	8002270 <S2LP_PLLConf+0x130>
 800226a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800226c:	3301      	adds	r3, #1
 800226e:	e000      	b.n	8002272 <S2LP_PLLConf+0x132>
 8002270:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002272:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc*BFactor;
 8002274:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 8002278:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800227a:	fb02 f303 	mul.w	r3, r2, r3
 800227e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Calculates the reference frequency clock */
  lFRef = XTAL_FREQ/refdiv;
 8002280:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8002284:	4a38      	ldr	r2, [pc, #224]	@ (8002368 <S2LP_PLLConf+0x228>)
 8002286:	fb92 f3f3 	sdiv	r3, r2, r3
 800228a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Set the correct charge pump word */
  if (vcofreq >= VCO_CENTER_FREQ) {
 800228c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800228e:	4a37      	ldr	r2, [pc, #220]	@ (800236c <S2LP_PLLConf+0x22c>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d911      	bls.n	80022b8 <S2LP_PLLConf+0x178>
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8002294:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002296:	4a36      	ldr	r2, [pc, #216]	@ (8002370 <S2LP_PLLConf+0x230>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d906      	bls.n	80022aa <S2LP_PLLConf+0x16a>
      cp_isel = 0x02;
 800229c:	2302      	movs	r3, #2
 800229e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80022a8:	e017      	b.n	80022da <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x01;
 80022aa:	2301      	movs	r3, #1
 80022ac:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 80022b0:	2301      	movs	r3, #1
 80022b2:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80022b6:	e010      	b.n	80022da <S2LP_PLLConf+0x19a>
    }
  }
  else {
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 80022b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002370 <S2LP_PLLConf+0x230>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d906      	bls.n	80022ce <S2LP_PLLConf+0x18e>
      cp_isel = 0x03;
 80022c0:	2303      	movs	r3, #3
 80022c2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80022cc:	e005      	b.n	80022da <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x02;
 80022ce:	2302      	movs	r3, #2
 80022d0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 80022d4:	2301      	movs	r3, #1
 80022d6:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    }
  }

  //DEBUG_PRINT("SYNT: %lu, cp_ise=%u, pfd_split=%u\r\n", synth, cp_isel, pfd_split);

  uint8_t SYNT3 = (uint8_t) ((cp_isel << 5) | (synth >> 24));
 80022da:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80022de:	015b      	lsls	r3, r3, #5
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022e4:	0e1b      	lsrs	r3, r3, #24
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	4313      	orrs	r3, r2
 80022ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint8_t SYNT2 = (uint8_t) ((synth >> 16) & 0xFF);
 80022ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022f0:	0c1b      	lsrs	r3, r3, #16
 80022f2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint8_t SYNT1 = (uint8_t) ((synth >> 8) & 0xFF);
 80022f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  uint8_t SYNT0 = (uint8_t) ((synth >> 0) & 0xFF);
 80022fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002300:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

  uint8_t SYNTH_CONFIG2 = 0xD0 + (pfd_split << 2);
 8002304:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	b2db      	uxtb	r3, r3
 800230c:	3b30      	subs	r3, #48	@ 0x30
 800230e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  S2LP_WriteReg(SYNT3_ADDR, SYNT3, NULL);
 8002312:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002316:	2200      	movs	r2, #0
 8002318:	4619      	mov	r1, r3
 800231a:	2005      	movs	r0, #5
 800231c:	f7ff fca2 	bl	8001c64 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT2_ADDR, SYNT2, NULL);
 8002320:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002324:	2200      	movs	r2, #0
 8002326:	4619      	mov	r1, r3
 8002328:	2006      	movs	r0, #6
 800232a:	f7ff fc9b 	bl	8001c64 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT1_ADDR, SYNT1, NULL);
 800232e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002332:	2200      	movs	r2, #0
 8002334:	4619      	mov	r1, r3
 8002336:	2007      	movs	r0, #7
 8002338:	f7ff fc94 	bl	8001c64 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT0_ADDR, SYNT0, NULL);
 800233c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002340:	2200      	movs	r2, #0
 8002342:	4619      	mov	r1, r3
 8002344:	2008      	movs	r0, #8
 8002346:	f7ff fc8d 	bl	8001c64 <S2LP_WriteReg>
  S2LP_WriteReg(SYNTH_CONFIG2_ADDR, SYNTH_CONFIG2, NULL);
 800234a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800234e:	2200      	movs	r2, #0
 8002350:	4619      	mov	r1, r3
 8002352:	2065      	movs	r0, #101	@ 0x65
 8002354:	f7ff fc86 	bl	8001c64 <S2LP_WriteReg>
}
 8002358:	bf00      	nop
 800235a:	3778      	adds	r7, #120	@ 0x78
 800235c:	46bd      	mov	sp, r7
 800235e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002362:	bf00      	nop
 8002364:	f3af 8000 	nop.w
 8002368:	02faf080 	.word	0x02faf080
 800236c:	d693a3ff 	.word	0xd693a3ff
 8002370:	01c9c380 	.word	0x01c9c380
 8002374:	02faf080 	.word	0x02faf080
 8002378:	00000000 	.word	0x00000000

0800237c <ComputeDatarate>:

uint32_t ComputeDatarate(uint16_t cM, uint8_t cE)
{
 800237c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002380:	b091      	sub	sp, #68	@ 0x44
 8002382:	af00      	add	r7, sp, #0
 8002384:	4603      	mov	r3, r0
 8002386:	460a      	mov	r2, r1
 8002388:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800238a:	4613      	mov	r3, r2
 800238c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint32_t f_dig=XTAL_FREQ;
 8002390:	4b3f      	ldr	r3, [pc, #252]	@ (8002490 <ComputeDatarate+0x114>)
 8002392:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint64_t dr;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8002394:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002396:	4b3f      	ldr	r3, [pc, #252]	@ (8002494 <ComputeDatarate+0x118>)
 8002398:	429a      	cmp	r2, r3
 800239a:	d902      	bls.n	80023a2 <ComputeDatarate+0x26>
    f_dig >>= 1;
 800239c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800239e:	085b      	lsrs	r3, r3, #1
 80023a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  if(cE==0) {
 80023a2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d128      	bne.n	80023fc <ComputeDatarate+0x80>
    dr=((uint64_t)f_dig*cM);
 80023aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023ac:	2200      	movs	r2, #0
 80023ae:	61bb      	str	r3, [r7, #24]
 80023b0:	61fa      	str	r2, [r7, #28]
 80023b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80023b4:	2200      	movs	r2, #0
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	617a      	str	r2, [r7, #20]
 80023ba:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80023be:	462b      	mov	r3, r5
 80023c0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80023c4:	4642      	mov	r2, r8
 80023c6:	fb02 f203 	mul.w	r2, r2, r3
 80023ca:	464b      	mov	r3, r9
 80023cc:	4621      	mov	r1, r4
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	4622      	mov	r2, r4
 80023d6:	4641      	mov	r1, r8
 80023d8:	fba2 ab01 	umull	sl, fp, r2, r1
 80023dc:	445b      	add	r3, fp
 80023de:	469b      	mov	fp, r3
 80023e0:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
 80023e4:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
    return (uint32_t)(dr>>32);
 80023e8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	000a      	movs	r2, r1
 80023f6:	2300      	movs	r3, #0
 80023f8:	4613      	mov	r3, r2
 80023fa:	e043      	b.n	8002484 <ComputeDatarate+0x108>
  }

  dr=((uint64_t)f_dig)*((uint64_t)cM+65536);
 80023fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023fe:	2200      	movs	r2, #0
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	60fa      	str	r2, [r7, #12]
 8002404:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002406:	2200      	movs	r2, #0
 8002408:	603b      	str	r3, [r7, #0]
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002410:	460b      	mov	r3, r1
 8002412:	f513 3380 	adds.w	r3, r3, #65536	@ 0x10000
 8002416:	623b      	str	r3, [r7, #32]
 8002418:	4613      	mov	r3, r2
 800241a:	f143 0300 	adc.w	r3, r3, #0
 800241e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002420:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002424:	460b      	mov	r3, r1
 8002426:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 800242a:	4652      	mov	r2, sl
 800242c:	fb02 f203 	mul.w	r2, r2, r3
 8002430:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8002434:	465b      	mov	r3, fp
 8002436:	4682      	mov	sl, r0
 8002438:	468b      	mov	fp, r1
 800243a:	4651      	mov	r1, sl
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	4413      	add	r3, r2
 8002442:	4652      	mov	r2, sl
 8002444:	6a39      	ldr	r1, [r7, #32]
 8002446:	fba2 4501 	umull	r4, r5, r2, r1
 800244a:	442b      	add	r3, r5
 800244c:	461d      	mov	r5, r3
 800244e:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
 8002452:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30

  return (uint32_t)(dr>>(33-cE));
 8002456:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800245a:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 800245e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002462:	f1c1 0420 	rsb	r4, r1, #32
 8002466:	f1a1 0020 	sub.w	r0, r1, #32
 800246a:	fa22 f801 	lsr.w	r8, r2, r1
 800246e:	fa03 f404 	lsl.w	r4, r3, r4
 8002472:	ea48 0804 	orr.w	r8, r8, r4
 8002476:	fa23 f000 	lsr.w	r0, r3, r0
 800247a:	ea48 0800 	orr.w	r8, r8, r0
 800247e:	fa23 f901 	lsr.w	r9, r3, r1
 8002482:	4643      	mov	r3, r8
}
 8002484:	4618      	mov	r0, r3
 8002486:	3744      	adds	r7, #68	@ 0x44
 8002488:	46bd      	mov	sp, r7
 800248a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800248e:	4770      	bx	lr
 8002490:	02faf080 	.word	0x02faf080
 8002494:	01c9c380 	.word	0x01c9c380

08002498 <SearchDatarateME>:

void SearchDatarateME(uint32_t lDatarate, uint16_t* pcM, uint8_t* pcE)
{
 8002498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800249c:	b0ae      	sub	sp, #184	@ 0xb8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 80024a4:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 80024a8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
  uint32_t lDatarateTmp, f_dig=XTAL_FREQ;
 80024ac:	4ba5      	ldr	r3, [pc, #660]	@ (8002744 <SearchDatarateME+0x2ac>)
 80024ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint8_t uDrE;
  uint64_t tgt1,tgt2,tgt;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 80024b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80024b6:	4ba4      	ldr	r3, [pc, #656]	@ (8002748 <SearchDatarateME+0x2b0>)
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d904      	bls.n	80024c6 <SearchDatarateME+0x2e>
    f_dig >>= 1;
 80024bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024c0:	085b      	lsrs	r3, r3, #1
 80024c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  }

  /* Search the exponent value */
  for(uDrE = 0; uDrE != 12; uDrE++) {
 80024c6:	2300      	movs	r3, #0
 80024c8:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 80024cc:	e013      	b.n	80024f6 <SearchDatarateME+0x5e>
    lDatarateTmp = ComputeDatarate(0xFFFF, uDrE);
 80024ce:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 80024d2:	4619      	mov	r1, r3
 80024d4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80024d8:	f7ff ff50 	bl	800237c <ComputeDatarate>
 80024dc:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    if(lDatarate<=lDatarateTmp)
 80024e0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80024e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d909      	bls.n	8002500 <SearchDatarateME+0x68>
  for(uDrE = 0; uDrE != 12; uDrE++) {
 80024ec:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 80024f0:	3301      	adds	r3, #1
 80024f2:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 80024f6:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 80024fa:	2b0c      	cmp	r3, #12
 80024fc:	d1e7      	bne.n	80024ce <SearchDatarateME+0x36>
 80024fe:	e000      	b.n	8002502 <SearchDatarateME+0x6a>
      break;
 8002500:	bf00      	nop
  }
  (*pcE) = (uint8_t)uDrE;
 8002502:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002506:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800250a:	7013      	strb	r3, [r2, #0]

  if(uDrE==0) {
 800250c:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d16b      	bne.n	80025ec <SearchDatarateME+0x154>
    tgt=((uint64_t)lDatarate)<<32;
 8002514:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002518:	2200      	movs	r2, #0
 800251a:	663b      	str	r3, [r7, #96]	@ 0x60
 800251c:	667a      	str	r2, [r7, #100]	@ 0x64
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	f04f 0300 	mov.w	r3, #0
 8002526:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002528:	000b      	movs	r3, r1
 800252a:	2200      	movs	r2, #0
 800252c:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)(tgt/f_dig);
 8002530:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002534:	2200      	movs	r2, #0
 8002536:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002538:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800253a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800253e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002542:	f7fe fb41 	bl	8000bc8 <__aeabi_uldivmod>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	b293      	uxth	r3, r2
 800254c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002550:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*(*pcM);
 8002552:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002556:	2200      	movs	r2, #0
 8002558:	653b      	str	r3, [r7, #80]	@ 0x50
 800255a:	657a      	str	r2, [r7, #84]	@ 0x54
 800255c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	b29b      	uxth	r3, r3
 8002564:	2200      	movs	r2, #0
 8002566:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002568:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800256a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800256e:	462b      	mov	r3, r5
 8002570:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8002574:	4642      	mov	r2, r8
 8002576:	fb02 f203 	mul.w	r2, r2, r3
 800257a:	464b      	mov	r3, r9
 800257c:	4621      	mov	r1, r4
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	4413      	add	r3, r2
 8002584:	4622      	mov	r2, r4
 8002586:	4641      	mov	r1, r8
 8002588:	fba2 1201 	umull	r1, r2, r2, r1
 800258c:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800258e:	460a      	mov	r2, r1
 8002590:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002592:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002594:	4413      	add	r3, r2
 8002596:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002598:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 800259c:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 80025a0:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1);
 80025a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80025a8:	2200      	movs	r2, #0
 80025aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80025ac:	647a      	str	r2, [r7, #68]	@ 0x44
 80025ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025b2:	881b      	ldrh	r3, [r3, #0]
 80025b4:	3301      	adds	r3, #1
 80025b6:	17da      	asrs	r2, r3, #31
 80025b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025bc:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80025c0:	462b      	mov	r3, r5
 80025c2:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80025c6:	4642      	mov	r2, r8
 80025c8:	fb02 f203 	mul.w	r2, r2, r3
 80025cc:	464b      	mov	r3, r9
 80025ce:	4621      	mov	r1, r4
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	4622      	mov	r2, r4
 80025d8:	4641      	mov	r1, r8
 80025da:	fba2 ab01 	umull	sl, fp, r2, r1
 80025de:	445b      	add	r3, fp
 80025e0:	469b      	mov	fp, r3
 80025e2:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 80025e6:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 80025ea:	e07d      	b.n	80026e8 <SearchDatarateME+0x250>
  }
  else {
    tgt=((uint64_t)lDatarate)<<(33-uDrE);
 80025ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025f0:	2200      	movs	r2, #0
 80025f2:	4698      	mov	r8, r3
 80025f4:	4691      	mov	r9, r2
 80025f6:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 80025fa:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 80025fe:	f1a1 0320 	sub.w	r3, r1, #32
 8002602:	f1c1 0220 	rsb	r2, r1, #32
 8002606:	fa09 f501 	lsl.w	r5, r9, r1
 800260a:	fa08 f303 	lsl.w	r3, r8, r3
 800260e:	431d      	orrs	r5, r3
 8002610:	fa28 f202 	lsr.w	r2, r8, r2
 8002614:	4315      	orrs	r5, r2
 8002616:	fa08 f401 	lsl.w	r4, r8, r1
 800261a:	e9c7 4526 	strd	r4, r5, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)((tgt/f_dig)-65536);
 800261e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002622:	2200      	movs	r2, #0
 8002624:	633b      	str	r3, [r7, #48]	@ 0x30
 8002626:	637a      	str	r2, [r7, #52]	@ 0x34
 8002628:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800262c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002630:	f7fe faca 	bl	8000bc8 <__aeabi_uldivmod>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	b293      	uxth	r3, r2
 800263a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800263e:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*((*pcM)+65536);
 8002640:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002644:	2200      	movs	r2, #0
 8002646:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002648:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800264a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002654:	17da      	asrs	r2, r3, #31
 8002656:	623b      	str	r3, [r7, #32]
 8002658:	627a      	str	r2, [r7, #36]	@ 0x24
 800265a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 800265e:	462b      	mov	r3, r5
 8002660:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002664:	4642      	mov	r2, r8
 8002666:	fb02 f203 	mul.w	r2, r2, r3
 800266a:	464b      	mov	r3, r9
 800266c:	4621      	mov	r1, r4
 800266e:	fb01 f303 	mul.w	r3, r1, r3
 8002672:	4413      	add	r3, r2
 8002674:	4622      	mov	r2, r4
 8002676:	4641      	mov	r1, r8
 8002678:	fba2 1201 	umull	r1, r2, r2, r1
 800267c:	677a      	str	r2, [r7, #116]	@ 0x74
 800267e:	460a      	mov	r2, r1
 8002680:	673a      	str	r2, [r7, #112]	@ 0x70
 8002682:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002684:	4413      	add	r3, r2
 8002686:	677b      	str	r3, [r7, #116]	@ 0x74
 8002688:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 800268c:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 8002690:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1+65536);
 8002694:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002698:	2200      	movs	r2, #0
 800269a:	61bb      	str	r3, [r7, #24]
 800269c:	61fa      	str	r2, [r7, #28]
 800269e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 80026a8:	17da      	asrs	r2, r3, #31
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	617a      	str	r2, [r7, #20]
 80026ae:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80026b2:	462b      	mov	r3, r5
 80026b4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80026b8:	4642      	mov	r2, r8
 80026ba:	fb02 f203 	mul.w	r2, r2, r3
 80026be:	464b      	mov	r3, r9
 80026c0:	4621      	mov	r1, r4
 80026c2:	fb01 f303 	mul.w	r3, r1, r3
 80026c6:	4413      	add	r3, r2
 80026c8:	4622      	mov	r2, r4
 80026ca:	4641      	mov	r1, r8
 80026cc:	fba2 1201 	umull	r1, r2, r2, r1
 80026d0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80026d2:	460a      	mov	r2, r1
 80026d4:	66ba      	str	r2, [r7, #104]	@ 0x68
 80026d6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80026d8:	4413      	add	r3, r2
 80026da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80026dc:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 80026e0:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
 80026e4:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
  }


  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 80026e8:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80026ec:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 80026f0:	1a84      	subs	r4, r0, r2
 80026f2:	60bc      	str	r4, [r7, #8]
 80026f4:	eb61 0303 	sbc.w	r3, r1, r3
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80026fe:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8002702:	1a84      	subs	r4, r0, r2
 8002704:	603c      	str	r4, [r7, #0]
 8002706:	eb61 0303 	sbc.w	r3, r1, r3
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002710:	4623      	mov	r3, r4
 8002712:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002716:	4602      	mov	r2, r0
 8002718:	4293      	cmp	r3, r2
 800271a:	462b      	mov	r3, r5
 800271c:	460a      	mov	r2, r1
 800271e:	4193      	sbcs	r3, r2
 8002720:	d205      	bcs.n	800272e <SearchDatarateME+0x296>
 8002722:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	3301      	adds	r3, #1
 800272a:	b29b      	uxth	r3, r3
 800272c:	e002      	b.n	8002734 <SearchDatarateME+0x29c>
 800272e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002738:	8013      	strh	r3, [r2, #0]

}
 800273a:	bf00      	nop
 800273c:	37b8      	adds	r7, #184	@ 0xb8
 800273e:	46bd      	mov	sp, r7
 8002740:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002744:	02faf080 	.word	0x02faf080
 8002748:	01c9c380 	.word	0x01c9c380

0800274c <ComputeFreqDeviation>:

uint32_t ComputeFreqDeviation(uint8_t cM, uint8_t cE, uint8_t bs, uint8_t refdiv)
{
 800274c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002750:	b08c      	sub	sp, #48	@ 0x30
 8002752:	af00      	add	r7, sp, #0
 8002754:	461e      	mov	r6, r3
 8002756:	4603      	mov	r3, r0
 8002758:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800275c:	460b      	mov	r3, r1
 800275e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002762:	4613      	mov	r3, r2
 8002764:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8002768:	4633      	mov	r3, r6
 800276a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint32_t f_xo=XTAL_FREQ;
 800276e:	4b35      	ldr	r3, [pc, #212]	@ (8002844 <ComputeFreqDeviation+0xf8>)
 8002770:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if(cE==0) {
 8002772:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002776:	2b00      	cmp	r3, #0
 8002778:	d127      	bne.n	80027ca <ComputeFreqDeviation+0x7e>
    return (uint32_t)(((uint64_t)f_xo*cM)>>22);
 800277a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800277c:	2200      	movs	r2, #0
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	617a      	str	r2, [r7, #20]
 8002782:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002786:	2200      	movs	r2, #0
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	60fa      	str	r2, [r7, #12]
 800278c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002790:	462b      	mov	r3, r5
 8002792:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002796:	4642      	mov	r2, r8
 8002798:	fb02 f203 	mul.w	r2, r2, r3
 800279c:	464b      	mov	r3, r9
 800279e:	4621      	mov	r1, r4
 80027a0:	fb01 f303 	mul.w	r3, r1, r3
 80027a4:	4413      	add	r3, r2
 80027a6:	4622      	mov	r2, r4
 80027a8:	4641      	mov	r1, r8
 80027aa:	fba2 ab01 	umull	sl, fp, r2, r1
 80027ae:	445b      	add	r3, fp
 80027b0:	469b      	mov	fp, r3
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	ea4f 529a 	mov.w	r2, sl, lsr #22
 80027be:	ea42 228b 	orr.w	r2, r2, fp, lsl #10
 80027c2:	ea4f 539b 	mov.w	r3, fp, lsr #22
 80027c6:	4613      	mov	r3, r2
 80027c8:	e036      	b.n	8002838 <ComputeFreqDeviation+0xec>
  }

  return (uint32_t)(((uint64_t)f_xo*(256+cM))>>(23-cE));
 80027ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027cc:	2200      	movs	r2, #0
 80027ce:	603b      	str	r3, [r7, #0]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80027d6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80027da:	17da      	asrs	r2, r3, #31
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	61fa      	str	r2, [r7, #28]
 80027e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027e4:	460b      	mov	r3, r1
 80027e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80027ea:	4652      	mov	r2, sl
 80027ec:	fb02 f203 	mul.w	r2, r2, r3
 80027f0:	e9c7 ab06 	strd	sl, fp, [r7, #24]
 80027f4:	465b      	mov	r3, fp
 80027f6:	4682      	mov	sl, r0
 80027f8:	468b      	mov	fp, r1
 80027fa:	4651      	mov	r1, sl
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	4652      	mov	r2, sl
 8002804:	69b9      	ldr	r1, [r7, #24]
 8002806:	fba2 4501 	umull	r4, r5, r2, r1
 800280a:	442b      	add	r3, r5
 800280c:	461d      	mov	r5, r3
 800280e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002812:	f1c3 0317 	rsb	r3, r3, #23
 8002816:	f1c3 0120 	rsb	r1, r3, #32
 800281a:	f1a3 0220 	sub.w	r2, r3, #32
 800281e:	fa24 f803 	lsr.w	r8, r4, r3
 8002822:	fa05 f101 	lsl.w	r1, r5, r1
 8002826:	ea48 0801 	orr.w	r8, r8, r1
 800282a:	fa25 f202 	lsr.w	r2, r5, r2
 800282e:	ea48 0802 	orr.w	r8, r8, r2
 8002832:	fa25 f903 	lsr.w	r9, r5, r3
 8002836:	4643      	mov	r3, r8
}
 8002838:	4618      	mov	r0, r3
 800283a:	3730      	adds	r7, #48	@ 0x30
 800283c:	46bd      	mov	sp, r7
 800283e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002842:	4770      	bx	lr
 8002844:	02faf080 	.word	0x02faf080

08002848 <SearchFreqDevME>:

void SearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8002848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800284c:	b0a2      	sub	sp, #136	@ 0x88
 800284e:	af00      	add	r7, sp, #0
 8002850:	65f8      	str	r0, [r7, #92]	@ 0x5c
 8002852:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002854:	657a      	str	r2, [r7, #84]	@ 0x54
  uint8_t uFDevE, bs = 4, refdiv = 1;
 8002856:	2304      	movs	r3, #4
 8002858:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800285c:	2301      	movs	r3, #1
 800285e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  uint32_t lFDevTmp;
  uint64_t tgt1,tgt2,tgt;

  /* Search the exponent of the frequency deviation value */
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8002862:	2300      	movs	r3, #0
 8002864:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002868:	e012      	b.n	8002890 <SearchFreqDevME+0x48>
    lFDevTmp = ComputeFreqDeviation(255, uFDevE, bs, refdiv);
 800286a:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800286e:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8002872:	f897 1087 	ldrb.w	r1, [r7, #135]	@ 0x87
 8002876:	20ff      	movs	r0, #255	@ 0xff
 8002878:	f7ff ff68 	bl	800274c <ComputeFreqDeviation>
 800287c:	6638      	str	r0, [r7, #96]	@ 0x60
    if(lFDev<lFDevTmp)
 800287e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002880:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002882:	429a      	cmp	r2, r3
 8002884:	d309      	bcc.n	800289a <SearchFreqDevME+0x52>
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 8002886:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800288a:	3301      	adds	r3, #1
 800288c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8002890:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002894:	2b0c      	cmp	r3, #12
 8002896:	d1e8      	bne.n	800286a <SearchFreqDevME+0x22>
 8002898:	e000      	b.n	800289c <SearchFreqDevME+0x54>
      break;
 800289a:	bf00      	nop
  }
  (*pcE) = (uint8_t)uFDevE;
 800289c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800289e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80028a2:	7013      	strb	r3, [r2, #0]

  if(uFDevE==0)
 80028a4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d155      	bne.n	8002958 <SearchFreqDevME+0x110>
  {
    tgt=((uint64_t)lFDev)<<22;
 80028ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80028ae:	2200      	movs	r2, #0
 80028b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 80028c0:	4629      	mov	r1, r5
 80028c2:	058b      	lsls	r3, r1, #22
 80028c4:	4621      	mov	r1, r4
 80028c6:	ea43 2391 	orr.w	r3, r3, r1, lsr #10
 80028ca:	4621      	mov	r1, r4
 80028cc:	058a      	lsls	r2, r1, #22
 80028ce:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ);
 80028d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80028d6:	a36e      	add	r3, pc, #440	@ (adr r3, 8002a90 <SearchFreqDevME+0x248>)
 80028d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028dc:	f7fe f974 	bl	8000bc8 <__aeabi_uldivmod>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	b2d3      	uxtb	r3, r2
 80028e6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80028e8:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*(*pcM);
 80028ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2200      	movs	r2, #0
 80028f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80028f4:	637a      	str	r2, [r7, #52]	@ 0x34
 80028f6:	4b68      	ldr	r3, [pc, #416]	@ (8002a98 <SearchFreqDevME+0x250>)
 80028f8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028fc:	462a      	mov	r2, r5
 80028fe:	fb03 f202 	mul.w	r2, r3, r2
 8002902:	2300      	movs	r3, #0
 8002904:	4621      	mov	r1, r4
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	4a62      	ldr	r2, [pc, #392]	@ (8002a98 <SearchFreqDevME+0x250>)
 800290e:	4621      	mov	r1, r4
 8002910:	fba1 ab02 	umull	sl, fp, r1, r2
 8002914:	445b      	add	r3, fp
 8002916:	469b      	mov	fp, r3
 8002918:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
 800291c:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1);
 8002920:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	3301      	adds	r3, #1
 8002926:	17da      	asrs	r2, r3, #31
 8002928:	62bb      	str	r3, [r7, #40]	@ 0x28
 800292a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800292c:	4b5a      	ldr	r3, [pc, #360]	@ (8002a98 <SearchFreqDevME+0x250>)
 800292e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002932:	462a      	mov	r2, r5
 8002934:	fb03 f202 	mul.w	r2, r3, r2
 8002938:	2300      	movs	r3, #0
 800293a:	4621      	mov	r1, r4
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	4413      	add	r3, r2
 8002942:	4a55      	ldr	r2, [pc, #340]	@ (8002a98 <SearchFreqDevME+0x250>)
 8002944:	4621      	mov	r1, r4
 8002946:	fba1 8902 	umull	r8, r9, r1, r2
 800294a:	444b      	add	r3, r9
 800294c:	4699      	mov	r9, r3
 800294e:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 8002952:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 8002956:	e06d      	b.n	8002a34 <SearchFreqDevME+0x1ec>
  }
  else
  {
    tgt=((uint64_t)lFDev)<<(23-uFDevE);
 8002958:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800295a:	2200      	movs	r2, #0
 800295c:	623b      	str	r3, [r7, #32]
 800295e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002960:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8002964:	f1c3 0117 	rsb	r1, r3, #23
 8002968:	f1a1 0320 	sub.w	r3, r1, #32
 800296c:	f1c1 0220 	rsb	r2, r1, #32
 8002970:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002974:	4648      	mov	r0, r9
 8002976:	fa00 f501 	lsl.w	r5, r0, r1
 800297a:	4640      	mov	r0, r8
 800297c:	fa00 f303 	lsl.w	r3, r0, r3
 8002980:	431d      	orrs	r5, r3
 8002982:	4643      	mov	r3, r8
 8002984:	fa23 f202 	lsr.w	r2, r3, r2
 8002988:	4315      	orrs	r5, r2
 800298a:	4643      	mov	r3, r8
 800298c:	408b      	lsls	r3, r1
 800298e:	461c      	mov	r4, r3
 8002990:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ)-256;
 8002994:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002998:	a33d      	add	r3, pc, #244	@ (adr r3, 8002a90 <SearchFreqDevME+0x248>)
 800299a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299e:	f7fe f913 	bl	8000bc8 <__aeabi_uldivmod>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	b2d3      	uxtb	r3, r2
 80029a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80029aa:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*((*pcM)+256);
 80029ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80029b4:	17da      	asrs	r2, r3, #31
 80029b6:	61bb      	str	r3, [r7, #24]
 80029b8:	61fa      	str	r2, [r7, #28]
 80029ba:	4b37      	ldr	r3, [pc, #220]	@ (8002a98 <SearchFreqDevME+0x250>)
 80029bc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80029c0:	462a      	mov	r2, r5
 80029c2:	fb03 f202 	mul.w	r2, r3, r2
 80029c6:	2300      	movs	r3, #0
 80029c8:	4621      	mov	r1, r4
 80029ca:	fb01 f303 	mul.w	r3, r1, r3
 80029ce:	4413      	add	r3, r2
 80029d0:	4a31      	ldr	r2, [pc, #196]	@ (8002a98 <SearchFreqDevME+0x250>)
 80029d2:	4621      	mov	r1, r4
 80029d4:	fba1 1202 	umull	r1, r2, r1, r2
 80029d8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80029da:	460a      	mov	r2, r1
 80029dc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80029de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029e0:	4413      	add	r3, r2
 80029e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029e4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 80029e8:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
 80029ec:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1+256);
 80029f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	f203 1301 	addw	r3, r3, #257	@ 0x101
 80029f8:	17da      	asrs	r2, r3, #31
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	617a      	str	r2, [r7, #20]
 80029fe:	4b26      	ldr	r3, [pc, #152]	@ (8002a98 <SearchFreqDevME+0x250>)
 8002a00:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002a04:	462a      	mov	r2, r5
 8002a06:	fb03 f202 	mul.w	r2, r3, r2
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	4621      	mov	r1, r4
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	4a20      	ldr	r2, [pc, #128]	@ (8002a98 <SearchFreqDevME+0x250>)
 8002a16:	4621      	mov	r1, r4
 8002a18:	fba1 1202 	umull	r1, r2, r1, r2
 8002a1c:	647a      	str	r2, [r7, #68]	@ 0x44
 8002a1e:	460a      	mov	r2, r1
 8002a20:	643a      	str	r2, [r7, #64]	@ 0x40
 8002a22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a24:	4413      	add	r3, r2
 8002a26:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a28:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8002a2c:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
 8002a30:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
  }

  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 8002a34:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002a38:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002a3c:	1a84      	subs	r4, r0, r2
 8002a3e:	60bc      	str	r4, [r7, #8]
 8002a40:	eb61 0303 	sbc.w	r3, r1, r3
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a4a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002a4e:	1a84      	subs	r4, r0, r2
 8002a50:	603c      	str	r4, [r7, #0]
 8002a52:	eb61 0303 	sbc.w	r3, r1, r3
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a5c:	4623      	mov	r3, r4
 8002a5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a62:	4602      	mov	r2, r0
 8002a64:	4293      	cmp	r3, r2
 8002a66:	462b      	mov	r3, r5
 8002a68:	460a      	mov	r2, r1
 8002a6a:	4193      	sbcs	r3, r2
 8002a6c:	d204      	bcs.n	8002a78 <SearchFreqDevME+0x230>
 8002a6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	3301      	adds	r3, #1
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	e001      	b.n	8002a7c <SearchFreqDevME+0x234>
 8002a78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a7e:	7013      	strb	r3, [r2, #0]
}
 8002a80:	bf00      	nop
 8002a82:	3788      	adds	r7, #136	@ 0x88
 8002a84:	46bd      	mov	sp, r7
 8002a86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a8a:	bf00      	nop
 8002a8c:	f3af 8000 	nop.w
 8002a90:	02faf080 	.word	0x02faf080
 8002a94:	00000000 	.word	0x00000000
 8002a98:	02faf080 	.word	0x02faf080

08002a9c <S2LP_SetModulation>:
*         [100 500000].
*         Frequency deviation expressed in Hz.
* @retval None.
*/
void S2LP_SetModulation(uint8_t mod_type, uint32_t datarate, uint32_t fdev)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	73fb      	strb	r3, [r7, #15]
  uint8_t dr_e;
  uint16_t dr_m;
  uint8_t uFDevM, uFDevE;

  /* Calculates the datarate mantissa and exponent */
  SearchDatarateME(datarate, &dr_m, &dr_e);
 8002aaa:	f107 0217 	add.w	r2, r7, #23
 8002aae:	f107 0314 	add.w	r3, r7, #20
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	68b8      	ldr	r0, [r7, #8]
 8002ab6:	f7ff fcef 	bl	8002498 <SearchDatarateME>
  /* Calculates the frequency deviation mantissa and exponent */
  SearchFreqDevME(fdev, &uFDevM, &uFDevE);
 8002aba:	f107 0212 	add.w	r2, r7, #18
 8002abe:	f107 0313 	add.w	r3, r7, #19
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff febf 	bl	8002848 <SearchFreqDevME>

  S2LP_WriteReg(MOD4_ADDR, (uint8_t)(dr_m >> 8), NULL);
 8002aca:	8abb      	ldrh	r3, [r7, #20]
 8002acc:	0a1b      	lsrs	r3, r3, #8
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	200e      	movs	r0, #14
 8002ad8:	f7ff f8c4 	bl	8001c64 <S2LP_WriteReg>
  S2LP_WriteReg(MOD3_ADDR, (uint8_t)dr_m, NULL);
 8002adc:	8abb      	ldrh	r3, [r7, #20]
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	200f      	movs	r0, #15
 8002ae6:	f7ff f8bd 	bl	8001c64 <S2LP_WriteReg>
  S2LP_WriteReg(MOD2_ADDR, mod_type | dr_e, NULL);
 8002aea:	7dfa      	ldrb	r2, [r7, #23]
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2200      	movs	r2, #0
 8002af4:	4619      	mov	r1, r3
 8002af6:	2010      	movs	r0, #16
 8002af8:	f7ff f8b4 	bl	8001c64 <S2LP_WriteReg>

  S2LP_WriteReg(MOD0_ADDR, uFDevM, NULL);
 8002afc:	7cfb      	ldrb	r3, [r7, #19]
 8002afe:	2200      	movs	r2, #0
 8002b00:	4619      	mov	r1, r3
 8002b02:	2012      	movs	r0, #18
 8002b04:	f7ff f8ae 	bl	8001c64 <S2LP_WriteReg>
  S2LP_WriteReg(MOD1_ADDR, uFDevE, NULL);
 8002b08:	7cbb      	ldrb	r3, [r7, #18]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	2011      	movs	r0, #17
 8002b10:	f7ff f8a8 	bl	8001c64 <S2LP_WriteReg>
}
 8002b14:	bf00      	nop
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <S2LP_SetPALeveldBm>:

void S2LP_SetPALeveldBm(int32_t lPowerdBm)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint8_t paLevelValue;
  if(lPowerdBm> 14)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b0e      	cmp	r3, #14
 8002b28:	dd02      	ble.n	8002b30 <S2LP_SetPALeveldBm+0x14>
  {
    paLevelValue = 1;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	73fb      	strb	r3, [r7, #15]
 8002b2e:	e006      	b.n	8002b3e <S2LP_SetPALeveldBm+0x22>
  }
  else {
    paLevelValue = (uint8_t)((int32_t)29-2*lPowerdBm);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f1c3 031d 	rsb	r3, r3, #29
 8002b3c:	73fb      	strb	r3, [r7, #15]
  }

  S2LP_WriteReg(PA_POWER0_ADDR, 0, NULL);
 8002b3e:	2200      	movs	r2, #0
 8002b40:	2100      	movs	r1, #0
 8002b42:	2062      	movs	r0, #98	@ 0x62
 8002b44:	f7ff f88e 	bl	8001c64 <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR+1, 0, NULL); // disable degeneration mode
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	2064      	movs	r0, #100	@ 0x64
 8002b4e:	f7ff f889 	bl	8001c64 <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR, 0, NULL); // disable Tx Bessel FIR
 8002b52:	2200      	movs	r2, #0
 8002b54:	2100      	movs	r1, #0
 8002b56:	2063      	movs	r0, #99	@ 0x63
 8002b58:	f7ff f884 	bl	8001c64 <S2LP_WriteReg>
  S2LP_WriteReg(PA_POWER1_ADDR, paLevelValue, NULL);
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	4619      	mov	r1, r3
 8002b62:	2061      	movs	r0, #97	@ 0x61
 8002b64:	f7ff f87e 	bl	8001c64 <S2LP_WriteReg>
}
 8002b68:	bf00      	nop
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <S2LP_Init>:

	return HAL_OK;
}

HAL_StatusTypeDef S2LP_Init(SPI_HandleTypeDef *spi_handle)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	gSPI = spi_handle;
 8002b78:	4a48      	ldr	r2, [pc, #288]	@ (8002c9c <S2LP_Init+0x12c>)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6013      	str	r3, [r2, #0]
	uint32_t ncycles_start = HAL_RCC_GetHCLKFreq()/9600;
 8002b7e:	f002 fc27 	bl	80053d0 <HAL_RCC_GetHCLKFreq>
 8002b82:	4603      	mov	r3, r0
 8002b84:	4a46      	ldr	r2, [pc, #280]	@ (8002ca0 <S2LP_Init+0x130>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	0a9b      	lsrs	r3, r3, #10
 8002b8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b8e:	b672      	cpsid	i
}
 8002b90:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_RESET); // Power up S2LP
 8002b92:	2200      	movs	r2, #0
 8002b94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b98:	4842      	ldr	r0, [pc, #264]	@ (8002ca4 <S2LP_Init+0x134>)
 8002b9a:	f001 ff55 	bl	8004a48 <HAL_GPIO_WritePin>
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	e003      	b.n	8002bac <S2LP_Init+0x3c>
		asm volatile("nop");
 8002ba4:	bf00      	nop
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d3f7      	bcc.n	8002ba4 <S2LP_Init+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 8002bb4:	b662      	cpsie	i
}
 8002bb6:	bf00      	nop
	__enable_irq();

	S2LP_WriteReg(GPIO0_CONF_ADDR, 3, NULL); // Set GPIO as interrupt line
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2103      	movs	r1, #3
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f7ff f851 	bl	8001c64 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK0_ADDR, 0x80 | 0x20 | 0x04, NULL); // Enable "Tx Data sent" and "TX FIFO almost full" interrupts
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	21a4      	movs	r1, #164	@ 0xa4
 8002bc6:	2053      	movs	r0, #83	@ 0x53
 8002bc8:	f7ff f84c 	bl	8001c64 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK1_ADDR, 0x01, NULL); // Enable "TX FIFO almost empty" interrupt
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2101      	movs	r1, #1
 8002bd0:	2052      	movs	r0, #82	@ 0x52
 8002bd2:	f7ff f847 	bl	8001c64 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK2_ADDR, 0x00, NULL);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2100      	movs	r1, #0
 8002bda:	2051      	movs	r0, #81	@ 0x51
 8002bdc:	f7ff f842 	bl	8001c64 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK3_ADDR, 0x00, NULL);
 8002be0:	2200      	movs	r2, #0
 8002be2:	2100      	movs	r1, #0
 8002be4:	2050      	movs	r0, #80	@ 0x50
 8002be6:	f7ff f83d 	bl	8001c64 <S2LP_WriteReg>
	S2LP_WriteReg(FIFO_CONFIG0_ADDR, FIFO_EMPTY_THRESH * FIFO_CHUNK_SIZE, NULL);
 8002bea:	2200      	movs	r2, #0
 8002bec:	2120      	movs	r1, #32
 8002bee:	203f      	movs	r0, #63	@ 0x3f
 8002bf0:	f7ff f838 	bl	8001c64 <S2LP_WriteReg>

	// Change sync word bytes
	S2LP_WriteReg(SYNC3_ADDR, 0xB7, NULL);
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	21b7      	movs	r1, #183	@ 0xb7
 8002bf8:	2033      	movs	r0, #51	@ 0x33
 8002bfa:	f7ff f833 	bl	8001c64 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC2_ADDR, 0x54, NULL);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2154      	movs	r1, #84	@ 0x54
 8002c02:	2034      	movs	r0, #52	@ 0x34
 8002c04:	f7ff f82e 	bl	8001c64 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC1_ADDR, 0x2A, NULL);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	212a      	movs	r1, #42	@ 0x2a
 8002c0c:	2035      	movs	r0, #53	@ 0x35
 8002c0e:	f7ff f829 	bl	8001c64 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC0_ADDR, 0x3E, NULL);
 8002c12:	2200      	movs	r2, #0
 8002c14:	213e      	movs	r1, #62	@ 0x3e
 8002c16:	2036      	movs	r0, #54	@ 0x36
 8002c18:	f7ff f824 	bl	8001c64 <S2LP_WriteReg>

	// PLL and PA configuration
	S2LP_PLLConf(BASE_FREQ);
 8002c1c:	4822      	ldr	r0, [pc, #136]	@ (8002ca8 <S2LP_Init+0x138>)
 8002c1e:	f7ff fa8f 	bl	8002140 <S2LP_PLLConf>
	S2LP_SetPALeveldBm(PA_LEVEL);
 8002c22:	2000      	movs	r0, #0
 8002c24:	f7ff ff7a 	bl	8002b1c <S2LP_SetPALeveldBm>

	// Modulation and packet configuration
	S2LP_SetModulation(MOD_2FSK, DATARATE, FREQDEV);
 8002c28:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8002c2c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8002c30:	2000      	movs	r0, #0
 8002c32:	f7ff ff33 	bl	8002a9c <S2LP_SetModulation>
	S2LP_WriteReg(PCKTCTRL1_ADDR, 0x20, NULL); // No whitening, CRC with poly 0x07
 8002c36:	2200      	movs	r2, #0
 8002c38:	2120      	movs	r1, #32
 8002c3a:	2030      	movs	r0, #48	@ 0x30
 8002c3c:	f7ff f812 	bl	8001c64 <S2LP_WriteReg>
	S2LP_WriteReg(PCKTCTRL3_ADDR, 0x00, NULL); // Enable basic packet structure
 8002c40:	2200      	movs	r2, #0
 8002c42:	2100      	movs	r1, #0
 8002c44:	202e      	movs	r0, #46	@ 0x2e
 8002c46:	f7ff f80d 	bl	8001c64 <S2LP_WriteReg>

	S2LPStatus radio_status;
	uint8_t rco_conf;
	HAL_StatusTypeDef err = S2LP_ReadReg(XO_RCO_CONF1_ADDR, &rco_conf, &radio_status); // fetch radio state
 8002c4a:	f107 020c 	add.w	r2, r7, #12
 8002c4e:	f107 030b 	add.w	r3, r7, #11
 8002c52:	4619      	mov	r1, r3
 8002c54:	206c      	movs	r0, #108	@ 0x6c
 8002c56:	f7fe ffc7 	bl	8001be8 <S2LP_ReadReg>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	73fb      	strb	r3, [r7, #15]
	if (err) {
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <S2LP_Init+0xf8>
		return err;
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	e015      	b.n	8002c94 <S2LP_Init+0x124>
	} else if (rco_conf != 0x45) {
 8002c68:	7afb      	ldrb	r3, [r7, #11]
 8002c6a:	2b45      	cmp	r3, #69	@ 0x45
 8002c6c:	d006      	beq.n	8002c7c <S2LP_Init+0x10c>
		DEBUG_PRINT("[S2LP] Error: XO_RCO_CONF1 register is invalid (0x%X instead of 0x45), faulty SPI bus?\r\n", rco_conf);
 8002c6e:	7afb      	ldrb	r3, [r7, #11]
 8002c70:	4619      	mov	r1, r3
 8002c72:	480e      	ldr	r0, [pc, #56]	@ (8002cac <S2LP_Init+0x13c>)
 8002c74:	f006 f8c6 	bl	8008e04 <iprintf>
		return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e00b      	b.n	8002c94 <S2LP_Init+0x124>
	}

	if (radio_status.MC_STATE != MC_STATE_READY) {
 8002c7c:	7b7b      	ldrb	r3, [r7, #13]
 8002c7e:	f023 0301 	bic.w	r3, r3, #1
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d004      	beq.n	8002c92 <S2LP_Init+0x122>
		DEBUG_PRINT("[S2LP] Error: radio is not ready after initialization\r\n");
 8002c88:	4809      	ldr	r0, [pc, #36]	@ (8002cb0 <S2LP_Init+0x140>)
 8002c8a:	f006 f923 	bl	8008ed4 <puts>
		return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <S2LP_Init+0x124>
	}

	return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	20003a44 	.word	0x20003a44
 8002ca0:	1b4e81b5 	.word	0x1b4e81b5
 8002ca4:	48001400 	.word	0x48001400
 8002ca8:	33611380 	.word	0x33611380
 8002cac:	0800b170 	.word	0x0800b170
 8002cb0:	0800b1cc 	.word	0x0800b1cc

08002cb4 <S2LP_IRQ_Handler>:

void S2LP_IRQ_Handler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
	uint8_t irq_status1, irq_status0;
	S2LP_ReadReg(IRQ_STATUS1_ADDR, &irq_status1, NULL);
 8002cba:	1dfb      	adds	r3, r7, #7
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	20fc      	movs	r0, #252	@ 0xfc
 8002cc2:	f7fe ff91 	bl	8001be8 <S2LP_ReadReg>
	S2LP_ReadReg(IRQ_STATUS0_ADDR, &irq_status0, NULL);
 8002cc6:	1dbb      	adds	r3, r7, #6
 8002cc8:	2200      	movs	r2, #0
 8002cca:	4619      	mov	r1, r3
 8002ccc:	20fd      	movs	r0, #253	@ 0xfd
 8002cce:	f7fe ff8b 	bl	8001be8 <S2LP_ReadReg>

	if (irq_status1 & 0x01) // TX FIFO almost empty
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <S2LP_IRQ_Handler+0x2e>
		fifo_almost_empty = 1;
 8002cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d0c <S2LP_IRQ_Handler+0x58>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x20) // TX/RX FIFO underflow or overflow
 8002ce2:	79bb      	ldrb	r3, [r7, #6]
 8002ce4:	f003 0320 	and.w	r3, r3, #32
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <S2LP_IRQ_Handler+0x3e>
		underflow = 1;
 8002cec:	4b08      	ldr	r3, [pc, #32]	@ (8002d10 <S2LP_IRQ_Handler+0x5c>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x04) // Packet transmitted
 8002cf2:	79bb      	ldrb	r3, [r7, #6]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <S2LP_IRQ_Handler+0x4e>
		packet_sent = 1;
 8002cfc:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <S2LP_IRQ_Handler+0x60>)
 8002cfe:	2201      	movs	r2, #1
 8002d00:	701a      	strb	r2, [r3, #0]
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20003a41 	.word	0x20003a41
 8002d10:	20003a42 	.word	0x20003a42
 8002d14:	20003a40 	.word	0x20003a40

08002d18 <Spectrogram_Format>:
q15_t buf_fft[2*SAMPLES_PER_MELVEC  ]; // Double size (real|imag) buffer needed for arm_rfft_q15
q15_t buf_tmp[  SAMPLES_PER_MELVEC/2]; // Intermediate buffer for arm_mat_mult_fast_q15

// Convert 12-bit DC ADC samples to Q1.15 fixed point signal and remove DC component
void Spectrogram_Format(q15_t *buf)
{
 8002d18:	b510      	push	{r4, lr}
 8002d1a:	4604      	mov	r4, r0
	start_cycle_count();
 8002d1c:	f000 fa7e 	bl	800321c <start_cycle_count>
	// That way, the value of buf[i] is in [0 , 2**15 - 1]

	// /!\ When multiplying/dividing by a power 2, always prefer shifting left/right instead, ARM instructions to do so are more efficient.
	// Here we should shift left by 3.

	arm_shift_q15(buf, 3, buf, SAMPLES_PER_MELVEC);
 8002d20:	4622      	mov	r2, r4
 8002d22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d26:	2103      	movs	r1, #3
 8002d28:	4620      	mov	r0, r4
 8002d2a:	f004 fd9f 	bl	800786c <arm_shift_q15>
	stop_cycle_count("0.1");
 8002d2e:	4808      	ldr	r0, [pc, #32]	@ (8002d50 <Spectrogram_Format+0x38>)
 8002d30:	f000 fa76 	bl	8003220 <stop_cycle_count>
	start_cycle_count();
 8002d34:	f000 fa72 	bl	800321c <start_cycle_count>

	// Since we use a signed representation, we should now center the value around zero, we can do this by substracting 2**14.
	// Now the value of buf[i] is in [-2**14 , 2**14 - 1]

	q15_t offset = -(1 << 14);
	arm_offset_q15(buf, offset, buf, SAMPLES_PER_MELVEC);
 8002d38:	4620      	mov	r0, r4
 8002d3a:	4622      	mov	r2, r4
 8002d3c:	4905      	ldr	r1, [pc, #20]	@ (8002d54 <Spectrogram_Format+0x3c>)
 8002d3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d42:	f004 fe25 	bl	8007990 <arm_offset_q15>

//	for(uint16_t i=0; i < SAMPLES_PER_MELVEC; i++) { // Remove DC component
//		buf[i] -= (1 << 14);
//	}
	stop_cycle_count("0.2");
}
 8002d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	stop_cycle_count("0.2");
 8002d4a:	4803      	ldr	r0, [pc, #12]	@ (8002d58 <Spectrogram_Format+0x40>)
 8002d4c:	f000 ba68 	b.w	8003220 <stop_cycle_count>
 8002d50:	0800b3f4 	.word	0x0800b3f4
 8002d54:	ffffc000 	.word	0xffffc000
 8002d58:	0800b3f8 	.word	0x0800b3f8

08002d5c <Spectrogram_Compute>:

// Compute spectrogram of samples and transform into MEL vectors.
void Spectrogram_Compute(q15_t *samples, q15_t *melvec)
{
 8002d5c:	b530      	push	{r4, r5, lr}
 8002d5e:	4604      	mov	r4, r0
 8002d60:	b08f      	sub	sp, #60	@ 0x3c
 8002d62:	460d      	mov	r5, r1
	start_cycle_count();
 8002d64:	f000 fa5a 	bl	800321c <start_cycle_count>
	// STEP 1  : Windowing of input samples
	//           --> Pointwise product
	//           Complexity: O(N)
	//           Number of cycles: < >
	arm_mult_q15(samples, hamming_window, buf, SAMPLES_PER_MELVEC);
 8002d68:	4a3d      	ldr	r2, [pc, #244]	@ (8002e60 <Spectrogram_Compute+0x104>)
 8002d6a:	493e      	ldr	r1, [pc, #248]	@ (8002e64 <Spectrogram_Compute+0x108>)
 8002d6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d70:	4620      	mov	r0, r4
 8002d72:	f004 fe41 	bl	80079f8 <arm_mult_q15>
	stop_cycle_count("1");
 8002d76:	483c      	ldr	r0, [pc, #240]	@ (8002e68 <Spectrogram_Compute+0x10c>)
 8002d78:	4c3c      	ldr	r4, [pc, #240]	@ (8002e6c <Spectrogram_Compute+0x110>)
 8002d7a:	f000 fa51 	bl	8003220 <stop_cycle_count>
	start_cycle_count();
 8002d7e:	f000 fa4d 	bl	800321c <start_cycle_count>
	//           Number of cycles: < >

	// Since the FFT is a recursive algorithm, the values are rescaled in the function to ensure that overflow cannot happen.
	arm_rfft_instance_q15 rfft_inst;

	arm_rfft_init_q15(&rfft_inst, SAMPLES_PER_MELVEC, 0, 1);
 8002d82:	2301      	movs	r3, #1
 8002d84:	2200      	movs	r2, #0
 8002d86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d8a:	a808      	add	r0, sp, #32
 8002d8c:	f004 fa42 	bl	8007214 <arm_rfft_init_q15>

	arm_rfft_q15(&rfft_inst, buf, buf_fft);
 8002d90:	4a37      	ldr	r2, [pc, #220]	@ (8002e70 <Spectrogram_Compute+0x114>)
 8002d92:	4933      	ldr	r1, [pc, #204]	@ (8002e60 <Spectrogram_Compute+0x104>)
 8002d94:	a808      	add	r0, sp, #32
 8002d96:	f004 f9c1 	bl	800711c <arm_rfft_q15>
	stop_cycle_count("2");
 8002d9a:	4836      	ldr	r0, [pc, #216]	@ (8002e74 <Spectrogram_Compute+0x118>)
 8002d9c:	f000 fa40 	bl	8003220 <stop_cycle_count>
	start_cycle_count();
 8002da0:	f000 fa3c 	bl	800321c <start_cycle_count>
	// STEP 3.1: Find the extremum value (maximum of absolute values)
	//           Complexity: O(N)
	//           Number of cycles: < >

	q15_t vmax;
	uint32_t pIndex=0;
 8002da4:	2100      	movs	r1, #0

	arm_absmax_q15(buf_fft, SAMPLES_PER_MELVEC, &vmax, &pIndex);
 8002da6:	ab01      	add	r3, sp, #4
 8002da8:	f10d 0202 	add.w	r2, sp, #2
 8002dac:	4830      	ldr	r0, [pc, #192]	@ (8002e70 <Spectrogram_Compute+0x114>)
	uint32_t pIndex=0;
 8002dae:	9101      	str	r1, [sp, #4]
	arm_absmax_q15(buf_fft, SAMPLES_PER_MELVEC, &vmax, &pIndex);
 8002db0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002db4:	f7fe fac4 	bl	8001340 <arm_absmax_q15>
	stop_cycle_count("3.1");
 8002db8:	482f      	ldr	r0, [pc, #188]	@ (8002e78 <Spectrogram_Compute+0x11c>)
 8002dba:	f000 fa31 	bl	8003220 <stop_cycle_count>
	start_cycle_count();
 8002dbe:	f000 fa2d 	bl	800321c <start_cycle_count>
	// STEP 3.2: Normalize the vector - Dynamic range increase
	//           Complexity: O(N)
	//           Number of cycles: < >

	for (int i=0; i < SAMPLES_PER_MELVEC; i++) // We don't use the second half of the symmetric spectrum
 8002dc2:	4b2e      	ldr	r3, [pc, #184]	@ (8002e7c <Spectrogram_Compute+0x120>)
	{
		buf[i] = (q15_t) (((q31_t) buf_fft[i] << 15) /((q31_t)vmax));
 8002dc4:	f9bd c002 	ldrsh.w	ip, [sp, #2]
 8002dc8:	f503 6080 	add.w	r0, r3, #1024	@ 0x400
 8002dcc:	4621      	mov	r1, r4
 8002dce:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
	for (int i=0; i < SAMPLES_PER_MELVEC; i++) // We don't use the second half of the symmetric spectrum
 8002dd2:	4283      	cmp	r3, r0
		buf[i] = (q15_t) (((q31_t) buf_fft[i] << 15) /((q31_t)vmax));
 8002dd4:	ea4f 32c2 	mov.w	r2, r2, lsl #15
 8002dd8:	fb92 f2fc 	sdiv	r2, r2, ip
 8002ddc:	f821 2f02 	strh.w	r2, [r1, #2]!
	for (int i=0; i < SAMPLES_PER_MELVEC; i++) // We don't use the second half of the symmetric spectrum
 8002de0:	d1f5      	bne.n	8002dce <Spectrogram_Compute+0x72>
	}
	stop_cycle_count("3.2");
 8002de2:	4827      	ldr	r0, [pc, #156]	@ (8002e80 <Spectrogram_Compute+0x124>)
 8002de4:	f000 fa1c 	bl	8003220 <stop_cycle_count>
	start_cycle_count();
 8002de8:	f000 fa18 	bl	800321c <start_cycle_count>
	// STEP 3.3: Compute the complex magnitude
	//           --> The output buffer is now two times smaller because (real|imag) --> (mag)
	//           Complexity: O(N)
	//           Number of cycles: < >

	arm_cmplx_mag_q15(buf, buf, SAMPLES_PER_MELVEC/2);
 8002dec:	491c      	ldr	r1, [pc, #112]	@ (8002e60 <Spectrogram_Compute+0x104>)
 8002dee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002df2:	4608      	mov	r0, r1
 8002df4:	f004 fc90 	bl	8007718 <arm_cmplx_mag_q15>
	stop_cycle_count("3.3");
 8002df8:	4822      	ldr	r0, [pc, #136]	@ (8002e84 <Spectrogram_Compute+0x128>)
 8002dfa:	f000 fa11 	bl	8003220 <stop_cycle_count>
	start_cycle_count();
 8002dfe:	f000 fa0d 	bl	800321c <start_cycle_count>
	// STEP 3.4: Denormalize the vector
	//           Complexity: O(N)
	//           Number of cycles: < >

	for (int i=0; i < SAMPLES_PER_MELVEC/2; i++)
 8002e02:	4921      	ldr	r1, [pc, #132]	@ (8002e88 <Spectrogram_Compute+0x12c>)
	{
		buf[i] = (q15_t) ((((q31_t) buf[i]) * ((q31_t) vmax) ) >> 15 );
 8002e04:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8002e08:	f834 2f02 	ldrh.w	r2, [r4, #2]!
 8002e0c:	fb12 f203 	smulbb	r2, r2, r3
 8002e10:	13d2      	asrs	r2, r2, #15
	for (int i=0; i < SAMPLES_PER_MELVEC/2; i++)
 8002e12:	42a1      	cmp	r1, r4
		buf[i] = (q15_t) ((((q31_t) buf[i]) * ((q31_t) vmax) ) >> 15 );
 8002e14:	8022      	strh	r2, [r4, #0]
	for (int i=0; i < SAMPLES_PER_MELVEC/2; i++)
 8002e16:	d1f7      	bne.n	8002e08 <Spectrogram_Compute+0xac>
	}
	stop_cycle_count("3.4");
 8002e18:	481c      	ldr	r0, [pc, #112]	@ (8002e8c <Spectrogram_Compute+0x130>)
 8002e1a:	f000 fa01 	bl	8003220 <stop_cycle_count>
	start_cycle_count();
 8002e1e:	f000 f9fd 	bl	800321c <start_cycle_count>
	// /!\ In order to avoid overflows completely the input signals should be scaled down. Scale down one of the input matrices by log2(numColsA) bits to avoid overflows,
	// as a total of numColsA additions are computed internally for each output element. Because our hz2mel_mat matrix contains lots of zeros in its rows, this is not necessary.
	
	arm_matrix_instance_q15 hz2mel_inst, fftmag_inst, melvec_inst;

	arm_mat_init_q15(&hz2mel_inst, MELVEC_LENGTH, SAMPLES_PER_MELVEC/2, hz2mel_mat);
 8002e22:	a802      	add	r0, sp, #8
 8002e24:	4b1a      	ldr	r3, [pc, #104]	@ (8002e90 <Spectrogram_Compute+0x134>)
 8002e26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e2a:	2114      	movs	r1, #20
 8002e2c:	f004 fc70 	bl	8007710 <arm_mat_init_q15>
	arm_mat_init_q15(&fftmag_inst, SAMPLES_PER_MELVEC/2, 1, buf);
 8002e30:	a804      	add	r0, sp, #16
 8002e32:	4b0b      	ldr	r3, [pc, #44]	@ (8002e60 <Spectrogram_Compute+0x104>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e3a:	f004 fc69 	bl	8007710 <arm_mat_init_q15>
	arm_mat_init_q15(&melvec_inst, MELVEC_LENGTH, 1, melvec);
 8002e3e:	462b      	mov	r3, r5
 8002e40:	a806      	add	r0, sp, #24
 8002e42:	2201      	movs	r2, #1
 8002e44:	2114      	movs	r1, #20
 8002e46:	f004 fc63 	bl	8007710 <arm_mat_init_q15>

	arm_mat_mult_fast_q15(&hz2mel_inst, &fftmag_inst, &melvec_inst, buf_tmp);
 8002e4a:	4b12      	ldr	r3, [pc, #72]	@ (8002e94 <Spectrogram_Compute+0x138>)
 8002e4c:	aa06      	add	r2, sp, #24
 8002e4e:	a904      	add	r1, sp, #16
 8002e50:	a802      	add	r0, sp, #8
 8002e52:	f004 fa5b 	bl	800730c <arm_mat_mult_fast_q15>
	stop_cycle_count("4");
 8002e56:	4810      	ldr	r0, [pc, #64]	@ (8002e98 <Spectrogram_Compute+0x13c>)
 8002e58:	f000 f9e2 	bl	8003220 <stop_cycle_count>
}
 8002e5c:	b00f      	add	sp, #60	@ 0x3c
 8002e5e:	bd30      	pop	{r4, r5, pc}
 8002e60:	20004448 	.word	0x20004448
 8002e64:	20000000 	.word	0x20000000
 8002e68:	0800b3fc 	.word	0x0800b3fc
 8002e6c:	20004446 	.word	0x20004446
 8002e70:	20003c48 	.word	0x20003c48
 8002e74:	0800b400 	.word	0x0800b400
 8002e78:	0800b404 	.word	0x0800b404
 8002e7c:	20003c46 	.word	0x20003c46
 8002e80:	0800b408 	.word	0x0800b408
 8002e84:	0800b40c 	.word	0x0800b40c
 8002e88:	20004646 	.word	0x20004646
 8002e8c:	0800b410 	.word	0x0800b410
 8002e90:	20000400 	.word	0x20000400
 8002e94:	20003a48 	.word	0x20003a48
 8002e98:	0800b414 	.word	0x0800b414

08002e9c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002e9c:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002e9e:	4810      	ldr	r0, [pc, #64]	@ (8002ee0 <MX_SPI1_Init+0x44>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ea0:	4c10      	ldr	r4, [pc, #64]	@ (8002ee4 <MX_SPI1_Init+0x48>)
 8002ea2:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002ea6:	e9c0 4100 	strd	r4, r1, [r0]
 8002eaa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002eae:	2300      	movs	r3, #0
 8002eb0:	2208      	movs	r2, #8
 8002eb2:	f44f 64e0 	mov.w	r4, #1792	@ 0x700
 8002eb6:	6181      	str	r1, [r0, #24]
 8002eb8:	2107      	movs	r1, #7
 8002eba:	e9c0 3402 	strd	r3, r4, [r0, #8]
 8002ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ec2:	e9c0 2307 	strd	r2, r3, [r0, #28]
 8002ec6:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
 8002eca:	e9c0 130b 	strd	r1, r3, [r0, #44]	@ 0x2c
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ece:	6342      	str	r2, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ed0:	f002 fef0 	bl	8005cb4 <HAL_SPI_Init>
 8002ed4:	b900      	cbnz	r0, 8002ed8 <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ed6:	bd10      	pop	{r4, pc}
 8002ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002edc:	f7fe bc74 	b.w	80017c8 <Error_Handler>
 8002ee0:	20004848 	.word	0x20004848
 8002ee4:	40013000 	.word	0x40013000

08002ee8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ee8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8002eea:	4b22      	ldr	r3, [pc, #136]	@ (8002f74 <HAL_SPI_MspInit+0x8c>)
 8002eec:	6802      	ldr	r2, [r0, #0]
{
 8002eee:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI1)
 8002ef2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002ef8:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002efc:	9408      	str	r4, [sp, #32]
  if(spiHandle->Instance==SPI1)
 8002efe:	d001      	beq.n	8002f04 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002f00:	b00a      	add	sp, #40	@ 0x28
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f04:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f08:	2603      	movs	r6, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f0a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f0c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f10:	661a      	str	r2, [r3, #96]	@ 0x60
 8002f12:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f14:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002f18:	9201      	str	r2, [sp, #4]
 8002f1a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002f24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f26:	f002 0201 	and.w	r2, r2, #1
 8002f2a:	9202      	str	r2, [sp, #8]
 8002f2c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f30:	f042 0210 	orr.w	r2, r2, #16
 8002f34:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f3e:	22c0      	movs	r2, #192	@ 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f40:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f42:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f44:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f4e:	e9cd 6507 	strd	r6, r5, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f52:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f54:	f001 fb9c 	bl	8004690 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002f58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f5c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f5e:	4806      	ldr	r0, [pc, #24]	@ (8002f78 <HAL_SPI_MspInit+0x90>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f60:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f62:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f64:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f66:	e9cd 4606 	strd	r4, r6, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f6c:	f001 fb90 	bl	8004690 <HAL_GPIO_Init>
}
 8002f70:	b00a      	add	sp, #40	@ 0x28
 8002f72:	bd70      	pop	{r4, r5, r6, pc}
 8002f74:	40013000 	.word	0x40013000
 8002f78:	48001000 	.word	0x48001000

08002f7c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa8 <HAL_MspInit+0x2c>)
 8002f7e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f80:	f042 0201 	orr.w	r2, r2, #1
{
 8002f84:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f86:	661a      	str	r2, [r3, #96]	@ 0x60
 8002f88:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f8a:	f002 0201 	and.w	r2, r2, #1
 8002f8e:	9200      	str	r2, [sp, #0]
 8002f90:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f92:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002f94:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002f98:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fa4:	b002      	add	sp, #8
 8002fa6:	4770      	bx	lr
 8002fa8:	40021000 	.word	0x40021000

08002fac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fac:	e7fe      	b.n	8002fac <NMI_Handler>
 8002fae:	bf00      	nop

08002fb0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fb0:	e7fe      	b.n	8002fb0 <HardFault_Handler>
 8002fb2:	bf00      	nop

08002fb4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fb4:	e7fe      	b.n	8002fb4 <MemManage_Handler>
 8002fb6:	bf00      	nop

08002fb8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fb8:	e7fe      	b.n	8002fb8 <BusFault_Handler>
 8002fba:	bf00      	nop

08002fbc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fbc:	e7fe      	b.n	8002fbc <UsageFault_Handler>
 8002fbe:	bf00      	nop

08002fc0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop

08002fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop

08002fc8 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop

08002fcc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fcc:	f000 b98a 	b.w	80032e4 <HAL_IncTick>

08002fd0 <EXTI3_IRQHandler>:
  */
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RADIO_INT_Pin);
 8002fd0:	2008      	movs	r0, #8
 8002fd2:	f001 bd3f 	b.w	8004a54 <HAL_GPIO_EXTI_IRQHandler>
 8002fd6:	bf00      	nop

08002fd8 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002fd8:	4801      	ldr	r0, [pc, #4]	@ (8002fe0 <DMA1_Channel1_IRQHandler+0x8>)
 8002fda:	f001 bb0b 	b.w	80045f4 <HAL_DMA_IRQHandler>
 8002fde:	bf00      	nop
 8002fe0:	20002df4 	.word	0x20002df4

08002fe4 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002fe4:	4801      	ldr	r0, [pc, #4]	@ (8002fec <TIM3_IRQHandler+0x8>)
 8002fe6:	f003 ba53 	b.w	8006490 <HAL_TIM_IRQHandler>
 8002fea:	bf00      	nop
 8002fec:	200048b0 	.word	0x200048b0

08002ff0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002ff0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002ff4:	f001 bd2e 	b.w	8004a54 <HAL_GPIO_EXTI_IRQHandler>

08002ff8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ff8:	490c      	ldr	r1, [pc, #48]	@ (800302c <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ffa:	4a0d      	ldr	r2, [pc, #52]	@ (8003030 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8002ffc:	680b      	ldr	r3, [r1, #0]
{
 8002ffe:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003000:	4c0c      	ldr	r4, [pc, #48]	@ (8003034 <_sbrk+0x3c>)
 8003002:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8003004:	b12b      	cbz	r3, 8003012 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003006:	4418      	add	r0, r3
 8003008:	4290      	cmp	r0, r2
 800300a:	d807      	bhi.n	800301c <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800300c:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 800300e:	4618      	mov	r0, r3
 8003010:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8003012:	4b09      	ldr	r3, [pc, #36]	@ (8003038 <_sbrk+0x40>)
 8003014:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8003016:	4418      	add	r0, r3
 8003018:	4290      	cmp	r0, r2
 800301a:	d9f7      	bls.n	800300c <_sbrk+0x14>
    errno = ENOMEM;
 800301c:	f006 f940 	bl	80092a0 <__errno>
 8003020:	230c      	movs	r3, #12
 8003022:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8003024:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003028:	4618      	mov	r0, r3
 800302a:	bd10      	pop	{r4, pc}
 800302c:	200048ac 	.word	0x200048ac
 8003030:	20050000 	.word	0x20050000
 8003034:	00000400 	.word	0x00000400
 8003038:	20004ad8 	.word	0x20004ad8

0800303c <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800303c:	480e      	ldr	r0, [pc, #56]	@ (8003078 <SystemInit+0x3c>)
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800303e:	4b0f      	ldr	r3, [pc, #60]	@ (800307c <SystemInit+0x40>)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003040:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8003044:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8003048:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  RCC->CR |= RCC_CR_MSION;
 800304c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800304e:	2100      	movs	r1, #0
  RCC->CR |= RCC_CR_MSION;
 8003050:	f042 0201 	orr.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8003056:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	f022 52a8 	bic.w	r2, r2, #352321536	@ 0x15000000
 800305e:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003062:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 8003066:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 8003068:	60d8      	str	r0, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003070:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003072:	6199      	str	r1, [r3, #24]
}
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	e000ed00 	.word	0xe000ed00
 800307c:	40021000 	.word	0x40021000

08003080 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003080:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003082:	481a      	ldr	r0, [pc, #104]	@ (80030ec <MX_TIM3_Init+0x6c>)
 8003084:	4a1a      	ldr	r2, [pc, #104]	@ (80030f0 <MX_TIM3_Init+0x70>)
{
 8003086:	b089      	sub	sp, #36	@ 0x24
  htim3.Instance = TIM3;
 8003088:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 23;
 800308a:	2217      	movs	r2, #23
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800308c:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 23;
 800308e:	6042      	str	r2, [r0, #4]
 8003090:	22c3      	movs	r2, #195	@ 0xc3
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003092:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003096:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800309a:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim3.Init.Prescaler = 23;
 800309e:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030a2:	9303      	str	r3, [sp, #12]
  htim3.Init.Prescaler = 23;
 80030a4:	6103      	str	r3, [r0, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 195;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030a6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80030a8:	f003 f870 	bl	800618c <HAL_TIM_Base_Init>
 80030ac:	b998      	cbnz	r0, 80030d6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030b2:	480e      	ldr	r0, [pc, #56]	@ (80030ec <MX_TIM3_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030b4:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030b6:	a904      	add	r1, sp, #16
 80030b8:	f003 f936 	bl	8006328 <HAL_TIM_ConfigClockSource>
 80030bc:	b998      	cbnz	r0, 80030e6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80030be:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030c0:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030c2:	480a      	ldr	r0, [pc, #40]	@ (80030ec <MX_TIM3_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80030c4:	9201      	str	r2, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030c6:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030c8:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030ca:	f003 fa8b 	bl	80065e4 <HAL_TIMEx_MasterConfigSynchronization>
 80030ce:	b928      	cbnz	r0, 80030dc <MX_TIM3_Init+0x5c>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80030d0:	b009      	add	sp, #36	@ 0x24
 80030d2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80030d6:	f7fe fb77 	bl	80017c8 <Error_Handler>
 80030da:	e7e8      	b.n	80030ae <MX_TIM3_Init+0x2e>
    Error_Handler();
 80030dc:	f7fe fb74 	bl	80017c8 <Error_Handler>
}
 80030e0:	b009      	add	sp, #36	@ 0x24
 80030e2:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80030e6:	f7fe fb6f 	bl	80017c8 <Error_Handler>
 80030ea:	e7e8      	b.n	80030be <MX_TIM3_Init+0x3e>
 80030ec:	200048b0 	.word	0x200048b0
 80030f0:	40000400 	.word	0x40000400

080030f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 80030f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003130 <HAL_TIM_Base_MspInit+0x3c>)
 80030f6:	6802      	ldr	r2, [r0, #0]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d000      	beq.n	80030fe <HAL_TIM_Base_MspInit+0xa>
 80030fc:	4770      	bx	lr
{
 80030fe:	b500      	push	{lr}
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003100:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
{
 8003104:	b083      	sub	sp, #12
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003106:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8003108:	f040 0002 	orr.w	r0, r0, #2
 800310c:	6598      	str	r0, [r3, #88]	@ 0x58
 800310e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003110:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003118:	4611      	mov	r1, r2
 800311a:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 800311c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800311e:	f000 ff57 	bl	8003fd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003122:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003124:	b003      	add	sp, #12
 8003126:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800312a:	f000 bf8d 	b.w	8004048 <HAL_NVIC_EnableIRQ>
 800312e:	bf00      	nop
 8003130:	40000400 	.word	0x40000400
 8003134:	00000000 	.word	0x00000000

08003138 <MX_LPUART1_UART_Init>:
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
  hlpuart1.Init.Parity = UART_PARITY_NONE;
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003138:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8003170 <MX_LPUART1_UART_Init+0x38>
{
 800313c:	b510      	push	{r4, lr}
  hlpuart1.Instance = LPUART1;
 800313e:	480e      	ldr	r0, [pc, #56]	@ (8003178 <MX_LPUART1_UART_Init+0x40>)
 8003140:	4c0e      	ldr	r4, [pc, #56]	@ (800317c <MX_LPUART1_UART_Init+0x44>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003142:	2300      	movs	r3, #0
  hlpuart1.Init.BaudRate = 115200;
 8003144:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003148:	220c      	movs	r2, #12
  hlpuart1.Init.BaudRate = 115200;
 800314a:	e9c0 4100 	strd	r4, r1, [r0]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800314e:	ed80 7b08 	vstr	d7, [r0, #32]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003152:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003156:	e9c0 3204 	strd	r3, r2, [r0, #16]
 800315a:	6183      	str	r3, [r0, #24]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800315c:	f003 fed0 	bl	8006f00 <HAL_UART_Init>
 8003160:	b900      	cbnz	r0, 8003164 <MX_LPUART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003162:	bd10      	pop	{r4, pc}
 8003164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8003168:	f7fe bb2e 	b.w	80017c8 <Error_Handler>
 800316c:	f3af 8000 	nop.w
	...
 8003178:	20004900 	.word	0x20004900
 800317c:	40008000 	.word	0x40008000

08003180 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003180:	b510      	push	{r4, lr}
 8003182:	4604      	mov	r4, r0
 8003184:	b0aa      	sub	sp, #168	@ 0xa8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003186:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003188:	228c      	movs	r2, #140	@ 0x8c
 800318a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8003190:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8003194:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003196:	f006 f831 	bl	80091fc <memset>
  if(uartHandle->Instance==LPUART1)
 800319a:	4b1d      	ldr	r3, [pc, #116]	@ (8003210 <HAL_UART_MspInit+0x90>)
 800319c:	6822      	ldr	r2, [r4, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d001      	beq.n	80031a6 <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80031a2:	b02a      	add	sp, #168	@ 0xa8
 80031a4:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80031a6:	2220      	movs	r2, #32
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 80031a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031ac:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80031ae:	9207      	str	r2, [sp, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_SYSCLK;
 80031b0:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031b2:	f002 fa45 	bl	8005640 <HAL_RCCEx_PeriphCLKConfig>
 80031b6:	bb20      	cbnz	r0, 8003202 <HAL_UART_MspInit+0x82>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80031b8:	4b16      	ldr	r3, [pc, #88]	@ (8003214 <HAL_UART_MspInit+0x94>)
 80031ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80031bc:	f042 0201 	orr.w	r2, r2, #1
 80031c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80031c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80031c4:	f002 0201 	and.w	r2, r2, #1
 80031c8:	9200      	str	r2, [sp, #0]
 80031ca:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80031cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80031ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031d2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80031d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031da:	9301      	str	r3, [sp, #4]
 80031dc:	9b01      	ldr	r3, [sp, #4]
    HAL_PWREx_EnableVddIO2();
 80031de:	f001 fc8d 	bl	8004afc <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80031e2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8003208 <HAL_UART_MspInit+0x88>
 80031e6:	2200      	movs	r2, #0
 80031e8:	2303      	movs	r3, #3
 80031ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031ee:	480a      	ldr	r0, [pc, #40]	@ (8003218 <HAL_UART_MspInit+0x98>)
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80031f0:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031f2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80031f4:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80031f8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031fa:	f001 fa49 	bl	8004690 <HAL_GPIO_Init>
}
 80031fe:	b02a      	add	sp, #168	@ 0xa8
 8003200:	bd10      	pop	{r4, pc}
      Error_Handler();
 8003202:	f7fe fae1 	bl	80017c8 <Error_Handler>
 8003206:	e7d7      	b.n	80031b8 <HAL_UART_MspInit+0x38>
 8003208:	00000180 	.word	0x00000180
 800320c:	00000002 	.word	0x00000002
 8003210:	40008000 	.word	0x40008000
 8003214:	40021000 	.word	0x40021000
 8003218:	48001800 	.word	0x48001800

0800321c <start_cycle_count>:
	printf(" %lu cycles.\r\n", res);
}

#else

void start_cycle_count() {}
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop

08003220 <stop_cycle_count>:
void stop_cycle_count(char *s) {}
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop

08003224 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003224:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800325c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003228:	f7ff ff08 	bl	800303c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800322c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800322e:	e003      	b.n	8003238 <LoopCopyDataInit>

08003230 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003230:	4b0b      	ldr	r3, [pc, #44]	@ (8003260 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003232:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003234:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003236:	3104      	adds	r1, #4

08003238 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003238:	480a      	ldr	r0, [pc, #40]	@ (8003264 <LoopForever+0xa>)
	ldr	r3, =_edata
 800323a:	4b0b      	ldr	r3, [pc, #44]	@ (8003268 <LoopForever+0xe>)
	adds	r2, r0, r1
 800323c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800323e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003240:	d3f6      	bcc.n	8003230 <CopyDataInit>
	ldr	r2, =_sbss
 8003242:	4a0a      	ldr	r2, [pc, #40]	@ (800326c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003244:	e002      	b.n	800324c <LoopFillZerobss>

08003246 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003246:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003248:	f842 3b04 	str.w	r3, [r2], #4

0800324c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800324c:	4b08      	ldr	r3, [pc, #32]	@ (8003270 <LoopForever+0x16>)
	cmp	r2, r3
 800324e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003250:	d3f9      	bcc.n	8003246 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003252:	f006 f82b 	bl	80092ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003256:	f7fe fb2f 	bl	80018b8 <main>

0800325a <LoopForever>:

LoopForever:
    b LoopForever
 800325a:	e7fe      	b.n	800325a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800325c:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8003260:	0801d66c 	.word	0x0801d66c
	ldr	r0, =_sdata
 8003264:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003268:	20002dd4 	.word	0x20002dd4
	ldr	r2, =_sbss
 800326c:	20002dd8 	.word	0x20002dd8
	ldr	r3, = _ebss
 8003270:	20004ad8 	.word	0x20004ad8

08003274 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003274:	e7fe      	b.n	8003274 <ADC1_2_IRQHandler>
	...

08003278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003278:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800327a:	4b0f      	ldr	r3, [pc, #60]	@ (80032b8 <HAL_InitTick+0x40>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	b90b      	cbnz	r3, 8003284 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8003280:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8003282:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003284:	490d      	ldr	r1, [pc, #52]	@ (80032bc <HAL_InitTick+0x44>)
 8003286:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800328a:	4605      	mov	r5, r0
 800328c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003290:	6808      	ldr	r0, [r1, #0]
 8003292:	fbb0 f0f3 	udiv	r0, r0, r3
 8003296:	f000 fee5 	bl	8004064 <HAL_SYSTICK_Config>
 800329a:	4604      	mov	r4, r0
 800329c:	2800      	cmp	r0, #0
 800329e:	d1ef      	bne.n	8003280 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032a0:	2d0f      	cmp	r5, #15
 80032a2:	d8ed      	bhi.n	8003280 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032a4:	4602      	mov	r2, r0
 80032a6:	4629      	mov	r1, r5
 80032a8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ac:	f000 fe90 	bl	8003fd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80032b0:	4b03      	ldr	r3, [pc, #12]	@ (80032c0 <HAL_InitTick+0x48>)
 80032b2:	4620      	mov	r0, r4
 80032b4:	601d      	str	r5, [r3, #0]
}
 80032b6:	bd38      	pop	{r3, r4, r5, pc}
 80032b8:	20002c04 	.word	0x20002c04
 80032bc:	20002c00 	.word	0x20002c00
 80032c0:	20002c08 	.word	0x20002c08

080032c4 <HAL_Init>:
{
 80032c4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c6:	2003      	movs	r0, #3
 80032c8:	f000 fe70 	bl	8003fac <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032cc:	2000      	movs	r0, #0
 80032ce:	f7ff ffd3 	bl	8003278 <HAL_InitTick>
 80032d2:	b110      	cbz	r0, 80032da <HAL_Init+0x16>
    status = HAL_ERROR;
 80032d4:	2401      	movs	r4, #1
}
 80032d6:	4620      	mov	r0, r4
 80032d8:	bd10      	pop	{r4, pc}
 80032da:	4604      	mov	r4, r0
    HAL_MspInit();
 80032dc:	f7ff fe4e 	bl	8002f7c <HAL_MspInit>
}
 80032e0:	4620      	mov	r0, r4
 80032e2:	bd10      	pop	{r4, pc}

080032e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80032e4:	4a03      	ldr	r2, [pc, #12]	@ (80032f4 <HAL_IncTick+0x10>)
 80032e6:	4b04      	ldr	r3, [pc, #16]	@ (80032f8 <HAL_IncTick+0x14>)
 80032e8:	6811      	ldr	r1, [r2, #0]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	440b      	add	r3, r1
 80032ee:	6013      	str	r3, [r2, #0]
}
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	20004988 	.word	0x20004988
 80032f8:	20002c04 	.word	0x20002c04

080032fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80032fc:	4b01      	ldr	r3, [pc, #4]	@ (8003304 <HAL_GetTick+0x8>)
 80032fe:	6818      	ldr	r0, [r3, #0]
}
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	20004988 	.word	0x20004988

08003308 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003308:	b538      	push	{r3, r4, r5, lr}
 800330a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800330c:	f7ff fff6 	bl	80032fc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003310:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003312:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003314:	d002      	beq.n	800331c <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8003316:	4b04      	ldr	r3, [pc, #16]	@ (8003328 <HAL_Delay+0x20>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800331c:	f7ff ffee 	bl	80032fc <HAL_GetTick>
 8003320:	1b40      	subs	r0, r0, r5
 8003322:	42a0      	cmp	r0, r4
 8003324:	d3fa      	bcc.n	800331c <HAL_Delay+0x14>
  {
  }
}
 8003326:	bd38      	pop	{r3, r4, r5, pc}
 8003328:	20002c04 	.word	0x20002c04

0800332c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800332c:	b530      	push	{r4, r5, lr}
 800332e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003330:	2300      	movs	r3, #0
 8003332:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003334:	2800      	cmp	r0, #0
 8003336:	f000 809a 	beq.w	800346e <HAL_ADC_Init+0x142>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800333a:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 800333c:	4604      	mov	r4, r0
 800333e:	2d00      	cmp	r5, #0
 8003340:	f000 809a 	beq.w	8003478 <HAL_ADC_Init+0x14c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003344:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003346:	6893      	ldr	r3, [r2, #8]
 8003348:	009d      	lsls	r5, r3, #2
 800334a:	d505      	bpl.n	8003358 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800334c:	6893      	ldr	r3, [r2, #8]
 800334e:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003352:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003356:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003358:	6893      	ldr	r3, [r2, #8]
 800335a:	00d8      	lsls	r0, r3, #3
 800335c:	d419      	bmi.n	8003392 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800335e:	4b5b      	ldr	r3, [pc, #364]	@ (80034cc <HAL_ADC_Init+0x1a0>)
 8003360:	485b      	ldr	r0, [pc, #364]	@ (80034d0 <HAL_ADC_Init+0x1a4>)
 8003362:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003364:	6891      	ldr	r1, [r2, #8]
 8003366:	099b      	lsrs	r3, r3, #6
 8003368:	fba0 0303 	umull	r0, r3, r0, r3
 800336c:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8003370:	099b      	lsrs	r3, r3, #6
 8003372:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8003376:	3301      	adds	r3, #1
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800337e:	6091      	str	r1, [r2, #8]
 8003380:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003382:	9b01      	ldr	r3, [sp, #4]
 8003384:	b12b      	cbz	r3, 8003392 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8003386:	9b01      	ldr	r3, [sp, #4]
 8003388:	3b01      	subs	r3, #1
 800338a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800338c:	9b01      	ldr	r3, [sp, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f9      	bne.n	8003386 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003392:	6893      	ldr	r3, [r2, #8]
 8003394:	00d9      	lsls	r1, r3, #3
 8003396:	d46d      	bmi.n	8003474 <HAL_ADC_Init+0x148>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003398:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800339a:	f043 0310 	orr.w	r3, r3, #16
 800339e:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80033a2:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a4:	4303      	orrs	r3, r0
 80033a6:	65e3      	str	r3, [r4, #92]	@ 0x5c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033a8:	6893      	ldr	r3, [r2, #8]
 80033aa:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033ae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80033b0:	d159      	bne.n	8003466 <HAL_ADC_Init+0x13a>
 80033b2:	06db      	lsls	r3, r3, #27
 80033b4:	d457      	bmi.n	8003466 <HAL_ADC_Init+0x13a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80033b8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80033bc:	f043 0302 	orr.w	r3, r3, #2
 80033c0:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033c2:	6893      	ldr	r3, [r2, #8]
 80033c4:	07dd      	lsls	r5, r3, #31
 80033c6:	d40b      	bmi.n	80033e0 <HAL_ADC_Init+0xb4>
 80033c8:	4942      	ldr	r1, [pc, #264]	@ (80034d4 <HAL_ADC_Init+0x1a8>)
 80033ca:	4b43      	ldr	r3, [pc, #268]	@ (80034d8 <HAL_ADC_Init+0x1ac>)
 80033cc:	6889      	ldr	r1, [r1, #8]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f013 0f01 	tst.w	r3, #1
 80033d4:	4b41      	ldr	r3, [pc, #260]	@ (80034dc <HAL_ADC_Init+0x1b0>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	d102      	bne.n	80033e0 <HAL_ADC_Init+0xb4>
 80033da:	430b      	orrs	r3, r1
 80033dc:	07d9      	lsls	r1, r3, #31
 80033de:	d55e      	bpl.n	800349e <HAL_ADC_Init+0x172>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 80033e0:	68e5      	ldr	r5, [r4, #12]
 80033e2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033e4:	f894 1020 	ldrb.w	r1, [r4, #32]
                 hadc->Init.DataAlign                                                   |
 80033e8:	432b      	orrs	r3, r5
 80033ea:	68a5      	ldr	r5, [r4, #8]
 80033ec:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033ee:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033f0:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 80033f2:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033fa:	d04b      	beq.n	8003494 <HAL_ADC_Init+0x168>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033fc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80033fe:	b121      	cbz	r1, 800340a <HAL_ADC_Init+0xde>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 8003400:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003402:	f401 7170 	and.w	r1, r1, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003406:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003408:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800340a:	68d5      	ldr	r5, [r2, #12]
 800340c:	4934      	ldr	r1, [pc, #208]	@ (80034e0 <HAL_ADC_Init+0x1b4>)
 800340e:	4029      	ands	r1, r5
 8003410:	4319      	orrs	r1, r3
 8003412:	60d1      	str	r1, [r2, #12]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003414:	6893      	ldr	r3, [r2, #8]
 8003416:	071b      	lsls	r3, r3, #28
 8003418:	d416      	bmi.n	8003448 <HAL_ADC_Init+0x11c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800341a:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800341e:	7e25      	ldrb	r5, [r4, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003420:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003422:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003424:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
 8003428:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800342a:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800342e:	f021 0106 	bic.w	r1, r1, #6
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003432:	432b      	orrs	r3, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003434:	430b      	orrs	r3, r1
 8003436:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003438:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800343c:	2b01      	cmp	r3, #1
 800343e:	d036      	beq.n	80034ae <HAL_ADC_Init+0x182>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003440:	6913      	ldr	r3, [r2, #16]
 8003442:	f023 0301 	bic.w	r3, r3, #1
 8003446:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003448:	6923      	ldr	r3, [r4, #16]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d01a      	beq.n	8003484 <HAL_ADC_Init+0x158>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800344e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003450:	f023 030f 	bic.w	r3, r3, #15
 8003454:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003456:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003458:	f023 0303 	bic.w	r3, r3, #3
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003462:	b003      	add	sp, #12
 8003464:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003466:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003468:	f043 0310 	orr.w	r3, r3, #16
 800346c:	65a3      	str	r3, [r4, #88]	@ 0x58
    return HAL_ERROR;
 800346e:	2001      	movs	r0, #1
}
 8003470:	b003      	add	sp, #12
 8003472:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003474:	2000      	movs	r0, #0
 8003476:	e797      	b.n	80033a8 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 8003478:	f7fd fd90 	bl	8000f9c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800347c:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800347e:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
 8003482:	e75f      	b.n	8003344 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003484:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003486:	69e3      	ldr	r3, [r4, #28]
 8003488:	f021 010f 	bic.w	r1, r1, #15
 800348c:	3b01      	subs	r3, #1
 800348e:	430b      	orrs	r3, r1
 8003490:	6313      	str	r3, [r2, #48]	@ 0x30
 8003492:	e7e0      	b.n	8003456 <HAL_ADC_Init+0x12a>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003494:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003496:	3901      	subs	r1, #1
 8003498:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 800349c:	e7ae      	b.n	80033fc <HAL_ADC_Init+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800349e:	4911      	ldr	r1, [pc, #68]	@ (80034e4 <HAL_ADC_Init+0x1b8>)
 80034a0:	6865      	ldr	r5, [r4, #4]
 80034a2:	688b      	ldr	r3, [r1, #8]
 80034a4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80034a8:	432b      	orrs	r3, r5
 80034aa:	608b      	str	r3, [r1, #8]
}
 80034ac:	e798      	b.n	80033e0 <HAL_ADC_Init+0xb4>
        MODIFY_REG(hadc->Instance->CFGR2,
 80034ae:	6911      	ldr	r1, [r2, #16]
 80034b0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80034b2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 80034b4:	f36f 018a 	bfc	r1, #2, #9
 80034b8:	432b      	orrs	r3, r5
 80034ba:	430b      	orrs	r3, r1
 80034bc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80034be:	430b      	orrs	r3, r1
 80034c0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80034c2:	430b      	orrs	r3, r1
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	6113      	str	r3, [r2, #16]
 80034ca:	e7bd      	b.n	8003448 <HAL_ADC_Init+0x11c>
 80034cc:	20002c00 	.word	0x20002c00
 80034d0:	053e2d63 	.word	0x053e2d63
 80034d4:	50040000 	.word	0x50040000
 80034d8:	50040100 	.word	0x50040100
 80034dc:	50040200 	.word	0x50040200
 80034e0:	fff0c007 	.word	0xfff0c007
 80034e4:	50040300 	.word	0x50040300

080034e8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80034e8:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034ea:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80034ec:	f7fd fe80 	bl	80011f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034f0:	bd08      	pop	{r3, pc}
 80034f2:	bf00      	nop

080034f4 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop

080034f8 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034f8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80034fa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80034fc:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 8003500:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003502:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003504:	d11d      	bne.n	8003542 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003506:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003508:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800350c:	659a      	str	r2, [r3, #88]	@ 0x58
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800350e:	680a      	ldr	r2, [r1, #0]
 8003510:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003514:	68ca      	ldr	r2, [r1, #12]
 8003516:	d01b      	beq.n	8003550 <ADC_DMAConvCplt+0x58>
 8003518:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 800351c:	d10d      	bne.n	800353a <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800351e:	68ca      	ldr	r2, [r1, #12]
 8003520:	0494      	lsls	r4, r2, #18
 8003522:	d40a      	bmi.n	800353a <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003524:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003526:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800352a:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800352c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800352e:	04d1      	lsls	r1, r2, #19
 8003530:	d403      	bmi.n	800353a <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003532:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003534:	f042 0201 	orr.w	r2, r2, #1
 8003538:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 800353a:	4618      	mov	r0, r3
 800353c:	f7fd fdf2 	bl	8001124 <HAL_ADC_ConvCpltCallback>
}
 8003540:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003542:	06d2      	lsls	r2, r2, #27
 8003544:	d40a      	bmi.n	800355c <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
}
 8003548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800354c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800354e:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003550:	0790      	lsls	r0, r2, #30
 8003552:	d5e7      	bpl.n	8003524 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8003554:	4618      	mov	r0, r3
 8003556:	f7fd fde5 	bl	8001124 <HAL_ADC_ConvCpltCallback>
 800355a:	e7f1      	b.n	8003540 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff ffc9 	bl	80034f4 <HAL_ADC_ErrorCallback>
}
 8003562:	bd10      	pop	{r4, pc}

08003564 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003564:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8003566:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003568:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800356a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800356e:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003570:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8003572:	f043 0304 	orr.w	r3, r3, #4
 8003576:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003578:	f7ff ffbc 	bl	80034f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800357c:	bd08      	pop	{r3, pc}
 800357e:	bf00      	nop

08003580 <HAL_ADC_ConfigChannel>:
{
 8003580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 8003584:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
{
 8003588:	b082      	sub	sp, #8
 800358a:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800358c:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 800358e:	f04f 0000 	mov.w	r0, #0
 8003592:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003594:	f000 812f 	beq.w	80037f6 <HAL_ADC_ConfigChannel+0x276>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003598:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 800359a:	2001      	movs	r0, #1
 800359c:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035a0:	68a2      	ldr	r2, [r4, #8]
 80035a2:	f012 0c04 	ands.w	ip, r2, #4
 80035a6:	d155      	bne.n	8003654 <HAL_ADC_ConfigChannel+0xd4>
    uint32_t config_rank = pConfig->Rank;
 80035a8:	6848      	ldr	r0, [r1, #4]
    if (pConfig->Rank <= 5U)
 80035aa:	2805      	cmp	r0, #5
 80035ac:	f240 8096 	bls.w	80036dc <HAL_ADC_ConfigChannel+0x15c>
  MODIFY_REG(*preg,
 80035b0:	f000 051f 	and.w	r5, r0, #31
 80035b4:	f04f 0e1f 	mov.w	lr, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80035b8:	0982      	lsrs	r2, r0, #6
  MODIFY_REG(*preg,
 80035ba:	fa0e fe05 	lsl.w	lr, lr, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80035be:	f002 0c0c 	and.w	ip, r2, #12
  MODIFY_REG(*preg,
 80035c2:	ea6f 0e0e 	mvn.w	lr, lr
 80035c6:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80035c8:	f104 0030 	add.w	r0, r4, #48	@ 0x30
  MODIFY_REG(*preg,
 80035cc:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80035d0:	40aa      	lsls	r2, r5
 80035d2:	f850 500c 	ldr.w	r5, [r0, ip]
 80035d6:	ea05 050e 	and.w	r5, r5, lr
 80035da:	432a      	orrs	r2, r5
 80035dc:	f840 200c 	str.w	r2, [r0, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035e0:	68a2      	ldr	r2, [r4, #8]
 80035e2:	0757      	lsls	r7, r2, #29
 80035e4:	d540      	bpl.n	8003668 <HAL_ADC_ConfigChannel+0xe8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80035e6:	68a2      	ldr	r2, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80035e8:	680a      	ldr	r2, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035ea:	68a0      	ldr	r0, [r4, #8]
 80035ec:	07c5      	lsls	r5, r0, #31
 80035ee:	d412      	bmi.n	8003616 <HAL_ADC_ConfigChannel+0x96>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80035f0:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80035f2:	48b2      	ldr	r0, [pc, #712]	@ (80038bc <HAL_ADC_ConfigChannel+0x33c>)
 80035f4:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
 80035f8:	f006 0718 	and.w	r7, r6, #24
 80035fc:	40f8      	lsrs	r0, r7
 80035fe:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8003602:	4010      	ands	r0, r2
 8003604:	ea25 0507 	bic.w	r5, r5, r7
 8003608:	4328      	orrs	r0, r5
 800360a:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800360e:	48ac      	ldr	r0, [pc, #688]	@ (80038c0 <HAL_ADC_ConfigChannel+0x340>)
 8003610:	4286      	cmp	r6, r0
 8003612:	f000 80a0 	beq.w	8003756 <HAL_ADC_ConfigChannel+0x1d6>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003616:	49ab      	ldr	r1, [pc, #684]	@ (80038c4 <HAL_ADC_ConfigChannel+0x344>)
 8003618:	420a      	tst	r2, r1
 800361a:	d019      	beq.n	8003650 <HAL_ADC_ConfigChannel+0xd0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800361c:	48aa      	ldr	r0, [pc, #680]	@ (80038c8 <HAL_ADC_ConfigChannel+0x348>)
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800361e:	4dab      	ldr	r5, [pc, #684]	@ (80038cc <HAL_ADC_ConfigChannel+0x34c>)
 8003620:	6881      	ldr	r1, [r0, #8]
 8003622:	42aa      	cmp	r2, r5
 8003624:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8003628:	d06e      	beq.n	8003708 <HAL_ADC_ConfigChannel+0x188>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800362a:	4da9      	ldr	r5, [pc, #676]	@ (80038d0 <HAL_ADC_ConfigChannel+0x350>)
 800362c:	42aa      	cmp	r2, r5
 800362e:	f000 80e6 	beq.w	80037fe <HAL_ADC_ConfigChannel+0x27e>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003632:	4da8      	ldr	r5, [pc, #672]	@ (80038d4 <HAL_ADC_ConfigChannel+0x354>)
 8003634:	42aa      	cmp	r2, r5
 8003636:	d10b      	bne.n	8003650 <HAL_ADC_ConfigChannel+0xd0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003638:	024a      	lsls	r2, r1, #9
 800363a:	d409      	bmi.n	8003650 <HAL_ADC_ConfigChannel+0xd0>
        if (ADC_VREFINT_INSTANCE(hadc))
 800363c:	4aa6      	ldr	r2, [pc, #664]	@ (80038d8 <HAL_ADC_ConfigChannel+0x358>)
 800363e:	4294      	cmp	r4, r2
 8003640:	d106      	bne.n	8003650 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003642:	6882      	ldr	r2, [r0, #8]
 8003644:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003648:	4332      	orrs	r2, r6
 800364a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800364e:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003650:	2000      	movs	r0, #0
 8003652:	e003      	b.n	800365c <HAL_ADC_ConfigChannel+0xdc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003654:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003656:	f042 0220 	orr.w	r2, r2, #32
 800365a:	659a      	str	r2, [r3, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 8003662:	b002      	add	sp, #8
 8003664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003668:	68a0      	ldr	r0, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800366a:	680a      	ldr	r2, [r1, #0]
 800366c:	0706      	lsls	r6, r0, #28
 800366e:	d4bc      	bmi.n	80035ea <HAL_ADC_ConfigChannel+0x6a>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003670:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8003672:	f3c2 5604 	ubfx	r6, r2, #20, #5
 8003676:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003678:	0dd2      	lsrs	r2, r2, #23
  MODIFY_REG(*preg,
 800367a:	40b0      	lsls	r0, r6
 800367c:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003680:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8003684:	ea6f 0000 	mvn.w	r0, r0
 8003688:	f000 810d 	beq.w	80038a6 <HAL_ADC_ConfigChannel+0x326>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800368c:	f104 0714 	add.w	r7, r4, #20
  MODIFY_REG(*preg,
 8003690:	40b5      	lsls	r5, r6
 8003692:	58be      	ldr	r6, [r7, r2]
 8003694:	4030      	ands	r0, r6
 8003696:	4328      	orrs	r0, r5
 8003698:	50b8      	str	r0, [r7, r2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800369a:	6962      	ldr	r2, [r4, #20]
 800369c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80036a0:	6162      	str	r2, [r4, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80036a2:	e9d1 6004 	ldrd	r6, r0, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80036a6:	680a      	ldr	r2, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80036a8:	68e5      	ldr	r5, [r4, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80036aa:	2e04      	cmp	r6, #4
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80036ac:	4617      	mov	r7, r2
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80036ae:	f000 80ce 	beq.w	800384e <HAL_ADC_ConfigChannel+0x2ce>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036b2:	f104 0760 	add.w	r7, r4, #96	@ 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80036b6:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 80036ba:	006d      	lsls	r5, r5, #1
  MODIFY_REG(*preg,
 80036bc:	f857 c026 	ldr.w	ip, [r7, r6, lsl #2]
 80036c0:	40a8      	lsls	r0, r5
 80036c2:	4d86      	ldr	r5, [pc, #536]	@ (80038dc <HAL_ADC_ConfigChannel+0x35c>)
 80036c4:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 80036c8:	ea0c 0505 	and.w	r5, ip, r5
 80036cc:	4315      	orrs	r5, r2
 80036ce:	4328      	orrs	r0, r5
 80036d0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80036d4:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80036d8:	680a      	ldr	r2, [r1, #0]
}
 80036da:	e786      	b.n	80035ea <HAL_ADC_ConfigChannel+0x6a>
      switch (pConfig->Rank)
 80036dc:	3802      	subs	r0, #2
 80036de:	2803      	cmp	r0, #3
 80036e0:	d903      	bls.n	80036ea <HAL_ADC_ConfigChannel+0x16a>
    if (pConfig->Rank <= 5U)
 80036e2:	f46f 6ef8 	mvn.w	lr, #1984	@ 0x7c0
 80036e6:	2506      	movs	r5, #6
 80036e8:	e76d      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x46>
 80036ea:	4a7d      	ldr	r2, [pc, #500]	@ (80038e0 <HAL_ADC_ConfigChannel+0x360>)
 80036ec:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
  MODIFY_REG(*preg,
 80036f0:	f04f 0e1f 	mov.w	lr, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80036f4:	09aa      	lsrs	r2, r5, #6
  MODIFY_REG(*preg,
 80036f6:	f005 051f 	and.w	r5, r5, #31
 80036fa:	fa0e fe05 	lsl.w	lr, lr, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80036fe:	f002 0c0c 	and.w	ip, r2, #12
  MODIFY_REG(*preg,
 8003702:	ea6f 0e0e 	mvn.w	lr, lr
 8003706:	e75e      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x46>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003708:	0208      	lsls	r0, r1, #8
 800370a:	d4a1      	bmi.n	8003650 <HAL_ADC_ConfigChannel+0xd0>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800370c:	4a72      	ldr	r2, [pc, #456]	@ (80038d8 <HAL_ADC_ConfigChannel+0x358>)
 800370e:	4294      	cmp	r4, r2
 8003710:	d003      	beq.n	800371a <HAL_ADC_ConfigChannel+0x19a>
 8003712:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8003716:	4294      	cmp	r4, r2
 8003718:	d19a      	bne.n	8003650 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800371a:	496b      	ldr	r1, [pc, #428]	@ (80038c8 <HAL_ADC_ConfigChannel+0x348>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800371c:	4871      	ldr	r0, [pc, #452]	@ (80038e4 <HAL_ADC_ConfigChannel+0x364>)
 800371e:	688a      	ldr	r2, [r1, #8]
 8003720:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003724:	4332      	orrs	r2, r6
 8003726:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800372a:	608a      	str	r2, [r1, #8]
 800372c:	6802      	ldr	r2, [r0, #0]
 800372e:	496e      	ldr	r1, [pc, #440]	@ (80038e8 <HAL_ADC_ConfigChannel+0x368>)
 8003730:	0992      	lsrs	r2, r2, #6
 8003732:	fba1 1202 	umull	r1, r2, r1, r2
 8003736:	0992      	lsrs	r2, r2, #6
 8003738:	3201      	adds	r2, #1
 800373a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800373e:	0092      	lsls	r2, r2, #2
 8003740:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003742:	9a01      	ldr	r2, [sp, #4]
 8003744:	2a00      	cmp	r2, #0
 8003746:	d083      	beq.n	8003650 <HAL_ADC_ConfigChannel+0xd0>
            wait_loop_index--;
 8003748:	9a01      	ldr	r2, [sp, #4]
 800374a:	3a01      	subs	r2, #1
 800374c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800374e:	9a01      	ldr	r2, [sp, #4]
 8003750:	2a00      	cmp	r2, #0
 8003752:	d1f9      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x1c8>
 8003754:	e77c      	b.n	8003650 <HAL_ADC_ConfigChannel+0xd0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003756:	2f00      	cmp	r7, #0
 8003758:	d065      	beq.n	8003826 <HAL_ADC_ConfigChannel+0x2a6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 800375e:	2800      	cmp	r0, #0
 8003760:	f000 80c4 	beq.w	80038ec <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003764:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003768:	3001      	adds	r0, #1
 800376a:	f000 001f 	and.w	r0, r0, #31
 800376e:	2809      	cmp	r0, #9
 8003770:	f240 80bc 	bls.w	80038ec <HAL_ADC_ConfigChannel+0x36c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003774:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8003778:	2800      	cmp	r0, #0
 800377a:	f000 815d 	beq.w	8003a38 <HAL_ADC_ConfigChannel+0x4b8>
  return __builtin_clz(value);
 800377e:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003782:	3001      	adds	r0, #1
 8003784:	0680      	lsls	r0, r0, #26
 8003786:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378a:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800378e:	2d00      	cmp	r5, #0
 8003790:	f000 815c 	beq.w	8003a4c <HAL_ADC_ConfigChannel+0x4cc>
  return __builtin_clz(value);
 8003794:	fab5 f585 	clz	r5, r5
 8003798:	3501      	adds	r5, #1
 800379a:	f005 051f 	and.w	r5, r5, #31
 800379e:	2601      	movs	r6, #1
 80037a0:	fa06 f505 	lsl.w	r5, r6, r5
 80037a4:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80037aa:	2a00      	cmp	r2, #0
 80037ac:	f000 814c 	beq.w	8003a48 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80037b0:	fab2 f282 	clz	r2, r2
 80037b4:	1c55      	adds	r5, r2, #1
 80037b6:	f005 051f 	and.w	r5, r5, #31
 80037ba:	2203      	movs	r2, #3
 80037bc:	f06f 061d 	mvn.w	r6, #29
 80037c0:	fb12 6205 	smlabb	r2, r2, r5, r6
 80037c4:	0512      	lsls	r2, r2, #20
 80037c6:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037ca:	4302      	orrs	r2, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80037cc:	0dd6      	lsrs	r6, r2, #23
  MODIFY_REG(*preg,
 80037ce:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80037d0:	f006 0604 	and.w	r6, r6, #4
 80037d4:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 80037d8:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80037dc:	fa00 f702 	lsl.w	r7, r0, r2
 80037e0:	f04f 0c07 	mov.w	ip, #7
 80037e4:	59a8      	ldr	r0, [r5, r6]
 80037e6:	fa0c f202 	lsl.w	r2, ip, r2
 80037ea:	ea20 0202 	bic.w	r2, r0, r2
 80037ee:	433a      	orrs	r2, r7
 80037f0:	51aa      	str	r2, [r5, r6]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80037f2:	680a      	ldr	r2, [r1, #0]
}
 80037f4:	e70f      	b.n	8003616 <HAL_ADC_ConfigChannel+0x96>
  __HAL_LOCK(hadc);
 80037f6:	2002      	movs	r0, #2
}
 80037f8:	b002      	add	sp, #8
 80037fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80037fe:	01c9      	lsls	r1, r1, #7
 8003800:	f53f af26 	bmi.w	8003650 <HAL_ADC_ConfigChannel+0xd0>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003804:	4a34      	ldr	r2, [pc, #208]	@ (80038d8 <HAL_ADC_ConfigChannel+0x358>)
 8003806:	4294      	cmp	r4, r2
 8003808:	d004      	beq.n	8003814 <HAL_ADC_ConfigChannel+0x294>
 800380a:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800380e:	4294      	cmp	r4, r2
 8003810:	f47f af1e 	bne.w	8003650 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003814:	492c      	ldr	r1, [pc, #176]	@ (80038c8 <HAL_ADC_ConfigChannel+0x348>)
 8003816:	688a      	ldr	r2, [r1, #8]
 8003818:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800381c:	4332      	orrs	r2, r6
 800381e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003822:	608a      	str	r2, [r1, #8]
}
 8003824:	e714      	b.n	8003650 <HAL_ADC_ConfigChannel+0xd0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003826:	0e92      	lsrs	r2, r2, #26
 8003828:	3201      	adds	r2, #1
 800382a:	f002 051f 	and.w	r5, r2, #31
 800382e:	2001      	movs	r0, #1
 8003830:	0692      	lsls	r2, r2, #26
 8003832:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8003836:	40a8      	lsls	r0, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003838:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800383a:	ea40 0002 	orr.w	r0, r0, r2
 800383e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003842:	d978      	bls.n	8003936 <HAL_ADC_ConfigChannel+0x3b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003844:	3a1e      	subs	r2, #30
 8003846:	0512      	lsls	r2, r2, #20
 8003848:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800384c:	e7bd      	b.n	80037ca <HAL_ADC_ConfigChannel+0x24a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800384e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8003850:	6e20      	ldr	r0, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003852:	f3c2 0512 	ubfx	r5, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003856:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800385a:	2d00      	cmp	r5, #0
 800385c:	d16d      	bne.n	800393a <HAL_ADC_ConfigChannel+0x3ba>
 800385e:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003862:	4290      	cmp	r0, r2
 8003864:	f000 80a1 	beq.w	80039aa <HAL_ADC_ConfigChannel+0x42a>
 8003868:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800386a:	6e65      	ldr	r5, [r4, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800386c:	f104 0060 	add.w	r0, r4, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003870:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8003874:	f104 0e64 	add.w	lr, r4, #100	@ 0x64
 8003878:	4295      	cmp	r5, r2
 800387a:	f000 80c1 	beq.w	8003a00 <HAL_ADC_ConfigChannel+0x480>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800387e:	6885      	ldr	r5, [r0, #8]
 8003880:	6885      	ldr	r5, [r0, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003882:	f100 0c08 	add.w	ip, r0, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003886:	f3c5 6584 	ubfx	r5, r5, #26, #5
 800388a:	4295      	cmp	r5, r2
 800388c:	f000 80a2 	beq.w	80039d4 <HAL_ADC_ConfigChannel+0x454>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003890:	68c5      	ldr	r5, [r0, #12]
 8003892:	68c5      	ldr	r5, [r0, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003894:	f100 060c 	add.w	r6, r0, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003898:	f3c5 6084 	ubfx	r0, r5, #26, #5
 800389c:	4282      	cmp	r2, r0
 800389e:	f000 80c5 	beq.w	8003a2c <HAL_ADC_ConfigChannel+0x4ac>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80038a2:	463a      	mov	r2, r7
 80038a4:	e6a1      	b.n	80035ea <HAL_ADC_ConfigChannel+0x6a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80038a6:	f104 0614 	add.w	r6, r4, #20
  MODIFY_REG(*preg,
 80038aa:	58b5      	ldr	r5, [r6, r2]
 80038ac:	4028      	ands	r0, r5
 80038ae:	50b0      	str	r0, [r6, r2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80038b0:	6962      	ldr	r2, [r4, #20]
 80038b2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80038b6:	6162      	str	r2, [r4, #20]
}
 80038b8:	e6f3      	b.n	80036a2 <HAL_ADC_ConfigChannel+0x122>
 80038ba:	bf00      	nop
 80038bc:	0007ffff 	.word	0x0007ffff
 80038c0:	407f0000 	.word	0x407f0000
 80038c4:	80080000 	.word	0x80080000
 80038c8:	50040300 	.word	0x50040300
 80038cc:	c7520000 	.word	0xc7520000
 80038d0:	cb840000 	.word	0xcb840000
 80038d4:	80000001 	.word	0x80000001
 80038d8:	50040000 	.word	0x50040000
 80038dc:	03fff000 	.word	0x03fff000
 80038e0:	0800b480 	.word	0x0800b480
 80038e4:	20002c00 	.word	0x20002c00
 80038e8:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ec:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80038f0:	2800      	cmp	r0, #0
 80038f2:	f000 80b7 	beq.w	8003a64 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80038f6:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80038fa:	3001      	adds	r0, #1
 80038fc:	0680      	lsls	r0, r0, #26
 80038fe:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003902:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8003906:	2d00      	cmp	r5, #0
 8003908:	f000 80aa 	beq.w	8003a60 <HAL_ADC_ConfigChannel+0x4e0>
  return __builtin_clz(value);
 800390c:	fab5 f585 	clz	r5, r5
 8003910:	3501      	adds	r5, #1
 8003912:	f005 051f 	and.w	r5, r5, #31
 8003916:	2601      	movs	r6, #1
 8003918:	fa06 f505 	lsl.w	r5, r6, r5
 800391c:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003922:	2a00      	cmp	r2, #0
 8003924:	f000 8099 	beq.w	8003a5a <HAL_ADC_ConfigChannel+0x4da>
  return __builtin_clz(value);
 8003928:	fab2 f282 	clz	r2, r2
 800392c:	3201      	adds	r2, #1
 800392e:	f002 021f 	and.w	r2, r2, #31
 8003932:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003936:	0512      	lsls	r2, r2, #20
 8003938:	e747      	b.n	80037ca <HAL_ADC_ConfigChannel+0x24a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393a:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800393e:	b11d      	cbz	r5, 8003948 <HAL_ADC_ConfigChannel+0x3c8>
  return __builtin_clz(value);
 8003940:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003944:	42a8      	cmp	r0, r5
 8003946:	d030      	beq.n	80039aa <HAL_ADC_ConfigChannel+0x42a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003948:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800394a:	6e65      	ldr	r5, [r4, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800394c:	f104 0060 	add.w	r0, r4, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003950:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8003954:	f104 0e64 	add.w	lr, r4, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003958:	fa97 f6a7 	rbit	r6, r7
 800395c:	f100 0c08 	add.w	ip, r0, #8
 8003960:	46e0      	mov	r8, ip
  if (value == 0U)
 8003962:	2e00      	cmp	r6, #0
 8003964:	d074      	beq.n	8003a50 <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 8003966:	fab6 f686 	clz	r6, r6
 800396a:	42ae      	cmp	r6, r5
 800396c:	d04a      	beq.n	8003a04 <HAL_ADC_ConfigChannel+0x484>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800396e:	f8dc 5000 	ldr.w	r5, [ip]
 8003972:	f8dc 5000 	ldr.w	r5, [ip]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003976:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397a:	fa97 fea7 	rbit	lr, r7
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800397e:	f100 060c 	add.w	r6, r0, #12
 8003982:	46b0      	mov	r8, r6
  if (value == 0U)
 8003984:	f1be 0f00 	cmp.w	lr, #0
 8003988:	d059      	beq.n	8003a3e <HAL_ADC_ConfigChannel+0x4be>
  return __builtin_clz(value);
 800398a:	fabe fe8e 	clz	lr, lr
 800398e:	45ae      	cmp	lr, r5
 8003990:	d022      	beq.n	80039d8 <HAL_ADC_ConfigChannel+0x458>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003992:	6830      	ldr	r0, [r6, #0]
 8003994:	6830      	ldr	r0, [r6, #0]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003996:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800399a:	fa97 f5a7 	rbit	r5, r7
  if (value == 0U)
 800399e:	2d00      	cmp	r5, #0
 80039a0:	f43f ae23 	beq.w	80035ea <HAL_ADC_ConfigChannel+0x6a>
  return __builtin_clz(value);
 80039a4:	fab5 f285 	clz	r2, r5
 80039a8:	e778      	b.n	800389c <HAL_ADC_ConfigChannel+0x31c>
  MODIFY_REG(*preg,
 80039aa:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80039ac:	4620      	mov	r0, r4
 80039ae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80039b2:	f840 2f60 	str.w	r2, [r0, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039b6:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80039b8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80039ba:	6e65      	ldr	r5, [r4, #100]	@ 0x64
 80039bc:	f3c7 0612 	ubfx	r6, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039c0:	f104 0e64 	add.w	lr, r4, #100	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80039c4:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039c8:	463a      	mov	r2, r7
 80039ca:	2e00      	cmp	r6, #0
 80039cc:	d1c4      	bne.n	8003958 <HAL_ADC_ConfigChannel+0x3d8>
 80039ce:	f3c7 6284 	ubfx	r2, r7, #26, #5
 80039d2:	e751      	b.n	8003878 <HAL_ADC_ConfigChannel+0x2f8>
 80039d4:	f100 080c 	add.w	r8, r0, #12
  MODIFY_REG(*preg,
 80039d8:	f8dc 2000 	ldr.w	r2, [ip]
 80039dc:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80039e0:	f8cc 2000 	str.w	r2, [ip]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039e4:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80039e6:	68c2      	ldr	r2, [r0, #12]
 80039e8:	68c0      	ldr	r0, [r0, #12]
 80039ea:	f3c7 0512 	ubfx	r5, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039ee:	4646      	mov	r6, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80039f0:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039f4:	463a      	mov	r2, r7
 80039f6:	2d00      	cmp	r5, #0
 80039f8:	d1cf      	bne.n	800399a <HAL_ADC_ConfigChannel+0x41a>
 80039fa:	f3c7 6284 	ubfx	r2, r7, #26, #5
 80039fe:	e74d      	b.n	800389c <HAL_ADC_ConfigChannel+0x31c>
 8003a00:	f100 0808 	add.w	r8, r0, #8
  MODIFY_REG(*preg,
 8003a04:	f8de 2000 	ldr.w	r2, [lr]
 8003a08:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003a0c:	f8ce 2000 	str.w	r2, [lr]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a10:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a12:	6882      	ldr	r2, [r0, #8]
 8003a14:	6885      	ldr	r5, [r0, #8]
 8003a16:	f3c7 0612 	ubfx	r6, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a1a:	46c4      	mov	ip, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a1c:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003a20:	463a      	mov	r2, r7
 8003a22:	2e00      	cmp	r6, #0
 8003a24:	d1a9      	bne.n	800397a <HAL_ADC_ConfigChannel+0x3fa>
 8003a26:	f3c7 6284 	ubfx	r2, r7, #26, #5
 8003a2a:	e72e      	b.n	800388a <HAL_ADC_ConfigChannel+0x30a>
  MODIFY_REG(*preg,
 8003a2c:	6832      	ldr	r2, [r6, #0]
 8003a2e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003a32:	6032      	str	r2, [r6, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003a34:	680a      	ldr	r2, [r1, #0]
}
 8003a36:	e5d8      	b.n	80035ea <HAL_ADC_ConfigChannel+0x6a>
 8003a38:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8003a3c:	e6a5      	b.n	800378a <HAL_ADC_ConfigChannel+0x20a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a3e:	68c5      	ldr	r5, [r0, #12]
 8003a40:	68c0      	ldr	r0, [r0, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a42:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8003a46:	e7a8      	b.n	800399a <HAL_ADC_ConfigChannel+0x41a>
 8003a48:	4a08      	ldr	r2, [pc, #32]	@ (8003a6c <HAL_ADC_ConfigChannel+0x4ec>)
 8003a4a:	e6be      	b.n	80037ca <HAL_ADC_ConfigChannel+0x24a>
 8003a4c:	2502      	movs	r5, #2
 8003a4e:	e6a9      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x224>
 8003a50:	6885      	ldr	r5, [r0, #8]
 8003a52:	6885      	ldr	r5, [r0, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a54:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8003a58:	e78f      	b.n	800397a <HAL_ADC_ConfigChannel+0x3fa>
 8003a5a:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 8003a5e:	e6b4      	b.n	80037ca <HAL_ADC_ConfigChannel+0x24a>
 8003a60:	2502      	movs	r5, #2
 8003a62:	e75b      	b.n	800391c <HAL_ADC_ConfigChannel+0x39c>
 8003a64:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8003a68:	e74b      	b.n	8003902 <HAL_ADC_ConfigChannel+0x382>
 8003a6a:	bf00      	nop
 8003a6c:	fe500000 	.word	0xfe500000

08003a70 <ADC_ConversionStop>:
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a70:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	f012 0f04 	tst.w	r2, #4
{
 8003a78:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a7e:	d101      	bne.n	8003a84 <ADC_ConversionStop+0x14>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a80:	0716      	lsls	r6, r2, #28
 8003a82:	d53c      	bpl.n	8003afe <ADC_ConversionStop+0x8e>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	0195      	lsls	r5, r2, #6
 8003a88:	d504      	bpl.n	8003a94 <ADC_ConversionStop+0x24>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003a8a:	8b20      	ldrh	r0, [r4, #24]
 8003a8c:	f240 1201 	movw	r2, #257	@ 0x101
 8003a90:	4290      	cmp	r0, r2
 8003a92:	d045      	beq.n	8003b20 <ADC_ConversionStop+0xb0>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003a94:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	d033      	beq.n	8003b02 <ADC_ConversionStop+0x92>
 8003a9a:	0750      	lsls	r0, r2, #29
 8003a9c:	d502      	bpl.n	8003aa4 <ADC_ConversionStop+0x34>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003a9e:	689a      	ldr	r2, [r3, #8]
 8003aa0:	0792      	lsls	r2, r2, #30
 8003aa2:	d559      	bpl.n	8003b58 <ADC_ConversionStop+0xe8>
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003aa4:	2901      	cmp	r1, #1
 8003aa6:	d055      	beq.n	8003b54 <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	0710      	lsls	r0, r2, #28
 8003aac:	d50a      	bpl.n	8003ac4 <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	0792      	lsls	r2, r2, #30
 8003ab2:	d407      	bmi.n	8003ac4 <ADC_ConversionStop+0x54>
  MODIFY_REG(ADCx->CR,
 8003ab4:	689a      	ldr	r2, [r3, #8]
 8003ab6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003aba:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003abe:	f042 0220 	orr.w	r2, r2, #32
 8003ac2:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8003ac4:	2903      	cmp	r1, #3
 8003ac6:	d145      	bne.n	8003b54 <ADC_ConversionStop+0xe4>
 8003ac8:	250c      	movs	r5, #12
    tickstart = HAL_GetTick();
 8003aca:	f7ff fc17 	bl	80032fc <HAL_GetTick>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ace:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003ad0:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	421d      	tst	r5, r3
 8003ad6:	d012      	beq.n	8003afe <ADC_ConversionStop+0x8e>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003ad8:	f7ff fc10 	bl	80032fc <HAL_GetTick>
 8003adc:	1b80      	subs	r0, r0, r6
 8003ade:	2805      	cmp	r0, #5
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ae0:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003ae2:	d9f6      	bls.n	8003ad2 <ADC_ConversionStop+0x62>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	422a      	tst	r2, r5
 8003ae8:	d0f3      	beq.n	8003ad2 <ADC_ConversionStop+0x62>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003aec:	f043 0310 	orr.w	r3, r3, #16
 8003af0:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003af2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 8003afa:	2001      	movs	r0, #1
}
 8003afc:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8003afe:	2000      	movs	r0, #0
}
 8003b00:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003b02:	0716      	lsls	r6, r2, #28
 8003b04:	d50a      	bpl.n	8003b1c <ADC_ConversionStop+0xac>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	0795      	lsls	r5, r2, #30
 8003b0a:	d407      	bmi.n	8003b1c <ADC_ConversionStop+0xac>
  MODIFY_REG(ADCx->CR,
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003b12:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003b16:	f042 0220 	orr.w	r2, r2, #32
 8003b1a:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003b1c:	2508      	movs	r5, #8
 8003b1e:	e7d4      	b.n	8003aca <ADC_ConversionStop+0x5a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	0650      	lsls	r0, r2, #25
 8003b24:	d406      	bmi.n	8003b34 <ADC_ConversionStop+0xc4>
 8003b26:	4a11      	ldr	r2, [pc, #68]	@ (8003b6c <ADC_ConversionStop+0xfc>)
 8003b28:	e001      	b.n	8003b2e <ADC_ConversionStop+0xbe>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003b2a:	3a01      	subs	r2, #1
 8003b2c:	d0dd      	beq.n	8003aea <ADC_ConversionStop+0x7a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003b2e:	6819      	ldr	r1, [r3, #0]
 8003b30:	0649      	lsls	r1, r1, #25
 8003b32:	d5fa      	bpl.n	8003b2a <ADC_ConversionStop+0xba>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003b34:	2240      	movs	r2, #64	@ 0x40
 8003b36:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b38:	689a      	ldr	r2, [r3, #8]
 8003b3a:	0756      	lsls	r6, r2, #29
 8003b3c:	d50a      	bpl.n	8003b54 <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	0795      	lsls	r5, r2, #30
 8003b42:	d407      	bmi.n	8003b54 <ADC_ConversionStop+0xe4>
  MODIFY_REG(ADCx->CR,
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003b4a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003b4e:	f042 0210 	orr.w	r2, r2, #16
 8003b52:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003b54:	2504      	movs	r5, #4
 8003b56:	e7b8      	b.n	8003aca <ADC_ConversionStop+0x5a>
 8003b58:	689a      	ldr	r2, [r3, #8]
 8003b5a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003b5e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003b62:	f042 0210 	orr.w	r2, r2, #16
 8003b66:	609a      	str	r2, [r3, #8]
}
 8003b68:	e79c      	b.n	8003aa4 <ADC_ConversionStop+0x34>
 8003b6a:	bf00      	nop
 8003b6c:	a3400000 	.word	0xa3400000

08003b70 <ADC_Enable>:
{
 8003b70:	b570      	push	{r4, r5, r6, lr}
 8003b72:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8003b74:	2200      	movs	r2, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b76:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 8003b78:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	07d2      	lsls	r2, r2, #31
 8003b7e:	d42c      	bmi.n	8003bda <ADC_Enable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b80:	6899      	ldr	r1, [r3, #8]
 8003b82:	4a28      	ldr	r2, [pc, #160]	@ (8003c24 <ADC_Enable+0xb4>)
 8003b84:	4211      	tst	r1, r2
 8003b86:	4604      	mov	r4, r0
 8003b88:	d12a      	bne.n	8003be0 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 8003b8a:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b8c:	4926      	ldr	r1, [pc, #152]	@ (8003c28 <ADC_Enable+0xb8>)
  MODIFY_REG(ADCx->CR,
 8003b8e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003b92:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b9c:	688b      	ldr	r3, [r1, #8]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003b9e:	021b      	lsls	r3, r3, #8
 8003ba0:	d429      	bmi.n	8003bf6 <ADC_Enable+0x86>
    tickstart = HAL_GetTick();
 8003ba2:	f7ff fbab 	bl	80032fc <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	07d6      	lsls	r6, r2, #31
    tickstart = HAL_GetTick();
 8003bac:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bae:	d414      	bmi.n	8003bda <ADC_Enable+0x6a>
  MODIFY_REG(ADCx->CR,
 8003bb0:	4e1e      	ldr	r6, [pc, #120]	@ (8003c2c <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bb2:	689a      	ldr	r2, [r3, #8]
 8003bb4:	07d0      	lsls	r0, r2, #31
 8003bb6:	d404      	bmi.n	8003bc2 <ADC_Enable+0x52>
  MODIFY_REG(ADCx->CR,
 8003bb8:	689a      	ldr	r2, [r3, #8]
 8003bba:	4032      	ands	r2, r6
 8003bbc:	f042 0201 	orr.w	r2, r2, #1
 8003bc0:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bc2:	f7ff fb9b 	bl	80032fc <HAL_GetTick>
 8003bc6:	1b43      	subs	r3, r0, r5
 8003bc8:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bca:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bcc:	d902      	bls.n	8003bd4 <ADC_Enable+0x64>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	07d1      	lsls	r1, r2, #31
 8003bd2:	d505      	bpl.n	8003be0 <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	07d2      	lsls	r2, r2, #31
 8003bd8:	d5eb      	bpl.n	8003bb2 <ADC_Enable+0x42>
  return HAL_OK;
 8003bda:	2000      	movs	r0, #0
}
 8003bdc:	b002      	add	sp, #8
 8003bde:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003be0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003be2:	f043 0310 	orr.w	r3, r3, #16
 8003be6:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003be8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8003bea:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 8003bf2:	b002      	add	sp, #8
 8003bf4:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8003c30 <ADC_Enable+0xc0>)
 8003bf8:	4a0e      	ldr	r2, [pc, #56]	@ (8003c34 <ADC_Enable+0xc4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	099b      	lsrs	r3, r3, #6
 8003bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003c02:	099b      	lsrs	r3, r3, #6
 8003c04:	3301      	adds	r3, #1
 8003c06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003c0e:	9b01      	ldr	r3, [sp, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0c6      	beq.n	8003ba2 <ADC_Enable+0x32>
        wait_loop_index--;
 8003c14:	9b01      	ldr	r3, [sp, #4]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8003c1a:	9b01      	ldr	r3, [sp, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1f9      	bne.n	8003c14 <ADC_Enable+0xa4>
 8003c20:	e7bf      	b.n	8003ba2 <ADC_Enable+0x32>
 8003c22:	bf00      	nop
 8003c24:	8000003f 	.word	0x8000003f
 8003c28:	50040300 	.word	0x50040300
 8003c2c:	7fffffc0 	.word	0x7fffffc0
 8003c30:	20002c00 	.word	0x20002c00
 8003c34:	053e2d63 	.word	0x053e2d63

08003c38 <HAL_ADC_Start_DMA>:
{
 8003c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c3c:	4b36      	ldr	r3, [pc, #216]	@ (8003d18 <HAL_ADC_Start_DMA+0xe0>)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c3e:	6806      	ldr	r6, [r0, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
{
 8003c42:	460d      	mov	r5, r1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c44:	68b1      	ldr	r1, [r6, #8]
 8003c46:	0749      	lsls	r1, r1, #29
 8003c48:	d417      	bmi.n	8003c7a <HAL_ADC_Start_DMA+0x42>
 8003c4a:	4617      	mov	r7, r2
    __HAL_LOCK(hadc);
 8003c4c:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 8003c50:	2a01      	cmp	r2, #1
 8003c52:	4604      	mov	r4, r0
 8003c54:	d011      	beq.n	8003c7a <HAL_ADC_Start_DMA+0x42>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003c56:	f003 081f 	and.w	r8, r3, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003c5a:	4b30      	ldr	r3, [pc, #192]	@ (8003d1c <HAL_ADC_Start_DMA+0xe4>)
    __HAL_LOCK(hadc);
 8003c5c:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003c5e:	429e      	cmp	r6, r3
    __HAL_LOCK(hadc);
 8003c60:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003c64:	d00c      	beq.n	8003c80 <HAL_ADC_Start_DMA+0x48>
 8003c66:	f240 2121 	movw	r1, #545	@ 0x221
 8003c6a:	fa21 f108 	lsr.w	r1, r1, r8
 8003c6e:	4001      	ands	r1, r0
 8003c70:	d106      	bne.n	8003c80 <HAL_ADC_Start_DMA+0x48>
      __HAL_UNLOCK(hadc);
 8003c72:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
}
 8003c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 8003c7a:	2002      	movs	r0, #2
}
 8003c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8003c80:	4620      	mov	r0, r4
 8003c82:	f7ff ff75 	bl	8003b70 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 8003c86:	2800      	cmp	r0, #0
 8003c88:	d13c      	bne.n	8003d04 <HAL_ADC_Start_DMA+0xcc>
        ADC_STATE_CLR_SET(hadc->State,
 8003c8a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c8c:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8003c8e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c92:	f023 0301 	bic.w	r3, r3, #1
 8003c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c9a:	65a3      	str	r3, [r4, #88]	@ 0x58
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c9c:	4b20      	ldr	r3, [pc, #128]	@ (8003d20 <HAL_ADC_Start_DMA+0xe8>)
 8003c9e:	4299      	cmp	r1, r3
 8003ca0:	d035      	beq.n	8003d0e <HAL_ADC_Start_DMA+0xd6>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ca2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ca4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ca8:	65a3      	str	r3, [r4, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003caa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cac:	6d20      	ldr	r0, [r4, #80]	@ 0x50
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003cae:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003cb2:	bf18      	it	ne
 8003cb4:	6de3      	ldrne	r3, [r4, #92]	@ 0x5c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003cb6:	462a      	mov	r2, r5
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003cb8:	bf18      	it	ne
 8003cba:	f023 0306 	bicne.w	r3, r3, #6
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cbe:	4d19      	ldr	r5, [pc, #100]	@ (8003d24 <HAL_ADC_Start_DMA+0xec>)
          ADC_CLEAR_ERRORCODE(hadc);
 8003cc0:	65e3      	str	r3, [r4, #92]	@ 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003cc2:	62c5      	str	r5, [r0, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003cc4:	4d18      	ldr	r5, [pc, #96]	@ (8003d28 <HAL_ADC_Start_DMA+0xf0>)
 8003cc6:	6305      	str	r5, [r0, #48]	@ 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003cc8:	4d18      	ldr	r5, [pc, #96]	@ (8003d2c <HAL_ADC_Start_DMA+0xf4>)
 8003cca:	6345      	str	r5, [r0, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003ccc:	251c      	movs	r5, #28
 8003cce:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 8003cd0:	2500      	movs	r5, #0
 8003cd2:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003cd6:	684d      	ldr	r5, [r1, #4]
 8003cd8:	f045 0510 	orr.w	r5, r5, #16
 8003cdc:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003cde:	68cd      	ldr	r5, [r1, #12]
 8003ce0:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ce4:	463b      	mov	r3, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003ce6:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003ce8:	3140      	adds	r1, #64	@ 0x40
 8003cea:	f000 fc19 	bl	8004520 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003cee:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003cf0:	6893      	ldr	r3, [r2, #8]
 8003cf2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003cf6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003cfa:	f043 0304 	orr.w	r3, r3, #4
 8003cfe:	6093      	str	r3, [r2, #8]
}
 8003d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8003d04:	2300      	movs	r3, #0
 8003d06:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 8003d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d0e:	f1b8 0f00 	cmp.w	r8, #0
 8003d12:	d1ca      	bne.n	8003caa <HAL_ADC_Start_DMA+0x72>
 8003d14:	e7c5      	b.n	8003ca2 <HAL_ADC_Start_DMA+0x6a>
 8003d16:	bf00      	nop
 8003d18:	50040300 	.word	0x50040300
 8003d1c:	50040200 	.word	0x50040200
 8003d20:	50040100 	.word	0x50040100
 8003d24:	080034f9 	.word	0x080034f9
 8003d28:	080034e9 	.word	0x080034e9
 8003d2c:	08003565 	.word	0x08003565

08003d30 <ADC_Disable>:
{
 8003d30:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003d32:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	0795      	lsls	r5, r2, #30
 8003d38:	d502      	bpl.n	8003d40 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d3a:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8003d3c:	2000      	movs	r0, #0
}
 8003d3e:	bd38      	pop	{r3, r4, r5, pc}
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	07d4      	lsls	r4, r2, #31
 8003d44:	d5fa      	bpl.n	8003d3c <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	f002 020d 	and.w	r2, r2, #13
 8003d4c:	2a01      	cmp	r2, #1
 8003d4e:	4604      	mov	r4, r0
 8003d50:	d009      	beq.n	8003d66 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003d54:	f043 0310 	orr.w	r3, r3, #16
 8003d58:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d5a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003d5c:	f043 0301 	orr.w	r3, r3, #1
 8003d60:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8003d62:	2001      	movs	r0, #1
}
 8003d64:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003d6c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003d70:	2103      	movs	r1, #3
 8003d72:	f042 0202 	orr.w	r2, r2, #2
 8003d76:	609a      	str	r2, [r3, #8]
 8003d78:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8003d7a:	f7ff fabf 	bl	80032fc <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 8003d84:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d86:	d403      	bmi.n	8003d90 <ADC_Disable+0x60>
 8003d88:	e7d8      	b.n	8003d3c <ADC_Disable+0xc>
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	07db      	lsls	r3, r3, #31
 8003d8e:	d5d5      	bpl.n	8003d3c <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d90:	f7ff fab4 	bl	80032fc <HAL_GetTick>
 8003d94:	1b40      	subs	r0, r0, r5
 8003d96:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d98:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003d9a:	d9f6      	bls.n	8003d8a <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	07d2      	lsls	r2, r2, #31
 8003da0:	d5f3      	bpl.n	8003d8a <ADC_Disable+0x5a>
 8003da2:	e7d6      	b.n	8003d52 <ADC_Disable+0x22>

08003da4 <HAL_ADC_Stop_DMA>:
{
 8003da4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 8003da6:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d028      	beq.n	8003e00 <HAL_ADC_Stop_DMA+0x5c>
 8003dae:	2301      	movs	r3, #1
 8003db0:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003db4:	2103      	movs	r1, #3
 8003db6:	4604      	mov	r4, r0
 8003db8:	f7ff fe5a 	bl	8003a70 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003dbc:	4605      	mov	r5, r0
 8003dbe:	b9d0      	cbnz	r0, 8003df6 <HAL_ADC_Stop_DMA+0x52>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003dc0:	6823      	ldr	r3, [r4, #0]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003dc2:	6d20      	ldr	r0, [r4, #80]	@ 0x50
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003dc4:	68da      	ldr	r2, [r3, #12]
 8003dc6:	f022 0201 	bic.w	r2, r2, #1
 8003dca:	60da      	str	r2, [r3, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003dcc:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003dd0:	2a02      	cmp	r2, #2
 8003dd2:	d018      	beq.n	8003e06 <HAL_ADC_Stop_DMA+0x62>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	f022 0210 	bic.w	r2, r2, #16
 8003dda:	605a      	str	r2, [r3, #4]
      tmp_hal_status = ADC_Disable(hadc);
 8003ddc:	4620      	mov	r0, r4
 8003dde:	f7ff ffa7 	bl	8003d30 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003de2:	4605      	mov	r5, r0
 8003de4:	b938      	cbnz	r0, 8003df6 <HAL_ADC_Stop_DMA+0x52>
      ADC_STATE_CLR_SET(hadc->State,
 8003de6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003de8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003dec:	f023 0301 	bic.w	r3, r3, #1
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8003df6:	2300      	movs	r3, #0
 8003df8:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 8003dfc:	4628      	mov	r0, r5
 8003dfe:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hadc);
 8003e00:	2502      	movs	r5, #2
}
 8003e02:	4628      	mov	r0, r5
 8003e04:	bd38      	pop	{r3, r4, r5, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003e06:	f000 fbcf 	bl	80045a8 <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 8003e0a:	4605      	mov	r5, r0
 8003e0c:	b160      	cbz	r0, 8003e28 <HAL_ADC_Stop_DMA+0x84>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003e0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003e10:	6822      	ldr	r2, [r4, #0]
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003e12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e16:	65a3      	str	r3, [r4, #88]	@ 0x58
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003e18:	6853      	ldr	r3, [r2, #4]
 8003e1a:	f023 0310 	bic.w	r3, r3, #16
      (void)ADC_Disable(hadc);
 8003e1e:	4620      	mov	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003e20:	6053      	str	r3, [r2, #4]
      (void)ADC_Disable(hadc);
 8003e22:	f7ff ff85 	bl	8003d30 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003e26:	e7e6      	b.n	8003df6 <HAL_ADC_Stop_DMA+0x52>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003e28:	6822      	ldr	r2, [r4, #0]
 8003e2a:	6853      	ldr	r3, [r2, #4]
 8003e2c:	f023 0310 	bic.w	r3, r3, #16
 8003e30:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8003e32:	e7d3      	b.n	8003ddc <HAL_ADC_Stop_DMA+0x38>

08003e34 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003e34:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e36:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
{
 8003e3a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8003e3c:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003e3e:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 8003e40:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003e42:	d03f      	beq.n	8003ec4 <HAL_ADCEx_Calibration_Start+0x90>
 8003e44:	2301      	movs	r3, #1
 8003e46:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	460d      	mov	r5, r1
 8003e4e:	f7ff ff6f 	bl	8003d30 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
  if (tmp_hal_status == HAL_OK)
 8003e54:	b9e0      	cbnz	r0, 8003e90 <HAL_ADCEx_Calibration_Start+0x5c>
    ADC_STATE_CLR_SET(hadc->State,
 8003e56:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003e5a:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003e5e:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8003e60:	f043 0302 	orr.w	r3, r3, #2
 8003e64:	65a3      	str	r3, [r4, #88]	@ 0x58
  MODIFY_REG(ADCx->CR,
 8003e66:	6893      	ldr	r3, [r2, #8]
 8003e68:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003e6c:	f005 4180 	and.w	r1, r5, #1073741824	@ 0x40000000
 8003e70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003e74:	430b      	orrs	r3, r1
 8003e76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e7a:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003e7c:	6893      	ldr	r3, [r2, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	db0e      	blt.n	8003ea0 <HAL_ADCEx_Calibration_Start+0x6c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e84:	f023 0303 	bic.w	r3, r3, #3
 8003e88:	f043 0301 	orr.w	r3, r3, #1
 8003e8c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003e8e:	e002      	b.n	8003e96 <HAL_ADCEx_Calibration_Start+0x62>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e90:	f043 0310 	orr.w	r3, r3, #16
 8003e94:	65a3      	str	r3, [r4, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e96:	2300      	movs	r3, #0
 8003e98:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8003e9c:	b003      	add	sp, #12
 8003e9e:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 8003ea0:	9b01      	ldr	r3, [sp, #4]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003ea6:	9b01      	ldr	r3, [sp, #4]
 8003ea8:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8003eac:	d3e6      	bcc.n	8003e7c <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 8003eae:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003eb0:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8003eb4:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 8003eb6:	f043 0310 	orr.w	r3, r3, #16
 8003eba:	65a3      	str	r3, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hadc);
 8003ebc:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
        return HAL_ERROR;
 8003ec0:	2001      	movs	r0, #1
 8003ec2:	e7eb      	b.n	8003e9c <HAL_ADCEx_Calibration_Start+0x68>
  __HAL_LOCK(hadc);
 8003ec4:	2002      	movs	r0, #2
}
 8003ec6:	b003      	add	sp, #12
 8003ec8:	bd30      	pop	{r4, r5, pc}
 8003eca:	bf00      	nop

08003ecc <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ecc:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 8003ed0:	2a01      	cmp	r2, #1
 8003ed2:	d049      	beq.n	8003f68 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
{
 8003ed4:	b4f0      	push	{r4, r5, r6, r7}

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003ed6:	6804      	ldr	r4, [r0, #0]
 8003ed8:	4d30      	ldr	r5, [pc, #192]	@ (8003f9c <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
{
 8003eda:	b09a      	sub	sp, #104	@ 0x68
 8003edc:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003ede:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003ee0:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003ee2:	42ac      	cmp	r4, r5
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003ee4:	9216      	str	r2, [sp, #88]	@ 0x58
  __HAL_LOCK(hadc);
 8003ee6:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003eea:	9217      	str	r2, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003eec:	d008      	beq.n	8003f00 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eee:	6d99      	ldr	r1, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ef0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ef4:	f041 0120 	orr.w	r1, r1, #32
 8003ef8:	6599      	str	r1, [r3, #88]	@ 0x58
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8003efa:	b01a      	add	sp, #104	@ 0x68
 8003efc:	bcf0      	pop	{r4, r5, r6, r7}
 8003efe:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f00:	4a27      	ldr	r2, [pc, #156]	@ (8003fa0 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 8003f02:	6890      	ldr	r0, [r2, #8]
 8003f04:	0740      	lsls	r0, r0, #29
 8003f06:	d50b      	bpl.n	8003f20 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 8003f08:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f0a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003f0c:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8003f10:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f12:	659a      	str	r2, [r3, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 8003f1a:	b01a      	add	sp, #104	@ 0x68
 8003f1c:	bcf0      	pop	{r4, r5, r6, r7}
 8003f1e:	4770      	bx	lr
 8003f20:	68a0      	ldr	r0, [r4, #8]
 8003f22:	0740      	lsls	r0, r0, #29
 8003f24:	d4f1      	bmi.n	8003f0a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f26:	680d      	ldr	r5, [r1, #0]
 8003f28:	b305      	cbz	r5, 8003f6c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003f2a:	4e1e      	ldr	r6, [pc, #120]	@ (8003fa4 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 8003f2c:	684f      	ldr	r7, [r1, #4]
 8003f2e:	68b0      	ldr	r0, [r6, #8]
 8003f30:	f893 c030 	ldrb.w	ip, [r3, #48]	@ 0x30
 8003f34:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 8003f38:	4338      	orrs	r0, r7
 8003f3a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 8003f3e:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f40:	68a0      	ldr	r0, [r4, #8]
 8003f42:	6892      	ldr	r2, [r2, #8]
 8003f44:	f012 0f01 	tst.w	r2, #1
 8003f48:	4a17      	ldr	r2, [pc, #92]	@ (8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0xdc>)
 8003f4a:	6892      	ldr	r2, [r2, #8]
 8003f4c:	d123      	bne.n	8003f96 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003f4e:	4302      	orrs	r2, r0
 8003f50:	07d7      	lsls	r7, r2, #31
 8003f52:	d420      	bmi.n	8003f96 <HAL_ADCEx_MultiModeConfigChannel+0xca>
        MODIFY_REG(tmpADC_Common->CCR,
 8003f54:	68b2      	ldr	r2, [r6, #8]
 8003f56:	6889      	ldr	r1, [r1, #8]
 8003f58:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8003f5c:	430d      	orrs	r5, r1
 8003f5e:	f022 020f 	bic.w	r2, r2, #15
 8003f62:	4315      	orrs	r5, r2
 8003f64:	60b5      	str	r5, [r6, #8]
 8003f66:	e016      	b.n	8003f96 <HAL_ADCEx_MultiModeConfigChannel+0xca>
  __HAL_LOCK(hadc);
 8003f68:	2002      	movs	r0, #2
}
 8003f6a:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003f6c:	480d      	ldr	r0, [pc, #52]	@ (8003fa4 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 8003f6e:	6881      	ldr	r1, [r0, #8]
 8003f70:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8003f74:	6081      	str	r1, [r0, #8]
 8003f76:	68a1      	ldr	r1, [r4, #8]
 8003f78:	6892      	ldr	r2, [r2, #8]
 8003f7a:	f012 0f01 	tst.w	r2, #1
 8003f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0xdc>)
 8003f80:	6892      	ldr	r2, [r2, #8]
 8003f82:	d108      	bne.n	8003f96 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003f84:	430a      	orrs	r2, r1
 8003f86:	07d4      	lsls	r4, r2, #31
 8003f88:	d405      	bmi.n	8003f96 <HAL_ADCEx_MultiModeConfigChannel+0xca>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f8a:	6882      	ldr	r2, [r0, #8]
 8003f8c:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8003f90:	f022 020f 	bic.w	r2, r2, #15
 8003f94:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f96:	2000      	movs	r0, #0
 8003f98:	e7bc      	b.n	8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8003f9a:	bf00      	nop
 8003f9c:	50040000 	.word	0x50040000
 8003fa0:	50040100 	.word	0x50040100
 8003fa4:	50040300 	.word	0x50040300
 8003fa8:	50040200 	.word	0x50040200

08003fac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fac:	4907      	ldr	r1, [pc, #28]	@ (8003fcc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003fae:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fb0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fb2:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fb6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fba:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fbc:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fbe:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003fc6:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	e000ed00 	.word	0xe000ed00

08003fd0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8004040 <HAL_NVIC_SetPriority+0x70>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fd8:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fda:	f1c3 0e07 	rsb	lr, r3, #7
 8003fde:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fe2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fe6:	bf28      	it	cs
 8003fe8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fec:	f1bc 0f06 	cmp.w	ip, #6
 8003ff0:	d91c      	bls.n	800402c <HAL_NVIC_SetPriority+0x5c>
 8003ff2:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffa:	fa03 f30c 	lsl.w	r3, r3, ip
 8003ffe:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004002:	f04f 33ff 	mov.w	r3, #4294967295
 8004006:	fa03 f30e 	lsl.w	r3, r3, lr
 800400a:	ea21 0303 	bic.w	r3, r1, r3
 800400e:	fa03 f30c 	lsl.w	r3, r3, ip
 8004012:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004014:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8004016:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004018:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800401a:	db0a      	blt.n	8004032 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800401c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8004020:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8004024:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004028:	f85d fb04 	ldr.w	pc, [sp], #4
 800402c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800402e:	4694      	mov	ip, r2
 8004030:	e7e7      	b.n	8004002 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004032:	4a04      	ldr	r2, [pc, #16]	@ (8004044 <HAL_NVIC_SetPriority+0x74>)
 8004034:	f000 000f 	and.w	r0, r0, #15
 8004038:	4402      	add	r2, r0
 800403a:	7613      	strb	r3, [r2, #24]
 800403c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004040:	e000ed00 	.word	0xe000ed00
 8004044:	e000ecfc 	.word	0xe000ecfc

08004048 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004048:	2800      	cmp	r0, #0
 800404a:	db07      	blt.n	800405c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800404c:	4a04      	ldr	r2, [pc, #16]	@ (8004060 <HAL_NVIC_EnableIRQ+0x18>)
 800404e:	0941      	lsrs	r1, r0, #5
 8004050:	2301      	movs	r3, #1
 8004052:	f000 001f 	and.w	r0, r0, #31
 8004056:	4083      	lsls	r3, r0
 8004058:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	e000e100 	.word	0xe000e100

08004064 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004064:	3801      	subs	r0, #1
 8004066:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800406a:	d301      	bcc.n	8004070 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 800406c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800406e:	4770      	bx	lr
{
 8004070:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004072:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004076:	4c07      	ldr	r4, [pc, #28]	@ (8004094 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004078:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800407a:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 800407e:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004082:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004084:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004086:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004088:	619a      	str	r2, [r3, #24]
}
 800408a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800408e:	6119      	str	r1, [r3, #16]
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	e000ed00 	.word	0xe000ed00

08004098 <CRYP_SetKey>:
  */
static HAL_StatusTypeDef  CRYP_SetKey(CRYP_HandleTypeDef *hcryp)
{
  uint32_t keyaddr;

  if (hcryp->Init.pKey == NULL)
 8004098:	6a03      	ldr	r3, [r0, #32]
 800409a:	b32b      	cbz	r3, 80040e8 <CRYP_SetKey+0x50>
{
 800409c:	b410      	push	{r4}
  }


  keyaddr = (uint32_t)(hcryp->Init.pKey);

  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 800409e:	68c4      	ldr	r4, [r0, #12]
  {
    hcryp->Instance->KEYR7 = __REV(*(uint32_t*)(keyaddr));
 80040a0:	6802      	ldr	r2, [r0, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 80040a2:	f5b4 2f80 	cmp.w	r4, #262144	@ 0x40000
  keyaddr = (uint32_t)(hcryp->Init.pKey);
 80040a6:	4619      	mov	r1, r3
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 80040a8:	d10e      	bne.n	80040c8 <CRYP_SetKey+0x30>
  return __builtin_bswap32(value);
 80040aa:	6818      	ldr	r0, [r3, #0]
 80040ac:	ba00      	rev	r0, r0
    hcryp->Instance->KEYR7 = __REV(*(uint32_t*)(keyaddr));
 80040ae:	63d0      	str	r0, [r2, #60]	@ 0x3c
 80040b0:	6858      	ldr	r0, [r3, #4]
 80040b2:	ba00      	rev	r0, r0
    keyaddr+=4U;
    hcryp->Instance->KEYR6 = __REV(*(uint32_t*)(keyaddr));
 80040b4:	6390      	str	r0, [r2, #56]	@ 0x38
 80040b6:	6898      	ldr	r0, [r3, #8]
 80040b8:	ba00      	rev	r0, r0
    keyaddr+=4U;
    hcryp->Instance->KEYR5 = __REV(*(uint32_t*)(keyaddr));
 80040ba:	6350      	str	r0, [r2, #52]	@ 0x34
 80040bc:	68d8      	ldr	r0, [r3, #12]
    keyaddr+=4U;
    hcryp->Instance->KEYR4 = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4U;
 80040be:	f103 0110 	add.w	r1, r3, #16
 80040c2:	ba00      	rev	r0, r0
  }

  hcryp->Instance->KEYR3 = __REV(*(uint32_t*)(keyaddr));
 80040c4:	460b      	mov	r3, r1
    hcryp->Instance->KEYR4 = __REV(*(uint32_t*)(keyaddr));
 80040c6:	6310      	str	r0, [r2, #48]	@ 0x30
 80040c8:	681b      	ldr	r3, [r3, #0]
  hcryp->Instance->KEYR1 = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4U;
  hcryp->Instance->KEYR0 = __REV(*(uint32_t*)(keyaddr));

  return HAL_OK;
}
 80040ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80040ce:	ba1b      	rev	r3, r3
  hcryp->Instance->KEYR3 = __REV(*(uint32_t*)(keyaddr));
 80040d0:	61d3      	str	r3, [r2, #28]
 80040d2:	684b      	ldr	r3, [r1, #4]
 80040d4:	ba1b      	rev	r3, r3
  hcryp->Instance->KEYR2 = __REV(*(uint32_t*)(keyaddr));
 80040d6:	6193      	str	r3, [r2, #24]
 80040d8:	688b      	ldr	r3, [r1, #8]
 80040da:	ba1b      	rev	r3, r3
  hcryp->Instance->KEYR1 = __REV(*(uint32_t*)(keyaddr));
 80040dc:	6153      	str	r3, [r2, #20]
 80040de:	68cb      	ldr	r3, [r1, #12]
 80040e0:	ba1b      	rev	r3, r3
  return HAL_OK;
 80040e2:	2000      	movs	r0, #0
  hcryp->Instance->KEYR0 = __REV(*(uint32_t*)(keyaddr));
 80040e4:	6113      	str	r3, [r2, #16]
}
 80040e6:	4770      	bx	lr
    return HAL_ERROR;
 80040e8:	2001      	movs	r0, #1
}
 80040ea:	4770      	bx	lr

080040ec <HAL_CRYP_Init>:
  if(hcryp == NULL)
 80040ec:	2800      	cmp	r0, #0
 80040ee:	f000 80a5 	beq.w	800423c <HAL_CRYP_Init+0x150>
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 80040f2:	6902      	ldr	r2, [r0, #16]
 80040f4:	2a18      	cmp	r2, #24
{
 80040f6:	b570      	push	{r4, r5, r6, lr}
 80040f8:	4604      	mov	r4, r0
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 80040fa:	d04d      	beq.n	8004198 <HAL_CRYP_Init+0xac>
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 80040fc:	2a08      	cmp	r2, #8
 80040fe:	d03e      	beq.n	800417e <HAL_CRYP_Init+0x92>
  if(hcryp->State == HAL_CRYP_STATE_RESET)
 8004100:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 8004104:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8004108:	2b00      	cmp	r3, #0
 800410a:	d03e      	beq.n	800418a <HAL_CRYP_Init+0x9e>
  __HAL_CRYP_DISABLE(hcryp);
 800410c:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 800410e:	68e1      	ldr	r1, [r4, #12]
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8004110:	2302      	movs	r3, #2
 8004112:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 8004116:	682b      	ldr	r3, [r5, #0]
 8004118:	f023 0301 	bic.w	r3, r3, #1
 800411c:	602b      	str	r3, [r5, #0]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 800411e:	682b      	ldr	r3, [r5, #0]
 8004120:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004124:	430b      	orrs	r3, r1
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8004126:	2a08      	cmp	r2, #8
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 8004128:	f04f 010a 	mov.w	r1, #10
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 800412c:	602b      	str	r3, [r5, #0]
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 800412e:	f884 1048 	strb.w	r1, [r4, #72]	@ 0x48
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8004132:	d067      	beq.n	8004204 <HAL_CRYP_Init+0x118>
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8004134:	e9d4 6005 	ldrd	r6, r0, [r4, #20]
    if (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)
 8004138:	2e60      	cmp	r6, #96	@ 0x60
 800413a:	d033      	beq.n	80041a4 <HAL_CRYP_Init+0xb8>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 800413c:	6829      	ldr	r1, [r5, #0]
 800413e:	68a3      	ldr	r3, [r4, #8]
 8004140:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8004144:	f021 017e 	bic.w	r1, r1, #126	@ 0x7e
 8004148:	4333      	orrs	r3, r6
 800414a:	430b      	orrs	r3, r1
 800414c:	4313      	orrs	r3, r2
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 800414e:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8004152:	602b      	str	r3, [r5, #0]
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8004154:	d062      	beq.n	800421c <HAL_CRYP_Init+0x130>
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8004156:	2800      	cmp	r0, #0
 8004158:	d04c      	beq.n	80041f4 <HAL_CRYP_Init+0x108>
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 800415a:	2e00      	cmp	r6, #0
 800415c:	d13a      	bne.n	80041d4 <HAL_CRYP_Init+0xe8>
  hcryp->CrypInCount = 0;
 800415e:	2200      	movs	r2, #0
 8004160:	2300      	movs	r3, #0
 8004162:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8004166:	2000      	movs	r0, #0
  hcryp->State = HAL_CRYP_STATE_READY;
 8004168:	2301      	movs	r3, #1
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 800416a:	65a0      	str	r0, [r4, #88]	@ 0x58
  hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 800416c:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  hcryp->State = HAL_CRYP_STATE_READY;
 8004170:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
  __HAL_CRYP_ENABLE(hcryp);
 8004174:	682b      	ldr	r3, [r5, #0]
 8004176:	f043 0301 	orr.w	r3, r3, #1
 800417a:	602b      	str	r3, [r5, #0]
}
 800417c:	bd70      	pop	{r4, r5, r6, pc}
   && (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 800417e:	6943      	ldr	r3, [r0, #20]
 8004180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004184:	d1bc      	bne.n	8004100 <HAL_CRYP_Init+0x14>
    return HAL_ERROR;
 8004186:	2001      	movs	r0, #1
}
 8004188:	bd70      	pop	{r4, r5, r6, pc}
    hcryp->Lock = HAL_UNLOCKED;
 800418a:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
    HAL_CRYP_MspInit(hcryp);
 800418e:	4620      	mov	r0, r4
 8004190:	f7fd f8be 	bl	8001310 <HAL_CRYP_MspInit>
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8004194:	6922      	ldr	r2, [r4, #16]
 8004196:	e7b9      	b.n	800410c <HAL_CRYP_Init+0x20>
         ((hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CTR)           \
 8004198:	6943      	ldr	r3, [r0, #20]
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 800419a:	f023 0120 	bic.w	r1, r3, #32
 800419e:	2940      	cmp	r1, #64	@ 0x40
 80041a0:	d1ee      	bne.n	8004180 <HAL_CRYP_Init+0x94>
 80041a2:	e7f0      	b.n	8004186 <HAL_CRYP_Init+0x9a>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 80041a4:	682b      	ldr	r3, [r5, #0]
 80041a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041aa:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80041b4:	602b      	str	r3, [r5, #0]
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 80041b6:	682b      	ldr	r3, [r5, #0]
 80041b8:	69e2      	ldr	r2, [r4, #28]
 80041ba:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80041be:	4313      	orrs	r3, r2
      hcryp->Phase = HAL_CRYP_PHASE_START;
 80041c0:	2203      	movs	r2, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 80041c2:	602b      	str	r3, [r5, #0]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 80041c4:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 80041c8:	b920      	cbnz	r0, 80041d4 <HAL_CRYP_Init+0xe8>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 80041ca:	4620      	mov	r0, r4
 80041cc:	f7ff ff64 	bl	8004098 <CRYP_SetKey>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d1d8      	bne.n	8004186 <HAL_CRYP_Init+0x9a>
    hcryp->Instance->IVR0 = 0;
  }
  else
#endif
  {
    if (hcryp->Init.pInitVect == NULL)
 80041d4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0d5      	beq.n	8004186 <HAL_CRYP_Init+0x9a>
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	ba12      	rev	r2, r2
      return HAL_ERROR;
    }

    ivaddr = (uint32_t)(hcryp->Init.pInitVect);

    hcryp->Instance->IVR3 = __REV(*(uint32_t*)(ivaddr));
 80041de:	62ea      	str	r2, [r5, #44]	@ 0x2c
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	ba12      	rev	r2, r2
    ivaddr+=4U;
    hcryp->Instance->IVR2 = __REV(*(uint32_t*)(ivaddr));
 80041e4:	62aa      	str	r2, [r5, #40]	@ 0x28
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	ba12      	rev	r2, r2
    ivaddr+=4U;
    hcryp->Instance->IVR1 = __REV(*(uint32_t*)(ivaddr));
 80041ea:	626a      	str	r2, [r5, #36]	@ 0x24
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	ba1b      	rev	r3, r3
    ivaddr+=4U;
    hcryp->Instance->IVR0 = __REV(*(uint32_t*)(ivaddr));
 80041f0:	622b      	str	r3, [r5, #32]
 80041f2:	e7b4      	b.n	800415e <HAL_CRYP_Init+0x72>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 80041f4:	4620      	mov	r0, r4
 80041f6:	f7ff ff4f 	bl	8004098 <CRYP_SetKey>
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d1c3      	bne.n	8004186 <HAL_CRYP_Init+0x9a>
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 80041fe:	2e00      	cmp	r6, #0
 8004200:	d0ad      	beq.n	800415e <HAL_CRYP_Init+0x72>
 8004202:	e7e7      	b.n	80041d4 <HAL_CRYP_Init+0xe8>
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	f023 0318 	bic.w	r3, r3, #24
 800420a:	f043 0308 	orr.w	r3, r3, #8
    if (CRYP_SetKey(hcryp) != HAL_OK)
 800420e:	4620      	mov	r0, r4
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 8004210:	602b      	str	r3, [r5, #0]
    if (CRYP_SetKey(hcryp) != HAL_OK)
 8004212:	f7ff ff41 	bl	8004098 <CRYP_SetKey>
 8004216:	2800      	cmp	r0, #0
 8004218:	d0a1      	beq.n	800415e <HAL_CRYP_Init+0x72>
 800421a:	e7b4      	b.n	8004186 <HAL_CRYP_Init+0x9a>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 800421c:	682b      	ldr	r3, [r5, #0]
 800421e:	69e2      	ldr	r2, [r4, #28]
 8004220:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8004224:	4313      	orrs	r3, r2
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8004226:	2203      	movs	r2, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8004228:	602b      	str	r3, [r5, #0]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 800422a:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 800422e:	b138      	cbz	r0, 8004240 <HAL_CRYP_Init+0x154>
    hcryp->Instance->IVR3 = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	62eb      	str	r3, [r5, #44]	@ 0x2c
    hcryp->Instance->IVR2 = 0;
 8004234:	62ab      	str	r3, [r5, #40]	@ 0x28
    hcryp->Instance->IVR1 = 0;
 8004236:	626b      	str	r3, [r5, #36]	@ 0x24
    hcryp->Instance->IVR0 = 0;
 8004238:	622b      	str	r3, [r5, #32]
 800423a:	e790      	b.n	800415e <HAL_CRYP_Init+0x72>
    return HAL_ERROR;
 800423c:	2001      	movs	r0, #1
}
 800423e:	4770      	bx	lr
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8004240:	4620      	mov	r0, r4
 8004242:	f7ff ff29 	bl	8004098 <CRYP_SetKey>
 8004246:	2800      	cmp	r0, #0
 8004248:	d19d      	bne.n	8004186 <HAL_CRYP_Init+0x9a>
 800424a:	e7f1      	b.n	8004230 <HAL_CRYP_Init+0x144>

0800424c <HAL_CRYPEx_AES>:
  *                     case of key derivation only.
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYPEx_AES(CRYP_HandleTypeDef *hcryp, uint8_t *pInputData, uint16_t Size, uint8_t *pOutputData, uint32_t Timeout)
{
 800424c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8004250:	f890 5055 	ldrb.w	r5, [r0, #85]	@ 0x55
 8004254:	2d01      	cmp	r5, #1
 8004256:	f040 8089 	bne.w	800436c <HAL_CRYPEx_AES+0x120>
 800425a:	4606      	mov	r6, r0
 800425c:	461c      	mov	r4, r3
  {
    /* Check parameters setting */
    if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 800425e:	6933      	ldr	r3, [r6, #16]
 8004260:	2b08      	cmp	r3, #8
 8004262:	b2e8      	uxtb	r0, r5
 8004264:	d04b      	beq.n	80042fe <HAL_CRYPEx_AES+0xb2>
        return  HAL_ERROR;
      }
    }
    else
    {
      if ((pInputData == NULL) || (pOutputData == NULL) || (Size == 0U))
 8004266:	2900      	cmp	r1, #0
 8004268:	d07e      	beq.n	8004368 <HAL_CRYPEx_AES+0x11c>
 800426a:	2c00      	cmp	r4, #0
 800426c:	d07c      	beq.n	8004368 <HAL_CRYPEx_AES+0x11c>
 800426e:	4617      	mov	r7, r2
 8004270:	2a00      	cmp	r2, #0
 8004272:	d079      	beq.n	8004368 <HAL_CRYPEx_AES+0x11c>
        return  HAL_ERROR;
      }
    }

    /* Process Locked */
    __HAL_LOCK(hcryp);
 8004274:	f896 3054 	ldrb.w	r3, [r6, #84]	@ 0x54
 8004278:	2b01      	cmp	r3, #1
 800427a:	d077      	beq.n	800436c <HAL_CRYPEx_AES+0x120>
 800427c:	9a08      	ldr	r2, [sp, #32]
 800427e:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54

    /* Change the CRYP state */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8004282:	2302      	movs	r3, #2
 8004284:	3201      	adds	r2, #1
 8004286:	f886 3055 	strb.w	r3, [r6, #85]	@ 0x55
  uint32_t index;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;


  for(index=0U ; (index < Ilength); index += 16U)
 800428a:	f101 0510 	add.w	r5, r1, #16
  {
    /* Write the Input block in the Data Input register */
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 800428e:	6833      	ldr	r3, [r6, #0]
 8004290:	f104 0410 	add.w	r4, r4, #16
  for(index=0U ; (index < Ilength); index += 16U)
 8004294:	f04f 0800 	mov.w	r8, #0
 8004298:	f040 8088 	bne.w	80043ac <HAL_CRYPEx_AES+0x160>
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 800429c:	f855 2c10 	ldr.w	r2, [r5, #-16]
 80042a0:	609a      	str	r2, [r3, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 80042a2:	f855 2c0c 	ldr.w	r2, [r5, #-12]
 80042a6:	609a      	str	r2, [r3, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR  = *(uint32_t*)(inputaddr);
 80042a8:	f855 2c08 	ldr.w	r2, [r5, #-8]
 80042ac:	609a      	str	r2, [r3, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 80042ae:	f855 2c04 	ldr.w	r2, [r5, #-4]
 80042b2:	609a      	str	r2, [r3, #8]
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef const * const hcryp, uint32_t Timeout)
{
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 80042b4:	f7ff f822 	bl	80032fc <HAL_GetTick>

  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 80042b8:	6833      	ldr	r3, [r6, #0]
 80042ba:	6859      	ldr	r1, [r3, #4]
 80042bc:	07c8      	lsls	r0, r1, #31
 80042be:	d5fc      	bpl.n	80042ba <HAL_CRYPEx_AES+0x6e>
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80042c0:	6819      	ldr	r1, [r3, #0]
 80042c2:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80042c6:	6019      	str	r1, [r3, #0]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 80042c8:	68d9      	ldr	r1, [r3, #12]
 80042ca:	f844 1c10 	str.w	r1, [r4, #-16]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 80042ce:	68d9      	ldr	r1, [r3, #12]
 80042d0:	f844 1c0c 	str.w	r1, [r4, #-12]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 80042d4:	68d9      	ldr	r1, [r3, #12]
 80042d6:	f844 1c08 	str.w	r1, [r4, #-8]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 80042da:	68d9      	ldr	r1, [r3, #12]
 80042dc:	f844 1c04 	str.w	r1, [r4, #-4]
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 80042e0:	f896 105c 	ldrb.w	r1, [r6, #92]	@ 0x5c
 80042e4:	2901      	cmp	r1, #1
 80042e6:	f108 0210 	add.w	r2, r8, #16
 80042ea:	f000 8082 	beq.w	80043f2 <HAL_CRYPEx_AES+0x1a6>
  for(index=0U ; (index < Ilength); index += 16U)
 80042ee:	4297      	cmp	r7, r2
 80042f0:	f105 0510 	add.w	r5, r5, #16
 80042f4:	f104 0410 	add.w	r4, r4, #16
 80042f8:	d92a      	bls.n	8004350 <HAL_CRYPEx_AES+0x104>
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 80042fa:	4690      	mov	r8, r2
 80042fc:	e7ce      	b.n	800429c <HAL_CRYPEx_AES+0x50>
      if (pOutputData == NULL)
 80042fe:	2c00      	cmp	r4, #0
 8004300:	d032      	beq.n	8004368 <HAL_CRYPEx_AES+0x11c>
    __HAL_LOCK(hcryp);
 8004302:	f896 3054 	ldrb.w	r3, [r6, #84]	@ 0x54
 8004306:	2b01      	cmp	r3, #1
 8004308:	d030      	beq.n	800436c <HAL_CRYPEx_AES+0x120>
    hcryp->State = HAL_CRYP_STATE_BUSY;
 800430a:	2302      	movs	r3, #2
 800430c:	f886 3055 	strb.w	r3, [r6, #85]	@ 0x55
    __HAL_LOCK(hcryp);
 8004310:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54
  tickstart = HAL_GetTick();
 8004314:	f7fe fff2 	bl	80032fc <HAL_GetTick>
 8004318:	9b08      	ldr	r3, [sp, #32]
 800431a:	3301      	adds	r3, #1
 800431c:	4605      	mov	r5, r0
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 800431e:	d178      	bne.n	8004412 <HAL_CRYPEx_AES+0x1c6>
 8004320:	6832      	ldr	r2, [r6, #0]
 8004322:	6853      	ldr	r3, [r2, #4]
 8004324:	07dd      	lsls	r5, r3, #31
 8004326:	d5fc      	bpl.n	8004322 <HAL_CRYPEx_AES+0xd6>
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8004328:	6813      	ldr	r3, [r2, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 800432a:	68f1      	ldr	r1, [r6, #12]
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 800432c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8004330:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8004334:	6013      	str	r3, [r2, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8004336:	d077      	beq.n	8004428 <HAL_CRYPEx_AES+0x1dc>
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR3);
 8004338:	69d3      	ldr	r3, [r2, #28]
 800433a:	ba1b      	rev	r3, r3
 800433c:	6023      	str	r3, [r4, #0]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR2);
 800433e:	6993      	ldr	r3, [r2, #24]
 8004340:	ba1b      	rev	r3, r3
 8004342:	6063      	str	r3, [r4, #4]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR1);
 8004344:	6953      	ldr	r3, [r2, #20]
 8004346:	ba1b      	rev	r3, r3
 8004348:	60a3      	str	r3, [r4, #8]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR0);
 800434a:	6913      	ldr	r3, [r2, #16]
 800434c:	ba1b      	rev	r3, r3
 800434e:	60e3      	str	r3, [r4, #12]
    if (hcryp->State != HAL_CRYP_STATE_SUSPENDED)
 8004350:	f896 3055 	ldrb.w	r3, [r6, #85]	@ 0x55
 8004354:	2b05      	cmp	r3, #5
      hcryp->State = HAL_CRYP_STATE_READY;
 8004356:	bf18      	it	ne
 8004358:	2301      	movne	r3, #1
    __HAL_UNLOCK(hcryp);
 800435a:	f04f 0000 	mov.w	r0, #0
      hcryp->State = HAL_CRYP_STATE_READY;
 800435e:	bf18      	it	ne
 8004360:	f886 3055 	strbne.w	r3, [r6, #85]	@ 0x55
    __HAL_UNLOCK(hcryp);
 8004364:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54
}
 8004368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hcryp);
 800436c:	2002      	movs	r0, #2
}
 800436e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004378:	601a      	str	r2, [r3, #0]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	f844 2c10 	str.w	r2, [r4, #-16]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	f844 2c0c 	str.w	r2, [r4, #-12]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 8004386:	68da      	ldr	r2, [r3, #12]
 8004388:	f844 2c08 	str.w	r2, [r4, #-8]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	f844 2c04 	str.w	r2, [r4, #-4]
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 8004392:	f896 105c 	ldrb.w	r1, [r6, #92]	@ 0x5c
 8004396:	2901      	cmp	r1, #1
 8004398:	f108 0210 	add.w	r2, r8, #16
 800439c:	d029      	beq.n	80043f2 <HAL_CRYPEx_AES+0x1a6>
  for(index=0U ; (index < Ilength); index += 16U)
 800439e:	4297      	cmp	r7, r2
 80043a0:	f105 0510 	add.w	r5, r5, #16
 80043a4:	f104 0410 	add.w	r4, r4, #16
 80043a8:	d9d2      	bls.n	8004350 <HAL_CRYPEx_AES+0x104>
 80043aa:	4690      	mov	r8, r2
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 80043ac:	f855 2c10 	ldr.w	r2, [r5, #-16]
 80043b0:	609a      	str	r2, [r3, #8]
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 80043b2:	f855 2c0c 	ldr.w	r2, [r5, #-12]
 80043b6:	609a      	str	r2, [r3, #8]
    hcryp->Instance->DINR  = *(uint32_t*)(inputaddr);
 80043b8:	f855 2c08 	ldr.w	r2, [r5, #-8]
 80043bc:	609a      	str	r2, [r3, #8]
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 80043be:	f855 2c04 	ldr.w	r2, [r5, #-4]
 80043c2:	609a      	str	r2, [r3, #8]
  tickstart = HAL_GetTick();
 80043c4:	f7fe ff9a 	bl	80032fc <HAL_GetTick>
 80043c8:	4681      	mov	r9, r0
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 80043ca:	6833      	ldr	r3, [r6, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	07d2      	lsls	r2, r2, #31
 80043d0:	d4cf      	bmi.n	8004372 <HAL_CRYPEx_AES+0x126>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((HAL_GetTick() - tickstart ) > Timeout)
 80043d2:	f7fe ff93 	bl	80032fc <HAL_GetTick>
 80043d6:	9a08      	ldr	r2, [sp, #32]
 80043d8:	eba0 0309 	sub.w	r3, r0, r9
 80043dc:	429a      	cmp	r2, r3
 80043de:	d2f4      	bcs.n	80043ca <HAL_CRYPEx_AES+0x17e>
    hcryp->State = HAL_CRYP_STATE_READY;
 80043e0:	2301      	movs	r3, #1
 80043e2:	f886 3055 	strb.w	r3, [r6, #85]	@ 0x55
    __HAL_UNLOCK(hcryp);
 80043e6:	2300      	movs	r3, #0
 80043e8:	f886 3054 	strb.w	r3, [r6, #84]	@ 0x54
        return HAL_TIMEOUT;
 80043ec:	2003      	movs	r0, #3
}
 80043ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 80043f2:	4297      	cmp	r7, r2
 80043f4:	d9ac      	bls.n	8004350 <HAL_CRYPEx_AES+0x104>
      hcryp->CrypInCount     =  Ilength - (index+16U);
 80043f6:	f1a7 0310 	sub.w	r3, r7, #16
 80043fa:	eba3 0308 	sub.w	r3, r3, r8
      hcryp->State = HAL_CRYP_STATE_SUSPENDED;
 80043fe:	2205      	movs	r2, #5
      hcryp->CrypInCount     =  Ilength - (index+16U);
 8004400:	6433      	str	r3, [r6, #64]	@ 0x40
      hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 8004402:	2300      	movs	r3, #0
      hcryp->pCrypOutBuffPtr =  (uint8_t *)outputaddr;
 8004404:	63f4      	str	r4, [r6, #60]	@ 0x3c
      hcryp->pCrypInBuffPtr  =  (uint8_t *)inputaddr;
 8004406:	63b5      	str	r5, [r6, #56]	@ 0x38
      hcryp->State = HAL_CRYP_STATE_SUSPENDED;
 8004408:	f886 2055 	strb.w	r2, [r6, #85]	@ 0x55
      hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 800440c:	f886 305c 	strb.w	r3, [r6, #92]	@ 0x5c
      return HAL_OK;
 8004410:	e79e      	b.n	8004350 <HAL_CRYPEx_AES+0x104>
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8004412:	6832      	ldr	r2, [r6, #0]
 8004414:	6853      	ldr	r3, [r2, #4]
 8004416:	07d9      	lsls	r1, r3, #31
 8004418:	d486      	bmi.n	8004328 <HAL_CRYPEx_AES+0xdc>
      if((HAL_GetTick() - tickstart ) > Timeout)
 800441a:	f7fe ff6f 	bl	80032fc <HAL_GetTick>
 800441e:	9a08      	ldr	r2, [sp, #32]
 8004420:	1b43      	subs	r3, r0, r5
 8004422:	429a      	cmp	r2, r3
 8004424:	d2f5      	bcs.n	8004412 <HAL_CRYPEx_AES+0x1c6>
 8004426:	e7db      	b.n	80043e0 <HAL_CRYPEx_AES+0x194>
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR7);
 8004428:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
    outputaddr+=4U;
 800442a:	3410      	adds	r4, #16
 800442c:	ba1b      	rev	r3, r3
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR7);
 800442e:	f844 3c10 	str.w	r3, [r4, #-16]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR6);
 8004432:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8004434:	ba1b      	rev	r3, r3
 8004436:	f844 3c0c 	str.w	r3, [r4, #-12]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR5);
 800443a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800443c:	ba1b      	rev	r3, r3
 800443e:	f844 3c08 	str.w	r3, [r4, #-8]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR4);
 8004442:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004444:	ba1b      	rev	r3, r3
 8004446:	f844 3c04 	str.w	r3, [r4, #-4]
    outputaddr+=4U;
 800444a:	e775      	b.n	8004338 <HAL_CRYPEx_AES+0xec>

0800444c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800444c:	2800      	cmp	r0, #0
 800444e:	d04e      	beq.n	80044ee <HAL_DMA_Init+0xa2>
{
 8004450:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004452:	4a2d      	ldr	r2, [pc, #180]	@ (8004508 <HAL_DMA_Init+0xbc>)
 8004454:	6804      	ldr	r4, [r0, #0]
 8004456:	4294      	cmp	r4, r2
 8004458:	4603      	mov	r3, r0
 800445a:	d93f      	bls.n	80044dc <HAL_DMA_Init+0x90>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800445c:	492b      	ldr	r1, [pc, #172]	@ (800450c <HAL_DMA_Init+0xc0>)
 800445e:	4a2c      	ldr	r2, [pc, #176]	@ (8004510 <HAL_DMA_Init+0xc4>)
    hdma->DmaBaseAddress = DMA2;
 8004460:	4d2c      	ldr	r5, [pc, #176]	@ (8004514 <HAL_DMA_Init+0xc8>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004462:	4421      	add	r1, r4
 8004464:	fba2 2101 	umull	r2, r1, r2, r1
 8004468:	0909      	lsrs	r1, r1, #4
 800446a:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800446c:	2202      	movs	r2, #2
 800446e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004472:	e9d3 6202 	ldrd	r6, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004476:	691f      	ldr	r7, [r3, #16]
  tmp = hdma->Instance->CCR;
 8004478:	6820      	ldr	r0, [r4, #0]
 800447a:	641d      	str	r5, [r3, #64]	@ 0x40
  tmp |=  hdma->Init.Direction        |
 800447c:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800447e:	433a      	orrs	r2, r7
 8004480:	695f      	ldr	r7, [r3, #20]
 8004482:	6459      	str	r1, [r3, #68]	@ 0x44
 8004484:	433a      	orrs	r2, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004486:	699f      	ldr	r7, [r3, #24]
 8004488:	433a      	orrs	r2, r7
 800448a:	69df      	ldr	r7, [r3, #28]
 800448c:	433a      	orrs	r2, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 800448e:	6a1f      	ldr	r7, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004490:	f36f 100e 	bfc	r0, #4, #11
          hdma->Init.Mode                | hdma->Init.Priority;
 8004494:	433a      	orrs	r2, r7
  tmp |=  hdma->Init.Direction        |
 8004496:	4302      	orrs	r2, r0
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004498:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
  hdma->Instance->CCR = tmp;
 800449c:	6022      	str	r2, [r4, #0]
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800449e:	d014      	beq.n	80044ca <HAL_DMA_Init+0x7e>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80044a0:	6858      	ldr	r0, [r3, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80044a2:	f001 011c 	and.w	r1, r1, #28
 80044a6:	220f      	movs	r2, #15
 80044a8:	408a      	lsls	r2, r1
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80044aa:	4088      	lsls	r0, r1
    if (DMA1 == hdma->DmaBaseAddress)
 80044ac:	491a      	ldr	r1, [pc, #104]	@ (8004518 <HAL_DMA_Init+0xcc>)
 80044ae:	428d      	cmp	r5, r1
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80044b0:	ea6f 0202 	mvn.w	r2, r2
    if (DMA1 == hdma->DmaBaseAddress)
 80044b4:	d01d      	beq.n	80044f2 <HAL_DMA_Init+0xa6>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80044b6:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	@ 0x4a8
 80044ba:	4022      	ands	r2, r4
 80044bc:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80044c0:	f8d1 24a8 	ldr.w	r2, [r1, #1192]	@ 0x4a8
 80044c4:	4302      	orrs	r2, r0
 80044c6:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044ca:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80044cc:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044ce:	63d8      	str	r0, [r3, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80044d0:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_READY;
 80044d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
}
 80044d8:	bcf0      	pop	{r4, r5, r6, r7}
 80044da:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80044dc:	490f      	ldr	r1, [pc, #60]	@ (800451c <HAL_DMA_Init+0xd0>)
 80044de:	4a0c      	ldr	r2, [pc, #48]	@ (8004510 <HAL_DMA_Init+0xc4>)
    hdma->DmaBaseAddress = DMA1;
 80044e0:	4d0d      	ldr	r5, [pc, #52]	@ (8004518 <HAL_DMA_Init+0xcc>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80044e2:	4421      	add	r1, r4
 80044e4:	fba2 2101 	umull	r2, r1, r2, r1
 80044e8:	0909      	lsrs	r1, r1, #4
 80044ea:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 80044ec:	e7be      	b.n	800446c <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 80044ee:	2001      	movs	r0, #1
}
 80044f0:	4770      	bx	lr
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80044f2:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 80044f6:	400a      	ands	r2, r1
 80044f8:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80044fc:	f8d5 20a8 	ldr.w	r2, [r5, #168]	@ 0xa8
 8004500:	4302      	orrs	r2, r0
 8004502:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
 8004506:	e7e0      	b.n	80044ca <HAL_DMA_Init+0x7e>
 8004508:	40020407 	.word	0x40020407
 800450c:	bffdfbf8 	.word	0xbffdfbf8
 8004510:	cccccccd 	.word	0xcccccccd
 8004514:	40020400 	.word	0x40020400
 8004518:	40020000 	.word	0x40020000
 800451c:	bffdfff8 	.word	0xbffdfff8

08004520 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004520:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004522:	f890 4024 	ldrb.w	r4, [r0, #36]	@ 0x24
 8004526:	2c01      	cmp	r4, #1
 8004528:	d00b      	beq.n	8004542 <HAL_DMA_Start_IT+0x22>
 800452a:	2401      	movs	r4, #1
 800452c:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004530:	f890 4025 	ldrb.w	r4, [r0, #37]	@ 0x25
 8004534:	2c01      	cmp	r4, #1
 8004536:	fa5f fc84 	uxtb.w	ip, r4
 800453a:	d005      	beq.n	8004548 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800453c:	2300      	movs	r3, #0
 800453e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 8004542:	2002      	movs	r0, #2

    /* Remain BUSY */
    status = HAL_BUSY;
  }
  return status;
}
 8004544:	bc70      	pop	{r4, r5, r6}
 8004546:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8004548:	2502      	movs	r5, #2
 800454a:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
    __HAL_DMA_DISABLE(hdma);
 800454e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004550:	2500      	movs	r5, #0
 8004552:	63c5      	str	r5, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004554:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004556:	6c45      	ldr	r5, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE(hdma);
 8004558:	f026 0601 	bic.w	r6, r6, #1
 800455c:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800455e:	f005 051c 	and.w	r5, r5, #28
 8004562:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 8004564:	fa0c f505 	lsl.w	r5, ip, r5
 8004568:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800456a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800456c:	6883      	ldr	r3, [r0, #8]
 800456e:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8004570:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004572:	bf0b      	itete	eq
 8004574:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004576:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8004578:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800457a:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 800457c:	b153      	cbz	r3, 8004594 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	f043 030e 	orr.w	r3, r3, #14
 8004584:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 800458c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800458e:	6023      	str	r3, [r4, #0]
}
 8004590:	bc70      	pop	{r4, r5, r6}
 8004592:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	f023 0304 	bic.w	r3, r3, #4
 800459a:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	f043 030a 	orr.w	r3, r3, #10
 80045a2:	6023      	str	r3, [r4, #0]
 80045a4:	e7ef      	b.n	8004586 <HAL_DMA_Start_IT+0x66>
 80045a6:	bf00      	nop

080045a8 <HAL_DMA_Abort>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80045a8:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80045ac:	2a02      	cmp	r2, #2
{
 80045ae:	4603      	mov	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80045b0:	d006      	beq.n	80045c0 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045b2:	2204      	movs	r2, #4
 80045b4:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80045b6:	2200      	movs	r2, #0
    return HAL_ERROR;
 80045b8:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80045ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80045be:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045c0:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045c2:	6c42      	ldr	r2, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045c4:	6808      	ldr	r0, [r1, #0]
 80045c6:	f020 000e 	bic.w	r0, r0, #14
 80045ca:	6008      	str	r0, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80045cc:	6808      	ldr	r0, [r1, #0]
 80045ce:	f020 0001 	bic.w	r0, r0, #1
 80045d2:	6008      	str	r0, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045d4:	f04f 0c01 	mov.w	ip, #1
 80045d8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80045da:	f002 021c 	and.w	r2, r2, #28
 80045de:	fa0c f202 	lsl.w	r2, ip, r2
 80045e2:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 80045e4:	2200      	movs	r2, #0
    return status;
 80045e6:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 80045e8:	f883 c025 	strb.w	ip, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 80045ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop

080045f4 <HAL_DMA_IRQHandler>:
{
 80045f4:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80045f6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80045f8:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 80045fa:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80045fc:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80045fe:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004600:	f003 031c 	and.w	r3, r3, #28
 8004604:	2204      	movs	r2, #4
 8004606:	409a      	lsls	r2, r3
 8004608:	420a      	tst	r2, r1
 800460a:	d00e      	beq.n	800462a <HAL_DMA_IRQHandler+0x36>
 800460c:	f014 0f04 	tst.w	r4, #4
 8004610:	d00b      	beq.n	800462a <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004612:	682b      	ldr	r3, [r5, #0]
 8004614:	069b      	lsls	r3, r3, #26
 8004616:	d403      	bmi.n	8004620 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004618:	682b      	ldr	r3, [r5, #0]
 800461a:	f023 0304 	bic.w	r3, r3, #4
 800461e:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8004620:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004622:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8004624:	b1cb      	cbz	r3, 800465a <HAL_DMA_IRQHandler+0x66>
}
 8004626:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8004628:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800462a:	2202      	movs	r2, #2
 800462c:	409a      	lsls	r2, r3
 800462e:	420a      	tst	r2, r1
 8004630:	d015      	beq.n	800465e <HAL_DMA_IRQHandler+0x6a>
 8004632:	f014 0f02 	tst.w	r4, #2
 8004636:	d012      	beq.n	800465e <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004638:	682b      	ldr	r3, [r5, #0]
 800463a:	0699      	lsls	r1, r3, #26
 800463c:	d406      	bmi.n	800464c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800463e:	682b      	ldr	r3, [r5, #0]
 8004640:	f023 030a 	bic.w	r3, r3, #10
 8004644:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004646:	2301      	movs	r3, #1
 8004648:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    if (hdma->XferCpltCallback != NULL)
 800464c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800464e:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 8004650:	2100      	movs	r1, #0
 8004652:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1e5      	bne.n	8004626 <HAL_DMA_IRQHandler+0x32>
}
 800465a:	bc70      	pop	{r4, r5, r6}
 800465c:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800465e:	2208      	movs	r2, #8
 8004660:	409a      	lsls	r2, r3
 8004662:	420a      	tst	r2, r1
 8004664:	d0f9      	beq.n	800465a <HAL_DMA_IRQHandler+0x66>
 8004666:	0722      	lsls	r2, r4, #28
 8004668:	d5f7      	bpl.n	800465a <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800466a:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 800466c:	6b41      	ldr	r1, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800466e:	f022 020e 	bic.w	r2, r2, #14
 8004672:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004674:	2201      	movs	r2, #1
 8004676:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 800467a:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800467c:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800467e:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8004680:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8004684:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    if (hdma->XferErrorCallback != NULL)
 8004688:	2900      	cmp	r1, #0
 800468a:	d0e6      	beq.n	800465a <HAL_DMA_IRQHandler+0x66>
}
 800468c:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800468e:	4708      	bx	r1

08004690 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004690:	680b      	ldr	r3, [r1, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 81ac 	beq.w	80049f0 <HAL_GPIO_Init+0x360>
{
 8004698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800469c:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 80046a0:	b085      	sub	sp, #20
  uint32_t position = 0x00u;
 80046a2:	f04f 0200 	mov.w	r2, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046a6:	f04f 0b01 	mov.w	fp, #1
 80046aa:	f000 80ec 	beq.w	8004886 <HAL_GPIO_Init+0x1f6>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046ae:	f8df e380 	ldr.w	lr, [pc, #896]	@ 8004a30 <HAL_GPIO_Init+0x3a0>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80046b2:	9300      	str	r3, [sp, #0]
    if (iocurrent != 0x00u)
 80046b4:	9b00      	ldr	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046b6:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00u)
 80046ba:	ea1c 0a03 	ands.w	sl, ip, r3
 80046be:	f000 8132 	beq.w	8004926 <HAL_GPIO_Init+0x296>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046c2:	684d      	ldr	r5, [r1, #4]
 80046c4:	f005 0703 	and.w	r7, r5, #3
 80046c8:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046ca:	2303      	movs	r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046cc:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046d0:	fa03 f604 	lsl.w	r6, r3, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046d4:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046d8:	ea6f 0606 	mvn.w	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046dc:	f240 812c 	bls.w	8004938 <HAL_GPIO_Init+0x2a8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046e0:	2f03      	cmp	r7, #3
 80046e2:	f040 8192 	bne.w	8004a0a <HAL_GPIO_Init+0x37a>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046e6:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 80046ea:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046ec:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046ee:	4334      	orrs	r4, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046f0:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80046f4:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046f6:	f000 8116 	beq.w	8004926 <HAL_GPIO_Init+0x296>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046fa:	4eca      	ldr	r6, [pc, #808]	@ (8004a24 <HAL_GPIO_Init+0x394>)
 80046fc:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 80046fe:	f044 0401 	orr.w	r4, r4, #1
 8004702:	6634      	str	r4, [r6, #96]	@ 0x60
 8004704:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 8004706:	f004 0401 	and.w	r4, r4, #1
 800470a:	9403      	str	r4, [sp, #12]
 800470c:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 800470e:	f022 0403 	bic.w	r4, r2, #3
 8004712:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004716:	f002 0703 	and.w	r7, r2, #3
 800471a:	230f      	movs	r3, #15
 800471c:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 8004720:	00bf      	lsls	r7, r7, #2
 8004722:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004726:	4bc0      	ldr	r3, [pc, #768]	@ (8004a28 <HAL_GPIO_Init+0x398>)
        temp = SYSCFG->EXTICR[position >> 2u];
 8004728:	68a6      	ldr	r6, [r4, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800472a:	4298      	cmp	r0, r3
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800472c:	ea26 060c 	bic.w	r6, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004730:	f000 814c 	beq.w	80049cc <HAL_GPIO_Init+0x33c>
 8004734:	4bbd      	ldr	r3, [pc, #756]	@ (8004a2c <HAL_GPIO_Init+0x39c>)
 8004736:	4298      	cmp	r0, r3
 8004738:	f000 80c9 	beq.w	80048ce <HAL_GPIO_Init+0x23e>
 800473c:	f8df c2f4 	ldr.w	ip, [pc, #756]	@ 8004a34 <HAL_GPIO_Init+0x3a4>
 8004740:	4560      	cmp	r0, ip
 8004742:	f000 814f 	beq.w	80049e4 <HAL_GPIO_Init+0x354>
 8004746:	f8df c2f0 	ldr.w	ip, [pc, #752]	@ 8004a38 <HAL_GPIO_Init+0x3a8>
 800474a:	4560      	cmp	r0, ip
 800474c:	f000 8151 	beq.w	80049f2 <HAL_GPIO_Init+0x362>
 8004750:	f8df c2e8 	ldr.w	ip, [pc, #744]	@ 8004a3c <HAL_GPIO_Init+0x3ac>
 8004754:	4560      	cmp	r0, ip
 8004756:	f000 813f 	beq.w	80049d8 <HAL_GPIO_Init+0x348>
 800475a:	f8df c2e4 	ldr.w	ip, [pc, #740]	@ 8004a40 <HAL_GPIO_Init+0x3b0>
 800475e:	4560      	cmp	r0, ip
 8004760:	f000 814d 	beq.w	80049fe <HAL_GPIO_Init+0x36e>
 8004764:	f8df c2dc 	ldr.w	ip, [pc, #732]	@ 8004a44 <HAL_GPIO_Init+0x3b4>
 8004768:	4560      	cmp	r0, ip
 800476a:	bf0c      	ite	eq
 800476c:	f04f 0c07 	moveq.w	ip, #7
 8004770:	f04f 0c08 	movne.w	ip, #8
 8004774:	fa0c f707 	lsl.w	r7, ip, r7
 8004778:	433e      	orrs	r6, r7
 800477a:	e0ad      	b.n	80048d8 <HAL_GPIO_Init+0x248>
        temp = GPIOx->OSPEEDR;
 800477c:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004780:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004782:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004786:	fa06 f807 	lsl.w	r8, r6, r7
 800478a:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800478e:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8004792:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004796:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800479a:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 800479e:	fa0e fe02 	lsl.w	lr, lr, r2
 80047a2:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 80047a6:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 80047aa:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047ae:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047b0:	ea0a 0808 	and.w	r8, sl, r8
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047b4:	fa06 fe07 	lsl.w	lr, r6, r7
 80047b8:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047bc:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80047be:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047c2:	d119      	bne.n	80047f8 <HAL_GPIO_Init+0x168>
        temp = GPIOx->AFR[position >> 3u];
 80047c4:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047c8:	690e      	ldr	r6, [r1, #16]
 80047ca:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047ce:	f002 0807 	and.w	r8, r2, #7
 80047d2:	f10e 4e90 	add.w	lr, lr, #1207959552	@ 0x48000000
 80047d6:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047da:	fa06 f608 	lsl.w	r6, r6, r8
        temp = GPIOx->AFR[position >> 3u];
 80047de:	f8de 9020 	ldr.w	r9, [lr, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047e2:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047e4:	260f      	movs	r6, #15
 80047e6:	fa06 f808 	lsl.w	r8, r6, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047ea:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047ec:	ea29 0908 	bic.w	r9, r9, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047f0:	ea46 0809 	orr.w	r8, r6, r9
        GPIOx->AFR[position >> 3u] = temp;
 80047f4:	f8ce 8020 	str.w	r8, [lr, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047f8:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 80047fa:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047fc:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004800:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004802:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8004806:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004808:	d039      	beq.n	800487e <HAL_GPIO_Init+0x1ee>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800480a:	4f86      	ldr	r7, [pc, #536]	@ (8004a24 <HAL_GPIO_Init+0x394>)
 800480c:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 800480e:	f044 0401 	orr.w	r4, r4, #1
 8004812:	663c      	str	r4, [r7, #96]	@ 0x60
 8004814:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 8004816:	f004 0401 	and.w	r4, r4, #1
 800481a:	9403      	str	r4, [sp, #12]
 800481c:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 800481e:	f022 0403 	bic.w	r4, r2, #3
 8004822:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8004826:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800482a:	f002 0703 	and.w	r7, r2, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 800482e:	f8d4 e008 	ldr.w	lr, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004832:	260f      	movs	r6, #15
 8004834:	00bf      	lsls	r7, r7, #2
 8004836:	fa06 f707 	lsl.w	r7, r6, r7
 800483a:	ea2e 0707 	bic.w	r7, lr, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800483e:	60a7      	str	r7, [r4, #8]
        temp = EXTI->RTSR1;
 8004840:	4c7b      	ldr	r4, [pc, #492]	@ (8004a30 <HAL_GPIO_Init+0x3a0>)
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004842:	02ee      	lsls	r6, r5, #11
        temp = EXTI->RTSR1;
 8004844:	68a4      	ldr	r4, [r4, #8]
        temp &= ~(iocurrent);
 8004846:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800484a:	f100 80b3 	bmi.w	80049b4 <HAL_GPIO_Init+0x324>
        temp &= ~(iocurrent);
 800484e:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8004850:	4e77      	ldr	r6, [pc, #476]	@ (8004a30 <HAL_GPIO_Init+0x3a0>)
 8004852:	60b4      	str	r4, [r6, #8]

        temp = EXTI->FTSR1;
 8004854:	68f4      	ldr	r4, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004856:	02ae      	lsls	r6, r5, #10
 8004858:	f100 80b5 	bmi.w	80049c6 <HAL_GPIO_Init+0x336>
        temp &= ~(iocurrent);
 800485c:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800485e:	4e74      	ldr	r6, [pc, #464]	@ (8004a30 <HAL_GPIO_Init+0x3a0>)
 8004860:	60f4      	str	r4, [r6, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004862:	6874      	ldr	r4, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004864:	03ae      	lsls	r6, r5, #14
 8004866:	f100 80ab 	bmi.w	80049c0 <HAL_GPIO_Init+0x330>
        temp &= ~(iocurrent);
 800486a:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 800486c:	4e70      	ldr	r6, [pc, #448]	@ (8004a30 <HAL_GPIO_Init+0x3a0>)

        temp = EXTI->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800486e:	03ed      	lsls	r5, r5, #15
        EXTI->EMR1 = temp;
 8004870:	6074      	str	r4, [r6, #4]
        temp = EXTI->IMR1;
 8004872:	6834      	ldr	r4, [r6, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004874:	f100 80a1 	bmi.w	80049ba <HAL_GPIO_Init+0x32a>
        temp &= ~(iocurrent);
 8004878:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 800487a:	4d6d      	ldr	r5, [pc, #436]	@ (8004a30 <HAL_GPIO_Init+0x3a0>)
 800487c:	602c      	str	r4, [r5, #0]
      }
    }

    position++;
 800487e:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004880:	fa33 f402 	lsrs.w	r4, r3, r2
 8004884:	d055      	beq.n	8004932 <HAL_GPIO_Init+0x2a2>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004886:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00u)
 800488a:	ea13 0c0e 	ands.w	ip, r3, lr
 800488e:	d0f6      	beq.n	800487e <HAL_GPIO_Init+0x1ee>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004890:	684d      	ldr	r5, [r1, #4]
 8004892:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004894:	2603      	movs	r6, #3
 8004896:	fa06 f807 	lsl.w	r8, r6, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800489a:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800489e:	ea6f 0a08 	mvn.w	sl, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048a2:	f104 38ff 	add.w	r8, r4, #4294967295
 80048a6:	f1b8 0f01 	cmp.w	r8, #1
 80048aa:	f67f af67 	bls.w	800477c <HAL_GPIO_Init+0xec>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048ae:	2c03      	cmp	r4, #3
 80048b0:	d0a2      	beq.n	80047f8 <HAL_GPIO_Init+0x168>
        temp = GPIOx->PUPDR;
 80048b2:	f04f 4890 	mov.w	r8, #1207959552	@ 0x48000000
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048b6:	688e      	ldr	r6, [r1, #8]
        temp = GPIOx->PUPDR;
 80048b8:	f8d8 900c 	ldr.w	r9, [r8, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048bc:	fa06 fe07 	lsl.w	lr, r6, r7
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048c0:	ea0a 0909 	and.w	r9, sl, r9
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048c4:	ea4e 0e09 	orr.w	lr, lr, r9
        GPIOx->PUPDR = temp;
 80048c8:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048cc:	e794      	b.n	80047f8 <HAL_GPIO_Init+0x168>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80048ce:	f04f 0c02 	mov.w	ip, #2
 80048d2:	fa0c f707 	lsl.w	r7, ip, r7
 80048d6:	433e      	orrs	r6, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048d8:	60a6      	str	r6, [r4, #8]
        temp = EXTI->RTSR1;
 80048da:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
 80048de:	ea6f 060a 	mvn.w	r6, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048e2:	02ef      	lsls	r7, r5, #11
        temp &= ~(iocurrent);
 80048e4:	bf54      	ite	pl
 80048e6:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80048e8:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI->RTSR1 = temp;
 80048ec:	f8ce 4008 	str.w	r4, [lr, #8]
        temp = EXTI->FTSR1;
 80048f0:	f8de 400c 	ldr.w	r4, [lr, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048f4:	02ab      	lsls	r3, r5, #10
        temp &= ~(iocurrent);
 80048f6:	bf54      	ite	pl
 80048f8:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80048fa:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI->FTSR1 = temp;
 80048fe:	f8ce 400c 	str.w	r4, [lr, #12]
        temp = EXTI->EMR1;
 8004902:	f8de 4004 	ldr.w	r4, [lr, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004906:	03af      	lsls	r7, r5, #14
        temp &= ~(iocurrent);
 8004908:	bf54      	ite	pl
 800490a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800490c:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI->EMR1 = temp;
 8004910:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI->IMR1;
 8004914:	f8de 4000 	ldr.w	r4, [lr]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004918:	03eb      	lsls	r3, r5, #15
        temp &= ~(iocurrent);
 800491a:	bf54      	ite	pl
 800491c:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800491e:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI->IMR1 = temp;
 8004922:	f8ce 4000 	str.w	r4, [lr]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004926:	9b00      	ldr	r3, [sp, #0]
    position++;
 8004928:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800492a:	fa33 f402 	lsrs.w	r4, r3, r2
 800492e:	f47f aec1 	bne.w	80046b4 <HAL_GPIO_Init+0x24>
  }
}
 8004932:	b005      	add	sp, #20
 8004934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8004938:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800493c:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800493e:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004942:	fa03 f804 	lsl.w	r8, r3, r4
 8004946:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800494a:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 800494e:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004952:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004954:	ea28 080c 	bic.w	r8, r8, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004958:	f3c5 1c00 	ubfx	ip, r5, #4, #1
 800495c:	fa0c fc02 	lsl.w	ip, ip, r2
 8004960:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->OTYPER = temp;
 8004964:	f8c0 c004 	str.w	ip, [r0, #4]
        temp = GPIOx->PUPDR;
 8004968:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800496c:	fa03 fc04 	lsl.w	ip, r3, r4
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004970:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004974:	ea4c 0c08 	orr.w	ip, ip, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004978:	2f02      	cmp	r7, #2
        GPIOx->PUPDR = temp;
 800497a:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800497e:	f47f aeb2 	bne.w	80046e6 <HAL_GPIO_Init+0x56>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004982:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 8004984:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004988:	f002 0c07 	and.w	ip, r2, #7
 800498c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8004990:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004994:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3u];
 8004998:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800499c:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800499e:	230f      	movs	r3, #15
 80049a0:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80049a4:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80049a6:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80049aa:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3u] = temp;
 80049ae:	f8c8 c020 	str.w	ip, [r8, #32]
 80049b2:	e698      	b.n	80046e6 <HAL_GPIO_Init+0x56>
          temp |= iocurrent;
 80049b4:	ea44 040c 	orr.w	r4, r4, ip
 80049b8:	e74a      	b.n	8004850 <HAL_GPIO_Init+0x1c0>
          temp |= iocurrent;
 80049ba:	ea4c 0404 	orr.w	r4, ip, r4
 80049be:	e75c      	b.n	800487a <HAL_GPIO_Init+0x1ea>
          temp |= iocurrent;
 80049c0:	ea44 040c 	orr.w	r4, r4, ip
 80049c4:	e752      	b.n	800486c <HAL_GPIO_Init+0x1dc>
          temp |= iocurrent;
 80049c6:	ea44 040c 	orr.w	r4, r4, ip
 80049ca:	e748      	b.n	800485e <HAL_GPIO_Init+0x1ce>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049cc:	f04f 0c01 	mov.w	ip, #1
 80049d0:	fa0c f707 	lsl.w	r7, ip, r7
 80049d4:	433e      	orrs	r6, r7
 80049d6:	e77f      	b.n	80048d8 <HAL_GPIO_Init+0x248>
 80049d8:	f04f 0c05 	mov.w	ip, #5
 80049dc:	fa0c f707 	lsl.w	r7, ip, r7
 80049e0:	433e      	orrs	r6, r7
 80049e2:	e779      	b.n	80048d8 <HAL_GPIO_Init+0x248>
 80049e4:	f04f 0c03 	mov.w	ip, #3
 80049e8:	fa0c f707 	lsl.w	r7, ip, r7
 80049ec:	433e      	orrs	r6, r7
 80049ee:	e773      	b.n	80048d8 <HAL_GPIO_Init+0x248>
 80049f0:	4770      	bx	lr
 80049f2:	f04f 0c04 	mov.w	ip, #4
 80049f6:	fa0c f707 	lsl.w	r7, ip, r7
 80049fa:	433e      	orrs	r6, r7
 80049fc:	e76c      	b.n	80048d8 <HAL_GPIO_Init+0x248>
 80049fe:	f04f 0c06 	mov.w	ip, #6
 8004a02:	fa0c f707 	lsl.w	r7, ip, r7
 8004a06:	433e      	orrs	r6, r7
 8004a08:	e766      	b.n	80048d8 <HAL_GPIO_Init+0x248>
        temp = GPIOx->PUPDR;
 8004a0a:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a0e:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a10:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a14:	fa03 fc04 	lsl.w	ip, r3, r4
 8004a18:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->PUPDR = temp;
 8004a1c:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a20:	e661      	b.n	80046e6 <HAL_GPIO_Init+0x56>
 8004a22:	bf00      	nop
 8004a24:	40021000 	.word	0x40021000
 8004a28:	48000400 	.word	0x48000400
 8004a2c:	48000800 	.word	0x48000800
 8004a30:	40010400 	.word	0x40010400
 8004a34:	48000c00 	.word	0x48000c00
 8004a38:	48001000 	.word	0x48001000
 8004a3c:	48001400 	.word	0x48001400
 8004a40:	48001800 	.word	0x48001800
 8004a44:	48001c00 	.word	0x48001c00

08004a48 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a48:	b10a      	cbz	r2, 8004a4e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a4a:	6181      	str	r1, [r0, #24]
 8004a4c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a4e:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop

08004a54 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a54:	4a04      	ldr	r2, [pc, #16]	@ (8004a68 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8004a56:	6951      	ldr	r1, [r2, #20]
 8004a58:	4201      	tst	r1, r0
 8004a5a:	d100      	bne.n	8004a5e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004a5c:	4770      	bx	lr
{
 8004a5e:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a60:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a62:	f7fc fe63 	bl	800172c <HAL_GPIO_EXTI_Callback>
  }
}
 8004a66:	bd08      	pop	{r3, pc}
 8004a68:	40010400 	.word	0x40010400

08004a6c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a6c:	4b02      	ldr	r3, [pc, #8]	@ (8004a78 <HAL_PWREx_GetVoltageRange+0xc>)
 8004a6e:	6818      	ldr	r0, [r3, #0]
#endif
}
 8004a70:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40007000 	.word	0x40007000

08004a7c <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a7c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8004a80:	d00e      	beq.n	8004aa0 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a82:	4a1b      	ldr	r2, [pc, #108]	@ (8004af0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004a84:	6813      	ldr	r3, [r2, #0]
 8004a86:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a8e:	d005      	beq.n	8004a9c <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a90:	6813      	ldr	r3, [r2, #0]
 8004a92:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004a96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a9a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004a9c:	2000      	movs	r0, #0
 8004a9e:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aa0:	4913      	ldr	r1, [pc, #76]	@ (8004af0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004aa2:	680b      	ldr	r3, [r1, #0]
 8004aa4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004aa8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aac:	d0f6      	beq.n	8004a9c <HAL_PWREx_ControlVoltageScaling+0x20>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004aae:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ab0:	4a10      	ldr	r2, [pc, #64]	@ (8004af4 <HAL_PWREx_ControlVoltageScaling+0x78>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ab2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ab6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004aba:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004abc:	6813      	ldr	r3, [r2, #0]
 8004abe:	4a0e      	ldr	r2, [pc, #56]	@ (8004af8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004ac0:	2032      	movs	r0, #50	@ 0x32
 8004ac2:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ac6:	6948      	ldr	r0, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8004acc:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ace:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ad0:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ad4:	d506      	bpl.n	8004ae4 <HAL_PWREx_ControlVoltageScaling+0x68>
 8004ad6:	e000      	b.n	8004ada <HAL_PWREx_ControlVoltageScaling+0x5e>
 8004ad8:	b123      	cbz	r3, 8004ae4 <HAL_PWREx_ControlVoltageScaling+0x68>
 8004ada:	694a      	ldr	r2, [r1, #20]
 8004adc:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 8004ade:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ae2:	d4f9      	bmi.n	8004ad8 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ae4:	4b02      	ldr	r3, [pc, #8]	@ (8004af0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	055b      	lsls	r3, r3, #21
 8004aea:	d5d7      	bpl.n	8004a9c <HAL_PWREx_ControlVoltageScaling+0x20>
        return HAL_TIMEOUT;
 8004aec:	2003      	movs	r0, #3
}
 8004aee:	4770      	bx	lr
 8004af0:	40007000 	.word	0x40007000
 8004af4:	20002c00 	.word	0x20002c00
 8004af8:	431bde83 	.word	0x431bde83

08004afc <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004afc:	4a02      	ldr	r2, [pc, #8]	@ (8004b08 <HAL_PWREx_EnableVddIO2+0xc>)
 8004afe:	6853      	ldr	r3, [r2, #4]
 8004b00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b04:	6053      	str	r3, [r2, #4]
}
 8004b06:	4770      	bx	lr
 8004b08:	40007000 	.word	0x40007000

08004b0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b0c:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b0e:	4d20      	ldr	r5, [pc, #128]	@ (8004b90 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8004b10:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8004b12:	00db      	lsls	r3, r3, #3
{
 8004b14:	b083      	sub	sp, #12
 8004b16:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b18:	d51a      	bpl.n	8004b50 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b1a:	f7ff ffa7 	bl	8004a6c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b1e:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8004b22:	d027      	beq.n	8004b74 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004b24:	2c80      	cmp	r4, #128	@ 0x80
 8004b26:	d82c      	bhi.n	8004b82 <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004b28:	d02f      	beq.n	8004b8a <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004b2a:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 8004b2e:	fab4 f484 	clz	r4, r4
 8004b32:	0964      	lsrs	r4, r4, #5
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b34:	4917      	ldr	r1, [pc, #92]	@ (8004b94 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8004b36:	680b      	ldr	r3, [r1, #0]
 8004b38:	f023 0307 	bic.w	r3, r3, #7
 8004b3c:	4323      	orrs	r3, r4
 8004b3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b40:	6808      	ldr	r0, [r1, #0]
 8004b42:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8004b46:	1b00      	subs	r0, r0, r4
 8004b48:	bf18      	it	ne
 8004b4a:	2001      	movne	r0, #1
 8004b4c:	b003      	add	sp, #12
 8004b4e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b50:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8004b52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b56:	65ab      	str	r3, [r5, #88]	@ 0x58
 8004b58:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8004b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b5e:	9301      	str	r3, [sp, #4]
 8004b60:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8004b62:	f7ff ff83 	bl	8004a6c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b66:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b68:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b70:	65ab      	str	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b72:	d1d7      	bne.n	8004b24 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 8004b74:	2c80      	cmp	r4, #128	@ 0x80
 8004b76:	d906      	bls.n	8004b86 <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b78:	2ca0      	cmp	r4, #160	@ 0xa0
 8004b7a:	bf8c      	ite	hi
 8004b7c:	2402      	movhi	r4, #2
 8004b7e:	2401      	movls	r4, #1
 8004b80:	e7d8      	b.n	8004b34 <RCC_SetFlashLatencyFromMSIRange+0x28>
      latency = FLASH_LATENCY_3; /* 3WS */
 8004b82:	2403      	movs	r4, #3
 8004b84:	e7d6      	b.n	8004b34 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b86:	2400      	movs	r4, #0
 8004b88:	e7d4      	b.n	8004b34 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b8a:	2402      	movs	r4, #2
 8004b8c:	e7d2      	b.n	8004b34 <RCC_SetFlashLatencyFromMSIRange+0x28>
 8004b8e:	bf00      	nop
 8004b90:	40021000 	.word	0x40021000
 8004b94:	40022000 	.word	0x40022000

08004b98 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b98:	4a23      	ldr	r2, [pc, #140]	@ (8004c28 <HAL_RCC_GetSysClockFreq+0x90>)
 8004b9a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b9c:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b9e:	f013 030c 	ands.w	r3, r3, #12
 8004ba2:	d008      	beq.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x1e>
 8004ba4:	2b0c      	cmp	r3, #12
 8004ba6:	d036      	beq.n	8004c16 <HAL_RCC_GetSysClockFreq+0x7e>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004ba8:	2b04      	cmp	r3, #4
 8004baa:	d032      	beq.n	8004c12 <HAL_RCC_GetSysClockFreq+0x7a>
    sysclockfreq = HSE_VALUE;
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	481f      	ldr	r0, [pc, #124]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x94>)
 8004bb0:	bf18      	it	ne
 8004bb2:	2000      	movne	r0, #0
 8004bb4:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8004c28 <HAL_RCC_GetSysClockFreq+0x90>)
 8004bb8:	6811      	ldr	r1, [r2, #0]
 8004bba:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004bbc:	bf54      	ite	pl
 8004bbe:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004bc2:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8004bc4:	491a      	ldr	r1, [pc, #104]	@ (8004c30 <HAL_RCC_GetSysClockFreq+0x98>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004bc6:	bf54      	ite	pl
 8004bc8:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004bcc:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8004bd0:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bd4:	b1f3      	cbz	r3, 8004c14 <HAL_RCC_GetSysClockFreq+0x7c>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004bd6:	4b14      	ldr	r3, [pc, #80]	@ (8004c28 <HAL_RCC_GetSysClockFreq+0x90>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d01f      	beq.n	8004c22 <HAL_RCC_GetSysClockFreq+0x8a>
 8004be2:	4a12      	ldr	r2, [pc, #72]	@ (8004c2c <HAL_RCC_GetSysClockFreq+0x94>)
 8004be4:	2b03      	cmp	r3, #3
 8004be6:	bf08      	it	eq
 8004be8:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bea:	4b0f      	ldr	r3, [pc, #60]	@ (8004c28 <HAL_RCC_GetSysClockFreq+0x90>)
 8004bec:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004bee:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004bf6:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bfa:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bfe:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c00:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c04:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c06:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c08:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8004c0c:	fbb2 f0f3 	udiv	r0, r2, r3
 8004c10:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8004c12:	4808      	ldr	r0, [pc, #32]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x9c>)
}
 8004c14:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c16:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c1a:	2a01      	cmp	r2, #1
 8004c1c:	d0cb      	beq.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x1e>
 8004c1e:	2000      	movs	r0, #0
 8004c20:	e7d9      	b.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x3e>
      pllvco = HSI_VALUE;
 8004c22:	4804      	ldr	r0, [pc, #16]	@ (8004c34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c24:	e7e1      	b.n	8004bea <HAL_RCC_GetSysClockFreq+0x52>
 8004c26:	bf00      	nop
 8004c28:	40021000 	.word	0x40021000
 8004c2c:	007a1200 	.word	0x007a1200
 8004c30:	0800b438 	.word	0x0800b438
 8004c34:	00f42400 	.word	0x00f42400

08004c38 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	f000 824b 	beq.w	80050d4 <HAL_RCC_OscConfig+0x49c>
{
 8004c3e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c42:	4a8c      	ldr	r2, [pc, #560]	@ (8004e74 <HAL_RCC_OscConfig+0x23c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c44:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c46:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c48:	68d6      	ldr	r6, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c4a:	06d9      	lsls	r1, r3, #27
{
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c50:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c54:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c58:	461a      	mov	r2, r3
 8004c5a:	d52f      	bpl.n	8004cbc <HAL_RCC_OscConfig+0x84>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c5c:	2d00      	cmp	r5, #0
 8004c5e:	f000 8112 	beq.w	8004e86 <HAL_RCC_OscConfig+0x24e>
 8004c62:	2d0c      	cmp	r5, #12
 8004c64:	f000 810c 	beq.w	8004e80 <HAL_RCC_OscConfig+0x248>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c68:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8004c6a:	4f82      	ldr	r7, [pc, #520]	@ (8004e74 <HAL_RCC_OscConfig+0x23c>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 81a7 	beq.w	8004fc0 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_MSI_ENABLE();
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8004c7a:	f7fe fb3f 	bl	80032fc <HAL_GetTick>
 8004c7e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c80:	e006      	b.n	8004c90 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c82:	f7fe fb3b 	bl	80032fc <HAL_GetTick>
 8004c86:	eba0 0008 	sub.w	r0, r0, r8
 8004c8a:	2802      	cmp	r0, #2
 8004c8c:	f200 8194 	bhi.w	8004fb8 <HAL_RCC_OscConfig+0x380>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	079a      	lsls	r2, r3, #30
 8004c94:	d5f5      	bpl.n	8004c82 <HAL_RCC_OscConfig+0x4a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	f043 0308 	orr.w	r3, r3, #8
 8004c9c:	603b      	str	r3, [r7, #0]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	6a22      	ldr	r2, [r4, #32]
 8004ca2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	69e2      	ldr	r2, [r4, #28]
 8004cae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004cb6:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	07df      	lsls	r7, r3, #31
 8004cbe:	d529      	bpl.n	8004d14 <HAL_RCC_OscConfig+0xdc>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004cc0:	2d08      	cmp	r5, #8
 8004cc2:	f000 814b 	beq.w	8004f5c <HAL_RCC_OscConfig+0x324>
 8004cc6:	2d0c      	cmp	r5, #12
 8004cc8:	f000 8145 	beq.w	8004f56 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ccc:	6863      	ldr	r3, [r4, #4]
 8004cce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cd2:	f000 8189 	beq.w	8004fe8 <HAL_RCC_OscConfig+0x3b0>
 8004cd6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cda:	f000 8209 	beq.w	80050f0 <HAL_RCC_OscConfig+0x4b8>
 8004cde:	4f65      	ldr	r7, [pc, #404]	@ (8004e74 <HAL_RCC_OscConfig+0x23c>)
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004ce6:	603a      	str	r2, [r7, #0]
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004cee:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f040 817e 	bne.w	8004ff2 <HAL_RCC_OscConfig+0x3ba>
        tickstart = HAL_GetTick();
 8004cf6:	f7fe fb01 	bl	80032fc <HAL_GetTick>
 8004cfa:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004cfc:	e006      	b.n	8004d0c <HAL_RCC_OscConfig+0xd4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cfe:	f7fe fafd 	bl	80032fc <HAL_GetTick>
 8004d02:	eba0 0008 	sub.w	r0, r0, r8
 8004d06:	2864      	cmp	r0, #100	@ 0x64
 8004d08:	f200 8156 	bhi.w	8004fb8 <HAL_RCC_OscConfig+0x380>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	0398      	lsls	r0, r3, #14
 8004d10:	d4f5      	bmi.n	8004cfe <HAL_RCC_OscConfig+0xc6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d12:	6822      	ldr	r2, [r4, #0]
 8004d14:	0791      	lsls	r1, r2, #30
 8004d16:	d513      	bpl.n	8004d40 <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004d18:	2d04      	cmp	r5, #4
 8004d1a:	f040 80f5 	bne.w	8004f08 <HAL_RCC_OscConfig+0x2d0>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d1e:	4b55      	ldr	r3, [pc, #340]	@ (8004e74 <HAL_RCC_OscConfig+0x23c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	055a      	lsls	r2, r3, #21
 8004d24:	d503      	bpl.n	8004d2e <HAL_RCC_OscConfig+0xf6>
 8004d26:	68e3      	ldr	r3, [r4, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 8110 	beq.w	8004f4e <HAL_RCC_OscConfig+0x316>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d2e:	4a51      	ldr	r2, [pc, #324]	@ (8004e74 <HAL_RCC_OscConfig+0x23c>)
 8004d30:	6921      	ldr	r1, [r4, #16]
 8004d32:	6853      	ldr	r3, [r2, #4]
 8004d34:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004d38:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004d3c:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d3e:	6822      	ldr	r2, [r4, #0]
 8004d40:	0711      	lsls	r1, r2, #28
 8004d42:	d519      	bpl.n	8004d78 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d44:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8004d46:	4e4b      	ldr	r6, [pc, #300]	@ (8004e74 <HAL_RCC_OscConfig+0x23c>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 8110 	beq.w	8004f6e <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_LSI_ENABLE();
 8004d4e:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8004d5a:	f7fe facf 	bl	80032fc <HAL_GetTick>
 8004d5e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d60:	e005      	b.n	8004d6e <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d62:	f7fe facb 	bl	80032fc <HAL_GetTick>
 8004d66:	1bc0      	subs	r0, r0, r7
 8004d68:	2802      	cmp	r0, #2
 8004d6a:	f200 8125 	bhi.w	8004fb8 <HAL_RCC_OscConfig+0x380>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d6e:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8004d72:	079a      	lsls	r2, r3, #30
 8004d74:	d5f5      	bpl.n	8004d62 <HAL_RCC_OscConfig+0x12a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d76:	6822      	ldr	r2, [r4, #0]
 8004d78:	0757      	lsls	r7, r2, #29
 8004d7a:	d53f      	bpl.n	8004dfc <HAL_RCC_OscConfig+0x1c4>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d7c:	4b3d      	ldr	r3, [pc, #244]	@ (8004e74 <HAL_RCC_OscConfig+0x23c>)
 8004d7e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004d80:	00d6      	lsls	r6, r2, #3
 8004d82:	f100 8146 	bmi.w	8005012 <HAL_RCC_OscConfig+0x3da>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d86:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004d88:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004d8c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d94:	9301      	str	r3, [sp, #4]
 8004d96:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004d98:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d9a:	4f37      	ldr	r7, [pc, #220]	@ (8004e78 <HAL_RCC_OscConfig+0x240>)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	05d8      	lsls	r0, r3, #23
 8004da0:	f140 80f9 	bpl.w	8004f96 <HAL_RCC_OscConfig+0x35e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da4:	68a3      	ldr	r3, [r4, #8]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	f000 8147 	beq.w	800503a <HAL_RCC_OscConfig+0x402>
 8004dac:	2b05      	cmp	r3, #5
 8004dae:	f000 81ac 	beq.w	800510a <HAL_RCC_OscConfig+0x4d2>
 8004db2:	4f30      	ldr	r7, [pc, #192]	@ (8004e74 <HAL_RCC_OscConfig+0x23c>)
 8004db4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004db8:	f022 0201 	bic.w	r2, r2, #1
 8004dbc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8004dc0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004dc4:	f022 0204 	bic.w	r2, r2, #4
 8004dc8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f040 813b 	bne.w	8005048 <HAL_RCC_OscConfig+0x410>
      tickstart = HAL_GetTick();
 8004dd2:	f7fe fa93 	bl	80032fc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd6:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004dda:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ddc:	e006      	b.n	8004dec <HAL_RCC_OscConfig+0x1b4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dde:	f7fe fa8d 	bl	80032fc <HAL_GetTick>
 8004de2:	eba0 0008 	sub.w	r0, r0, r8
 8004de6:	4548      	cmp	r0, r9
 8004de8:	f200 80e6 	bhi.w	8004fb8 <HAL_RCC_OscConfig+0x380>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004df0:	079b      	lsls	r3, r3, #30
 8004df2:	d4f4      	bmi.n	8004dde <HAL_RCC_OscConfig+0x1a6>
    if(pwrclkchanged == SET)
 8004df4:	2e00      	cmp	r6, #0
 8004df6:	f040 816f 	bne.w	80050d8 <HAL_RCC_OscConfig+0x4a0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004dfa:	6822      	ldr	r2, [r4, #0]
 8004dfc:	0696      	lsls	r6, r2, #26
 8004dfe:	d518      	bpl.n	8004e32 <HAL_RCC_OscConfig+0x1fa>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e00:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_RCC_HSI48_ENABLE();
 8004e02:	4e1c      	ldr	r6, [pc, #112]	@ (8004e74 <HAL_RCC_OscConfig+0x23c>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 8150 	beq.w	80050aa <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSI48_ENABLE();
 8004e0a:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8004e0e:	f043 0301 	orr.w	r3, r3, #1
 8004e12:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8004e16:	f7fe fa71 	bl	80032fc <HAL_GetTick>
 8004e1a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e1c:	e005      	b.n	8004e2a <HAL_RCC_OscConfig+0x1f2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e1e:	f7fe fa6d 	bl	80032fc <HAL_GetTick>
 8004e22:	1bc0      	subs	r0, r0, r7
 8004e24:	2802      	cmp	r0, #2
 8004e26:	f200 80c7 	bhi.w	8004fb8 <HAL_RCC_OscConfig+0x380>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e2a:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8004e2e:	0798      	lsls	r0, r3, #30
 8004e30:	d5f5      	bpl.n	8004e1e <HAL_RCC_OscConfig+0x1e6>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e32:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004e34:	b1db      	cbz	r3, 8004e6e <HAL_RCC_OscConfig+0x236>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	f000 817e 	beq.w	8005138 <HAL_RCC_OscConfig+0x500>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e3c:	2d0c      	cmp	r5, #12
 8004e3e:	f000 8086 	beq.w	8004f4e <HAL_RCC_OscConfig+0x316>
        __HAL_RCC_PLL_DISABLE();
 8004e42:	4c0c      	ldr	r4, [pc, #48]	@ (8004e74 <HAL_RCC_OscConfig+0x23c>)
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e4a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004e4c:	f7fe fa56 	bl	80032fc <HAL_GetTick>
 8004e50:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e52:	e005      	b.n	8004e60 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e54:	f7fe fa52 	bl	80032fc <HAL_GetTick>
 8004e58:	1b40      	subs	r0, r0, r5
 8004e5a:	2802      	cmp	r0, #2
 8004e5c:	f200 80ac 	bhi.w	8004fb8 <HAL_RCC_OscConfig+0x380>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	019b      	lsls	r3, r3, #6
 8004e64:	d4f6      	bmi.n	8004e54 <HAL_RCC_OscConfig+0x21c>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004e66:	68e2      	ldr	r2, [r4, #12]
 8004e68:	4b04      	ldr	r3, [pc, #16]	@ (8004e7c <HAL_RCC_OscConfig+0x244>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 8004e6e:	2000      	movs	r0, #0
 8004e70:	e06e      	b.n	8004f50 <HAL_RCC_OscConfig+0x318>
 8004e72:	bf00      	nop
 8004e74:	40021000 	.word	0x40021000
 8004e78:	40007000 	.word	0x40007000
 8004e7c:	feeefffc 	.word	0xfeeefffc
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004e80:	2e01      	cmp	r6, #1
 8004e82:	f47f aef1 	bne.w	8004c68 <HAL_RCC_OscConfig+0x30>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e86:	4ba8      	ldr	r3, [pc, #672]	@ (8005128 <HAL_RCC_OscConfig+0x4f0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	079b      	lsls	r3, r3, #30
 8004e8c:	d45c      	bmi.n	8004f48 <HAL_RCC_OscConfig+0x310>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004e8e:	4ba6      	ldr	r3, [pc, #664]	@ (8005128 <HAL_RCC_OscConfig+0x4f0>)
 8004e90:	6a20      	ldr	r0, [r4, #32]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	0717      	lsls	r7, r2, #28
 8004e96:	bf56      	itet	pl
 8004e98:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 8004e9c:	681b      	ldrmi	r3, [r3, #0]
 8004e9e:	091b      	lsrpl	r3, r3, #4
 8004ea0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ea4:	4298      	cmp	r0, r3
 8004ea6:	f200 80e4 	bhi.w	8005072 <HAL_RCC_OscConfig+0x43a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004eaa:	4b9f      	ldr	r3, [pc, #636]	@ (8005128 <HAL_RCC_OscConfig+0x4f0>)
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	f042 0208 	orr.w	r2, r2, #8
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004eba:	4302      	orrs	r2, r0
 8004ebc:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	69e1      	ldr	r1, [r4, #28]
 8004ec2:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004ec6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004eca:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ecc:	2d00      	cmp	r5, #0
 8004ece:	f000 8109 	beq.w	80050e4 <HAL_RCC_OscConfig+0x4ac>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ed2:	f7ff fe61 	bl	8004b98 <HAL_RCC_GetSysClockFreq>
 8004ed6:	4b94      	ldr	r3, [pc, #592]	@ (8005128 <HAL_RCC_OscConfig+0x4f0>)
 8004ed8:	4a94      	ldr	r2, [pc, #592]	@ (800512c <HAL_RCC_OscConfig+0x4f4>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004ee0:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 8004ee2:	4a93      	ldr	r2, [pc, #588]	@ (8005130 <HAL_RCC_OscConfig+0x4f8>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ee4:	f003 031f 	and.w	r3, r3, #31
 8004ee8:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8004eec:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004eee:	4a91      	ldr	r2, [pc, #580]	@ (8005134 <HAL_RCC_OscConfig+0x4fc>)
 8004ef0:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8004ef2:	f7fe f9c1 	bl	8003278 <HAL_InitTick>
        if(status != HAL_OK)
 8004ef6:	bb58      	cbnz	r0, 8004f50 <HAL_RCC_OscConfig+0x318>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ef8:	6822      	ldr	r2, [r4, #0]
 8004efa:	07d1      	lsls	r1, r2, #31
 8004efc:	4613      	mov	r3, r2
 8004efe:	f53f aee2 	bmi.w	8004cc6 <HAL_RCC_OscConfig+0x8e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f02:	0791      	lsls	r1, r2, #30
 8004f04:	f57f af1c 	bpl.w	8004d40 <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004f08:	2d0c      	cmp	r5, #12
 8004f0a:	f000 80ca 	beq.w	80050a2 <HAL_RCC_OscConfig+0x46a>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f0e:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8004f10:	4e85      	ldr	r6, [pc, #532]	@ (8005128 <HAL_RCC_OscConfig+0x4f0>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d07f      	beq.n	8005016 <HAL_RCC_OscConfig+0x3de>
        __HAL_RCC_HSI_ENABLE();
 8004f16:	6833      	ldr	r3, [r6, #0]
 8004f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f1c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004f1e:	f7fe f9ed 	bl	80032fc <HAL_GetTick>
 8004f22:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f24:	e004      	b.n	8004f30 <HAL_RCC_OscConfig+0x2f8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f26:	f7fe f9e9 	bl	80032fc <HAL_GetTick>
 8004f2a:	1bc0      	subs	r0, r0, r7
 8004f2c:	2802      	cmp	r0, #2
 8004f2e:	d843      	bhi.n	8004fb8 <HAL_RCC_OscConfig+0x380>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f30:	6833      	ldr	r3, [r6, #0]
 8004f32:	055b      	lsls	r3, r3, #21
 8004f34:	d5f7      	bpl.n	8004f26 <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f36:	6873      	ldr	r3, [r6, #4]
 8004f38:	6922      	ldr	r2, [r4, #16]
 8004f3a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004f3e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004f42:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f44:	6822      	ldr	r2, [r4, #0]
 8004f46:	e6fb      	b.n	8004d40 <HAL_RCC_OscConfig+0x108>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f48:	69a3      	ldr	r3, [r4, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d19f      	bne.n	8004e8e <HAL_RCC_OscConfig+0x256>
    return HAL_ERROR;
 8004f4e:	2001      	movs	r0, #1
}
 8004f50:	b003      	add	sp, #12
 8004f52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f56:	2e03      	cmp	r6, #3
 8004f58:	f47f aeb8 	bne.w	8004ccc <HAL_RCC_OscConfig+0x94>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f5c:	4a72      	ldr	r2, [pc, #456]	@ (8005128 <HAL_RCC_OscConfig+0x4f0>)
 8004f5e:	6812      	ldr	r2, [r2, #0]
 8004f60:	0390      	lsls	r0, r2, #14
 8004f62:	d502      	bpl.n	8004f6a <HAL_RCC_OscConfig+0x332>
 8004f64:	6862      	ldr	r2, [r4, #4]
 8004f66:	2a00      	cmp	r2, #0
 8004f68:	d0f1      	beq.n	8004f4e <HAL_RCC_OscConfig+0x316>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	e7c9      	b.n	8004f02 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_LSI_DISABLE();
 8004f6e:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8004f72:	f023 0301 	bic.w	r3, r3, #1
 8004f76:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8004f7a:	f7fe f9bf 	bl	80032fc <HAL_GetTick>
 8004f7e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f80:	e004      	b.n	8004f8c <HAL_RCC_OscConfig+0x354>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f82:	f7fe f9bb 	bl	80032fc <HAL_GetTick>
 8004f86:	1bc0      	subs	r0, r0, r7
 8004f88:	2802      	cmp	r0, #2
 8004f8a:	d815      	bhi.n	8004fb8 <HAL_RCC_OscConfig+0x380>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f8c:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8004f90:	079b      	lsls	r3, r3, #30
 8004f92:	d4f6      	bmi.n	8004f82 <HAL_RCC_OscConfig+0x34a>
 8004f94:	e6ef      	b.n	8004d76 <HAL_RCC_OscConfig+0x13e>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f9c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004f9e:	f7fe f9ad 	bl	80032fc <HAL_GetTick>
 8004fa2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	05d9      	lsls	r1, r3, #23
 8004fa8:	f53f aefc 	bmi.w	8004da4 <HAL_RCC_OscConfig+0x16c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fac:	f7fe f9a6 	bl	80032fc <HAL_GetTick>
 8004fb0:	eba0 0008 	sub.w	r0, r0, r8
 8004fb4:	2802      	cmp	r0, #2
 8004fb6:	d9f5      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x36c>
            return HAL_TIMEOUT;
 8004fb8:	2003      	movs	r0, #3
}
 8004fba:	b003      	add	sp, #12
 8004fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        __HAL_RCC_MSI_DISABLE();
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	f023 0301 	bic.w	r3, r3, #1
 8004fc6:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8004fc8:	f7fe f998 	bl	80032fc <HAL_GetTick>
 8004fcc:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004fce:	e005      	b.n	8004fdc <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fd0:	f7fe f994 	bl	80032fc <HAL_GetTick>
 8004fd4:	eba0 0008 	sub.w	r0, r0, r8
 8004fd8:	2802      	cmp	r0, #2
 8004fda:	d8ed      	bhi.n	8004fb8 <HAL_RCC_OscConfig+0x380>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	079b      	lsls	r3, r3, #30
 8004fe0:	d4f6      	bmi.n	8004fd0 <HAL_RCC_OscConfig+0x398>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	e669      	b.n	8004cbc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fe8:	4a4f      	ldr	r2, [pc, #316]	@ (8005128 <HAL_RCC_OscConfig+0x4f0>)
 8004fea:	6813      	ldr	r3, [r2, #0]
 8004fec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ff0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004ff2:	f7fe f983 	bl	80032fc <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ff6:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 8005128 <HAL_RCC_OscConfig+0x4f0>
        tickstart = HAL_GetTick();
 8004ffa:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ffc:	e004      	b.n	8005008 <HAL_RCC_OscConfig+0x3d0>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ffe:	f7fe f97d 	bl	80032fc <HAL_GetTick>
 8005002:	1bc0      	subs	r0, r0, r7
 8005004:	2864      	cmp	r0, #100	@ 0x64
 8005006:	d8d7      	bhi.n	8004fb8 <HAL_RCC_OscConfig+0x380>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005008:	f8d8 3000 	ldr.w	r3, [r8]
 800500c:	039b      	lsls	r3, r3, #14
 800500e:	d5f6      	bpl.n	8004ffe <HAL_RCC_OscConfig+0x3c6>
 8005010:	e67f      	b.n	8004d12 <HAL_RCC_OscConfig+0xda>
    FlagStatus       pwrclkchanged = RESET;
 8005012:	2600      	movs	r6, #0
 8005014:	e6c1      	b.n	8004d9a <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8005016:	6833      	ldr	r3, [r6, #0]
 8005018:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800501c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800501e:	f7fe f96d 	bl	80032fc <HAL_GetTick>
 8005022:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005024:	e004      	b.n	8005030 <HAL_RCC_OscConfig+0x3f8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005026:	f7fe f969 	bl	80032fc <HAL_GetTick>
 800502a:	1bc0      	subs	r0, r0, r7
 800502c:	2802      	cmp	r0, #2
 800502e:	d8c3      	bhi.n	8004fb8 <HAL_RCC_OscConfig+0x380>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005030:	6833      	ldr	r3, [r6, #0]
 8005032:	0558      	lsls	r0, r3, #21
 8005034:	d4f7      	bmi.n	8005026 <HAL_RCC_OscConfig+0x3ee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005036:	6822      	ldr	r2, [r4, #0]
 8005038:	e682      	b.n	8004d40 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800503a:	4a3b      	ldr	r2, [pc, #236]	@ (8005128 <HAL_RCC_OscConfig+0x4f0>)
 800503c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005040:	f043 0301 	orr.w	r3, r3, #1
 8005044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8005048:	f7fe f958 	bl	80032fc <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800504c:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 8005128 <HAL_RCC_OscConfig+0x4f0>
      tickstart = HAL_GetTick();
 8005050:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005052:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005056:	e004      	b.n	8005062 <HAL_RCC_OscConfig+0x42a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005058:	f7fe f950 	bl	80032fc <HAL_GetTick>
 800505c:	1bc0      	subs	r0, r0, r7
 800505e:	4548      	cmp	r0, r9
 8005060:	d8aa      	bhi.n	8004fb8 <HAL_RCC_OscConfig+0x380>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005062:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 8005066:	079a      	lsls	r2, r3, #30
 8005068:	d5f6      	bpl.n	8005058 <HAL_RCC_OscConfig+0x420>
    if(pwrclkchanged == SET)
 800506a:	2e00      	cmp	r6, #0
 800506c:	f43f aec5 	beq.w	8004dfa <HAL_RCC_OscConfig+0x1c2>
 8005070:	e032      	b.n	80050d8 <HAL_RCC_OscConfig+0x4a0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005072:	f7ff fd4b 	bl	8004b0c <RCC_SetFlashLatencyFromMSIRange>
 8005076:	2800      	cmp	r0, #0
 8005078:	f47f af69 	bne.w	8004f4e <HAL_RCC_OscConfig+0x316>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800507c:	4b2a      	ldr	r3, [pc, #168]	@ (8005128 <HAL_RCC_OscConfig+0x4f0>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	f042 0208 	orr.w	r2, r2, #8
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	6a21      	ldr	r1, [r4, #32]
 800508a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800508e:	430a      	orrs	r2, r1
 8005090:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	69e1      	ldr	r1, [r4, #28]
 8005096:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800509a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800509e:	605a      	str	r2, [r3, #4]
 80050a0:	e717      	b.n	8004ed2 <HAL_RCC_OscConfig+0x29a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80050a2:	2e02      	cmp	r6, #2
 80050a4:	f47f af33 	bne.w	8004f0e <HAL_RCC_OscConfig+0x2d6>
 80050a8:	e639      	b.n	8004d1e <HAL_RCC_OscConfig+0xe6>
      __HAL_RCC_HSI48_DISABLE();
 80050aa:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 80050ae:	f023 0301 	bic.w	r3, r3, #1
 80050b2:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80050b6:	f7fe f921 	bl	80032fc <HAL_GetTick>
 80050ba:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050bc:	e005      	b.n	80050ca <HAL_RCC_OscConfig+0x492>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050be:	f7fe f91d 	bl	80032fc <HAL_GetTick>
 80050c2:	1bc0      	subs	r0, r0, r7
 80050c4:	2802      	cmp	r0, #2
 80050c6:	f63f af77 	bhi.w	8004fb8 <HAL_RCC_OscConfig+0x380>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050ca:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 80050ce:	0799      	lsls	r1, r3, #30
 80050d0:	d4f5      	bmi.n	80050be <HAL_RCC_OscConfig+0x486>
 80050d2:	e6ae      	b.n	8004e32 <HAL_RCC_OscConfig+0x1fa>
    return HAL_ERROR;
 80050d4:	2001      	movs	r0, #1
}
 80050d6:	4770      	bx	lr
      __HAL_RCC_PWR_CLK_DISABLE();
 80050d8:	4a13      	ldr	r2, [pc, #76]	@ (8005128 <HAL_RCC_OscConfig+0x4f0>)
 80050da:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80050dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80050e2:	e68a      	b.n	8004dfa <HAL_RCC_OscConfig+0x1c2>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050e4:	f7ff fd12 	bl	8004b0c <RCC_SetFlashLatencyFromMSIRange>
 80050e8:	2800      	cmp	r0, #0
 80050ea:	f43f aef2 	beq.w	8004ed2 <HAL_RCC_OscConfig+0x29a>
 80050ee:	e72e      	b.n	8004f4e <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80050f4:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005106:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005108:	e773      	b.n	8004ff2 <HAL_RCC_OscConfig+0x3ba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800510a:	4b07      	ldr	r3, [pc, #28]	@ (8005128 <HAL_RCC_OscConfig+0x4f0>)
 800510c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005110:	f042 0204 	orr.w	r2, r2, #4
 8005114:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8005118:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800511c:	f042 0201 	orr.w	r2, r2, #1
 8005120:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005124:	e790      	b.n	8005048 <HAL_RCC_OscConfig+0x410>
 8005126:	bf00      	nop
 8005128:	40021000 	.word	0x40021000
 800512c:	0800b470 	.word	0x0800b470
 8005130:	20002c08 	.word	0x20002c08
 8005134:	20002c00 	.word	0x20002c00
      pll_config = RCC->PLLCFGR;
 8005138:	4e48      	ldr	r6, [pc, #288]	@ (800525c <HAL_RCC_OscConfig+0x624>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800513a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      pll_config = RCC->PLLCFGR;
 800513c:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800513e:	f003 0103 	and.w	r1, r3, #3
 8005142:	4291      	cmp	r1, r2
 8005144:	d04d      	beq.n	80051e2 <HAL_RCC_OscConfig+0x5aa>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005146:	2d0c      	cmp	r5, #12
 8005148:	f43f af01 	beq.w	8004f4e <HAL_RCC_OscConfig+0x316>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800514c:	4d43      	ldr	r5, [pc, #268]	@ (800525c <HAL_RCC_OscConfig+0x624>)
 800514e:	682b      	ldr	r3, [r5, #0]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	f53f aefc 	bmi.w	8004f4e <HAL_RCC_OscConfig+0x316>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005156:	682b      	ldr	r3, [r5, #0]
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	f53f aef8 	bmi.w	8004f4e <HAL_RCC_OscConfig+0x316>
            __HAL_RCC_PLL_DISABLE();
 800515e:	682b      	ldr	r3, [r5, #0]
 8005160:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005164:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8005166:	f7fe f8c9 	bl	80032fc <HAL_GetTick>
 800516a:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800516c:	e005      	b.n	800517a <HAL_RCC_OscConfig+0x542>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800516e:	f7fe f8c5 	bl	80032fc <HAL_GetTick>
 8005172:	1b80      	subs	r0, r0, r6
 8005174:	2802      	cmp	r0, #2
 8005176:	f63f af1f 	bhi.w	8004fb8 <HAL_RCC_OscConfig+0x380>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800517a:	682b      	ldr	r3, [r5, #0]
 800517c:	019f      	lsls	r7, r3, #6
 800517e:	d4f6      	bmi.n	800516e <HAL_RCC_OscConfig+0x536>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005180:	68e9      	ldr	r1, [r5, #12]
 8005182:	4b37      	ldr	r3, [pc, #220]	@ (8005260 <HAL_RCC_OscConfig+0x628>)
 8005184:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005186:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005188:	400b      	ands	r3, r1
 800518a:	4313      	orrs	r3, r2
 800518c:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	@ 0x34
 8005190:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005194:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8005198:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 800519c:	3801      	subs	r0, #1
 800519e:	0849      	lsrs	r1, r1, #1
 80051a0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80051a4:	3901      	subs	r1, #1
 80051a6:	0852      	lsrs	r2, r2, #1
 80051a8:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80051ac:	3a01      	subs	r2, #1
 80051ae:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80051b2:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 80051b4:	682b      	ldr	r3, [r5, #0]
 80051b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051ba:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051bc:	68eb      	ldr	r3, [r5, #12]
 80051be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80051c2:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 80051c4:	f7fe f89a 	bl	80032fc <HAL_GetTick>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051c8:	4d24      	ldr	r5, [pc, #144]	@ (800525c <HAL_RCC_OscConfig+0x624>)
            tickstart = HAL_GetTick();
 80051ca:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051cc:	e005      	b.n	80051da <HAL_RCC_OscConfig+0x5a2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ce:	f7fe f895 	bl	80032fc <HAL_GetTick>
 80051d2:	1b00      	subs	r0, r0, r4
 80051d4:	2802      	cmp	r0, #2
 80051d6:	f63f aeef 	bhi.w	8004fb8 <HAL_RCC_OscConfig+0x380>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051da:	682b      	ldr	r3, [r5, #0]
 80051dc:	0198      	lsls	r0, r3, #6
 80051de:	d5f6      	bpl.n	80051ce <HAL_RCC_OscConfig+0x596>
 80051e0:	e645      	b.n	8004e6e <HAL_RCC_OscConfig+0x236>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051e2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80051e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80051e8:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ea:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80051ee:	d1aa      	bne.n	8005146 <HAL_RCC_OscConfig+0x50e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80051f2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051f6:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80051fa:	d1a4      	bne.n	8005146 <HAL_RCC_OscConfig+0x50e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80051fe:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005202:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8005206:	d19e      	bne.n	8005146 <HAL_RCC_OscConfig+0x50e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005208:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800520a:	0852      	lsrs	r2, r2, #1
 800520c:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8005210:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005212:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8005216:	d196      	bne.n	8005146 <HAL_RCC_OscConfig+0x50e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005218:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800521a:	0852      	lsrs	r2, r2, #1
 800521c:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8005220:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005222:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8005226:	d18e      	bne.n	8005146 <HAL_RCC_OscConfig+0x50e>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005228:	6833      	ldr	r3, [r6, #0]
 800522a:	0199      	lsls	r1, r3, #6
 800522c:	f53f ae1f 	bmi.w	8004e6e <HAL_RCC_OscConfig+0x236>
          __HAL_RCC_PLL_ENABLE();
 8005230:	6833      	ldr	r3, [r6, #0]
 8005232:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005236:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005238:	68f3      	ldr	r3, [r6, #12]
 800523a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800523e:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8005240:	f7fe f85c 	bl	80032fc <HAL_GetTick>
 8005244:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005246:	e005      	b.n	8005254 <HAL_RCC_OscConfig+0x61c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005248:	f7fe f858 	bl	80032fc <HAL_GetTick>
 800524c:	1b03      	subs	r3, r0, r4
 800524e:	2b02      	cmp	r3, #2
 8005250:	f63f aeb2 	bhi.w	8004fb8 <HAL_RCC_OscConfig+0x380>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005254:	6833      	ldr	r3, [r6, #0]
 8005256:	019a      	lsls	r2, r3, #6
 8005258:	d5f6      	bpl.n	8005248 <HAL_RCC_OscConfig+0x610>
 800525a:	e608      	b.n	8004e6e <HAL_RCC_OscConfig+0x236>
 800525c:	40021000 	.word	0x40021000
 8005260:	019d808c 	.word	0x019d808c

08005264 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005264:	2800      	cmp	r0, #0
 8005266:	f000 80a0 	beq.w	80053aa <HAL_RCC_ClockConfig+0x146>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800526a:	4a54      	ldr	r2, [pc, #336]	@ (80053bc <HAL_RCC_ClockConfig+0x158>)
 800526c:	6813      	ldr	r3, [r2, #0]
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	428b      	cmp	r3, r1
{
 8005274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005278:	460d      	mov	r5, r1
 800527a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800527c:	d20c      	bcs.n	8005298 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527e:	6813      	ldr	r3, [r2, #0]
 8005280:	f023 0307 	bic.w	r3, r3, #7
 8005284:	430b      	orrs	r3, r1
 8005286:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005288:	6813      	ldr	r3, [r2, #0]
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	428b      	cmp	r3, r1
 8005290:	d002      	beq.n	8005298 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8005292:	2001      	movs	r0, #1
}
 8005294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005298:	6823      	ldr	r3, [r4, #0]
 800529a:	0799      	lsls	r1, r3, #30
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800529c:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052a0:	d570      	bpl.n	8005384 <HAL_RCC_ClockConfig+0x120>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80052a2:	4e47      	ldr	r6, [pc, #284]	@ (80053c0 <HAL_RCC_ClockConfig+0x15c>)
 80052a4:	68a0      	ldr	r0, [r4, #8]
 80052a6:	68b1      	ldr	r1, [r6, #8]
 80052a8:	f001 01f0 	and.w	r1, r1, #240	@ 0xf0
 80052ac:	4288      	cmp	r0, r1
 80052ae:	d904      	bls.n	80052ba <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052b0:	68b1      	ldr	r1, [r6, #8]
 80052b2:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
 80052b6:	4301      	orrs	r1, r0
 80052b8:	60b1      	str	r1, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052ba:	b332      	cbz	r2, 800530a <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052bc:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052be:	4b40      	ldr	r3, [pc, #256]	@ (80053c0 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052c0:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052c2:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052c4:	d065      	beq.n	8005392 <HAL_RCC_ClockConfig+0x12e>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c6:	2a02      	cmp	r2, #2
 80052c8:	d06c      	beq.n	80053a4 <HAL_RCC_ClockConfig+0x140>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80052ca:	2a00      	cmp	r2, #0
 80052cc:	d171      	bne.n	80053b2 <HAL_RCC_ClockConfig+0x14e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052ce:	079e      	lsls	r6, r3, #30
 80052d0:	d5df      	bpl.n	8005292 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80052d2:	4e3b      	ldr	r6, [pc, #236]	@ (80053c0 <HAL_RCC_ClockConfig+0x15c>)
 80052d4:	68b3      	ldr	r3, [r6, #8]
 80052d6:	f023 0303 	bic.w	r3, r3, #3
 80052da:	4313      	orrs	r3, r2
 80052dc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80052de:	f7fe f80d 	bl	80032fc <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052e2:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80052e6:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052e8:	e004      	b.n	80052f4 <HAL_RCC_ClockConfig+0x90>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ea:	f7fe f807 	bl	80032fc <HAL_GetTick>
 80052ee:	1bc0      	subs	r0, r0, r7
 80052f0:	4540      	cmp	r0, r8
 80052f2:	d85c      	bhi.n	80053ae <HAL_RCC_ClockConfig+0x14a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052f4:	68b3      	ldr	r3, [r6, #8]
 80052f6:	6862      	ldr	r2, [r4, #4]
 80052f8:	f003 030c 	and.w	r3, r3, #12
 80052fc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005300:	d1f3      	bne.n	80052ea <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	0799      	lsls	r1, r3, #30
 8005306:	d506      	bpl.n	8005316 <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005308:	68a0      	ldr	r0, [r4, #8]
 800530a:	492d      	ldr	r1, [pc, #180]	@ (80053c0 <HAL_RCC_ClockConfig+0x15c>)
 800530c:	688a      	ldr	r2, [r1, #8]
 800530e:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8005312:	4282      	cmp	r2, r0
 8005314:	d840      	bhi.n	8005398 <HAL_RCC_ClockConfig+0x134>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005316:	4929      	ldr	r1, [pc, #164]	@ (80053bc <HAL_RCC_ClockConfig+0x158>)
 8005318:	680a      	ldr	r2, [r1, #0]
 800531a:	f002 0207 	and.w	r2, r2, #7
 800531e:	42aa      	cmp	r2, r5
 8005320:	d909      	bls.n	8005336 <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005322:	680a      	ldr	r2, [r1, #0]
 8005324:	f022 0207 	bic.w	r2, r2, #7
 8005328:	432a      	orrs	r2, r5
 800532a:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800532c:	680a      	ldr	r2, [r1, #0]
 800532e:	f002 0207 	and.w	r2, r2, #7
 8005332:	42aa      	cmp	r2, r5
 8005334:	d1ad      	bne.n	8005292 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005336:	075a      	lsls	r2, r3, #29
 8005338:	d506      	bpl.n	8005348 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800533a:	4921      	ldr	r1, [pc, #132]	@ (80053c0 <HAL_RCC_ClockConfig+0x15c>)
 800533c:	68e0      	ldr	r0, [r4, #12]
 800533e:	688a      	ldr	r2, [r1, #8]
 8005340:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005344:	4302      	orrs	r2, r0
 8005346:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005348:	071b      	lsls	r3, r3, #28
 800534a:	d507      	bpl.n	800535c <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800534c:	4a1c      	ldr	r2, [pc, #112]	@ (80053c0 <HAL_RCC_ClockConfig+0x15c>)
 800534e:	6921      	ldr	r1, [r4, #16]
 8005350:	6893      	ldr	r3, [r2, #8]
 8005352:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8005356:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800535a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800535c:	f7ff fc1c 	bl	8004b98 <HAL_RCC_GetSysClockFreq>
 8005360:	4a17      	ldr	r2, [pc, #92]	@ (80053c0 <HAL_RCC_ClockConfig+0x15c>)
 8005362:	4c18      	ldr	r4, [pc, #96]	@ (80053c4 <HAL_RCC_ClockConfig+0x160>)
 8005364:	6892      	ldr	r2, [r2, #8]
 8005366:	4918      	ldr	r1, [pc, #96]	@ (80053c8 <HAL_RCC_ClockConfig+0x164>)
 8005368:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800536c:	4603      	mov	r3, r0
 800536e:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 8005370:	4816      	ldr	r0, [pc, #88]	@ (80053cc <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005372:	f002 021f 	and.w	r2, r2, #31
 8005376:	40d3      	lsrs	r3, r2
}
 8005378:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 800537c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800537e:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8005380:	f7fd bf7a 	b.w	8003278 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005384:	2a00      	cmp	r2, #0
 8005386:	d0c6      	beq.n	8005316 <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005388:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800538a:	4b0d      	ldr	r3, [pc, #52]	@ (80053c0 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800538c:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800538e:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005390:	d199      	bne.n	80052c6 <HAL_RCC_ClockConfig+0x62>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005392:	019b      	lsls	r3, r3, #6
 8005394:	d49d      	bmi.n	80052d2 <HAL_RCC_ClockConfig+0x6e>
 8005396:	e77c      	b.n	8005292 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005398:	688a      	ldr	r2, [r1, #8]
 800539a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800539e:	4302      	orrs	r2, r0
 80053a0:	608a      	str	r2, [r1, #8]
 80053a2:	e7b8      	b.n	8005316 <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053a4:	039f      	lsls	r7, r3, #14
 80053a6:	d494      	bmi.n	80052d2 <HAL_RCC_ClockConfig+0x6e>
 80053a8:	e773      	b.n	8005292 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80053aa:	2001      	movs	r0, #1
}
 80053ac:	4770      	bx	lr
        return HAL_TIMEOUT;
 80053ae:	2003      	movs	r0, #3
 80053b0:	e770      	b.n	8005294 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053b2:	0558      	lsls	r0, r3, #21
 80053b4:	f57f af6d 	bpl.w	8005292 <HAL_RCC_ClockConfig+0x2e>
 80053b8:	e78b      	b.n	80052d2 <HAL_RCC_ClockConfig+0x6e>
 80053ba:	bf00      	nop
 80053bc:	40022000 	.word	0x40022000
 80053c0:	40021000 	.word	0x40021000
 80053c4:	0800b470 	.word	0x0800b470
 80053c8:	20002c00 	.word	0x20002c00
 80053cc:	20002c08 	.word	0x20002c08

080053d0 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 80053d0:	4b01      	ldr	r3, [pc, #4]	@ (80053d8 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80053d2:	6818      	ldr	r0, [r3, #0]
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	20002c00 	.word	0x20002c00

080053dc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053dc:	4b05      	ldr	r3, [pc, #20]	@ (80053f4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80053de:	4a06      	ldr	r2, [pc, #24]	@ (80053f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80053e0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80053e2:	4906      	ldr	r1, [pc, #24]	@ (80053fc <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053e4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80053e8:	6808      	ldr	r0, [r1, #0]
 80053ea:	5cd3      	ldrb	r3, [r2, r3]
 80053ec:	f003 031f 	and.w	r3, r3, #31
}
 80053f0:	40d8      	lsrs	r0, r3
 80053f2:	4770      	bx	lr
 80053f4:	40021000 	.word	0x40021000
 80053f8:	0800b468 	.word	0x0800b468
 80053fc:	20002c00 	.word	0x20002c00

08005400 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005400:	4b05      	ldr	r3, [pc, #20]	@ (8005418 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005402:	4a06      	ldr	r2, [pc, #24]	@ (800541c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005404:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005406:	4906      	ldr	r1, [pc, #24]	@ (8005420 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005408:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800540c:	6808      	ldr	r0, [r1, #0]
 800540e:	5cd3      	ldrb	r3, [r2, r3]
 8005410:	f003 031f 	and.w	r3, r3, #31
}
 8005414:	40d8      	lsrs	r0, r3
 8005416:	4770      	bx	lr
 8005418:	40021000 	.word	0x40021000
 800541c:	0800b468 	.word	0x0800b468
 8005420:	20002c00 	.word	0x20002c00

08005424 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005424:	4a45      	ldr	r2, [pc, #276]	@ (800553c <RCCEx_PLLSAI1_Config+0x118>)
{
 8005426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005428:	68d6      	ldr	r6, [r2, #12]
{
 800542a:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800542c:	07b1      	lsls	r1, r6, #30
{
 800542e:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005430:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005432:	d006      	beq.n	8005442 <RCCEx_PLLSAI1_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005434:	68d1      	ldr	r1, [r2, #12]
 8005436:	f001 0103 	and.w	r1, r1, #3
 800543a:	4281      	cmp	r1, r0
 800543c:	d04b      	beq.n	80054d6 <RCCEx_PLLSAI1_Config+0xb2>
 800543e:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8005440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8005442:	2802      	cmp	r0, #2
 8005444:	d058      	beq.n	80054f8 <RCCEx_PLLSAI1_Config+0xd4>
 8005446:	2803      	cmp	r0, #3
 8005448:	d04f      	beq.n	80054ea <RCCEx_PLLSAI1_Config+0xc6>
 800544a:	2801      	cmp	r0, #1
 800544c:	d1f7      	bne.n	800543e <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800544e:	6812      	ldr	r2, [r2, #0]
 8005450:	0793      	lsls	r3, r2, #30
 8005452:	d5f5      	bpl.n	8005440 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005454:	4939      	ldr	r1, [pc, #228]	@ (800553c <RCCEx_PLLSAI1_Config+0x118>)
 8005456:	68ca      	ldr	r2, [r1, #12]
 8005458:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800545c:	ea42 0300 	orr.w	r3, r2, r0
 8005460:	6862      	ldr	r2, [r4, #4]
 8005462:	3a01      	subs	r2, #1
 8005464:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005468:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 800546a:	4e34      	ldr	r6, [pc, #208]	@ (800553c <RCCEx_PLLSAI1_Config+0x118>)
 800546c:	6833      	ldr	r3, [r6, #0]
 800546e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005472:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005474:	f7fd ff42 	bl	80032fc <HAL_GetTick>
 8005478:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800547a:	e004      	b.n	8005486 <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800547c:	f7fd ff3e 	bl	80032fc <HAL_GetTick>
 8005480:	1bc3      	subs	r3, r0, r7
 8005482:	2b02      	cmp	r3, #2
 8005484:	d83c      	bhi.n	8005500 <RCCEx_PLLSAI1_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005486:	6833      	ldr	r3, [r6, #0]
 8005488:	011a      	lsls	r2, r3, #4
 800548a:	d4f7      	bmi.n	800547c <RCCEx_PLLSAI1_Config+0x58>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800548c:	68a3      	ldr	r3, [r4, #8]
 800548e:	0219      	lsls	r1, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 8005490:	2d00      	cmp	r5, #0
 8005492:	d137      	bne.n	8005504 <RCCEx_PLLSAI1_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005494:	6932      	ldr	r2, [r6, #16]
 8005496:	68e3      	ldr	r3, [r4, #12]
 8005498:	f022 4278 	bic.w	r2, r2, #4160749568	@ 0xf8000000
 800549c:	ea41 63c3 	orr.w	r3, r1, r3, lsl #27
 80054a0:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 80054a4:	4313      	orrs	r3, r2
 80054a6:	6133      	str	r3, [r6, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80054a8:	4d24      	ldr	r5, [pc, #144]	@ (800553c <RCCEx_PLLSAI1_Config+0x118>)
 80054aa:	682b      	ldr	r3, [r5, #0]
 80054ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80054b0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80054b2:	f7fd ff23 	bl	80032fc <HAL_GetTick>
 80054b6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054b8:	e004      	b.n	80054c4 <RCCEx_PLLSAI1_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054ba:	f7fd ff1f 	bl	80032fc <HAL_GetTick>
 80054be:	1b80      	subs	r0, r0, r6
 80054c0:	2802      	cmp	r0, #2
 80054c2:	d81d      	bhi.n	8005500 <RCCEx_PLLSAI1_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	d5f7      	bpl.n	80054ba <RCCEx_PLLSAI1_Config+0x96>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054ca:	692b      	ldr	r3, [r5, #16]
 80054cc:	69a2      	ldr	r2, [r4, #24]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	2000      	movs	r0, #0
 80054d2:	612b      	str	r3, [r5, #16]
}
 80054d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80054d6:	2900      	cmp	r1, #0
 80054d8:	d0b1      	beq.n	800543e <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80054da:	68d3      	ldr	r3, [r2, #12]
       ||
 80054dc:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80054de:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80054e2:	3301      	adds	r3, #1
       ||
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d1aa      	bne.n	800543e <RCCEx_PLLSAI1_Config+0x1a>
 80054e8:	e7bf      	b.n	800546a <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054ea:	6811      	ldr	r1, [r2, #0]
 80054ec:	038e      	lsls	r6, r1, #14
 80054ee:	d4b1      	bmi.n	8005454 <RCCEx_PLLSAI1_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054f0:	6812      	ldr	r2, [r2, #0]
 80054f2:	0351      	lsls	r1, r2, #13
 80054f4:	d5a3      	bpl.n	800543e <RCCEx_PLLSAI1_Config+0x1a>
 80054f6:	e7ad      	b.n	8005454 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054f8:	6812      	ldr	r2, [r2, #0]
 80054fa:	0557      	lsls	r7, r2, #21
 80054fc:	d59f      	bpl.n	800543e <RCCEx_PLLSAI1_Config+0x1a>
 80054fe:	e7a9      	b.n	8005454 <RCCEx_PLLSAI1_Config+0x30>
 8005500:	2003      	movs	r0, #3
}
 8005502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 8005504:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005506:	6933      	ldr	r3, [r6, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8005508:	d00b      	beq.n	8005522 <RCCEx_PLLSAI1_Config+0xfe>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800550a:	6962      	ldr	r2, [r4, #20]
 800550c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005510:	0852      	lsrs	r2, r2, #1
 8005512:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005516:	3a01      	subs	r2, #1
 8005518:	430b      	orrs	r3, r1
 800551a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800551e:	6133      	str	r3, [r6, #16]
 8005520:	e7c2      	b.n	80054a8 <RCCEx_PLLSAI1_Config+0x84>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005522:	6922      	ldr	r2, [r4, #16]
 8005524:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005528:	0852      	lsrs	r2, r2, #1
 800552a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800552e:	3a01      	subs	r2, #1
 8005530:	430b      	orrs	r3, r1
 8005532:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8005536:	6133      	str	r3, [r6, #16]
 8005538:	e7b6      	b.n	80054a8 <RCCEx_PLLSAI1_Config+0x84>
 800553a:	bf00      	nop
 800553c:	40021000 	.word	0x40021000

08005540 <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005540:	4a3e      	ldr	r2, [pc, #248]	@ (800563c <RCCEx_PLLSAI2_Config+0xfc>)
{
 8005542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005544:	68d6      	ldr	r6, [r2, #12]
{
 8005546:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005548:	07b1      	lsls	r1, r6, #30
{
 800554a:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800554c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800554e:	d006      	beq.n	800555e <RCCEx_PLLSAI2_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005550:	68d1      	ldr	r1, [r2, #12]
 8005552:	f001 0103 	and.w	r1, r1, #3
 8005556:	4281      	cmp	r1, r0
 8005558:	d04b      	beq.n	80055f2 <RCCEx_PLLSAI2_Config+0xb2>
 800555a:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 800555c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 800555e:	2802      	cmp	r0, #2
 8005560:	d058      	beq.n	8005614 <RCCEx_PLLSAI2_Config+0xd4>
 8005562:	2803      	cmp	r0, #3
 8005564:	d04f      	beq.n	8005606 <RCCEx_PLLSAI2_Config+0xc6>
 8005566:	2801      	cmp	r0, #1
 8005568:	d1f7      	bne.n	800555a <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800556a:	6812      	ldr	r2, [r2, #0]
 800556c:	0793      	lsls	r3, r2, #30
 800556e:	d5f5      	bpl.n	800555c <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005570:	4932      	ldr	r1, [pc, #200]	@ (800563c <RCCEx_PLLSAI2_Config+0xfc>)
 8005572:	68ca      	ldr	r2, [r1, #12]
 8005574:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8005578:	ea42 0300 	orr.w	r3, r2, r0
 800557c:	6862      	ldr	r2, [r4, #4]
 800557e:	3a01      	subs	r2, #1
 8005580:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005584:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 8005586:	4e2d      	ldr	r6, [pc, #180]	@ (800563c <RCCEx_PLLSAI2_Config+0xfc>)
 8005588:	6833      	ldr	r3, [r6, #0]
 800558a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800558e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005590:	f7fd feb4 	bl	80032fc <HAL_GetTick>
 8005594:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005596:	e004      	b.n	80055a2 <RCCEx_PLLSAI2_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005598:	f7fd feb0 	bl	80032fc <HAL_GetTick>
 800559c:	1bc3      	subs	r3, r0, r7
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d83c      	bhi.n	800561c <RCCEx_PLLSAI2_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055a2:	6833      	ldr	r3, [r6, #0]
 80055a4:	009a      	lsls	r2, r3, #2
 80055a6:	d4f7      	bmi.n	8005598 <RCCEx_PLLSAI2_Config+0x58>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055a8:	68a3      	ldr	r3, [r4, #8]
 80055aa:	021b      	lsls	r3, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 80055ac:	2d00      	cmp	r5, #0
 80055ae:	d137      	bne.n	8005620 <RCCEx_PLLSAI2_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055b0:	6972      	ldr	r2, [r6, #20]
 80055b2:	68e1      	ldr	r1, [r4, #12]
 80055b4:	f022 4278 	bic.w	r2, r2, #4160749568	@ 0xf8000000
 80055b8:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 80055bc:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 80055c0:	4313      	orrs	r3, r2
 80055c2:	6173      	str	r3, [r6, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80055c4:	4d1d      	ldr	r5, [pc, #116]	@ (800563c <RCCEx_PLLSAI2_Config+0xfc>)
 80055c6:	682b      	ldr	r3, [r5, #0]
 80055c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055cc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80055ce:	f7fd fe95 	bl	80032fc <HAL_GetTick>
 80055d2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055d4:	e004      	b.n	80055e0 <RCCEx_PLLSAI2_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055d6:	f7fd fe91 	bl	80032fc <HAL_GetTick>
 80055da:	1b80      	subs	r0, r0, r6
 80055dc:	2802      	cmp	r0, #2
 80055de:	d81d      	bhi.n	800561c <RCCEx_PLLSAI2_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80055e0:	682b      	ldr	r3, [r5, #0]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	d5f7      	bpl.n	80055d6 <RCCEx_PLLSAI2_Config+0x96>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80055e6:	696b      	ldr	r3, [r5, #20]
 80055e8:	6962      	ldr	r2, [r4, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	2000      	movs	r0, #0
 80055ee:	616b      	str	r3, [r5, #20]
}
 80055f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80055f2:	2900      	cmp	r1, #0
 80055f4:	d0b1      	beq.n	800555a <RCCEx_PLLSAI2_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80055f6:	68d3      	ldr	r3, [r2, #12]
       ||
 80055f8:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80055fa:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80055fe:	3301      	adds	r3, #1
       ||
 8005600:	4293      	cmp	r3, r2
 8005602:	d1aa      	bne.n	800555a <RCCEx_PLLSAI2_Config+0x1a>
 8005604:	e7bf      	b.n	8005586 <RCCEx_PLLSAI2_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005606:	6811      	ldr	r1, [r2, #0]
 8005608:	038e      	lsls	r6, r1, #14
 800560a:	d4b1      	bmi.n	8005570 <RCCEx_PLLSAI2_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800560c:	6812      	ldr	r2, [r2, #0]
 800560e:	0351      	lsls	r1, r2, #13
 8005610:	d5a3      	bpl.n	800555a <RCCEx_PLLSAI2_Config+0x1a>
 8005612:	e7ad      	b.n	8005570 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005614:	6812      	ldr	r2, [r2, #0]
 8005616:	0557      	lsls	r7, r2, #21
 8005618:	d59f      	bpl.n	800555a <RCCEx_PLLSAI2_Config+0x1a>
 800561a:	e7a9      	b.n	8005570 <RCCEx_PLLSAI2_Config+0x30>
 800561c:	2003      	movs	r0, #3
}
 800561e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005620:	6972      	ldr	r2, [r6, #20]
 8005622:	6921      	ldr	r1, [r4, #16]
 8005624:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8005628:	0849      	lsrs	r1, r1, #1
 800562a:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 800562e:	3901      	subs	r1, #1
 8005630:	431a      	orrs	r2, r3
 8005632:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8005636:	6172      	str	r2, [r6, #20]
 8005638:	e7c4      	b.n	80055c4 <RCCEx_PLLSAI2_Config+0x84>
 800563a:	bf00      	nop
 800563c:	40021000 	.word	0x40021000

08005640 <HAL_RCCEx_PeriphCLKConfig>:
{
 8005640:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005644:	6803      	ldr	r3, [r0, #0]
 8005646:	f413 6600 	ands.w	r6, r3, #2048	@ 0x800
{
 800564a:	b083      	sub	sp, #12
 800564c:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800564e:	d01e      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005650:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8005652:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8005656:	f000 81be 	beq.w	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x396>
 800565a:	f200 8201 	bhi.w	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800565e:	2900      	cmp	r1, #0
 8005660:	f000 81c9 	beq.w	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8005664:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8005668:	f040 81fe 	bne.w	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x428>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800566c:	2100      	movs	r1, #0
 800566e:	3020      	adds	r0, #32
 8005670:	f7ff ff66 	bl	8005540 <RCCEx_PLLSAI2_Config>
 8005674:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005676:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005678:	b94e      	cbnz	r6, 800568e <HAL_RCCEx_PeriphCLKConfig+0x4e>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800567a:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800567c:	48b1      	ldr	r0, [pc, #708]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800567e:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8005682:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8005686:	430a      	orrs	r2, r1
 8005688:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800568c:	2600      	movs	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800568e:	04d8      	lsls	r0, r3, #19
 8005690:	f140 8115 	bpl.w	80058be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8005694:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8005696:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 800569a:	f000 81b1 	beq.w	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800569e:	f200 8109 	bhi.w	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80056a2:	2900      	cmp	r1, #0
 80056a4:	f000 819d 	beq.w	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 80056a8:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 80056ac:	f040 8106 	bne.w	80058bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056b0:	2100      	movs	r1, #0
 80056b2:	f104 0020 	add.w	r0, r4, #32
 80056b6:	f7ff ff43 	bl	8005540 <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056ba:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056bc:	4607      	mov	r7, r0
    if(ret == HAL_OK)
 80056be:	2f00      	cmp	r7, #0
 80056c0:	f040 8197 	bne.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056c4:	499f      	ldr	r1, [pc, #636]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056c6:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80056c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80056cc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80056d0:	4302      	orrs	r2, r0
 80056d2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056d6:	0399      	lsls	r1, r3, #14
 80056d8:	f100 80f5 	bmi.w	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056dc:	07d9      	lsls	r1, r3, #31
 80056de:	d508      	bpl.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056e0:	4998      	ldr	r1, [pc, #608]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056e2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80056e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80056e8:	f022 0203 	bic.w	r2, r2, #3
 80056ec:	4302      	orrs	r2, r0
 80056ee:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056f2:	079a      	lsls	r2, r3, #30
 80056f4:	d508      	bpl.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056f6:	4993      	ldr	r1, [pc, #588]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056f8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80056fa:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80056fe:	f022 020c 	bic.w	r2, r2, #12
 8005702:	4302      	orrs	r2, r0
 8005704:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005708:	075f      	lsls	r7, r3, #29
 800570a:	d508      	bpl.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800570c:	498d      	ldr	r1, [pc, #564]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800570e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8005710:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005714:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8005718:	4302      	orrs	r2, r0
 800571a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800571e:	071d      	lsls	r5, r3, #28
 8005720:	d508      	bpl.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005722:	4988      	ldr	r1, [pc, #544]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005724:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8005726:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800572a:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800572e:	4302      	orrs	r2, r0
 8005730:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005734:	06d8      	lsls	r0, r3, #27
 8005736:	d508      	bpl.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x10a>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005738:	4982      	ldr	r1, [pc, #520]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800573a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 800573c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005740:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005744:	4302      	orrs	r2, r0
 8005746:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800574a:	0699      	lsls	r1, r3, #26
 800574c:	d508      	bpl.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x120>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800574e:	497d      	ldr	r1, [pc, #500]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005750:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8005752:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005756:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800575a:	4302      	orrs	r2, r0
 800575c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005760:	059a      	lsls	r2, r3, #22
 8005762:	d508      	bpl.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x136>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005764:	4977      	ldr	r1, [pc, #476]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005766:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8005768:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800576c:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8005770:	4302      	orrs	r2, r0
 8005772:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005776:	055f      	lsls	r7, r3, #21
 8005778:	d508      	bpl.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800577a:	4972      	ldr	r1, [pc, #456]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800577c:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800577e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005782:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8005786:	4302      	orrs	r2, r0
 8005788:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800578c:	065d      	lsls	r5, r3, #25
 800578e:	d508      	bpl.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x162>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005790:	496c      	ldr	r1, [pc, #432]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005792:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8005794:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005798:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800579c:	4302      	orrs	r2, r0
 800579e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057a2:	0618      	lsls	r0, r3, #24
 80057a4:	d508      	bpl.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057a6:	4967      	ldr	r1, [pc, #412]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057a8:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80057aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80057ae:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80057b2:	4302      	orrs	r2, r0
 80057b4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057b8:	05d9      	lsls	r1, r3, #23
 80057ba:	d508      	bpl.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x18e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057bc:	4961      	ldr	r1, [pc, #388]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80057c4:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80057c8:	4302      	orrs	r2, r0
 80057ca:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057ce:	02da      	lsls	r2, r3, #11
 80057d0:	d508      	bpl.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80057d2:	495c      	ldr	r1, [pc, #368]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057d4:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80057d6:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 80057da:	f022 0203 	bic.w	r2, r2, #3
 80057de:	4302      	orrs	r2, r0
 80057e0:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80057e4:	049f      	lsls	r7, r3, #18
 80057e6:	d510      	bpl.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057e8:	4956      	ldr	r1, [pc, #344]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057ea:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80057ec:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80057f0:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80057f4:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057f6:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80057fa:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057fe:	f000 80c7 	beq.w	8005990 <HAL_RCCEx_PeriphCLKConfig+0x350>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005802:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8005806:	f000 8117 	beq.w	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800580a:	031d      	lsls	r5, r3, #12
 800580c:	d510      	bpl.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800580e:	494d      	ldr	r1, [pc, #308]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005810:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8005812:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005816:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800581a:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800581c:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005820:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005824:	f000 80aa 	beq.w	800597c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005828:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 800582c:	f000 810e 	beq.w	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x40c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005830:	0358      	lsls	r0, r3, #13
 8005832:	d510      	bpl.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005834:	4943      	ldr	r1, [pc, #268]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005836:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8005838:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800583c:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8005840:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005842:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005846:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800584a:	f000 809c 	beq.w	8005986 <HAL_RCCEx_PeriphCLKConfig+0x346>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800584e:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8005852:	f000 80e7 	beq.w	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005856:	0459      	lsls	r1, r3, #17
 8005858:	d510      	bpl.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800585a:	483a      	ldr	r0, [pc, #232]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800585c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 800585e:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8005862:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005866:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005868:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800586c:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005870:	f000 80a7 	beq.w	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005874:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8005878:	f000 80c9 	beq.w	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800587c:	041a      	lsls	r2, r3, #16
 800587e:	d509      	bpl.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x254>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005880:	4930      	ldr	r1, [pc, #192]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005882:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8005886:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800588a:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800588e:	4302      	orrs	r2, r0
 8005890:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005894:	03db      	lsls	r3, r3, #15
 8005896:	d509      	bpl.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005898:	4a2a      	ldr	r2, [pc, #168]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800589a:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800589e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80058a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80058a6:	430b      	orrs	r3, r1
 80058a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 80058ac:	4630      	mov	r0, r6
 80058ae:	b003      	add	sp, #12
 80058b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai2ClockSelection)
 80058b4:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 80058b8:	f000 80a7 	beq.w	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 80058bc:	2601      	movs	r6, #1
 80058be:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058c0:	0399      	lsls	r1, r3, #14
 80058c2:	f57f af0b 	bpl.w	80056dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80058c6:	4b1f      	ldr	r3, [pc, #124]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80058ca:	00d2      	lsls	r2, r2, #3
 80058cc:	d53e      	bpl.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    FlagStatus       pwrclkchanged = RESET;
 80058ce:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058d2:	4d1d      	ldr	r5, [pc, #116]	@ (8005948 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058da:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80058dc:	f7fd fd0e 	bl	80032fc <HAL_GetTick>
 80058e0:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058e2:	e005      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058e4:	f7fd fd0a 	bl	80032fc <HAL_GetTick>
 80058e8:	eba0 0309 	sub.w	r3, r0, r9
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d839      	bhi.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x324>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058f0:	682b      	ldr	r3, [r5, #0]
 80058f2:	05db      	lsls	r3, r3, #23
 80058f4:	d5f6      	bpl.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    if(ret == HAL_OK)
 80058f6:	2f00      	cmp	r7, #0
 80058f8:	f040 80b8 	bne.w	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058fc:	4d11      	ldr	r5, [pc, #68]	@ (8005944 <HAL_RCCEx_PeriphCLKConfig+0x304>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058fe:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005902:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005906:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800590a:	d051      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800590c:	4293      	cmp	r3, r2
 800590e:	d04f      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005910:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8005914:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8005918:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800591c:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005920:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8005924:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005928:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800592c:	07cf      	lsls	r7, r1, #31
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800592e:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        RCC->BDCR = tmpregister;
 8005932:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005936:	d53b      	bpl.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        tickstart = HAL_GetTick();
 8005938:	f7fd fce0 	bl	80032fc <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800593c:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8005940:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005942:	e02f      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x364>
 8005944:	40021000 	.word	0x40021000
 8005948:	40007000 	.word	0x40007000
      __HAL_RCC_PWR_CLK_ENABLE();
 800594c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800594e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005952:	659a      	str	r2, [r3, #88]	@ 0x58
 8005954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800595a:	9301      	str	r3, [sp, #4]
 800595c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800595e:	f04f 0801 	mov.w	r8, #1
 8005962:	e7b6      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
        ret = HAL_TIMEOUT;
 8005964:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005966:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8005968:	f1b8 0f00 	cmp.w	r8, #0
 800596c:	f43f aeb6 	beq.w	80056dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005970:	493f      	ldr	r1, [pc, #252]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8005972:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8005974:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8005978:	658a      	str	r2, [r1, #88]	@ 0x58
 800597a:	e6af      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800597c:	68ca      	ldr	r2, [r1, #12]
 800597e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005982:	60ca      	str	r2, [r1, #12]
 8005984:	e754      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005986:	68ca      	ldr	r2, [r1, #12]
 8005988:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800598c:	60ca      	str	r2, [r1, #12]
 800598e:	e762      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005990:	68ca      	ldr	r2, [r1, #12]
 8005992:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005996:	60ca      	str	r2, [r1, #12]
 8005998:	e737      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800599a:	f7fd fcaf 	bl	80032fc <HAL_GetTick>
 800599e:	1bc0      	subs	r0, r0, r7
 80059a0:	4548      	cmp	r0, r9
 80059a2:	d8df      	bhi.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x324>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059a4:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80059a8:	0798      	lsls	r0, r3, #30
 80059aa:	d5f6      	bpl.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x35a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059ac:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 80059b0:	492f      	ldr	r1, [pc, #188]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 80059b2:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 80059b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80059c0:	e7d1      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x326>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80059c2:	2102      	movs	r1, #2
 80059c4:	1d20      	adds	r0, r4, #4
 80059c6:	f7ff fd2d 	bl	8005424 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80059ca:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 80059cc:	2800      	cmp	r0, #0
 80059ce:	f43f af55 	beq.w	800587c <HAL_RCCEx_PeriphCLKConfig+0x23c>
        status = ret;
 80059d2:	4606      	mov	r6, r0
 80059d4:	e752      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80059d6:	4826      	ldr	r0, [pc, #152]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 80059d8:	68c2      	ldr	r2, [r0, #12]
 80059da:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80059de:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 80059e0:	e64c      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80059e2:	1d20      	adds	r0, r4, #4
 80059e4:	f7ff fd1e 	bl	8005424 <RCCEx_PLLSAI1_Config>
 80059e8:	4607      	mov	r7, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059ea:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80059ec:	2f00      	cmp	r7, #0
 80059ee:	f43f ae69 	beq.w	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x84>
      status = ret;
 80059f2:	463e      	mov	r6, r7
 80059f4:	e764      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80059f6:	3004      	adds	r0, #4
 80059f8:	f7ff fd14 	bl	8005424 <RCCEx_PLLSAI1_Config>
 80059fc:	4606      	mov	r6, r0
      break;
 80059fe:	e63a      	b.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x36>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a00:	491b      	ldr	r1, [pc, #108]	@ (8005a70 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 8005a02:	68ca      	ldr	r2, [r1, #12]
 8005a04:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005a08:	60ca      	str	r2, [r1, #12]
    switch(PeriphClkInit->Sai1ClockSelection)
 8005a0a:	4637      	mov	r7, r6
 8005a0c:	e657      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005a0e:	2102      	movs	r1, #2
 8005a10:	f104 0020 	add.w	r0, r4, #32
 8005a14:	f7ff fd94 	bl	8005540 <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a18:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005a1a:	2800      	cmp	r0, #0
 8005a1c:	f43f af2e 	beq.w	800587c <HAL_RCCEx_PeriphCLKConfig+0x23c>
        status = ret;
 8005a20:	4606      	mov	r6, r0
 8005a22:	e72b      	b.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x23c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a24:	2101      	movs	r1, #1
 8005a26:	1d20      	adds	r0, r4, #4
 8005a28:	f7ff fcfc 	bl	8005424 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a2c:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005a2e:	2800      	cmp	r0, #0
 8005a30:	f43f af11 	beq.w	8005856 <HAL_RCCEx_PeriphCLKConfig+0x216>
        status = ret;
 8005a34:	4606      	mov	r6, r0
 8005a36:	e70e      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x216>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a38:	2101      	movs	r1, #1
 8005a3a:	1d20      	adds	r0, r4, #4
 8005a3c:	f7ff fcf2 	bl	8005424 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a40:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 8005a42:	2800      	cmp	r0, #0
 8005a44:	f43f aee1 	beq.w	800580a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
          status = ret;
 8005a48:	4606      	mov	r6, r0
 8005a4a:	e6de      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	1d20      	adds	r0, r4, #4
 8005a50:	f7ff fce8 	bl	8005424 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a54:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005a56:	2800      	cmp	r0, #0
 8005a58:	f43f aeea 	beq.w	8005830 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        status = ret;
 8005a5c:	4606      	mov	r6, r0
 8005a5e:	e6e7      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005a60:	f5b1 0f40 	cmp.w	r1, #12582912	@ 0xc00000
 8005a64:	f43f ae0a 	beq.w	800567c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005a68:	2601      	movs	r6, #1
 8005a6a:	e610      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x4e>
      status = ret;
 8005a6c:	463e      	mov	r6, r7
 8005a6e:	e77a      	b.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8005a70:	40021000 	.word	0x40021000

08005a74 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a78:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005a7a:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005a7c:	460e      	mov	r6, r1
 8005a7e:	4615      	mov	r5, r2
  __IO uint8_t  tmpreg8 = 0;
 8005a80:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005a84:	4607      	mov	r7, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005a86:	f7fd fc39 	bl	80032fc <HAL_GetTick>
 8005a8a:	4435      	add	r5, r6
 8005a8c:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8005a8e:	f7fd fc35 	bl	80032fc <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a92:	4b32      	ldr	r3, [pc, #200]	@ (8005b5c <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe8>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005a94:	683c      	ldr	r4, [r7, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005a9c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005aa0:	0d1b      	lsrs	r3, r3, #20
 8005aa2:	fb05 f303 	mul.w	r3, r5, r3
 8005aa6:	3601      	adds	r6, #1
 8005aa8:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8005aaa:	d111      	bne.n	8005ad0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5c>
 8005aac:	68a3      	ldr	r3, [r4, #8]
 8005aae:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8005ab2:	d009      	beq.n	8005ac8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005ab4:	7b23      	ldrb	r3, [r4, #12]
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005abc:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8005ac0:	68a3      	ldr	r3, [r4, #8]
 8005ac2:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8005ac6:	d1f5      	bne.n	8005ab4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 8005ac8:	2000      	movs	r0, #0
}
 8005aca:	b002      	add	sp, #8
 8005acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ad0:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005ad2:	4623      	mov	r3, r4
  while ((hspi->Instance->SR & Fifo) != State)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8005ada:	d0f5      	beq.n	8005ac8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
 8005adc:	7b23      	ldrb	r3, [r4, #12]
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8005ae4:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ae8:	f7fd fc08 	bl	80032fc <HAL_GetTick>
 8005aec:	eba0 0008 	sub.w	r0, r0, r8
 8005af0:	42a8      	cmp	r0, r5
 8005af2:	d209      	bcs.n	8005b08 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x94>
      if (count == 0U)
 8005af4:	9a01      	ldr	r2, [sp, #4]
      count--;
 8005af6:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8005af8:	2a00      	cmp	r2, #0
      count--;
 8005afa:	f103 33ff 	add.w	r3, r3, #4294967295
 8005afe:	9301      	str	r3, [sp, #4]
        tmp_timeout = 0U;
 8005b00:	bf08      	it	eq
 8005b02:	2500      	moveq	r5, #0
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	e7e5      	b.n	8005ad4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b08:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b0c:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b0e:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b12:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005b16:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b18:	d013      	beq.n	8005b42 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xce>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b1c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005b20:	d107      	bne.n	8005b32 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          SPI_RESET_CRC(hspi);
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b30:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005b32:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8005b34:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8005b36:	f887 205d 	strb.w	r2, [r7, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005b3a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005b3e:	2003      	movs	r0, #3
 8005b40:	e7c3      	b.n	8005aca <SPI_WaitFifoStateUntilTimeout.constprop.0+0x56>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005b48:	d002      	beq.n	8005b50 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b4a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005b4e:	d1e4      	bne.n	8005b1a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
          __HAL_SPI_DISABLE(hspi);
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	e7df      	b.n	8005b1a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
 8005b5a:	bf00      	nop
 8005b5c:	20002c00 	.word	0x20002c00

08005b60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b64:	b084      	sub	sp, #16
  __IO uint8_t  tmpreg8 = 0;
 8005b66:	2300      	movs	r3, #0
{
 8005b68:	460e      	mov	r6, r1
 8005b6a:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8005b6c:	f88d 3007 	strb.w	r3, [sp, #7]
{
 8005b70:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005b72:	f7fd fbc3 	bl	80032fc <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005b76:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8005cb0 <SPI_EndRxTxTransaction+0x150>
 8005b7a:	eb06 0807 	add.w	r8, r6, r7
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005b7e:	eba8 0400 	sub.w	r4, r8, r0
  tmp_tickstart = HAL_GetTick();
 8005b82:	f7fd fbbb 	bl	80032fc <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005b86:	f8d9 3000 	ldr.w	r3, [r9]
 8005b8a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005b8e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005b92:	0d1b      	lsrs	r3, r3, #20
 8005b94:	fb04 f303 	mul.w	r3, r4, r3
 8005b98:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8005b9a:	1c73      	adds	r3, r6, #1
 8005b9c:	d126      	bne.n	8005bec <SPI_EndRxTxTransaction+0x8c>
 8005b9e:	682c      	ldr	r4, [r5, #0]
 8005ba0:	68a3      	ldr	r3, [r4, #8]
 8005ba2:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 8005ba6:	d1fb      	bne.n	8005ba0 <SPI_EndRxTxTransaction+0x40>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ba8:	f7fd fba8 	bl	80032fc <HAL_GetTick>
 8005bac:	eba8 0800 	sub.w	r8, r8, r0
  tmp_tickstart = HAL_GetTick();
 8005bb0:	f7fd fba4 	bl	80032fc <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bb4:	f8d9 3000 	ldr.w	r3, [r9]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bb8:	682a      	ldr	r2, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bba:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005bbe:	fb08 f303 	mul.w	r3, r8, r3
 8005bc2:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bc4:	6893      	ldr	r3, [r2, #8]
 8005bc6:	0619      	lsls	r1, r3, #24
 8005bc8:	d4fc      	bmi.n	8005bc4 <SPI_EndRxTxTransaction+0x64>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005bca:	463a      	mov	r2, r7
 8005bcc:	4631      	mov	r1, r6
 8005bce:	4628      	mov	r0, r5
 8005bd0:	f7ff ff50 	bl	8005a74 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8005bd4:	b910      	cbnz	r0, 8005bdc <SPI_EndRxTxTransaction+0x7c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8005bd6:	b004      	add	sp, #16
 8005bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bdc:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8005bde:	f043 0320 	orr.w	r3, r3, #32
 8005be2:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005be4:	2003      	movs	r0, #3
}
 8005be6:	b004      	add	sp, #16
 8005be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bec:	4682      	mov	sl, r0
  while ((hspi->Instance->SR & Fifo) != State)
 8005bee:	682b      	ldr	r3, [r5, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 8005bf6:	d00e      	beq.n	8005c16 <SPI_EndRxTxTransaction+0xb6>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bf8:	f7fd fb80 	bl	80032fc <HAL_GetTick>
 8005bfc:	eba0 030a 	sub.w	r3, r0, sl
 8005c00:	42a3      	cmp	r3, r4
 8005c02:	d220      	bcs.n	8005c46 <SPI_EndRxTxTransaction+0xe6>
      if (count == 0U)
 8005c04:	9a02      	ldr	r2, [sp, #8]
      count--;
 8005c06:	9b02      	ldr	r3, [sp, #8]
        tmp_timeout = 0U;
 8005c08:	2a00      	cmp	r2, #0
      count--;
 8005c0a:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8005c0e:	bf08      	it	eq
 8005c10:	2400      	moveq	r4, #0
      count--;
 8005c12:	9302      	str	r3, [sp, #8]
 8005c14:	e7eb      	b.n	8005bee <SPI_EndRxTxTransaction+0x8e>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005c16:	f7fd fb71 	bl	80032fc <HAL_GetTick>
 8005c1a:	eba8 0400 	sub.w	r4, r8, r0
  tmp_tickstart = HAL_GetTick();
 8005c1e:	f7fd fb6d 	bl	80032fc <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c22:	f8d9 3000 	ldr.w	r3, [r9]
 8005c26:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005c2a:	fb04 f303 	mul.w	r3, r4, r3
  tmp_tickstart = HAL_GetTick();
 8005c2e:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005c30:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c32:	682b      	ldr	r3, [r5, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	061b      	lsls	r3, r3, #24
 8005c38:	d5c7      	bpl.n	8005bca <SPI_EndRxTxTransaction+0x6a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005c3a:	f7fd fb5f 	bl	80032fc <HAL_GetTick>
 8005c3e:	eba0 0308 	sub.w	r3, r0, r8
 8005c42:	42a3      	cmp	r3, r4
 8005c44:	d31f      	bcc.n	8005c86 <SPI_EndRxTxTransaction+0x126>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c46:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c4a:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c4c:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c50:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005c54:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c56:	d01f      	beq.n	8005c98 <SPI_EndRxTxTransaction+0x138>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c58:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8005c5a:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005c5e:	d107      	bne.n	8005c70 <SPI_EndRxTxTransaction+0x110>
          SPI_RESET_CRC(hspi);
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c6e:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005c70:	2301      	movs	r3, #1
 8005c72:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c76:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 8005c78:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c7a:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 8005c7e:	f885 205c 	strb.w	r2, [r5, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c82:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005c84:	e7ae      	b.n	8005be4 <SPI_EndRxTxTransaction+0x84>
      if (count == 0U)
 8005c86:	9a03      	ldr	r2, [sp, #12]
      count--;
 8005c88:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8005c8a:	2a00      	cmp	r2, #0
      count--;
 8005c8c:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8005c90:	bf08      	it	eq
 8005c92:	2400      	moveq	r4, #0
      count--;
 8005c94:	9303      	str	r3, [sp, #12]
 8005c96:	e7cc      	b.n	8005c32 <SPI_EndRxTxTransaction+0xd2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c98:	68aa      	ldr	r2, [r5, #8]
 8005c9a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005c9e:	d002      	beq.n	8005ca6 <SPI_EndRxTxTransaction+0x146>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ca0:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005ca4:	d1d8      	bne.n	8005c58 <SPI_EndRxTxTransaction+0xf8>
          __HAL_SPI_DISABLE(hspi);
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	e7d3      	b.n	8005c58 <SPI_EndRxTxTransaction+0xf8>
 8005cb0:	20002c00 	.word	0x20002c00

08005cb4 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	d074      	beq.n	8005da2 <HAL_SPI_Init+0xee>
{
 8005cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cbc:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cbe:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d053      	beq.n	8005d6c <HAL_SPI_Init+0xb8>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cca:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cce:	2200      	movs	r2, #0
 8005cd0:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cd2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d057      	beq.n	8005d8a <HAL_SPI_Init+0xd6>
  __HAL_SPI_DISABLE(hspi);
 8005cda:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cdc:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005cde:	2302      	movs	r3, #2
 8005ce0:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8005ce4:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ce6:	f5b7 6fe0 	cmp.w	r7, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 8005cea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cee:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cf0:	d842      	bhi.n	8005d78 <HAL_SPI_Init+0xc4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cf2:	d151      	bne.n	8005d98 <HAL_SPI_Init+0xe4>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cf4:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cf6:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cfa:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 8005cfe:	6862      	ldr	r2, [r4, #4]
 8005d00:	68a3      	ldr	r3, [r4, #8]
 8005d02:	69a6      	ldr	r6, [r4, #24]
 8005d04:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d08:	f402 7282 	and.w	r2, r2, #260	@ 0x104
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	6923      	ldr	r3, [r4, #16]
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	4313      	orrs	r3, r2
 8005d16:	6962      	ldr	r2, [r4, #20]
 8005d18:	f002 0201 	and.w	r2, r2, #1
 8005d1c:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d1e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005d20:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
 8005d24:	f003 0308 	and.w	r3, r3, #8
 8005d28:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d2c:	69e3      	ldr	r3, [r4, #28]
 8005d2e:	f003 0838 	and.w	r8, r3, #56	@ 0x38
 8005d32:	6a23      	ldr	r3, [r4, #32]
 8005d34:	f003 0780 	and.w	r7, r3, #128	@ 0x80
 8005d38:	f406 7300 	and.w	r3, r6, #512	@ 0x200
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	ea43 0308 	orr.w	r3, r3, r8
 8005d42:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d44:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d46:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d48:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d4c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d4e:	f000 0010 	and.w	r0, r0, #16
 8005d52:	ea4e 0306 	orr.w	r3, lr, r6
 8005d56:	4303      	orrs	r3, r0
 8005d58:	ea43 030c 	orr.w	r3, r3, ip
 8005d5c:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d5e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8005d60:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d62:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d64:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8005d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d6c:	6863      	ldr	r3, [r4, #4]
 8005d6e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d72:	d0aa      	beq.n	8005cca <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d74:	61e0      	str	r0, [r4, #28]
 8005d76:	e7a8      	b.n	8005cca <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d78:	f5b7 6f70 	cmp.w	r7, #3840	@ 0xf00
 8005d7c:	d113      	bne.n	8005da6 <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d7e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d80:	f04f 0c00 	mov.w	ip, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d84:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 8005d88:	e7b9      	b.n	8005cfe <HAL_SPI_Init+0x4a>
    HAL_SPI_MspInit(hspi);
 8005d8a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8005d8c:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8005d90:	f7fd f8aa 	bl	8002ee8 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d94:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005d96:	e7a0      	b.n	8005cda <HAL_SPI_Init+0x26>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d98:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d9c:	2500      	movs	r5, #0
 8005d9e:	62a5      	str	r5, [r4, #40]	@ 0x28
 8005da0:	e7ad      	b.n	8005cfe <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 8005da2:	2001      	movs	r0, #1
}
 8005da4:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005da6:	f04f 0c00 	mov.w	ip, #0
 8005daa:	e7f7      	b.n	8005d9c <HAL_SPI_Init+0xe8>

08005dac <HAL_SPI_TransmitReceive>:
{
 8005dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005db0:	4604      	mov	r4, r0
 8005db2:	4690      	mov	r8, r2
 8005db4:	461e      	mov	r6, r3
 8005db6:	460f      	mov	r7, r1
  tickstart = HAL_GetTick();
 8005db8:	f7fd faa0 	bl	80032fc <HAL_GetTick>
  tmp_state           = hspi->State;
 8005dbc:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 8005dc0:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005dc2:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8005dc4:	4605      	mov	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005dc6:	d00b      	beq.n	8005de0 <HAL_SPI_TransmitReceive+0x34>
 8005dc8:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8005dcc:	f040 808c 	bne.w	8005ee8 <HAL_SPI_TransmitReceive+0x13c>
 8005dd0:	b2d9      	uxtb	r1, r3
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005dd2:	68a3      	ldr	r3, [r4, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f040 8087 	bne.w	8005ee8 <HAL_SPI_TransmitReceive+0x13c>
 8005dda:	2904      	cmp	r1, #4
 8005ddc:	f040 8084 	bne.w	8005ee8 <HAL_SPI_TransmitReceive+0x13c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005de0:	2f00      	cmp	r7, #0
 8005de2:	f000 8169 	beq.w	80060b8 <HAL_SPI_TransmitReceive+0x30c>
 8005de6:	f1b8 0f00 	cmp.w	r8, #0
 8005dea:	f000 8165 	beq.w	80060b8 <HAL_SPI_TransmitReceive+0x30c>
 8005dee:	2e00      	cmp	r6, #0
 8005df0:	f000 8162 	beq.w	80060b8 <HAL_SPI_TransmitReceive+0x30c>
  __HAL_LOCK(hspi);
 8005df4:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d075      	beq.n	8005ee8 <HAL_SPI_TransmitReceive+0x13c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005dfc:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e00:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
  __HAL_LOCK(hspi);
 8005e04:	2101      	movs	r1, #1
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e06:	2b04      	cmp	r3, #4
  __HAL_LOCK(hspi);
 8005e08:	f884 105c 	strb.w	r1, [r4, #92]	@ 0x5c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005e0c:	68e1      	ldr	r1, [r4, #12]
  hspi->RxXferSize  = Size;
 8005e0e:	f8a4 6044 	strh.w	r6, [r4, #68]	@ 0x44
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e12:	bf1c      	itt	ne
 8005e14:	2305      	movne	r3, #5
 8005e16:	f884 305d 	strbne.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e1a:	2300      	movs	r3, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005e1c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e20:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 8005e22:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->RxXferCount = Size;
 8005e24:	f8a4 6046 	strh.w	r6, [r4, #70]	@ 0x46
  hspi->RxISR       = NULL;
 8005e28:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005e2a:	63a7      	str	r7, [r4, #56]	@ 0x38
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e2c:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8005e2e:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005e30:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005e32:	d95c      	bls.n	8005eee <HAL_SPI_TransmitReceive+0x142>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e34:	6859      	ldr	r1, [r3, #4]
 8005e36:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8005e3a:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e3c:	6819      	ldr	r1, [r3, #0]
 8005e3e:	0648      	lsls	r0, r1, #25
 8005e40:	d403      	bmi.n	8005e4a <HAL_SPI_TransmitReceive+0x9e>
    __HAL_SPI_ENABLE(hspi);
 8005e42:	6819      	ldr	r1, [r3, #0]
 8005e44:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8005e48:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e4a:	2a00      	cmp	r2, #0
 8005e4c:	f000 8100 	beq.w	8006050 <HAL_SPI_TransmitReceive+0x2a4>
 8005e50:	2e01      	cmp	r6, #1
 8005e52:	f000 80fd 	beq.w	8006050 <HAL_SPI_TransmitReceive+0x2a4>
 8005e56:	9b06      	ldr	r3, [sp, #24]
 8005e58:	3301      	adds	r3, #1
        txallowed = 1U;
 8005e5a:	f04f 0601 	mov.w	r6, #1
 8005e5e:	d028      	beq.n	8005eb2 <HAL_SPI_TransmitReceive+0x106>
 8005e60:	e09a      	b.n	8005f98 <HAL_SPI_TransmitReceive+0x1ec>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e62:	6822      	ldr	r2, [r4, #0]
 8005e64:	6893      	ldr	r3, [r2, #8]
 8005e66:	0799      	lsls	r1, r3, #30
 8005e68:	d50d      	bpl.n	8005e86 <HAL_SPI_TransmitReceive+0xda>
 8005e6a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	b153      	cbz	r3, 8005e86 <HAL_SPI_TransmitReceive+0xda>
 8005e70:	b146      	cbz	r6, 8005e84 <HAL_SPI_TransmitReceive+0xd8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e72:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005e74:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005e78:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8005e7a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e7c:	63a1      	str	r1, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8005e84:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e86:	6893      	ldr	r3, [r2, #8]
 8005e88:	f013 0301 	ands.w	r3, r3, #1
 8005e8c:	d00f      	beq.n	8005eae <HAL_SPI_TransmitReceive+0x102>
 8005e8e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8005e92:	b289      	uxth	r1, r1
 8005e94:	b159      	cbz	r1, 8005eae <HAL_SPI_TransmitReceive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e96:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8005e98:	68d2      	ldr	r2, [r2, #12]
 8005e9a:	f821 2b02 	strh.w	r2, [r1], #2
        txallowed = 1U;
 8005e9e:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 8005ea0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ea4:	6421      	str	r1, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005eae:	f7fd fa25 	bl	80032fc <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eb2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1d3      	bne.n	8005e62 <HAL_SPI_TransmitReceive+0xb6>
 8005eba:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1ce      	bne.n	8005e62 <HAL_SPI_TransmitReceive+0xb6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ec4:	9906      	ldr	r1, [sp, #24]
 8005ec6:	462a      	mov	r2, r5
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f7ff fe49 	bl	8005b60 <SPI_EndRxTxTransaction>
 8005ece:	2800      	cmp	r0, #0
 8005ed0:	f040 80ed 	bne.w	80060ae <HAL_SPI_TransmitReceive+0x302>
  hspi->State = HAL_SPI_STATE_READY;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005eda:	6e23      	ldr	r3, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 8005edc:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ee0:	1e18      	subs	r0, r3, #0
 8005ee2:	bf18      	it	ne
 8005ee4:	2001      	movne	r0, #1
 8005ee6:	e000      	b.n	8005eea <HAL_SPI_TransmitReceive+0x13e>
    return HAL_BUSY;
 8005ee8:	2002      	movs	r0, #2
}
 8005eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005eee:	2e01      	cmp	r6, #1
 8005ef0:	f000 8118 	beq.w	8006124 <HAL_SPI_TransmitReceive+0x378>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ef4:	6859      	ldr	r1, [r3, #4]
 8005ef6:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8005efa:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005efc:	6819      	ldr	r1, [r3, #0]
 8005efe:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8005f00:	bf5e      	ittt	pl
 8005f02:	6819      	ldrpl	r1, [r3, #0]
 8005f04:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
 8005f08:	6019      	strpl	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f0a:	b962      	cbnz	r2, 8005f26 <HAL_SPI_TransmitReceive+0x17a>
      if (hspi->TxXferCount > 1U)
 8005f0c:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8005f0e:	b292      	uxth	r2, r2
 8005f10:	2a01      	cmp	r2, #1
 8005f12:	f240 80d3 	bls.w	80060bc <HAL_SPI_TransmitReceive+0x310>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f16:	f837 2b02 	ldrh.w	r2, [r7], #2
 8005f1a:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8005f1c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f1e:	63a7      	str	r7, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005f20:	3b02      	subs	r3, #2
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8005f26:	9b06      	ldr	r3, [sp, #24]
 8005f28:	3301      	adds	r3, #1
        txallowed = 1U;
 8005f2a:	f04f 0601 	mov.w	r6, #1
 8005f2e:	d17d      	bne.n	800602c <HAL_SPI_TransmitReceive+0x280>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f30:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	b923      	cbnz	r3, 8005f40 <HAL_SPI_TransmitReceive+0x194>
 8005f36:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0c1      	beq.n	8005ec4 <HAL_SPI_TransmitReceive+0x118>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f40:	6822      	ldr	r2, [r4, #0]
 8005f42:	6893      	ldr	r3, [r2, #8]
 8005f44:	079f      	lsls	r7, r3, #30
 8005f46:	d506      	bpl.n	8005f56 <HAL_SPI_TransmitReceive+0x1aa>
 8005f48:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	b11b      	cbz	r3, 8005f56 <HAL_SPI_TransmitReceive+0x1aa>
 8005f4e:	2e00      	cmp	r6, #0
 8005f50:	f040 8093 	bne.w	800607a <HAL_SPI_TransmitReceive+0x2ce>
        txallowed = 1U;
 8005f54:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f56:	6893      	ldr	r3, [r2, #8]
 8005f58:	f013 0301 	ands.w	r3, r3, #1
 8005f5c:	d019      	beq.n	8005f92 <HAL_SPI_TransmitReceive+0x1e6>
 8005f5e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8005f62:	b289      	uxth	r1, r1
 8005f64:	b1a9      	cbz	r1, 8005f92 <HAL_SPI_TransmitReceive+0x1e6>
        if (hspi->RxXferCount > 1U)
 8005f66:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f6a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 8005f6c:	b280      	uxth	r0, r0
 8005f6e:	2801      	cmp	r0, #1
 8005f70:	d977      	bls.n	8006062 <HAL_SPI_TransmitReceive+0x2b6>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f72:	68d0      	ldr	r0, [r2, #12]
 8005f74:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f78:	6421      	str	r1, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005f7a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8005f7e:	3902      	subs	r1, #2
 8005f80:	b289      	uxth	r1, r1
 8005f82:	f8a4 1046 	strh.w	r1, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005f86:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8005f8a:	b289      	uxth	r1, r1
 8005f8c:	2901      	cmp	r1, #1
 8005f8e:	d935      	bls.n	8005ffc <HAL_SPI_TransmitReceive+0x250>
        txallowed = 1U;
 8005f90:	461e      	mov	r6, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f92:	f7fd f9b3 	bl	80032fc <HAL_GetTick>
 8005f96:	e7cb      	b.n	8005f30 <HAL_SPI_TransmitReceive+0x184>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f98:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	b923      	cbnz	r3, 8005fa8 <HAL_SPI_TransmitReceive+0x1fc>
 8005f9e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d08d      	beq.n	8005ec4 <HAL_SPI_TransmitReceive+0x118>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fa8:	6822      	ldr	r2, [r4, #0]
 8005faa:	6893      	ldr	r3, [r2, #8]
 8005fac:	0798      	lsls	r0, r3, #30
 8005fae:	d50d      	bpl.n	8005fcc <HAL_SPI_TransmitReceive+0x220>
 8005fb0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	b153      	cbz	r3, 8005fcc <HAL_SPI_TransmitReceive+0x220>
 8005fb6:	b146      	cbz	r6, 8005fca <HAL_SPI_TransmitReceive+0x21e>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005fb8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005fba:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005fbe:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8005fc0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fc2:	63a1      	str	r1, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
{
 8005fca:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fcc:	6893      	ldr	r3, [r2, #8]
 8005fce:	f013 0301 	ands.w	r3, r3, #1
 8005fd2:	d004      	beq.n	8005fde <HAL_SPI_TransmitReceive+0x232>
 8005fd4:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8005fd8:	b289      	uxth	r1, r1
 8005fda:	2900      	cmp	r1, #0
 8005fdc:	d178      	bne.n	80060d0 <HAL_SPI_TransmitReceive+0x324>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005fde:	f7fd f98d 	bl	80032fc <HAL_GetTick>
 8005fe2:	9b06      	ldr	r3, [sp, #24]
 8005fe4:	1b40      	subs	r0, r0, r5
 8005fe6:	4298      	cmp	r0, r3
 8005fe8:	d3d6      	bcc.n	8005f98 <HAL_SPI_TransmitReceive+0x1ec>
        hspi->State = HAL_SPI_STATE_READY;
 8005fea:	2301      	movs	r3, #1
 8005fec:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005ff6:	2003      	movs	r0, #3
}
 8005ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ffc:	6851      	ldr	r1, [r2, #4]
 8005ffe:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 8006002:	6051      	str	r1, [r2, #4]
 8006004:	e7c4      	b.n	8005f90 <HAL_SPI_TransmitReceive+0x1e4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006006:	2e00      	cmp	r6, #0
 8006008:	f040 80a6 	bne.w	8006158 <HAL_SPI_TransmitReceive+0x3ac>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800600c:	2600      	movs	r6, #0
 800600e:	6893      	ldr	r3, [r2, #8]
 8006010:	f013 0301 	ands.w	r3, r3, #1
 8006014:	d004      	beq.n	8006020 <HAL_SPI_TransmitReceive+0x274>
 8006016:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 800601a:	b289      	uxth	r1, r1
 800601c:	2900      	cmp	r1, #0
 800601e:	d164      	bne.n	80060ea <HAL_SPI_TransmitReceive+0x33e>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006020:	f7fd f96c 	bl	80032fc <HAL_GetTick>
 8006024:	9b06      	ldr	r3, [sp, #24]
 8006026:	1b40      	subs	r0, r0, r5
 8006028:	4298      	cmp	r0, r3
 800602a:	d2de      	bcs.n	8005fea <HAL_SPI_TransmitReceive+0x23e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800602c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800602e:	b29b      	uxth	r3, r3
 8006030:	b92b      	cbnz	r3, 800603e <HAL_SPI_TransmitReceive+0x292>
 8006032:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8006036:	b29b      	uxth	r3, r3
 8006038:	2b00      	cmp	r3, #0
 800603a:	f43f af43 	beq.w	8005ec4 <HAL_SPI_TransmitReceive+0x118>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800603e:	6822      	ldr	r2, [r4, #0]
 8006040:	6893      	ldr	r3, [r2, #8]
 8006042:	079b      	lsls	r3, r3, #30
 8006044:	d5e3      	bpl.n	800600e <HAL_SPI_TransmitReceive+0x262>
 8006046:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8006048:	b29b      	uxth	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0df      	beq.n	800600e <HAL_SPI_TransmitReceive+0x262>
 800604e:	e7da      	b.n	8006006 <HAL_SPI_TransmitReceive+0x25a>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006050:	f837 2b02 	ldrh.w	r2, [r7], #2
 8006054:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8006056:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006058:	63a7      	str	r7, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 800605a:	3b01      	subs	r3, #1
 800605c:	b29b      	uxth	r3, r3
 800605e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8006060:	e6f9      	b.n	8005e56 <HAL_SPI_TransmitReceive+0xaa>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006062:	7b12      	ldrb	r2, [r2, #12]
 8006064:	700a      	strb	r2, [r1, #0]
          hspi->RxXferCount--;
 8006066:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
          hspi->pRxBuffPtr++;
 800606a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 800606c:	3a01      	subs	r2, #1
          hspi->pRxBuffPtr++;
 800606e:	3101      	adds	r1, #1
          hspi->RxXferCount--;
 8006070:	b292      	uxth	r2, r2
          hspi->pRxBuffPtr++;
 8006072:	6421      	str	r1, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8006074:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 8006078:	e78a      	b.n	8005f90 <HAL_SPI_TransmitReceive+0x1e4>
        if (hspi->TxXferCount > 1U)
 800607a:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800607c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 800607e:	b289      	uxth	r1, r1
 8006080:	2901      	cmp	r1, #1
 8006082:	d908      	bls.n	8006096 <HAL_SPI_TransmitReceive+0x2ea>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006084:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006088:	60d1      	str	r1, [r2, #12]
          hspi->TxXferCount -= 2U;
 800608a:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800608c:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800608e:	1e8b      	subs	r3, r1, #2
 8006090:	b29b      	uxth	r3, r3
 8006092:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8006094:	e75e      	b.n	8005f54 <HAL_SPI_TransmitReceive+0x1a8>
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800609a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 800609c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800609e:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 80060a0:	1c51      	adds	r1, r2, #1
          hspi->TxXferCount--;
 80060a2:	b29b      	uxth	r3, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060a4:	6822      	ldr	r2, [r4, #0]
          hspi->pTxBuffPtr++;
 80060a6:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 80060a8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060aa:	2600      	movs	r6, #0
 80060ac:	e753      	b.n	8005f56 <HAL_SPI_TransmitReceive+0x1aa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060ae:	2220      	movs	r2, #32
    __HAL_UNLOCK(hspi);
 80060b0:	2300      	movs	r3, #0
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060b2:	6622      	str	r2, [r4, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80060b4:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 80060b8:	2001      	movs	r0, #1
 80060ba:	e716      	b.n	8005eea <HAL_SPI_TransmitReceive+0x13e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80060bc:	783a      	ldrb	r2, [r7, #0]
 80060be:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80060c0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr++;
 80060c2:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80060c4:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 80060c6:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80060c8:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 80060ca:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80060cc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80060ce:	e72a      	b.n	8005f26 <HAL_SPI_TransmitReceive+0x17a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060d0:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 80060d2:	68d2      	ldr	r2, [r2, #12]
 80060d4:	f821 2b02 	strh.w	r2, [r1], #2
        txallowed = 1U;
 80060d8:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 80060da:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060de:	6421      	str	r1, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80060e0:	3b01      	subs	r3, #1
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 80060e8:	e779      	b.n	8005fde <HAL_SPI_TransmitReceive+0x232>
        if (hspi->RxXferCount > 1U)
 80060ea:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060ee:	6c21      	ldr	r1, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 80060f0:	b280      	uxth	r0, r0
 80060f2:	2801      	cmp	r0, #1
 80060f4:	d923      	bls.n	800613e <HAL_SPI_TransmitReceive+0x392>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060f6:	68d0      	ldr	r0, [r2, #12]
 80060f8:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80060fc:	6421      	str	r1, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80060fe:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8006102:	3902      	subs	r1, #2
 8006104:	b289      	uxth	r1, r1
 8006106:	f8a4 1046 	strh.w	r1, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800610a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 800610e:	b289      	uxth	r1, r1
 8006110:	2901      	cmp	r1, #1
 8006112:	d901      	bls.n	8006118 <HAL_SPI_TransmitReceive+0x36c>
        txallowed = 1U;
 8006114:	461e      	mov	r6, r3
 8006116:	e783      	b.n	8006020 <HAL_SPI_TransmitReceive+0x274>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006118:	6851      	ldr	r1, [r2, #4]
 800611a:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 800611e:	6051      	str	r1, [r2, #4]
        txallowed = 1U;
 8006120:	461e      	mov	r6, r3
 8006122:	e77d      	b.n	8006020 <HAL_SPI_TransmitReceive+0x274>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800612a:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	0656      	lsls	r6, r2, #25
 8006130:	f53f aeec 	bmi.w	8005f0c <HAL_SPI_TransmitReceive+0x160>
    __HAL_SPI_ENABLE(hspi);
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800613a:	601a      	str	r2, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800613c:	e6e6      	b.n	8005f0c <HAL_SPI_TransmitReceive+0x160>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800613e:	7b12      	ldrb	r2, [r2, #12]
 8006140:	700a      	strb	r2, [r1, #0]
          hspi->RxXferCount--;
 8006142:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
          hspi->pRxBuffPtr++;
 8006146:	6c21      	ldr	r1, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8006148:	3a01      	subs	r2, #1
          hspi->pRxBuffPtr++;
 800614a:	3101      	adds	r1, #1
          hspi->RxXferCount--;
 800614c:	b292      	uxth	r2, r2
          hspi->pRxBuffPtr++;
 800614e:	6421      	str	r1, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8006150:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
        txallowed = 1U;
 8006154:	461e      	mov	r6, r3
 8006156:	e763      	b.n	8006020 <HAL_SPI_TransmitReceive+0x274>
        if (hspi->TxXferCount > 1U)
 8006158:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800615a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 800615c:	b29b      	uxth	r3, r3
 800615e:	2b01      	cmp	r3, #1
 8006160:	d909      	bls.n	8006176 <HAL_SPI_TransmitReceive+0x3ca>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006162:	460b      	mov	r3, r1
 8006164:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006168:	60d1      	str	r1, [r2, #12]
          hspi->TxXferCount -= 2U;
 800616a:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800616c:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800616e:	1e8b      	subs	r3, r1, #2
 8006170:	b29b      	uxth	r3, r3
 8006172:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8006174:	e74a      	b.n	800600c <HAL_SPI_TransmitReceive+0x260>
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006176:	780b      	ldrb	r3, [r1, #0]
 8006178:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800617a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 800617c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 800617e:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8006180:	1c51      	adds	r1, r2, #1
          hspi->TxXferCount--;
 8006182:	b29b      	uxth	r3, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006184:	6822      	ldr	r2, [r4, #0]
          hspi->pTxBuffPtr++;
 8006186:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8006188:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800618a:	e73f      	b.n	800600c <HAL_SPI_TransmitReceive+0x260>

0800618c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800618c:	2800      	cmp	r0, #0
 800618e:	f000 808c 	beq.w	80062aa <HAL_TIM_Base_Init+0x11e>
{
 8006192:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006194:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006198:	4604      	mov	r4, r0
 800619a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d078      	beq.n	8006294 <HAL_TIM_Base_Init+0x108>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061a2:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061a4:	4942      	ldr	r1, [pc, #264]	@ (80062b0 <HAL_TIM_Base_Init+0x124>)
  htim->State = HAL_TIM_STATE_BUSY;
 80061a6:	2202      	movs	r2, #2
 80061a8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061ac:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 80061ae:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061b0:	d05c      	beq.n	800626c <HAL_TIM_Base_Init+0xe0>
 80061b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061b6:	d024      	beq.n	8006202 <HAL_TIM_Base_Init+0x76>
 80061b8:	f5a1 3194 	sub.w	r1, r1, #75776	@ 0x12800
 80061bc:	428b      	cmp	r3, r1
 80061be:	d020      	beq.n	8006202 <HAL_TIM_Base_Init+0x76>
 80061c0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80061c4:	428b      	cmp	r3, r1
 80061c6:	d01c      	beq.n	8006202 <HAL_TIM_Base_Init+0x76>
 80061c8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80061cc:	428b      	cmp	r3, r1
 80061ce:	d018      	beq.n	8006202 <HAL_TIM_Base_Init+0x76>
 80061d0:	f501 3194 	add.w	r1, r1, #75776	@ 0x12800
 80061d4:	428b      	cmp	r3, r1
 80061d6:	d049      	beq.n	800626c <HAL_TIM_Base_Init+0xe0>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061d8:	4936      	ldr	r1, [pc, #216]	@ (80062b4 <HAL_TIM_Base_Init+0x128>)
 80061da:	428b      	cmp	r3, r1
 80061dc:	d05f      	beq.n	800629e <HAL_TIM_Base_Init+0x112>
 80061de:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80061e2:	428b      	cmp	r3, r1
 80061e4:	d05b      	beq.n	800629e <HAL_TIM_Base_Init+0x112>
 80061e6:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80061ea:	428b      	cmp	r3, r1
 80061ec:	d057      	beq.n	800629e <HAL_TIM_Base_Init+0x112>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061ee:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061f0:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061f2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80061f8:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80061fa:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061fc:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80061fe:	6299      	str	r1, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006200:	e010      	b.n	8006224 <HAL_TIM_Base_Init+0x98>
    tmpcr1 |= Structure->CounterMode;
 8006202:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006204:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006206:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800620a:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800620c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006210:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006212:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006214:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006218:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800621a:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 800621c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800621e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006220:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006222:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006224:	2201      	movs	r2, #1
 8006226:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006228:	691a      	ldr	r2, [r3, #16]
 800622a:	07d2      	lsls	r2, r2, #31
 800622c:	d503      	bpl.n	8006236 <HAL_TIM_Base_Init+0xaa>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800622e:	691a      	ldr	r2, [r3, #16]
 8006230:	f022 0201 	bic.w	r2, r2, #1
 8006234:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006236:	2301      	movs	r3, #1
 8006238:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800623c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006240:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8006244:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006248:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800624c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006250:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006254:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006258:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800625c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8006260:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8006264:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8006268:	2000      	movs	r0, #0
}
 800626a:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800626c:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800626e:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006270:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006274:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8006276:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800627a:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800627c:	69a1      	ldr	r1, [r4, #24]
 800627e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006282:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8006284:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006286:	68e2      	ldr	r2, [r4, #12]
 8006288:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800628a:	6862      	ldr	r2, [r4, #4]
 800628c:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800628e:	6962      	ldr	r2, [r4, #20]
 8006290:	631a      	str	r2, [r3, #48]	@ 0x30
 8006292:	e7c7      	b.n	8006224 <HAL_TIM_Base_Init+0x98>
    htim->Lock = HAL_UNLOCKED;
 8006294:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8006298:	f7fc ff2c 	bl	80030f4 <HAL_TIM_Base_MspInit>
 800629c:	e781      	b.n	80061a2 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800629e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062a0:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80062a2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062a6:	4302      	orrs	r2, r0
 80062a8:	e7e9      	b.n	800627e <HAL_TIM_Base_Init+0xf2>
    return HAL_ERROR;
 80062aa:	2001      	movs	r0, #1
}
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	40012c00 	.word	0x40012c00
 80062b4:	40014000 	.word	0x40014000

080062b8 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80062b8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d123      	bne.n	8006308 <HAL_TIM_Base_Start+0x50>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c0:	6803      	ldr	r3, [r0, #0]
 80062c2:	4a17      	ldr	r2, [pc, #92]	@ (8006320 <HAL_TIM_Base_Start+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 80062c4:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c6:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 80062c8:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062cc:	d01e      	beq.n	800630c <HAL_TIM_Base_Start+0x54>
 80062ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062d2:	d01b      	beq.n	800630c <HAL_TIM_Base_Start+0x54>
 80062d4:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80062d8:	4293      	cmp	r3, r2
 80062da:	d017      	beq.n	800630c <HAL_TIM_Base_Start+0x54>
 80062dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d013      	beq.n	800630c <HAL_TIM_Base_Start+0x54>
 80062e4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d00f      	beq.n	800630c <HAL_TIM_Base_Start+0x54>
 80062ec:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d00b      	beq.n	800630c <HAL_TIM_Base_Start+0x54>
 80062f4:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d007      	beq.n	800630c <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	f042 0201 	orr.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8006304:	2000      	movs	r0, #0
 8006306:	4770      	bx	lr
    return HAL_ERROR;
 8006308:	2001      	movs	r0, #1
}
 800630a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800630c:	6899      	ldr	r1, [r3, #8]
 800630e:	4a05      	ldr	r2, [pc, #20]	@ (8006324 <HAL_TIM_Base_Start+0x6c>)
 8006310:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006312:	2a06      	cmp	r2, #6
 8006314:	d0f6      	beq.n	8006304 <HAL_TIM_Base_Start+0x4c>
 8006316:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800631a:	d1ef      	bne.n	80062fc <HAL_TIM_Base_Start+0x44>
  return HAL_OK;
 800631c:	2000      	movs	r0, #0
 800631e:	4770      	bx	lr
 8006320:	40012c00 	.word	0x40012c00
 8006324:	00010007 	.word	0x00010007

08006328 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006328:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800632c:	2a01      	cmp	r2, #1
 800632e:	d06c      	beq.n	800640a <HAL_TIM_ConfigClockSource+0xe2>
 8006330:	4603      	mov	r3, r0
{
 8006332:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 8006334:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006336:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 8006338:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800633a:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  __HAL_LOCK(htim);
 800633e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8006342:	6895      	ldr	r5, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006344:	4c4c      	ldr	r4, [pc, #304]	@ (8006478 <HAL_TIM_ConfigClockSource+0x150>)
 8006346:	402c      	ands	r4, r5
  htim->Instance->SMCR = tmpsmcr;
 8006348:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800634a:	680c      	ldr	r4, [r1, #0]
 800634c:	2c60      	cmp	r4, #96	@ 0x60
 800634e:	d076      	beq.n	800643e <HAL_TIM_ConfigClockSource+0x116>
 8006350:	d811      	bhi.n	8006376 <HAL_TIM_ConfigClockSource+0x4e>
 8006352:	2c40      	cmp	r4, #64	@ 0x40
 8006354:	d05b      	beq.n	800640e <HAL_TIM_ConfigClockSource+0xe6>
 8006356:	d82e      	bhi.n	80063b6 <HAL_TIM_ConfigClockSource+0x8e>
 8006358:	2c20      	cmp	r4, #32
 800635a:	d004      	beq.n	8006366 <HAL_TIM_ConfigClockSource+0x3e>
 800635c:	f200 8088 	bhi.w	8006470 <HAL_TIM_ConfigClockSource+0x148>
 8006360:	f034 0110 	bics.w	r1, r4, #16
 8006364:	d11f      	bne.n	80063a6 <HAL_TIM_ConfigClockSource+0x7e>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006366:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006368:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800636c:	4321      	orrs	r1, r4
 800636e:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006372:	6091      	str	r1, [r2, #8]
}
 8006374:	e016      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x7c>
  switch (sClockSourceConfig->ClockSource)
 8006376:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 800637a:	d013      	beq.n	80063a4 <HAL_TIM_ConfigClockSource+0x7c>
 800637c:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8006380:	d033      	beq.n	80063ea <HAL_TIM_ConfigClockSource+0xc2>
 8006382:	2c70      	cmp	r4, #112	@ 0x70
 8006384:	d10f      	bne.n	80063a6 <HAL_TIM_ConfigClockSource+0x7e>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006386:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800638a:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800638c:	4328      	orrs	r0, r5
 800638e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006390:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006394:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8006398:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800639a:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800639c:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800639e:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80063a2:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80063a4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80063a6:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80063a8:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80063aa:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80063ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80063b2:	bc30      	pop	{r4, r5}
 80063b4:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80063b6:	2c50      	cmp	r4, #80	@ 0x50
 80063b8:	d1f5      	bne.n	80063a6 <HAL_TIM_ConfigClockSource+0x7e>
                               sClockSourceConfig->ClockPolarity,
 80063ba:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80063bc:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 80063be:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063c0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80063c4:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063c6:	6a11      	ldr	r1, [r2, #32]
 80063c8:	f021 0101 	bic.w	r1, r1, #1
 80063cc:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ce:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063d0:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063d4:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80063d8:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80063da:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80063dc:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80063de:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063e2:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80063e6:	6091      	str	r1, [r2, #8]
}
 80063e8:	e7dc      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x7c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063ea:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80063ee:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063f0:	4328      	orrs	r0, r5
 80063f2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063f4:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063f8:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80063fc:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 80063fe:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006400:	6891      	ldr	r1, [r2, #8]
 8006402:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8006406:	6091      	str	r1, [r2, #8]
      break;
 8006408:	e7cc      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x7c>
  __HAL_LOCK(htim);
 800640a:	2002      	movs	r0, #2
}
 800640c:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 800640e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006410:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8006412:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006414:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8006418:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800641a:	6a11      	ldr	r1, [r2, #32]
 800641c:	f021 0101 	bic.w	r1, r1, #1
 8006420:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006422:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006424:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006428:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800642c:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 800642e:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006430:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006432:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006436:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 800643a:	6091      	str	r1, [r2, #8]
}
 800643c:	e7b2      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x7c>
                               sClockSourceConfig->ClockPolarity,
 800643e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006440:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8006442:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006444:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006448:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800644c:	6a10      	ldr	r0, [r2, #32]
 800644e:	f020 0010 	bic.w	r0, r0, #16
 8006452:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006454:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006456:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800645a:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800645e:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8006460:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006462:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006464:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006468:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 800646c:	6091      	str	r1, [r2, #8]
}
 800646e:	e799      	b.n	80063a4 <HAL_TIM_ConfigClockSource+0x7c>
  switch (sClockSourceConfig->ClockSource)
 8006470:	2c30      	cmp	r4, #48	@ 0x30
 8006472:	f43f af78 	beq.w	8006366 <HAL_TIM_ConfigClockSource+0x3e>
 8006476:	e796      	b.n	80063a6 <HAL_TIM_ConfigClockSource+0x7e>
 8006478:	fffe0088 	.word	0xfffe0088

0800647c <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop

08006480 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop

08006484 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop

08006488 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop

0800648c <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop

08006490 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8006490:	6803      	ldr	r3, [r0, #0]
{
 8006492:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8006494:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006496:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006498:	07aa      	lsls	r2, r5, #30
{
 800649a:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800649c:	d501      	bpl.n	80064a2 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800649e:	07b1      	lsls	r1, r6, #30
 80064a0:	d452      	bmi.n	8006548 <HAL_TIM_IRQHandler+0xb8>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80064a2:	076b      	lsls	r3, r5, #29
 80064a4:	d501      	bpl.n	80064aa <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80064a6:	0770      	lsls	r0, r6, #29
 80064a8:	d43b      	bmi.n	8006522 <HAL_TIM_IRQHandler+0x92>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80064aa:	0729      	lsls	r1, r5, #28
 80064ac:	d501      	bpl.n	80064b2 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80064ae:	0732      	lsls	r2, r6, #28
 80064b0:	d425      	bmi.n	80064fe <HAL_TIM_IRQHandler+0x6e>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80064b2:	06e8      	lsls	r0, r5, #27
 80064b4:	d501      	bpl.n	80064ba <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80064b6:	06f1      	lsls	r1, r6, #27
 80064b8:	d411      	bmi.n	80064de <HAL_TIM_IRQHandler+0x4e>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80064ba:	07ea      	lsls	r2, r5, #31
 80064bc:	d501      	bpl.n	80064c2 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80064be:	07f3      	lsls	r3, r6, #31
 80064c0:	d464      	bmi.n	800658c <HAL_TIM_IRQHandler+0xfc>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80064c2:	f415 5f02 	tst.w	r5, #8320	@ 0x2080
 80064c6:	d04c      	beq.n	8006562 <HAL_TIM_IRQHandler+0xd2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80064c8:	0630      	lsls	r0, r6, #24
 80064ca:	d467      	bmi.n	800659c <HAL_TIM_IRQHandler+0x10c>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80064cc:	0668      	lsls	r0, r5, #25
 80064ce:	d501      	bpl.n	80064d4 <HAL_TIM_IRQHandler+0x44>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80064d0:	0671      	lsls	r1, r6, #25
 80064d2:	d46d      	bmi.n	80065b0 <HAL_TIM_IRQHandler+0x120>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80064d4:	06aa      	lsls	r2, r5, #26
 80064d6:	d501      	bpl.n	80064dc <HAL_TIM_IRQHandler+0x4c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80064d8:	06b3      	lsls	r3, r6, #26
 80064da:	d44e      	bmi.n	800657a <HAL_TIM_IRQHandler+0xea>
}
 80064dc:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	f06f 0210 	mvn.w	r2, #16
 80064e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064e6:	2208      	movs	r2, #8
 80064e8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064ea:	69db      	ldr	r3, [r3, #28]
 80064ec:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80064f0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064f2:	d071      	beq.n	80065d8 <HAL_TIM_IRQHandler+0x148>
        HAL_TIM_IC_CaptureCallback(htim);
 80064f4:	f7ff ffc6 	bl	8006484 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064f8:	2300      	movs	r3, #0
 80064fa:	7723      	strb	r3, [r4, #28]
 80064fc:	e7dd      	b.n	80064ba <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	f06f 0208 	mvn.w	r2, #8
 8006504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006506:	2204      	movs	r2, #4
 8006508:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800650e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006510:	d15f      	bne.n	80065d2 <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006512:	f7ff ffb5 	bl	8006480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006516:	4620      	mov	r0, r4
 8006518:	f7ff ffb6 	bl	8006488 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800651c:	2300      	movs	r3, #0
 800651e:	7723      	strb	r3, [r4, #28]
 8006520:	e7c7      	b.n	80064b2 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006522:	6823      	ldr	r3, [r4, #0]
 8006524:	f06f 0204 	mvn.w	r2, #4
 8006528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800652a:	2202      	movs	r2, #2
 800652c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8006534:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006536:	d149      	bne.n	80065cc <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006538:	f7ff ffa2 	bl	8006480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800653c:	4620      	mov	r0, r4
 800653e:	f7ff ffa3 	bl	8006488 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006542:	2300      	movs	r3, #0
 8006544:	7723      	strb	r3, [r4, #28]
 8006546:	e7b0      	b.n	80064aa <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006548:	f06f 0202 	mvn.w	r2, #2
 800654c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800654e:	2201      	movs	r2, #1
 8006550:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	079a      	lsls	r2, r3, #30
 8006556:	d033      	beq.n	80065c0 <HAL_TIM_IRQHandler+0x130>
          HAL_TIM_IC_CaptureCallback(htim);
 8006558:	f7ff ff94 	bl	8006484 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655c:	2300      	movs	r3, #0
 800655e:	7723      	strb	r3, [r4, #28]
 8006560:	e79f      	b.n	80064a2 <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006562:	05ea      	lsls	r2, r5, #23
 8006564:	d5b2      	bpl.n	80064cc <HAL_TIM_IRQHandler+0x3c>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006566:	0633      	lsls	r3, r6, #24
 8006568:	d5b0      	bpl.n	80064cc <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006570:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8006572:	4620      	mov	r0, r4
 8006574:	f000 f88a 	bl	800668c <HAL_TIMEx_Break2Callback>
 8006578:	e7a8      	b.n	80064cc <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8006580:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006582:	611a      	str	r2, [r3, #16]
}
 8006584:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8006588:	f000 b87c 	b.w	8006684 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	f06f 0201 	mvn.w	r2, #1
 8006592:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006594:	4620      	mov	r0, r4
 8006596:	f7ff ff71 	bl	800647c <HAL_TIM_PeriodElapsedCallback>
 800659a:	e792      	b.n	80064c2 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80065a2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80065a4:	4620      	mov	r0, r4
 80065a6:	f000 f86f 	bl	8006688 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80065aa:	05e9      	lsls	r1, r5, #23
 80065ac:	d58e      	bpl.n	80064cc <HAL_TIM_IRQHandler+0x3c>
 80065ae:	e7dc      	b.n	800656a <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80065b0:	6823      	ldr	r3, [r4, #0]
 80065b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80065b6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80065b8:	4620      	mov	r0, r4
 80065ba:	f7ff ff67 	bl	800648c <HAL_TIM_TriggerCallback>
 80065be:	e789      	b.n	80064d4 <HAL_TIM_IRQHandler+0x44>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065c0:	f7ff ff5e 	bl	8006480 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c4:	4620      	mov	r0, r4
 80065c6:	f7ff ff5f 	bl	8006488 <HAL_TIM_PWM_PulseFinishedCallback>
 80065ca:	e7c7      	b.n	800655c <HAL_TIM_IRQHandler+0xcc>
        HAL_TIM_IC_CaptureCallback(htim);
 80065cc:	f7ff ff5a 	bl	8006484 <HAL_TIM_IC_CaptureCallback>
 80065d0:	e7b7      	b.n	8006542 <HAL_TIM_IRQHandler+0xb2>
        HAL_TIM_IC_CaptureCallback(htim);
 80065d2:	f7ff ff57 	bl	8006484 <HAL_TIM_IC_CaptureCallback>
 80065d6:	e7a1      	b.n	800651c <HAL_TIM_IRQHandler+0x8c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d8:	f7ff ff52 	bl	8006480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065dc:	4620      	mov	r0, r4
 80065de:	f7ff ff53 	bl	8006488 <HAL_TIM_PWM_PulseFinishedCallback>
 80065e2:	e789      	b.n	80064f8 <HAL_TIM_IRQHandler+0x68>

080065e4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065e4:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80065e8:	2a01      	cmp	r2, #1
 80065ea:	d044      	beq.n	8006676 <HAL_TIMEx_MasterConfigSynchronization+0x92>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065ec:	6802      	ldr	r2, [r0, #0]
{
 80065ee:	b470      	push	{r4, r5, r6}
 80065f0:	4603      	mov	r3, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065f2:	4e22      	ldr	r6, [pc, #136]	@ (800667c <HAL_TIMEx_MasterConfigSynchronization+0x98>)
  htim->State = HAL_TIM_STATE_BUSY;
 80065f4:	2002      	movs	r0, #2
 80065f6:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065fa:	42b2      	cmp	r2, r6
  tmpcr2 = htim->Instance->CR2;
 80065fc:	6850      	ldr	r0, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065fe:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8006600:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006602:	d026      	beq.n	8006652 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8006604:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8006608:	42b2      	cmp	r2, r6
 800660a:	d02b      	beq.n	8006664 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 800660c:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006610:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006612:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8006616:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006618:	d00e      	beq.n	8006638 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 800661a:	4819      	ldr	r0, [pc, #100]	@ (8006680 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 800661c:	4282      	cmp	r2, r0
 800661e:	d00b      	beq.n	8006638 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006620:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8006624:	4282      	cmp	r2, r0
 8006626:	d007      	beq.n	8006638 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006628:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800662c:	4282      	cmp	r2, r0
 800662e:	d003      	beq.n	8006638 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006630:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8006634:	4282      	cmp	r2, r0
 8006636:	d104      	bne.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006638:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800663a:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800663e:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006640:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8006642:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006644:	2201      	movs	r2, #1
 8006646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800664a:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 800664e:	bc70      	pop	{r4, r5, r6}
 8006650:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006652:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006654:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006658:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 800665a:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800665e:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8006660:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006662:	e7e9      	b.n	8006638 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006664:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006666:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800666a:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 800666c:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006670:	4305      	orrs	r5, r0
  htim->Instance->CR2 = tmpcr2;
 8006672:	6055      	str	r5, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006674:	e7e0      	b.n	8006638 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  __HAL_LOCK(htim);
 8006676:	2002      	movs	r0, #2
}
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40012c00 	.word	0x40012c00
 8006680:	40000400 	.word	0x40000400

08006684 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8006684:	4770      	bx	lr
 8006686:	bf00      	nop

08006688 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop

0800668c <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop

08006690 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006694:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006696:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 8006698:	2820      	cmp	r0, #32
 800669a:	d15c      	bne.n	8006756 <HAL_UART_Transmit+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800669c:	460d      	mov	r5, r1
 800669e:	b109      	cbz	r1, 80066a4 <HAL_UART_Transmit+0x14>
 80066a0:	4616      	mov	r6, r2
 80066a2:	b912      	cbnz	r2, 80066aa <HAL_UART_Transmit+0x1a>
    {
      return  HAL_ERROR;
 80066a4:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 80066a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066aa:	461f      	mov	r7, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ac:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066b0:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b2:	f8c4 8084 	str.w	r8, [r4, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066b6:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 80066b8:	f7fc fe20 	bl	80032fc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066bc:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80066be:	f8a4 6050 	strh.w	r6, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 80066c6:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 80066c8:	f8a4 6052 	strh.w	r6, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066cc:	d046      	beq.n	800675c <HAL_UART_Transmit+0xcc>
    while (huart->TxXferCount > 0U)
 80066ce:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066d2:	6822      	ldr	r2, [r4, #0]
    while (huart->TxXferCount > 0U)
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d04b      	beq.n	8006772 <HAL_UART_Transmit+0xe2>
 80066da:	1c7b      	adds	r3, r7, #1
 80066dc:	d129      	bne.n	8006732 <HAL_UART_Transmit+0xa2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066de:	69d3      	ldr	r3, [r2, #28]
 80066e0:	061f      	lsls	r7, r3, #24
 80066e2:	d5fc      	bpl.n	80066de <HAL_UART_Transmit+0x4e>
      if (pdata8bits == NULL)
 80066e4:	2d00      	cmp	r5, #0
 80066e6:	d031      	beq.n	800674c <HAL_UART_Transmit+0xbc>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80066e8:	f815 3b01 	ldrb.w	r3, [r5], #1
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066ec:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80066ee:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 80066f2:	3b01      	subs	r3, #1
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80066fa:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 80066fe:	b29b      	uxth	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1ec      	bne.n	80066de <HAL_UART_Transmit+0x4e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006704:	69d3      	ldr	r3, [r2, #28]
 8006706:	0659      	lsls	r1, r3, #25
 8006708:	d5fc      	bpl.n	8006704 <HAL_UART_Transmit+0x74>
    huart->gState = HAL_UART_STATE_READY;
 800670a:	2320      	movs	r3, #32
 800670c:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 800670e:	2000      	movs	r0, #0
}
 8006710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 8006714:	2d00      	cmp	r5, #0
 8006716:	d03f      	beq.n	8006798 <HAL_UART_Transmit+0x108>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006718:	f815 3b01 	ldrb.w	r3, [r5], #1
 800671c:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800671e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 8006722:	3b01      	subs	r3, #1
 8006724:	b29b      	uxth	r3, r3
 8006726:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800672a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 800672e:	b29b      	uxth	r3, r3
 8006730:	b30b      	cbz	r3, 8006776 <HAL_UART_Transmit+0xe6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006732:	69d3      	ldr	r3, [r2, #28]
 8006734:	061e      	lsls	r6, r3, #24
 8006736:	d4ed      	bmi.n	8006714 <HAL_UART_Transmit+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006738:	f7fc fde0 	bl	80032fc <HAL_GetTick>
 800673c:	eba0 0309 	sub.w	r3, r0, r9
 8006740:	429f      	cmp	r7, r3
 8006742:	d311      	bcc.n	8006768 <HAL_UART_Transmit+0xd8>
 8006744:	b187      	cbz	r7, 8006768 <HAL_UART_Transmit+0xd8>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006746:	6822      	ldr	r2, [r4, #0]
 8006748:	6813      	ldr	r3, [r2, #0]
 800674a:	e7f2      	b.n	8006732 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800674c:	f838 3b02 	ldrh.w	r3, [r8], #2
 8006750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006754:	e7ca      	b.n	80066ec <HAL_UART_Transmit+0x5c>
    return HAL_BUSY;
 8006756:	2002      	movs	r0, #2
}
 8006758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800675c:	6923      	ldr	r3, [r4, #16]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1b5      	bne.n	80066ce <HAL_UART_Transmit+0x3e>
      pdata16bits = (const uint16_t *) pData;
 8006762:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8006764:	461d      	mov	r5, r3
 8006766:	e7b2      	b.n	80066ce <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 8006768:	2320      	movs	r3, #32
 800676a:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 800676c:	2003      	movs	r0, #3
}
 800676e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006772:	1c78      	adds	r0, r7, #1
 8006774:	d0c6      	beq.n	8006704 <HAL_UART_Transmit+0x74>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006776:	69d3      	ldr	r3, [r2, #28]
 8006778:	065b      	lsls	r3, r3, #25
 800677a:	d4c6      	bmi.n	800670a <HAL_UART_Transmit+0x7a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800677c:	f7fc fdbe 	bl	80032fc <HAL_GetTick>
 8006780:	eba0 0309 	sub.w	r3, r0, r9
 8006784:	429f      	cmp	r7, r3
 8006786:	d3ef      	bcc.n	8006768 <HAL_UART_Transmit+0xd8>
 8006788:	2f00      	cmp	r7, #0
 800678a:	d0ed      	beq.n	8006768 <HAL_UART_Transmit+0xd8>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800678c:	6822      	ldr	r2, [r4, #0]
 800678e:	6813      	ldr	r3, [r2, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006790:	69d3      	ldr	r3, [r2, #28]
 8006792:	065b      	lsls	r3, r3, #25
 8006794:	d5f2      	bpl.n	800677c <HAL_UART_Transmit+0xec>
 8006796:	e7b8      	b.n	800670a <HAL_UART_Transmit+0x7a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006798:	f838 3b02 	ldrh.w	r3, [r8], #2
 800679c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a0:	e7bc      	b.n	800671c <HAL_UART_Transmit+0x8c>
 80067a2:	bf00      	nop

080067a4 <HAL_UART_Receive>:
{
 80067a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067a8:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80067aa:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80067ae:	2820      	cmp	r0, #32
 80067b0:	d143      	bne.n	800683a <HAL_UART_Receive+0x96>
    if ((pData == NULL) || (Size == 0U))
 80067b2:	460d      	mov	r5, r1
 80067b4:	b109      	cbz	r1, 80067ba <HAL_UART_Receive+0x16>
 80067b6:	4617      	mov	r7, r2
 80067b8:	b912      	cbnz	r2, 80067c0 <HAL_UART_Receive+0x1c>
      return  HAL_ERROR;
 80067ba:	2001      	movs	r0, #1
}
 80067bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c0:	2600      	movs	r6, #0
 80067c2:	4698      	mov	r8, r3
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067c4:	2322      	movs	r3, #34	@ 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c6:	f8c4 6084 	str.w	r6, [r4, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067ca:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ce:	6626      	str	r6, [r4, #96]	@ 0x60
    tickstart = HAL_GetTick();
 80067d0:	f7fc fd94 	bl	80032fc <HAL_GetTick>
    huart->RxXferSize  = Size;
 80067d4:	f8a4 7058 	strh.w	r7, [r4, #88]	@ 0x58
    huart->RxXferCount = Size;
 80067d8:	f8a4 705a 	strh.w	r7, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 80067dc:	68a7      	ldr	r7, [r4, #8]
 80067de:	f5b7 5f80 	cmp.w	r7, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 80067e2:	4681      	mov	r9, r0
    UART_MASK_COMPUTATION(huart);
 80067e4:	d02c      	beq.n	8006840 <HAL_UART_Receive+0x9c>
 80067e6:	2f00      	cmp	r7, #0
 80067e8:	f040 8098 	bne.w	800691c <HAL_UART_Receive+0x178>
 80067ec:	6923      	ldr	r3, [r4, #16]
    uhMask = huart->Mask;
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	bf0c      	ite	eq
 80067f2:	26ff      	moveq	r6, #255	@ 0xff
 80067f4:	267f      	movne	r6, #127	@ 0x7f
    while (huart->RxXferCount > 0U)
 80067f6:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 80067fa:	f8a4 605c 	strh.w	r6, [r4, #92]	@ 0x5c
    while (huart->RxXferCount > 0U)
 80067fe:	b29b      	uxth	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 8085 	beq.w	8006910 <HAL_UART_Receive+0x16c>
 8006806:	f1b8 3fff 	cmp.w	r8, #4294967295
 800680a:	6822      	ldr	r2, [r4, #0]
 800680c:	d132      	bne.n	8006874 <HAL_UART_Receive+0xd0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800680e:	69d3      	ldr	r3, [r2, #28]
 8006810:	0699      	lsls	r1, r3, #26
 8006812:	d5fc      	bpl.n	800680e <HAL_UART_Receive+0x6a>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006814:	8c93      	ldrh	r3, [r2, #36]	@ 0x24
 8006816:	4033      	ands	r3, r6
      if (pdata8bits == NULL)
 8006818:	2d00      	cmp	r5, #0
 800681a:	d06b      	beq.n	80068f4 <HAL_UART_Receive+0x150>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800681c:	f805 3b01 	strb.w	r3, [r5], #1
      huart->RxXferCount--;
 8006820:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8006824:	3b01      	subs	r3, #1
 8006826:	b29b      	uxth	r3, r3
 8006828:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800682c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8006830:	b29b      	uxth	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d06c      	beq.n	8006910 <HAL_UART_Receive+0x16c>
 8006836:	6822      	ldr	r2, [r4, #0]
 8006838:	e7e9      	b.n	800680e <HAL_UART_Receive+0x6a>
    return HAL_BUSY;
 800683a:	2002      	movs	r0, #2
}
 800683c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8006840:	6923      	ldr	r3, [r4, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d175      	bne.n	8006932 <HAL_UART_Receive+0x18e>
      pdata16bits = (uint16_t *) pData;
 8006846:	462f      	mov	r7, r5
    uhMask = huart->Mask;
 8006848:	f240 16ff 	movw	r6, #511	@ 0x1ff
      pdata8bits  = NULL;
 800684c:	461d      	mov	r5, r3
 800684e:	e7d2      	b.n	80067f6 <HAL_UART_Receive+0x52>
      if (pdata8bits == NULL)
 8006850:	2d00      	cmp	r5, #0
 8006852:	d071      	beq.n	8006938 <HAL_UART_Receive+0x194>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006854:	8c93      	ldrh	r3, [r2, #36]	@ 0x24
 8006856:	4033      	ands	r3, r6
 8006858:	f805 3b01 	strb.w	r3, [r5], #1
      huart->RxXferCount--;
 800685c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8006860:	3b01      	subs	r3, #1
 8006862:	b29b      	uxth	r3, r3
 8006864:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006868:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 800686c:	b29b      	uxth	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d04e      	beq.n	8006910 <HAL_UART_Receive+0x16c>
 8006872:	6822      	ldr	r2, [r4, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006874:	69d3      	ldr	r3, [r2, #28]
 8006876:	069b      	lsls	r3, r3, #26
 8006878:	d4ea      	bmi.n	8006850 <HAL_UART_Receive+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800687a:	f7fc fd3f 	bl	80032fc <HAL_GetTick>
 800687e:	eba0 0309 	sub.w	r3, r0, r9
 8006882:	4598      	cmp	r8, r3
 8006884:	d330      	bcc.n	80068e8 <HAL_UART_Receive+0x144>
 8006886:	f1b8 0f00 	cmp.w	r8, #0
 800688a:	d02d      	beq.n	80068e8 <HAL_UART_Receive+0x144>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800688c:	6822      	ldr	r2, [r4, #0]
 800688e:	6813      	ldr	r3, [r2, #0]
 8006890:	075b      	lsls	r3, r3, #29
 8006892:	d5ef      	bpl.n	8006874 <HAL_UART_Receive+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006894:	69d3      	ldr	r3, [r2, #28]
 8006896:	0718      	lsls	r0, r3, #28
 8006898:	d467      	bmi.n	800696a <HAL_UART_Receive+0x1c6>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800689a:	69d3      	ldr	r3, [r2, #28]
 800689c:	0519      	lsls	r1, r3, #20
 800689e:	d5e9      	bpl.n	8006874 <HAL_UART_Receive+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80068a4:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a6:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	e842 3100 	strex	r1, r3, [r2]
 80068b2:	2900      	cmp	r1, #0
 80068b4:	d1f7      	bne.n	80068a6 <HAL_UART_Receive+0x102>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b6:	f102 0308 	add.w	r3, r2, #8
 80068ba:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068be:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c2:	f102 0008 	add.w	r0, r2, #8
 80068c6:	e840 3100 	strex	r1, r3, [r0]
 80068ca:	2900      	cmp	r1, #0
 80068cc:	d1f3      	bne.n	80068b6 <HAL_UART_Receive+0x112>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ce:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d041      	beq.n	8006958 <HAL_UART_Receive+0x1b4>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d4:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80068d6:	2220      	movs	r2, #32
 80068d8:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068dc:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068de:	6623      	str	r3, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80068e0:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068e4:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80068e8:	2320      	movs	r3, #32
 80068ea:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 80068ee:	2003      	movs	r0, #3
}
 80068f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80068f4:	f827 3b02 	strh.w	r3, [r7], #2
      huart->RxXferCount--;
 80068f8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 80068fc:	3b01      	subs	r3, #1
 80068fe:	b29b      	uxth	r3, r3
 8006900:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006904:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8006908:	b29b      	uxth	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	f47f af7f 	bne.w	800680e <HAL_UART_Receive+0x6a>
    huart->RxState = HAL_UART_STATE_READY;
 8006910:	2320      	movs	r3, #32
 8006912:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    return HAL_OK;
 8006916:	2000      	movs	r0, #0
}
 8006918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 800691c:	f1b7 5f80 	cmp.w	r7, #268435456	@ 0x10000000
    uhMask = huart->Mask;
 8006920:	4637      	mov	r7, r6
    UART_MASK_COMPUTATION(huart);
 8006922:	f47f af68 	bne.w	80067f6 <HAL_UART_Receive+0x52>
 8006926:	6923      	ldr	r3, [r4, #16]
    uhMask = huart->Mask;
 8006928:	2b00      	cmp	r3, #0
 800692a:	bf14      	ite	ne
 800692c:	263f      	movne	r6, #63	@ 0x3f
 800692e:	267f      	moveq	r6, #127	@ 0x7f
 8006930:	e761      	b.n	80067f6 <HAL_UART_Receive+0x52>
      pdata16bits = NULL;
 8006932:	4637      	mov	r7, r6
    uhMask = huart->Mask;
 8006934:	26ff      	movs	r6, #255	@ 0xff
 8006936:	e75e      	b.n	80067f6 <HAL_UART_Receive+0x52>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006938:	8c93      	ldrh	r3, [r2, #36]	@ 0x24
 800693a:	4033      	ands	r3, r6
 800693c:	f827 3b02 	strh.w	r3, [r7], #2
      huart->RxXferCount--;
 8006940:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8006944:	3b01      	subs	r3, #1
 8006946:	b29b      	uxth	r3, r3
 8006948:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800694c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8006950:	b29b      	uxth	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d18e      	bne.n	8006874 <HAL_UART_Receive+0xd0>
 8006956:	e7db      	b.n	8006910 <HAL_UART_Receive+0x16c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006958:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800695c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006960:	e842 3100 	strex	r1, r3, [r2]
 8006964:	2900      	cmp	r1, #0
 8006966:	d1f7      	bne.n	8006958 <HAL_UART_Receive+0x1b4>
 8006968:	e7b4      	b.n	80068d4 <HAL_UART_Receive+0x130>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800696a:	2308      	movs	r3, #8
 800696c:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696e:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006972:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	e842 3100 	strex	r1, r3, [r2]
 800697a:	2900      	cmp	r1, #0
 800697c:	d1f7      	bne.n	800696e <HAL_UART_Receive+0x1ca>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697e:	f102 0308 	add.w	r3, r2, #8
 8006982:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006986:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698a:	f102 0008 	add.w	r0, r2, #8
 800698e:	e840 3100 	strex	r1, r3, [r0]
 8006992:	2900      	cmp	r1, #0
 8006994:	d1f3      	bne.n	800697e <HAL_UART_Receive+0x1da>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006996:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006998:	2b01      	cmp	r3, #1
 800699a:	d00b      	beq.n	80069b4 <HAL_UART_Receive+0x210>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800699c:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800699e:	2120      	movs	r1, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069a0:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 80069a2:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 80069a6:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a8:	6623      	str	r3, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80069aa:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069ae:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
          return HAL_ERROR;
 80069b2:	e799      	b.n	80068e8 <HAL_UART_Receive+0x144>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069b8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069bc:	e842 3100 	strex	r1, r3, [r2]
 80069c0:	2900      	cmp	r1, #0
 80069c2:	d1f7      	bne.n	80069b4 <HAL_UART_Receive+0x210>
 80069c4:	e7ea      	b.n	800699c <HAL_UART_Receive+0x1f8>
 80069c6:	bf00      	nop

080069c8 <UART_SetConfig>:
{
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069cc:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069ce:	6882      	ldr	r2, [r0, #8]
 80069d0:	6900      	ldr	r0, [r0, #16]
 80069d2:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069d4:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069d6:	4302      	orrs	r2, r0
 80069d8:	430a      	orrs	r2, r1
 80069da:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069dc:	497d      	ldr	r1, [pc, #500]	@ (8006bd4 <UART_SetConfig+0x20c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069de:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069e0:	4029      	ands	r1, r5
 80069e2:	430a      	orrs	r2, r1
 80069e4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	68e1      	ldr	r1, [r4, #12]
 80069ea:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80069ee:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069f0:	4979      	ldr	r1, [pc, #484]	@ (8006bd8 <UART_SetConfig+0x210>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069f2:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069f4:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069f6:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069f8:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069fa:	d03f      	beq.n	8006a7c <UART_SetConfig+0xb4>
    tmpreg |= huart->Init.OneBitSampling;
 80069fc:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069fe:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8006a02:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a04:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a06:	4975      	ldr	r1, [pc, #468]	@ (8006bdc <UART_SetConfig+0x214>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a08:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a0a:	428b      	cmp	r3, r1
 8006a0c:	d115      	bne.n	8006a3a <UART_SetConfig+0x72>
 8006a0e:	4b74      	ldr	r3, [pc, #464]	@ (8006be0 <UART_SetConfig+0x218>)
 8006a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a14:	f003 0303 	and.w	r3, r3, #3
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	f000 8091 	beq.w	8006b40 <UART_SetConfig+0x178>
 8006a1e:	2b03      	cmp	r3, #3
 8006a20:	d07a      	beq.n	8006b18 <UART_SetConfig+0x150>
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d047      	beq.n	8006ab6 <UART_SetConfig+0xee>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a26:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006a2a:	f000 80c7 	beq.w	8006bbc <UART_SetConfig+0x1f4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a2e:	f7fe fce7 	bl	8005400 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8006a32:	2800      	cmp	r0, #0
 8006a34:	f000 8082 	beq.w	8006b3c <UART_SetConfig+0x174>
 8006a38:	e073      	b.n	8006b22 <UART_SetConfig+0x15a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a3a:	4a6a      	ldr	r2, [pc, #424]	@ (8006be4 <UART_SetConfig+0x21c>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d10f      	bne.n	8006a60 <UART_SetConfig+0x98>
 8006a40:	4b67      	ldr	r3, [pc, #412]	@ (8006be0 <UART_SetConfig+0x218>)
 8006a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a46:	f003 030c 	and.w	r3, r3, #12
 8006a4a:	2b0c      	cmp	r3, #12
 8006a4c:	d811      	bhi.n	8006a72 <UART_SetConfig+0xaa>
 8006a4e:	e8df f003 	tbb	[pc, r3]
 8006a52:	107c      	.short	0x107c
 8006a54:	10321010 	.word	0x10321010
 8006a58:	10771010 	.word	0x10771010
 8006a5c:	1010      	.short	0x1010
 8006a5e:	63          	.byte	0x63
 8006a5f:	00          	.byte	0x00
 8006a60:	4a61      	ldr	r2, [pc, #388]	@ (8006be8 <UART_SetConfig+0x220>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d04e      	beq.n	8006b04 <UART_SetConfig+0x13c>
 8006a66:	4a61      	ldr	r2, [pc, #388]	@ (8006bec <UART_SetConfig+0x224>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d01a      	beq.n	8006aa2 <UART_SetConfig+0xda>
 8006a6c:	4a60      	ldr	r2, [pc, #384]	@ (8006bf0 <UART_SetConfig+0x228>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d073      	beq.n	8006b5a <UART_SetConfig+0x192>
        ret = HAL_ERROR;
 8006a72:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8006a74:	2300      	movs	r3, #0
 8006a76:	e9c4 331a 	strd	r3, r3, [r4, #104]	@ 0x68
}
 8006a7a:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a7c:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a80:	4857      	ldr	r0, [pc, #348]	@ (8006be0 <UART_SetConfig+0x218>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a82:	430a      	orrs	r2, r1
 8006a84:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a86:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8006a8a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006a8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a92:	d06f      	beq.n	8006b74 <UART_SetConfig+0x1ac>
 8006a94:	d818      	bhi.n	8006ac8 <UART_SetConfig+0x100>
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d06e      	beq.n	8006b78 <UART_SetConfig+0x1b0>
        pclk = HAL_RCC_GetSysClockFreq();
 8006a9a:	f7fe f87d 	bl	8004b98 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006a9e:	b9c0      	cbnz	r0, 8006ad2 <UART_SetConfig+0x10a>
 8006aa0:	e04c      	b.n	8006b3c <UART_SetConfig+0x174>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006aa2:	4b4f      	ldr	r3, [pc, #316]	@ (8006be0 <UART_SetConfig+0x218>)
 8006aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006aa8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006aac:	2b80      	cmp	r3, #128	@ 0x80
 8006aae:	d047      	beq.n	8006b40 <UART_SetConfig+0x178>
 8006ab0:	d867      	bhi.n	8006b82 <UART_SetConfig+0x1ba>
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d049      	beq.n	8006b4a <UART_SetConfig+0x182>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ab6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006aba:	f000 8087 	beq.w	8006bcc <UART_SetConfig+0x204>
        pclk = HAL_RCC_GetSysClockFreq();
 8006abe:	f7fe f86b 	bl	8004b98 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	d03a      	beq.n	8006b3c <UART_SetConfig+0x174>
 8006ac6:	e02c      	b.n	8006b22 <UART_SetConfig+0x15a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ac8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006acc:	d1d1      	bne.n	8006a72 <UART_SetConfig+0xaa>
        pclk = (uint32_t) LSE_VALUE;
 8006ace:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ad2:	6862      	ldr	r2, [r4, #4]
 8006ad4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8006ad8:	4283      	cmp	r3, r0
 8006ada:	d8ca      	bhi.n	8006a72 <UART_SetConfig+0xaa>
 8006adc:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8006ae0:	d8c7      	bhi.n	8006a72 <UART_SetConfig+0xaa>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ae2:	0851      	lsrs	r1, r2, #1
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	468c      	mov	ip, r1
 8006ae8:	f44f 7580 	mov.w	r5, #256	@ 0x100
 8006aec:	4619      	mov	r1, r3
 8006aee:	fbe0 c105 	umlal	ip, r1, r0, r5
 8006af2:	4660      	mov	r0, ip
 8006af4:	f7fa f868 	bl	8000bc8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006af8:	4b3e      	ldr	r3, [pc, #248]	@ (8006bf4 <UART_SetConfig+0x22c>)
 8006afa:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d8b7      	bhi.n	8006a72 <UART_SetConfig+0xaa>
 8006b02:	e019      	b.n	8006b38 <UART_SetConfig+0x170>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b04:	4b36      	ldr	r3, [pc, #216]	@ (8006be0 <UART_SetConfig+0x218>)
 8006b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b0a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b0e:	2b20      	cmp	r3, #32
 8006b10:	d016      	beq.n	8006b40 <UART_SetConfig+0x178>
 8006b12:	d9ce      	bls.n	8006ab2 <UART_SetConfig+0xea>
 8006b14:	2b30      	cmp	r3, #48	@ 0x30
 8006b16:	d1ac      	bne.n	8006a72 <UART_SetConfig+0xaa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b18:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006b1c:	d053      	beq.n	8006bc6 <UART_SetConfig+0x1fe>
        pclk = (uint32_t) LSE_VALUE;
 8006b1e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b22:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b24:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b28:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006b2c:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b30:	f1a0 0310 	sub.w	r3, r0, #16
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d89c      	bhi.n	8006a72 <UART_SetConfig+0xaa>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	60d8      	str	r0, [r3, #12]
        pclk = (uint32_t) HSI_VALUE;
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	e799      	b.n	8006a74 <UART_SetConfig+0xac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b40:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006b44:	d03d      	beq.n	8006bc2 <UART_SetConfig+0x1fa>
        pclk = (uint32_t) HSI_VALUE;
 8006b46:	482c      	ldr	r0, [pc, #176]	@ (8006bf8 <UART_SetConfig+0x230>)
 8006b48:	e7eb      	b.n	8006b22 <UART_SetConfig+0x15a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b4a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8006b4e:	d01b      	beq.n	8006b88 <UART_SetConfig+0x1c0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b50:	f7fe fc44 	bl	80053dc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006b54:	2800      	cmp	r0, #0
 8006b56:	d0f1      	beq.n	8006b3c <UART_SetConfig+0x174>
 8006b58:	e7e3      	b.n	8006b22 <UART_SetConfig+0x15a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b5a:	4b21      	ldr	r3, [pc, #132]	@ (8006be0 <UART_SetConfig+0x218>)
 8006b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b68:	d0ea      	beq.n	8006b40 <UART_SetConfig+0x178>
 8006b6a:	d9a2      	bls.n	8006ab2 <UART_SetConfig+0xea>
 8006b6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b70:	d0d2      	beq.n	8006b18 <UART_SetConfig+0x150>
 8006b72:	e77e      	b.n	8006a72 <UART_SetConfig+0xaa>
        pclk = (uint32_t) HSI_VALUE;
 8006b74:	4820      	ldr	r0, [pc, #128]	@ (8006bf8 <UART_SetConfig+0x230>)
 8006b76:	e7ac      	b.n	8006ad2 <UART_SetConfig+0x10a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b78:	f7fe fc30 	bl	80053dc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d1a8      	bne.n	8006ad2 <UART_SetConfig+0x10a>
 8006b80:	e7dc      	b.n	8006b3c <UART_SetConfig+0x174>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b82:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b84:	d0c8      	beq.n	8006b18 <UART_SetConfig+0x150>
 8006b86:	e774      	b.n	8006a72 <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b88:	f7fe fc28 	bl	80053dc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d0d5      	beq.n	8006b3c <UART_SetConfig+0x174>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b90:	0040      	lsls	r0, r0, #1
 8006b92:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b94:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b98:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006b9c:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ba0:	f1a3 0110 	sub.w	r1, r3, #16
 8006ba4:	4291      	cmp	r1, r2
 8006ba6:	f63f af64 	bhi.w	8006a72 <UART_SetConfig+0xaa>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006baa:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8006bae:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bb0:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bb2:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	60cb      	str	r3, [r1, #12]
 8006bba:	e7bf      	b.n	8006b3c <UART_SetConfig+0x174>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bbc:	f7fe fc20 	bl	8005400 <HAL_RCC_GetPCLK2Freq>
        break;
 8006bc0:	e7e4      	b.n	8006b8c <UART_SetConfig+0x1c4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bc2:	480e      	ldr	r0, [pc, #56]	@ (8006bfc <UART_SetConfig+0x234>)
 8006bc4:	e7e5      	b.n	8006b92 <UART_SetConfig+0x1ca>
 8006bc6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006bca:	e7e2      	b.n	8006b92 <UART_SetConfig+0x1ca>
        pclk = HAL_RCC_GetSysClockFreq();
 8006bcc:	f7fd ffe4 	bl	8004b98 <HAL_RCC_GetSysClockFreq>
        break;
 8006bd0:	e7dc      	b.n	8006b8c <UART_SetConfig+0x1c4>
 8006bd2:	bf00      	nop
 8006bd4:	efff69f3 	.word	0xefff69f3
 8006bd8:	40008000 	.word	0x40008000
 8006bdc:	40013800 	.word	0x40013800
 8006be0:	40021000 	.word	0x40021000
 8006be4:	40004400 	.word	0x40004400
 8006be8:	40004800 	.word	0x40004800
 8006bec:	40004c00 	.word	0x40004c00
 8006bf0:	40005000 	.word	0x40005000
 8006bf4:	000ffcff 	.word	0x000ffcff
 8006bf8:	00f42400 	.word	0x00f42400
 8006bfc:	01e84800 	.word	0x01e84800

08006c00 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c00:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006c02:	071a      	lsls	r2, r3, #28
{
 8006c04:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c06:	d506      	bpl.n	8006c16 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c08:	6801      	ldr	r1, [r0, #0]
 8006c0a:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8006c0c:	684a      	ldr	r2, [r1, #4]
 8006c0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c12:	4322      	orrs	r2, r4
 8006c14:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c16:	07dc      	lsls	r4, r3, #31
 8006c18:	d506      	bpl.n	8006c28 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c1a:	6801      	ldr	r1, [r0, #0]
 8006c1c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8006c1e:	684a      	ldr	r2, [r1, #4]
 8006c20:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8006c24:	4322      	orrs	r2, r4
 8006c26:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c28:	0799      	lsls	r1, r3, #30
 8006c2a:	d506      	bpl.n	8006c3a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c2c:	6801      	ldr	r1, [r0, #0]
 8006c2e:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8006c30:	684a      	ldr	r2, [r1, #4]
 8006c32:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006c36:	4322      	orrs	r2, r4
 8006c38:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c3a:	075a      	lsls	r2, r3, #29
 8006c3c:	d506      	bpl.n	8006c4c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c3e:	6801      	ldr	r1, [r0, #0]
 8006c40:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8006c42:	684a      	ldr	r2, [r1, #4]
 8006c44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006c48:	4322      	orrs	r2, r4
 8006c4a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c4c:	06dc      	lsls	r4, r3, #27
 8006c4e:	d506      	bpl.n	8006c5e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c50:	6801      	ldr	r1, [r0, #0]
 8006c52:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8006c54:	688a      	ldr	r2, [r1, #8]
 8006c56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006c5a:	4322      	orrs	r2, r4
 8006c5c:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c5e:	0699      	lsls	r1, r3, #26
 8006c60:	d506      	bpl.n	8006c70 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c62:	6801      	ldr	r1, [r0, #0]
 8006c64:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8006c66:	688a      	ldr	r2, [r1, #8]
 8006c68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c6c:	4322      	orrs	r2, r4
 8006c6e:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c70:	065a      	lsls	r2, r3, #25
 8006c72:	d509      	bpl.n	8006c88 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c74:	6801      	ldr	r1, [r0, #0]
 8006c76:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8006c78:	684a      	ldr	r2, [r1, #4]
 8006c7a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8006c7e:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c80:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c84:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c86:	d00b      	beq.n	8006ca0 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c88:	061b      	lsls	r3, r3, #24
 8006c8a:	d506      	bpl.n	8006c9a <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c8c:	6802      	ldr	r2, [r0, #0]
 8006c8e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8006c90:	6853      	ldr	r3, [r2, #4]
 8006c92:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8006c96:	430b      	orrs	r3, r1
 8006c98:	6053      	str	r3, [r2, #4]
}
 8006c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c9e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ca0:	684a      	ldr	r2, [r1, #4]
 8006ca2:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8006ca4:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8006ca8:	4322      	orrs	r2, r4
 8006caa:	604a      	str	r2, [r1, #4]
 8006cac:	e7ec      	b.n	8006c88 <UART_AdvFeatureConfig+0x88>
 8006cae:	bf00      	nop

08006cb0 <UART_CheckIdleState>:
{
 8006cb0:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb2:	2300      	movs	r3, #0
{
 8006cb4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb6:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  tickstart = HAL_GetTick();
 8006cba:	f7fc fb1f 	bl	80032fc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cbe:	6822      	ldr	r2, [r4, #0]
 8006cc0:	6813      	ldr	r3, [r2, #0]
 8006cc2:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8006cc4:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cc6:	d40e      	bmi.n	8006ce6 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cc8:	6813      	ldr	r3, [r2, #0]
 8006cca:	0759      	lsls	r1, r3, #29
 8006ccc:	d42f      	bmi.n	8006d2e <UART_CheckIdleState+0x7e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cce:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	67e2      	str	r2, [r4, #124]	@ 0x7c
  return HAL_OK;
 8006cd4:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8006cd6:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cda:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cdc:	6663      	str	r3, [r4, #100]	@ 0x64
      __HAL_UNLOCK(huart);
 8006cde:	2300      	movs	r3, #0
 8006ce0:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
}
 8006ce4:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ce6:	69d3      	ldr	r3, [r2, #28]
 8006ce8:	0298      	lsls	r0, r3, #10
 8006cea:	d4ed      	bmi.n	8006cc8 <UART_CheckIdleState+0x18>
 8006cec:	e00c      	b.n	8006d08 <UART_CheckIdleState+0x58>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006cee:	6819      	ldr	r1, [r3, #0]
 8006cf0:	0749      	lsls	r1, r1, #29
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	d505      	bpl.n	8006d02 <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006cf6:	69d9      	ldr	r1, [r3, #28]
 8006cf8:	0708      	lsls	r0, r1, #28
 8006cfa:	d449      	bmi.n	8006d90 <UART_CheckIdleState+0xe0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cfc:	69d9      	ldr	r1, [r3, #28]
 8006cfe:	0509      	lsls	r1, r1, #20
 8006d00:	d474      	bmi.n	8006dec <UART_CheckIdleState+0x13c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d02:	69db      	ldr	r3, [r3, #28]
 8006d04:	0298      	lsls	r0, r3, #10
 8006d06:	d4df      	bmi.n	8006cc8 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d08:	f7fc faf8 	bl	80032fc <HAL_GetTick>
 8006d0c:	1b43      	subs	r3, r0, r5
 8006d0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d12:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d14:	d3eb      	bcc.n	8006cee <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d16:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006d1a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	e843 2100 	strex	r1, r2, [r3]
 8006d22:	2900      	cmp	r1, #0
 8006d24:	d1f7      	bne.n	8006d16 <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
 8006d26:	2320      	movs	r3, #32
 8006d28:	67e3      	str	r3, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8006d2a:	2003      	movs	r0, #3
 8006d2c:	e7d7      	b.n	8006cde <UART_CheckIdleState+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d2e:	69d3      	ldr	r3, [r2, #28]
 8006d30:	025b      	lsls	r3, r3, #9
 8006d32:	d4cc      	bmi.n	8006cce <UART_CheckIdleState+0x1e>
 8006d34:	e00d      	b.n	8006d52 <UART_CheckIdleState+0xa2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	0750      	lsls	r0, r2, #29
 8006d3a:	d507      	bpl.n	8006d4c <UART_CheckIdleState+0x9c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d3c:	69da      	ldr	r2, [r3, #28]
 8006d3e:	0711      	lsls	r1, r2, #28
 8006d40:	f100 8082 	bmi.w	8006e48 <UART_CheckIdleState+0x198>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d44:	69da      	ldr	r2, [r3, #28]
 8006d46:	0512      	lsls	r2, r2, #20
 8006d48:	f100 80ac 	bmi.w	8006ea4 <UART_CheckIdleState+0x1f4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d4c:	69db      	ldr	r3, [r3, #28]
 8006d4e:	025b      	lsls	r3, r3, #9
 8006d50:	d4bd      	bmi.n	8006cce <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d52:	f7fc fad3 	bl	80032fc <HAL_GetTick>
 8006d56:	1b43      	subs	r3, r0, r5
 8006d58:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	d3ea      	bcc.n	8006d36 <UART_CheckIdleState+0x86>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d64:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d68:	e843 2100 	strex	r1, r2, [r3]
 8006d6c:	2900      	cmp	r1, #0
 8006d6e:	d1f7      	bne.n	8006d60 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d70:	f103 0208 	add.w	r2, r3, #8
 8006d74:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d78:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	f103 0008 	add.w	r0, r3, #8
 8006d80:	e840 2100 	strex	r1, r2, [r0]
 8006d84:	2900      	cmp	r1, #0
 8006d86:	d1f3      	bne.n	8006d70 <UART_CheckIdleState+0xc0>
      huart->RxState = HAL_UART_STATE_READY;
 8006d88:	2320      	movs	r3, #32
 8006d8a:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
      return HAL_TIMEOUT;
 8006d8e:	e7cc      	b.n	8006d2a <UART_CheckIdleState+0x7a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d90:	2208      	movs	r2, #8
 8006d92:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d98:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9c:	e843 2100 	strex	r1, r2, [r3]
 8006da0:	2900      	cmp	r1, #0
 8006da2:	d1f7      	bne.n	8006d94 <UART_CheckIdleState+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da4:	f103 0208 	add.w	r2, r3, #8
 8006da8:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dac:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db0:	f103 0008 	add.w	r0, r3, #8
 8006db4:	e840 2100 	strex	r1, r2, [r0]
 8006db8:	2900      	cmp	r1, #0
 8006dba:	d1f3      	bne.n	8006da4 <UART_CheckIdleState+0xf4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dbc:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8006dbe:	2a01      	cmp	r2, #1
 8006dc0:	d00b      	beq.n	8006dda <UART_CheckIdleState+0x12a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc2:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006dc4:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dc6:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006dc8:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8006dcc:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dce:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8006dd0:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dd4:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 8006dd8:	e79d      	b.n	8006d16 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dda:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dde:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de2:	e843 2100 	strex	r1, r2, [r3]
 8006de6:	2900      	cmp	r1, #0
 8006de8:	d1f7      	bne.n	8006dda <UART_CheckIdleState+0x12a>
 8006dea:	e7ea      	b.n	8006dc2 <UART_CheckIdleState+0x112>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006df0:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006df6:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfa:	e843 2100 	strex	r1, r2, [r3]
 8006dfe:	2900      	cmp	r1, #0
 8006e00:	d1f7      	bne.n	8006df2 <UART_CheckIdleState+0x142>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e02:	f103 0208 	add.w	r2, r3, #8
 8006e06:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e0a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0e:	f103 0008 	add.w	r0, r3, #8
 8006e12:	e840 2100 	strex	r1, r2, [r0]
 8006e16:	2900      	cmp	r1, #0
 8006e18:	d1f3      	bne.n	8006e02 <UART_CheckIdleState+0x152>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e1a:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8006e1c:	2a01      	cmp	r2, #1
 8006e1e:	d00a      	beq.n	8006e36 <UART_CheckIdleState+0x186>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e20:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006e22:	2120      	movs	r1, #32
 8006e24:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8006e28:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2a:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8006e2c:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e30:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8006e34:	e76f      	b.n	8006d16 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e36:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e3a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3e:	e843 2100 	strex	r1, r2, [r3]
 8006e42:	2900      	cmp	r1, #0
 8006e44:	d1f7      	bne.n	8006e36 <UART_CheckIdleState+0x186>
 8006e46:	e7eb      	b.n	8006e20 <UART_CheckIdleState+0x170>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e48:	2208      	movs	r2, #8
 8006e4a:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e50:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e54:	e843 2100 	strex	r1, r2, [r3]
 8006e58:	2900      	cmp	r1, #0
 8006e5a:	d1f7      	bne.n	8006e4c <UART_CheckIdleState+0x19c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5c:	f103 0208 	add.w	r2, r3, #8
 8006e60:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e64:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	f103 0008 	add.w	r0, r3, #8
 8006e6c:	e840 2100 	strex	r1, r2, [r0]
 8006e70:	2900      	cmp	r1, #0
 8006e72:	d1f3      	bne.n	8006e5c <UART_CheckIdleState+0x1ac>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e74:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8006e76:	2a01      	cmp	r2, #1
 8006e78:	d00b      	beq.n	8006e92 <UART_CheckIdleState+0x1e2>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e7a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006e7c:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e7e:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006e80:	f8c4 0080 	str.w	r0, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8006e84:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e86:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8006e88:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e8c:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_ERROR;
 8006e90:	e766      	b.n	8006d60 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e92:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e96:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9a:	e843 2100 	strex	r1, r2, [r3]
 8006e9e:	2900      	cmp	r1, #0
 8006ea0:	d1f7      	bne.n	8006e92 <UART_CheckIdleState+0x1e2>
 8006ea2:	e7ea      	b.n	8006e7a <UART_CheckIdleState+0x1ca>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ea4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ea8:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eae:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb2:	e843 2100 	strex	r1, r2, [r3]
 8006eb6:	2900      	cmp	r1, #0
 8006eb8:	d1f7      	bne.n	8006eaa <UART_CheckIdleState+0x1fa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eba:	f103 0208 	add.w	r2, r3, #8
 8006ebe:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec2:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	f103 0008 	add.w	r0, r3, #8
 8006eca:	e840 2100 	strex	r1, r2, [r0]
 8006ece:	2900      	cmp	r1, #0
 8006ed0:	d1f3      	bne.n	8006eba <UART_CheckIdleState+0x20a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ed2:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8006ed4:	2a01      	cmp	r2, #1
 8006ed6:	d00a      	beq.n	8006eee <UART_CheckIdleState+0x23e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ed8:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006eda:	2120      	movs	r1, #32
 8006edc:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 8006ee0:	66a2      	str	r2, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee2:	6622      	str	r2, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 8006ee4:	f884 2078 	strb.w	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ee8:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
          return HAL_TIMEOUT;
 8006eec:	e738      	b.n	8006d60 <UART_CheckIdleState+0xb0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eee:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ef2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef6:	e843 2100 	strex	r1, r2, [r3]
 8006efa:	2900      	cmp	r1, #0
 8006efc:	d1f7      	bne.n	8006eee <UART_CheckIdleState+0x23e>
 8006efe:	e7eb      	b.n	8006ed8 <UART_CheckIdleState+0x228>

08006f00 <HAL_UART_Init>:
  if (huart == NULL)
 8006f00:	b370      	cbz	r0, 8006f60 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006f02:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
{
 8006f04:	b510      	push	{r4, lr}
 8006f06:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006f08:	b32b      	cbz	r3, 8006f56 <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 8006f0a:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f0c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  huart->gState = HAL_UART_STATE_BUSY;
 8006f0e:	2324      	movs	r3, #36	@ 0x24
 8006f10:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8006f12:	6813      	ldr	r3, [r2, #0]
 8006f14:	f023 0301 	bic.w	r3, r3, #1
 8006f18:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f1a:	b9c1      	cbnz	r1, 8006f4e <HAL_UART_Init+0x4e>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f7ff fd53 	bl	80069c8 <UART_SetConfig>
 8006f22:	2801      	cmp	r0, #1
 8006f24:	d011      	beq.n	8006f4a <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f30:	689a      	ldr	r2, [r3, #8]
 8006f32:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f36:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8006f3e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8006f40:	601a      	str	r2, [r3, #0]
}
 8006f42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8006f46:	f7ff beb3 	b.w	8006cb0 <UART_CheckIdleState>
}
 8006f4a:	2001      	movs	r0, #1
 8006f4c:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f7ff fe56 	bl	8006c00 <UART_AdvFeatureConfig>
 8006f54:	e7e2      	b.n	8006f1c <HAL_UART_Init+0x1c>
    huart->Lock = HAL_UNLOCKED;
 8006f56:	f880 3078 	strb.w	r3, [r0, #120]	@ 0x78
    HAL_UART_MspInit(huart);
 8006f5a:	f7fc f911 	bl	8003180 <HAL_UART_MspInit>
 8006f5e:	e7d4      	b.n	8006f0a <HAL_UART_Init+0xa>
}
 8006f60:	2001      	movs	r0, #1
 8006f62:	4770      	bx	lr

08006f64 <arm_max_q15>:
 8006f64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f68:	4686      	mov	lr, r0
 8006f6a:	f101 38ff 	add.w	r8, r1, #4294967295
 8006f6e:	ea5f 0998 	movs.w	r9, r8, lsr #2
 8006f72:	f93e 4b02 	ldrsh.w	r4, [lr], #2
 8006f76:	d048      	beq.n	800700a <arm_max_q15+0xa6>
 8006f78:	f109 0c01 	add.w	ip, r9, #1
 8006f7c:	300a      	adds	r0, #10
 8006f7e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006f82:	2504      	movs	r5, #4
 8006f84:	2700      	movs	r7, #0
 8006f86:	f930 6c08 	ldrsh.w	r6, [r0, #-8]
 8006f8a:	42b4      	cmp	r4, r6
 8006f8c:	bfb8      	it	lt
 8006f8e:	4634      	movlt	r4, r6
 8006f90:	f930 6c06 	ldrsh.w	r6, [r0, #-6]
 8006f94:	bfb8      	it	lt
 8006f96:	1eef      	sublt	r7, r5, #3
 8006f98:	42b4      	cmp	r4, r6
 8006f9a:	bfb8      	it	lt
 8006f9c:	4634      	movlt	r4, r6
 8006f9e:	f930 6c04 	ldrsh.w	r6, [r0, #-4]
 8006fa2:	bfb8      	it	lt
 8006fa4:	1eaf      	sublt	r7, r5, #2
 8006fa6:	42b4      	cmp	r4, r6
 8006fa8:	bfb8      	it	lt
 8006faa:	4634      	movlt	r4, r6
 8006fac:	f930 6c02 	ldrsh.w	r6, [r0, #-2]
 8006fb0:	bfb8      	it	lt
 8006fb2:	f105 37ff 	addlt.w	r7, r5, #4294967295
 8006fb6:	42b4      	cmp	r4, r6
 8006fb8:	bfb8      	it	lt
 8006fba:	462f      	movlt	r7, r5
 8006fbc:	f105 0504 	add.w	r5, r5, #4
 8006fc0:	bfb8      	it	lt
 8006fc2:	4634      	movlt	r4, r6
 8006fc4:	4565      	cmp	r5, ip
 8006fc6:	f100 0008 	add.w	r0, r0, #8
 8006fca:	d1dc      	bne.n	8006f86 <arm_max_q15+0x22>
 8006fcc:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 8006fd0:	f018 0003 	ands.w	r0, r8, #3
 8006fd4:	d015      	beq.n	8007002 <arm_max_q15+0x9e>
 8006fd6:	f9be 5000 	ldrsh.w	r5, [lr]
 8006fda:	42a5      	cmp	r5, r4
 8006fdc:	bfc4      	itt	gt
 8006fde:	462c      	movgt	r4, r5
 8006fe0:	1a0f      	subgt	r7, r1, r0
 8006fe2:	3801      	subs	r0, #1
 8006fe4:	d00d      	beq.n	8007002 <arm_max_q15+0x9e>
 8006fe6:	f9be 5002 	ldrsh.w	r5, [lr, #2]
 8006fea:	42ac      	cmp	r4, r5
 8006fec:	bfbc      	itt	lt
 8006fee:	1a0f      	sublt	r7, r1, r0
 8006ff0:	462c      	movlt	r4, r5
 8006ff2:	2801      	cmp	r0, #1
 8006ff4:	d005      	beq.n	8007002 <arm_max_q15+0x9e>
 8006ff6:	f9be 1004 	ldrsh.w	r1, [lr, #4]
 8006ffa:	428c      	cmp	r4, r1
 8006ffc:	bfbc      	itt	lt
 8006ffe:	4647      	movlt	r7, r8
 8007000:	460c      	movlt	r4, r1
 8007002:	8014      	strh	r4, [r2, #0]
 8007004:	601f      	str	r7, [r3, #0]
 8007006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800700a:	464f      	mov	r7, r9
 800700c:	e7e0      	b.n	8006fd0 <arm_max_q15+0x6c>
 800700e:	bf00      	nop

08007010 <arm_split_rfft_q15>:
 8007010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007014:	b083      	sub	sp, #12
 8007016:	f101 4580 	add.w	r5, r1, #1073741824	@ 0x40000000
 800701a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800701c:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 800701e:	3d01      	subs	r5, #1
 8007020:	eb04 06c1 	add.w	r6, r4, r1, lsl #3
 8007024:	00ac      	lsls	r4, r5, #2
 8007026:	9401      	str	r4, [sp, #4]
 8007028:	1e4c      	subs	r4, r1, #1
 800702a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800702e:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8007032:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8007036:	d02d      	beq.n	8007094 <arm_split_rfft_q15+0x84>
 8007038:	2f01      	cmp	r7, #1
 800703a:	f1a6 0c04 	sub.w	ip, r6, #4
 800703e:	f100 0604 	add.w	r6, r0, #4
 8007042:	d13e      	bne.n	80070c2 <arm_split_rfft_q15+0xb2>
 8007044:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8007046:	f1ac 0104 	sub.w	r1, ip, #4
 800704a:	f107 0808 	add.w	r8, r7, #8
 800704e:	f856 7b04 	ldr.w	r7, [r6], #4
 8007052:	f852 9b04 	ldr.w	r9, [r2], #4
 8007056:	fb47 fc09 	smusd	ip, r7, r9
 800705a:	f855 e904 	ldr.w	lr, [r5], #-4
 800705e:	f853 ab04 	ldr.w	sl, [r3], #4
 8007062:	fb2e cc0a 	smlad	ip, lr, sl, ip
 8007066:	fb4e fe1a 	smusdx	lr, lr, sl
 800706a:	fb27 e719 	smladx	r7, r7, r9, lr
 800706e:	143f      	asrs	r7, r7, #16
 8007070:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8007074:	f1c7 0e00 	rsb	lr, r7, #0
 8007078:	3c01      	subs	r4, #1
 800707a:	f828 7c02 	strh.w	r7, [r8, #-2]
 800707e:	f828 cc04 	strh.w	ip, [r8, #-4]
 8007082:	f1a1 0104 	sub.w	r1, r1, #4
 8007086:	f8a1 e00a 	strh.w	lr, [r1, #10]
 800708a:	f8a1 c008 	strh.w	ip, [r1, #8]
 800708e:	f108 0804 	add.w	r8, r8, #4
 8007092:	d1dc      	bne.n	800704e <arm_split_rfft_q15+0x3e>
 8007094:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8007098:	f9b0 3000 	ldrsh.w	r3, [r0]
 800709c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800709e:	9a01      	ldr	r2, [sp, #4]
 80070a0:	1a5b      	subs	r3, r3, r1
 80070a2:	4422      	add	r2, r4
 80070a4:	2100      	movs	r1, #0
 80070a6:	105b      	asrs	r3, r3, #1
 80070a8:	8093      	strh	r3, [r2, #4]
 80070aa:	80d1      	strh	r1, [r2, #6]
 80070ac:	f9b0 3000 	ldrsh.w	r3, [r0]
 80070b0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80070b4:	8061      	strh	r1, [r4, #2]
 80070b6:	4413      	add	r3, r2
 80070b8:	105b      	asrs	r3, r3, #1
 80070ba:	8023      	strh	r3, [r4, #0]
 80070bc:	b003      	add	sp, #12
 80070be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c2:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 80070c6:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80070c8:	f1ac 0104 	sub.w	r1, ip, #4
 80070cc:	f107 0808 	add.w	r8, r7, #8
 80070d0:	f856 7b04 	ldr.w	r7, [r6], #4
 80070d4:	f8d2 9000 	ldr.w	r9, [r2]
 80070d8:	fb47 fc09 	smusd	ip, r7, r9
 80070dc:	f855 e904 	ldr.w	lr, [r5], #-4
 80070e0:	f8d3 a000 	ldr.w	sl, [r3]
 80070e4:	fb2e cc0a 	smlad	ip, lr, sl, ip
 80070e8:	fb4e fe1a 	smusdx	lr, lr, sl
 80070ec:	fb27 e719 	smladx	r7, r7, r9, lr
 80070f0:	143f      	asrs	r7, r7, #16
 80070f2:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 80070f6:	f1c7 0e00 	rsb	lr, r7, #0
 80070fa:	3c01      	subs	r4, #1
 80070fc:	f828 7c02 	strh.w	r7, [r8, #-2]
 8007100:	f828 cc04 	strh.w	ip, [r8, #-4]
 8007104:	445b      	add	r3, fp
 8007106:	f8a1 e006 	strh.w	lr, [r1, #6]
 800710a:	f8a1 c004 	strh.w	ip, [r1, #4]
 800710e:	445a      	add	r2, fp
 8007110:	f108 0804 	add.w	r8, r8, #4
 8007114:	f1a1 0104 	sub.w	r1, r1, #4
 8007118:	d1da      	bne.n	80070d0 <arm_split_rfft_q15+0xc0>
 800711a:	e7bb      	b.n	8007094 <arm_split_rfft_q15+0x84>

0800711c <arm_rfft_q15>:
 800711c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007120:	f890 e004 	ldrb.w	lr, [r0, #4]
 8007124:	6806      	ldr	r6, [r0, #0]
 8007126:	f1be 0f01 	cmp.w	lr, #1
 800712a:	4604      	mov	r4, r0
 800712c:	b083      	sub	sp, #12
 800712e:	6940      	ldr	r0, [r0, #20]
 8007130:	4615      	mov	r5, r2
 8007132:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007136:	460f      	mov	r7, r1
 8007138:	d00f      	beq.n	800715a <arm_rfft_q15+0x3e>
 800713a:	7963      	ldrb	r3, [r4, #5]
 800713c:	4672      	mov	r2, lr
 800713e:	f000 fd75 	bl	8007c2c <arm_cfft_q15>
 8007142:	68a3      	ldr	r3, [r4, #8]
 8007144:	9301      	str	r3, [sp, #4]
 8007146:	9500      	str	r5, [sp, #0]
 8007148:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 800714c:	4631      	mov	r1, r6
 800714e:	4638      	mov	r0, r7
 8007150:	f7ff ff5e 	bl	8007010 <arm_split_rfft_q15>
 8007154:	b003      	add	sp, #12
 8007156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800715a:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
 800715e:	68a2      	ldr	r2, [r4, #8]
 8007160:	eb07 0c86 	add.w	ip, r7, r6, lsl #2
 8007164:	b30e      	cbz	r6, 80071aa <arm_rfft_q15+0x8e>
 8007166:	2a01      	cmp	r2, #1
 8007168:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800716c:	d132      	bne.n	80071d4 <arm_rfft_q15+0xb8>
 800716e:	46a9      	mov	r9, r5
 8007170:	f85c 8904 	ldr.w	r8, [ip], #-4
 8007174:	f851 2b04 	ldr.w	r2, [r1], #4
 8007178:	fb48 fa02 	smusd	sl, r8, r2
 800717c:	f857 bb04 	ldr.w	fp, [r7], #4
 8007180:	f853 eb04 	ldr.w	lr, [r3], #4
 8007184:	fb2b aa0e 	smlad	sl, fp, lr, sl
 8007188:	fb28 f812 	smuadx	r8, r8, r2
 800718c:	f1c8 0200 	rsb	r2, r8, #0
 8007190:	fb4e 2e1b 	smlsdx	lr, lr, fp, r2
 8007194:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8007198:	0412      	lsls	r2, r2, #16
 800719a:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 800719e:	3e01      	subs	r6, #1
 80071a0:	f849 2b04 	str.w	r2, [r9], #4
 80071a4:	d1e4      	bne.n	8007170 <arm_rfft_q15+0x54>
 80071a6:	f894 e004 	ldrb.w	lr, [r4, #4]
 80071aa:	7963      	ldrb	r3, [r4, #5]
 80071ac:	4672      	mov	r2, lr
 80071ae:	4629      	mov	r1, r5
 80071b0:	f000 fd3c 	bl	8007c2c <arm_cfft_q15>
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d0cc      	beq.n	8007154 <arm_rfft_q15+0x38>
 80071ba:	3d02      	subs	r5, #2
 80071bc:	2100      	movs	r1, #0
 80071be:	f935 3f02 	ldrsh.w	r3, [r5, #2]!
 80071c2:	005b      	lsls	r3, r3, #1
 80071c4:	802b      	strh	r3, [r5, #0]
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	3101      	adds	r1, #1
 80071ca:	428b      	cmp	r3, r1
 80071cc:	d8f7      	bhi.n	80071be <arm_rfft_q15+0xa2>
 80071ce:	b003      	add	sp, #12
 80071d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d4:	ee07 0a90 	vmov	s15, r0
 80071d8:	46a8      	mov	r8, r5
 80071da:	f85c e904 	ldr.w	lr, [ip], #-4
 80071de:	6808      	ldr	r0, [r1, #0]
 80071e0:	fb4e f900 	smusd	r9, lr, r0
 80071e4:	f857 ab04 	ldr.w	sl, [r7], #4
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	fb2a 9902 	smlad	r9, sl, r2, r9
 80071ee:	fb2e fe10 	smuadx	lr, lr, r0
 80071f2:	f1ce 0e00 	rsb	lr, lr, #0
 80071f6:	fb42 e21a 	smlsdx	r2, r2, sl, lr
 80071fa:	0c12      	lsrs	r2, r2, #16
 80071fc:	0412      	lsls	r2, r2, #16
 80071fe:	ea42 4219 	orr.w	r2, r2, r9, lsr #16
 8007202:	3e01      	subs	r6, #1
 8007204:	f848 2b04 	str.w	r2, [r8], #4
 8007208:	4459      	add	r1, fp
 800720a:	445b      	add	r3, fp
 800720c:	d1e5      	bne.n	80071da <arm_rfft_q15+0xbe>
 800720e:	ee17 0a90 	vmov	r0, s15
 8007212:	e7c8      	b.n	80071a6 <arm_rfft_q15+0x8a>

08007214 <arm_rfft_init_q15>:
 8007214:	b430      	push	{r4, r5}
 8007216:	b289      	uxth	r1, r1
 8007218:	4d31      	ldr	r5, [pc, #196]	@ (80072e0 <arm_rfft_init_q15+0xcc>)
 800721a:	4c32      	ldr	r4, [pc, #200]	@ (80072e4 <arm_rfft_init_q15+0xd0>)
 800721c:	6001      	str	r1, [r0, #0]
 800721e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007222:	e9c0 5403 	strd	r5, r4, [r0, #12]
 8007226:	7102      	strb	r2, [r0, #4]
 8007228:	7143      	strb	r3, [r0, #5]
 800722a:	d053      	beq.n	80072d4 <arm_rfft_init_q15+0xc0>
 800722c:	d91a      	bls.n	8007264 <arm_rfft_init_q15+0x50>
 800722e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8007232:	d033      	beq.n	800729c <arm_rfft_init_q15+0x88>
 8007234:	d909      	bls.n	800724a <arm_rfft_init_q15+0x36>
 8007236:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800723a:	d12b      	bne.n	8007294 <arm_rfft_init_q15+0x80>
 800723c:	4b2a      	ldr	r3, [pc, #168]	@ (80072e8 <arm_rfft_init_q15+0xd4>)
 800723e:	6143      	str	r3, [r0, #20]
 8007240:	2201      	movs	r2, #1
 8007242:	6082      	str	r2, [r0, #8]
 8007244:	2000      	movs	r0, #0
 8007246:	bc30      	pop	{r4, r5}
 8007248:	4770      	bx	lr
 800724a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800724e:	d02c      	beq.n	80072aa <arm_rfft_init_q15+0x96>
 8007250:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8007254:	d11e      	bne.n	8007294 <arm_rfft_init_q15+0x80>
 8007256:	4b25      	ldr	r3, [pc, #148]	@ (80072ec <arm_rfft_init_q15+0xd8>)
 8007258:	6143      	str	r3, [r0, #20]
 800725a:	2204      	movs	r2, #4
 800725c:	6082      	str	r2, [r0, #8]
 800725e:	bc30      	pop	{r4, r5}
 8007260:	2000      	movs	r0, #0
 8007262:	4770      	bx	lr
 8007264:	2980      	cmp	r1, #128	@ 0x80
 8007266:	d027      	beq.n	80072b8 <arm_rfft_init_q15+0xa4>
 8007268:	d909      	bls.n	800727e <arm_rfft_init_q15+0x6a>
 800726a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800726e:	d111      	bne.n	8007294 <arm_rfft_init_q15+0x80>
 8007270:	4b1f      	ldr	r3, [pc, #124]	@ (80072f0 <arm_rfft_init_q15+0xdc>)
 8007272:	6143      	str	r3, [r0, #20]
 8007274:	2220      	movs	r2, #32
 8007276:	6082      	str	r2, [r0, #8]
 8007278:	bc30      	pop	{r4, r5}
 800727a:	2000      	movs	r0, #0
 800727c:	4770      	bx	lr
 800727e:	2920      	cmp	r1, #32
 8007280:	d021      	beq.n	80072c6 <arm_rfft_init_q15+0xb2>
 8007282:	2940      	cmp	r1, #64	@ 0x40
 8007284:	d106      	bne.n	8007294 <arm_rfft_init_q15+0x80>
 8007286:	4b1b      	ldr	r3, [pc, #108]	@ (80072f4 <arm_rfft_init_q15+0xe0>)
 8007288:	6143      	str	r3, [r0, #20]
 800728a:	2280      	movs	r2, #128	@ 0x80
 800728c:	6082      	str	r2, [r0, #8]
 800728e:	bc30      	pop	{r4, r5}
 8007290:	2000      	movs	r0, #0
 8007292:	4770      	bx	lr
 8007294:	f04f 30ff 	mov.w	r0, #4294967295
 8007298:	bc30      	pop	{r4, r5}
 800729a:	4770      	bx	lr
 800729c:	4b16      	ldr	r3, [pc, #88]	@ (80072f8 <arm_rfft_init_q15+0xe4>)
 800729e:	6143      	str	r3, [r0, #20]
 80072a0:	2202      	movs	r2, #2
 80072a2:	6082      	str	r2, [r0, #8]
 80072a4:	bc30      	pop	{r4, r5}
 80072a6:	2000      	movs	r0, #0
 80072a8:	4770      	bx	lr
 80072aa:	4b14      	ldr	r3, [pc, #80]	@ (80072fc <arm_rfft_init_q15+0xe8>)
 80072ac:	6143      	str	r3, [r0, #20]
 80072ae:	2208      	movs	r2, #8
 80072b0:	6082      	str	r2, [r0, #8]
 80072b2:	bc30      	pop	{r4, r5}
 80072b4:	2000      	movs	r0, #0
 80072b6:	4770      	bx	lr
 80072b8:	4b11      	ldr	r3, [pc, #68]	@ (8007300 <arm_rfft_init_q15+0xec>)
 80072ba:	6143      	str	r3, [r0, #20]
 80072bc:	2240      	movs	r2, #64	@ 0x40
 80072be:	6082      	str	r2, [r0, #8]
 80072c0:	bc30      	pop	{r4, r5}
 80072c2:	2000      	movs	r0, #0
 80072c4:	4770      	bx	lr
 80072c6:	4b0f      	ldr	r3, [pc, #60]	@ (8007304 <arm_rfft_init_q15+0xf0>)
 80072c8:	6143      	str	r3, [r0, #20]
 80072ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80072ce:	6082      	str	r2, [r0, #8]
 80072d0:	2000      	movs	r0, #0
 80072d2:	e7b8      	b.n	8007246 <arm_rfft_init_q15+0x32>
 80072d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007308 <arm_rfft_init_q15+0xf4>)
 80072d6:	6143      	str	r3, [r0, #20]
 80072d8:	2210      	movs	r2, #16
 80072da:	6082      	str	r2, [r0, #8]
 80072dc:	2000      	movs	r0, #0
 80072de:	e7b2      	b.n	8007246 <arm_rfft_init_q15+0x32>
 80072e0:	0800f318 	.word	0x0800f318
 80072e4:	08013318 	.word	0x08013318
 80072e8:	0800b4f0 	.word	0x0800b4f0
 80072ec:	0800b490 	.word	0x0800b490
 80072f0:	0800b4a0 	.word	0x0800b4a0
 80072f4:	0800b4e0 	.word	0x0800b4e0
 80072f8:	0800b4c0 	.word	0x0800b4c0
 80072fc:	0800b500 	.word	0x0800b500
 8007300:	0800b510 	.word	0x0800b510
 8007304:	0800b4b0 	.word	0x0800b4b0
 8007308:	0800b4d0 	.word	0x0800b4d0

0800730c <arm_mat_mult_fast_q15>:
 800730c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007310:	b09d      	sub	sp, #116	@ 0x74
 8007312:	880f      	ldrh	r7, [r1, #0]
 8007314:	9009      	str	r0, [sp, #36]	@ 0x24
 8007316:	4606      	mov	r6, r0
 8007318:	8840      	ldrh	r0, [r0, #2]
 800731a:	884d      	ldrh	r5, [r1, #2]
 800731c:	8836      	ldrh	r6, [r6, #0]
 800731e:	684c      	ldr	r4, [r1, #4]
 8007320:	9017      	str	r0, [sp, #92]	@ 0x5c
 8007322:	42b8      	cmp	r0, r7
 8007324:	971a      	str	r7, [sp, #104]	@ 0x68
 8007326:	9518      	str	r5, [sp, #96]	@ 0x60
 8007328:	9616      	str	r6, [sp, #88]	@ 0x58
 800732a:	9219      	str	r2, [sp, #100]	@ 0x64
 800732c:	9311      	str	r3, [sp, #68]	@ 0x44
 800732e:	f040 81e9 	bne.w	8007704 <arm_mat_mult_fast_q15+0x3f8>
 8007332:	8813      	ldrh	r3, [r2, #0]
 8007334:	42b3      	cmp	r3, r6
 8007336:	f040 81e5 	bne.w	8007704 <arm_mat_mult_fast_q15+0x3f8>
 800733a:	8853      	ldrh	r3, [r2, #2]
 800733c:	42ab      	cmp	r3, r5
 800733e:	f040 81e1 	bne.w	8007704 <arm_mat_mult_fast_q15+0x3f8>
 8007342:	0043      	lsls	r3, r0, #1
 8007344:	2801      	cmp	r0, #1
 8007346:	ea4f 0695 	mov.w	r6, r5, lsr #2
 800734a:	9306      	str	r3, [sp, #24]
 800734c:	f005 0703 	and.w	r7, r5, #3
 8007350:	d133      	bne.n	80073ba <arm_mat_mult_fast_q15+0xae>
 8007352:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8007356:	fb06 fc03 	mul.w	ip, r6, r3
 800735a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800735e:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 8007362:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8007366:	4655      	mov	r5, sl
 8007368:	4699      	mov	r9, r3
 800736a:	462b      	mov	r3, r5
 800736c:	b1ae      	cbz	r6, 800739a <arm_mat_mult_fast_q15+0x8e>
 800736e:	4621      	mov	r1, r4
 8007370:	4630      	mov	r0, r6
 8007372:	680a      	ldr	r2, [r1, #0]
 8007374:	801a      	strh	r2, [r3, #0]
 8007376:	1412      	asrs	r2, r2, #16
 8007378:	f823 2009 	strh.w	r2, [r3, r9]
 800737c:	684a      	ldr	r2, [r1, #4]
 800737e:	f823 2019 	strh.w	r2, [r3, r9, lsl #1]
 8007382:	3801      	subs	r0, #1
 8007384:	ea4f 4222 	mov.w	r2, r2, asr #16
 8007388:	80da      	strh	r2, [r3, #6]
 800738a:	f101 0108 	add.w	r1, r1, #8
 800738e:	f103 0308 	add.w	r3, r3, #8
 8007392:	d1ee      	bne.n	8007372 <arm_mat_mult_fast_q15+0x66>
 8007394:	4444      	add	r4, r8
 8007396:	eb05 030c 	add.w	r3, r5, ip
 800739a:	b147      	cbz	r7, 80073ae <arm_mat_mult_fast_q15+0xa2>
 800739c:	4621      	mov	r1, r4
 800739e:	463a      	mov	r2, r7
 80073a0:	f931 0b02 	ldrsh.w	r0, [r1], #2
 80073a4:	8018      	strh	r0, [r3, #0]
 80073a6:	3a01      	subs	r2, #1
 80073a8:	444b      	add	r3, r9
 80073aa:	d1f9      	bne.n	80073a0 <arm_mat_mult_fast_q15+0x94>
 80073ac:	4474      	add	r4, lr
 80073ae:	45aa      	cmp	sl, r5
 80073b0:	f105 0302 	add.w	r3, r5, #2
 80073b4:	d038      	beq.n	8007428 <arm_mat_mult_fast_q15+0x11c>
 80073b6:	461d      	mov	r5, r3
 80073b8:	e7d7      	b.n	800736a <arm_mat_mult_fast_q15+0x5e>
 80073ba:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80073bc:	181d      	adds	r5, r3, r0
 80073be:	fb06 f803 	mul.w	r8, r6, r3
 80073c2:	4696      	mov	lr, r2
 80073c4:	441a      	add	r2, r3
 80073c6:	006d      	lsls	r5, r5, #1
 80073c8:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80073cc:	9212      	str	r2, [sp, #72]	@ 0x48
 80073ce:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 80073d2:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 80073d6:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 80073da:	469b      	mov	fp, r3
 80073dc:	4673      	mov	r3, lr
 80073de:	b1a6      	cbz	r6, 800740a <arm_mat_mult_fast_q15+0xfe>
 80073e0:	4621      	mov	r1, r4
 80073e2:	4630      	mov	r0, r6
 80073e4:	680a      	ldr	r2, [r1, #0]
 80073e6:	801a      	strh	r2, [r3, #0]
 80073e8:	1412      	asrs	r2, r2, #16
 80073ea:	f823 200b 	strh.w	r2, [r3, fp]
 80073ee:	684a      	ldr	r2, [r1, #4]
 80073f0:	f823 201b 	strh.w	r2, [r3, fp, lsl #1]
 80073f4:	3801      	subs	r0, #1
 80073f6:	ea4f 4222 	mov.w	r2, r2, asr #16
 80073fa:	535a      	strh	r2, [r3, r5]
 80073fc:	f101 0108 	add.w	r1, r1, #8
 8007400:	4463      	add	r3, ip
 8007402:	d1ef      	bne.n	80073e4 <arm_mat_mult_fast_q15+0xd8>
 8007404:	444c      	add	r4, r9
 8007406:	eb0e 0308 	add.w	r3, lr, r8
 800740a:	b147      	cbz	r7, 800741e <arm_mat_mult_fast_q15+0x112>
 800740c:	4621      	mov	r1, r4
 800740e:	463a      	mov	r2, r7
 8007410:	f931 0b02 	ldrsh.w	r0, [r1], #2
 8007414:	8018      	strh	r0, [r3, #0]
 8007416:	3a01      	subs	r2, #1
 8007418:	445b      	add	r3, fp
 800741a:	d1f9      	bne.n	8007410 <arm_mat_mult_fast_q15+0x104>
 800741c:	4454      	add	r4, sl
 800741e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007420:	f10e 0e02 	add.w	lr, lr, #2
 8007424:	4573      	cmp	r3, lr
 8007426:	d1d9      	bne.n	80073dc <arm_mat_mult_fast_q15+0xd0>
 8007428:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800742a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007430:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007432:	004c      	lsls	r4, r1, #1
 8007434:	eb03 0541 	add.w	r5, r3, r1, lsl #1
 8007438:	0852      	lsrs	r2, r2, #1
 800743a:	9415      	str	r4, [sp, #84]	@ 0x54
 800743c:	950d      	str	r5, [sp, #52]	@ 0x34
 800743e:	9210      	str	r2, [sp, #64]	@ 0x40
 8007440:	f000 80b1 	beq.w	80075a6 <arm_mat_mult_fast_q15+0x29a>
 8007444:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8007446:	460a      	mov	r2, r1
 8007448:	0846      	lsrs	r6, r0, #1
 800744a:	f001 0101 	and.w	r1, r1, #1
 800744e:	f000 0001 	and.w	r0, r0, #1
 8007452:	0852      	lsrs	r2, r2, #1
 8007454:	911b      	str	r1, [sp, #108]	@ 0x6c
 8007456:	9607      	str	r6, [sp, #28]
 8007458:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800745c:	900a      	str	r0, [sp, #40]	@ 0x28
 800745e:	f000 809f 	beq.w	80075a0 <arm_mat_mult_fast_q15+0x294>
 8007462:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007466:	1ac8      	subs	r0, r1, r3
 8007468:	3304      	adds	r3, #4
 800746a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800746e:	9205      	str	r2, [sp, #20]
 8007470:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007472:	0092      	lsls	r2, r2, #2
 8007474:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007476:	00b2      	lsls	r2, r6, #2
 8007478:	1861      	adds	r1, r4, r1
 800747a:	920c      	str	r2, [sp, #48]	@ 0x30
 800747c:	2200      	movs	r2, #0
 800747e:	9114      	str	r1, [sp, #80]	@ 0x50
 8007480:	920e      	str	r2, [sp, #56]	@ 0x38
 8007482:	9906      	ldr	r1, [sp, #24]
 8007484:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007486:	1828      	adds	r0, r5, r0
 8007488:	440a      	add	r2, r1
 800748a:	9013      	str	r0, [sp, #76]	@ 0x4c
 800748c:	9212      	str	r2, [sp, #72]	@ 0x48
 800748e:	9304      	str	r3, [sp, #16]
 8007490:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007492:	005b      	lsls	r3, r3, #1
 8007494:	9308      	str	r3, [sp, #32]
 8007496:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007498:	3304      	adds	r3, #4
 800749a:	9303      	str	r3, [sp, #12]
 800749c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800749e:	9301      	str	r3, [sp, #4]
 80074a0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80074a2:	9300      	str	r3, [sp, #0]
 80074a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074a6:	9a08      	ldr	r2, [sp, #32]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	eb03 0b02 	add.w	fp, r3, r2
 80074ae:	9b06      	ldr	r3, [sp, #24]
 80074b0:	eb0b 0203 	add.w	r2, fp, r3
 80074b4:	9b07      	ldr	r3, [sp, #28]
 80074b6:	9202      	str	r2, [sp, #8]
 80074b8:	e9dd e800 	ldrd	lr, r8, [sp]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d06a      	beq.n	8007596 <arm_mat_mult_fast_q15+0x28a>
 80074c0:	2500      	movs	r5, #0
 80074c2:	462e      	mov	r6, r5
 80074c4:	462f      	mov	r7, r5
 80074c6:	46ac      	mov	ip, r5
 80074c8:	4692      	mov	sl, r2
 80074ca:	46d9      	mov	r9, fp
 80074cc:	f859 4b04 	ldr.w	r4, [r9], #4
 80074d0:	f858 0b04 	ldr.w	r0, [r8], #4
 80074d4:	f85a 2b04 	ldr.w	r2, [sl], #4
 80074d8:	f85e 1b04 	ldr.w	r1, [lr], #4
 80074dc:	fb24 cc00 	smlad	ip, r4, r0, ip
 80074e0:	fb24 7701 	smlad	r7, r4, r1, r7
 80074e4:	fb22 6600 	smlad	r6, r2, r0, r6
 80074e8:	fb22 5501 	smlad	r5, r2, r1, r5
 80074ec:	3b01      	subs	r3, #1
 80074ee:	d1ed      	bne.n	80074cc <arm_mat_mult_fast_q15+0x1c0>
 80074f0:	9a02      	ldr	r2, [sp, #8]
 80074f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074f4:	4611      	mov	r1, r2
 80074f6:	9a00      	ldr	r2, [sp, #0]
 80074f8:	eb02 0e03 	add.w	lr, r2, r3
 80074fc:	9a01      	ldr	r2, [sp, #4]
 80074fe:	4419      	add	r1, r3
 8007500:	9102      	str	r1, [sp, #8]
 8007502:	449b      	add	fp, r3
 8007504:	eb02 0803 	add.w	r8, r2, r3
 8007508:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800750a:	b183      	cbz	r3, 800752e <arm_mat_mult_fast_q15+0x222>
 800750c:	9902      	ldr	r1, [sp, #8]
 800750e:	f9bb 3000 	ldrsh.w	r3, [fp]
 8007512:	f9b8 2000 	ldrsh.w	r2, [r8]
 8007516:	f9b1 1000 	ldrsh.w	r1, [r1]
 800751a:	f9be 0000 	ldrsh.w	r0, [lr]
 800751e:	fb03 cc02 	mla	ip, r3, r2, ip
 8007522:	fb02 6601 	mla	r6, r2, r1, r6
 8007526:	fb03 7700 	mla	r7, r3, r0, r7
 800752a:	fb01 5500 	mla	r5, r1, r0, r5
 800752e:	9b04      	ldr	r3, [sp, #16]
 8007530:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007532:	9801      	ldr	r0, [sp, #4]
 8007534:	ea4f 3cec 	mov.w	ip, ip, asr #15
 8007538:	13ff      	asrs	r7, r7, #15
 800753a:	1d19      	adds	r1, r3, #4
 800753c:	f823 cc04 	strh.w	ip, [r3, #-4]
 8007540:	f823 7c02 	strh.w	r7, [r3, #-2]
 8007544:	9b03      	ldr	r3, [sp, #12]
 8007546:	9104      	str	r1, [sp, #16]
 8007548:	13f6      	asrs	r6, r6, #15
 800754a:	13ed      	asrs	r5, r5, #15
 800754c:	f823 6c04 	strh.w	r6, [r3, #-4]
 8007550:	f823 5c02 	strh.w	r5, [r3, #-2]
 8007554:	3304      	adds	r3, #4
 8007556:	9303      	str	r3, [sp, #12]
 8007558:	9b00      	ldr	r3, [sp, #0]
 800755a:	4413      	add	r3, r2
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	9b05      	ldr	r3, [sp, #20]
 8007560:	4604      	mov	r4, r0
 8007562:	4414      	add	r4, r2
 8007564:	428b      	cmp	r3, r1
 8007566:	9401      	str	r4, [sp, #4]
 8007568:	d19c      	bne.n	80074a4 <arm_mat_mult_fast_q15+0x198>
 800756a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800756c:	9a06      	ldr	r2, [sp, #24]
 800756e:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007570:	4413      	add	r3, r2
 8007572:	930e      	str	r3, [sp, #56]	@ 0x38
 8007574:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007576:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007578:	4610      	mov	r0, r2
 800757a:	4419      	add	r1, r3
 800757c:	9a05      	ldr	r2, [sp, #20]
 800757e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007580:	910f      	str	r1, [sp, #60]	@ 0x3c
 8007582:	4418      	add	r0, r3
 8007584:	441a      	add	r2, r3
 8007586:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007588:	900d      	str	r0, [sp, #52]	@ 0x34
 800758a:	3b01      	subs	r3, #1
 800758c:	9205      	str	r2, [sp, #20]
 800758e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007590:	d006      	beq.n	80075a0 <arm_mat_mult_fast_q15+0x294>
 8007592:	1d0b      	adds	r3, r1, #4
 8007594:	e77b      	b.n	800748e <arm_mat_mult_fast_q15+0x182>
 8007596:	469c      	mov	ip, r3
 8007598:	461d      	mov	r5, r3
 800759a:	461e      	mov	r6, r3
 800759c:	461f      	mov	r7, r3
 800759e:	e7b3      	b.n	8007508 <arm_mat_mult_fast_q15+0x1fc>
 80075a0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d155      	bne.n	8007652 <arm_mat_mult_fast_q15+0x346>
 80075a6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80075a8:	07da      	lsls	r2, r3, #31
 80075aa:	d54e      	bpl.n	800764a <arm_mat_mult_fast_q15+0x33e>
 80075ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80075ae:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80075b0:	6852      	ldr	r2, [r2, #4]
 80075b2:	3b01      	subs	r3, #1
 80075b4:	fb03 fe01 	mul.w	lr, r3, r1
 80075b8:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80075bc:	2900      	cmp	r1, #0
 80075be:	d044      	beq.n	800764a <arm_mat_mult_fast_q15+0x33e>
 80075c0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80075c2:	fb03 f302 	mul.w	r3, r3, r2
 80075c6:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 80075ca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80075cc:	f8cd b008 	str.w	fp, [sp, #8]
 80075d0:	4473      	add	r3, lr
 80075d2:	f002 0903 	and.w	r9, r2, #3
 80075d6:	ea4f 0892 	mov.w	r8, r2, lsr #2
 80075da:	9301      	str	r3, [sp, #4]
 80075dc:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 80075e0:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80075e4:	ea4f 0ac8 	mov.w	sl, r8, lsl #3
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ec:	685d      	ldr	r5, [r3, #4]
 80075ee:	9b02      	ldr	r3, [sp, #8]
 80075f0:	441d      	add	r5, r3
 80075f2:	f1b8 0f00 	cmp.w	r8, #0
 80075f6:	f000 8083 	beq.w	8007700 <arm_mat_mult_fast_q15+0x3f4>
 80075fa:	4658      	mov	r0, fp
 80075fc:	4629      	mov	r1, r5
 80075fe:	4644      	mov	r4, r8
 8007600:	2300      	movs	r3, #0
 8007602:	680f      	ldr	r7, [r1, #0]
 8007604:	684a      	ldr	r2, [r1, #4]
 8007606:	f8d0 c000 	ldr.w	ip, [r0]
 800760a:	6846      	ldr	r6, [r0, #4]
 800760c:	3108      	adds	r1, #8
 800760e:	3008      	adds	r0, #8
 8007610:	fb27 330c 	smlad	r3, r7, ip, r3
 8007614:	fb22 3306 	smlad	r3, r2, r6, r3
 8007618:	3c01      	subs	r4, #1
 800761a:	d1f2      	bne.n	8007602 <arm_mat_mult_fast_q15+0x2f6>
 800761c:	44d3      	add	fp, sl
 800761e:	4455      	add	r5, sl
 8007620:	f1b9 0f00 	cmp.w	r9, #0
 8007624:	d00b      	beq.n	800763e <arm_mat_mult_fast_q15+0x332>
 8007626:	4659      	mov	r1, fp
 8007628:	464a      	mov	r2, r9
 800762a:	f835 4b02 	ldrh.w	r4, [r5], #2
 800762e:	f831 0b02 	ldrh.w	r0, [r1], #2
 8007632:	3a01      	subs	r2, #1
 8007634:	fb14 3300 	smlabb	r3, r4, r0, r3
 8007638:	d1f7      	bne.n	800762a <arm_mat_mult_fast_q15+0x31e>
 800763a:	9a00      	ldr	r2, [sp, #0]
 800763c:	4493      	add	fp, r2
 800763e:	13db      	asrs	r3, r3, #15
 8007640:	f82e 3b02 	strh.w	r3, [lr], #2
 8007644:	9b01      	ldr	r3, [sp, #4]
 8007646:	459e      	cmp	lr, r3
 8007648:	d1cf      	bne.n	80075ea <arm_mat_mult_fast_q15+0x2de>
 800764a:	2000      	movs	r0, #0
 800764c:	b01d      	add	sp, #116	@ 0x74
 800764e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007652:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8007654:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007656:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8007658:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800765c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800765e:	f103 3bff 	add.w	fp, r3, #4294967295
 8007662:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007664:	fb03 fb0b 	mul.w	fp, r3, fp
 8007668:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800766a:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
 800766e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f002 0903 	and.w	r9, r2, #3
 8007676:	f1a1 0e02 	sub.w	lr, r1, #2
 800767a:	ea4f 0892 	mov.w	r8, r2, lsr #2
 800767e:	449e      	add	lr, r3
 8007680:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8007684:	eb0b 02c8 	add.w	r2, fp, r8, lsl #3
 8007688:	9301      	str	r3, [sp, #4]
 800768a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800768c:	9202      	str	r2, [sp, #8]
 800768e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007692:	9200      	str	r2, [sp, #0]
 8007694:	f023 0a01 	bic.w	sl, r3, #1
 8007698:	f1b8 0f00 	cmp.w	r8, #0
 800769c:	d02d      	beq.n	80076fa <arm_mat_mult_fast_q15+0x3ee>
 800769e:	4658      	mov	r0, fp
 80076a0:	4661      	mov	r1, ip
 80076a2:	4644      	mov	r4, r8
 80076a4:	2300      	movs	r3, #0
 80076a6:	680e      	ldr	r6, [r1, #0]
 80076a8:	684a      	ldr	r2, [r1, #4]
 80076aa:	6807      	ldr	r7, [r0, #0]
 80076ac:	6845      	ldr	r5, [r0, #4]
 80076ae:	3108      	adds	r1, #8
 80076b0:	3008      	adds	r0, #8
 80076b2:	fb26 3307 	smlad	r3, r6, r7, r3
 80076b6:	fb22 3305 	smlad	r3, r2, r5, r3
 80076ba:	3c01      	subs	r4, #1
 80076bc:	d1f3      	bne.n	80076a6 <arm_mat_mult_fast_q15+0x39a>
 80076be:	9a00      	ldr	r2, [sp, #0]
 80076c0:	9902      	ldr	r1, [sp, #8]
 80076c2:	4494      	add	ip, r2
 80076c4:	f1b9 0f00 	cmp.w	r9, #0
 80076c8:	d00b      	beq.n	80076e2 <arm_mat_mult_fast_q15+0x3d6>
 80076ca:	4660      	mov	r0, ip
 80076cc:	464a      	mov	r2, r9
 80076ce:	f830 5b02 	ldrh.w	r5, [r0], #2
 80076d2:	f831 4b02 	ldrh.w	r4, [r1], #2
 80076d6:	3a01      	subs	r2, #1
 80076d8:	fb15 3304 	smlabb	r3, r5, r4, r3
 80076dc:	d1f7      	bne.n	80076ce <arm_mat_mult_fast_q15+0x3c2>
 80076de:	9a01      	ldr	r2, [sp, #4]
 80076e0:	4494      	add	ip, r2
 80076e2:	13db      	asrs	r3, r3, #15
 80076e4:	f8ae 3000 	strh.w	r3, [lr]
 80076e8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80076ea:	f1ba 0a01 	subs.w	sl, sl, #1
 80076ee:	449e      	add	lr, r3
 80076f0:	f43f af59 	beq.w	80075a6 <arm_mat_mult_fast_q15+0x29a>
 80076f4:	f1b8 0f00 	cmp.w	r8, #0
 80076f8:	d1d1      	bne.n	800769e <arm_mat_mult_fast_q15+0x392>
 80076fa:	4659      	mov	r1, fp
 80076fc:	4643      	mov	r3, r8
 80076fe:	e7e1      	b.n	80076c4 <arm_mat_mult_fast_q15+0x3b8>
 8007700:	4643      	mov	r3, r8
 8007702:	e78d      	b.n	8007620 <arm_mat_mult_fast_q15+0x314>
 8007704:	f06f 0002 	mvn.w	r0, #2
 8007708:	b01d      	add	sp, #116	@ 0x74
 800770a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770e:	bf00      	nop

08007710 <arm_mat_init_q15>:
 8007710:	8001      	strh	r1, [r0, #0]
 8007712:	8042      	strh	r2, [r0, #2]
 8007714:	6043      	str	r3, [r0, #4]
 8007716:	4770      	bx	lr

08007718 <arm_cmplx_mag_q15>:
 8007718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771c:	ea5f 0992 	movs.w	r9, r2, lsr #2
 8007720:	4617      	mov	r7, r2
 8007722:	4680      	mov	r8, r0
 8007724:	460e      	mov	r6, r1
 8007726:	d029      	beq.n	800777c <arm_cmplx_mag_q15+0x64>
 8007728:	4605      	mov	r5, r0
 800772a:	46ca      	mov	sl, r9
 800772c:	460c      	mov	r4, r1
 800772e:	6828      	ldr	r0, [r5, #0]
 8007730:	fb20 f000 	smuad	r0, r0, r0
 8007734:	4621      	mov	r1, r4
 8007736:	1440      	asrs	r0, r0, #17
 8007738:	f000 f832 	bl	80077a0 <arm_sqrt_q15>
 800773c:	6868      	ldr	r0, [r5, #4]
 800773e:	fb20 f000 	smuad	r0, r0, r0
 8007742:	1ca1      	adds	r1, r4, #2
 8007744:	1440      	asrs	r0, r0, #17
 8007746:	f000 f82b 	bl	80077a0 <arm_sqrt_q15>
 800774a:	68a8      	ldr	r0, [r5, #8]
 800774c:	fb20 f000 	smuad	r0, r0, r0
 8007750:	1d21      	adds	r1, r4, #4
 8007752:	1440      	asrs	r0, r0, #17
 8007754:	f000 f824 	bl	80077a0 <arm_sqrt_q15>
 8007758:	3510      	adds	r5, #16
 800775a:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800775e:	fb23 f303 	smuad	r3, r3, r3
 8007762:	1da1      	adds	r1, r4, #6
 8007764:	1458      	asrs	r0, r3, #17
 8007766:	f000 f81b 	bl	80077a0 <arm_sqrt_q15>
 800776a:	f1ba 0a01 	subs.w	sl, sl, #1
 800776e:	f104 0408 	add.w	r4, r4, #8
 8007772:	d1dc      	bne.n	800772e <arm_cmplx_mag_q15+0x16>
 8007774:	eb06 06c9 	add.w	r6, r6, r9, lsl #3
 8007778:	eb08 1809 	add.w	r8, r8, r9, lsl #4
 800777c:	f017 0703 	ands.w	r7, r7, #3
 8007780:	d00c      	beq.n	800779c <arm_cmplx_mag_q15+0x84>
 8007782:	eb06 0747 	add.w	r7, r6, r7, lsl #1
 8007786:	f858 0b04 	ldr.w	r0, [r8], #4
 800778a:	fb20 f000 	smuad	r0, r0, r0
 800778e:	4631      	mov	r1, r6
 8007790:	1440      	asrs	r0, r0, #17
 8007792:	3602      	adds	r6, #2
 8007794:	f000 f804 	bl	80077a0 <arm_sqrt_q15>
 8007798:	42be      	cmp	r6, r7
 800779a:	d1f4      	bne.n	8007786 <arm_cmplx_mag_q15+0x6e>
 800779c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080077a0 <arm_sqrt_q15>:
 80077a0:	2800      	cmp	r0, #0
 80077a2:	dd5c      	ble.n	800785e <arm_sqrt_q15+0xbe>
 80077a4:	fab0 f280 	clz	r2, r0
 80077a8:	3a11      	subs	r2, #17
 80077aa:	b470      	push	{r4, r5, r6}
 80077ac:	b294      	uxth	r4, r2
 80077ae:	f012 0201 	ands.w	r2, r2, #1
 80077b2:	bf1a      	itte	ne
 80077b4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80077b8:	4098      	lslne	r0, r3
 80077ba:	40a0      	lsleq	r0, r4
 80077bc:	b200      	sxth	r0, r0
 80077be:	ee07 0a90 	vmov	s15, r0
 80077c2:	eefa 7ae8 	vcvt.f32.s32	s15, s15, #15
 80077c6:	4b28      	ldr	r3, [pc, #160]	@ (8007868 <arm_sqrt_q15+0xc8>)
 80077c8:	ee17 5a90 	vmov	r5, s15
 80077cc:	eba3 0365 	sub.w	r3, r3, r5, asr #1
 80077d0:	ee07 3a90 	vmov	s15, r3
 80077d4:	eefe 7ac9 	vcvt.s32.f32	s15, s15, #14
 80077d8:	1046      	asrs	r6, r0, #1
 80077da:	ee17 3a90 	vmov	r3, s15
 80077de:	b21b      	sxth	r3, r3
 80077e0:	fb03 f503 	mul.w	r5, r3, r3
 80077e4:	13ed      	asrs	r5, r5, #15
 80077e6:	fb15 f506 	smulbb	r5, r5, r6
 80077ea:	13ed      	asrs	r5, r5, #15
 80077ec:	f5c5 5540 	rsb	r5, r5, #12288	@ 0x3000
 80077f0:	fb03 f305 	mul.w	r3, r3, r5
 80077f4:	f343 334f 	sbfx	r3, r3, #13, #16
 80077f8:	f023 0303 	bic.w	r3, r3, #3
 80077fc:	fb03 f503 	mul.w	r5, r3, r3
 8007800:	13ed      	asrs	r5, r5, #15
 8007802:	fb15 f506 	smulbb	r5, r5, r6
 8007806:	13ed      	asrs	r5, r5, #15
 8007808:	f5c5 5540 	rsb	r5, r5, #12288	@ 0x3000
 800780c:	fb03 f305 	mul.w	r3, r3, r5
 8007810:	f343 334f 	sbfx	r3, r3, #13, #16
 8007814:	f023 0303 	bic.w	r3, r3, #3
 8007818:	fb03 f503 	mul.w	r5, r3, r3
 800781c:	13ed      	asrs	r5, r5, #15
 800781e:	fb15 f506 	smulbb	r5, r5, r6
 8007822:	13ed      	asrs	r5, r5, #15
 8007824:	f5c5 5540 	rsb	r5, r5, #12288	@ 0x3000
 8007828:	fb03 f305 	mul.w	r3, r3, r5
 800782c:	13db      	asrs	r3, r3, #15
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	fb13 f300 	smulbb	r3, r3, r0
 8007834:	f343 338f 	sbfx	r3, r3, #14, #16
 8007838:	f023 0301 	bic.w	r3, r3, #1
 800783c:	b13a      	cbz	r2, 800784e <arm_sqrt_q15+0xae>
 800783e:	3c01      	subs	r4, #1
 8007840:	1064      	asrs	r4, r4, #1
 8007842:	4123      	asrs	r3, r4
 8007844:	b21b      	sxth	r3, r3
 8007846:	2000      	movs	r0, #0
 8007848:	bc70      	pop	{r4, r5, r6}
 800784a:	800b      	strh	r3, [r1, #0]
 800784c:	4770      	bx	lr
 800784e:	f344 044e 	sbfx	r4, r4, #1, #15
 8007852:	4123      	asrs	r3, r4
 8007854:	b21b      	sxth	r3, r3
 8007856:	2000      	movs	r0, #0
 8007858:	bc70      	pop	{r4, r5, r6}
 800785a:	800b      	strh	r3, [r1, #0]
 800785c:	4770      	bx	lr
 800785e:	2300      	movs	r3, #0
 8007860:	800b      	strh	r3, [r1, #0]
 8007862:	f04f 30ff 	mov.w	r0, #4294967295
 8007866:	4770      	bx	lr
 8007868:	5f3759df 	.word	0x5f3759df

0800786c <arm_shift_q15>:
 800786c:	2900      	cmp	r1, #0
 800786e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007872:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8007876:	db4a      	blt.n	800790e <arm_shift_q15+0xa2>
 8007878:	f1bc 0f00 	cmp.w	ip, #0
 800787c:	d02b      	beq.n	80078d6 <arm_shift_q15+0x6a>
 800787e:	f100 0508 	add.w	r5, r0, #8
 8007882:	4616      	mov	r6, r2
 8007884:	4667      	mov	r7, ip
 8007886:	f935 4c08 	ldrsh.w	r4, [r5, #-8]
 800788a:	408c      	lsls	r4, r1
 800788c:	f304 040f 	ssat	r4, #16, r4
 8007890:	f935 ec06 	ldrsh.w	lr, [r5, #-6]
 8007894:	fa0e fe01 	lsl.w	lr, lr, r1
 8007898:	f30e 0e0f 	ssat	lr, #16, lr
 800789c:	b2a4      	uxth	r4, r4
 800789e:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80078a2:	6034      	str	r4, [r6, #0]
 80078a4:	f935 4c04 	ldrsh.w	r4, [r5, #-4]
 80078a8:	408c      	lsls	r4, r1
 80078aa:	f304 040f 	ssat	r4, #16, r4
 80078ae:	f935 ec02 	ldrsh.w	lr, [r5, #-2]
 80078b2:	fa0e fe01 	lsl.w	lr, lr, r1
 80078b6:	f30e 0e0f 	ssat	lr, #16, lr
 80078ba:	b2a4      	uxth	r4, r4
 80078bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80078c0:	3f01      	subs	r7, #1
 80078c2:	6074      	str	r4, [r6, #4]
 80078c4:	f105 0508 	add.w	r5, r5, #8
 80078c8:	f106 0608 	add.w	r6, r6, #8
 80078cc:	d1db      	bne.n	8007886 <arm_shift_q15+0x1a>
 80078ce:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 80078d2:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 80078d6:	f013 0303 	ands.w	r3, r3, #3
 80078da:	d016      	beq.n	800790a <arm_shift_q15+0x9e>
 80078dc:	f9b0 4000 	ldrsh.w	r4, [r0]
 80078e0:	408c      	lsls	r4, r1
 80078e2:	f304 040f 	ssat	r4, #16, r4
 80078e6:	3b01      	subs	r3, #1
 80078e8:	8014      	strh	r4, [r2, #0]
 80078ea:	d00e      	beq.n	800790a <arm_shift_q15+0x9e>
 80078ec:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80078f0:	408c      	lsls	r4, r1
 80078f2:	f304 040f 	ssat	r4, #16, r4
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	8054      	strh	r4, [r2, #2]
 80078fa:	d006      	beq.n	800790a <arm_shift_q15+0x9e>
 80078fc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8007900:	fa03 f101 	lsl.w	r1, r3, r1
 8007904:	f301 010f 	ssat	r1, #16, r1
 8007908:	8091      	strh	r1, [r2, #4]
 800790a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800790e:	f1bc 0f00 	cmp.w	ip, #0
 8007912:	d025      	beq.n	8007960 <arm_shift_q15+0xf4>
 8007914:	424f      	negs	r7, r1
 8007916:	f100 0508 	add.w	r5, r0, #8
 800791a:	4616      	mov	r6, r2
 800791c:	46e6      	mov	lr, ip
 800791e:	f935 4c08 	ldrsh.w	r4, [r5, #-8]
 8007922:	f935 8c06 	ldrsh.w	r8, [r5, #-6]
 8007926:	413c      	asrs	r4, r7
 8007928:	fa48 f807 	asr.w	r8, r8, r7
 800792c:	b2a4      	uxth	r4, r4
 800792e:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8007932:	6034      	str	r4, [r6, #0]
 8007934:	f935 4c04 	ldrsh.w	r4, [r5, #-4]
 8007938:	f935 8c02 	ldrsh.w	r8, [r5, #-2]
 800793c:	413c      	asrs	r4, r7
 800793e:	b2a4      	uxth	r4, r4
 8007940:	fa48 f807 	asr.w	r8, r8, r7
 8007944:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8007948:	f1be 0e01 	subs.w	lr, lr, #1
 800794c:	6074      	str	r4, [r6, #4]
 800794e:	f105 0508 	add.w	r5, r5, #8
 8007952:	f106 0608 	add.w	r6, r6, #8
 8007956:	d1e2      	bne.n	800791e <arm_shift_q15+0xb2>
 8007958:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 800795c:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8007960:	f013 0303 	ands.w	r3, r3, #3
 8007964:	d0d1      	beq.n	800790a <arm_shift_q15+0x9e>
 8007966:	f9b0 4000 	ldrsh.w	r4, [r0]
 800796a:	4249      	negs	r1, r1
 800796c:	410c      	asrs	r4, r1
 800796e:	3b01      	subs	r3, #1
 8007970:	8014      	strh	r4, [r2, #0]
 8007972:	d0ca      	beq.n	800790a <arm_shift_q15+0x9e>
 8007974:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8007978:	2b01      	cmp	r3, #1
 800797a:	fa44 f401 	asr.w	r4, r4, r1
 800797e:	8054      	strh	r4, [r2, #2]
 8007980:	d0c3      	beq.n	800790a <arm_shift_q15+0x9e>
 8007982:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8007986:	fa43 f101 	asr.w	r1, r3, r1
 800798a:	8091      	strh	r1, [r2, #4]
 800798c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007990 <arm_offset_q15>:
 8007990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007992:	fa1f fc81 	uxth.w	ip, r1
 8007996:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 800799a:	ea4c 4c01 	orr.w	ip, ip, r1, lsl #16
 800799e:	d014      	beq.n	80079ca <arm_offset_q15+0x3a>
 80079a0:	4615      	mov	r5, r2
 80079a2:	4604      	mov	r4, r0
 80079a4:	4677      	mov	r7, lr
 80079a6:	6826      	ldr	r6, [r4, #0]
 80079a8:	fa96 f61c 	qadd16	r6, r6, ip
 80079ac:	3f01      	subs	r7, #1
 80079ae:	602e      	str	r6, [r5, #0]
 80079b0:	6866      	ldr	r6, [r4, #4]
 80079b2:	fa96 f61c 	qadd16	r6, r6, ip
 80079b6:	f104 0408 	add.w	r4, r4, #8
 80079ba:	606e      	str	r6, [r5, #4]
 80079bc:	f105 0508 	add.w	r5, r5, #8
 80079c0:	d1f1      	bne.n	80079a6 <arm_offset_q15+0x16>
 80079c2:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
 80079c6:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
 80079ca:	f013 0303 	ands.w	r3, r3, #3
 80079ce:	d012      	beq.n	80079f6 <arm_offset_q15+0x66>
 80079d0:	3b01      	subs	r3, #1
 80079d2:	f9b0 4000 	ldrsh.w	r4, [r0]
 80079d6:	fa94 f411 	qadd16	r4, r4, r1
 80079da:	8014      	strh	r4, [r2, #0]
 80079dc:	d00b      	beq.n	80079f6 <arm_offset_q15+0x66>
 80079de:	2b01      	cmp	r3, #1
 80079e0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80079e4:	fa94 f411 	qadd16	r4, r4, r1
 80079e8:	8054      	strh	r4, [r2, #2]
 80079ea:	d004      	beq.n	80079f6 <arm_offset_q15+0x66>
 80079ec:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80079f0:	fa93 f111 	qadd16	r1, r3, r1
 80079f4:	8091      	strh	r1, [r2, #4]
 80079f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080079f8 <arm_mult_q15>:
 80079f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fc:	ea5f 0893 	movs.w	r8, r3, lsr #2
 8007a00:	d037      	beq.n	8007a72 <arm_mult_q15+0x7a>
 8007a02:	4694      	mov	ip, r2
 8007a04:	460f      	mov	r7, r1
 8007a06:	4606      	mov	r6, r0
 8007a08:	46c6      	mov	lr, r8
 8007a0a:	f8d6 a000 	ldr.w	sl, [r6]
 8007a0e:	683d      	ldr	r5, [r7, #0]
 8007a10:	6874      	ldr	r4, [r6, #4]
 8007a12:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8007a16:	fb15 f93a 	smultt	r9, r5, sl
 8007a1a:	ea4f 39e9 	mov.w	r9, r9, asr #15
 8007a1e:	3608      	adds	r6, #8
 8007a20:	3708      	adds	r7, #8
 8007a22:	f309 090f 	ssat	r9, #16, r9
 8007a26:	fb1a fa05 	smulbb	sl, sl, r5
 8007a2a:	ea4f 3aea 	mov.w	sl, sl, asr #15
 8007a2e:	f30a 0a0f 	ssat	sl, #16, sl
 8007a32:	fb1b f534 	smultt	r5, fp, r4
 8007a36:	13ed      	asrs	r5, r5, #15
 8007a38:	f305 050f 	ssat	r5, #16, r5
 8007a3c:	fb14 f40b 	smulbb	r4, r4, fp
 8007a40:	13e4      	asrs	r4, r4, #15
 8007a42:	f304 040f 	ssat	r4, #16, r4
 8007a46:	fa1f fa8a 	uxth.w	sl, sl
 8007a4a:	b2a4      	uxth	r4, r4
 8007a4c:	ea4a 4909 	orr.w	r9, sl, r9, lsl #16
 8007a50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007a54:	f1be 0e01 	subs.w	lr, lr, #1
 8007a58:	f8cc 9000 	str.w	r9, [ip]
 8007a5c:	f8cc 4004 	str.w	r4, [ip, #4]
 8007a60:	f10c 0c08 	add.w	ip, ip, #8
 8007a64:	d1d1      	bne.n	8007a0a <arm_mult_q15+0x12>
 8007a66:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 8007a6a:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8007a6e:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 8007a72:	f013 0303 	ands.w	r3, r3, #3
 8007a76:	d01b      	beq.n	8007ab0 <arm_mult_q15+0xb8>
 8007a78:	880c      	ldrh	r4, [r1, #0]
 8007a7a:	8805      	ldrh	r5, [r0, #0]
 8007a7c:	fb14 f405 	smulbb	r4, r4, r5
 8007a80:	13e4      	asrs	r4, r4, #15
 8007a82:	f304 040f 	ssat	r4, #16, r4
 8007a86:	3b01      	subs	r3, #1
 8007a88:	8014      	strh	r4, [r2, #0]
 8007a8a:	d011      	beq.n	8007ab0 <arm_mult_q15+0xb8>
 8007a8c:	884c      	ldrh	r4, [r1, #2]
 8007a8e:	8845      	ldrh	r5, [r0, #2]
 8007a90:	fb14 f405 	smulbb	r4, r4, r5
 8007a94:	13e4      	asrs	r4, r4, #15
 8007a96:	f304 040f 	ssat	r4, #16, r4
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	8054      	strh	r4, [r2, #2]
 8007a9e:	d007      	beq.n	8007ab0 <arm_mult_q15+0xb8>
 8007aa0:	8883      	ldrh	r3, [r0, #4]
 8007aa2:	8889      	ldrh	r1, [r1, #4]
 8007aa4:	fb13 f301 	smulbb	r3, r3, r1
 8007aa8:	13db      	asrs	r3, r3, #15
 8007aaa:	f303 030f 	ssat	r3, #16, r3
 8007aae:	8093      	strh	r3, [r2, #4]
 8007ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007ab4 <arm_cfft_radix4by2_q15>:
 8007ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ab8:	084d      	lsrs	r5, r1, #1
 8007aba:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8007abe:	4616      	mov	r6, r2
 8007ac0:	d047      	beq.n	8007b52 <arm_cfft_radix4by2_q15+0x9e>
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8007b6c <arm_cfft_radix4by2_q15+0xb8>
 8007ac8:	4696      	mov	lr, r2
 8007aca:	4638      	mov	r0, r7
 8007acc:	4621      	mov	r1, r4
 8007ace:	462a      	mov	r2, r5
 8007ad0:	f04f 0c00 	mov.w	ip, #0
 8007ad4:	680b      	ldr	r3, [r1, #0]
 8007ad6:	f8d0 a000 	ldr.w	sl, [r0]
 8007ada:	fa93 f32c 	shadd16	r3, r3, ip
 8007ade:	fa9a fa2c 	shadd16	sl, sl, ip
 8007ae2:	fa93 f92a 	shadd16	r9, r3, sl
 8007ae6:	fad3 fa1a 	qsub16	sl, r3, sl
 8007aea:	f85e 3b04 	ldr.w	r3, [lr], #4
 8007aee:	f841 9b04 	str.w	r9, [r1], #4
 8007af2:	fb23 f90a 	smuad	r9, r3, sl
 8007af6:	fb43 f31a 	smusdx	r3, r3, sl
 8007afa:	ea03 0308 	and.w	r3, r3, r8
 8007afe:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 8007b02:	3a01      	subs	r2, #1
 8007b04:	f840 3b04 	str.w	r3, [r0], #4
 8007b08:	d1e4      	bne.n	8007ad4 <arm_cfft_radix4by2_q15+0x20>
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	4632      	mov	r2, r6
 8007b10:	4620      	mov	r0, r4
 8007b12:	f000 f8e9 	bl	8007ce8 <arm_radix4_butterfly_q15>
 8007b16:	4638      	mov	r0, r7
 8007b18:	4629      	mov	r1, r5
 8007b1a:	4632      	mov	r2, r6
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	f000 f8e3 	bl	8007ce8 <arm_radix4_butterfly_q15>
 8007b22:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8007b26:	4620      	mov	r0, r4
 8007b28:	f9b0 6000 	ldrsh.w	r6, [r0]
 8007b2c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8007b30:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8007b34:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8007b38:	0076      	lsls	r6, r6, #1
 8007b3a:	0064      	lsls	r4, r4, #1
 8007b3c:	0052      	lsls	r2, r2, #1
 8007b3e:	005b      	lsls	r3, r3, #1
 8007b40:	8006      	strh	r6, [r0, #0]
 8007b42:	8044      	strh	r4, [r0, #2]
 8007b44:	8082      	strh	r2, [r0, #4]
 8007b46:	80c3      	strh	r3, [r0, #6]
 8007b48:	3008      	adds	r0, #8
 8007b4a:	4285      	cmp	r5, r0
 8007b4c:	d1ec      	bne.n	8007b28 <arm_cfft_radix4by2_q15+0x74>
 8007b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b52:	4629      	mov	r1, r5
 8007b54:	2302      	movs	r3, #2
 8007b56:	f000 f8c7 	bl	8007ce8 <arm_radix4_butterfly_q15>
 8007b5a:	4632      	mov	r2, r6
 8007b5c:	4629      	mov	r1, r5
 8007b5e:	4638      	mov	r0, r7
 8007b60:	2302      	movs	r3, #2
 8007b62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b66:	f000 b8bf 	b.w	8007ce8 <arm_radix4_butterfly_q15>
 8007b6a:	bf00      	nop
 8007b6c:	ffff0000 	.word	0xffff0000

08007b70 <arm_cfft_radix4by2_inverse_q15>:
 8007b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b74:	084d      	lsrs	r5, r1, #1
 8007b76:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 8007b7a:	4616      	mov	r6, r2
 8007b7c:	d047      	beq.n	8007c0e <arm_cfft_radix4by2_inverse_q15+0x9e>
 8007b7e:	4604      	mov	r4, r0
 8007b80:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8007c28 <arm_cfft_radix4by2_inverse_q15+0xb8>
 8007b84:	4696      	mov	lr, r2
 8007b86:	4638      	mov	r0, r7
 8007b88:	4621      	mov	r1, r4
 8007b8a:	462a      	mov	r2, r5
 8007b8c:	f04f 0c00 	mov.w	ip, #0
 8007b90:	680b      	ldr	r3, [r1, #0]
 8007b92:	f8d0 a000 	ldr.w	sl, [r0]
 8007b96:	fa93 f32c 	shadd16	r3, r3, ip
 8007b9a:	fa9a fa2c 	shadd16	sl, sl, ip
 8007b9e:	fa93 f92a 	shadd16	r9, r3, sl
 8007ba2:	fad3 fa1a 	qsub16	sl, r3, sl
 8007ba6:	f85e 3b04 	ldr.w	r3, [lr], #4
 8007baa:	f841 9b04 	str.w	r9, [r1], #4
 8007bae:	fb43 f90a 	smusd	r9, r3, sl
 8007bb2:	fb23 f31a 	smuadx	r3, r3, sl
 8007bb6:	ea03 0308 	and.w	r3, r3, r8
 8007bba:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 8007bbe:	3a01      	subs	r2, #1
 8007bc0:	f840 3b04 	str.w	r3, [r0], #4
 8007bc4:	d1e4      	bne.n	8007b90 <arm_cfft_radix4by2_inverse_q15+0x20>
 8007bc6:	4629      	mov	r1, r5
 8007bc8:	2302      	movs	r3, #2
 8007bca:	4632      	mov	r2, r6
 8007bcc:	4620      	mov	r0, r4
 8007bce:	f000 fa35 	bl	800803c <arm_radix4_butterfly_inverse_q15>
 8007bd2:	4638      	mov	r0, r7
 8007bd4:	4629      	mov	r1, r5
 8007bd6:	4632      	mov	r2, r6
 8007bd8:	2302      	movs	r3, #2
 8007bda:	f000 fa2f 	bl	800803c <arm_radix4_butterfly_inverse_q15>
 8007bde:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8007be2:	4620      	mov	r0, r4
 8007be4:	f9b0 6000 	ldrsh.w	r6, [r0]
 8007be8:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8007bec:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8007bf0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8007bf4:	0076      	lsls	r6, r6, #1
 8007bf6:	0064      	lsls	r4, r4, #1
 8007bf8:	0052      	lsls	r2, r2, #1
 8007bfa:	005b      	lsls	r3, r3, #1
 8007bfc:	8006      	strh	r6, [r0, #0]
 8007bfe:	8044      	strh	r4, [r0, #2]
 8007c00:	8082      	strh	r2, [r0, #4]
 8007c02:	80c3      	strh	r3, [r0, #6]
 8007c04:	3008      	adds	r0, #8
 8007c06:	4285      	cmp	r5, r0
 8007c08:	d1ec      	bne.n	8007be4 <arm_cfft_radix4by2_inverse_q15+0x74>
 8007c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c0e:	4629      	mov	r1, r5
 8007c10:	2302      	movs	r3, #2
 8007c12:	f000 fa13 	bl	800803c <arm_radix4_butterfly_inverse_q15>
 8007c16:	4632      	mov	r2, r6
 8007c18:	4629      	mov	r1, r5
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c22:	f000 ba0b 	b.w	800803c <arm_radix4_butterfly_inverse_q15>
 8007c26:	bf00      	nop
 8007c28:	ffff0000 	.word	0xffff0000

08007c2c <arm_cfft_q15>:
 8007c2c:	b5e0      	push	{r5, r6, r7, lr}
 8007c2e:	2a01      	cmp	r2, #1
 8007c30:	460f      	mov	r7, r1
 8007c32:	4605      	mov	r5, r0
 8007c34:	8801      	ldrh	r1, [r0, #0]
 8007c36:	461e      	mov	r6, r3
 8007c38:	d02f      	beq.n	8007c9a <arm_cfft_q15+0x6e>
 8007c3a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8007c3e:	d026      	beq.n	8007c8e <arm_cfft_q15+0x62>
 8007c40:	d908      	bls.n	8007c54 <arm_cfft_q15+0x28>
 8007c42:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8007c46:	d017      	beq.n	8007c78 <arm_cfft_q15+0x4c>
 8007c48:	d91b      	bls.n	8007c82 <arm_cfft_q15+0x56>
 8007c4a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8007c4e:	d01e      	beq.n	8007c8e <arm_cfft_q15+0x62>
 8007c50:	b93e      	cbnz	r6, 8007c62 <arm_cfft_q15+0x36>
 8007c52:	bde0      	pop	{r5, r6, r7, pc}
 8007c54:	2940      	cmp	r1, #64	@ 0x40
 8007c56:	d01a      	beq.n	8007c8e <arm_cfft_q15+0x62>
 8007c58:	d90a      	bls.n	8007c70 <arm_cfft_q15+0x44>
 8007c5a:	2980      	cmp	r1, #128	@ 0x80
 8007c5c:	d00c      	beq.n	8007c78 <arm_cfft_q15+0x4c>
 8007c5e:	2e00      	cmp	r6, #0
 8007c60:	d0f7      	beq.n	8007c52 <arm_cfft_q15+0x26>
 8007c62:	68aa      	ldr	r2, [r5, #8]
 8007c64:	89a9      	ldrh	r1, [r5, #12]
 8007c66:	4638      	mov	r0, r7
 8007c68:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
 8007c6c:	f000 bb90 	b.w	8008390 <arm_bitreversal_16>
 8007c70:	2910      	cmp	r1, #16
 8007c72:	d00c      	beq.n	8007c8e <arm_cfft_q15+0x62>
 8007c74:	2920      	cmp	r1, #32
 8007c76:	d1eb      	bne.n	8007c50 <arm_cfft_q15+0x24>
 8007c78:	686a      	ldr	r2, [r5, #4]
 8007c7a:	4638      	mov	r0, r7
 8007c7c:	f7ff ff1a 	bl	8007ab4 <arm_cfft_radix4by2_q15>
 8007c80:	e7e6      	b.n	8007c50 <arm_cfft_q15+0x24>
 8007c82:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007c86:	d0f7      	beq.n	8007c78 <arm_cfft_q15+0x4c>
 8007c88:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007c8c:	d1e0      	bne.n	8007c50 <arm_cfft_q15+0x24>
 8007c8e:	686a      	ldr	r2, [r5, #4]
 8007c90:	2301      	movs	r3, #1
 8007c92:	4638      	mov	r0, r7
 8007c94:	f000 f828 	bl	8007ce8 <arm_radix4_butterfly_q15>
 8007c98:	e7da      	b.n	8007c50 <arm_cfft_q15+0x24>
 8007c9a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8007c9e:	d01d      	beq.n	8007cdc <arm_cfft_q15+0xb0>
 8007ca0:	d907      	bls.n	8007cb2 <arm_cfft_q15+0x86>
 8007ca2:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8007ca6:	d00e      	beq.n	8007cc6 <arm_cfft_q15+0x9a>
 8007ca8:	d912      	bls.n	8007cd0 <arm_cfft_q15+0xa4>
 8007caa:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8007cae:	d1cf      	bne.n	8007c50 <arm_cfft_q15+0x24>
 8007cb0:	e014      	b.n	8007cdc <arm_cfft_q15+0xb0>
 8007cb2:	2940      	cmp	r1, #64	@ 0x40
 8007cb4:	d012      	beq.n	8007cdc <arm_cfft_q15+0xb0>
 8007cb6:	d902      	bls.n	8007cbe <arm_cfft_q15+0x92>
 8007cb8:	2980      	cmp	r1, #128	@ 0x80
 8007cba:	d004      	beq.n	8007cc6 <arm_cfft_q15+0x9a>
 8007cbc:	e7c8      	b.n	8007c50 <arm_cfft_q15+0x24>
 8007cbe:	2910      	cmp	r1, #16
 8007cc0:	d00c      	beq.n	8007cdc <arm_cfft_q15+0xb0>
 8007cc2:	2920      	cmp	r1, #32
 8007cc4:	d1c4      	bne.n	8007c50 <arm_cfft_q15+0x24>
 8007cc6:	686a      	ldr	r2, [r5, #4]
 8007cc8:	4638      	mov	r0, r7
 8007cca:	f7ff ff51 	bl	8007b70 <arm_cfft_radix4by2_inverse_q15>
 8007cce:	e7bf      	b.n	8007c50 <arm_cfft_q15+0x24>
 8007cd0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007cd4:	d0f7      	beq.n	8007cc6 <arm_cfft_q15+0x9a>
 8007cd6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007cda:	d1b9      	bne.n	8007c50 <arm_cfft_q15+0x24>
 8007cdc:	686a      	ldr	r2, [r5, #4]
 8007cde:	2301      	movs	r3, #1
 8007ce0:	4638      	mov	r0, r7
 8007ce2:	f000 f9ab 	bl	800803c <arm_radix4_butterfly_inverse_q15>
 8007ce6:	e7b3      	b.n	8007c50 <arm_cfft_q15+0x24>

08007ce8 <arm_radix4_butterfly_q15>:
 8007ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cec:	b093      	sub	sp, #76	@ 0x4c
 8007cee:	f021 0a03 	bic.w	sl, r1, #3
 8007cf2:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 8007cf6:	9210      	str	r2, [sp, #64]	@ 0x40
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	ea4f 0291 	mov.w	r2, r1, lsr #2
 8007cfe:	eb0c 050a 	add.w	r5, ip, sl
 8007d02:	9101      	str	r1, [sp, #4]
 8007d04:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007d06:	9303      	str	r3, [sp, #12]
 8007d08:	4482      	add	sl, r0
 8007d0a:	9211      	str	r2, [sp, #68]	@ 0x44
 8007d0c:	f040 8124 	bne.w	8007f58 <arm_radix4_butterfly_q15+0x270>
 8007d10:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8007d12:	f8df e324 	ldr.w	lr, [pc, #804]	@ 8008038 <arm_radix4_butterfly_q15+0x350>
 8007d16:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8007d18:	f8cd a008 	str.w	sl, [sp, #8]
 8007d1c:	4693      	mov	fp, r2
 8007d1e:	4690      	mov	r8, r2
 8007d20:	4657      	mov	r7, sl
 8007d22:	2300      	movs	r3, #0
 8007d24:	4691      	mov	r9, r2
 8007d26:	6830      	ldr	r0, [r6, #0]
 8007d28:	f8dc 2000 	ldr.w	r2, [ip]
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	fa90 f023 	shadd16	r0, r0, r3
 8007d32:	fa91 f123 	shadd16	r1, r1, r3
 8007d36:	fa90 f023 	shadd16	r0, r0, r3
 8007d3a:	fa91 fa23 	shadd16	sl, r1, r3
 8007d3e:	fa92 f223 	shadd16	r2, r2, r3
 8007d42:	6829      	ldr	r1, [r5, #0]
 8007d44:	fa92 f223 	shadd16	r2, r2, r3
 8007d48:	fa91 f123 	shadd16	r1, r1, r3
 8007d4c:	fa90 f412 	qadd16	r4, r0, r2
 8007d50:	fa91 f123 	shadd16	r1, r1, r3
 8007d54:	fa9a f111 	qadd16	r1, sl, r1
 8007d58:	fa94 fa21 	shadd16	sl, r4, r1
 8007d5c:	f846 ab04 	str.w	sl, [r6], #4
 8007d60:	fad4 f411 	qsub16	r4, r4, r1
 8007d64:	fad0 f212 	qsub16	r2, r0, r2
 8007d68:	f85b 1b08 	ldr.w	r1, [fp], #8
 8007d6c:	fb21 f004 	smuad	r0, r1, r4
 8007d70:	fb41 f114 	smusdx	r1, r1, r4
 8007d74:	ea01 010e 	and.w	r1, r1, lr
 8007d78:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8007d7c:	6838      	ldr	r0, [r7, #0]
 8007d7e:	f847 1b04 	str.w	r1, [r7], #4
 8007d82:	fa90 f023 	shadd16	r0, r0, r3
 8007d86:	682c      	ldr	r4, [r5, #0]
 8007d88:	fa90 f023 	shadd16	r0, r0, r3
 8007d8c:	fa94 f423 	shadd16	r4, r4, r3
 8007d90:	f859 1b04 	ldr.w	r1, [r9], #4
 8007d94:	fa94 f423 	shadd16	r4, r4, r3
 8007d98:	fad0 f014 	qsub16	r0, r0, r4
 8007d9c:	faa2 f410 	qasx	r4, r2, r0
 8007da0:	fae2 f210 	qsax	r2, r2, r0
 8007da4:	fb21 fa02 	smuad	sl, r1, r2
 8007da8:	fb41 f212 	smusdx	r2, r1, r2
 8007dac:	ea02 020e 	and.w	r2, r2, lr
 8007db0:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 8007db4:	f84c 2b04 	str.w	r2, [ip], #4
 8007db8:	f858 2b0c 	ldr.w	r2, [r8], #12
 8007dbc:	fb22 f104 	smuad	r1, r2, r4
 8007dc0:	fb42 f214 	smusdx	r2, r2, r4
 8007dc4:	ea02 020e 	and.w	r2, r2, lr
 8007dc8:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8007dcc:	f845 2b04 	str.w	r2, [r5], #4
 8007dd0:	9a02      	ldr	r2, [sp, #8]
 8007dd2:	42b2      	cmp	r2, r6
 8007dd4:	d1a7      	bne.n	8007d26 <arm_radix4_butterfly_q15+0x3e>
 8007dd6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007dd8:	9b03      	ldr	r3, [sp, #12]
 8007dda:	2a04      	cmp	r2, #4
 8007ddc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007de0:	f240 8127 	bls.w	8008032 <arm_radix4_butterfly_q15+0x34a>
 8007de4:	f8df a250 	ldr.w	sl, [pc, #592]	@ 8008038 <arm_radix4_butterfly_q15+0x350>
 8007de8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007dea:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007dec:	9102      	str	r1, [sp, #8]
 8007dee:	4608      	mov	r0, r1
 8007df0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007df4:	0889      	lsrs	r1, r1, #2
 8007df6:	0092      	lsls	r2, r2, #2
 8007df8:	0086      	lsls	r6, r0, #2
 8007dfa:	9801      	ldr	r0, [sp, #4]
 8007dfc:	920d      	str	r2, [sp, #52]	@ 0x34
 8007dfe:	008c      	lsls	r4, r1, #2
 8007e00:	009a      	lsls	r2, r3, #2
 8007e02:	00db      	lsls	r3, r3, #3
 8007e04:	4288      	cmp	r0, r1
 8007e06:	940a      	str	r4, [sp, #40]	@ 0x28
 8007e08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e0a:	4604      	mov	r4, r0
 8007e0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007e0e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8007e10:	910e      	str	r1, [sp, #56]	@ 0x38
 8007e12:	bf28      	it	cs
 8007e14:	460c      	movcs	r4, r1
 8007e16:	e9cd 0305 	strd	r0, r3, [sp, #20]
 8007e1a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8007e1e:	9308      	str	r3, [sp, #32]
 8007e20:	9307      	str	r3, [sp, #28]
 8007e22:	2300      	movs	r3, #0
 8007e24:	940c      	str	r4, [sp, #48]	@ 0x30
 8007e26:	9104      	str	r1, [sp, #16]
 8007e28:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e2a:	9303      	str	r3, [sp, #12]
 8007e2c:	9b08      	ldr	r3, [sp, #32]
 8007e2e:	9a05      	ldr	r2, [sp, #20]
 8007e30:	f8d3 9000 	ldr.w	r9, [r3]
 8007e34:	9b07      	ldr	r3, [sp, #28]
 8007e36:	9f03      	ldr	r7, [sp, #12]
 8007e38:	f8d3 8000 	ldr.w	r8, [r3]
 8007e3c:	9b06      	ldr	r3, [sp, #24]
 8007e3e:	f8d3 e000 	ldr.w	lr, [r3]
 8007e42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e44:	4615      	mov	r5, r2
 8007e46:	1898      	adds	r0, r3, r2
 8007e48:	9a04      	ldr	r2, [sp, #16]
 8007e4a:	4614      	mov	r4, r2
 8007e4c:	1899      	adds	r1, r3, r2
 8007e4e:	682a      	ldr	r2, [r5, #0]
 8007e50:	6823      	ldr	r3, [r4, #0]
 8007e52:	f8d0 b000 	ldr.w	fp, [r0]
 8007e56:	fa92 fc13 	qadd16	ip, r2, r3
 8007e5a:	fad2 f213 	qsub16	r2, r2, r3
 8007e5e:	680b      	ldr	r3, [r1, #0]
 8007e60:	fa9b f313 	qadd16	r3, fp, r3
 8007e64:	fa9c fb23 	shadd16	fp, ip, r3
 8007e68:	fadc f323 	shsub16	r3, ip, r3
 8007e6c:	f04f 0c00 	mov.w	ip, #0
 8007e70:	fa9b fb2c 	shadd16	fp, fp, ip
 8007e74:	f8c5 b000 	str.w	fp, [r5]
 8007e78:	4435      	add	r5, r6
 8007e7a:	fb28 fb03 	smuad	fp, r8, r3
 8007e7e:	fb48 f313 	smusdx	r3, r8, r3
 8007e82:	ea03 030a 	and.w	r3, r3, sl
 8007e86:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 8007e8a:	f8d0 b000 	ldr.w	fp, [r0]
 8007e8e:	6003      	str	r3, [r0, #0]
 8007e90:	f8d1 c000 	ldr.w	ip, [r1]
 8007e94:	fadb fc1c 	qsub16	ip, fp, ip
 8007e98:	4430      	add	r0, r6
 8007e9a:	faa2 f32c 	shasx	r3, r2, ip
 8007e9e:	fae2 f22c 	shsax	r2, r2, ip
 8007ea2:	fb29 fc02 	smuad	ip, r9, r2
 8007ea6:	fb49 f212 	smusdx	r2, r9, r2
 8007eaa:	ea02 020a 	and.w	r2, r2, sl
 8007eae:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 8007eb2:	6022      	str	r2, [r4, #0]
 8007eb4:	4434      	add	r4, r6
 8007eb6:	fb2e f203 	smuad	r2, lr, r3
 8007eba:	fb4e f313 	smusdx	r3, lr, r3
 8007ebe:	ea03 030a 	and.w	r3, r3, sl
 8007ec2:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8007ec6:	9a02      	ldr	r2, [sp, #8]
 8007ec8:	600b      	str	r3, [r1, #0]
 8007eca:	9b01      	ldr	r3, [sp, #4]
 8007ecc:	4417      	add	r7, r2
 8007ece:	42bb      	cmp	r3, r7
 8007ed0:	4431      	add	r1, r6
 8007ed2:	d8bc      	bhi.n	8007e4e <arm_radix4_butterfly_q15+0x166>
 8007ed4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8007ed8:	440a      	add	r2, r1
 8007eda:	9208      	str	r2, [sp, #32]
 8007edc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ede:	9a07      	ldr	r2, [sp, #28]
 8007ee0:	9b03      	ldr	r3, [sp, #12]
 8007ee2:	440a      	add	r2, r1
 8007ee4:	9207      	str	r2, [sp, #28]
 8007ee6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007ee8:	9a06      	ldr	r2, [sp, #24]
 8007eea:	440a      	add	r2, r1
 8007eec:	9206      	str	r2, [sp, #24]
 8007eee:	9a05      	ldr	r2, [sp, #20]
 8007ef0:	3204      	adds	r2, #4
 8007ef2:	9205      	str	r2, [sp, #20]
 8007ef4:	9a04      	ldr	r2, [sp, #16]
 8007ef6:	3204      	adds	r2, #4
 8007ef8:	9204      	str	r2, [sp, #16]
 8007efa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007efc:	3301      	adds	r3, #1
 8007efe:	4293      	cmp	r3, r2
 8007f00:	9303      	str	r3, [sp, #12]
 8007f02:	d393      	bcc.n	8007e2c <arm_radix4_butterfly_q15+0x144>
 8007f04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f08:	2a04      	cmp	r2, #4
 8007f0a:	f63f af6e 	bhi.w	8007dea <arm_radix4_butterfly_q15+0x102>
 8007f0e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8007f10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f12:	689d      	ldr	r5, [r3, #8]
 8007f14:	68de      	ldr	r6, [r3, #12]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	6859      	ldr	r1, [r3, #4]
 8007f1a:	fa92 f015 	qadd16	r0, r2, r5
 8007f1e:	3c01      	subs	r4, #1
 8007f20:	fad2 f215 	qsub16	r2, r2, r5
 8007f24:	f103 0310 	add.w	r3, r3, #16
 8007f28:	fa91 f516 	qadd16	r5, r1, r6
 8007f2c:	fad1 f116 	qsub16	r1, r1, r6
 8007f30:	fa90 f625 	shadd16	r6, r0, r5
 8007f34:	fad0 f025 	shsub16	r0, r0, r5
 8007f38:	f843 6c10 	str.w	r6, [r3, #-16]
 8007f3c:	f843 0c0c 	str.w	r0, [r3, #-12]
 8007f40:	fae2 f021 	shsax	r0, r2, r1
 8007f44:	faa2 f221 	shasx	r2, r2, r1
 8007f48:	f843 0c08 	str.w	r0, [r3, #-8]
 8007f4c:	f843 2c04 	str.w	r2, [r3, #-4]
 8007f50:	d1df      	bne.n	8007f12 <arm_radix4_butterfly_q15+0x22a>
 8007f52:	b013      	add	sp, #76	@ 0x4c
 8007f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f58:	2400      	movs	r4, #0
 8007f5a:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 8008038 <arm_radix4_butterfly_q15+0x350>
 8007f5e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8007f60:	4623      	mov	r3, r4
 8007f62:	4680      	mov	r8, r0
 8007f64:	4691      	mov	r9, r2
 8007f66:	f8d8 0000 	ldr.w	r0, [r8]
 8007f6a:	f8dc 2000 	ldr.w	r2, [ip]
 8007f6e:	f8da 1000 	ldr.w	r1, [sl]
 8007f72:	fa90 f023 	shadd16	r0, r0, r3
 8007f76:	fa91 f123 	shadd16	r1, r1, r3
 8007f7a:	fa90 f023 	shadd16	r0, r0, r3
 8007f7e:	fa91 fb23 	shadd16	fp, r1, r3
 8007f82:	fa92 f223 	shadd16	r2, r2, r3
 8007f86:	6829      	ldr	r1, [r5, #0]
 8007f88:	fa92 f223 	shadd16	r2, r2, r3
 8007f8c:	fa91 f123 	shadd16	r1, r1, r3
 8007f90:	fa90 f612 	qadd16	r6, r0, r2
 8007f94:	fa91 f123 	shadd16	r1, r1, r3
 8007f98:	fa9b f111 	qadd16	r1, fp, r1
 8007f9c:	fa96 fb21 	shadd16	fp, r6, r1
 8007fa0:	f848 bb04 	str.w	fp, [r8], #4
 8007fa4:	fad6 f611 	qsub16	r6, r6, r1
 8007fa8:	fad0 f212 	qsub16	r2, r0, r2
 8007fac:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 8007fb0:	fb21 f006 	smuad	r0, r1, r6
 8007fb4:	fb41 f116 	smusdx	r1, r1, r6
 8007fb8:	ea01 010e 	and.w	r1, r1, lr
 8007fbc:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8007fc0:	f8da 0000 	ldr.w	r0, [sl]
 8007fc4:	f84a 1b04 	str.w	r1, [sl], #4
 8007fc8:	fa90 f023 	shadd16	r0, r0, r3
 8007fcc:	682e      	ldr	r6, [r5, #0]
 8007fce:	fa90 f023 	shadd16	r0, r0, r3
 8007fd2:	fa96 f623 	shadd16	r6, r6, r3
 8007fd6:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8007fda:	fa96 f623 	shadd16	r6, r6, r3
 8007fde:	fad0 f016 	qsub16	r0, r0, r6
 8007fe2:	faa2 f610 	qasx	r6, r2, r0
 8007fe6:	fae2 f210 	qsax	r2, r2, r0
 8007fea:	fb21 fb02 	smuad	fp, r1, r2
 8007fee:	fb41 f212 	smusdx	r2, r1, r2
 8007ff2:	ea02 020e 	and.w	r2, r2, lr
 8007ff6:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 8007ffa:	f84c 2b04 	str.w	r2, [ip], #4
 8007ffe:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8008002:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8008006:	fb22 f106 	smuad	r1, r2, r6
 800800a:	fb42 f216 	smusdx	r2, r2, r6
 800800e:	ea02 020e 	and.w	r2, r2, lr
 8008012:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8008016:	f845 2b04 	str.w	r2, [r5], #4
 800801a:	9a03      	ldr	r2, [sp, #12]
 800801c:	f1b9 0901 	subs.w	r9, r9, #1
 8008020:	4414      	add	r4, r2
 8008022:	d1a0      	bne.n	8007f66 <arm_radix4_butterfly_q15+0x27e>
 8008024:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008026:	9b03      	ldr	r3, [sp, #12]
 8008028:	2a04      	cmp	r2, #4
 800802a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800802e:	f63f aed9 	bhi.w	8007de4 <arm_radix4_butterfly_q15+0xfc>
 8008032:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008034:	4614      	mov	r4, r2
 8008036:	e76c      	b.n	8007f12 <arm_radix4_butterfly_q15+0x22a>
 8008038:	ffff0000 	.word	0xffff0000

0800803c <arm_radix4_butterfly_inverse_q15>:
 800803c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008040:	b093      	sub	sp, #76	@ 0x4c
 8008042:	f021 0a03 	bic.w	sl, r1, #3
 8008046:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 800804a:	9210      	str	r2, [sp, #64]	@ 0x40
 800804c:	2b01      	cmp	r3, #1
 800804e:	ea4f 0291 	mov.w	r2, r1, lsr #2
 8008052:	eb0c 050a 	add.w	r5, ip, sl
 8008056:	9101      	str	r1, [sp, #4]
 8008058:	900f      	str	r0, [sp, #60]	@ 0x3c
 800805a:	9303      	str	r3, [sp, #12]
 800805c:	4482      	add	sl, r0
 800805e:	9211      	str	r2, [sp, #68]	@ 0x44
 8008060:	f040 8124 	bne.w	80082ac <arm_radix4_butterfly_inverse_q15+0x270>
 8008064:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008066:	f8df e324 	ldr.w	lr, [pc, #804]	@ 800838c <arm_radix4_butterfly_inverse_q15+0x350>
 800806a:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 800806c:	f8cd a008 	str.w	sl, [sp, #8]
 8008070:	4693      	mov	fp, r2
 8008072:	4690      	mov	r8, r2
 8008074:	4657      	mov	r7, sl
 8008076:	2300      	movs	r3, #0
 8008078:	4691      	mov	r9, r2
 800807a:	6830      	ldr	r0, [r6, #0]
 800807c:	f8dc 2000 	ldr.w	r2, [ip]
 8008080:	6839      	ldr	r1, [r7, #0]
 8008082:	fa90 f023 	shadd16	r0, r0, r3
 8008086:	fa91 f123 	shadd16	r1, r1, r3
 800808a:	fa90 f023 	shadd16	r0, r0, r3
 800808e:	fa91 fa23 	shadd16	sl, r1, r3
 8008092:	fa92 f223 	shadd16	r2, r2, r3
 8008096:	6829      	ldr	r1, [r5, #0]
 8008098:	fa92 f223 	shadd16	r2, r2, r3
 800809c:	fa91 f123 	shadd16	r1, r1, r3
 80080a0:	fa90 f412 	qadd16	r4, r0, r2
 80080a4:	fa91 f123 	shadd16	r1, r1, r3
 80080a8:	fa9a f111 	qadd16	r1, sl, r1
 80080ac:	fa94 fa21 	shadd16	sl, r4, r1
 80080b0:	f846 ab04 	str.w	sl, [r6], #4
 80080b4:	fad4 f411 	qsub16	r4, r4, r1
 80080b8:	fad0 f212 	qsub16	r2, r0, r2
 80080bc:	f85b 1b08 	ldr.w	r1, [fp], #8
 80080c0:	fb41 f004 	smusd	r0, r1, r4
 80080c4:	fb21 f114 	smuadx	r1, r1, r4
 80080c8:	ea01 010e 	and.w	r1, r1, lr
 80080cc:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 80080d0:	6838      	ldr	r0, [r7, #0]
 80080d2:	f847 1b04 	str.w	r1, [r7], #4
 80080d6:	fa90 f023 	shadd16	r0, r0, r3
 80080da:	682c      	ldr	r4, [r5, #0]
 80080dc:	fa90 f023 	shadd16	r0, r0, r3
 80080e0:	fa94 f423 	shadd16	r4, r4, r3
 80080e4:	f859 1b04 	ldr.w	r1, [r9], #4
 80080e8:	fa94 f423 	shadd16	r4, r4, r3
 80080ec:	fad0 f014 	qsub16	r0, r0, r4
 80080f0:	fae2 f410 	qsax	r4, r2, r0
 80080f4:	faa2 f210 	qasx	r2, r2, r0
 80080f8:	fb41 fa02 	smusd	sl, r1, r2
 80080fc:	fb21 f212 	smuadx	r2, r1, r2
 8008100:	ea02 020e 	and.w	r2, r2, lr
 8008104:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 8008108:	f84c 2b04 	str.w	r2, [ip], #4
 800810c:	f858 2b0c 	ldr.w	r2, [r8], #12
 8008110:	fb42 f104 	smusd	r1, r2, r4
 8008114:	fb22 f214 	smuadx	r2, r2, r4
 8008118:	ea02 020e 	and.w	r2, r2, lr
 800811c:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8008120:	f845 2b04 	str.w	r2, [r5], #4
 8008124:	9a02      	ldr	r2, [sp, #8]
 8008126:	42b2      	cmp	r2, r6
 8008128:	d1a7      	bne.n	800807a <arm_radix4_butterfly_inverse_q15+0x3e>
 800812a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800812c:	9b03      	ldr	r3, [sp, #12]
 800812e:	2a04      	cmp	r2, #4
 8008130:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008134:	f240 8127 	bls.w	8008386 <arm_radix4_butterfly_inverse_q15+0x34a>
 8008138:	f8df a250 	ldr.w	sl, [pc, #592]	@ 800838c <arm_radix4_butterfly_inverse_q15+0x350>
 800813c:	920e      	str	r2, [sp, #56]	@ 0x38
 800813e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008140:	9102      	str	r1, [sp, #8]
 8008142:	4608      	mov	r0, r1
 8008144:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8008148:	0889      	lsrs	r1, r1, #2
 800814a:	0092      	lsls	r2, r2, #2
 800814c:	0086      	lsls	r6, r0, #2
 800814e:	9801      	ldr	r0, [sp, #4]
 8008150:	920d      	str	r2, [sp, #52]	@ 0x34
 8008152:	008c      	lsls	r4, r1, #2
 8008154:	009a      	lsls	r2, r3, #2
 8008156:	00db      	lsls	r3, r3, #3
 8008158:	4288      	cmp	r0, r1
 800815a:	940a      	str	r4, [sp, #40]	@ 0x28
 800815c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800815e:	4604      	mov	r4, r0
 8008160:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008162:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8008164:	910e      	str	r1, [sp, #56]	@ 0x38
 8008166:	bf28      	it	cs
 8008168:	460c      	movcs	r4, r1
 800816a:	e9cd 0305 	strd	r0, r3, [sp, #20]
 800816e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8008172:	9308      	str	r3, [sp, #32]
 8008174:	9307      	str	r3, [sp, #28]
 8008176:	2300      	movs	r3, #0
 8008178:	940c      	str	r4, [sp, #48]	@ 0x30
 800817a:	9104      	str	r1, [sp, #16]
 800817c:	9209      	str	r2, [sp, #36]	@ 0x24
 800817e:	9303      	str	r3, [sp, #12]
 8008180:	9b08      	ldr	r3, [sp, #32]
 8008182:	9a05      	ldr	r2, [sp, #20]
 8008184:	f8d3 9000 	ldr.w	r9, [r3]
 8008188:	9b07      	ldr	r3, [sp, #28]
 800818a:	9f03      	ldr	r7, [sp, #12]
 800818c:	f8d3 8000 	ldr.w	r8, [r3]
 8008190:	9b06      	ldr	r3, [sp, #24]
 8008192:	f8d3 e000 	ldr.w	lr, [r3]
 8008196:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008198:	4615      	mov	r5, r2
 800819a:	1898      	adds	r0, r3, r2
 800819c:	9a04      	ldr	r2, [sp, #16]
 800819e:	4614      	mov	r4, r2
 80081a0:	1899      	adds	r1, r3, r2
 80081a2:	682a      	ldr	r2, [r5, #0]
 80081a4:	6823      	ldr	r3, [r4, #0]
 80081a6:	f8d0 b000 	ldr.w	fp, [r0]
 80081aa:	fa92 fc13 	qadd16	ip, r2, r3
 80081ae:	fad2 f213 	qsub16	r2, r2, r3
 80081b2:	680b      	ldr	r3, [r1, #0]
 80081b4:	fa9b f313 	qadd16	r3, fp, r3
 80081b8:	fa9c fb23 	shadd16	fp, ip, r3
 80081bc:	fadc f323 	shsub16	r3, ip, r3
 80081c0:	f04f 0c00 	mov.w	ip, #0
 80081c4:	fa9b fb2c 	shadd16	fp, fp, ip
 80081c8:	f8c5 b000 	str.w	fp, [r5]
 80081cc:	4435      	add	r5, r6
 80081ce:	fb48 fb03 	smusd	fp, r8, r3
 80081d2:	fb28 f313 	smuadx	r3, r8, r3
 80081d6:	ea03 030a 	and.w	r3, r3, sl
 80081da:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 80081de:	f8d0 b000 	ldr.w	fp, [r0]
 80081e2:	6003      	str	r3, [r0, #0]
 80081e4:	f8d1 c000 	ldr.w	ip, [r1]
 80081e8:	fadb fc1c 	qsub16	ip, fp, ip
 80081ec:	4430      	add	r0, r6
 80081ee:	fae2 f32c 	shsax	r3, r2, ip
 80081f2:	faa2 f22c 	shasx	r2, r2, ip
 80081f6:	fb49 fc02 	smusd	ip, r9, r2
 80081fa:	fb29 f212 	smuadx	r2, r9, r2
 80081fe:	ea02 020a 	and.w	r2, r2, sl
 8008202:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 8008206:	6022      	str	r2, [r4, #0]
 8008208:	4434      	add	r4, r6
 800820a:	fb4e f203 	smusd	r2, lr, r3
 800820e:	fb2e f313 	smuadx	r3, lr, r3
 8008212:	ea03 030a 	and.w	r3, r3, sl
 8008216:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 800821a:	9a02      	ldr	r2, [sp, #8]
 800821c:	600b      	str	r3, [r1, #0]
 800821e:	9b01      	ldr	r3, [sp, #4]
 8008220:	4417      	add	r7, r2
 8008222:	42bb      	cmp	r3, r7
 8008224:	4431      	add	r1, r6
 8008226:	d8bc      	bhi.n	80081a2 <arm_radix4_butterfly_inverse_q15+0x166>
 8008228:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 800822c:	440a      	add	r2, r1
 800822e:	9208      	str	r2, [sp, #32]
 8008230:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008232:	9a07      	ldr	r2, [sp, #28]
 8008234:	9b03      	ldr	r3, [sp, #12]
 8008236:	440a      	add	r2, r1
 8008238:	9207      	str	r2, [sp, #28]
 800823a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800823c:	9a06      	ldr	r2, [sp, #24]
 800823e:	440a      	add	r2, r1
 8008240:	9206      	str	r2, [sp, #24]
 8008242:	9a05      	ldr	r2, [sp, #20]
 8008244:	3204      	adds	r2, #4
 8008246:	9205      	str	r2, [sp, #20]
 8008248:	9a04      	ldr	r2, [sp, #16]
 800824a:	3204      	adds	r2, #4
 800824c:	9204      	str	r2, [sp, #16]
 800824e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008250:	3301      	adds	r3, #1
 8008252:	4293      	cmp	r3, r2
 8008254:	9303      	str	r3, [sp, #12]
 8008256:	d393      	bcc.n	8008180 <arm_radix4_butterfly_inverse_q15+0x144>
 8008258:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800825a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800825c:	2a04      	cmp	r2, #4
 800825e:	f63f af6e 	bhi.w	800813e <arm_radix4_butterfly_inverse_q15+0x102>
 8008262:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8008264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008266:	689d      	ldr	r5, [r3, #8]
 8008268:	68de      	ldr	r6, [r3, #12]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	6859      	ldr	r1, [r3, #4]
 800826e:	fa92 f015 	qadd16	r0, r2, r5
 8008272:	3c01      	subs	r4, #1
 8008274:	fad2 f215 	qsub16	r2, r2, r5
 8008278:	f103 0310 	add.w	r3, r3, #16
 800827c:	fa91 f516 	qadd16	r5, r1, r6
 8008280:	fad1 f116 	qsub16	r1, r1, r6
 8008284:	fa90 f625 	shadd16	r6, r0, r5
 8008288:	fad0 f025 	shsub16	r0, r0, r5
 800828c:	f843 6c10 	str.w	r6, [r3, #-16]
 8008290:	f843 0c0c 	str.w	r0, [r3, #-12]
 8008294:	faa2 f021 	shasx	r0, r2, r1
 8008298:	fae2 f221 	shsax	r2, r2, r1
 800829c:	f843 0c08 	str.w	r0, [r3, #-8]
 80082a0:	f843 2c04 	str.w	r2, [r3, #-4]
 80082a4:	d1df      	bne.n	8008266 <arm_radix4_butterfly_inverse_q15+0x22a>
 80082a6:	b013      	add	sp, #76	@ 0x4c
 80082a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ac:	2400      	movs	r4, #0
 80082ae:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 800838c <arm_radix4_butterfly_inverse_q15+0x350>
 80082b2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80082b4:	4623      	mov	r3, r4
 80082b6:	4680      	mov	r8, r0
 80082b8:	4691      	mov	r9, r2
 80082ba:	f8d8 0000 	ldr.w	r0, [r8]
 80082be:	f8dc 2000 	ldr.w	r2, [ip]
 80082c2:	f8da 1000 	ldr.w	r1, [sl]
 80082c6:	fa90 f023 	shadd16	r0, r0, r3
 80082ca:	fa91 f123 	shadd16	r1, r1, r3
 80082ce:	fa90 f023 	shadd16	r0, r0, r3
 80082d2:	fa91 fb23 	shadd16	fp, r1, r3
 80082d6:	fa92 f223 	shadd16	r2, r2, r3
 80082da:	6829      	ldr	r1, [r5, #0]
 80082dc:	fa92 f223 	shadd16	r2, r2, r3
 80082e0:	fa91 f123 	shadd16	r1, r1, r3
 80082e4:	fa90 f612 	qadd16	r6, r0, r2
 80082e8:	fa91 f123 	shadd16	r1, r1, r3
 80082ec:	fa9b f111 	qadd16	r1, fp, r1
 80082f0:	fa96 fb21 	shadd16	fp, r6, r1
 80082f4:	f848 bb04 	str.w	fp, [r8], #4
 80082f8:	fad6 f611 	qsub16	r6, r6, r1
 80082fc:	fad0 f212 	qsub16	r2, r0, r2
 8008300:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 8008304:	fb41 f006 	smusd	r0, r1, r6
 8008308:	fb21 f116 	smuadx	r1, r1, r6
 800830c:	ea01 010e 	and.w	r1, r1, lr
 8008310:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8008314:	f8da 0000 	ldr.w	r0, [sl]
 8008318:	f84a 1b04 	str.w	r1, [sl], #4
 800831c:	fa90 f023 	shadd16	r0, r0, r3
 8008320:	682e      	ldr	r6, [r5, #0]
 8008322:	fa90 f023 	shadd16	r0, r0, r3
 8008326:	fa96 f623 	shadd16	r6, r6, r3
 800832a:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800832e:	fa96 f623 	shadd16	r6, r6, r3
 8008332:	fad0 f016 	qsub16	r0, r0, r6
 8008336:	fae2 f610 	qsax	r6, r2, r0
 800833a:	faa2 f210 	qasx	r2, r2, r0
 800833e:	fb41 fb02 	smusd	fp, r1, r2
 8008342:	fb21 f212 	smuadx	r2, r1, r2
 8008346:	ea02 020e 	and.w	r2, r2, lr
 800834a:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 800834e:	f84c 2b04 	str.w	r2, [ip], #4
 8008352:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8008356:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800835a:	fb42 f106 	smusd	r1, r2, r6
 800835e:	fb22 f216 	smuadx	r2, r2, r6
 8008362:	ea02 020e 	and.w	r2, r2, lr
 8008366:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800836a:	f845 2b04 	str.w	r2, [r5], #4
 800836e:	9a03      	ldr	r2, [sp, #12]
 8008370:	f1b9 0901 	subs.w	r9, r9, #1
 8008374:	4414      	add	r4, r2
 8008376:	d1a0      	bne.n	80082ba <arm_radix4_butterfly_inverse_q15+0x27e>
 8008378:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800837a:	9b03      	ldr	r3, [sp, #12]
 800837c:	2a04      	cmp	r2, #4
 800837e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008382:	f63f aed9 	bhi.w	8008138 <arm_radix4_butterfly_inverse_q15+0xfc>
 8008386:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008388:	4614      	mov	r4, r2
 800838a:	e76c      	b.n	8008266 <arm_radix4_butterfly_inverse_q15+0x22a>
 800838c:	ffff0000 	.word	0xffff0000

08008390 <arm_bitreversal_16>:
 8008390:	b1f1      	cbz	r1, 80083d0 <arm_bitreversal_16+0x40>
 8008392:	b4f0      	push	{r4, r5, r6, r7}
 8008394:	2400      	movs	r4, #0
 8008396:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 800839a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 800839e:	886d      	ldrh	r5, [r5, #2]
 80083a0:	08ad      	lsrs	r5, r5, #2
 80083a2:	089b      	lsrs	r3, r3, #2
 80083a4:	f830 6015 	ldrh.w	r6, [r0, r5, lsl #1]
 80083a8:	f830 7013 	ldrh.w	r7, [r0, r3, lsl #1]
 80083ac:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 80083b0:	006e      	lsls	r6, r5, #1
 80083b2:	005b      	lsls	r3, r3, #1
 80083b4:	f820 7015 	strh.w	r7, [r0, r5, lsl #1]
 80083b8:	3302      	adds	r3, #2
 80083ba:	1cb5      	adds	r5, r6, #2
 80083bc:	3402      	adds	r4, #2
 80083be:	b2a4      	uxth	r4, r4
 80083c0:	5ac6      	ldrh	r6, [r0, r3]
 80083c2:	5b47      	ldrh	r7, [r0, r5]
 80083c4:	52c7      	strh	r7, [r0, r3]
 80083c6:	42a1      	cmp	r1, r4
 80083c8:	5346      	strh	r6, [r0, r5]
 80083ca:	d8e4      	bhi.n	8008396 <arm_bitreversal_16+0x6>
 80083cc:	bcf0      	pop	{r4, r5, r6, r7}
 80083ce:	4770      	bx	lr
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop

080083d4 <__cvt>:
 80083d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083d8:	ec57 6b10 	vmov	r6, r7, d0
 80083dc:	2f00      	cmp	r7, #0
 80083de:	460c      	mov	r4, r1
 80083e0:	4619      	mov	r1, r3
 80083e2:	463b      	mov	r3, r7
 80083e4:	bfbb      	ittet	lt
 80083e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80083ea:	461f      	movlt	r7, r3
 80083ec:	2300      	movge	r3, #0
 80083ee:	232d      	movlt	r3, #45	@ 0x2d
 80083f0:	700b      	strb	r3, [r1, #0]
 80083f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80083f8:	4691      	mov	r9, r2
 80083fa:	f023 0820 	bic.w	r8, r3, #32
 80083fe:	bfbc      	itt	lt
 8008400:	4632      	movlt	r2, r6
 8008402:	4616      	movlt	r6, r2
 8008404:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008408:	d005      	beq.n	8008416 <__cvt+0x42>
 800840a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800840e:	d100      	bne.n	8008412 <__cvt+0x3e>
 8008410:	3401      	adds	r4, #1
 8008412:	2102      	movs	r1, #2
 8008414:	e000      	b.n	8008418 <__cvt+0x44>
 8008416:	2103      	movs	r1, #3
 8008418:	ab03      	add	r3, sp, #12
 800841a:	9301      	str	r3, [sp, #4]
 800841c:	ab02      	add	r3, sp, #8
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	ec47 6b10 	vmov	d0, r6, r7
 8008424:	4653      	mov	r3, sl
 8008426:	4622      	mov	r2, r4
 8008428:	f000 fffe 	bl	8009428 <_dtoa_r>
 800842c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008430:	4605      	mov	r5, r0
 8008432:	d119      	bne.n	8008468 <__cvt+0x94>
 8008434:	f019 0f01 	tst.w	r9, #1
 8008438:	d00e      	beq.n	8008458 <__cvt+0x84>
 800843a:	eb00 0904 	add.w	r9, r0, r4
 800843e:	2200      	movs	r2, #0
 8008440:	2300      	movs	r3, #0
 8008442:	4630      	mov	r0, r6
 8008444:	4639      	mov	r1, r7
 8008446:	f7f8 fb4f 	bl	8000ae8 <__aeabi_dcmpeq>
 800844a:	b108      	cbz	r0, 8008450 <__cvt+0x7c>
 800844c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008450:	2230      	movs	r2, #48	@ 0x30
 8008452:	9b03      	ldr	r3, [sp, #12]
 8008454:	454b      	cmp	r3, r9
 8008456:	d31e      	bcc.n	8008496 <__cvt+0xc2>
 8008458:	9b03      	ldr	r3, [sp, #12]
 800845a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800845c:	1b5b      	subs	r3, r3, r5
 800845e:	4628      	mov	r0, r5
 8008460:	6013      	str	r3, [r2, #0]
 8008462:	b004      	add	sp, #16
 8008464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008468:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800846c:	eb00 0904 	add.w	r9, r0, r4
 8008470:	d1e5      	bne.n	800843e <__cvt+0x6a>
 8008472:	7803      	ldrb	r3, [r0, #0]
 8008474:	2b30      	cmp	r3, #48	@ 0x30
 8008476:	d10a      	bne.n	800848e <__cvt+0xba>
 8008478:	2200      	movs	r2, #0
 800847a:	2300      	movs	r3, #0
 800847c:	4630      	mov	r0, r6
 800847e:	4639      	mov	r1, r7
 8008480:	f7f8 fb32 	bl	8000ae8 <__aeabi_dcmpeq>
 8008484:	b918      	cbnz	r0, 800848e <__cvt+0xba>
 8008486:	f1c4 0401 	rsb	r4, r4, #1
 800848a:	f8ca 4000 	str.w	r4, [sl]
 800848e:	f8da 3000 	ldr.w	r3, [sl]
 8008492:	4499      	add	r9, r3
 8008494:	e7d3      	b.n	800843e <__cvt+0x6a>
 8008496:	1c59      	adds	r1, r3, #1
 8008498:	9103      	str	r1, [sp, #12]
 800849a:	701a      	strb	r2, [r3, #0]
 800849c:	e7d9      	b.n	8008452 <__cvt+0x7e>

0800849e <__exponent>:
 800849e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084a0:	2900      	cmp	r1, #0
 80084a2:	bfba      	itte	lt
 80084a4:	4249      	neglt	r1, r1
 80084a6:	232d      	movlt	r3, #45	@ 0x2d
 80084a8:	232b      	movge	r3, #43	@ 0x2b
 80084aa:	2909      	cmp	r1, #9
 80084ac:	7002      	strb	r2, [r0, #0]
 80084ae:	7043      	strb	r3, [r0, #1]
 80084b0:	dd29      	ble.n	8008506 <__exponent+0x68>
 80084b2:	f10d 0307 	add.w	r3, sp, #7
 80084b6:	461d      	mov	r5, r3
 80084b8:	270a      	movs	r7, #10
 80084ba:	461a      	mov	r2, r3
 80084bc:	fbb1 f6f7 	udiv	r6, r1, r7
 80084c0:	fb07 1416 	mls	r4, r7, r6, r1
 80084c4:	3430      	adds	r4, #48	@ 0x30
 80084c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80084ca:	460c      	mov	r4, r1
 80084cc:	2c63      	cmp	r4, #99	@ 0x63
 80084ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80084d2:	4631      	mov	r1, r6
 80084d4:	dcf1      	bgt.n	80084ba <__exponent+0x1c>
 80084d6:	3130      	adds	r1, #48	@ 0x30
 80084d8:	1e94      	subs	r4, r2, #2
 80084da:	f803 1c01 	strb.w	r1, [r3, #-1]
 80084de:	1c41      	adds	r1, r0, #1
 80084e0:	4623      	mov	r3, r4
 80084e2:	42ab      	cmp	r3, r5
 80084e4:	d30a      	bcc.n	80084fc <__exponent+0x5e>
 80084e6:	f10d 0309 	add.w	r3, sp, #9
 80084ea:	1a9b      	subs	r3, r3, r2
 80084ec:	42ac      	cmp	r4, r5
 80084ee:	bf88      	it	hi
 80084f0:	2300      	movhi	r3, #0
 80084f2:	3302      	adds	r3, #2
 80084f4:	4403      	add	r3, r0
 80084f6:	1a18      	subs	r0, r3, r0
 80084f8:	b003      	add	sp, #12
 80084fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008500:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008504:	e7ed      	b.n	80084e2 <__exponent+0x44>
 8008506:	2330      	movs	r3, #48	@ 0x30
 8008508:	3130      	adds	r1, #48	@ 0x30
 800850a:	7083      	strb	r3, [r0, #2]
 800850c:	70c1      	strb	r1, [r0, #3]
 800850e:	1d03      	adds	r3, r0, #4
 8008510:	e7f1      	b.n	80084f6 <__exponent+0x58>
	...

08008514 <_printf_float>:
 8008514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008518:	b08d      	sub	sp, #52	@ 0x34
 800851a:	460c      	mov	r4, r1
 800851c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008520:	4616      	mov	r6, r2
 8008522:	461f      	mov	r7, r3
 8008524:	4605      	mov	r5, r0
 8008526:	f000 fe71 	bl	800920c <_localeconv_r>
 800852a:	6803      	ldr	r3, [r0, #0]
 800852c:	9304      	str	r3, [sp, #16]
 800852e:	4618      	mov	r0, r3
 8008530:	f7f7 feae 	bl	8000290 <strlen>
 8008534:	2300      	movs	r3, #0
 8008536:	930a      	str	r3, [sp, #40]	@ 0x28
 8008538:	f8d8 3000 	ldr.w	r3, [r8]
 800853c:	9005      	str	r0, [sp, #20]
 800853e:	3307      	adds	r3, #7
 8008540:	f023 0307 	bic.w	r3, r3, #7
 8008544:	f103 0208 	add.w	r2, r3, #8
 8008548:	f894 a018 	ldrb.w	sl, [r4, #24]
 800854c:	f8d4 b000 	ldr.w	fp, [r4]
 8008550:	f8c8 2000 	str.w	r2, [r8]
 8008554:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008558:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800855c:	9307      	str	r3, [sp, #28]
 800855e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008562:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008566:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800856a:	4b9c      	ldr	r3, [pc, #624]	@ (80087dc <_printf_float+0x2c8>)
 800856c:	f04f 32ff 	mov.w	r2, #4294967295
 8008570:	f7f8 faec 	bl	8000b4c <__aeabi_dcmpun>
 8008574:	bb70      	cbnz	r0, 80085d4 <_printf_float+0xc0>
 8008576:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800857a:	4b98      	ldr	r3, [pc, #608]	@ (80087dc <_printf_float+0x2c8>)
 800857c:	f04f 32ff 	mov.w	r2, #4294967295
 8008580:	f7f8 fac6 	bl	8000b10 <__aeabi_dcmple>
 8008584:	bb30      	cbnz	r0, 80085d4 <_printf_float+0xc0>
 8008586:	2200      	movs	r2, #0
 8008588:	2300      	movs	r3, #0
 800858a:	4640      	mov	r0, r8
 800858c:	4649      	mov	r1, r9
 800858e:	f7f8 fab5 	bl	8000afc <__aeabi_dcmplt>
 8008592:	b110      	cbz	r0, 800859a <_printf_float+0x86>
 8008594:	232d      	movs	r3, #45	@ 0x2d
 8008596:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800859a:	4a91      	ldr	r2, [pc, #580]	@ (80087e0 <_printf_float+0x2cc>)
 800859c:	4b91      	ldr	r3, [pc, #580]	@ (80087e4 <_printf_float+0x2d0>)
 800859e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80085a2:	bf8c      	ite	hi
 80085a4:	4690      	movhi	r8, r2
 80085a6:	4698      	movls	r8, r3
 80085a8:	2303      	movs	r3, #3
 80085aa:	6123      	str	r3, [r4, #16]
 80085ac:	f02b 0304 	bic.w	r3, fp, #4
 80085b0:	6023      	str	r3, [r4, #0]
 80085b2:	f04f 0900 	mov.w	r9, #0
 80085b6:	9700      	str	r7, [sp, #0]
 80085b8:	4633      	mov	r3, r6
 80085ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 80085bc:	4621      	mov	r1, r4
 80085be:	4628      	mov	r0, r5
 80085c0:	f000 f9d2 	bl	8008968 <_printf_common>
 80085c4:	3001      	adds	r0, #1
 80085c6:	f040 808d 	bne.w	80086e4 <_printf_float+0x1d0>
 80085ca:	f04f 30ff 	mov.w	r0, #4294967295
 80085ce:	b00d      	add	sp, #52	@ 0x34
 80085d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d4:	4642      	mov	r2, r8
 80085d6:	464b      	mov	r3, r9
 80085d8:	4640      	mov	r0, r8
 80085da:	4649      	mov	r1, r9
 80085dc:	f7f8 fab6 	bl	8000b4c <__aeabi_dcmpun>
 80085e0:	b140      	cbz	r0, 80085f4 <_printf_float+0xe0>
 80085e2:	464b      	mov	r3, r9
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	bfbc      	itt	lt
 80085e8:	232d      	movlt	r3, #45	@ 0x2d
 80085ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80085ee:	4a7e      	ldr	r2, [pc, #504]	@ (80087e8 <_printf_float+0x2d4>)
 80085f0:	4b7e      	ldr	r3, [pc, #504]	@ (80087ec <_printf_float+0x2d8>)
 80085f2:	e7d4      	b.n	800859e <_printf_float+0x8a>
 80085f4:	6863      	ldr	r3, [r4, #4]
 80085f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80085fa:	9206      	str	r2, [sp, #24]
 80085fc:	1c5a      	adds	r2, r3, #1
 80085fe:	d13b      	bne.n	8008678 <_printf_float+0x164>
 8008600:	2306      	movs	r3, #6
 8008602:	6063      	str	r3, [r4, #4]
 8008604:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008608:	2300      	movs	r3, #0
 800860a:	6022      	str	r2, [r4, #0]
 800860c:	9303      	str	r3, [sp, #12]
 800860e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008610:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008614:	ab09      	add	r3, sp, #36	@ 0x24
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	6861      	ldr	r1, [r4, #4]
 800861a:	ec49 8b10 	vmov	d0, r8, r9
 800861e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008622:	4628      	mov	r0, r5
 8008624:	f7ff fed6 	bl	80083d4 <__cvt>
 8008628:	9b06      	ldr	r3, [sp, #24]
 800862a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800862c:	2b47      	cmp	r3, #71	@ 0x47
 800862e:	4680      	mov	r8, r0
 8008630:	d129      	bne.n	8008686 <_printf_float+0x172>
 8008632:	1cc8      	adds	r0, r1, #3
 8008634:	db02      	blt.n	800863c <_printf_float+0x128>
 8008636:	6863      	ldr	r3, [r4, #4]
 8008638:	4299      	cmp	r1, r3
 800863a:	dd41      	ble.n	80086c0 <_printf_float+0x1ac>
 800863c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008640:	fa5f fa8a 	uxtb.w	sl, sl
 8008644:	3901      	subs	r1, #1
 8008646:	4652      	mov	r2, sl
 8008648:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800864c:	9109      	str	r1, [sp, #36]	@ 0x24
 800864e:	f7ff ff26 	bl	800849e <__exponent>
 8008652:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008654:	1813      	adds	r3, r2, r0
 8008656:	2a01      	cmp	r2, #1
 8008658:	4681      	mov	r9, r0
 800865a:	6123      	str	r3, [r4, #16]
 800865c:	dc02      	bgt.n	8008664 <_printf_float+0x150>
 800865e:	6822      	ldr	r2, [r4, #0]
 8008660:	07d2      	lsls	r2, r2, #31
 8008662:	d501      	bpl.n	8008668 <_printf_float+0x154>
 8008664:	3301      	adds	r3, #1
 8008666:	6123      	str	r3, [r4, #16]
 8008668:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800866c:	2b00      	cmp	r3, #0
 800866e:	d0a2      	beq.n	80085b6 <_printf_float+0xa2>
 8008670:	232d      	movs	r3, #45	@ 0x2d
 8008672:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008676:	e79e      	b.n	80085b6 <_printf_float+0xa2>
 8008678:	9a06      	ldr	r2, [sp, #24]
 800867a:	2a47      	cmp	r2, #71	@ 0x47
 800867c:	d1c2      	bne.n	8008604 <_printf_float+0xf0>
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1c0      	bne.n	8008604 <_printf_float+0xf0>
 8008682:	2301      	movs	r3, #1
 8008684:	e7bd      	b.n	8008602 <_printf_float+0xee>
 8008686:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800868a:	d9db      	bls.n	8008644 <_printf_float+0x130>
 800868c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008690:	d118      	bne.n	80086c4 <_printf_float+0x1b0>
 8008692:	2900      	cmp	r1, #0
 8008694:	6863      	ldr	r3, [r4, #4]
 8008696:	dd0b      	ble.n	80086b0 <_printf_float+0x19c>
 8008698:	6121      	str	r1, [r4, #16]
 800869a:	b913      	cbnz	r3, 80086a2 <_printf_float+0x18e>
 800869c:	6822      	ldr	r2, [r4, #0]
 800869e:	07d0      	lsls	r0, r2, #31
 80086a0:	d502      	bpl.n	80086a8 <_printf_float+0x194>
 80086a2:	3301      	adds	r3, #1
 80086a4:	440b      	add	r3, r1
 80086a6:	6123      	str	r3, [r4, #16]
 80086a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80086aa:	f04f 0900 	mov.w	r9, #0
 80086ae:	e7db      	b.n	8008668 <_printf_float+0x154>
 80086b0:	b913      	cbnz	r3, 80086b8 <_printf_float+0x1a4>
 80086b2:	6822      	ldr	r2, [r4, #0]
 80086b4:	07d2      	lsls	r2, r2, #31
 80086b6:	d501      	bpl.n	80086bc <_printf_float+0x1a8>
 80086b8:	3302      	adds	r3, #2
 80086ba:	e7f4      	b.n	80086a6 <_printf_float+0x192>
 80086bc:	2301      	movs	r3, #1
 80086be:	e7f2      	b.n	80086a6 <_printf_float+0x192>
 80086c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80086c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086c6:	4299      	cmp	r1, r3
 80086c8:	db05      	blt.n	80086d6 <_printf_float+0x1c2>
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	6121      	str	r1, [r4, #16]
 80086ce:	07d8      	lsls	r0, r3, #31
 80086d0:	d5ea      	bpl.n	80086a8 <_printf_float+0x194>
 80086d2:	1c4b      	adds	r3, r1, #1
 80086d4:	e7e7      	b.n	80086a6 <_printf_float+0x192>
 80086d6:	2900      	cmp	r1, #0
 80086d8:	bfd4      	ite	le
 80086da:	f1c1 0202 	rsble	r2, r1, #2
 80086de:	2201      	movgt	r2, #1
 80086e0:	4413      	add	r3, r2
 80086e2:	e7e0      	b.n	80086a6 <_printf_float+0x192>
 80086e4:	6823      	ldr	r3, [r4, #0]
 80086e6:	055a      	lsls	r2, r3, #21
 80086e8:	d407      	bmi.n	80086fa <_printf_float+0x1e6>
 80086ea:	6923      	ldr	r3, [r4, #16]
 80086ec:	4642      	mov	r2, r8
 80086ee:	4631      	mov	r1, r6
 80086f0:	4628      	mov	r0, r5
 80086f2:	47b8      	blx	r7
 80086f4:	3001      	adds	r0, #1
 80086f6:	d12b      	bne.n	8008750 <_printf_float+0x23c>
 80086f8:	e767      	b.n	80085ca <_printf_float+0xb6>
 80086fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80086fe:	f240 80dd 	bls.w	80088bc <_printf_float+0x3a8>
 8008702:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008706:	2200      	movs	r2, #0
 8008708:	2300      	movs	r3, #0
 800870a:	f7f8 f9ed 	bl	8000ae8 <__aeabi_dcmpeq>
 800870e:	2800      	cmp	r0, #0
 8008710:	d033      	beq.n	800877a <_printf_float+0x266>
 8008712:	4a37      	ldr	r2, [pc, #220]	@ (80087f0 <_printf_float+0x2dc>)
 8008714:	2301      	movs	r3, #1
 8008716:	4631      	mov	r1, r6
 8008718:	4628      	mov	r0, r5
 800871a:	47b8      	blx	r7
 800871c:	3001      	adds	r0, #1
 800871e:	f43f af54 	beq.w	80085ca <_printf_float+0xb6>
 8008722:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008726:	4543      	cmp	r3, r8
 8008728:	db02      	blt.n	8008730 <_printf_float+0x21c>
 800872a:	6823      	ldr	r3, [r4, #0]
 800872c:	07d8      	lsls	r0, r3, #31
 800872e:	d50f      	bpl.n	8008750 <_printf_float+0x23c>
 8008730:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008734:	4631      	mov	r1, r6
 8008736:	4628      	mov	r0, r5
 8008738:	47b8      	blx	r7
 800873a:	3001      	adds	r0, #1
 800873c:	f43f af45 	beq.w	80085ca <_printf_float+0xb6>
 8008740:	f04f 0900 	mov.w	r9, #0
 8008744:	f108 38ff 	add.w	r8, r8, #4294967295
 8008748:	f104 0a1a 	add.w	sl, r4, #26
 800874c:	45c8      	cmp	r8, r9
 800874e:	dc09      	bgt.n	8008764 <_printf_float+0x250>
 8008750:	6823      	ldr	r3, [r4, #0]
 8008752:	079b      	lsls	r3, r3, #30
 8008754:	f100 8103 	bmi.w	800895e <_printf_float+0x44a>
 8008758:	68e0      	ldr	r0, [r4, #12]
 800875a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800875c:	4298      	cmp	r0, r3
 800875e:	bfb8      	it	lt
 8008760:	4618      	movlt	r0, r3
 8008762:	e734      	b.n	80085ce <_printf_float+0xba>
 8008764:	2301      	movs	r3, #1
 8008766:	4652      	mov	r2, sl
 8008768:	4631      	mov	r1, r6
 800876a:	4628      	mov	r0, r5
 800876c:	47b8      	blx	r7
 800876e:	3001      	adds	r0, #1
 8008770:	f43f af2b 	beq.w	80085ca <_printf_float+0xb6>
 8008774:	f109 0901 	add.w	r9, r9, #1
 8008778:	e7e8      	b.n	800874c <_printf_float+0x238>
 800877a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800877c:	2b00      	cmp	r3, #0
 800877e:	dc39      	bgt.n	80087f4 <_printf_float+0x2e0>
 8008780:	4a1b      	ldr	r2, [pc, #108]	@ (80087f0 <_printf_float+0x2dc>)
 8008782:	2301      	movs	r3, #1
 8008784:	4631      	mov	r1, r6
 8008786:	4628      	mov	r0, r5
 8008788:	47b8      	blx	r7
 800878a:	3001      	adds	r0, #1
 800878c:	f43f af1d 	beq.w	80085ca <_printf_float+0xb6>
 8008790:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008794:	ea59 0303 	orrs.w	r3, r9, r3
 8008798:	d102      	bne.n	80087a0 <_printf_float+0x28c>
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	07d9      	lsls	r1, r3, #31
 800879e:	d5d7      	bpl.n	8008750 <_printf_float+0x23c>
 80087a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087a4:	4631      	mov	r1, r6
 80087a6:	4628      	mov	r0, r5
 80087a8:	47b8      	blx	r7
 80087aa:	3001      	adds	r0, #1
 80087ac:	f43f af0d 	beq.w	80085ca <_printf_float+0xb6>
 80087b0:	f04f 0a00 	mov.w	sl, #0
 80087b4:	f104 0b1a 	add.w	fp, r4, #26
 80087b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ba:	425b      	negs	r3, r3
 80087bc:	4553      	cmp	r3, sl
 80087be:	dc01      	bgt.n	80087c4 <_printf_float+0x2b0>
 80087c0:	464b      	mov	r3, r9
 80087c2:	e793      	b.n	80086ec <_printf_float+0x1d8>
 80087c4:	2301      	movs	r3, #1
 80087c6:	465a      	mov	r2, fp
 80087c8:	4631      	mov	r1, r6
 80087ca:	4628      	mov	r0, r5
 80087cc:	47b8      	blx	r7
 80087ce:	3001      	adds	r0, #1
 80087d0:	f43f aefb 	beq.w	80085ca <_printf_float+0xb6>
 80087d4:	f10a 0a01 	add.w	sl, sl, #1
 80087d8:	e7ee      	b.n	80087b8 <_printf_float+0x2a4>
 80087da:	bf00      	nop
 80087dc:	7fefffff 	.word	0x7fefffff
 80087e0:	0801d2ec 	.word	0x0801d2ec
 80087e4:	0801d2e8 	.word	0x0801d2e8
 80087e8:	0801d2f4 	.word	0x0801d2f4
 80087ec:	0801d2f0 	.word	0x0801d2f0
 80087f0:	0801d2f8 	.word	0x0801d2f8
 80087f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80087f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80087fa:	4553      	cmp	r3, sl
 80087fc:	bfa8      	it	ge
 80087fe:	4653      	movge	r3, sl
 8008800:	2b00      	cmp	r3, #0
 8008802:	4699      	mov	r9, r3
 8008804:	dc36      	bgt.n	8008874 <_printf_float+0x360>
 8008806:	f04f 0b00 	mov.w	fp, #0
 800880a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800880e:	f104 021a 	add.w	r2, r4, #26
 8008812:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008814:	9306      	str	r3, [sp, #24]
 8008816:	eba3 0309 	sub.w	r3, r3, r9
 800881a:	455b      	cmp	r3, fp
 800881c:	dc31      	bgt.n	8008882 <_printf_float+0x36e>
 800881e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008820:	459a      	cmp	sl, r3
 8008822:	dc3a      	bgt.n	800889a <_printf_float+0x386>
 8008824:	6823      	ldr	r3, [r4, #0]
 8008826:	07da      	lsls	r2, r3, #31
 8008828:	d437      	bmi.n	800889a <_printf_float+0x386>
 800882a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800882c:	ebaa 0903 	sub.w	r9, sl, r3
 8008830:	9b06      	ldr	r3, [sp, #24]
 8008832:	ebaa 0303 	sub.w	r3, sl, r3
 8008836:	4599      	cmp	r9, r3
 8008838:	bfa8      	it	ge
 800883a:	4699      	movge	r9, r3
 800883c:	f1b9 0f00 	cmp.w	r9, #0
 8008840:	dc33      	bgt.n	80088aa <_printf_float+0x396>
 8008842:	f04f 0800 	mov.w	r8, #0
 8008846:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800884a:	f104 0b1a 	add.w	fp, r4, #26
 800884e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008850:	ebaa 0303 	sub.w	r3, sl, r3
 8008854:	eba3 0309 	sub.w	r3, r3, r9
 8008858:	4543      	cmp	r3, r8
 800885a:	f77f af79 	ble.w	8008750 <_printf_float+0x23c>
 800885e:	2301      	movs	r3, #1
 8008860:	465a      	mov	r2, fp
 8008862:	4631      	mov	r1, r6
 8008864:	4628      	mov	r0, r5
 8008866:	47b8      	blx	r7
 8008868:	3001      	adds	r0, #1
 800886a:	f43f aeae 	beq.w	80085ca <_printf_float+0xb6>
 800886e:	f108 0801 	add.w	r8, r8, #1
 8008872:	e7ec      	b.n	800884e <_printf_float+0x33a>
 8008874:	4642      	mov	r2, r8
 8008876:	4631      	mov	r1, r6
 8008878:	4628      	mov	r0, r5
 800887a:	47b8      	blx	r7
 800887c:	3001      	adds	r0, #1
 800887e:	d1c2      	bne.n	8008806 <_printf_float+0x2f2>
 8008880:	e6a3      	b.n	80085ca <_printf_float+0xb6>
 8008882:	2301      	movs	r3, #1
 8008884:	4631      	mov	r1, r6
 8008886:	4628      	mov	r0, r5
 8008888:	9206      	str	r2, [sp, #24]
 800888a:	47b8      	blx	r7
 800888c:	3001      	adds	r0, #1
 800888e:	f43f ae9c 	beq.w	80085ca <_printf_float+0xb6>
 8008892:	9a06      	ldr	r2, [sp, #24]
 8008894:	f10b 0b01 	add.w	fp, fp, #1
 8008898:	e7bb      	b.n	8008812 <_printf_float+0x2fe>
 800889a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800889e:	4631      	mov	r1, r6
 80088a0:	4628      	mov	r0, r5
 80088a2:	47b8      	blx	r7
 80088a4:	3001      	adds	r0, #1
 80088a6:	d1c0      	bne.n	800882a <_printf_float+0x316>
 80088a8:	e68f      	b.n	80085ca <_printf_float+0xb6>
 80088aa:	9a06      	ldr	r2, [sp, #24]
 80088ac:	464b      	mov	r3, r9
 80088ae:	4442      	add	r2, r8
 80088b0:	4631      	mov	r1, r6
 80088b2:	4628      	mov	r0, r5
 80088b4:	47b8      	blx	r7
 80088b6:	3001      	adds	r0, #1
 80088b8:	d1c3      	bne.n	8008842 <_printf_float+0x32e>
 80088ba:	e686      	b.n	80085ca <_printf_float+0xb6>
 80088bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80088c0:	f1ba 0f01 	cmp.w	sl, #1
 80088c4:	dc01      	bgt.n	80088ca <_printf_float+0x3b6>
 80088c6:	07db      	lsls	r3, r3, #31
 80088c8:	d536      	bpl.n	8008938 <_printf_float+0x424>
 80088ca:	2301      	movs	r3, #1
 80088cc:	4642      	mov	r2, r8
 80088ce:	4631      	mov	r1, r6
 80088d0:	4628      	mov	r0, r5
 80088d2:	47b8      	blx	r7
 80088d4:	3001      	adds	r0, #1
 80088d6:	f43f ae78 	beq.w	80085ca <_printf_float+0xb6>
 80088da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088de:	4631      	mov	r1, r6
 80088e0:	4628      	mov	r0, r5
 80088e2:	47b8      	blx	r7
 80088e4:	3001      	adds	r0, #1
 80088e6:	f43f ae70 	beq.w	80085ca <_printf_float+0xb6>
 80088ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80088ee:	2200      	movs	r2, #0
 80088f0:	2300      	movs	r3, #0
 80088f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088f6:	f7f8 f8f7 	bl	8000ae8 <__aeabi_dcmpeq>
 80088fa:	b9c0      	cbnz	r0, 800892e <_printf_float+0x41a>
 80088fc:	4653      	mov	r3, sl
 80088fe:	f108 0201 	add.w	r2, r8, #1
 8008902:	4631      	mov	r1, r6
 8008904:	4628      	mov	r0, r5
 8008906:	47b8      	blx	r7
 8008908:	3001      	adds	r0, #1
 800890a:	d10c      	bne.n	8008926 <_printf_float+0x412>
 800890c:	e65d      	b.n	80085ca <_printf_float+0xb6>
 800890e:	2301      	movs	r3, #1
 8008910:	465a      	mov	r2, fp
 8008912:	4631      	mov	r1, r6
 8008914:	4628      	mov	r0, r5
 8008916:	47b8      	blx	r7
 8008918:	3001      	adds	r0, #1
 800891a:	f43f ae56 	beq.w	80085ca <_printf_float+0xb6>
 800891e:	f108 0801 	add.w	r8, r8, #1
 8008922:	45d0      	cmp	r8, sl
 8008924:	dbf3      	blt.n	800890e <_printf_float+0x3fa>
 8008926:	464b      	mov	r3, r9
 8008928:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800892c:	e6df      	b.n	80086ee <_printf_float+0x1da>
 800892e:	f04f 0800 	mov.w	r8, #0
 8008932:	f104 0b1a 	add.w	fp, r4, #26
 8008936:	e7f4      	b.n	8008922 <_printf_float+0x40e>
 8008938:	2301      	movs	r3, #1
 800893a:	4642      	mov	r2, r8
 800893c:	e7e1      	b.n	8008902 <_printf_float+0x3ee>
 800893e:	2301      	movs	r3, #1
 8008940:	464a      	mov	r2, r9
 8008942:	4631      	mov	r1, r6
 8008944:	4628      	mov	r0, r5
 8008946:	47b8      	blx	r7
 8008948:	3001      	adds	r0, #1
 800894a:	f43f ae3e 	beq.w	80085ca <_printf_float+0xb6>
 800894e:	f108 0801 	add.w	r8, r8, #1
 8008952:	68e3      	ldr	r3, [r4, #12]
 8008954:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008956:	1a5b      	subs	r3, r3, r1
 8008958:	4543      	cmp	r3, r8
 800895a:	dcf0      	bgt.n	800893e <_printf_float+0x42a>
 800895c:	e6fc      	b.n	8008758 <_printf_float+0x244>
 800895e:	f04f 0800 	mov.w	r8, #0
 8008962:	f104 0919 	add.w	r9, r4, #25
 8008966:	e7f4      	b.n	8008952 <_printf_float+0x43e>

08008968 <_printf_common>:
 8008968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800896c:	4616      	mov	r6, r2
 800896e:	4698      	mov	r8, r3
 8008970:	688a      	ldr	r2, [r1, #8]
 8008972:	690b      	ldr	r3, [r1, #16]
 8008974:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008978:	4293      	cmp	r3, r2
 800897a:	bfb8      	it	lt
 800897c:	4613      	movlt	r3, r2
 800897e:	6033      	str	r3, [r6, #0]
 8008980:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008984:	4607      	mov	r7, r0
 8008986:	460c      	mov	r4, r1
 8008988:	b10a      	cbz	r2, 800898e <_printf_common+0x26>
 800898a:	3301      	adds	r3, #1
 800898c:	6033      	str	r3, [r6, #0]
 800898e:	6823      	ldr	r3, [r4, #0]
 8008990:	0699      	lsls	r1, r3, #26
 8008992:	bf42      	ittt	mi
 8008994:	6833      	ldrmi	r3, [r6, #0]
 8008996:	3302      	addmi	r3, #2
 8008998:	6033      	strmi	r3, [r6, #0]
 800899a:	6825      	ldr	r5, [r4, #0]
 800899c:	f015 0506 	ands.w	r5, r5, #6
 80089a0:	d106      	bne.n	80089b0 <_printf_common+0x48>
 80089a2:	f104 0a19 	add.w	sl, r4, #25
 80089a6:	68e3      	ldr	r3, [r4, #12]
 80089a8:	6832      	ldr	r2, [r6, #0]
 80089aa:	1a9b      	subs	r3, r3, r2
 80089ac:	42ab      	cmp	r3, r5
 80089ae:	dc26      	bgt.n	80089fe <_printf_common+0x96>
 80089b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089b4:	6822      	ldr	r2, [r4, #0]
 80089b6:	3b00      	subs	r3, #0
 80089b8:	bf18      	it	ne
 80089ba:	2301      	movne	r3, #1
 80089bc:	0692      	lsls	r2, r2, #26
 80089be:	d42b      	bmi.n	8008a18 <_printf_common+0xb0>
 80089c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80089c4:	4641      	mov	r1, r8
 80089c6:	4638      	mov	r0, r7
 80089c8:	47c8      	blx	r9
 80089ca:	3001      	adds	r0, #1
 80089cc:	d01e      	beq.n	8008a0c <_printf_common+0xa4>
 80089ce:	6823      	ldr	r3, [r4, #0]
 80089d0:	6922      	ldr	r2, [r4, #16]
 80089d2:	f003 0306 	and.w	r3, r3, #6
 80089d6:	2b04      	cmp	r3, #4
 80089d8:	bf02      	ittt	eq
 80089da:	68e5      	ldreq	r5, [r4, #12]
 80089dc:	6833      	ldreq	r3, [r6, #0]
 80089de:	1aed      	subeq	r5, r5, r3
 80089e0:	68a3      	ldr	r3, [r4, #8]
 80089e2:	bf0c      	ite	eq
 80089e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089e8:	2500      	movne	r5, #0
 80089ea:	4293      	cmp	r3, r2
 80089ec:	bfc4      	itt	gt
 80089ee:	1a9b      	subgt	r3, r3, r2
 80089f0:	18ed      	addgt	r5, r5, r3
 80089f2:	2600      	movs	r6, #0
 80089f4:	341a      	adds	r4, #26
 80089f6:	42b5      	cmp	r5, r6
 80089f8:	d11a      	bne.n	8008a30 <_printf_common+0xc8>
 80089fa:	2000      	movs	r0, #0
 80089fc:	e008      	b.n	8008a10 <_printf_common+0xa8>
 80089fe:	2301      	movs	r3, #1
 8008a00:	4652      	mov	r2, sl
 8008a02:	4641      	mov	r1, r8
 8008a04:	4638      	mov	r0, r7
 8008a06:	47c8      	blx	r9
 8008a08:	3001      	adds	r0, #1
 8008a0a:	d103      	bne.n	8008a14 <_printf_common+0xac>
 8008a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a14:	3501      	adds	r5, #1
 8008a16:	e7c6      	b.n	80089a6 <_printf_common+0x3e>
 8008a18:	18e1      	adds	r1, r4, r3
 8008a1a:	1c5a      	adds	r2, r3, #1
 8008a1c:	2030      	movs	r0, #48	@ 0x30
 8008a1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a22:	4422      	add	r2, r4
 8008a24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a2c:	3302      	adds	r3, #2
 8008a2e:	e7c7      	b.n	80089c0 <_printf_common+0x58>
 8008a30:	2301      	movs	r3, #1
 8008a32:	4622      	mov	r2, r4
 8008a34:	4641      	mov	r1, r8
 8008a36:	4638      	mov	r0, r7
 8008a38:	47c8      	blx	r9
 8008a3a:	3001      	adds	r0, #1
 8008a3c:	d0e6      	beq.n	8008a0c <_printf_common+0xa4>
 8008a3e:	3601      	adds	r6, #1
 8008a40:	e7d9      	b.n	80089f6 <_printf_common+0x8e>
	...

08008a44 <_printf_i>:
 8008a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a48:	7e0f      	ldrb	r7, [r1, #24]
 8008a4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a4c:	2f78      	cmp	r7, #120	@ 0x78
 8008a4e:	4691      	mov	r9, r2
 8008a50:	4680      	mov	r8, r0
 8008a52:	460c      	mov	r4, r1
 8008a54:	469a      	mov	sl, r3
 8008a56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a5a:	d807      	bhi.n	8008a6c <_printf_i+0x28>
 8008a5c:	2f62      	cmp	r7, #98	@ 0x62
 8008a5e:	d80a      	bhi.n	8008a76 <_printf_i+0x32>
 8008a60:	2f00      	cmp	r7, #0
 8008a62:	f000 80d1 	beq.w	8008c08 <_printf_i+0x1c4>
 8008a66:	2f58      	cmp	r7, #88	@ 0x58
 8008a68:	f000 80b8 	beq.w	8008bdc <_printf_i+0x198>
 8008a6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a74:	e03a      	b.n	8008aec <_printf_i+0xa8>
 8008a76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a7a:	2b15      	cmp	r3, #21
 8008a7c:	d8f6      	bhi.n	8008a6c <_printf_i+0x28>
 8008a7e:	a101      	add	r1, pc, #4	@ (adr r1, 8008a84 <_printf_i+0x40>)
 8008a80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a84:	08008add 	.word	0x08008add
 8008a88:	08008af1 	.word	0x08008af1
 8008a8c:	08008a6d 	.word	0x08008a6d
 8008a90:	08008a6d 	.word	0x08008a6d
 8008a94:	08008a6d 	.word	0x08008a6d
 8008a98:	08008a6d 	.word	0x08008a6d
 8008a9c:	08008af1 	.word	0x08008af1
 8008aa0:	08008a6d 	.word	0x08008a6d
 8008aa4:	08008a6d 	.word	0x08008a6d
 8008aa8:	08008a6d 	.word	0x08008a6d
 8008aac:	08008a6d 	.word	0x08008a6d
 8008ab0:	08008bef 	.word	0x08008bef
 8008ab4:	08008b1b 	.word	0x08008b1b
 8008ab8:	08008ba9 	.word	0x08008ba9
 8008abc:	08008a6d 	.word	0x08008a6d
 8008ac0:	08008a6d 	.word	0x08008a6d
 8008ac4:	08008c11 	.word	0x08008c11
 8008ac8:	08008a6d 	.word	0x08008a6d
 8008acc:	08008b1b 	.word	0x08008b1b
 8008ad0:	08008a6d 	.word	0x08008a6d
 8008ad4:	08008a6d 	.word	0x08008a6d
 8008ad8:	08008bb1 	.word	0x08008bb1
 8008adc:	6833      	ldr	r3, [r6, #0]
 8008ade:	1d1a      	adds	r2, r3, #4
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	6032      	str	r2, [r6, #0]
 8008ae4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ae8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008aec:	2301      	movs	r3, #1
 8008aee:	e09c      	b.n	8008c2a <_printf_i+0x1e6>
 8008af0:	6833      	ldr	r3, [r6, #0]
 8008af2:	6820      	ldr	r0, [r4, #0]
 8008af4:	1d19      	adds	r1, r3, #4
 8008af6:	6031      	str	r1, [r6, #0]
 8008af8:	0606      	lsls	r6, r0, #24
 8008afa:	d501      	bpl.n	8008b00 <_printf_i+0xbc>
 8008afc:	681d      	ldr	r5, [r3, #0]
 8008afe:	e003      	b.n	8008b08 <_printf_i+0xc4>
 8008b00:	0645      	lsls	r5, r0, #25
 8008b02:	d5fb      	bpl.n	8008afc <_printf_i+0xb8>
 8008b04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b08:	2d00      	cmp	r5, #0
 8008b0a:	da03      	bge.n	8008b14 <_printf_i+0xd0>
 8008b0c:	232d      	movs	r3, #45	@ 0x2d
 8008b0e:	426d      	negs	r5, r5
 8008b10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b14:	4858      	ldr	r0, [pc, #352]	@ (8008c78 <_printf_i+0x234>)
 8008b16:	230a      	movs	r3, #10
 8008b18:	e011      	b.n	8008b3e <_printf_i+0xfa>
 8008b1a:	6821      	ldr	r1, [r4, #0]
 8008b1c:	6833      	ldr	r3, [r6, #0]
 8008b1e:	0608      	lsls	r0, r1, #24
 8008b20:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b24:	d402      	bmi.n	8008b2c <_printf_i+0xe8>
 8008b26:	0649      	lsls	r1, r1, #25
 8008b28:	bf48      	it	mi
 8008b2a:	b2ad      	uxthmi	r5, r5
 8008b2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b2e:	4852      	ldr	r0, [pc, #328]	@ (8008c78 <_printf_i+0x234>)
 8008b30:	6033      	str	r3, [r6, #0]
 8008b32:	bf14      	ite	ne
 8008b34:	230a      	movne	r3, #10
 8008b36:	2308      	moveq	r3, #8
 8008b38:	2100      	movs	r1, #0
 8008b3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b3e:	6866      	ldr	r6, [r4, #4]
 8008b40:	60a6      	str	r6, [r4, #8]
 8008b42:	2e00      	cmp	r6, #0
 8008b44:	db05      	blt.n	8008b52 <_printf_i+0x10e>
 8008b46:	6821      	ldr	r1, [r4, #0]
 8008b48:	432e      	orrs	r6, r5
 8008b4a:	f021 0104 	bic.w	r1, r1, #4
 8008b4e:	6021      	str	r1, [r4, #0]
 8008b50:	d04b      	beq.n	8008bea <_printf_i+0x1a6>
 8008b52:	4616      	mov	r6, r2
 8008b54:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b58:	fb03 5711 	mls	r7, r3, r1, r5
 8008b5c:	5dc7      	ldrb	r7, [r0, r7]
 8008b5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b62:	462f      	mov	r7, r5
 8008b64:	42bb      	cmp	r3, r7
 8008b66:	460d      	mov	r5, r1
 8008b68:	d9f4      	bls.n	8008b54 <_printf_i+0x110>
 8008b6a:	2b08      	cmp	r3, #8
 8008b6c:	d10b      	bne.n	8008b86 <_printf_i+0x142>
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	07df      	lsls	r7, r3, #31
 8008b72:	d508      	bpl.n	8008b86 <_printf_i+0x142>
 8008b74:	6923      	ldr	r3, [r4, #16]
 8008b76:	6861      	ldr	r1, [r4, #4]
 8008b78:	4299      	cmp	r1, r3
 8008b7a:	bfde      	ittt	le
 8008b7c:	2330      	movle	r3, #48	@ 0x30
 8008b7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b82:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b86:	1b92      	subs	r2, r2, r6
 8008b88:	6122      	str	r2, [r4, #16]
 8008b8a:	f8cd a000 	str.w	sl, [sp]
 8008b8e:	464b      	mov	r3, r9
 8008b90:	aa03      	add	r2, sp, #12
 8008b92:	4621      	mov	r1, r4
 8008b94:	4640      	mov	r0, r8
 8008b96:	f7ff fee7 	bl	8008968 <_printf_common>
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	d14a      	bne.n	8008c34 <_printf_i+0x1f0>
 8008b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba2:	b004      	add	sp, #16
 8008ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba8:	6823      	ldr	r3, [r4, #0]
 8008baa:	f043 0320 	orr.w	r3, r3, #32
 8008bae:	6023      	str	r3, [r4, #0]
 8008bb0:	4832      	ldr	r0, [pc, #200]	@ (8008c7c <_printf_i+0x238>)
 8008bb2:	2778      	movs	r7, #120	@ 0x78
 8008bb4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008bb8:	6823      	ldr	r3, [r4, #0]
 8008bba:	6831      	ldr	r1, [r6, #0]
 8008bbc:	061f      	lsls	r7, r3, #24
 8008bbe:	f851 5b04 	ldr.w	r5, [r1], #4
 8008bc2:	d402      	bmi.n	8008bca <_printf_i+0x186>
 8008bc4:	065f      	lsls	r7, r3, #25
 8008bc6:	bf48      	it	mi
 8008bc8:	b2ad      	uxthmi	r5, r5
 8008bca:	6031      	str	r1, [r6, #0]
 8008bcc:	07d9      	lsls	r1, r3, #31
 8008bce:	bf44      	itt	mi
 8008bd0:	f043 0320 	orrmi.w	r3, r3, #32
 8008bd4:	6023      	strmi	r3, [r4, #0]
 8008bd6:	b11d      	cbz	r5, 8008be0 <_printf_i+0x19c>
 8008bd8:	2310      	movs	r3, #16
 8008bda:	e7ad      	b.n	8008b38 <_printf_i+0xf4>
 8008bdc:	4826      	ldr	r0, [pc, #152]	@ (8008c78 <_printf_i+0x234>)
 8008bde:	e7e9      	b.n	8008bb4 <_printf_i+0x170>
 8008be0:	6823      	ldr	r3, [r4, #0]
 8008be2:	f023 0320 	bic.w	r3, r3, #32
 8008be6:	6023      	str	r3, [r4, #0]
 8008be8:	e7f6      	b.n	8008bd8 <_printf_i+0x194>
 8008bea:	4616      	mov	r6, r2
 8008bec:	e7bd      	b.n	8008b6a <_printf_i+0x126>
 8008bee:	6833      	ldr	r3, [r6, #0]
 8008bf0:	6825      	ldr	r5, [r4, #0]
 8008bf2:	6961      	ldr	r1, [r4, #20]
 8008bf4:	1d18      	adds	r0, r3, #4
 8008bf6:	6030      	str	r0, [r6, #0]
 8008bf8:	062e      	lsls	r6, r5, #24
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	d501      	bpl.n	8008c02 <_printf_i+0x1be>
 8008bfe:	6019      	str	r1, [r3, #0]
 8008c00:	e002      	b.n	8008c08 <_printf_i+0x1c4>
 8008c02:	0668      	lsls	r0, r5, #25
 8008c04:	d5fb      	bpl.n	8008bfe <_printf_i+0x1ba>
 8008c06:	8019      	strh	r1, [r3, #0]
 8008c08:	2300      	movs	r3, #0
 8008c0a:	6123      	str	r3, [r4, #16]
 8008c0c:	4616      	mov	r6, r2
 8008c0e:	e7bc      	b.n	8008b8a <_printf_i+0x146>
 8008c10:	6833      	ldr	r3, [r6, #0]
 8008c12:	1d1a      	adds	r2, r3, #4
 8008c14:	6032      	str	r2, [r6, #0]
 8008c16:	681e      	ldr	r6, [r3, #0]
 8008c18:	6862      	ldr	r2, [r4, #4]
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	f7f7 fae7 	bl	80001f0 <memchr>
 8008c22:	b108      	cbz	r0, 8008c28 <_printf_i+0x1e4>
 8008c24:	1b80      	subs	r0, r0, r6
 8008c26:	6060      	str	r0, [r4, #4]
 8008c28:	6863      	ldr	r3, [r4, #4]
 8008c2a:	6123      	str	r3, [r4, #16]
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c32:	e7aa      	b.n	8008b8a <_printf_i+0x146>
 8008c34:	6923      	ldr	r3, [r4, #16]
 8008c36:	4632      	mov	r2, r6
 8008c38:	4649      	mov	r1, r9
 8008c3a:	4640      	mov	r0, r8
 8008c3c:	47d0      	blx	sl
 8008c3e:	3001      	adds	r0, #1
 8008c40:	d0ad      	beq.n	8008b9e <_printf_i+0x15a>
 8008c42:	6823      	ldr	r3, [r4, #0]
 8008c44:	079b      	lsls	r3, r3, #30
 8008c46:	d413      	bmi.n	8008c70 <_printf_i+0x22c>
 8008c48:	68e0      	ldr	r0, [r4, #12]
 8008c4a:	9b03      	ldr	r3, [sp, #12]
 8008c4c:	4298      	cmp	r0, r3
 8008c4e:	bfb8      	it	lt
 8008c50:	4618      	movlt	r0, r3
 8008c52:	e7a6      	b.n	8008ba2 <_printf_i+0x15e>
 8008c54:	2301      	movs	r3, #1
 8008c56:	4632      	mov	r2, r6
 8008c58:	4649      	mov	r1, r9
 8008c5a:	4640      	mov	r0, r8
 8008c5c:	47d0      	blx	sl
 8008c5e:	3001      	adds	r0, #1
 8008c60:	d09d      	beq.n	8008b9e <_printf_i+0x15a>
 8008c62:	3501      	adds	r5, #1
 8008c64:	68e3      	ldr	r3, [r4, #12]
 8008c66:	9903      	ldr	r1, [sp, #12]
 8008c68:	1a5b      	subs	r3, r3, r1
 8008c6a:	42ab      	cmp	r3, r5
 8008c6c:	dcf2      	bgt.n	8008c54 <_printf_i+0x210>
 8008c6e:	e7eb      	b.n	8008c48 <_printf_i+0x204>
 8008c70:	2500      	movs	r5, #0
 8008c72:	f104 0619 	add.w	r6, r4, #25
 8008c76:	e7f5      	b.n	8008c64 <_printf_i+0x220>
 8008c78:	0801d2fa 	.word	0x0801d2fa
 8008c7c:	0801d30b 	.word	0x0801d30b

08008c80 <std>:
 8008c80:	2300      	movs	r3, #0
 8008c82:	b510      	push	{r4, lr}
 8008c84:	4604      	mov	r4, r0
 8008c86:	e9c0 3300 	strd	r3, r3, [r0]
 8008c8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c8e:	6083      	str	r3, [r0, #8]
 8008c90:	8181      	strh	r1, [r0, #12]
 8008c92:	6643      	str	r3, [r0, #100]	@ 0x64
 8008c94:	81c2      	strh	r2, [r0, #14]
 8008c96:	6183      	str	r3, [r0, #24]
 8008c98:	4619      	mov	r1, r3
 8008c9a:	2208      	movs	r2, #8
 8008c9c:	305c      	adds	r0, #92	@ 0x5c
 8008c9e:	f000 faad 	bl	80091fc <memset>
 8008ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8008cd8 <std+0x58>)
 8008ca4:	6263      	str	r3, [r4, #36]	@ 0x24
 8008ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8008cdc <std+0x5c>)
 8008ca8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008caa:	4b0d      	ldr	r3, [pc, #52]	@ (8008ce0 <std+0x60>)
 8008cac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008cae:	4b0d      	ldr	r3, [pc, #52]	@ (8008ce4 <std+0x64>)
 8008cb0:	6323      	str	r3, [r4, #48]	@ 0x30
 8008cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8008ce8 <std+0x68>)
 8008cb4:	6224      	str	r4, [r4, #32]
 8008cb6:	429c      	cmp	r4, r3
 8008cb8:	d006      	beq.n	8008cc8 <std+0x48>
 8008cba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008cbe:	4294      	cmp	r4, r2
 8008cc0:	d002      	beq.n	8008cc8 <std+0x48>
 8008cc2:	33d0      	adds	r3, #208	@ 0xd0
 8008cc4:	429c      	cmp	r4, r3
 8008cc6:	d105      	bne.n	8008cd4 <std+0x54>
 8008cc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cd0:	f000 bb10 	b.w	80092f4 <__retarget_lock_init_recursive>
 8008cd4:	bd10      	pop	{r4, pc}
 8008cd6:	bf00      	nop
 8008cd8:	0800904d 	.word	0x0800904d
 8008cdc:	0800906f 	.word	0x0800906f
 8008ce0:	080090a7 	.word	0x080090a7
 8008ce4:	080090cb 	.word	0x080090cb
 8008ce8:	2000498c 	.word	0x2000498c

08008cec <stdio_exit_handler>:
 8008cec:	4a02      	ldr	r2, [pc, #8]	@ (8008cf8 <stdio_exit_handler+0xc>)
 8008cee:	4903      	ldr	r1, [pc, #12]	@ (8008cfc <stdio_exit_handler+0x10>)
 8008cf0:	4803      	ldr	r0, [pc, #12]	@ (8008d00 <stdio_exit_handler+0x14>)
 8008cf2:	f000 b869 	b.w	8008dc8 <_fwalk_sglue>
 8008cf6:	bf00      	nop
 8008cf8:	20002c0c 	.word	0x20002c0c
 8008cfc:	0800ac49 	.word	0x0800ac49
 8008d00:	20002c1c 	.word	0x20002c1c

08008d04 <cleanup_stdio>:
 8008d04:	6841      	ldr	r1, [r0, #4]
 8008d06:	4b0c      	ldr	r3, [pc, #48]	@ (8008d38 <cleanup_stdio+0x34>)
 8008d08:	4299      	cmp	r1, r3
 8008d0a:	b510      	push	{r4, lr}
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	d001      	beq.n	8008d14 <cleanup_stdio+0x10>
 8008d10:	f001 ff9a 	bl	800ac48 <_fflush_r>
 8008d14:	68a1      	ldr	r1, [r4, #8]
 8008d16:	4b09      	ldr	r3, [pc, #36]	@ (8008d3c <cleanup_stdio+0x38>)
 8008d18:	4299      	cmp	r1, r3
 8008d1a:	d002      	beq.n	8008d22 <cleanup_stdio+0x1e>
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f001 ff93 	bl	800ac48 <_fflush_r>
 8008d22:	68e1      	ldr	r1, [r4, #12]
 8008d24:	4b06      	ldr	r3, [pc, #24]	@ (8008d40 <cleanup_stdio+0x3c>)
 8008d26:	4299      	cmp	r1, r3
 8008d28:	d004      	beq.n	8008d34 <cleanup_stdio+0x30>
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d30:	f001 bf8a 	b.w	800ac48 <_fflush_r>
 8008d34:	bd10      	pop	{r4, pc}
 8008d36:	bf00      	nop
 8008d38:	2000498c 	.word	0x2000498c
 8008d3c:	200049f4 	.word	0x200049f4
 8008d40:	20004a5c 	.word	0x20004a5c

08008d44 <global_stdio_init.part.0>:
 8008d44:	b510      	push	{r4, lr}
 8008d46:	4b0b      	ldr	r3, [pc, #44]	@ (8008d74 <global_stdio_init.part.0+0x30>)
 8008d48:	4c0b      	ldr	r4, [pc, #44]	@ (8008d78 <global_stdio_init.part.0+0x34>)
 8008d4a:	4a0c      	ldr	r2, [pc, #48]	@ (8008d7c <global_stdio_init.part.0+0x38>)
 8008d4c:	601a      	str	r2, [r3, #0]
 8008d4e:	4620      	mov	r0, r4
 8008d50:	2200      	movs	r2, #0
 8008d52:	2104      	movs	r1, #4
 8008d54:	f7ff ff94 	bl	8008c80 <std>
 8008d58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	2109      	movs	r1, #9
 8008d60:	f7ff ff8e 	bl	8008c80 <std>
 8008d64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008d68:	2202      	movs	r2, #2
 8008d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d6e:	2112      	movs	r1, #18
 8008d70:	f7ff bf86 	b.w	8008c80 <std>
 8008d74:	20004ac4 	.word	0x20004ac4
 8008d78:	2000498c 	.word	0x2000498c
 8008d7c:	08008ced 	.word	0x08008ced

08008d80 <__sfp_lock_acquire>:
 8008d80:	4801      	ldr	r0, [pc, #4]	@ (8008d88 <__sfp_lock_acquire+0x8>)
 8008d82:	f000 bab8 	b.w	80092f6 <__retarget_lock_acquire_recursive>
 8008d86:	bf00      	nop
 8008d88:	20004acd 	.word	0x20004acd

08008d8c <__sfp_lock_release>:
 8008d8c:	4801      	ldr	r0, [pc, #4]	@ (8008d94 <__sfp_lock_release+0x8>)
 8008d8e:	f000 bab3 	b.w	80092f8 <__retarget_lock_release_recursive>
 8008d92:	bf00      	nop
 8008d94:	20004acd 	.word	0x20004acd

08008d98 <__sinit>:
 8008d98:	b510      	push	{r4, lr}
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	f7ff fff0 	bl	8008d80 <__sfp_lock_acquire>
 8008da0:	6a23      	ldr	r3, [r4, #32]
 8008da2:	b11b      	cbz	r3, 8008dac <__sinit+0x14>
 8008da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008da8:	f7ff bff0 	b.w	8008d8c <__sfp_lock_release>
 8008dac:	4b04      	ldr	r3, [pc, #16]	@ (8008dc0 <__sinit+0x28>)
 8008dae:	6223      	str	r3, [r4, #32]
 8008db0:	4b04      	ldr	r3, [pc, #16]	@ (8008dc4 <__sinit+0x2c>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1f5      	bne.n	8008da4 <__sinit+0xc>
 8008db8:	f7ff ffc4 	bl	8008d44 <global_stdio_init.part.0>
 8008dbc:	e7f2      	b.n	8008da4 <__sinit+0xc>
 8008dbe:	bf00      	nop
 8008dc0:	08008d05 	.word	0x08008d05
 8008dc4:	20004ac4 	.word	0x20004ac4

08008dc8 <_fwalk_sglue>:
 8008dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dcc:	4607      	mov	r7, r0
 8008dce:	4688      	mov	r8, r1
 8008dd0:	4614      	mov	r4, r2
 8008dd2:	2600      	movs	r6, #0
 8008dd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008dd8:	f1b9 0901 	subs.w	r9, r9, #1
 8008ddc:	d505      	bpl.n	8008dea <_fwalk_sglue+0x22>
 8008dde:	6824      	ldr	r4, [r4, #0]
 8008de0:	2c00      	cmp	r4, #0
 8008de2:	d1f7      	bne.n	8008dd4 <_fwalk_sglue+0xc>
 8008de4:	4630      	mov	r0, r6
 8008de6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dea:	89ab      	ldrh	r3, [r5, #12]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d907      	bls.n	8008e00 <_fwalk_sglue+0x38>
 8008df0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008df4:	3301      	adds	r3, #1
 8008df6:	d003      	beq.n	8008e00 <_fwalk_sglue+0x38>
 8008df8:	4629      	mov	r1, r5
 8008dfa:	4638      	mov	r0, r7
 8008dfc:	47c0      	blx	r8
 8008dfe:	4306      	orrs	r6, r0
 8008e00:	3568      	adds	r5, #104	@ 0x68
 8008e02:	e7e9      	b.n	8008dd8 <_fwalk_sglue+0x10>

08008e04 <iprintf>:
 8008e04:	b40f      	push	{r0, r1, r2, r3}
 8008e06:	b507      	push	{r0, r1, r2, lr}
 8008e08:	4906      	ldr	r1, [pc, #24]	@ (8008e24 <iprintf+0x20>)
 8008e0a:	ab04      	add	r3, sp, #16
 8008e0c:	6808      	ldr	r0, [r1, #0]
 8008e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e12:	6881      	ldr	r1, [r0, #8]
 8008e14:	9301      	str	r3, [sp, #4]
 8008e16:	f001 fd7b 	bl	800a910 <_vfiprintf_r>
 8008e1a:	b003      	add	sp, #12
 8008e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e20:	b004      	add	sp, #16
 8008e22:	4770      	bx	lr
 8008e24:	20002c18 	.word	0x20002c18

08008e28 <_puts_r>:
 8008e28:	6a03      	ldr	r3, [r0, #32]
 8008e2a:	b570      	push	{r4, r5, r6, lr}
 8008e2c:	6884      	ldr	r4, [r0, #8]
 8008e2e:	4605      	mov	r5, r0
 8008e30:	460e      	mov	r6, r1
 8008e32:	b90b      	cbnz	r3, 8008e38 <_puts_r+0x10>
 8008e34:	f7ff ffb0 	bl	8008d98 <__sinit>
 8008e38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e3a:	07db      	lsls	r3, r3, #31
 8008e3c:	d405      	bmi.n	8008e4a <_puts_r+0x22>
 8008e3e:	89a3      	ldrh	r3, [r4, #12]
 8008e40:	0598      	lsls	r0, r3, #22
 8008e42:	d402      	bmi.n	8008e4a <_puts_r+0x22>
 8008e44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e46:	f000 fa56 	bl	80092f6 <__retarget_lock_acquire_recursive>
 8008e4a:	89a3      	ldrh	r3, [r4, #12]
 8008e4c:	0719      	lsls	r1, r3, #28
 8008e4e:	d502      	bpl.n	8008e56 <_puts_r+0x2e>
 8008e50:	6923      	ldr	r3, [r4, #16]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d135      	bne.n	8008ec2 <_puts_r+0x9a>
 8008e56:	4621      	mov	r1, r4
 8008e58:	4628      	mov	r0, r5
 8008e5a:	f000 f979 	bl	8009150 <__swsetup_r>
 8008e5e:	b380      	cbz	r0, 8008ec2 <_puts_r+0x9a>
 8008e60:	f04f 35ff 	mov.w	r5, #4294967295
 8008e64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e66:	07da      	lsls	r2, r3, #31
 8008e68:	d405      	bmi.n	8008e76 <_puts_r+0x4e>
 8008e6a:	89a3      	ldrh	r3, [r4, #12]
 8008e6c:	059b      	lsls	r3, r3, #22
 8008e6e:	d402      	bmi.n	8008e76 <_puts_r+0x4e>
 8008e70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e72:	f000 fa41 	bl	80092f8 <__retarget_lock_release_recursive>
 8008e76:	4628      	mov	r0, r5
 8008e78:	bd70      	pop	{r4, r5, r6, pc}
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	da04      	bge.n	8008e88 <_puts_r+0x60>
 8008e7e:	69a2      	ldr	r2, [r4, #24]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	dc17      	bgt.n	8008eb4 <_puts_r+0x8c>
 8008e84:	290a      	cmp	r1, #10
 8008e86:	d015      	beq.n	8008eb4 <_puts_r+0x8c>
 8008e88:	6823      	ldr	r3, [r4, #0]
 8008e8a:	1c5a      	adds	r2, r3, #1
 8008e8c:	6022      	str	r2, [r4, #0]
 8008e8e:	7019      	strb	r1, [r3, #0]
 8008e90:	68a3      	ldr	r3, [r4, #8]
 8008e92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e96:	3b01      	subs	r3, #1
 8008e98:	60a3      	str	r3, [r4, #8]
 8008e9a:	2900      	cmp	r1, #0
 8008e9c:	d1ed      	bne.n	8008e7a <_puts_r+0x52>
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	da11      	bge.n	8008ec6 <_puts_r+0x9e>
 8008ea2:	4622      	mov	r2, r4
 8008ea4:	210a      	movs	r1, #10
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	f000 f913 	bl	80090d2 <__swbuf_r>
 8008eac:	3001      	adds	r0, #1
 8008eae:	d0d7      	beq.n	8008e60 <_puts_r+0x38>
 8008eb0:	250a      	movs	r5, #10
 8008eb2:	e7d7      	b.n	8008e64 <_puts_r+0x3c>
 8008eb4:	4622      	mov	r2, r4
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	f000 f90b 	bl	80090d2 <__swbuf_r>
 8008ebc:	3001      	adds	r0, #1
 8008ebe:	d1e7      	bne.n	8008e90 <_puts_r+0x68>
 8008ec0:	e7ce      	b.n	8008e60 <_puts_r+0x38>
 8008ec2:	3e01      	subs	r6, #1
 8008ec4:	e7e4      	b.n	8008e90 <_puts_r+0x68>
 8008ec6:	6823      	ldr	r3, [r4, #0]
 8008ec8:	1c5a      	adds	r2, r3, #1
 8008eca:	6022      	str	r2, [r4, #0]
 8008ecc:	220a      	movs	r2, #10
 8008ece:	701a      	strb	r2, [r3, #0]
 8008ed0:	e7ee      	b.n	8008eb0 <_puts_r+0x88>
	...

08008ed4 <puts>:
 8008ed4:	4b02      	ldr	r3, [pc, #8]	@ (8008ee0 <puts+0xc>)
 8008ed6:	4601      	mov	r1, r0
 8008ed8:	6818      	ldr	r0, [r3, #0]
 8008eda:	f7ff bfa5 	b.w	8008e28 <_puts_r>
 8008ede:	bf00      	nop
 8008ee0:	20002c18 	.word	0x20002c18

08008ee4 <setvbuf>:
 8008ee4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ee8:	461d      	mov	r5, r3
 8008eea:	4b57      	ldr	r3, [pc, #348]	@ (8009048 <setvbuf+0x164>)
 8008eec:	681f      	ldr	r7, [r3, #0]
 8008eee:	4604      	mov	r4, r0
 8008ef0:	460e      	mov	r6, r1
 8008ef2:	4690      	mov	r8, r2
 8008ef4:	b127      	cbz	r7, 8008f00 <setvbuf+0x1c>
 8008ef6:	6a3b      	ldr	r3, [r7, #32]
 8008ef8:	b913      	cbnz	r3, 8008f00 <setvbuf+0x1c>
 8008efa:	4638      	mov	r0, r7
 8008efc:	f7ff ff4c 	bl	8008d98 <__sinit>
 8008f00:	f1b8 0f02 	cmp.w	r8, #2
 8008f04:	d006      	beq.n	8008f14 <setvbuf+0x30>
 8008f06:	f1b8 0f01 	cmp.w	r8, #1
 8008f0a:	f200 809a 	bhi.w	8009042 <setvbuf+0x15e>
 8008f0e:	2d00      	cmp	r5, #0
 8008f10:	f2c0 8097 	blt.w	8009042 <setvbuf+0x15e>
 8008f14:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f16:	07d9      	lsls	r1, r3, #31
 8008f18:	d405      	bmi.n	8008f26 <setvbuf+0x42>
 8008f1a:	89a3      	ldrh	r3, [r4, #12]
 8008f1c:	059a      	lsls	r2, r3, #22
 8008f1e:	d402      	bmi.n	8008f26 <setvbuf+0x42>
 8008f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f22:	f000 f9e8 	bl	80092f6 <__retarget_lock_acquire_recursive>
 8008f26:	4621      	mov	r1, r4
 8008f28:	4638      	mov	r0, r7
 8008f2a:	f001 fe8d 	bl	800ac48 <_fflush_r>
 8008f2e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f30:	b141      	cbz	r1, 8008f44 <setvbuf+0x60>
 8008f32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f36:	4299      	cmp	r1, r3
 8008f38:	d002      	beq.n	8008f40 <setvbuf+0x5c>
 8008f3a:	4638      	mov	r0, r7
 8008f3c:	f001 f844 	bl	8009fc8 <_free_r>
 8008f40:	2300      	movs	r3, #0
 8008f42:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f44:	2300      	movs	r3, #0
 8008f46:	61a3      	str	r3, [r4, #24]
 8008f48:	6063      	str	r3, [r4, #4]
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	061b      	lsls	r3, r3, #24
 8008f4e:	d503      	bpl.n	8008f58 <setvbuf+0x74>
 8008f50:	6921      	ldr	r1, [r4, #16]
 8008f52:	4638      	mov	r0, r7
 8008f54:	f001 f838 	bl	8009fc8 <_free_r>
 8008f58:	89a3      	ldrh	r3, [r4, #12]
 8008f5a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8008f5e:	f023 0303 	bic.w	r3, r3, #3
 8008f62:	f1b8 0f02 	cmp.w	r8, #2
 8008f66:	81a3      	strh	r3, [r4, #12]
 8008f68:	d061      	beq.n	800902e <setvbuf+0x14a>
 8008f6a:	ab01      	add	r3, sp, #4
 8008f6c:	466a      	mov	r2, sp
 8008f6e:	4621      	mov	r1, r4
 8008f70:	4638      	mov	r0, r7
 8008f72:	f001 fe91 	bl	800ac98 <__swhatbuf_r>
 8008f76:	89a3      	ldrh	r3, [r4, #12]
 8008f78:	4318      	orrs	r0, r3
 8008f7a:	81a0      	strh	r0, [r4, #12]
 8008f7c:	bb2d      	cbnz	r5, 8008fca <setvbuf+0xe6>
 8008f7e:	9d00      	ldr	r5, [sp, #0]
 8008f80:	4628      	mov	r0, r5
 8008f82:	f001 f86b 	bl	800a05c <malloc>
 8008f86:	4606      	mov	r6, r0
 8008f88:	2800      	cmp	r0, #0
 8008f8a:	d152      	bne.n	8009032 <setvbuf+0x14e>
 8008f8c:	f8dd 9000 	ldr.w	r9, [sp]
 8008f90:	45a9      	cmp	r9, r5
 8008f92:	d140      	bne.n	8009016 <setvbuf+0x132>
 8008f94:	f04f 35ff 	mov.w	r5, #4294967295
 8008f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f9c:	f043 0202 	orr.w	r2, r3, #2
 8008fa0:	81a2      	strh	r2, [r4, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	60a2      	str	r2, [r4, #8]
 8008fa6:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8008faa:	6022      	str	r2, [r4, #0]
 8008fac:	6122      	str	r2, [r4, #16]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	6162      	str	r2, [r4, #20]
 8008fb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008fb4:	07d6      	lsls	r6, r2, #31
 8008fb6:	d404      	bmi.n	8008fc2 <setvbuf+0xde>
 8008fb8:	0598      	lsls	r0, r3, #22
 8008fba:	d402      	bmi.n	8008fc2 <setvbuf+0xde>
 8008fbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fbe:	f000 f99b 	bl	80092f8 <__retarget_lock_release_recursive>
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	b003      	add	sp, #12
 8008fc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fca:	2e00      	cmp	r6, #0
 8008fcc:	d0d8      	beq.n	8008f80 <setvbuf+0x9c>
 8008fce:	6a3b      	ldr	r3, [r7, #32]
 8008fd0:	b913      	cbnz	r3, 8008fd8 <setvbuf+0xf4>
 8008fd2:	4638      	mov	r0, r7
 8008fd4:	f7ff fee0 	bl	8008d98 <__sinit>
 8008fd8:	f1b8 0f01 	cmp.w	r8, #1
 8008fdc:	bf08      	it	eq
 8008fde:	89a3      	ldrheq	r3, [r4, #12]
 8008fe0:	6026      	str	r6, [r4, #0]
 8008fe2:	bf04      	itt	eq
 8008fe4:	f043 0301 	orreq.w	r3, r3, #1
 8008fe8:	81a3      	strheq	r3, [r4, #12]
 8008fea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fee:	f013 0208 	ands.w	r2, r3, #8
 8008ff2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008ff6:	d01e      	beq.n	8009036 <setvbuf+0x152>
 8008ff8:	07d9      	lsls	r1, r3, #31
 8008ffa:	bf41      	itttt	mi
 8008ffc:	2200      	movmi	r2, #0
 8008ffe:	426d      	negmi	r5, r5
 8009000:	60a2      	strmi	r2, [r4, #8]
 8009002:	61a5      	strmi	r5, [r4, #24]
 8009004:	bf58      	it	pl
 8009006:	60a5      	strpl	r5, [r4, #8]
 8009008:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800900a:	07d2      	lsls	r2, r2, #31
 800900c:	d401      	bmi.n	8009012 <setvbuf+0x12e>
 800900e:	059b      	lsls	r3, r3, #22
 8009010:	d513      	bpl.n	800903a <setvbuf+0x156>
 8009012:	2500      	movs	r5, #0
 8009014:	e7d5      	b.n	8008fc2 <setvbuf+0xde>
 8009016:	4648      	mov	r0, r9
 8009018:	f001 f820 	bl	800a05c <malloc>
 800901c:	4606      	mov	r6, r0
 800901e:	2800      	cmp	r0, #0
 8009020:	d0b8      	beq.n	8008f94 <setvbuf+0xb0>
 8009022:	89a3      	ldrh	r3, [r4, #12]
 8009024:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009028:	81a3      	strh	r3, [r4, #12]
 800902a:	464d      	mov	r5, r9
 800902c:	e7cf      	b.n	8008fce <setvbuf+0xea>
 800902e:	2500      	movs	r5, #0
 8009030:	e7b2      	b.n	8008f98 <setvbuf+0xb4>
 8009032:	46a9      	mov	r9, r5
 8009034:	e7f5      	b.n	8009022 <setvbuf+0x13e>
 8009036:	60a2      	str	r2, [r4, #8]
 8009038:	e7e6      	b.n	8009008 <setvbuf+0x124>
 800903a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800903c:	f000 f95c 	bl	80092f8 <__retarget_lock_release_recursive>
 8009040:	e7e7      	b.n	8009012 <setvbuf+0x12e>
 8009042:	f04f 35ff 	mov.w	r5, #4294967295
 8009046:	e7bc      	b.n	8008fc2 <setvbuf+0xde>
 8009048:	20002c18 	.word	0x20002c18

0800904c <__sread>:
 800904c:	b510      	push	{r4, lr}
 800904e:	460c      	mov	r4, r1
 8009050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009054:	f000 f900 	bl	8009258 <_read_r>
 8009058:	2800      	cmp	r0, #0
 800905a:	bfab      	itete	ge
 800905c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800905e:	89a3      	ldrhlt	r3, [r4, #12]
 8009060:	181b      	addge	r3, r3, r0
 8009062:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009066:	bfac      	ite	ge
 8009068:	6563      	strge	r3, [r4, #84]	@ 0x54
 800906a:	81a3      	strhlt	r3, [r4, #12]
 800906c:	bd10      	pop	{r4, pc}

0800906e <__swrite>:
 800906e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009072:	461f      	mov	r7, r3
 8009074:	898b      	ldrh	r3, [r1, #12]
 8009076:	05db      	lsls	r3, r3, #23
 8009078:	4605      	mov	r5, r0
 800907a:	460c      	mov	r4, r1
 800907c:	4616      	mov	r6, r2
 800907e:	d505      	bpl.n	800908c <__swrite+0x1e>
 8009080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009084:	2302      	movs	r3, #2
 8009086:	2200      	movs	r2, #0
 8009088:	f000 f8d4 	bl	8009234 <_lseek_r>
 800908c:	89a3      	ldrh	r3, [r4, #12]
 800908e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009092:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009096:	81a3      	strh	r3, [r4, #12]
 8009098:	4632      	mov	r2, r6
 800909a:	463b      	mov	r3, r7
 800909c:	4628      	mov	r0, r5
 800909e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090a2:	f000 b8eb 	b.w	800927c <_write_r>

080090a6 <__sseek>:
 80090a6:	b510      	push	{r4, lr}
 80090a8:	460c      	mov	r4, r1
 80090aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ae:	f000 f8c1 	bl	8009234 <_lseek_r>
 80090b2:	1c43      	adds	r3, r0, #1
 80090b4:	89a3      	ldrh	r3, [r4, #12]
 80090b6:	bf15      	itete	ne
 80090b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090c2:	81a3      	strheq	r3, [r4, #12]
 80090c4:	bf18      	it	ne
 80090c6:	81a3      	strhne	r3, [r4, #12]
 80090c8:	bd10      	pop	{r4, pc}

080090ca <__sclose>:
 80090ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ce:	f000 b8a1 	b.w	8009214 <_close_r>

080090d2 <__swbuf_r>:
 80090d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d4:	460e      	mov	r6, r1
 80090d6:	4614      	mov	r4, r2
 80090d8:	4605      	mov	r5, r0
 80090da:	b118      	cbz	r0, 80090e4 <__swbuf_r+0x12>
 80090dc:	6a03      	ldr	r3, [r0, #32]
 80090de:	b90b      	cbnz	r3, 80090e4 <__swbuf_r+0x12>
 80090e0:	f7ff fe5a 	bl	8008d98 <__sinit>
 80090e4:	69a3      	ldr	r3, [r4, #24]
 80090e6:	60a3      	str	r3, [r4, #8]
 80090e8:	89a3      	ldrh	r3, [r4, #12]
 80090ea:	071a      	lsls	r2, r3, #28
 80090ec:	d501      	bpl.n	80090f2 <__swbuf_r+0x20>
 80090ee:	6923      	ldr	r3, [r4, #16]
 80090f0:	b943      	cbnz	r3, 8009104 <__swbuf_r+0x32>
 80090f2:	4621      	mov	r1, r4
 80090f4:	4628      	mov	r0, r5
 80090f6:	f000 f82b 	bl	8009150 <__swsetup_r>
 80090fa:	b118      	cbz	r0, 8009104 <__swbuf_r+0x32>
 80090fc:	f04f 37ff 	mov.w	r7, #4294967295
 8009100:	4638      	mov	r0, r7
 8009102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	6922      	ldr	r2, [r4, #16]
 8009108:	1a98      	subs	r0, r3, r2
 800910a:	6963      	ldr	r3, [r4, #20]
 800910c:	b2f6      	uxtb	r6, r6
 800910e:	4283      	cmp	r3, r0
 8009110:	4637      	mov	r7, r6
 8009112:	dc05      	bgt.n	8009120 <__swbuf_r+0x4e>
 8009114:	4621      	mov	r1, r4
 8009116:	4628      	mov	r0, r5
 8009118:	f001 fd96 	bl	800ac48 <_fflush_r>
 800911c:	2800      	cmp	r0, #0
 800911e:	d1ed      	bne.n	80090fc <__swbuf_r+0x2a>
 8009120:	68a3      	ldr	r3, [r4, #8]
 8009122:	3b01      	subs	r3, #1
 8009124:	60a3      	str	r3, [r4, #8]
 8009126:	6823      	ldr	r3, [r4, #0]
 8009128:	1c5a      	adds	r2, r3, #1
 800912a:	6022      	str	r2, [r4, #0]
 800912c:	701e      	strb	r6, [r3, #0]
 800912e:	6962      	ldr	r2, [r4, #20]
 8009130:	1c43      	adds	r3, r0, #1
 8009132:	429a      	cmp	r2, r3
 8009134:	d004      	beq.n	8009140 <__swbuf_r+0x6e>
 8009136:	89a3      	ldrh	r3, [r4, #12]
 8009138:	07db      	lsls	r3, r3, #31
 800913a:	d5e1      	bpl.n	8009100 <__swbuf_r+0x2e>
 800913c:	2e0a      	cmp	r6, #10
 800913e:	d1df      	bne.n	8009100 <__swbuf_r+0x2e>
 8009140:	4621      	mov	r1, r4
 8009142:	4628      	mov	r0, r5
 8009144:	f001 fd80 	bl	800ac48 <_fflush_r>
 8009148:	2800      	cmp	r0, #0
 800914a:	d0d9      	beq.n	8009100 <__swbuf_r+0x2e>
 800914c:	e7d6      	b.n	80090fc <__swbuf_r+0x2a>
	...

08009150 <__swsetup_r>:
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	4b29      	ldr	r3, [pc, #164]	@ (80091f8 <__swsetup_r+0xa8>)
 8009154:	4605      	mov	r5, r0
 8009156:	6818      	ldr	r0, [r3, #0]
 8009158:	460c      	mov	r4, r1
 800915a:	b118      	cbz	r0, 8009164 <__swsetup_r+0x14>
 800915c:	6a03      	ldr	r3, [r0, #32]
 800915e:	b90b      	cbnz	r3, 8009164 <__swsetup_r+0x14>
 8009160:	f7ff fe1a 	bl	8008d98 <__sinit>
 8009164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009168:	0719      	lsls	r1, r3, #28
 800916a:	d422      	bmi.n	80091b2 <__swsetup_r+0x62>
 800916c:	06da      	lsls	r2, r3, #27
 800916e:	d407      	bmi.n	8009180 <__swsetup_r+0x30>
 8009170:	2209      	movs	r2, #9
 8009172:	602a      	str	r2, [r5, #0]
 8009174:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009178:	81a3      	strh	r3, [r4, #12]
 800917a:	f04f 30ff 	mov.w	r0, #4294967295
 800917e:	e033      	b.n	80091e8 <__swsetup_r+0x98>
 8009180:	0758      	lsls	r0, r3, #29
 8009182:	d512      	bpl.n	80091aa <__swsetup_r+0x5a>
 8009184:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009186:	b141      	cbz	r1, 800919a <__swsetup_r+0x4a>
 8009188:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800918c:	4299      	cmp	r1, r3
 800918e:	d002      	beq.n	8009196 <__swsetup_r+0x46>
 8009190:	4628      	mov	r0, r5
 8009192:	f000 ff19 	bl	8009fc8 <_free_r>
 8009196:	2300      	movs	r3, #0
 8009198:	6363      	str	r3, [r4, #52]	@ 0x34
 800919a:	89a3      	ldrh	r3, [r4, #12]
 800919c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80091a0:	81a3      	strh	r3, [r4, #12]
 80091a2:	2300      	movs	r3, #0
 80091a4:	6063      	str	r3, [r4, #4]
 80091a6:	6923      	ldr	r3, [r4, #16]
 80091a8:	6023      	str	r3, [r4, #0]
 80091aa:	89a3      	ldrh	r3, [r4, #12]
 80091ac:	f043 0308 	orr.w	r3, r3, #8
 80091b0:	81a3      	strh	r3, [r4, #12]
 80091b2:	6923      	ldr	r3, [r4, #16]
 80091b4:	b94b      	cbnz	r3, 80091ca <__swsetup_r+0x7a>
 80091b6:	89a3      	ldrh	r3, [r4, #12]
 80091b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80091bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091c0:	d003      	beq.n	80091ca <__swsetup_r+0x7a>
 80091c2:	4621      	mov	r1, r4
 80091c4:	4628      	mov	r0, r5
 80091c6:	f001 fd8d 	bl	800ace4 <__smakebuf_r>
 80091ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ce:	f013 0201 	ands.w	r2, r3, #1
 80091d2:	d00a      	beq.n	80091ea <__swsetup_r+0x9a>
 80091d4:	2200      	movs	r2, #0
 80091d6:	60a2      	str	r2, [r4, #8]
 80091d8:	6962      	ldr	r2, [r4, #20]
 80091da:	4252      	negs	r2, r2
 80091dc:	61a2      	str	r2, [r4, #24]
 80091de:	6922      	ldr	r2, [r4, #16]
 80091e0:	b942      	cbnz	r2, 80091f4 <__swsetup_r+0xa4>
 80091e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80091e6:	d1c5      	bne.n	8009174 <__swsetup_r+0x24>
 80091e8:	bd38      	pop	{r3, r4, r5, pc}
 80091ea:	0799      	lsls	r1, r3, #30
 80091ec:	bf58      	it	pl
 80091ee:	6962      	ldrpl	r2, [r4, #20]
 80091f0:	60a2      	str	r2, [r4, #8]
 80091f2:	e7f4      	b.n	80091de <__swsetup_r+0x8e>
 80091f4:	2000      	movs	r0, #0
 80091f6:	e7f7      	b.n	80091e8 <__swsetup_r+0x98>
 80091f8:	20002c18 	.word	0x20002c18

080091fc <memset>:
 80091fc:	4402      	add	r2, r0
 80091fe:	4603      	mov	r3, r0
 8009200:	4293      	cmp	r3, r2
 8009202:	d100      	bne.n	8009206 <memset+0xa>
 8009204:	4770      	bx	lr
 8009206:	f803 1b01 	strb.w	r1, [r3], #1
 800920a:	e7f9      	b.n	8009200 <memset+0x4>

0800920c <_localeconv_r>:
 800920c:	4800      	ldr	r0, [pc, #0]	@ (8009210 <_localeconv_r+0x4>)
 800920e:	4770      	bx	lr
 8009210:	20002d58 	.word	0x20002d58

08009214 <_close_r>:
 8009214:	b538      	push	{r3, r4, r5, lr}
 8009216:	4d06      	ldr	r5, [pc, #24]	@ (8009230 <_close_r+0x1c>)
 8009218:	2300      	movs	r3, #0
 800921a:	4604      	mov	r4, r0
 800921c:	4608      	mov	r0, r1
 800921e:	602b      	str	r3, [r5, #0]
 8009220:	f7f8 fc76 	bl	8001b10 <_close>
 8009224:	1c43      	adds	r3, r0, #1
 8009226:	d102      	bne.n	800922e <_close_r+0x1a>
 8009228:	682b      	ldr	r3, [r5, #0]
 800922a:	b103      	cbz	r3, 800922e <_close_r+0x1a>
 800922c:	6023      	str	r3, [r4, #0]
 800922e:	bd38      	pop	{r3, r4, r5, pc}
 8009230:	20004ac8 	.word	0x20004ac8

08009234 <_lseek_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	4d07      	ldr	r5, [pc, #28]	@ (8009254 <_lseek_r+0x20>)
 8009238:	4604      	mov	r4, r0
 800923a:	4608      	mov	r0, r1
 800923c:	4611      	mov	r1, r2
 800923e:	2200      	movs	r2, #0
 8009240:	602a      	str	r2, [r5, #0]
 8009242:	461a      	mov	r2, r3
 8009244:	f7f8 fc70 	bl	8001b28 <_lseek>
 8009248:	1c43      	adds	r3, r0, #1
 800924a:	d102      	bne.n	8009252 <_lseek_r+0x1e>
 800924c:	682b      	ldr	r3, [r5, #0]
 800924e:	b103      	cbz	r3, 8009252 <_lseek_r+0x1e>
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	bd38      	pop	{r3, r4, r5, pc}
 8009254:	20004ac8 	.word	0x20004ac8

08009258 <_read_r>:
 8009258:	b538      	push	{r3, r4, r5, lr}
 800925a:	4d07      	ldr	r5, [pc, #28]	@ (8009278 <_read_r+0x20>)
 800925c:	4604      	mov	r4, r0
 800925e:	4608      	mov	r0, r1
 8009260:	4611      	mov	r1, r2
 8009262:	2200      	movs	r2, #0
 8009264:	602a      	str	r2, [r5, #0]
 8009266:	461a      	mov	r2, r3
 8009268:	f7f8 fc66 	bl	8001b38 <_read>
 800926c:	1c43      	adds	r3, r0, #1
 800926e:	d102      	bne.n	8009276 <_read_r+0x1e>
 8009270:	682b      	ldr	r3, [r5, #0]
 8009272:	b103      	cbz	r3, 8009276 <_read_r+0x1e>
 8009274:	6023      	str	r3, [r4, #0]
 8009276:	bd38      	pop	{r3, r4, r5, pc}
 8009278:	20004ac8 	.word	0x20004ac8

0800927c <_write_r>:
 800927c:	b538      	push	{r3, r4, r5, lr}
 800927e:	4d07      	ldr	r5, [pc, #28]	@ (800929c <_write_r+0x20>)
 8009280:	4604      	mov	r4, r0
 8009282:	4608      	mov	r0, r1
 8009284:	4611      	mov	r1, r2
 8009286:	2200      	movs	r2, #0
 8009288:	602a      	str	r2, [r5, #0]
 800928a:	461a      	mov	r2, r3
 800928c:	f7f8 fc26 	bl	8001adc <_write>
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d102      	bne.n	800929a <_write_r+0x1e>
 8009294:	682b      	ldr	r3, [r5, #0]
 8009296:	b103      	cbz	r3, 800929a <_write_r+0x1e>
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	bd38      	pop	{r3, r4, r5, pc}
 800929c:	20004ac8 	.word	0x20004ac8

080092a0 <__errno>:
 80092a0:	4b01      	ldr	r3, [pc, #4]	@ (80092a8 <__errno+0x8>)
 80092a2:	6818      	ldr	r0, [r3, #0]
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	20002c18 	.word	0x20002c18

080092ac <__libc_init_array>:
 80092ac:	b570      	push	{r4, r5, r6, lr}
 80092ae:	4d0d      	ldr	r5, [pc, #52]	@ (80092e4 <__libc_init_array+0x38>)
 80092b0:	4c0d      	ldr	r4, [pc, #52]	@ (80092e8 <__libc_init_array+0x3c>)
 80092b2:	1b64      	subs	r4, r4, r5
 80092b4:	10a4      	asrs	r4, r4, #2
 80092b6:	2600      	movs	r6, #0
 80092b8:	42a6      	cmp	r6, r4
 80092ba:	d109      	bne.n	80092d0 <__libc_init_array+0x24>
 80092bc:	4d0b      	ldr	r5, [pc, #44]	@ (80092ec <__libc_init_array+0x40>)
 80092be:	4c0c      	ldr	r4, [pc, #48]	@ (80092f0 <__libc_init_array+0x44>)
 80092c0:	f001 fe40 	bl	800af44 <_init>
 80092c4:	1b64      	subs	r4, r4, r5
 80092c6:	10a4      	asrs	r4, r4, #2
 80092c8:	2600      	movs	r6, #0
 80092ca:	42a6      	cmp	r6, r4
 80092cc:	d105      	bne.n	80092da <__libc_init_array+0x2e>
 80092ce:	bd70      	pop	{r4, r5, r6, pc}
 80092d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80092d4:	4798      	blx	r3
 80092d6:	3601      	adds	r6, #1
 80092d8:	e7ee      	b.n	80092b8 <__libc_init_array+0xc>
 80092da:	f855 3b04 	ldr.w	r3, [r5], #4
 80092de:	4798      	blx	r3
 80092e0:	3601      	adds	r6, #1
 80092e2:	e7f2      	b.n	80092ca <__libc_init_array+0x1e>
 80092e4:	0801d664 	.word	0x0801d664
 80092e8:	0801d664 	.word	0x0801d664
 80092ec:	0801d664 	.word	0x0801d664
 80092f0:	0801d668 	.word	0x0801d668

080092f4 <__retarget_lock_init_recursive>:
 80092f4:	4770      	bx	lr

080092f6 <__retarget_lock_acquire_recursive>:
 80092f6:	4770      	bx	lr

080092f8 <__retarget_lock_release_recursive>:
 80092f8:	4770      	bx	lr

080092fa <memcpy>:
 80092fa:	440a      	add	r2, r1
 80092fc:	4291      	cmp	r1, r2
 80092fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8009302:	d100      	bne.n	8009306 <memcpy+0xc>
 8009304:	4770      	bx	lr
 8009306:	b510      	push	{r4, lr}
 8009308:	f811 4b01 	ldrb.w	r4, [r1], #1
 800930c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009310:	4291      	cmp	r1, r2
 8009312:	d1f9      	bne.n	8009308 <memcpy+0xe>
 8009314:	bd10      	pop	{r4, pc}

08009316 <quorem>:
 8009316:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931a:	6903      	ldr	r3, [r0, #16]
 800931c:	690c      	ldr	r4, [r1, #16]
 800931e:	42a3      	cmp	r3, r4
 8009320:	4607      	mov	r7, r0
 8009322:	db7e      	blt.n	8009422 <quorem+0x10c>
 8009324:	3c01      	subs	r4, #1
 8009326:	f101 0814 	add.w	r8, r1, #20
 800932a:	00a3      	lsls	r3, r4, #2
 800932c:	f100 0514 	add.w	r5, r0, #20
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009336:	9301      	str	r3, [sp, #4]
 8009338:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800933c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009340:	3301      	adds	r3, #1
 8009342:	429a      	cmp	r2, r3
 8009344:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009348:	fbb2 f6f3 	udiv	r6, r2, r3
 800934c:	d32e      	bcc.n	80093ac <quorem+0x96>
 800934e:	f04f 0a00 	mov.w	sl, #0
 8009352:	46c4      	mov	ip, r8
 8009354:	46ae      	mov	lr, r5
 8009356:	46d3      	mov	fp, sl
 8009358:	f85c 3b04 	ldr.w	r3, [ip], #4
 800935c:	b298      	uxth	r0, r3
 800935e:	fb06 a000 	mla	r0, r6, r0, sl
 8009362:	0c02      	lsrs	r2, r0, #16
 8009364:	0c1b      	lsrs	r3, r3, #16
 8009366:	fb06 2303 	mla	r3, r6, r3, r2
 800936a:	f8de 2000 	ldr.w	r2, [lr]
 800936e:	b280      	uxth	r0, r0
 8009370:	b292      	uxth	r2, r2
 8009372:	1a12      	subs	r2, r2, r0
 8009374:	445a      	add	r2, fp
 8009376:	f8de 0000 	ldr.w	r0, [lr]
 800937a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800937e:	b29b      	uxth	r3, r3
 8009380:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009384:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009388:	b292      	uxth	r2, r2
 800938a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800938e:	45e1      	cmp	r9, ip
 8009390:	f84e 2b04 	str.w	r2, [lr], #4
 8009394:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009398:	d2de      	bcs.n	8009358 <quorem+0x42>
 800939a:	9b00      	ldr	r3, [sp, #0]
 800939c:	58eb      	ldr	r3, [r5, r3]
 800939e:	b92b      	cbnz	r3, 80093ac <quorem+0x96>
 80093a0:	9b01      	ldr	r3, [sp, #4]
 80093a2:	3b04      	subs	r3, #4
 80093a4:	429d      	cmp	r5, r3
 80093a6:	461a      	mov	r2, r3
 80093a8:	d32f      	bcc.n	800940a <quorem+0xf4>
 80093aa:	613c      	str	r4, [r7, #16]
 80093ac:	4638      	mov	r0, r7
 80093ae:	f001 f97d 	bl	800a6ac <__mcmp>
 80093b2:	2800      	cmp	r0, #0
 80093b4:	db25      	blt.n	8009402 <quorem+0xec>
 80093b6:	4629      	mov	r1, r5
 80093b8:	2000      	movs	r0, #0
 80093ba:	f858 2b04 	ldr.w	r2, [r8], #4
 80093be:	f8d1 c000 	ldr.w	ip, [r1]
 80093c2:	fa1f fe82 	uxth.w	lr, r2
 80093c6:	fa1f f38c 	uxth.w	r3, ip
 80093ca:	eba3 030e 	sub.w	r3, r3, lr
 80093ce:	4403      	add	r3, r0
 80093d0:	0c12      	lsrs	r2, r2, #16
 80093d2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80093d6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80093da:	b29b      	uxth	r3, r3
 80093dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093e0:	45c1      	cmp	r9, r8
 80093e2:	f841 3b04 	str.w	r3, [r1], #4
 80093e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80093ea:	d2e6      	bcs.n	80093ba <quorem+0xa4>
 80093ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093f4:	b922      	cbnz	r2, 8009400 <quorem+0xea>
 80093f6:	3b04      	subs	r3, #4
 80093f8:	429d      	cmp	r5, r3
 80093fa:	461a      	mov	r2, r3
 80093fc:	d30b      	bcc.n	8009416 <quorem+0x100>
 80093fe:	613c      	str	r4, [r7, #16]
 8009400:	3601      	adds	r6, #1
 8009402:	4630      	mov	r0, r6
 8009404:	b003      	add	sp, #12
 8009406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800940a:	6812      	ldr	r2, [r2, #0]
 800940c:	3b04      	subs	r3, #4
 800940e:	2a00      	cmp	r2, #0
 8009410:	d1cb      	bne.n	80093aa <quorem+0x94>
 8009412:	3c01      	subs	r4, #1
 8009414:	e7c6      	b.n	80093a4 <quorem+0x8e>
 8009416:	6812      	ldr	r2, [r2, #0]
 8009418:	3b04      	subs	r3, #4
 800941a:	2a00      	cmp	r2, #0
 800941c:	d1ef      	bne.n	80093fe <quorem+0xe8>
 800941e:	3c01      	subs	r4, #1
 8009420:	e7ea      	b.n	80093f8 <quorem+0xe2>
 8009422:	2000      	movs	r0, #0
 8009424:	e7ee      	b.n	8009404 <quorem+0xee>
	...

08009428 <_dtoa_r>:
 8009428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800942c:	69c7      	ldr	r7, [r0, #28]
 800942e:	b097      	sub	sp, #92	@ 0x5c
 8009430:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009434:	ec55 4b10 	vmov	r4, r5, d0
 8009438:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800943a:	9107      	str	r1, [sp, #28]
 800943c:	4681      	mov	r9, r0
 800943e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009440:	9311      	str	r3, [sp, #68]	@ 0x44
 8009442:	b97f      	cbnz	r7, 8009464 <_dtoa_r+0x3c>
 8009444:	2010      	movs	r0, #16
 8009446:	f000 fe09 	bl	800a05c <malloc>
 800944a:	4602      	mov	r2, r0
 800944c:	f8c9 001c 	str.w	r0, [r9, #28]
 8009450:	b920      	cbnz	r0, 800945c <_dtoa_r+0x34>
 8009452:	4ba9      	ldr	r3, [pc, #676]	@ (80096f8 <_dtoa_r+0x2d0>)
 8009454:	21ef      	movs	r1, #239	@ 0xef
 8009456:	48a9      	ldr	r0, [pc, #676]	@ (80096fc <_dtoa_r+0x2d4>)
 8009458:	f001 fcb2 	bl	800adc0 <__assert_func>
 800945c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009460:	6007      	str	r7, [r0, #0]
 8009462:	60c7      	str	r7, [r0, #12]
 8009464:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009468:	6819      	ldr	r1, [r3, #0]
 800946a:	b159      	cbz	r1, 8009484 <_dtoa_r+0x5c>
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	604a      	str	r2, [r1, #4]
 8009470:	2301      	movs	r3, #1
 8009472:	4093      	lsls	r3, r2
 8009474:	608b      	str	r3, [r1, #8]
 8009476:	4648      	mov	r0, r9
 8009478:	f000 fee6 	bl	800a248 <_Bfree>
 800947c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009480:	2200      	movs	r2, #0
 8009482:	601a      	str	r2, [r3, #0]
 8009484:	1e2b      	subs	r3, r5, #0
 8009486:	bfb9      	ittee	lt
 8009488:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800948c:	9305      	strlt	r3, [sp, #20]
 800948e:	2300      	movge	r3, #0
 8009490:	6033      	strge	r3, [r6, #0]
 8009492:	9f05      	ldr	r7, [sp, #20]
 8009494:	4b9a      	ldr	r3, [pc, #616]	@ (8009700 <_dtoa_r+0x2d8>)
 8009496:	bfbc      	itt	lt
 8009498:	2201      	movlt	r2, #1
 800949a:	6032      	strlt	r2, [r6, #0]
 800949c:	43bb      	bics	r3, r7
 800949e:	d112      	bne.n	80094c6 <_dtoa_r+0x9e>
 80094a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80094a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80094a6:	6013      	str	r3, [r2, #0]
 80094a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80094ac:	4323      	orrs	r3, r4
 80094ae:	f000 855a 	beq.w	8009f66 <_dtoa_r+0xb3e>
 80094b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80094b4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009714 <_dtoa_r+0x2ec>
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	f000 855c 	beq.w	8009f76 <_dtoa_r+0xb4e>
 80094be:	f10a 0303 	add.w	r3, sl, #3
 80094c2:	f000 bd56 	b.w	8009f72 <_dtoa_r+0xb4a>
 80094c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80094ca:	2200      	movs	r2, #0
 80094cc:	ec51 0b17 	vmov	r0, r1, d7
 80094d0:	2300      	movs	r3, #0
 80094d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80094d6:	f7f7 fb07 	bl	8000ae8 <__aeabi_dcmpeq>
 80094da:	4680      	mov	r8, r0
 80094dc:	b158      	cbz	r0, 80094f6 <_dtoa_r+0xce>
 80094de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80094e0:	2301      	movs	r3, #1
 80094e2:	6013      	str	r3, [r2, #0]
 80094e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80094e6:	b113      	cbz	r3, 80094ee <_dtoa_r+0xc6>
 80094e8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80094ea:	4b86      	ldr	r3, [pc, #536]	@ (8009704 <_dtoa_r+0x2dc>)
 80094ec:	6013      	str	r3, [r2, #0]
 80094ee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009718 <_dtoa_r+0x2f0>
 80094f2:	f000 bd40 	b.w	8009f76 <_dtoa_r+0xb4e>
 80094f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80094fa:	aa14      	add	r2, sp, #80	@ 0x50
 80094fc:	a915      	add	r1, sp, #84	@ 0x54
 80094fe:	4648      	mov	r0, r9
 8009500:	f001 f984 	bl	800a80c <__d2b>
 8009504:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009508:	9002      	str	r0, [sp, #8]
 800950a:	2e00      	cmp	r6, #0
 800950c:	d078      	beq.n	8009600 <_dtoa_r+0x1d8>
 800950e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009510:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009514:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009518:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800951c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009520:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009524:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009528:	4619      	mov	r1, r3
 800952a:	2200      	movs	r2, #0
 800952c:	4b76      	ldr	r3, [pc, #472]	@ (8009708 <_dtoa_r+0x2e0>)
 800952e:	f7f6 febb 	bl	80002a8 <__aeabi_dsub>
 8009532:	a36b      	add	r3, pc, #428	@ (adr r3, 80096e0 <_dtoa_r+0x2b8>)
 8009534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009538:	f7f7 f86e 	bl	8000618 <__aeabi_dmul>
 800953c:	a36a      	add	r3, pc, #424	@ (adr r3, 80096e8 <_dtoa_r+0x2c0>)
 800953e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009542:	f7f6 feb3 	bl	80002ac <__adddf3>
 8009546:	4604      	mov	r4, r0
 8009548:	4630      	mov	r0, r6
 800954a:	460d      	mov	r5, r1
 800954c:	f7f6 fffa 	bl	8000544 <__aeabi_i2d>
 8009550:	a367      	add	r3, pc, #412	@ (adr r3, 80096f0 <_dtoa_r+0x2c8>)
 8009552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009556:	f7f7 f85f 	bl	8000618 <__aeabi_dmul>
 800955a:	4602      	mov	r2, r0
 800955c:	460b      	mov	r3, r1
 800955e:	4620      	mov	r0, r4
 8009560:	4629      	mov	r1, r5
 8009562:	f7f6 fea3 	bl	80002ac <__adddf3>
 8009566:	4604      	mov	r4, r0
 8009568:	460d      	mov	r5, r1
 800956a:	f7f7 fb05 	bl	8000b78 <__aeabi_d2iz>
 800956e:	2200      	movs	r2, #0
 8009570:	4607      	mov	r7, r0
 8009572:	2300      	movs	r3, #0
 8009574:	4620      	mov	r0, r4
 8009576:	4629      	mov	r1, r5
 8009578:	f7f7 fac0 	bl	8000afc <__aeabi_dcmplt>
 800957c:	b140      	cbz	r0, 8009590 <_dtoa_r+0x168>
 800957e:	4638      	mov	r0, r7
 8009580:	f7f6 ffe0 	bl	8000544 <__aeabi_i2d>
 8009584:	4622      	mov	r2, r4
 8009586:	462b      	mov	r3, r5
 8009588:	f7f7 faae 	bl	8000ae8 <__aeabi_dcmpeq>
 800958c:	b900      	cbnz	r0, 8009590 <_dtoa_r+0x168>
 800958e:	3f01      	subs	r7, #1
 8009590:	2f16      	cmp	r7, #22
 8009592:	d852      	bhi.n	800963a <_dtoa_r+0x212>
 8009594:	4b5d      	ldr	r3, [pc, #372]	@ (800970c <_dtoa_r+0x2e4>)
 8009596:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800959a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80095a2:	f7f7 faab 	bl	8000afc <__aeabi_dcmplt>
 80095a6:	2800      	cmp	r0, #0
 80095a8:	d049      	beq.n	800963e <_dtoa_r+0x216>
 80095aa:	3f01      	subs	r7, #1
 80095ac:	2300      	movs	r3, #0
 80095ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80095b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80095b2:	1b9b      	subs	r3, r3, r6
 80095b4:	1e5a      	subs	r2, r3, #1
 80095b6:	bf45      	ittet	mi
 80095b8:	f1c3 0301 	rsbmi	r3, r3, #1
 80095bc:	9300      	strmi	r3, [sp, #0]
 80095be:	2300      	movpl	r3, #0
 80095c0:	2300      	movmi	r3, #0
 80095c2:	9206      	str	r2, [sp, #24]
 80095c4:	bf54      	ite	pl
 80095c6:	9300      	strpl	r3, [sp, #0]
 80095c8:	9306      	strmi	r3, [sp, #24]
 80095ca:	2f00      	cmp	r7, #0
 80095cc:	db39      	blt.n	8009642 <_dtoa_r+0x21a>
 80095ce:	9b06      	ldr	r3, [sp, #24]
 80095d0:	970d      	str	r7, [sp, #52]	@ 0x34
 80095d2:	443b      	add	r3, r7
 80095d4:	9306      	str	r3, [sp, #24]
 80095d6:	2300      	movs	r3, #0
 80095d8:	9308      	str	r3, [sp, #32]
 80095da:	9b07      	ldr	r3, [sp, #28]
 80095dc:	2b09      	cmp	r3, #9
 80095de:	d863      	bhi.n	80096a8 <_dtoa_r+0x280>
 80095e0:	2b05      	cmp	r3, #5
 80095e2:	bfc4      	itt	gt
 80095e4:	3b04      	subgt	r3, #4
 80095e6:	9307      	strgt	r3, [sp, #28]
 80095e8:	9b07      	ldr	r3, [sp, #28]
 80095ea:	f1a3 0302 	sub.w	r3, r3, #2
 80095ee:	bfcc      	ite	gt
 80095f0:	2400      	movgt	r4, #0
 80095f2:	2401      	movle	r4, #1
 80095f4:	2b03      	cmp	r3, #3
 80095f6:	d863      	bhi.n	80096c0 <_dtoa_r+0x298>
 80095f8:	e8df f003 	tbb	[pc, r3]
 80095fc:	2b375452 	.word	0x2b375452
 8009600:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009604:	441e      	add	r6, r3
 8009606:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800960a:	2b20      	cmp	r3, #32
 800960c:	bfc1      	itttt	gt
 800960e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009612:	409f      	lslgt	r7, r3
 8009614:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009618:	fa24 f303 	lsrgt.w	r3, r4, r3
 800961c:	bfd6      	itet	le
 800961e:	f1c3 0320 	rsble	r3, r3, #32
 8009622:	ea47 0003 	orrgt.w	r0, r7, r3
 8009626:	fa04 f003 	lslle.w	r0, r4, r3
 800962a:	f7f6 ff7b 	bl	8000524 <__aeabi_ui2d>
 800962e:	2201      	movs	r2, #1
 8009630:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009634:	3e01      	subs	r6, #1
 8009636:	9212      	str	r2, [sp, #72]	@ 0x48
 8009638:	e776      	b.n	8009528 <_dtoa_r+0x100>
 800963a:	2301      	movs	r3, #1
 800963c:	e7b7      	b.n	80095ae <_dtoa_r+0x186>
 800963e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009640:	e7b6      	b.n	80095b0 <_dtoa_r+0x188>
 8009642:	9b00      	ldr	r3, [sp, #0]
 8009644:	1bdb      	subs	r3, r3, r7
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	427b      	negs	r3, r7
 800964a:	9308      	str	r3, [sp, #32]
 800964c:	2300      	movs	r3, #0
 800964e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009650:	e7c3      	b.n	80095da <_dtoa_r+0x1b2>
 8009652:	2301      	movs	r3, #1
 8009654:	9309      	str	r3, [sp, #36]	@ 0x24
 8009656:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009658:	eb07 0b03 	add.w	fp, r7, r3
 800965c:	f10b 0301 	add.w	r3, fp, #1
 8009660:	2b01      	cmp	r3, #1
 8009662:	9303      	str	r3, [sp, #12]
 8009664:	bfb8      	it	lt
 8009666:	2301      	movlt	r3, #1
 8009668:	e006      	b.n	8009678 <_dtoa_r+0x250>
 800966a:	2301      	movs	r3, #1
 800966c:	9309      	str	r3, [sp, #36]	@ 0x24
 800966e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009670:	2b00      	cmp	r3, #0
 8009672:	dd28      	ble.n	80096c6 <_dtoa_r+0x29e>
 8009674:	469b      	mov	fp, r3
 8009676:	9303      	str	r3, [sp, #12]
 8009678:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800967c:	2100      	movs	r1, #0
 800967e:	2204      	movs	r2, #4
 8009680:	f102 0514 	add.w	r5, r2, #20
 8009684:	429d      	cmp	r5, r3
 8009686:	d926      	bls.n	80096d6 <_dtoa_r+0x2ae>
 8009688:	6041      	str	r1, [r0, #4]
 800968a:	4648      	mov	r0, r9
 800968c:	f000 fd9c 	bl	800a1c8 <_Balloc>
 8009690:	4682      	mov	sl, r0
 8009692:	2800      	cmp	r0, #0
 8009694:	d142      	bne.n	800971c <_dtoa_r+0x2f4>
 8009696:	4b1e      	ldr	r3, [pc, #120]	@ (8009710 <_dtoa_r+0x2e8>)
 8009698:	4602      	mov	r2, r0
 800969a:	f240 11af 	movw	r1, #431	@ 0x1af
 800969e:	e6da      	b.n	8009456 <_dtoa_r+0x2e>
 80096a0:	2300      	movs	r3, #0
 80096a2:	e7e3      	b.n	800966c <_dtoa_r+0x244>
 80096a4:	2300      	movs	r3, #0
 80096a6:	e7d5      	b.n	8009654 <_dtoa_r+0x22c>
 80096a8:	2401      	movs	r4, #1
 80096aa:	2300      	movs	r3, #0
 80096ac:	9307      	str	r3, [sp, #28]
 80096ae:	9409      	str	r4, [sp, #36]	@ 0x24
 80096b0:	f04f 3bff 	mov.w	fp, #4294967295
 80096b4:	2200      	movs	r2, #0
 80096b6:	f8cd b00c 	str.w	fp, [sp, #12]
 80096ba:	2312      	movs	r3, #18
 80096bc:	920c      	str	r2, [sp, #48]	@ 0x30
 80096be:	e7db      	b.n	8009678 <_dtoa_r+0x250>
 80096c0:	2301      	movs	r3, #1
 80096c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80096c4:	e7f4      	b.n	80096b0 <_dtoa_r+0x288>
 80096c6:	f04f 0b01 	mov.w	fp, #1
 80096ca:	f8cd b00c 	str.w	fp, [sp, #12]
 80096ce:	465b      	mov	r3, fp
 80096d0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80096d4:	e7d0      	b.n	8009678 <_dtoa_r+0x250>
 80096d6:	3101      	adds	r1, #1
 80096d8:	0052      	lsls	r2, r2, #1
 80096da:	e7d1      	b.n	8009680 <_dtoa_r+0x258>
 80096dc:	f3af 8000 	nop.w
 80096e0:	636f4361 	.word	0x636f4361
 80096e4:	3fd287a7 	.word	0x3fd287a7
 80096e8:	8b60c8b3 	.word	0x8b60c8b3
 80096ec:	3fc68a28 	.word	0x3fc68a28
 80096f0:	509f79fb 	.word	0x509f79fb
 80096f4:	3fd34413 	.word	0x3fd34413
 80096f8:	0801d329 	.word	0x0801d329
 80096fc:	0801d340 	.word	0x0801d340
 8009700:	7ff00000 	.word	0x7ff00000
 8009704:	0801d2f9 	.word	0x0801d2f9
 8009708:	3ff80000 	.word	0x3ff80000
 800970c:	0801d490 	.word	0x0801d490
 8009710:	0801d398 	.word	0x0801d398
 8009714:	0801d325 	.word	0x0801d325
 8009718:	0801d2f8 	.word	0x0801d2f8
 800971c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009720:	6018      	str	r0, [r3, #0]
 8009722:	9b03      	ldr	r3, [sp, #12]
 8009724:	2b0e      	cmp	r3, #14
 8009726:	f200 80a1 	bhi.w	800986c <_dtoa_r+0x444>
 800972a:	2c00      	cmp	r4, #0
 800972c:	f000 809e 	beq.w	800986c <_dtoa_r+0x444>
 8009730:	2f00      	cmp	r7, #0
 8009732:	dd33      	ble.n	800979c <_dtoa_r+0x374>
 8009734:	4b9c      	ldr	r3, [pc, #624]	@ (80099a8 <_dtoa_r+0x580>)
 8009736:	f007 020f 	and.w	r2, r7, #15
 800973a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800973e:	ed93 7b00 	vldr	d7, [r3]
 8009742:	05f8      	lsls	r0, r7, #23
 8009744:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009748:	ea4f 1427 	mov.w	r4, r7, asr #4
 800974c:	d516      	bpl.n	800977c <_dtoa_r+0x354>
 800974e:	4b97      	ldr	r3, [pc, #604]	@ (80099ac <_dtoa_r+0x584>)
 8009750:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009754:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009758:	f7f7 f888 	bl	800086c <__aeabi_ddiv>
 800975c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009760:	f004 040f 	and.w	r4, r4, #15
 8009764:	2603      	movs	r6, #3
 8009766:	4d91      	ldr	r5, [pc, #580]	@ (80099ac <_dtoa_r+0x584>)
 8009768:	b954      	cbnz	r4, 8009780 <_dtoa_r+0x358>
 800976a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800976e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009772:	f7f7 f87b 	bl	800086c <__aeabi_ddiv>
 8009776:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800977a:	e028      	b.n	80097ce <_dtoa_r+0x3a6>
 800977c:	2602      	movs	r6, #2
 800977e:	e7f2      	b.n	8009766 <_dtoa_r+0x33e>
 8009780:	07e1      	lsls	r1, r4, #31
 8009782:	d508      	bpl.n	8009796 <_dtoa_r+0x36e>
 8009784:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009788:	e9d5 2300 	ldrd	r2, r3, [r5]
 800978c:	f7f6 ff44 	bl	8000618 <__aeabi_dmul>
 8009790:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009794:	3601      	adds	r6, #1
 8009796:	1064      	asrs	r4, r4, #1
 8009798:	3508      	adds	r5, #8
 800979a:	e7e5      	b.n	8009768 <_dtoa_r+0x340>
 800979c:	f000 80af 	beq.w	80098fe <_dtoa_r+0x4d6>
 80097a0:	427c      	negs	r4, r7
 80097a2:	4b81      	ldr	r3, [pc, #516]	@ (80099a8 <_dtoa_r+0x580>)
 80097a4:	4d81      	ldr	r5, [pc, #516]	@ (80099ac <_dtoa_r+0x584>)
 80097a6:	f004 020f 	and.w	r2, r4, #15
 80097aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80097b6:	f7f6 ff2f 	bl	8000618 <__aeabi_dmul>
 80097ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80097be:	1124      	asrs	r4, r4, #4
 80097c0:	2300      	movs	r3, #0
 80097c2:	2602      	movs	r6, #2
 80097c4:	2c00      	cmp	r4, #0
 80097c6:	f040 808f 	bne.w	80098e8 <_dtoa_r+0x4c0>
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d1d3      	bne.n	8009776 <_dtoa_r+0x34e>
 80097ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80097d0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f000 8094 	beq.w	8009902 <_dtoa_r+0x4da>
 80097da:	4b75      	ldr	r3, [pc, #468]	@ (80099b0 <_dtoa_r+0x588>)
 80097dc:	2200      	movs	r2, #0
 80097de:	4620      	mov	r0, r4
 80097e0:	4629      	mov	r1, r5
 80097e2:	f7f7 f98b 	bl	8000afc <__aeabi_dcmplt>
 80097e6:	2800      	cmp	r0, #0
 80097e8:	f000 808b 	beq.w	8009902 <_dtoa_r+0x4da>
 80097ec:	9b03      	ldr	r3, [sp, #12]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f000 8087 	beq.w	8009902 <_dtoa_r+0x4da>
 80097f4:	f1bb 0f00 	cmp.w	fp, #0
 80097f8:	dd34      	ble.n	8009864 <_dtoa_r+0x43c>
 80097fa:	4620      	mov	r0, r4
 80097fc:	4b6d      	ldr	r3, [pc, #436]	@ (80099b4 <_dtoa_r+0x58c>)
 80097fe:	2200      	movs	r2, #0
 8009800:	4629      	mov	r1, r5
 8009802:	f7f6 ff09 	bl	8000618 <__aeabi_dmul>
 8009806:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800980a:	f107 38ff 	add.w	r8, r7, #4294967295
 800980e:	3601      	adds	r6, #1
 8009810:	465c      	mov	r4, fp
 8009812:	4630      	mov	r0, r6
 8009814:	f7f6 fe96 	bl	8000544 <__aeabi_i2d>
 8009818:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800981c:	f7f6 fefc 	bl	8000618 <__aeabi_dmul>
 8009820:	4b65      	ldr	r3, [pc, #404]	@ (80099b8 <_dtoa_r+0x590>)
 8009822:	2200      	movs	r2, #0
 8009824:	f7f6 fd42 	bl	80002ac <__adddf3>
 8009828:	4605      	mov	r5, r0
 800982a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800982e:	2c00      	cmp	r4, #0
 8009830:	d16a      	bne.n	8009908 <_dtoa_r+0x4e0>
 8009832:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009836:	4b61      	ldr	r3, [pc, #388]	@ (80099bc <_dtoa_r+0x594>)
 8009838:	2200      	movs	r2, #0
 800983a:	f7f6 fd35 	bl	80002a8 <__aeabi_dsub>
 800983e:	4602      	mov	r2, r0
 8009840:	460b      	mov	r3, r1
 8009842:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009846:	462a      	mov	r2, r5
 8009848:	4633      	mov	r3, r6
 800984a:	f7f7 f975 	bl	8000b38 <__aeabi_dcmpgt>
 800984e:	2800      	cmp	r0, #0
 8009850:	f040 8298 	bne.w	8009d84 <_dtoa_r+0x95c>
 8009854:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009858:	462a      	mov	r2, r5
 800985a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800985e:	f7f7 f94d 	bl	8000afc <__aeabi_dcmplt>
 8009862:	bb38      	cbnz	r0, 80098b4 <_dtoa_r+0x48c>
 8009864:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009868:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800986c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800986e:	2b00      	cmp	r3, #0
 8009870:	f2c0 8157 	blt.w	8009b22 <_dtoa_r+0x6fa>
 8009874:	2f0e      	cmp	r7, #14
 8009876:	f300 8154 	bgt.w	8009b22 <_dtoa_r+0x6fa>
 800987a:	4b4b      	ldr	r3, [pc, #300]	@ (80099a8 <_dtoa_r+0x580>)
 800987c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009880:	ed93 7b00 	vldr	d7, [r3]
 8009884:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009886:	2b00      	cmp	r3, #0
 8009888:	ed8d 7b00 	vstr	d7, [sp]
 800988c:	f280 80e5 	bge.w	8009a5a <_dtoa_r+0x632>
 8009890:	9b03      	ldr	r3, [sp, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	f300 80e1 	bgt.w	8009a5a <_dtoa_r+0x632>
 8009898:	d10c      	bne.n	80098b4 <_dtoa_r+0x48c>
 800989a:	4b48      	ldr	r3, [pc, #288]	@ (80099bc <_dtoa_r+0x594>)
 800989c:	2200      	movs	r2, #0
 800989e:	ec51 0b17 	vmov	r0, r1, d7
 80098a2:	f7f6 feb9 	bl	8000618 <__aeabi_dmul>
 80098a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098aa:	f7f7 f93b 	bl	8000b24 <__aeabi_dcmpge>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	f000 8266 	beq.w	8009d80 <_dtoa_r+0x958>
 80098b4:	2400      	movs	r4, #0
 80098b6:	4625      	mov	r5, r4
 80098b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80098ba:	4656      	mov	r6, sl
 80098bc:	ea6f 0803 	mvn.w	r8, r3
 80098c0:	2700      	movs	r7, #0
 80098c2:	4621      	mov	r1, r4
 80098c4:	4648      	mov	r0, r9
 80098c6:	f000 fcbf 	bl	800a248 <_Bfree>
 80098ca:	2d00      	cmp	r5, #0
 80098cc:	f000 80bd 	beq.w	8009a4a <_dtoa_r+0x622>
 80098d0:	b12f      	cbz	r7, 80098de <_dtoa_r+0x4b6>
 80098d2:	42af      	cmp	r7, r5
 80098d4:	d003      	beq.n	80098de <_dtoa_r+0x4b6>
 80098d6:	4639      	mov	r1, r7
 80098d8:	4648      	mov	r0, r9
 80098da:	f000 fcb5 	bl	800a248 <_Bfree>
 80098de:	4629      	mov	r1, r5
 80098e0:	4648      	mov	r0, r9
 80098e2:	f000 fcb1 	bl	800a248 <_Bfree>
 80098e6:	e0b0      	b.n	8009a4a <_dtoa_r+0x622>
 80098e8:	07e2      	lsls	r2, r4, #31
 80098ea:	d505      	bpl.n	80098f8 <_dtoa_r+0x4d0>
 80098ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80098f0:	f7f6 fe92 	bl	8000618 <__aeabi_dmul>
 80098f4:	3601      	adds	r6, #1
 80098f6:	2301      	movs	r3, #1
 80098f8:	1064      	asrs	r4, r4, #1
 80098fa:	3508      	adds	r5, #8
 80098fc:	e762      	b.n	80097c4 <_dtoa_r+0x39c>
 80098fe:	2602      	movs	r6, #2
 8009900:	e765      	b.n	80097ce <_dtoa_r+0x3a6>
 8009902:	9c03      	ldr	r4, [sp, #12]
 8009904:	46b8      	mov	r8, r7
 8009906:	e784      	b.n	8009812 <_dtoa_r+0x3ea>
 8009908:	4b27      	ldr	r3, [pc, #156]	@ (80099a8 <_dtoa_r+0x580>)
 800990a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800990c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009910:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009914:	4454      	add	r4, sl
 8009916:	2900      	cmp	r1, #0
 8009918:	d054      	beq.n	80099c4 <_dtoa_r+0x59c>
 800991a:	4929      	ldr	r1, [pc, #164]	@ (80099c0 <_dtoa_r+0x598>)
 800991c:	2000      	movs	r0, #0
 800991e:	f7f6 ffa5 	bl	800086c <__aeabi_ddiv>
 8009922:	4633      	mov	r3, r6
 8009924:	462a      	mov	r2, r5
 8009926:	f7f6 fcbf 	bl	80002a8 <__aeabi_dsub>
 800992a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800992e:	4656      	mov	r6, sl
 8009930:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009934:	f7f7 f920 	bl	8000b78 <__aeabi_d2iz>
 8009938:	4605      	mov	r5, r0
 800993a:	f7f6 fe03 	bl	8000544 <__aeabi_i2d>
 800993e:	4602      	mov	r2, r0
 8009940:	460b      	mov	r3, r1
 8009942:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009946:	f7f6 fcaf 	bl	80002a8 <__aeabi_dsub>
 800994a:	3530      	adds	r5, #48	@ 0x30
 800994c:	4602      	mov	r2, r0
 800994e:	460b      	mov	r3, r1
 8009950:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009954:	f806 5b01 	strb.w	r5, [r6], #1
 8009958:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800995c:	f7f7 f8ce 	bl	8000afc <__aeabi_dcmplt>
 8009960:	2800      	cmp	r0, #0
 8009962:	d172      	bne.n	8009a4a <_dtoa_r+0x622>
 8009964:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009968:	4911      	ldr	r1, [pc, #68]	@ (80099b0 <_dtoa_r+0x588>)
 800996a:	2000      	movs	r0, #0
 800996c:	f7f6 fc9c 	bl	80002a8 <__aeabi_dsub>
 8009970:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009974:	f7f7 f8c2 	bl	8000afc <__aeabi_dcmplt>
 8009978:	2800      	cmp	r0, #0
 800997a:	f040 80b4 	bne.w	8009ae6 <_dtoa_r+0x6be>
 800997e:	42a6      	cmp	r6, r4
 8009980:	f43f af70 	beq.w	8009864 <_dtoa_r+0x43c>
 8009984:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009988:	4b0a      	ldr	r3, [pc, #40]	@ (80099b4 <_dtoa_r+0x58c>)
 800998a:	2200      	movs	r2, #0
 800998c:	f7f6 fe44 	bl	8000618 <__aeabi_dmul>
 8009990:	4b08      	ldr	r3, [pc, #32]	@ (80099b4 <_dtoa_r+0x58c>)
 8009992:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009996:	2200      	movs	r2, #0
 8009998:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800999c:	f7f6 fe3c 	bl	8000618 <__aeabi_dmul>
 80099a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099a4:	e7c4      	b.n	8009930 <_dtoa_r+0x508>
 80099a6:	bf00      	nop
 80099a8:	0801d490 	.word	0x0801d490
 80099ac:	0801d468 	.word	0x0801d468
 80099b0:	3ff00000 	.word	0x3ff00000
 80099b4:	40240000 	.word	0x40240000
 80099b8:	401c0000 	.word	0x401c0000
 80099bc:	40140000 	.word	0x40140000
 80099c0:	3fe00000 	.word	0x3fe00000
 80099c4:	4631      	mov	r1, r6
 80099c6:	4628      	mov	r0, r5
 80099c8:	f7f6 fe26 	bl	8000618 <__aeabi_dmul>
 80099cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80099d0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80099d2:	4656      	mov	r6, sl
 80099d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099d8:	f7f7 f8ce 	bl	8000b78 <__aeabi_d2iz>
 80099dc:	4605      	mov	r5, r0
 80099de:	f7f6 fdb1 	bl	8000544 <__aeabi_i2d>
 80099e2:	4602      	mov	r2, r0
 80099e4:	460b      	mov	r3, r1
 80099e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099ea:	f7f6 fc5d 	bl	80002a8 <__aeabi_dsub>
 80099ee:	3530      	adds	r5, #48	@ 0x30
 80099f0:	f806 5b01 	strb.w	r5, [r6], #1
 80099f4:	4602      	mov	r2, r0
 80099f6:	460b      	mov	r3, r1
 80099f8:	42a6      	cmp	r6, r4
 80099fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80099fe:	f04f 0200 	mov.w	r2, #0
 8009a02:	d124      	bne.n	8009a4e <_dtoa_r+0x626>
 8009a04:	4baf      	ldr	r3, [pc, #700]	@ (8009cc4 <_dtoa_r+0x89c>)
 8009a06:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009a0a:	f7f6 fc4f 	bl	80002ac <__adddf3>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	460b      	mov	r3, r1
 8009a12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a16:	f7f7 f88f 	bl	8000b38 <__aeabi_dcmpgt>
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d163      	bne.n	8009ae6 <_dtoa_r+0x6be>
 8009a1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009a22:	49a8      	ldr	r1, [pc, #672]	@ (8009cc4 <_dtoa_r+0x89c>)
 8009a24:	2000      	movs	r0, #0
 8009a26:	f7f6 fc3f 	bl	80002a8 <__aeabi_dsub>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a32:	f7f7 f863 	bl	8000afc <__aeabi_dcmplt>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	f43f af14 	beq.w	8009864 <_dtoa_r+0x43c>
 8009a3c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009a3e:	1e73      	subs	r3, r6, #1
 8009a40:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a42:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a46:	2b30      	cmp	r3, #48	@ 0x30
 8009a48:	d0f8      	beq.n	8009a3c <_dtoa_r+0x614>
 8009a4a:	4647      	mov	r7, r8
 8009a4c:	e03b      	b.n	8009ac6 <_dtoa_r+0x69e>
 8009a4e:	4b9e      	ldr	r3, [pc, #632]	@ (8009cc8 <_dtoa_r+0x8a0>)
 8009a50:	f7f6 fde2 	bl	8000618 <__aeabi_dmul>
 8009a54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a58:	e7bc      	b.n	80099d4 <_dtoa_r+0x5ac>
 8009a5a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009a5e:	4656      	mov	r6, sl
 8009a60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a64:	4620      	mov	r0, r4
 8009a66:	4629      	mov	r1, r5
 8009a68:	f7f6 ff00 	bl	800086c <__aeabi_ddiv>
 8009a6c:	f7f7 f884 	bl	8000b78 <__aeabi_d2iz>
 8009a70:	4680      	mov	r8, r0
 8009a72:	f7f6 fd67 	bl	8000544 <__aeabi_i2d>
 8009a76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a7a:	f7f6 fdcd 	bl	8000618 <__aeabi_dmul>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	460b      	mov	r3, r1
 8009a82:	4620      	mov	r0, r4
 8009a84:	4629      	mov	r1, r5
 8009a86:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009a8a:	f7f6 fc0d 	bl	80002a8 <__aeabi_dsub>
 8009a8e:	f806 4b01 	strb.w	r4, [r6], #1
 8009a92:	9d03      	ldr	r5, [sp, #12]
 8009a94:	eba6 040a 	sub.w	r4, r6, sl
 8009a98:	42a5      	cmp	r5, r4
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	d133      	bne.n	8009b08 <_dtoa_r+0x6e0>
 8009aa0:	f7f6 fc04 	bl	80002ac <__adddf3>
 8009aa4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	460d      	mov	r5, r1
 8009aac:	f7f7 f844 	bl	8000b38 <__aeabi_dcmpgt>
 8009ab0:	b9c0      	cbnz	r0, 8009ae4 <_dtoa_r+0x6bc>
 8009ab2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	4629      	mov	r1, r5
 8009aba:	f7f7 f815 	bl	8000ae8 <__aeabi_dcmpeq>
 8009abe:	b110      	cbz	r0, 8009ac6 <_dtoa_r+0x69e>
 8009ac0:	f018 0f01 	tst.w	r8, #1
 8009ac4:	d10e      	bne.n	8009ae4 <_dtoa_r+0x6bc>
 8009ac6:	9902      	ldr	r1, [sp, #8]
 8009ac8:	4648      	mov	r0, r9
 8009aca:	f000 fbbd 	bl	800a248 <_Bfree>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	7033      	strb	r3, [r6, #0]
 8009ad2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ad4:	3701      	adds	r7, #1
 8009ad6:	601f      	str	r7, [r3, #0]
 8009ad8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	f000 824b 	beq.w	8009f76 <_dtoa_r+0xb4e>
 8009ae0:	601e      	str	r6, [r3, #0]
 8009ae2:	e248      	b.n	8009f76 <_dtoa_r+0xb4e>
 8009ae4:	46b8      	mov	r8, r7
 8009ae6:	4633      	mov	r3, r6
 8009ae8:	461e      	mov	r6, r3
 8009aea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009aee:	2a39      	cmp	r2, #57	@ 0x39
 8009af0:	d106      	bne.n	8009b00 <_dtoa_r+0x6d8>
 8009af2:	459a      	cmp	sl, r3
 8009af4:	d1f8      	bne.n	8009ae8 <_dtoa_r+0x6c0>
 8009af6:	2230      	movs	r2, #48	@ 0x30
 8009af8:	f108 0801 	add.w	r8, r8, #1
 8009afc:	f88a 2000 	strb.w	r2, [sl]
 8009b00:	781a      	ldrb	r2, [r3, #0]
 8009b02:	3201      	adds	r2, #1
 8009b04:	701a      	strb	r2, [r3, #0]
 8009b06:	e7a0      	b.n	8009a4a <_dtoa_r+0x622>
 8009b08:	4b6f      	ldr	r3, [pc, #444]	@ (8009cc8 <_dtoa_r+0x8a0>)
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f7f6 fd84 	bl	8000618 <__aeabi_dmul>
 8009b10:	2200      	movs	r2, #0
 8009b12:	2300      	movs	r3, #0
 8009b14:	4604      	mov	r4, r0
 8009b16:	460d      	mov	r5, r1
 8009b18:	f7f6 ffe6 	bl	8000ae8 <__aeabi_dcmpeq>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d09f      	beq.n	8009a60 <_dtoa_r+0x638>
 8009b20:	e7d1      	b.n	8009ac6 <_dtoa_r+0x69e>
 8009b22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b24:	2a00      	cmp	r2, #0
 8009b26:	f000 80ea 	beq.w	8009cfe <_dtoa_r+0x8d6>
 8009b2a:	9a07      	ldr	r2, [sp, #28]
 8009b2c:	2a01      	cmp	r2, #1
 8009b2e:	f300 80cd 	bgt.w	8009ccc <_dtoa_r+0x8a4>
 8009b32:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009b34:	2a00      	cmp	r2, #0
 8009b36:	f000 80c1 	beq.w	8009cbc <_dtoa_r+0x894>
 8009b3a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009b3e:	9c08      	ldr	r4, [sp, #32]
 8009b40:	9e00      	ldr	r6, [sp, #0]
 8009b42:	9a00      	ldr	r2, [sp, #0]
 8009b44:	441a      	add	r2, r3
 8009b46:	9200      	str	r2, [sp, #0]
 8009b48:	9a06      	ldr	r2, [sp, #24]
 8009b4a:	2101      	movs	r1, #1
 8009b4c:	441a      	add	r2, r3
 8009b4e:	4648      	mov	r0, r9
 8009b50:	9206      	str	r2, [sp, #24]
 8009b52:	f000 fc2d 	bl	800a3b0 <__i2b>
 8009b56:	4605      	mov	r5, r0
 8009b58:	b166      	cbz	r6, 8009b74 <_dtoa_r+0x74c>
 8009b5a:	9b06      	ldr	r3, [sp, #24]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	dd09      	ble.n	8009b74 <_dtoa_r+0x74c>
 8009b60:	42b3      	cmp	r3, r6
 8009b62:	9a00      	ldr	r2, [sp, #0]
 8009b64:	bfa8      	it	ge
 8009b66:	4633      	movge	r3, r6
 8009b68:	1ad2      	subs	r2, r2, r3
 8009b6a:	9200      	str	r2, [sp, #0]
 8009b6c:	9a06      	ldr	r2, [sp, #24]
 8009b6e:	1af6      	subs	r6, r6, r3
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	9306      	str	r3, [sp, #24]
 8009b74:	9b08      	ldr	r3, [sp, #32]
 8009b76:	b30b      	cbz	r3, 8009bbc <_dtoa_r+0x794>
 8009b78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	f000 80c6 	beq.w	8009d0c <_dtoa_r+0x8e4>
 8009b80:	2c00      	cmp	r4, #0
 8009b82:	f000 80c0 	beq.w	8009d06 <_dtoa_r+0x8de>
 8009b86:	4629      	mov	r1, r5
 8009b88:	4622      	mov	r2, r4
 8009b8a:	4648      	mov	r0, r9
 8009b8c:	f000 fcc8 	bl	800a520 <__pow5mult>
 8009b90:	9a02      	ldr	r2, [sp, #8]
 8009b92:	4601      	mov	r1, r0
 8009b94:	4605      	mov	r5, r0
 8009b96:	4648      	mov	r0, r9
 8009b98:	f000 fc20 	bl	800a3dc <__multiply>
 8009b9c:	9902      	ldr	r1, [sp, #8]
 8009b9e:	4680      	mov	r8, r0
 8009ba0:	4648      	mov	r0, r9
 8009ba2:	f000 fb51 	bl	800a248 <_Bfree>
 8009ba6:	9b08      	ldr	r3, [sp, #32]
 8009ba8:	1b1b      	subs	r3, r3, r4
 8009baa:	9308      	str	r3, [sp, #32]
 8009bac:	f000 80b1 	beq.w	8009d12 <_dtoa_r+0x8ea>
 8009bb0:	9a08      	ldr	r2, [sp, #32]
 8009bb2:	4641      	mov	r1, r8
 8009bb4:	4648      	mov	r0, r9
 8009bb6:	f000 fcb3 	bl	800a520 <__pow5mult>
 8009bba:	9002      	str	r0, [sp, #8]
 8009bbc:	2101      	movs	r1, #1
 8009bbe:	4648      	mov	r0, r9
 8009bc0:	f000 fbf6 	bl	800a3b0 <__i2b>
 8009bc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009bc6:	4604      	mov	r4, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f000 81d8 	beq.w	8009f7e <_dtoa_r+0xb56>
 8009bce:	461a      	mov	r2, r3
 8009bd0:	4601      	mov	r1, r0
 8009bd2:	4648      	mov	r0, r9
 8009bd4:	f000 fca4 	bl	800a520 <__pow5mult>
 8009bd8:	9b07      	ldr	r3, [sp, #28]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	4604      	mov	r4, r0
 8009bde:	f300 809f 	bgt.w	8009d20 <_dtoa_r+0x8f8>
 8009be2:	9b04      	ldr	r3, [sp, #16]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f040 8097 	bne.w	8009d18 <_dtoa_r+0x8f0>
 8009bea:	9b05      	ldr	r3, [sp, #20]
 8009bec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f040 8093 	bne.w	8009d1c <_dtoa_r+0x8f4>
 8009bf6:	9b05      	ldr	r3, [sp, #20]
 8009bf8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009bfc:	0d1b      	lsrs	r3, r3, #20
 8009bfe:	051b      	lsls	r3, r3, #20
 8009c00:	b133      	cbz	r3, 8009c10 <_dtoa_r+0x7e8>
 8009c02:	9b00      	ldr	r3, [sp, #0]
 8009c04:	3301      	adds	r3, #1
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	9b06      	ldr	r3, [sp, #24]
 8009c0a:	3301      	adds	r3, #1
 8009c0c:	9306      	str	r3, [sp, #24]
 8009c0e:	2301      	movs	r3, #1
 8009c10:	9308      	str	r3, [sp, #32]
 8009c12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	f000 81b8 	beq.w	8009f8a <_dtoa_r+0xb62>
 8009c1a:	6923      	ldr	r3, [r4, #16]
 8009c1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c20:	6918      	ldr	r0, [r3, #16]
 8009c22:	f000 fb79 	bl	800a318 <__hi0bits>
 8009c26:	f1c0 0020 	rsb	r0, r0, #32
 8009c2a:	9b06      	ldr	r3, [sp, #24]
 8009c2c:	4418      	add	r0, r3
 8009c2e:	f010 001f 	ands.w	r0, r0, #31
 8009c32:	f000 8082 	beq.w	8009d3a <_dtoa_r+0x912>
 8009c36:	f1c0 0320 	rsb	r3, r0, #32
 8009c3a:	2b04      	cmp	r3, #4
 8009c3c:	dd73      	ble.n	8009d26 <_dtoa_r+0x8fe>
 8009c3e:	9b00      	ldr	r3, [sp, #0]
 8009c40:	f1c0 001c 	rsb	r0, r0, #28
 8009c44:	4403      	add	r3, r0
 8009c46:	9300      	str	r3, [sp, #0]
 8009c48:	9b06      	ldr	r3, [sp, #24]
 8009c4a:	4403      	add	r3, r0
 8009c4c:	4406      	add	r6, r0
 8009c4e:	9306      	str	r3, [sp, #24]
 8009c50:	9b00      	ldr	r3, [sp, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	dd05      	ble.n	8009c62 <_dtoa_r+0x83a>
 8009c56:	9902      	ldr	r1, [sp, #8]
 8009c58:	461a      	mov	r2, r3
 8009c5a:	4648      	mov	r0, r9
 8009c5c:	f000 fcba 	bl	800a5d4 <__lshift>
 8009c60:	9002      	str	r0, [sp, #8]
 8009c62:	9b06      	ldr	r3, [sp, #24]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	dd05      	ble.n	8009c74 <_dtoa_r+0x84c>
 8009c68:	4621      	mov	r1, r4
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	4648      	mov	r0, r9
 8009c6e:	f000 fcb1 	bl	800a5d4 <__lshift>
 8009c72:	4604      	mov	r4, r0
 8009c74:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d061      	beq.n	8009d3e <_dtoa_r+0x916>
 8009c7a:	9802      	ldr	r0, [sp, #8]
 8009c7c:	4621      	mov	r1, r4
 8009c7e:	f000 fd15 	bl	800a6ac <__mcmp>
 8009c82:	2800      	cmp	r0, #0
 8009c84:	da5b      	bge.n	8009d3e <_dtoa_r+0x916>
 8009c86:	2300      	movs	r3, #0
 8009c88:	9902      	ldr	r1, [sp, #8]
 8009c8a:	220a      	movs	r2, #10
 8009c8c:	4648      	mov	r0, r9
 8009c8e:	f000 fafd 	bl	800a28c <__multadd>
 8009c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c94:	9002      	str	r0, [sp, #8]
 8009c96:	f107 38ff 	add.w	r8, r7, #4294967295
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f000 8177 	beq.w	8009f8e <_dtoa_r+0xb66>
 8009ca0:	4629      	mov	r1, r5
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	220a      	movs	r2, #10
 8009ca6:	4648      	mov	r0, r9
 8009ca8:	f000 faf0 	bl	800a28c <__multadd>
 8009cac:	f1bb 0f00 	cmp.w	fp, #0
 8009cb0:	4605      	mov	r5, r0
 8009cb2:	dc6f      	bgt.n	8009d94 <_dtoa_r+0x96c>
 8009cb4:	9b07      	ldr	r3, [sp, #28]
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	dc49      	bgt.n	8009d4e <_dtoa_r+0x926>
 8009cba:	e06b      	b.n	8009d94 <_dtoa_r+0x96c>
 8009cbc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009cbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009cc2:	e73c      	b.n	8009b3e <_dtoa_r+0x716>
 8009cc4:	3fe00000 	.word	0x3fe00000
 8009cc8:	40240000 	.word	0x40240000
 8009ccc:	9b03      	ldr	r3, [sp, #12]
 8009cce:	1e5c      	subs	r4, r3, #1
 8009cd0:	9b08      	ldr	r3, [sp, #32]
 8009cd2:	42a3      	cmp	r3, r4
 8009cd4:	db09      	blt.n	8009cea <_dtoa_r+0x8c2>
 8009cd6:	1b1c      	subs	r4, r3, r4
 8009cd8:	9b03      	ldr	r3, [sp, #12]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f6bf af30 	bge.w	8009b40 <_dtoa_r+0x718>
 8009ce0:	9b00      	ldr	r3, [sp, #0]
 8009ce2:	9a03      	ldr	r2, [sp, #12]
 8009ce4:	1a9e      	subs	r6, r3, r2
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	e72b      	b.n	8009b42 <_dtoa_r+0x71a>
 8009cea:	9b08      	ldr	r3, [sp, #32]
 8009cec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009cee:	9408      	str	r4, [sp, #32]
 8009cf0:	1ae3      	subs	r3, r4, r3
 8009cf2:	441a      	add	r2, r3
 8009cf4:	9e00      	ldr	r6, [sp, #0]
 8009cf6:	9b03      	ldr	r3, [sp, #12]
 8009cf8:	920d      	str	r2, [sp, #52]	@ 0x34
 8009cfa:	2400      	movs	r4, #0
 8009cfc:	e721      	b.n	8009b42 <_dtoa_r+0x71a>
 8009cfe:	9c08      	ldr	r4, [sp, #32]
 8009d00:	9e00      	ldr	r6, [sp, #0]
 8009d02:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009d04:	e728      	b.n	8009b58 <_dtoa_r+0x730>
 8009d06:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009d0a:	e751      	b.n	8009bb0 <_dtoa_r+0x788>
 8009d0c:	9a08      	ldr	r2, [sp, #32]
 8009d0e:	9902      	ldr	r1, [sp, #8]
 8009d10:	e750      	b.n	8009bb4 <_dtoa_r+0x78c>
 8009d12:	f8cd 8008 	str.w	r8, [sp, #8]
 8009d16:	e751      	b.n	8009bbc <_dtoa_r+0x794>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	e779      	b.n	8009c10 <_dtoa_r+0x7e8>
 8009d1c:	9b04      	ldr	r3, [sp, #16]
 8009d1e:	e777      	b.n	8009c10 <_dtoa_r+0x7e8>
 8009d20:	2300      	movs	r3, #0
 8009d22:	9308      	str	r3, [sp, #32]
 8009d24:	e779      	b.n	8009c1a <_dtoa_r+0x7f2>
 8009d26:	d093      	beq.n	8009c50 <_dtoa_r+0x828>
 8009d28:	9a00      	ldr	r2, [sp, #0]
 8009d2a:	331c      	adds	r3, #28
 8009d2c:	441a      	add	r2, r3
 8009d2e:	9200      	str	r2, [sp, #0]
 8009d30:	9a06      	ldr	r2, [sp, #24]
 8009d32:	441a      	add	r2, r3
 8009d34:	441e      	add	r6, r3
 8009d36:	9206      	str	r2, [sp, #24]
 8009d38:	e78a      	b.n	8009c50 <_dtoa_r+0x828>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	e7f4      	b.n	8009d28 <_dtoa_r+0x900>
 8009d3e:	9b03      	ldr	r3, [sp, #12]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	46b8      	mov	r8, r7
 8009d44:	dc20      	bgt.n	8009d88 <_dtoa_r+0x960>
 8009d46:	469b      	mov	fp, r3
 8009d48:	9b07      	ldr	r3, [sp, #28]
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	dd1e      	ble.n	8009d8c <_dtoa_r+0x964>
 8009d4e:	f1bb 0f00 	cmp.w	fp, #0
 8009d52:	f47f adb1 	bne.w	80098b8 <_dtoa_r+0x490>
 8009d56:	4621      	mov	r1, r4
 8009d58:	465b      	mov	r3, fp
 8009d5a:	2205      	movs	r2, #5
 8009d5c:	4648      	mov	r0, r9
 8009d5e:	f000 fa95 	bl	800a28c <__multadd>
 8009d62:	4601      	mov	r1, r0
 8009d64:	4604      	mov	r4, r0
 8009d66:	9802      	ldr	r0, [sp, #8]
 8009d68:	f000 fca0 	bl	800a6ac <__mcmp>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	f77f ada3 	ble.w	80098b8 <_dtoa_r+0x490>
 8009d72:	4656      	mov	r6, sl
 8009d74:	2331      	movs	r3, #49	@ 0x31
 8009d76:	f806 3b01 	strb.w	r3, [r6], #1
 8009d7a:	f108 0801 	add.w	r8, r8, #1
 8009d7e:	e59f      	b.n	80098c0 <_dtoa_r+0x498>
 8009d80:	9c03      	ldr	r4, [sp, #12]
 8009d82:	46b8      	mov	r8, r7
 8009d84:	4625      	mov	r5, r4
 8009d86:	e7f4      	b.n	8009d72 <_dtoa_r+0x94a>
 8009d88:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009d8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f000 8101 	beq.w	8009f96 <_dtoa_r+0xb6e>
 8009d94:	2e00      	cmp	r6, #0
 8009d96:	dd05      	ble.n	8009da4 <_dtoa_r+0x97c>
 8009d98:	4629      	mov	r1, r5
 8009d9a:	4632      	mov	r2, r6
 8009d9c:	4648      	mov	r0, r9
 8009d9e:	f000 fc19 	bl	800a5d4 <__lshift>
 8009da2:	4605      	mov	r5, r0
 8009da4:	9b08      	ldr	r3, [sp, #32]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d05c      	beq.n	8009e64 <_dtoa_r+0xa3c>
 8009daa:	6869      	ldr	r1, [r5, #4]
 8009dac:	4648      	mov	r0, r9
 8009dae:	f000 fa0b 	bl	800a1c8 <_Balloc>
 8009db2:	4606      	mov	r6, r0
 8009db4:	b928      	cbnz	r0, 8009dc2 <_dtoa_r+0x99a>
 8009db6:	4b82      	ldr	r3, [pc, #520]	@ (8009fc0 <_dtoa_r+0xb98>)
 8009db8:	4602      	mov	r2, r0
 8009dba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009dbe:	f7ff bb4a 	b.w	8009456 <_dtoa_r+0x2e>
 8009dc2:	692a      	ldr	r2, [r5, #16]
 8009dc4:	3202      	adds	r2, #2
 8009dc6:	0092      	lsls	r2, r2, #2
 8009dc8:	f105 010c 	add.w	r1, r5, #12
 8009dcc:	300c      	adds	r0, #12
 8009dce:	f7ff fa94 	bl	80092fa <memcpy>
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	4631      	mov	r1, r6
 8009dd6:	4648      	mov	r0, r9
 8009dd8:	f000 fbfc 	bl	800a5d4 <__lshift>
 8009ddc:	f10a 0301 	add.w	r3, sl, #1
 8009de0:	9300      	str	r3, [sp, #0]
 8009de2:	eb0a 030b 	add.w	r3, sl, fp
 8009de6:	9308      	str	r3, [sp, #32]
 8009de8:	9b04      	ldr	r3, [sp, #16]
 8009dea:	f003 0301 	and.w	r3, r3, #1
 8009dee:	462f      	mov	r7, r5
 8009df0:	9306      	str	r3, [sp, #24]
 8009df2:	4605      	mov	r5, r0
 8009df4:	9b00      	ldr	r3, [sp, #0]
 8009df6:	9802      	ldr	r0, [sp, #8]
 8009df8:	4621      	mov	r1, r4
 8009dfa:	f103 3bff 	add.w	fp, r3, #4294967295
 8009dfe:	f7ff fa8a 	bl	8009316 <quorem>
 8009e02:	4603      	mov	r3, r0
 8009e04:	3330      	adds	r3, #48	@ 0x30
 8009e06:	9003      	str	r0, [sp, #12]
 8009e08:	4639      	mov	r1, r7
 8009e0a:	9802      	ldr	r0, [sp, #8]
 8009e0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e0e:	f000 fc4d 	bl	800a6ac <__mcmp>
 8009e12:	462a      	mov	r2, r5
 8009e14:	9004      	str	r0, [sp, #16]
 8009e16:	4621      	mov	r1, r4
 8009e18:	4648      	mov	r0, r9
 8009e1a:	f000 fc63 	bl	800a6e4 <__mdiff>
 8009e1e:	68c2      	ldr	r2, [r0, #12]
 8009e20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e22:	4606      	mov	r6, r0
 8009e24:	bb02      	cbnz	r2, 8009e68 <_dtoa_r+0xa40>
 8009e26:	4601      	mov	r1, r0
 8009e28:	9802      	ldr	r0, [sp, #8]
 8009e2a:	f000 fc3f 	bl	800a6ac <__mcmp>
 8009e2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e30:	4602      	mov	r2, r0
 8009e32:	4631      	mov	r1, r6
 8009e34:	4648      	mov	r0, r9
 8009e36:	920c      	str	r2, [sp, #48]	@ 0x30
 8009e38:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e3a:	f000 fa05 	bl	800a248 <_Bfree>
 8009e3e:	9b07      	ldr	r3, [sp, #28]
 8009e40:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e42:	9e00      	ldr	r6, [sp, #0]
 8009e44:	ea42 0103 	orr.w	r1, r2, r3
 8009e48:	9b06      	ldr	r3, [sp, #24]
 8009e4a:	4319      	orrs	r1, r3
 8009e4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e4e:	d10d      	bne.n	8009e6c <_dtoa_r+0xa44>
 8009e50:	2b39      	cmp	r3, #57	@ 0x39
 8009e52:	d027      	beq.n	8009ea4 <_dtoa_r+0xa7c>
 8009e54:	9a04      	ldr	r2, [sp, #16]
 8009e56:	2a00      	cmp	r2, #0
 8009e58:	dd01      	ble.n	8009e5e <_dtoa_r+0xa36>
 8009e5a:	9b03      	ldr	r3, [sp, #12]
 8009e5c:	3331      	adds	r3, #49	@ 0x31
 8009e5e:	f88b 3000 	strb.w	r3, [fp]
 8009e62:	e52e      	b.n	80098c2 <_dtoa_r+0x49a>
 8009e64:	4628      	mov	r0, r5
 8009e66:	e7b9      	b.n	8009ddc <_dtoa_r+0x9b4>
 8009e68:	2201      	movs	r2, #1
 8009e6a:	e7e2      	b.n	8009e32 <_dtoa_r+0xa0a>
 8009e6c:	9904      	ldr	r1, [sp, #16]
 8009e6e:	2900      	cmp	r1, #0
 8009e70:	db04      	blt.n	8009e7c <_dtoa_r+0xa54>
 8009e72:	9807      	ldr	r0, [sp, #28]
 8009e74:	4301      	orrs	r1, r0
 8009e76:	9806      	ldr	r0, [sp, #24]
 8009e78:	4301      	orrs	r1, r0
 8009e7a:	d120      	bne.n	8009ebe <_dtoa_r+0xa96>
 8009e7c:	2a00      	cmp	r2, #0
 8009e7e:	ddee      	ble.n	8009e5e <_dtoa_r+0xa36>
 8009e80:	9902      	ldr	r1, [sp, #8]
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	2201      	movs	r2, #1
 8009e86:	4648      	mov	r0, r9
 8009e88:	f000 fba4 	bl	800a5d4 <__lshift>
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	9002      	str	r0, [sp, #8]
 8009e90:	f000 fc0c 	bl	800a6ac <__mcmp>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	9b00      	ldr	r3, [sp, #0]
 8009e98:	dc02      	bgt.n	8009ea0 <_dtoa_r+0xa78>
 8009e9a:	d1e0      	bne.n	8009e5e <_dtoa_r+0xa36>
 8009e9c:	07da      	lsls	r2, r3, #31
 8009e9e:	d5de      	bpl.n	8009e5e <_dtoa_r+0xa36>
 8009ea0:	2b39      	cmp	r3, #57	@ 0x39
 8009ea2:	d1da      	bne.n	8009e5a <_dtoa_r+0xa32>
 8009ea4:	2339      	movs	r3, #57	@ 0x39
 8009ea6:	f88b 3000 	strb.w	r3, [fp]
 8009eaa:	4633      	mov	r3, r6
 8009eac:	461e      	mov	r6, r3
 8009eae:	3b01      	subs	r3, #1
 8009eb0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009eb4:	2a39      	cmp	r2, #57	@ 0x39
 8009eb6:	d04e      	beq.n	8009f56 <_dtoa_r+0xb2e>
 8009eb8:	3201      	adds	r2, #1
 8009eba:	701a      	strb	r2, [r3, #0]
 8009ebc:	e501      	b.n	80098c2 <_dtoa_r+0x49a>
 8009ebe:	2a00      	cmp	r2, #0
 8009ec0:	dd03      	ble.n	8009eca <_dtoa_r+0xaa2>
 8009ec2:	2b39      	cmp	r3, #57	@ 0x39
 8009ec4:	d0ee      	beq.n	8009ea4 <_dtoa_r+0xa7c>
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	e7c9      	b.n	8009e5e <_dtoa_r+0xa36>
 8009eca:	9a00      	ldr	r2, [sp, #0]
 8009ecc:	9908      	ldr	r1, [sp, #32]
 8009ece:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009ed2:	428a      	cmp	r2, r1
 8009ed4:	d028      	beq.n	8009f28 <_dtoa_r+0xb00>
 8009ed6:	9902      	ldr	r1, [sp, #8]
 8009ed8:	2300      	movs	r3, #0
 8009eda:	220a      	movs	r2, #10
 8009edc:	4648      	mov	r0, r9
 8009ede:	f000 f9d5 	bl	800a28c <__multadd>
 8009ee2:	42af      	cmp	r7, r5
 8009ee4:	9002      	str	r0, [sp, #8]
 8009ee6:	f04f 0300 	mov.w	r3, #0
 8009eea:	f04f 020a 	mov.w	r2, #10
 8009eee:	4639      	mov	r1, r7
 8009ef0:	4648      	mov	r0, r9
 8009ef2:	d107      	bne.n	8009f04 <_dtoa_r+0xadc>
 8009ef4:	f000 f9ca 	bl	800a28c <__multadd>
 8009ef8:	4607      	mov	r7, r0
 8009efa:	4605      	mov	r5, r0
 8009efc:	9b00      	ldr	r3, [sp, #0]
 8009efe:	3301      	adds	r3, #1
 8009f00:	9300      	str	r3, [sp, #0]
 8009f02:	e777      	b.n	8009df4 <_dtoa_r+0x9cc>
 8009f04:	f000 f9c2 	bl	800a28c <__multadd>
 8009f08:	4629      	mov	r1, r5
 8009f0a:	4607      	mov	r7, r0
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	220a      	movs	r2, #10
 8009f10:	4648      	mov	r0, r9
 8009f12:	f000 f9bb 	bl	800a28c <__multadd>
 8009f16:	4605      	mov	r5, r0
 8009f18:	e7f0      	b.n	8009efc <_dtoa_r+0xad4>
 8009f1a:	f1bb 0f00 	cmp.w	fp, #0
 8009f1e:	bfcc      	ite	gt
 8009f20:	465e      	movgt	r6, fp
 8009f22:	2601      	movle	r6, #1
 8009f24:	4456      	add	r6, sl
 8009f26:	2700      	movs	r7, #0
 8009f28:	9902      	ldr	r1, [sp, #8]
 8009f2a:	9300      	str	r3, [sp, #0]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	4648      	mov	r0, r9
 8009f30:	f000 fb50 	bl	800a5d4 <__lshift>
 8009f34:	4621      	mov	r1, r4
 8009f36:	9002      	str	r0, [sp, #8]
 8009f38:	f000 fbb8 	bl	800a6ac <__mcmp>
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	dcb4      	bgt.n	8009eaa <_dtoa_r+0xa82>
 8009f40:	d102      	bne.n	8009f48 <_dtoa_r+0xb20>
 8009f42:	9b00      	ldr	r3, [sp, #0]
 8009f44:	07db      	lsls	r3, r3, #31
 8009f46:	d4b0      	bmi.n	8009eaa <_dtoa_r+0xa82>
 8009f48:	4633      	mov	r3, r6
 8009f4a:	461e      	mov	r6, r3
 8009f4c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f50:	2a30      	cmp	r2, #48	@ 0x30
 8009f52:	d0fa      	beq.n	8009f4a <_dtoa_r+0xb22>
 8009f54:	e4b5      	b.n	80098c2 <_dtoa_r+0x49a>
 8009f56:	459a      	cmp	sl, r3
 8009f58:	d1a8      	bne.n	8009eac <_dtoa_r+0xa84>
 8009f5a:	2331      	movs	r3, #49	@ 0x31
 8009f5c:	f108 0801 	add.w	r8, r8, #1
 8009f60:	f88a 3000 	strb.w	r3, [sl]
 8009f64:	e4ad      	b.n	80098c2 <_dtoa_r+0x49a>
 8009f66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009f68:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009fc4 <_dtoa_r+0xb9c>
 8009f6c:	b11b      	cbz	r3, 8009f76 <_dtoa_r+0xb4e>
 8009f6e:	f10a 0308 	add.w	r3, sl, #8
 8009f72:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009f74:	6013      	str	r3, [r2, #0]
 8009f76:	4650      	mov	r0, sl
 8009f78:	b017      	add	sp, #92	@ 0x5c
 8009f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7e:	9b07      	ldr	r3, [sp, #28]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	f77f ae2e 	ble.w	8009be2 <_dtoa_r+0x7ba>
 8009f86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f88:	9308      	str	r3, [sp, #32]
 8009f8a:	2001      	movs	r0, #1
 8009f8c:	e64d      	b.n	8009c2a <_dtoa_r+0x802>
 8009f8e:	f1bb 0f00 	cmp.w	fp, #0
 8009f92:	f77f aed9 	ble.w	8009d48 <_dtoa_r+0x920>
 8009f96:	4656      	mov	r6, sl
 8009f98:	9802      	ldr	r0, [sp, #8]
 8009f9a:	4621      	mov	r1, r4
 8009f9c:	f7ff f9bb 	bl	8009316 <quorem>
 8009fa0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009fa4:	f806 3b01 	strb.w	r3, [r6], #1
 8009fa8:	eba6 020a 	sub.w	r2, r6, sl
 8009fac:	4593      	cmp	fp, r2
 8009fae:	ddb4      	ble.n	8009f1a <_dtoa_r+0xaf2>
 8009fb0:	9902      	ldr	r1, [sp, #8]
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	220a      	movs	r2, #10
 8009fb6:	4648      	mov	r0, r9
 8009fb8:	f000 f968 	bl	800a28c <__multadd>
 8009fbc:	9002      	str	r0, [sp, #8]
 8009fbe:	e7eb      	b.n	8009f98 <_dtoa_r+0xb70>
 8009fc0:	0801d398 	.word	0x0801d398
 8009fc4:	0801d31c 	.word	0x0801d31c

08009fc8 <_free_r>:
 8009fc8:	b538      	push	{r3, r4, r5, lr}
 8009fca:	4605      	mov	r5, r0
 8009fcc:	2900      	cmp	r1, #0
 8009fce:	d041      	beq.n	800a054 <_free_r+0x8c>
 8009fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fd4:	1f0c      	subs	r4, r1, #4
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	bfb8      	it	lt
 8009fda:	18e4      	addlt	r4, r4, r3
 8009fdc:	f000 f8e8 	bl	800a1b0 <__malloc_lock>
 8009fe0:	4a1d      	ldr	r2, [pc, #116]	@ (800a058 <_free_r+0x90>)
 8009fe2:	6813      	ldr	r3, [r2, #0]
 8009fe4:	b933      	cbnz	r3, 8009ff4 <_free_r+0x2c>
 8009fe6:	6063      	str	r3, [r4, #4]
 8009fe8:	6014      	str	r4, [r2, #0]
 8009fea:	4628      	mov	r0, r5
 8009fec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ff0:	f000 b8e4 	b.w	800a1bc <__malloc_unlock>
 8009ff4:	42a3      	cmp	r3, r4
 8009ff6:	d908      	bls.n	800a00a <_free_r+0x42>
 8009ff8:	6820      	ldr	r0, [r4, #0]
 8009ffa:	1821      	adds	r1, r4, r0
 8009ffc:	428b      	cmp	r3, r1
 8009ffe:	bf01      	itttt	eq
 800a000:	6819      	ldreq	r1, [r3, #0]
 800a002:	685b      	ldreq	r3, [r3, #4]
 800a004:	1809      	addeq	r1, r1, r0
 800a006:	6021      	streq	r1, [r4, #0]
 800a008:	e7ed      	b.n	8009fe6 <_free_r+0x1e>
 800a00a:	461a      	mov	r2, r3
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	b10b      	cbz	r3, 800a014 <_free_r+0x4c>
 800a010:	42a3      	cmp	r3, r4
 800a012:	d9fa      	bls.n	800a00a <_free_r+0x42>
 800a014:	6811      	ldr	r1, [r2, #0]
 800a016:	1850      	adds	r0, r2, r1
 800a018:	42a0      	cmp	r0, r4
 800a01a:	d10b      	bne.n	800a034 <_free_r+0x6c>
 800a01c:	6820      	ldr	r0, [r4, #0]
 800a01e:	4401      	add	r1, r0
 800a020:	1850      	adds	r0, r2, r1
 800a022:	4283      	cmp	r3, r0
 800a024:	6011      	str	r1, [r2, #0]
 800a026:	d1e0      	bne.n	8009fea <_free_r+0x22>
 800a028:	6818      	ldr	r0, [r3, #0]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	6053      	str	r3, [r2, #4]
 800a02e:	4408      	add	r0, r1
 800a030:	6010      	str	r0, [r2, #0]
 800a032:	e7da      	b.n	8009fea <_free_r+0x22>
 800a034:	d902      	bls.n	800a03c <_free_r+0x74>
 800a036:	230c      	movs	r3, #12
 800a038:	602b      	str	r3, [r5, #0]
 800a03a:	e7d6      	b.n	8009fea <_free_r+0x22>
 800a03c:	6820      	ldr	r0, [r4, #0]
 800a03e:	1821      	adds	r1, r4, r0
 800a040:	428b      	cmp	r3, r1
 800a042:	bf04      	itt	eq
 800a044:	6819      	ldreq	r1, [r3, #0]
 800a046:	685b      	ldreq	r3, [r3, #4]
 800a048:	6063      	str	r3, [r4, #4]
 800a04a:	bf04      	itt	eq
 800a04c:	1809      	addeq	r1, r1, r0
 800a04e:	6021      	streq	r1, [r4, #0]
 800a050:	6054      	str	r4, [r2, #4]
 800a052:	e7ca      	b.n	8009fea <_free_r+0x22>
 800a054:	bd38      	pop	{r3, r4, r5, pc}
 800a056:	bf00      	nop
 800a058:	20004ad4 	.word	0x20004ad4

0800a05c <malloc>:
 800a05c:	4b02      	ldr	r3, [pc, #8]	@ (800a068 <malloc+0xc>)
 800a05e:	4601      	mov	r1, r0
 800a060:	6818      	ldr	r0, [r3, #0]
 800a062:	f000 b825 	b.w	800a0b0 <_malloc_r>
 800a066:	bf00      	nop
 800a068:	20002c18 	.word	0x20002c18

0800a06c <sbrk_aligned>:
 800a06c:	b570      	push	{r4, r5, r6, lr}
 800a06e:	4e0f      	ldr	r6, [pc, #60]	@ (800a0ac <sbrk_aligned+0x40>)
 800a070:	460c      	mov	r4, r1
 800a072:	6831      	ldr	r1, [r6, #0]
 800a074:	4605      	mov	r5, r0
 800a076:	b911      	cbnz	r1, 800a07e <sbrk_aligned+0x12>
 800a078:	f000 fe92 	bl	800ada0 <_sbrk_r>
 800a07c:	6030      	str	r0, [r6, #0]
 800a07e:	4621      	mov	r1, r4
 800a080:	4628      	mov	r0, r5
 800a082:	f000 fe8d 	bl	800ada0 <_sbrk_r>
 800a086:	1c43      	adds	r3, r0, #1
 800a088:	d103      	bne.n	800a092 <sbrk_aligned+0x26>
 800a08a:	f04f 34ff 	mov.w	r4, #4294967295
 800a08e:	4620      	mov	r0, r4
 800a090:	bd70      	pop	{r4, r5, r6, pc}
 800a092:	1cc4      	adds	r4, r0, #3
 800a094:	f024 0403 	bic.w	r4, r4, #3
 800a098:	42a0      	cmp	r0, r4
 800a09a:	d0f8      	beq.n	800a08e <sbrk_aligned+0x22>
 800a09c:	1a21      	subs	r1, r4, r0
 800a09e:	4628      	mov	r0, r5
 800a0a0:	f000 fe7e 	bl	800ada0 <_sbrk_r>
 800a0a4:	3001      	adds	r0, #1
 800a0a6:	d1f2      	bne.n	800a08e <sbrk_aligned+0x22>
 800a0a8:	e7ef      	b.n	800a08a <sbrk_aligned+0x1e>
 800a0aa:	bf00      	nop
 800a0ac:	20004ad0 	.word	0x20004ad0

0800a0b0 <_malloc_r>:
 800a0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0b4:	1ccd      	adds	r5, r1, #3
 800a0b6:	f025 0503 	bic.w	r5, r5, #3
 800a0ba:	3508      	adds	r5, #8
 800a0bc:	2d0c      	cmp	r5, #12
 800a0be:	bf38      	it	cc
 800a0c0:	250c      	movcc	r5, #12
 800a0c2:	2d00      	cmp	r5, #0
 800a0c4:	4606      	mov	r6, r0
 800a0c6:	db01      	blt.n	800a0cc <_malloc_r+0x1c>
 800a0c8:	42a9      	cmp	r1, r5
 800a0ca:	d904      	bls.n	800a0d6 <_malloc_r+0x26>
 800a0cc:	230c      	movs	r3, #12
 800a0ce:	6033      	str	r3, [r6, #0]
 800a0d0:	2000      	movs	r0, #0
 800a0d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a1ac <_malloc_r+0xfc>
 800a0da:	f000 f869 	bl	800a1b0 <__malloc_lock>
 800a0de:	f8d8 3000 	ldr.w	r3, [r8]
 800a0e2:	461c      	mov	r4, r3
 800a0e4:	bb44      	cbnz	r4, 800a138 <_malloc_r+0x88>
 800a0e6:	4629      	mov	r1, r5
 800a0e8:	4630      	mov	r0, r6
 800a0ea:	f7ff ffbf 	bl	800a06c <sbrk_aligned>
 800a0ee:	1c43      	adds	r3, r0, #1
 800a0f0:	4604      	mov	r4, r0
 800a0f2:	d158      	bne.n	800a1a6 <_malloc_r+0xf6>
 800a0f4:	f8d8 4000 	ldr.w	r4, [r8]
 800a0f8:	4627      	mov	r7, r4
 800a0fa:	2f00      	cmp	r7, #0
 800a0fc:	d143      	bne.n	800a186 <_malloc_r+0xd6>
 800a0fe:	2c00      	cmp	r4, #0
 800a100:	d04b      	beq.n	800a19a <_malloc_r+0xea>
 800a102:	6823      	ldr	r3, [r4, #0]
 800a104:	4639      	mov	r1, r7
 800a106:	4630      	mov	r0, r6
 800a108:	eb04 0903 	add.w	r9, r4, r3
 800a10c:	f000 fe48 	bl	800ada0 <_sbrk_r>
 800a110:	4581      	cmp	r9, r0
 800a112:	d142      	bne.n	800a19a <_malloc_r+0xea>
 800a114:	6821      	ldr	r1, [r4, #0]
 800a116:	1a6d      	subs	r5, r5, r1
 800a118:	4629      	mov	r1, r5
 800a11a:	4630      	mov	r0, r6
 800a11c:	f7ff ffa6 	bl	800a06c <sbrk_aligned>
 800a120:	3001      	adds	r0, #1
 800a122:	d03a      	beq.n	800a19a <_malloc_r+0xea>
 800a124:	6823      	ldr	r3, [r4, #0]
 800a126:	442b      	add	r3, r5
 800a128:	6023      	str	r3, [r4, #0]
 800a12a:	f8d8 3000 	ldr.w	r3, [r8]
 800a12e:	685a      	ldr	r2, [r3, #4]
 800a130:	bb62      	cbnz	r2, 800a18c <_malloc_r+0xdc>
 800a132:	f8c8 7000 	str.w	r7, [r8]
 800a136:	e00f      	b.n	800a158 <_malloc_r+0xa8>
 800a138:	6822      	ldr	r2, [r4, #0]
 800a13a:	1b52      	subs	r2, r2, r5
 800a13c:	d420      	bmi.n	800a180 <_malloc_r+0xd0>
 800a13e:	2a0b      	cmp	r2, #11
 800a140:	d917      	bls.n	800a172 <_malloc_r+0xc2>
 800a142:	1961      	adds	r1, r4, r5
 800a144:	42a3      	cmp	r3, r4
 800a146:	6025      	str	r5, [r4, #0]
 800a148:	bf18      	it	ne
 800a14a:	6059      	strne	r1, [r3, #4]
 800a14c:	6863      	ldr	r3, [r4, #4]
 800a14e:	bf08      	it	eq
 800a150:	f8c8 1000 	streq.w	r1, [r8]
 800a154:	5162      	str	r2, [r4, r5]
 800a156:	604b      	str	r3, [r1, #4]
 800a158:	4630      	mov	r0, r6
 800a15a:	f000 f82f 	bl	800a1bc <__malloc_unlock>
 800a15e:	f104 000b 	add.w	r0, r4, #11
 800a162:	1d23      	adds	r3, r4, #4
 800a164:	f020 0007 	bic.w	r0, r0, #7
 800a168:	1ac2      	subs	r2, r0, r3
 800a16a:	bf1c      	itt	ne
 800a16c:	1a1b      	subne	r3, r3, r0
 800a16e:	50a3      	strne	r3, [r4, r2]
 800a170:	e7af      	b.n	800a0d2 <_malloc_r+0x22>
 800a172:	6862      	ldr	r2, [r4, #4]
 800a174:	42a3      	cmp	r3, r4
 800a176:	bf0c      	ite	eq
 800a178:	f8c8 2000 	streq.w	r2, [r8]
 800a17c:	605a      	strne	r2, [r3, #4]
 800a17e:	e7eb      	b.n	800a158 <_malloc_r+0xa8>
 800a180:	4623      	mov	r3, r4
 800a182:	6864      	ldr	r4, [r4, #4]
 800a184:	e7ae      	b.n	800a0e4 <_malloc_r+0x34>
 800a186:	463c      	mov	r4, r7
 800a188:	687f      	ldr	r7, [r7, #4]
 800a18a:	e7b6      	b.n	800a0fa <_malloc_r+0x4a>
 800a18c:	461a      	mov	r2, r3
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	42a3      	cmp	r3, r4
 800a192:	d1fb      	bne.n	800a18c <_malloc_r+0xdc>
 800a194:	2300      	movs	r3, #0
 800a196:	6053      	str	r3, [r2, #4]
 800a198:	e7de      	b.n	800a158 <_malloc_r+0xa8>
 800a19a:	230c      	movs	r3, #12
 800a19c:	6033      	str	r3, [r6, #0]
 800a19e:	4630      	mov	r0, r6
 800a1a0:	f000 f80c 	bl	800a1bc <__malloc_unlock>
 800a1a4:	e794      	b.n	800a0d0 <_malloc_r+0x20>
 800a1a6:	6005      	str	r5, [r0, #0]
 800a1a8:	e7d6      	b.n	800a158 <_malloc_r+0xa8>
 800a1aa:	bf00      	nop
 800a1ac:	20004ad4 	.word	0x20004ad4

0800a1b0 <__malloc_lock>:
 800a1b0:	4801      	ldr	r0, [pc, #4]	@ (800a1b8 <__malloc_lock+0x8>)
 800a1b2:	f7ff b8a0 	b.w	80092f6 <__retarget_lock_acquire_recursive>
 800a1b6:	bf00      	nop
 800a1b8:	20004acc 	.word	0x20004acc

0800a1bc <__malloc_unlock>:
 800a1bc:	4801      	ldr	r0, [pc, #4]	@ (800a1c4 <__malloc_unlock+0x8>)
 800a1be:	f7ff b89b 	b.w	80092f8 <__retarget_lock_release_recursive>
 800a1c2:	bf00      	nop
 800a1c4:	20004acc 	.word	0x20004acc

0800a1c8 <_Balloc>:
 800a1c8:	b570      	push	{r4, r5, r6, lr}
 800a1ca:	69c6      	ldr	r6, [r0, #28]
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	460d      	mov	r5, r1
 800a1d0:	b976      	cbnz	r6, 800a1f0 <_Balloc+0x28>
 800a1d2:	2010      	movs	r0, #16
 800a1d4:	f7ff ff42 	bl	800a05c <malloc>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	61e0      	str	r0, [r4, #28]
 800a1dc:	b920      	cbnz	r0, 800a1e8 <_Balloc+0x20>
 800a1de:	4b18      	ldr	r3, [pc, #96]	@ (800a240 <_Balloc+0x78>)
 800a1e0:	4818      	ldr	r0, [pc, #96]	@ (800a244 <_Balloc+0x7c>)
 800a1e2:	216b      	movs	r1, #107	@ 0x6b
 800a1e4:	f000 fdec 	bl	800adc0 <__assert_func>
 800a1e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1ec:	6006      	str	r6, [r0, #0]
 800a1ee:	60c6      	str	r6, [r0, #12]
 800a1f0:	69e6      	ldr	r6, [r4, #28]
 800a1f2:	68f3      	ldr	r3, [r6, #12]
 800a1f4:	b183      	cbz	r3, 800a218 <_Balloc+0x50>
 800a1f6:	69e3      	ldr	r3, [r4, #28]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1fe:	b9b8      	cbnz	r0, 800a230 <_Balloc+0x68>
 800a200:	2101      	movs	r1, #1
 800a202:	fa01 f605 	lsl.w	r6, r1, r5
 800a206:	1d72      	adds	r2, r6, #5
 800a208:	0092      	lsls	r2, r2, #2
 800a20a:	4620      	mov	r0, r4
 800a20c:	f000 fdf6 	bl	800adfc <_calloc_r>
 800a210:	b160      	cbz	r0, 800a22c <_Balloc+0x64>
 800a212:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a216:	e00e      	b.n	800a236 <_Balloc+0x6e>
 800a218:	2221      	movs	r2, #33	@ 0x21
 800a21a:	2104      	movs	r1, #4
 800a21c:	4620      	mov	r0, r4
 800a21e:	f000 fded 	bl	800adfc <_calloc_r>
 800a222:	69e3      	ldr	r3, [r4, #28]
 800a224:	60f0      	str	r0, [r6, #12]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d1e4      	bne.n	800a1f6 <_Balloc+0x2e>
 800a22c:	2000      	movs	r0, #0
 800a22e:	bd70      	pop	{r4, r5, r6, pc}
 800a230:	6802      	ldr	r2, [r0, #0]
 800a232:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a236:	2300      	movs	r3, #0
 800a238:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a23c:	e7f7      	b.n	800a22e <_Balloc+0x66>
 800a23e:	bf00      	nop
 800a240:	0801d329 	.word	0x0801d329
 800a244:	0801d3a9 	.word	0x0801d3a9

0800a248 <_Bfree>:
 800a248:	b570      	push	{r4, r5, r6, lr}
 800a24a:	69c6      	ldr	r6, [r0, #28]
 800a24c:	4605      	mov	r5, r0
 800a24e:	460c      	mov	r4, r1
 800a250:	b976      	cbnz	r6, 800a270 <_Bfree+0x28>
 800a252:	2010      	movs	r0, #16
 800a254:	f7ff ff02 	bl	800a05c <malloc>
 800a258:	4602      	mov	r2, r0
 800a25a:	61e8      	str	r0, [r5, #28]
 800a25c:	b920      	cbnz	r0, 800a268 <_Bfree+0x20>
 800a25e:	4b09      	ldr	r3, [pc, #36]	@ (800a284 <_Bfree+0x3c>)
 800a260:	4809      	ldr	r0, [pc, #36]	@ (800a288 <_Bfree+0x40>)
 800a262:	218f      	movs	r1, #143	@ 0x8f
 800a264:	f000 fdac 	bl	800adc0 <__assert_func>
 800a268:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a26c:	6006      	str	r6, [r0, #0]
 800a26e:	60c6      	str	r6, [r0, #12]
 800a270:	b13c      	cbz	r4, 800a282 <_Bfree+0x3a>
 800a272:	69eb      	ldr	r3, [r5, #28]
 800a274:	6862      	ldr	r2, [r4, #4]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a27c:	6021      	str	r1, [r4, #0]
 800a27e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a282:	bd70      	pop	{r4, r5, r6, pc}
 800a284:	0801d329 	.word	0x0801d329
 800a288:	0801d3a9 	.word	0x0801d3a9

0800a28c <__multadd>:
 800a28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a290:	690d      	ldr	r5, [r1, #16]
 800a292:	4607      	mov	r7, r0
 800a294:	460c      	mov	r4, r1
 800a296:	461e      	mov	r6, r3
 800a298:	f101 0c14 	add.w	ip, r1, #20
 800a29c:	2000      	movs	r0, #0
 800a29e:	f8dc 3000 	ldr.w	r3, [ip]
 800a2a2:	b299      	uxth	r1, r3
 800a2a4:	fb02 6101 	mla	r1, r2, r1, r6
 800a2a8:	0c1e      	lsrs	r6, r3, #16
 800a2aa:	0c0b      	lsrs	r3, r1, #16
 800a2ac:	fb02 3306 	mla	r3, r2, r6, r3
 800a2b0:	b289      	uxth	r1, r1
 800a2b2:	3001      	adds	r0, #1
 800a2b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2b8:	4285      	cmp	r5, r0
 800a2ba:	f84c 1b04 	str.w	r1, [ip], #4
 800a2be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2c2:	dcec      	bgt.n	800a29e <__multadd+0x12>
 800a2c4:	b30e      	cbz	r6, 800a30a <__multadd+0x7e>
 800a2c6:	68a3      	ldr	r3, [r4, #8]
 800a2c8:	42ab      	cmp	r3, r5
 800a2ca:	dc19      	bgt.n	800a300 <__multadd+0x74>
 800a2cc:	6861      	ldr	r1, [r4, #4]
 800a2ce:	4638      	mov	r0, r7
 800a2d0:	3101      	adds	r1, #1
 800a2d2:	f7ff ff79 	bl	800a1c8 <_Balloc>
 800a2d6:	4680      	mov	r8, r0
 800a2d8:	b928      	cbnz	r0, 800a2e6 <__multadd+0x5a>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a310 <__multadd+0x84>)
 800a2de:	480d      	ldr	r0, [pc, #52]	@ (800a314 <__multadd+0x88>)
 800a2e0:	21ba      	movs	r1, #186	@ 0xba
 800a2e2:	f000 fd6d 	bl	800adc0 <__assert_func>
 800a2e6:	6922      	ldr	r2, [r4, #16]
 800a2e8:	3202      	adds	r2, #2
 800a2ea:	f104 010c 	add.w	r1, r4, #12
 800a2ee:	0092      	lsls	r2, r2, #2
 800a2f0:	300c      	adds	r0, #12
 800a2f2:	f7ff f802 	bl	80092fa <memcpy>
 800a2f6:	4621      	mov	r1, r4
 800a2f8:	4638      	mov	r0, r7
 800a2fa:	f7ff ffa5 	bl	800a248 <_Bfree>
 800a2fe:	4644      	mov	r4, r8
 800a300:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a304:	3501      	adds	r5, #1
 800a306:	615e      	str	r6, [r3, #20]
 800a308:	6125      	str	r5, [r4, #16]
 800a30a:	4620      	mov	r0, r4
 800a30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a310:	0801d398 	.word	0x0801d398
 800a314:	0801d3a9 	.word	0x0801d3a9

0800a318 <__hi0bits>:
 800a318:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a31c:	4603      	mov	r3, r0
 800a31e:	bf36      	itet	cc
 800a320:	0403      	lslcc	r3, r0, #16
 800a322:	2000      	movcs	r0, #0
 800a324:	2010      	movcc	r0, #16
 800a326:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a32a:	bf3c      	itt	cc
 800a32c:	021b      	lslcc	r3, r3, #8
 800a32e:	3008      	addcc	r0, #8
 800a330:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a334:	bf3c      	itt	cc
 800a336:	011b      	lslcc	r3, r3, #4
 800a338:	3004      	addcc	r0, #4
 800a33a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a33e:	bf3c      	itt	cc
 800a340:	009b      	lslcc	r3, r3, #2
 800a342:	3002      	addcc	r0, #2
 800a344:	2b00      	cmp	r3, #0
 800a346:	db05      	blt.n	800a354 <__hi0bits+0x3c>
 800a348:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a34c:	f100 0001 	add.w	r0, r0, #1
 800a350:	bf08      	it	eq
 800a352:	2020      	moveq	r0, #32
 800a354:	4770      	bx	lr

0800a356 <__lo0bits>:
 800a356:	6803      	ldr	r3, [r0, #0]
 800a358:	4602      	mov	r2, r0
 800a35a:	f013 0007 	ands.w	r0, r3, #7
 800a35e:	d00b      	beq.n	800a378 <__lo0bits+0x22>
 800a360:	07d9      	lsls	r1, r3, #31
 800a362:	d421      	bmi.n	800a3a8 <__lo0bits+0x52>
 800a364:	0798      	lsls	r0, r3, #30
 800a366:	bf49      	itett	mi
 800a368:	085b      	lsrmi	r3, r3, #1
 800a36a:	089b      	lsrpl	r3, r3, #2
 800a36c:	2001      	movmi	r0, #1
 800a36e:	6013      	strmi	r3, [r2, #0]
 800a370:	bf5c      	itt	pl
 800a372:	6013      	strpl	r3, [r2, #0]
 800a374:	2002      	movpl	r0, #2
 800a376:	4770      	bx	lr
 800a378:	b299      	uxth	r1, r3
 800a37a:	b909      	cbnz	r1, 800a380 <__lo0bits+0x2a>
 800a37c:	0c1b      	lsrs	r3, r3, #16
 800a37e:	2010      	movs	r0, #16
 800a380:	b2d9      	uxtb	r1, r3
 800a382:	b909      	cbnz	r1, 800a388 <__lo0bits+0x32>
 800a384:	3008      	adds	r0, #8
 800a386:	0a1b      	lsrs	r3, r3, #8
 800a388:	0719      	lsls	r1, r3, #28
 800a38a:	bf04      	itt	eq
 800a38c:	091b      	lsreq	r3, r3, #4
 800a38e:	3004      	addeq	r0, #4
 800a390:	0799      	lsls	r1, r3, #30
 800a392:	bf04      	itt	eq
 800a394:	089b      	lsreq	r3, r3, #2
 800a396:	3002      	addeq	r0, #2
 800a398:	07d9      	lsls	r1, r3, #31
 800a39a:	d403      	bmi.n	800a3a4 <__lo0bits+0x4e>
 800a39c:	085b      	lsrs	r3, r3, #1
 800a39e:	f100 0001 	add.w	r0, r0, #1
 800a3a2:	d003      	beq.n	800a3ac <__lo0bits+0x56>
 800a3a4:	6013      	str	r3, [r2, #0]
 800a3a6:	4770      	bx	lr
 800a3a8:	2000      	movs	r0, #0
 800a3aa:	4770      	bx	lr
 800a3ac:	2020      	movs	r0, #32
 800a3ae:	4770      	bx	lr

0800a3b0 <__i2b>:
 800a3b0:	b510      	push	{r4, lr}
 800a3b2:	460c      	mov	r4, r1
 800a3b4:	2101      	movs	r1, #1
 800a3b6:	f7ff ff07 	bl	800a1c8 <_Balloc>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	b928      	cbnz	r0, 800a3ca <__i2b+0x1a>
 800a3be:	4b05      	ldr	r3, [pc, #20]	@ (800a3d4 <__i2b+0x24>)
 800a3c0:	4805      	ldr	r0, [pc, #20]	@ (800a3d8 <__i2b+0x28>)
 800a3c2:	f240 1145 	movw	r1, #325	@ 0x145
 800a3c6:	f000 fcfb 	bl	800adc0 <__assert_func>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	6144      	str	r4, [r0, #20]
 800a3ce:	6103      	str	r3, [r0, #16]
 800a3d0:	bd10      	pop	{r4, pc}
 800a3d2:	bf00      	nop
 800a3d4:	0801d398 	.word	0x0801d398
 800a3d8:	0801d3a9 	.word	0x0801d3a9

0800a3dc <__multiply>:
 800a3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e0:	4617      	mov	r7, r2
 800a3e2:	690a      	ldr	r2, [r1, #16]
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	bfa8      	it	ge
 800a3ea:	463b      	movge	r3, r7
 800a3ec:	4689      	mov	r9, r1
 800a3ee:	bfa4      	itt	ge
 800a3f0:	460f      	movge	r7, r1
 800a3f2:	4699      	movge	r9, r3
 800a3f4:	693d      	ldr	r5, [r7, #16]
 800a3f6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	6879      	ldr	r1, [r7, #4]
 800a3fe:	eb05 060a 	add.w	r6, r5, sl
 800a402:	42b3      	cmp	r3, r6
 800a404:	b085      	sub	sp, #20
 800a406:	bfb8      	it	lt
 800a408:	3101      	addlt	r1, #1
 800a40a:	f7ff fedd 	bl	800a1c8 <_Balloc>
 800a40e:	b930      	cbnz	r0, 800a41e <__multiply+0x42>
 800a410:	4602      	mov	r2, r0
 800a412:	4b41      	ldr	r3, [pc, #260]	@ (800a518 <__multiply+0x13c>)
 800a414:	4841      	ldr	r0, [pc, #260]	@ (800a51c <__multiply+0x140>)
 800a416:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a41a:	f000 fcd1 	bl	800adc0 <__assert_func>
 800a41e:	f100 0414 	add.w	r4, r0, #20
 800a422:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a426:	4623      	mov	r3, r4
 800a428:	2200      	movs	r2, #0
 800a42a:	4573      	cmp	r3, lr
 800a42c:	d320      	bcc.n	800a470 <__multiply+0x94>
 800a42e:	f107 0814 	add.w	r8, r7, #20
 800a432:	f109 0114 	add.w	r1, r9, #20
 800a436:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a43a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a43e:	9302      	str	r3, [sp, #8]
 800a440:	1beb      	subs	r3, r5, r7
 800a442:	3b15      	subs	r3, #21
 800a444:	f023 0303 	bic.w	r3, r3, #3
 800a448:	3304      	adds	r3, #4
 800a44a:	3715      	adds	r7, #21
 800a44c:	42bd      	cmp	r5, r7
 800a44e:	bf38      	it	cc
 800a450:	2304      	movcc	r3, #4
 800a452:	9301      	str	r3, [sp, #4]
 800a454:	9b02      	ldr	r3, [sp, #8]
 800a456:	9103      	str	r1, [sp, #12]
 800a458:	428b      	cmp	r3, r1
 800a45a:	d80c      	bhi.n	800a476 <__multiply+0x9a>
 800a45c:	2e00      	cmp	r6, #0
 800a45e:	dd03      	ble.n	800a468 <__multiply+0x8c>
 800a460:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a464:	2b00      	cmp	r3, #0
 800a466:	d055      	beq.n	800a514 <__multiply+0x138>
 800a468:	6106      	str	r6, [r0, #16]
 800a46a:	b005      	add	sp, #20
 800a46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a470:	f843 2b04 	str.w	r2, [r3], #4
 800a474:	e7d9      	b.n	800a42a <__multiply+0x4e>
 800a476:	f8b1 a000 	ldrh.w	sl, [r1]
 800a47a:	f1ba 0f00 	cmp.w	sl, #0
 800a47e:	d01f      	beq.n	800a4c0 <__multiply+0xe4>
 800a480:	46c4      	mov	ip, r8
 800a482:	46a1      	mov	r9, r4
 800a484:	2700      	movs	r7, #0
 800a486:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a48a:	f8d9 3000 	ldr.w	r3, [r9]
 800a48e:	fa1f fb82 	uxth.w	fp, r2
 800a492:	b29b      	uxth	r3, r3
 800a494:	fb0a 330b 	mla	r3, sl, fp, r3
 800a498:	443b      	add	r3, r7
 800a49a:	f8d9 7000 	ldr.w	r7, [r9]
 800a49e:	0c12      	lsrs	r2, r2, #16
 800a4a0:	0c3f      	lsrs	r7, r7, #16
 800a4a2:	fb0a 7202 	mla	r2, sl, r2, r7
 800a4a6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4b0:	4565      	cmp	r5, ip
 800a4b2:	f849 3b04 	str.w	r3, [r9], #4
 800a4b6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a4ba:	d8e4      	bhi.n	800a486 <__multiply+0xaa>
 800a4bc:	9b01      	ldr	r3, [sp, #4]
 800a4be:	50e7      	str	r7, [r4, r3]
 800a4c0:	9b03      	ldr	r3, [sp, #12]
 800a4c2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a4c6:	3104      	adds	r1, #4
 800a4c8:	f1b9 0f00 	cmp.w	r9, #0
 800a4cc:	d020      	beq.n	800a510 <__multiply+0x134>
 800a4ce:	6823      	ldr	r3, [r4, #0]
 800a4d0:	4647      	mov	r7, r8
 800a4d2:	46a4      	mov	ip, r4
 800a4d4:	f04f 0a00 	mov.w	sl, #0
 800a4d8:	f8b7 b000 	ldrh.w	fp, [r7]
 800a4dc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a4e0:	fb09 220b 	mla	r2, r9, fp, r2
 800a4e4:	4452      	add	r2, sl
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4ec:	f84c 3b04 	str.w	r3, [ip], #4
 800a4f0:	f857 3b04 	ldr.w	r3, [r7], #4
 800a4f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4f8:	f8bc 3000 	ldrh.w	r3, [ip]
 800a4fc:	fb09 330a 	mla	r3, r9, sl, r3
 800a500:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a504:	42bd      	cmp	r5, r7
 800a506:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a50a:	d8e5      	bhi.n	800a4d8 <__multiply+0xfc>
 800a50c:	9a01      	ldr	r2, [sp, #4]
 800a50e:	50a3      	str	r3, [r4, r2]
 800a510:	3404      	adds	r4, #4
 800a512:	e79f      	b.n	800a454 <__multiply+0x78>
 800a514:	3e01      	subs	r6, #1
 800a516:	e7a1      	b.n	800a45c <__multiply+0x80>
 800a518:	0801d398 	.word	0x0801d398
 800a51c:	0801d3a9 	.word	0x0801d3a9

0800a520 <__pow5mult>:
 800a520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a524:	4615      	mov	r5, r2
 800a526:	f012 0203 	ands.w	r2, r2, #3
 800a52a:	4607      	mov	r7, r0
 800a52c:	460e      	mov	r6, r1
 800a52e:	d007      	beq.n	800a540 <__pow5mult+0x20>
 800a530:	4c25      	ldr	r4, [pc, #148]	@ (800a5c8 <__pow5mult+0xa8>)
 800a532:	3a01      	subs	r2, #1
 800a534:	2300      	movs	r3, #0
 800a536:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a53a:	f7ff fea7 	bl	800a28c <__multadd>
 800a53e:	4606      	mov	r6, r0
 800a540:	10ad      	asrs	r5, r5, #2
 800a542:	d03d      	beq.n	800a5c0 <__pow5mult+0xa0>
 800a544:	69fc      	ldr	r4, [r7, #28]
 800a546:	b97c      	cbnz	r4, 800a568 <__pow5mult+0x48>
 800a548:	2010      	movs	r0, #16
 800a54a:	f7ff fd87 	bl	800a05c <malloc>
 800a54e:	4602      	mov	r2, r0
 800a550:	61f8      	str	r0, [r7, #28]
 800a552:	b928      	cbnz	r0, 800a560 <__pow5mult+0x40>
 800a554:	4b1d      	ldr	r3, [pc, #116]	@ (800a5cc <__pow5mult+0xac>)
 800a556:	481e      	ldr	r0, [pc, #120]	@ (800a5d0 <__pow5mult+0xb0>)
 800a558:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a55c:	f000 fc30 	bl	800adc0 <__assert_func>
 800a560:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a564:	6004      	str	r4, [r0, #0]
 800a566:	60c4      	str	r4, [r0, #12]
 800a568:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a56c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a570:	b94c      	cbnz	r4, 800a586 <__pow5mult+0x66>
 800a572:	f240 2171 	movw	r1, #625	@ 0x271
 800a576:	4638      	mov	r0, r7
 800a578:	f7ff ff1a 	bl	800a3b0 <__i2b>
 800a57c:	2300      	movs	r3, #0
 800a57e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a582:	4604      	mov	r4, r0
 800a584:	6003      	str	r3, [r0, #0]
 800a586:	f04f 0900 	mov.w	r9, #0
 800a58a:	07eb      	lsls	r3, r5, #31
 800a58c:	d50a      	bpl.n	800a5a4 <__pow5mult+0x84>
 800a58e:	4631      	mov	r1, r6
 800a590:	4622      	mov	r2, r4
 800a592:	4638      	mov	r0, r7
 800a594:	f7ff ff22 	bl	800a3dc <__multiply>
 800a598:	4631      	mov	r1, r6
 800a59a:	4680      	mov	r8, r0
 800a59c:	4638      	mov	r0, r7
 800a59e:	f7ff fe53 	bl	800a248 <_Bfree>
 800a5a2:	4646      	mov	r6, r8
 800a5a4:	106d      	asrs	r5, r5, #1
 800a5a6:	d00b      	beq.n	800a5c0 <__pow5mult+0xa0>
 800a5a8:	6820      	ldr	r0, [r4, #0]
 800a5aa:	b938      	cbnz	r0, 800a5bc <__pow5mult+0x9c>
 800a5ac:	4622      	mov	r2, r4
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	4638      	mov	r0, r7
 800a5b2:	f7ff ff13 	bl	800a3dc <__multiply>
 800a5b6:	6020      	str	r0, [r4, #0]
 800a5b8:	f8c0 9000 	str.w	r9, [r0]
 800a5bc:	4604      	mov	r4, r0
 800a5be:	e7e4      	b.n	800a58a <__pow5mult+0x6a>
 800a5c0:	4630      	mov	r0, r6
 800a5c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5c6:	bf00      	nop
 800a5c8:	0801d45c 	.word	0x0801d45c
 800a5cc:	0801d329 	.word	0x0801d329
 800a5d0:	0801d3a9 	.word	0x0801d3a9

0800a5d4 <__lshift>:
 800a5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5d8:	460c      	mov	r4, r1
 800a5da:	6849      	ldr	r1, [r1, #4]
 800a5dc:	6923      	ldr	r3, [r4, #16]
 800a5de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5e2:	68a3      	ldr	r3, [r4, #8]
 800a5e4:	4607      	mov	r7, r0
 800a5e6:	4691      	mov	r9, r2
 800a5e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5ec:	f108 0601 	add.w	r6, r8, #1
 800a5f0:	42b3      	cmp	r3, r6
 800a5f2:	db0b      	blt.n	800a60c <__lshift+0x38>
 800a5f4:	4638      	mov	r0, r7
 800a5f6:	f7ff fde7 	bl	800a1c8 <_Balloc>
 800a5fa:	4605      	mov	r5, r0
 800a5fc:	b948      	cbnz	r0, 800a612 <__lshift+0x3e>
 800a5fe:	4602      	mov	r2, r0
 800a600:	4b28      	ldr	r3, [pc, #160]	@ (800a6a4 <__lshift+0xd0>)
 800a602:	4829      	ldr	r0, [pc, #164]	@ (800a6a8 <__lshift+0xd4>)
 800a604:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a608:	f000 fbda 	bl	800adc0 <__assert_func>
 800a60c:	3101      	adds	r1, #1
 800a60e:	005b      	lsls	r3, r3, #1
 800a610:	e7ee      	b.n	800a5f0 <__lshift+0x1c>
 800a612:	2300      	movs	r3, #0
 800a614:	f100 0114 	add.w	r1, r0, #20
 800a618:	f100 0210 	add.w	r2, r0, #16
 800a61c:	4618      	mov	r0, r3
 800a61e:	4553      	cmp	r3, sl
 800a620:	db33      	blt.n	800a68a <__lshift+0xb6>
 800a622:	6920      	ldr	r0, [r4, #16]
 800a624:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a628:	f104 0314 	add.w	r3, r4, #20
 800a62c:	f019 091f 	ands.w	r9, r9, #31
 800a630:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a634:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a638:	d02b      	beq.n	800a692 <__lshift+0xbe>
 800a63a:	f1c9 0e20 	rsb	lr, r9, #32
 800a63e:	468a      	mov	sl, r1
 800a640:	2200      	movs	r2, #0
 800a642:	6818      	ldr	r0, [r3, #0]
 800a644:	fa00 f009 	lsl.w	r0, r0, r9
 800a648:	4310      	orrs	r0, r2
 800a64a:	f84a 0b04 	str.w	r0, [sl], #4
 800a64e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a652:	459c      	cmp	ip, r3
 800a654:	fa22 f20e 	lsr.w	r2, r2, lr
 800a658:	d8f3      	bhi.n	800a642 <__lshift+0x6e>
 800a65a:	ebac 0304 	sub.w	r3, ip, r4
 800a65e:	3b15      	subs	r3, #21
 800a660:	f023 0303 	bic.w	r3, r3, #3
 800a664:	3304      	adds	r3, #4
 800a666:	f104 0015 	add.w	r0, r4, #21
 800a66a:	4560      	cmp	r0, ip
 800a66c:	bf88      	it	hi
 800a66e:	2304      	movhi	r3, #4
 800a670:	50ca      	str	r2, [r1, r3]
 800a672:	b10a      	cbz	r2, 800a678 <__lshift+0xa4>
 800a674:	f108 0602 	add.w	r6, r8, #2
 800a678:	3e01      	subs	r6, #1
 800a67a:	4638      	mov	r0, r7
 800a67c:	612e      	str	r6, [r5, #16]
 800a67e:	4621      	mov	r1, r4
 800a680:	f7ff fde2 	bl	800a248 <_Bfree>
 800a684:	4628      	mov	r0, r5
 800a686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a68a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a68e:	3301      	adds	r3, #1
 800a690:	e7c5      	b.n	800a61e <__lshift+0x4a>
 800a692:	3904      	subs	r1, #4
 800a694:	f853 2b04 	ldr.w	r2, [r3], #4
 800a698:	f841 2f04 	str.w	r2, [r1, #4]!
 800a69c:	459c      	cmp	ip, r3
 800a69e:	d8f9      	bhi.n	800a694 <__lshift+0xc0>
 800a6a0:	e7ea      	b.n	800a678 <__lshift+0xa4>
 800a6a2:	bf00      	nop
 800a6a4:	0801d398 	.word	0x0801d398
 800a6a8:	0801d3a9 	.word	0x0801d3a9

0800a6ac <__mcmp>:
 800a6ac:	690a      	ldr	r2, [r1, #16]
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	6900      	ldr	r0, [r0, #16]
 800a6b2:	1a80      	subs	r0, r0, r2
 800a6b4:	b530      	push	{r4, r5, lr}
 800a6b6:	d10e      	bne.n	800a6d6 <__mcmp+0x2a>
 800a6b8:	3314      	adds	r3, #20
 800a6ba:	3114      	adds	r1, #20
 800a6bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a6c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a6c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a6c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a6cc:	4295      	cmp	r5, r2
 800a6ce:	d003      	beq.n	800a6d8 <__mcmp+0x2c>
 800a6d0:	d205      	bcs.n	800a6de <__mcmp+0x32>
 800a6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d6:	bd30      	pop	{r4, r5, pc}
 800a6d8:	42a3      	cmp	r3, r4
 800a6da:	d3f3      	bcc.n	800a6c4 <__mcmp+0x18>
 800a6dc:	e7fb      	b.n	800a6d6 <__mcmp+0x2a>
 800a6de:	2001      	movs	r0, #1
 800a6e0:	e7f9      	b.n	800a6d6 <__mcmp+0x2a>
	...

0800a6e4 <__mdiff>:
 800a6e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e8:	4689      	mov	r9, r1
 800a6ea:	4606      	mov	r6, r0
 800a6ec:	4611      	mov	r1, r2
 800a6ee:	4648      	mov	r0, r9
 800a6f0:	4614      	mov	r4, r2
 800a6f2:	f7ff ffdb 	bl	800a6ac <__mcmp>
 800a6f6:	1e05      	subs	r5, r0, #0
 800a6f8:	d112      	bne.n	800a720 <__mdiff+0x3c>
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	f7ff fd63 	bl	800a1c8 <_Balloc>
 800a702:	4602      	mov	r2, r0
 800a704:	b928      	cbnz	r0, 800a712 <__mdiff+0x2e>
 800a706:	4b3f      	ldr	r3, [pc, #252]	@ (800a804 <__mdiff+0x120>)
 800a708:	f240 2137 	movw	r1, #567	@ 0x237
 800a70c:	483e      	ldr	r0, [pc, #248]	@ (800a808 <__mdiff+0x124>)
 800a70e:	f000 fb57 	bl	800adc0 <__assert_func>
 800a712:	2301      	movs	r3, #1
 800a714:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a718:	4610      	mov	r0, r2
 800a71a:	b003      	add	sp, #12
 800a71c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a720:	bfbc      	itt	lt
 800a722:	464b      	movlt	r3, r9
 800a724:	46a1      	movlt	r9, r4
 800a726:	4630      	mov	r0, r6
 800a728:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a72c:	bfba      	itte	lt
 800a72e:	461c      	movlt	r4, r3
 800a730:	2501      	movlt	r5, #1
 800a732:	2500      	movge	r5, #0
 800a734:	f7ff fd48 	bl	800a1c8 <_Balloc>
 800a738:	4602      	mov	r2, r0
 800a73a:	b918      	cbnz	r0, 800a744 <__mdiff+0x60>
 800a73c:	4b31      	ldr	r3, [pc, #196]	@ (800a804 <__mdiff+0x120>)
 800a73e:	f240 2145 	movw	r1, #581	@ 0x245
 800a742:	e7e3      	b.n	800a70c <__mdiff+0x28>
 800a744:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a748:	6926      	ldr	r6, [r4, #16]
 800a74a:	60c5      	str	r5, [r0, #12]
 800a74c:	f109 0310 	add.w	r3, r9, #16
 800a750:	f109 0514 	add.w	r5, r9, #20
 800a754:	f104 0e14 	add.w	lr, r4, #20
 800a758:	f100 0b14 	add.w	fp, r0, #20
 800a75c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a760:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a764:	9301      	str	r3, [sp, #4]
 800a766:	46d9      	mov	r9, fp
 800a768:	f04f 0c00 	mov.w	ip, #0
 800a76c:	9b01      	ldr	r3, [sp, #4]
 800a76e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a772:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a776:	9301      	str	r3, [sp, #4]
 800a778:	fa1f f38a 	uxth.w	r3, sl
 800a77c:	4619      	mov	r1, r3
 800a77e:	b283      	uxth	r3, r0
 800a780:	1acb      	subs	r3, r1, r3
 800a782:	0c00      	lsrs	r0, r0, #16
 800a784:	4463      	add	r3, ip
 800a786:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a78a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a78e:	b29b      	uxth	r3, r3
 800a790:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a794:	4576      	cmp	r6, lr
 800a796:	f849 3b04 	str.w	r3, [r9], #4
 800a79a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a79e:	d8e5      	bhi.n	800a76c <__mdiff+0x88>
 800a7a0:	1b33      	subs	r3, r6, r4
 800a7a2:	3b15      	subs	r3, #21
 800a7a4:	f023 0303 	bic.w	r3, r3, #3
 800a7a8:	3415      	adds	r4, #21
 800a7aa:	3304      	adds	r3, #4
 800a7ac:	42a6      	cmp	r6, r4
 800a7ae:	bf38      	it	cc
 800a7b0:	2304      	movcc	r3, #4
 800a7b2:	441d      	add	r5, r3
 800a7b4:	445b      	add	r3, fp
 800a7b6:	461e      	mov	r6, r3
 800a7b8:	462c      	mov	r4, r5
 800a7ba:	4544      	cmp	r4, r8
 800a7bc:	d30e      	bcc.n	800a7dc <__mdiff+0xf8>
 800a7be:	f108 0103 	add.w	r1, r8, #3
 800a7c2:	1b49      	subs	r1, r1, r5
 800a7c4:	f021 0103 	bic.w	r1, r1, #3
 800a7c8:	3d03      	subs	r5, #3
 800a7ca:	45a8      	cmp	r8, r5
 800a7cc:	bf38      	it	cc
 800a7ce:	2100      	movcc	r1, #0
 800a7d0:	440b      	add	r3, r1
 800a7d2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7d6:	b191      	cbz	r1, 800a7fe <__mdiff+0x11a>
 800a7d8:	6117      	str	r7, [r2, #16]
 800a7da:	e79d      	b.n	800a718 <__mdiff+0x34>
 800a7dc:	f854 1b04 	ldr.w	r1, [r4], #4
 800a7e0:	46e6      	mov	lr, ip
 800a7e2:	0c08      	lsrs	r0, r1, #16
 800a7e4:	fa1c fc81 	uxtah	ip, ip, r1
 800a7e8:	4471      	add	r1, lr
 800a7ea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a7ee:	b289      	uxth	r1, r1
 800a7f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a7f4:	f846 1b04 	str.w	r1, [r6], #4
 800a7f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7fc:	e7dd      	b.n	800a7ba <__mdiff+0xd6>
 800a7fe:	3f01      	subs	r7, #1
 800a800:	e7e7      	b.n	800a7d2 <__mdiff+0xee>
 800a802:	bf00      	nop
 800a804:	0801d398 	.word	0x0801d398
 800a808:	0801d3a9 	.word	0x0801d3a9

0800a80c <__d2b>:
 800a80c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a810:	460f      	mov	r7, r1
 800a812:	2101      	movs	r1, #1
 800a814:	ec59 8b10 	vmov	r8, r9, d0
 800a818:	4616      	mov	r6, r2
 800a81a:	f7ff fcd5 	bl	800a1c8 <_Balloc>
 800a81e:	4604      	mov	r4, r0
 800a820:	b930      	cbnz	r0, 800a830 <__d2b+0x24>
 800a822:	4602      	mov	r2, r0
 800a824:	4b23      	ldr	r3, [pc, #140]	@ (800a8b4 <__d2b+0xa8>)
 800a826:	4824      	ldr	r0, [pc, #144]	@ (800a8b8 <__d2b+0xac>)
 800a828:	f240 310f 	movw	r1, #783	@ 0x30f
 800a82c:	f000 fac8 	bl	800adc0 <__assert_func>
 800a830:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a834:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a838:	b10d      	cbz	r5, 800a83e <__d2b+0x32>
 800a83a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a83e:	9301      	str	r3, [sp, #4]
 800a840:	f1b8 0300 	subs.w	r3, r8, #0
 800a844:	d023      	beq.n	800a88e <__d2b+0x82>
 800a846:	4668      	mov	r0, sp
 800a848:	9300      	str	r3, [sp, #0]
 800a84a:	f7ff fd84 	bl	800a356 <__lo0bits>
 800a84e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a852:	b1d0      	cbz	r0, 800a88a <__d2b+0x7e>
 800a854:	f1c0 0320 	rsb	r3, r0, #32
 800a858:	fa02 f303 	lsl.w	r3, r2, r3
 800a85c:	430b      	orrs	r3, r1
 800a85e:	40c2      	lsrs	r2, r0
 800a860:	6163      	str	r3, [r4, #20]
 800a862:	9201      	str	r2, [sp, #4]
 800a864:	9b01      	ldr	r3, [sp, #4]
 800a866:	61a3      	str	r3, [r4, #24]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	bf0c      	ite	eq
 800a86c:	2201      	moveq	r2, #1
 800a86e:	2202      	movne	r2, #2
 800a870:	6122      	str	r2, [r4, #16]
 800a872:	b1a5      	cbz	r5, 800a89e <__d2b+0x92>
 800a874:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a878:	4405      	add	r5, r0
 800a87a:	603d      	str	r5, [r7, #0]
 800a87c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a880:	6030      	str	r0, [r6, #0]
 800a882:	4620      	mov	r0, r4
 800a884:	b003      	add	sp, #12
 800a886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a88a:	6161      	str	r1, [r4, #20]
 800a88c:	e7ea      	b.n	800a864 <__d2b+0x58>
 800a88e:	a801      	add	r0, sp, #4
 800a890:	f7ff fd61 	bl	800a356 <__lo0bits>
 800a894:	9b01      	ldr	r3, [sp, #4]
 800a896:	6163      	str	r3, [r4, #20]
 800a898:	3020      	adds	r0, #32
 800a89a:	2201      	movs	r2, #1
 800a89c:	e7e8      	b.n	800a870 <__d2b+0x64>
 800a89e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a8a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a8a6:	6038      	str	r0, [r7, #0]
 800a8a8:	6918      	ldr	r0, [r3, #16]
 800a8aa:	f7ff fd35 	bl	800a318 <__hi0bits>
 800a8ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8b2:	e7e5      	b.n	800a880 <__d2b+0x74>
 800a8b4:	0801d398 	.word	0x0801d398
 800a8b8:	0801d3a9 	.word	0x0801d3a9

0800a8bc <__sfputc_r>:
 800a8bc:	6893      	ldr	r3, [r2, #8]
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	b410      	push	{r4}
 800a8c4:	6093      	str	r3, [r2, #8]
 800a8c6:	da08      	bge.n	800a8da <__sfputc_r+0x1e>
 800a8c8:	6994      	ldr	r4, [r2, #24]
 800a8ca:	42a3      	cmp	r3, r4
 800a8cc:	db01      	blt.n	800a8d2 <__sfputc_r+0x16>
 800a8ce:	290a      	cmp	r1, #10
 800a8d0:	d103      	bne.n	800a8da <__sfputc_r+0x1e>
 800a8d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8d6:	f7fe bbfc 	b.w	80090d2 <__swbuf_r>
 800a8da:	6813      	ldr	r3, [r2, #0]
 800a8dc:	1c58      	adds	r0, r3, #1
 800a8de:	6010      	str	r0, [r2, #0]
 800a8e0:	7019      	strb	r1, [r3, #0]
 800a8e2:	4608      	mov	r0, r1
 800a8e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8e8:	4770      	bx	lr

0800a8ea <__sfputs_r>:
 800a8ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ec:	4606      	mov	r6, r0
 800a8ee:	460f      	mov	r7, r1
 800a8f0:	4614      	mov	r4, r2
 800a8f2:	18d5      	adds	r5, r2, r3
 800a8f4:	42ac      	cmp	r4, r5
 800a8f6:	d101      	bne.n	800a8fc <__sfputs_r+0x12>
 800a8f8:	2000      	movs	r0, #0
 800a8fa:	e007      	b.n	800a90c <__sfputs_r+0x22>
 800a8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a900:	463a      	mov	r2, r7
 800a902:	4630      	mov	r0, r6
 800a904:	f7ff ffda 	bl	800a8bc <__sfputc_r>
 800a908:	1c43      	adds	r3, r0, #1
 800a90a:	d1f3      	bne.n	800a8f4 <__sfputs_r+0xa>
 800a90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a910 <_vfiprintf_r>:
 800a910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a914:	460d      	mov	r5, r1
 800a916:	b09d      	sub	sp, #116	@ 0x74
 800a918:	4614      	mov	r4, r2
 800a91a:	4698      	mov	r8, r3
 800a91c:	4606      	mov	r6, r0
 800a91e:	b118      	cbz	r0, 800a928 <_vfiprintf_r+0x18>
 800a920:	6a03      	ldr	r3, [r0, #32]
 800a922:	b90b      	cbnz	r3, 800a928 <_vfiprintf_r+0x18>
 800a924:	f7fe fa38 	bl	8008d98 <__sinit>
 800a928:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a92a:	07d9      	lsls	r1, r3, #31
 800a92c:	d405      	bmi.n	800a93a <_vfiprintf_r+0x2a>
 800a92e:	89ab      	ldrh	r3, [r5, #12]
 800a930:	059a      	lsls	r2, r3, #22
 800a932:	d402      	bmi.n	800a93a <_vfiprintf_r+0x2a>
 800a934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a936:	f7fe fcde 	bl	80092f6 <__retarget_lock_acquire_recursive>
 800a93a:	89ab      	ldrh	r3, [r5, #12]
 800a93c:	071b      	lsls	r3, r3, #28
 800a93e:	d501      	bpl.n	800a944 <_vfiprintf_r+0x34>
 800a940:	692b      	ldr	r3, [r5, #16]
 800a942:	b99b      	cbnz	r3, 800a96c <_vfiprintf_r+0x5c>
 800a944:	4629      	mov	r1, r5
 800a946:	4630      	mov	r0, r6
 800a948:	f7fe fc02 	bl	8009150 <__swsetup_r>
 800a94c:	b170      	cbz	r0, 800a96c <_vfiprintf_r+0x5c>
 800a94e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a950:	07dc      	lsls	r4, r3, #31
 800a952:	d504      	bpl.n	800a95e <_vfiprintf_r+0x4e>
 800a954:	f04f 30ff 	mov.w	r0, #4294967295
 800a958:	b01d      	add	sp, #116	@ 0x74
 800a95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a95e:	89ab      	ldrh	r3, [r5, #12]
 800a960:	0598      	lsls	r0, r3, #22
 800a962:	d4f7      	bmi.n	800a954 <_vfiprintf_r+0x44>
 800a964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a966:	f7fe fcc7 	bl	80092f8 <__retarget_lock_release_recursive>
 800a96a:	e7f3      	b.n	800a954 <_vfiprintf_r+0x44>
 800a96c:	2300      	movs	r3, #0
 800a96e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a970:	2320      	movs	r3, #32
 800a972:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a976:	f8cd 800c 	str.w	r8, [sp, #12]
 800a97a:	2330      	movs	r3, #48	@ 0x30
 800a97c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ab2c <_vfiprintf_r+0x21c>
 800a980:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a984:	f04f 0901 	mov.w	r9, #1
 800a988:	4623      	mov	r3, r4
 800a98a:	469a      	mov	sl, r3
 800a98c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a990:	b10a      	cbz	r2, 800a996 <_vfiprintf_r+0x86>
 800a992:	2a25      	cmp	r2, #37	@ 0x25
 800a994:	d1f9      	bne.n	800a98a <_vfiprintf_r+0x7a>
 800a996:	ebba 0b04 	subs.w	fp, sl, r4
 800a99a:	d00b      	beq.n	800a9b4 <_vfiprintf_r+0xa4>
 800a99c:	465b      	mov	r3, fp
 800a99e:	4622      	mov	r2, r4
 800a9a0:	4629      	mov	r1, r5
 800a9a2:	4630      	mov	r0, r6
 800a9a4:	f7ff ffa1 	bl	800a8ea <__sfputs_r>
 800a9a8:	3001      	adds	r0, #1
 800a9aa:	f000 80a7 	beq.w	800aafc <_vfiprintf_r+0x1ec>
 800a9ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a9b0:	445a      	add	r2, fp
 800a9b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a9b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f000 809f 	beq.w	800aafc <_vfiprintf_r+0x1ec>
 800a9be:	2300      	movs	r3, #0
 800a9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9c8:	f10a 0a01 	add.w	sl, sl, #1
 800a9cc:	9304      	str	r3, [sp, #16]
 800a9ce:	9307      	str	r3, [sp, #28]
 800a9d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9d6:	4654      	mov	r4, sl
 800a9d8:	2205      	movs	r2, #5
 800a9da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9de:	4853      	ldr	r0, [pc, #332]	@ (800ab2c <_vfiprintf_r+0x21c>)
 800a9e0:	f7f5 fc06 	bl	80001f0 <memchr>
 800a9e4:	9a04      	ldr	r2, [sp, #16]
 800a9e6:	b9d8      	cbnz	r0, 800aa20 <_vfiprintf_r+0x110>
 800a9e8:	06d1      	lsls	r1, r2, #27
 800a9ea:	bf44      	itt	mi
 800a9ec:	2320      	movmi	r3, #32
 800a9ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9f2:	0713      	lsls	r3, r2, #28
 800a9f4:	bf44      	itt	mi
 800a9f6:	232b      	movmi	r3, #43	@ 0x2b
 800a9f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9fc:	f89a 3000 	ldrb.w	r3, [sl]
 800aa00:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa02:	d015      	beq.n	800aa30 <_vfiprintf_r+0x120>
 800aa04:	9a07      	ldr	r2, [sp, #28]
 800aa06:	4654      	mov	r4, sl
 800aa08:	2000      	movs	r0, #0
 800aa0a:	f04f 0c0a 	mov.w	ip, #10
 800aa0e:	4621      	mov	r1, r4
 800aa10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa14:	3b30      	subs	r3, #48	@ 0x30
 800aa16:	2b09      	cmp	r3, #9
 800aa18:	d94b      	bls.n	800aab2 <_vfiprintf_r+0x1a2>
 800aa1a:	b1b0      	cbz	r0, 800aa4a <_vfiprintf_r+0x13a>
 800aa1c:	9207      	str	r2, [sp, #28]
 800aa1e:	e014      	b.n	800aa4a <_vfiprintf_r+0x13a>
 800aa20:	eba0 0308 	sub.w	r3, r0, r8
 800aa24:	fa09 f303 	lsl.w	r3, r9, r3
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	9304      	str	r3, [sp, #16]
 800aa2c:	46a2      	mov	sl, r4
 800aa2e:	e7d2      	b.n	800a9d6 <_vfiprintf_r+0xc6>
 800aa30:	9b03      	ldr	r3, [sp, #12]
 800aa32:	1d19      	adds	r1, r3, #4
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	9103      	str	r1, [sp, #12]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	bfbb      	ittet	lt
 800aa3c:	425b      	neglt	r3, r3
 800aa3e:	f042 0202 	orrlt.w	r2, r2, #2
 800aa42:	9307      	strge	r3, [sp, #28]
 800aa44:	9307      	strlt	r3, [sp, #28]
 800aa46:	bfb8      	it	lt
 800aa48:	9204      	strlt	r2, [sp, #16]
 800aa4a:	7823      	ldrb	r3, [r4, #0]
 800aa4c:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa4e:	d10a      	bne.n	800aa66 <_vfiprintf_r+0x156>
 800aa50:	7863      	ldrb	r3, [r4, #1]
 800aa52:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa54:	d132      	bne.n	800aabc <_vfiprintf_r+0x1ac>
 800aa56:	9b03      	ldr	r3, [sp, #12]
 800aa58:	1d1a      	adds	r2, r3, #4
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	9203      	str	r2, [sp, #12]
 800aa5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa62:	3402      	adds	r4, #2
 800aa64:	9305      	str	r3, [sp, #20]
 800aa66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ab3c <_vfiprintf_r+0x22c>
 800aa6a:	7821      	ldrb	r1, [r4, #0]
 800aa6c:	2203      	movs	r2, #3
 800aa6e:	4650      	mov	r0, sl
 800aa70:	f7f5 fbbe 	bl	80001f0 <memchr>
 800aa74:	b138      	cbz	r0, 800aa86 <_vfiprintf_r+0x176>
 800aa76:	9b04      	ldr	r3, [sp, #16]
 800aa78:	eba0 000a 	sub.w	r0, r0, sl
 800aa7c:	2240      	movs	r2, #64	@ 0x40
 800aa7e:	4082      	lsls	r2, r0
 800aa80:	4313      	orrs	r3, r2
 800aa82:	3401      	adds	r4, #1
 800aa84:	9304      	str	r3, [sp, #16]
 800aa86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa8a:	4829      	ldr	r0, [pc, #164]	@ (800ab30 <_vfiprintf_r+0x220>)
 800aa8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa90:	2206      	movs	r2, #6
 800aa92:	f7f5 fbad 	bl	80001f0 <memchr>
 800aa96:	2800      	cmp	r0, #0
 800aa98:	d03f      	beq.n	800ab1a <_vfiprintf_r+0x20a>
 800aa9a:	4b26      	ldr	r3, [pc, #152]	@ (800ab34 <_vfiprintf_r+0x224>)
 800aa9c:	bb1b      	cbnz	r3, 800aae6 <_vfiprintf_r+0x1d6>
 800aa9e:	9b03      	ldr	r3, [sp, #12]
 800aaa0:	3307      	adds	r3, #7
 800aaa2:	f023 0307 	bic.w	r3, r3, #7
 800aaa6:	3308      	adds	r3, #8
 800aaa8:	9303      	str	r3, [sp, #12]
 800aaaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaac:	443b      	add	r3, r7
 800aaae:	9309      	str	r3, [sp, #36]	@ 0x24
 800aab0:	e76a      	b.n	800a988 <_vfiprintf_r+0x78>
 800aab2:	fb0c 3202 	mla	r2, ip, r2, r3
 800aab6:	460c      	mov	r4, r1
 800aab8:	2001      	movs	r0, #1
 800aaba:	e7a8      	b.n	800aa0e <_vfiprintf_r+0xfe>
 800aabc:	2300      	movs	r3, #0
 800aabe:	3401      	adds	r4, #1
 800aac0:	9305      	str	r3, [sp, #20]
 800aac2:	4619      	mov	r1, r3
 800aac4:	f04f 0c0a 	mov.w	ip, #10
 800aac8:	4620      	mov	r0, r4
 800aaca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aace:	3a30      	subs	r2, #48	@ 0x30
 800aad0:	2a09      	cmp	r2, #9
 800aad2:	d903      	bls.n	800aadc <_vfiprintf_r+0x1cc>
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d0c6      	beq.n	800aa66 <_vfiprintf_r+0x156>
 800aad8:	9105      	str	r1, [sp, #20]
 800aada:	e7c4      	b.n	800aa66 <_vfiprintf_r+0x156>
 800aadc:	fb0c 2101 	mla	r1, ip, r1, r2
 800aae0:	4604      	mov	r4, r0
 800aae2:	2301      	movs	r3, #1
 800aae4:	e7f0      	b.n	800aac8 <_vfiprintf_r+0x1b8>
 800aae6:	ab03      	add	r3, sp, #12
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	462a      	mov	r2, r5
 800aaec:	4b12      	ldr	r3, [pc, #72]	@ (800ab38 <_vfiprintf_r+0x228>)
 800aaee:	a904      	add	r1, sp, #16
 800aaf0:	4630      	mov	r0, r6
 800aaf2:	f7fd fd0f 	bl	8008514 <_printf_float>
 800aaf6:	4607      	mov	r7, r0
 800aaf8:	1c78      	adds	r0, r7, #1
 800aafa:	d1d6      	bne.n	800aaaa <_vfiprintf_r+0x19a>
 800aafc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aafe:	07d9      	lsls	r1, r3, #31
 800ab00:	d405      	bmi.n	800ab0e <_vfiprintf_r+0x1fe>
 800ab02:	89ab      	ldrh	r3, [r5, #12]
 800ab04:	059a      	lsls	r2, r3, #22
 800ab06:	d402      	bmi.n	800ab0e <_vfiprintf_r+0x1fe>
 800ab08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab0a:	f7fe fbf5 	bl	80092f8 <__retarget_lock_release_recursive>
 800ab0e:	89ab      	ldrh	r3, [r5, #12]
 800ab10:	065b      	lsls	r3, r3, #25
 800ab12:	f53f af1f 	bmi.w	800a954 <_vfiprintf_r+0x44>
 800ab16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab18:	e71e      	b.n	800a958 <_vfiprintf_r+0x48>
 800ab1a:	ab03      	add	r3, sp, #12
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	462a      	mov	r2, r5
 800ab20:	4b05      	ldr	r3, [pc, #20]	@ (800ab38 <_vfiprintf_r+0x228>)
 800ab22:	a904      	add	r1, sp, #16
 800ab24:	4630      	mov	r0, r6
 800ab26:	f7fd ff8d 	bl	8008a44 <_printf_i>
 800ab2a:	e7e4      	b.n	800aaf6 <_vfiprintf_r+0x1e6>
 800ab2c:	0801d402 	.word	0x0801d402
 800ab30:	0801d40c 	.word	0x0801d40c
 800ab34:	08008515 	.word	0x08008515
 800ab38:	0800a8eb 	.word	0x0800a8eb
 800ab3c:	0801d408 	.word	0x0801d408

0800ab40 <__sflush_r>:
 800ab40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab48:	0716      	lsls	r6, r2, #28
 800ab4a:	4605      	mov	r5, r0
 800ab4c:	460c      	mov	r4, r1
 800ab4e:	d454      	bmi.n	800abfa <__sflush_r+0xba>
 800ab50:	684b      	ldr	r3, [r1, #4]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	dc02      	bgt.n	800ab5c <__sflush_r+0x1c>
 800ab56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	dd48      	ble.n	800abee <__sflush_r+0xae>
 800ab5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab5e:	2e00      	cmp	r6, #0
 800ab60:	d045      	beq.n	800abee <__sflush_r+0xae>
 800ab62:	2300      	movs	r3, #0
 800ab64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ab68:	682f      	ldr	r7, [r5, #0]
 800ab6a:	6a21      	ldr	r1, [r4, #32]
 800ab6c:	602b      	str	r3, [r5, #0]
 800ab6e:	d030      	beq.n	800abd2 <__sflush_r+0x92>
 800ab70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ab72:	89a3      	ldrh	r3, [r4, #12]
 800ab74:	0759      	lsls	r1, r3, #29
 800ab76:	d505      	bpl.n	800ab84 <__sflush_r+0x44>
 800ab78:	6863      	ldr	r3, [r4, #4]
 800ab7a:	1ad2      	subs	r2, r2, r3
 800ab7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab7e:	b10b      	cbz	r3, 800ab84 <__sflush_r+0x44>
 800ab80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab82:	1ad2      	subs	r2, r2, r3
 800ab84:	2300      	movs	r3, #0
 800ab86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab88:	6a21      	ldr	r1, [r4, #32]
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	47b0      	blx	r6
 800ab8e:	1c43      	adds	r3, r0, #1
 800ab90:	89a3      	ldrh	r3, [r4, #12]
 800ab92:	d106      	bne.n	800aba2 <__sflush_r+0x62>
 800ab94:	6829      	ldr	r1, [r5, #0]
 800ab96:	291d      	cmp	r1, #29
 800ab98:	d82b      	bhi.n	800abf2 <__sflush_r+0xb2>
 800ab9a:	4a2a      	ldr	r2, [pc, #168]	@ (800ac44 <__sflush_r+0x104>)
 800ab9c:	40ca      	lsrs	r2, r1
 800ab9e:	07d6      	lsls	r6, r2, #31
 800aba0:	d527      	bpl.n	800abf2 <__sflush_r+0xb2>
 800aba2:	2200      	movs	r2, #0
 800aba4:	6062      	str	r2, [r4, #4]
 800aba6:	04d9      	lsls	r1, r3, #19
 800aba8:	6922      	ldr	r2, [r4, #16]
 800abaa:	6022      	str	r2, [r4, #0]
 800abac:	d504      	bpl.n	800abb8 <__sflush_r+0x78>
 800abae:	1c42      	adds	r2, r0, #1
 800abb0:	d101      	bne.n	800abb6 <__sflush_r+0x76>
 800abb2:	682b      	ldr	r3, [r5, #0]
 800abb4:	b903      	cbnz	r3, 800abb8 <__sflush_r+0x78>
 800abb6:	6560      	str	r0, [r4, #84]	@ 0x54
 800abb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abba:	602f      	str	r7, [r5, #0]
 800abbc:	b1b9      	cbz	r1, 800abee <__sflush_r+0xae>
 800abbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800abc2:	4299      	cmp	r1, r3
 800abc4:	d002      	beq.n	800abcc <__sflush_r+0x8c>
 800abc6:	4628      	mov	r0, r5
 800abc8:	f7ff f9fe 	bl	8009fc8 <_free_r>
 800abcc:	2300      	movs	r3, #0
 800abce:	6363      	str	r3, [r4, #52]	@ 0x34
 800abd0:	e00d      	b.n	800abee <__sflush_r+0xae>
 800abd2:	2301      	movs	r3, #1
 800abd4:	4628      	mov	r0, r5
 800abd6:	47b0      	blx	r6
 800abd8:	4602      	mov	r2, r0
 800abda:	1c50      	adds	r0, r2, #1
 800abdc:	d1c9      	bne.n	800ab72 <__sflush_r+0x32>
 800abde:	682b      	ldr	r3, [r5, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d0c6      	beq.n	800ab72 <__sflush_r+0x32>
 800abe4:	2b1d      	cmp	r3, #29
 800abe6:	d001      	beq.n	800abec <__sflush_r+0xac>
 800abe8:	2b16      	cmp	r3, #22
 800abea:	d11e      	bne.n	800ac2a <__sflush_r+0xea>
 800abec:	602f      	str	r7, [r5, #0]
 800abee:	2000      	movs	r0, #0
 800abf0:	e022      	b.n	800ac38 <__sflush_r+0xf8>
 800abf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abf6:	b21b      	sxth	r3, r3
 800abf8:	e01b      	b.n	800ac32 <__sflush_r+0xf2>
 800abfa:	690f      	ldr	r7, [r1, #16]
 800abfc:	2f00      	cmp	r7, #0
 800abfe:	d0f6      	beq.n	800abee <__sflush_r+0xae>
 800ac00:	0793      	lsls	r3, r2, #30
 800ac02:	680e      	ldr	r6, [r1, #0]
 800ac04:	bf08      	it	eq
 800ac06:	694b      	ldreq	r3, [r1, #20]
 800ac08:	600f      	str	r7, [r1, #0]
 800ac0a:	bf18      	it	ne
 800ac0c:	2300      	movne	r3, #0
 800ac0e:	eba6 0807 	sub.w	r8, r6, r7
 800ac12:	608b      	str	r3, [r1, #8]
 800ac14:	f1b8 0f00 	cmp.w	r8, #0
 800ac18:	dde9      	ble.n	800abee <__sflush_r+0xae>
 800ac1a:	6a21      	ldr	r1, [r4, #32]
 800ac1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ac1e:	4643      	mov	r3, r8
 800ac20:	463a      	mov	r2, r7
 800ac22:	4628      	mov	r0, r5
 800ac24:	47b0      	blx	r6
 800ac26:	2800      	cmp	r0, #0
 800ac28:	dc08      	bgt.n	800ac3c <__sflush_r+0xfc>
 800ac2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac32:	81a3      	strh	r3, [r4, #12]
 800ac34:	f04f 30ff 	mov.w	r0, #4294967295
 800ac38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac3c:	4407      	add	r7, r0
 800ac3e:	eba8 0800 	sub.w	r8, r8, r0
 800ac42:	e7e7      	b.n	800ac14 <__sflush_r+0xd4>
 800ac44:	20400001 	.word	0x20400001

0800ac48 <_fflush_r>:
 800ac48:	b538      	push	{r3, r4, r5, lr}
 800ac4a:	690b      	ldr	r3, [r1, #16]
 800ac4c:	4605      	mov	r5, r0
 800ac4e:	460c      	mov	r4, r1
 800ac50:	b913      	cbnz	r3, 800ac58 <_fflush_r+0x10>
 800ac52:	2500      	movs	r5, #0
 800ac54:	4628      	mov	r0, r5
 800ac56:	bd38      	pop	{r3, r4, r5, pc}
 800ac58:	b118      	cbz	r0, 800ac62 <_fflush_r+0x1a>
 800ac5a:	6a03      	ldr	r3, [r0, #32]
 800ac5c:	b90b      	cbnz	r3, 800ac62 <_fflush_r+0x1a>
 800ac5e:	f7fe f89b 	bl	8008d98 <__sinit>
 800ac62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d0f3      	beq.n	800ac52 <_fflush_r+0xa>
 800ac6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ac6c:	07d0      	lsls	r0, r2, #31
 800ac6e:	d404      	bmi.n	800ac7a <_fflush_r+0x32>
 800ac70:	0599      	lsls	r1, r3, #22
 800ac72:	d402      	bmi.n	800ac7a <_fflush_r+0x32>
 800ac74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac76:	f7fe fb3e 	bl	80092f6 <__retarget_lock_acquire_recursive>
 800ac7a:	4628      	mov	r0, r5
 800ac7c:	4621      	mov	r1, r4
 800ac7e:	f7ff ff5f 	bl	800ab40 <__sflush_r>
 800ac82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac84:	07da      	lsls	r2, r3, #31
 800ac86:	4605      	mov	r5, r0
 800ac88:	d4e4      	bmi.n	800ac54 <_fflush_r+0xc>
 800ac8a:	89a3      	ldrh	r3, [r4, #12]
 800ac8c:	059b      	lsls	r3, r3, #22
 800ac8e:	d4e1      	bmi.n	800ac54 <_fflush_r+0xc>
 800ac90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac92:	f7fe fb31 	bl	80092f8 <__retarget_lock_release_recursive>
 800ac96:	e7dd      	b.n	800ac54 <_fflush_r+0xc>

0800ac98 <__swhatbuf_r>:
 800ac98:	b570      	push	{r4, r5, r6, lr}
 800ac9a:	460c      	mov	r4, r1
 800ac9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aca0:	2900      	cmp	r1, #0
 800aca2:	b096      	sub	sp, #88	@ 0x58
 800aca4:	4615      	mov	r5, r2
 800aca6:	461e      	mov	r6, r3
 800aca8:	da0d      	bge.n	800acc6 <__swhatbuf_r+0x2e>
 800acaa:	89a3      	ldrh	r3, [r4, #12]
 800acac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800acb0:	f04f 0100 	mov.w	r1, #0
 800acb4:	bf14      	ite	ne
 800acb6:	2340      	movne	r3, #64	@ 0x40
 800acb8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800acbc:	2000      	movs	r0, #0
 800acbe:	6031      	str	r1, [r6, #0]
 800acc0:	602b      	str	r3, [r5, #0]
 800acc2:	b016      	add	sp, #88	@ 0x58
 800acc4:	bd70      	pop	{r4, r5, r6, pc}
 800acc6:	466a      	mov	r2, sp
 800acc8:	f000 f848 	bl	800ad5c <_fstat_r>
 800accc:	2800      	cmp	r0, #0
 800acce:	dbec      	blt.n	800acaa <__swhatbuf_r+0x12>
 800acd0:	9901      	ldr	r1, [sp, #4]
 800acd2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800acd6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800acda:	4259      	negs	r1, r3
 800acdc:	4159      	adcs	r1, r3
 800acde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ace2:	e7eb      	b.n	800acbc <__swhatbuf_r+0x24>

0800ace4 <__smakebuf_r>:
 800ace4:	898b      	ldrh	r3, [r1, #12]
 800ace6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ace8:	079d      	lsls	r5, r3, #30
 800acea:	4606      	mov	r6, r0
 800acec:	460c      	mov	r4, r1
 800acee:	d507      	bpl.n	800ad00 <__smakebuf_r+0x1c>
 800acf0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800acf4:	6023      	str	r3, [r4, #0]
 800acf6:	6123      	str	r3, [r4, #16]
 800acf8:	2301      	movs	r3, #1
 800acfa:	6163      	str	r3, [r4, #20]
 800acfc:	b003      	add	sp, #12
 800acfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad00:	ab01      	add	r3, sp, #4
 800ad02:	466a      	mov	r2, sp
 800ad04:	f7ff ffc8 	bl	800ac98 <__swhatbuf_r>
 800ad08:	9f00      	ldr	r7, [sp, #0]
 800ad0a:	4605      	mov	r5, r0
 800ad0c:	4639      	mov	r1, r7
 800ad0e:	4630      	mov	r0, r6
 800ad10:	f7ff f9ce 	bl	800a0b0 <_malloc_r>
 800ad14:	b948      	cbnz	r0, 800ad2a <__smakebuf_r+0x46>
 800ad16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad1a:	059a      	lsls	r2, r3, #22
 800ad1c:	d4ee      	bmi.n	800acfc <__smakebuf_r+0x18>
 800ad1e:	f023 0303 	bic.w	r3, r3, #3
 800ad22:	f043 0302 	orr.w	r3, r3, #2
 800ad26:	81a3      	strh	r3, [r4, #12]
 800ad28:	e7e2      	b.n	800acf0 <__smakebuf_r+0xc>
 800ad2a:	89a3      	ldrh	r3, [r4, #12]
 800ad2c:	6020      	str	r0, [r4, #0]
 800ad2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad32:	81a3      	strh	r3, [r4, #12]
 800ad34:	9b01      	ldr	r3, [sp, #4]
 800ad36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ad3a:	b15b      	cbz	r3, 800ad54 <__smakebuf_r+0x70>
 800ad3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad40:	4630      	mov	r0, r6
 800ad42:	f000 f81d 	bl	800ad80 <_isatty_r>
 800ad46:	b128      	cbz	r0, 800ad54 <__smakebuf_r+0x70>
 800ad48:	89a3      	ldrh	r3, [r4, #12]
 800ad4a:	f023 0303 	bic.w	r3, r3, #3
 800ad4e:	f043 0301 	orr.w	r3, r3, #1
 800ad52:	81a3      	strh	r3, [r4, #12]
 800ad54:	89a3      	ldrh	r3, [r4, #12]
 800ad56:	431d      	orrs	r5, r3
 800ad58:	81a5      	strh	r5, [r4, #12]
 800ad5a:	e7cf      	b.n	800acfc <__smakebuf_r+0x18>

0800ad5c <_fstat_r>:
 800ad5c:	b538      	push	{r3, r4, r5, lr}
 800ad5e:	4d07      	ldr	r5, [pc, #28]	@ (800ad7c <_fstat_r+0x20>)
 800ad60:	2300      	movs	r3, #0
 800ad62:	4604      	mov	r4, r0
 800ad64:	4608      	mov	r0, r1
 800ad66:	4611      	mov	r1, r2
 800ad68:	602b      	str	r3, [r5, #0]
 800ad6a:	f7f6 fefd 	bl	8001b68 <_fstat>
 800ad6e:	1c43      	adds	r3, r0, #1
 800ad70:	d102      	bne.n	800ad78 <_fstat_r+0x1c>
 800ad72:	682b      	ldr	r3, [r5, #0]
 800ad74:	b103      	cbz	r3, 800ad78 <_fstat_r+0x1c>
 800ad76:	6023      	str	r3, [r4, #0]
 800ad78:	bd38      	pop	{r3, r4, r5, pc}
 800ad7a:	bf00      	nop
 800ad7c:	20004ac8 	.word	0x20004ac8

0800ad80 <_isatty_r>:
 800ad80:	b538      	push	{r3, r4, r5, lr}
 800ad82:	4d06      	ldr	r5, [pc, #24]	@ (800ad9c <_isatty_r+0x1c>)
 800ad84:	2300      	movs	r3, #0
 800ad86:	4604      	mov	r4, r0
 800ad88:	4608      	mov	r0, r1
 800ad8a:	602b      	str	r3, [r5, #0]
 800ad8c:	f7f6 fe9a 	bl	8001ac4 <_isatty>
 800ad90:	1c43      	adds	r3, r0, #1
 800ad92:	d102      	bne.n	800ad9a <_isatty_r+0x1a>
 800ad94:	682b      	ldr	r3, [r5, #0]
 800ad96:	b103      	cbz	r3, 800ad9a <_isatty_r+0x1a>
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	bd38      	pop	{r3, r4, r5, pc}
 800ad9c:	20004ac8 	.word	0x20004ac8

0800ada0 <_sbrk_r>:
 800ada0:	b538      	push	{r3, r4, r5, lr}
 800ada2:	4d06      	ldr	r5, [pc, #24]	@ (800adbc <_sbrk_r+0x1c>)
 800ada4:	2300      	movs	r3, #0
 800ada6:	4604      	mov	r4, r0
 800ada8:	4608      	mov	r0, r1
 800adaa:	602b      	str	r3, [r5, #0]
 800adac:	f7f8 f924 	bl	8002ff8 <_sbrk>
 800adb0:	1c43      	adds	r3, r0, #1
 800adb2:	d102      	bne.n	800adba <_sbrk_r+0x1a>
 800adb4:	682b      	ldr	r3, [r5, #0]
 800adb6:	b103      	cbz	r3, 800adba <_sbrk_r+0x1a>
 800adb8:	6023      	str	r3, [r4, #0]
 800adba:	bd38      	pop	{r3, r4, r5, pc}
 800adbc:	20004ac8 	.word	0x20004ac8

0800adc0 <__assert_func>:
 800adc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adc2:	4614      	mov	r4, r2
 800adc4:	461a      	mov	r2, r3
 800adc6:	4b09      	ldr	r3, [pc, #36]	@ (800adec <__assert_func+0x2c>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4605      	mov	r5, r0
 800adcc:	68d8      	ldr	r0, [r3, #12]
 800adce:	b14c      	cbz	r4, 800ade4 <__assert_func+0x24>
 800add0:	4b07      	ldr	r3, [pc, #28]	@ (800adf0 <__assert_func+0x30>)
 800add2:	9100      	str	r1, [sp, #0]
 800add4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800add8:	4906      	ldr	r1, [pc, #24]	@ (800adf4 <__assert_func+0x34>)
 800adda:	462b      	mov	r3, r5
 800addc:	f000 f842 	bl	800ae64 <fiprintf>
 800ade0:	f000 f852 	bl	800ae88 <abort>
 800ade4:	4b04      	ldr	r3, [pc, #16]	@ (800adf8 <__assert_func+0x38>)
 800ade6:	461c      	mov	r4, r3
 800ade8:	e7f3      	b.n	800add2 <__assert_func+0x12>
 800adea:	bf00      	nop
 800adec:	20002c18 	.word	0x20002c18
 800adf0:	0801d41d 	.word	0x0801d41d
 800adf4:	0801d42a 	.word	0x0801d42a
 800adf8:	0801d458 	.word	0x0801d458

0800adfc <_calloc_r>:
 800adfc:	b570      	push	{r4, r5, r6, lr}
 800adfe:	fba1 5402 	umull	r5, r4, r1, r2
 800ae02:	b934      	cbnz	r4, 800ae12 <_calloc_r+0x16>
 800ae04:	4629      	mov	r1, r5
 800ae06:	f7ff f953 	bl	800a0b0 <_malloc_r>
 800ae0a:	4606      	mov	r6, r0
 800ae0c:	b928      	cbnz	r0, 800ae1a <_calloc_r+0x1e>
 800ae0e:	4630      	mov	r0, r6
 800ae10:	bd70      	pop	{r4, r5, r6, pc}
 800ae12:	220c      	movs	r2, #12
 800ae14:	6002      	str	r2, [r0, #0]
 800ae16:	2600      	movs	r6, #0
 800ae18:	e7f9      	b.n	800ae0e <_calloc_r+0x12>
 800ae1a:	462a      	mov	r2, r5
 800ae1c:	4621      	mov	r1, r4
 800ae1e:	f7fe f9ed 	bl	80091fc <memset>
 800ae22:	e7f4      	b.n	800ae0e <_calloc_r+0x12>

0800ae24 <__ascii_mbtowc>:
 800ae24:	b082      	sub	sp, #8
 800ae26:	b901      	cbnz	r1, 800ae2a <__ascii_mbtowc+0x6>
 800ae28:	a901      	add	r1, sp, #4
 800ae2a:	b142      	cbz	r2, 800ae3e <__ascii_mbtowc+0x1a>
 800ae2c:	b14b      	cbz	r3, 800ae42 <__ascii_mbtowc+0x1e>
 800ae2e:	7813      	ldrb	r3, [r2, #0]
 800ae30:	600b      	str	r3, [r1, #0]
 800ae32:	7812      	ldrb	r2, [r2, #0]
 800ae34:	1e10      	subs	r0, r2, #0
 800ae36:	bf18      	it	ne
 800ae38:	2001      	movne	r0, #1
 800ae3a:	b002      	add	sp, #8
 800ae3c:	4770      	bx	lr
 800ae3e:	4610      	mov	r0, r2
 800ae40:	e7fb      	b.n	800ae3a <__ascii_mbtowc+0x16>
 800ae42:	f06f 0001 	mvn.w	r0, #1
 800ae46:	e7f8      	b.n	800ae3a <__ascii_mbtowc+0x16>

0800ae48 <__ascii_wctomb>:
 800ae48:	4603      	mov	r3, r0
 800ae4a:	4608      	mov	r0, r1
 800ae4c:	b141      	cbz	r1, 800ae60 <__ascii_wctomb+0x18>
 800ae4e:	2aff      	cmp	r2, #255	@ 0xff
 800ae50:	d904      	bls.n	800ae5c <__ascii_wctomb+0x14>
 800ae52:	228a      	movs	r2, #138	@ 0x8a
 800ae54:	601a      	str	r2, [r3, #0]
 800ae56:	f04f 30ff 	mov.w	r0, #4294967295
 800ae5a:	4770      	bx	lr
 800ae5c:	700a      	strb	r2, [r1, #0]
 800ae5e:	2001      	movs	r0, #1
 800ae60:	4770      	bx	lr
	...

0800ae64 <fiprintf>:
 800ae64:	b40e      	push	{r1, r2, r3}
 800ae66:	b503      	push	{r0, r1, lr}
 800ae68:	4601      	mov	r1, r0
 800ae6a:	ab03      	add	r3, sp, #12
 800ae6c:	4805      	ldr	r0, [pc, #20]	@ (800ae84 <fiprintf+0x20>)
 800ae6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae72:	6800      	ldr	r0, [r0, #0]
 800ae74:	9301      	str	r3, [sp, #4]
 800ae76:	f7ff fd4b 	bl	800a910 <_vfiprintf_r>
 800ae7a:	b002      	add	sp, #8
 800ae7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae80:	b003      	add	sp, #12
 800ae82:	4770      	bx	lr
 800ae84:	20002c18 	.word	0x20002c18

0800ae88 <abort>:
 800ae88:	b508      	push	{r3, lr}
 800ae8a:	2006      	movs	r0, #6
 800ae8c:	f000 f82c 	bl	800aee8 <raise>
 800ae90:	2001      	movs	r0, #1
 800ae92:	f000 f855 	bl	800af40 <_exit>

0800ae96 <_raise_r>:
 800ae96:	291f      	cmp	r1, #31
 800ae98:	b538      	push	{r3, r4, r5, lr}
 800ae9a:	4605      	mov	r5, r0
 800ae9c:	460c      	mov	r4, r1
 800ae9e:	d904      	bls.n	800aeaa <_raise_r+0x14>
 800aea0:	2316      	movs	r3, #22
 800aea2:	6003      	str	r3, [r0, #0]
 800aea4:	f04f 30ff 	mov.w	r0, #4294967295
 800aea8:	bd38      	pop	{r3, r4, r5, pc}
 800aeaa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aeac:	b112      	cbz	r2, 800aeb4 <_raise_r+0x1e>
 800aeae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aeb2:	b94b      	cbnz	r3, 800aec8 <_raise_r+0x32>
 800aeb4:	4628      	mov	r0, r5
 800aeb6:	f000 f831 	bl	800af1c <_getpid_r>
 800aeba:	4622      	mov	r2, r4
 800aebc:	4601      	mov	r1, r0
 800aebe:	4628      	mov	r0, r5
 800aec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aec4:	f000 b818 	b.w	800aef8 <_kill_r>
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d00a      	beq.n	800aee2 <_raise_r+0x4c>
 800aecc:	1c59      	adds	r1, r3, #1
 800aece:	d103      	bne.n	800aed8 <_raise_r+0x42>
 800aed0:	2316      	movs	r3, #22
 800aed2:	6003      	str	r3, [r0, #0]
 800aed4:	2001      	movs	r0, #1
 800aed6:	e7e7      	b.n	800aea8 <_raise_r+0x12>
 800aed8:	2100      	movs	r1, #0
 800aeda:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800aede:	4620      	mov	r0, r4
 800aee0:	4798      	blx	r3
 800aee2:	2000      	movs	r0, #0
 800aee4:	e7e0      	b.n	800aea8 <_raise_r+0x12>
	...

0800aee8 <raise>:
 800aee8:	4b02      	ldr	r3, [pc, #8]	@ (800aef4 <raise+0xc>)
 800aeea:	4601      	mov	r1, r0
 800aeec:	6818      	ldr	r0, [r3, #0]
 800aeee:	f7ff bfd2 	b.w	800ae96 <_raise_r>
 800aef2:	bf00      	nop
 800aef4:	20002c18 	.word	0x20002c18

0800aef8 <_kill_r>:
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	4d07      	ldr	r5, [pc, #28]	@ (800af18 <_kill_r+0x20>)
 800aefc:	2300      	movs	r3, #0
 800aefe:	4604      	mov	r4, r0
 800af00:	4608      	mov	r0, r1
 800af02:	4611      	mov	r1, r2
 800af04:	602b      	str	r3, [r5, #0]
 800af06:	f000 f813 	bl	800af30 <_kill>
 800af0a:	1c43      	adds	r3, r0, #1
 800af0c:	d102      	bne.n	800af14 <_kill_r+0x1c>
 800af0e:	682b      	ldr	r3, [r5, #0]
 800af10:	b103      	cbz	r3, 800af14 <_kill_r+0x1c>
 800af12:	6023      	str	r3, [r4, #0]
 800af14:	bd38      	pop	{r3, r4, r5, pc}
 800af16:	bf00      	nop
 800af18:	20004ac8 	.word	0x20004ac8

0800af1c <_getpid_r>:
 800af1c:	f000 b800 	b.w	800af20 <_getpid>

0800af20 <_getpid>:
 800af20:	4b02      	ldr	r3, [pc, #8]	@ (800af2c <_getpid+0xc>)
 800af22:	2258      	movs	r2, #88	@ 0x58
 800af24:	601a      	str	r2, [r3, #0]
 800af26:	f04f 30ff 	mov.w	r0, #4294967295
 800af2a:	4770      	bx	lr
 800af2c:	20004ac8 	.word	0x20004ac8

0800af30 <_kill>:
 800af30:	4b02      	ldr	r3, [pc, #8]	@ (800af3c <_kill+0xc>)
 800af32:	2258      	movs	r2, #88	@ 0x58
 800af34:	601a      	str	r2, [r3, #0]
 800af36:	f04f 30ff 	mov.w	r0, #4294967295
 800af3a:	4770      	bx	lr
 800af3c:	20004ac8 	.word	0x20004ac8

0800af40 <_exit>:
 800af40:	e7fe      	b.n	800af40 <_exit>
	...

0800af44 <_init>:
 800af44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af46:	bf00      	nop
 800af48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af4a:	bc08      	pop	{r3}
 800af4c:	469e      	mov	lr, r3
 800af4e:	4770      	bx	lr

0800af50 <_fini>:
 800af50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af52:	bf00      	nop
 800af54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af56:	bc08      	pop	{r3}
 800af58:	469e      	mov	lr, r3
 800af5a:	4770      	bx	lr
