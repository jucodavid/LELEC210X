
hands_on_main_app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a438  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001227c  0800a5e8  0800a5e8  0000b5e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c864  0801c864  00020dd4  2**0
                  CONTENTS
  4 .ARM          00000008  0801c864  0801c864  0001d864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c86c  0801c86c  00020dd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c86c  0801c86c  0001d86c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c870  0801c870  0001d870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002dd4  20000000  0801c874  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d00  20002dd8  0801f648  00020dd8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004ad8  0801f648  00021ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020dd4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042f2f  00000000  00000000  00020e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007c3a  00000000  00000000  00063d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 000189cf  00000000  00000000  0006b96d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a8  00000000  00000000  00084340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002cb6  00000000  00000000  00085be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000312ad  00000000  00000000  0008889e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003b2d4  00000000  00000000  000b9b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012477a  00000000  00000000  000f4e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  00219599  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005890  00000000  00000000  00219658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0021eee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00009bbe  00000000  00000000  0021ef49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000012b0  00000000  00000000  00228b07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20002dd8 	.word	0x20002dd8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a5d0 	.word	0x0800a5d0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20002ddc 	.word	0x20002ddc
 80001ec:	0800a5d0 	.word	0x0800a5d0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b988 	b.w	8000ef0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	468e      	mov	lr, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	4688      	mov	r8, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d962      	bls.n	8000cd4 <__udivmoddi4+0xdc>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	b14e      	cbz	r6, 8000c28 <__udivmoddi4+0x30>
 8000c14:	f1c6 0320 	rsb	r3, r6, #32
 8000c18:	fa01 f806 	lsl.w	r8, r1, r6
 8000c1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c20:	40b7      	lsls	r7, r6
 8000c22:	ea43 0808 	orr.w	r8, r3, r8
 8000c26:	40b4      	lsls	r4, r6
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c34:	0c23      	lsrs	r3, r4, #16
 8000c36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c4c:	f080 80ea 	bcs.w	8000e24 <__udivmoddi4+0x22c>
 8000c50:	429a      	cmp	r2, r3
 8000c52:	f240 80e7 	bls.w	8000e24 <__udivmoddi4+0x22c>
 8000c56:	3902      	subs	r1, #2
 8000c58:	443b      	add	r3, r7
 8000c5a:	1a9a      	subs	r2, r3, r2
 8000c5c:	b2a3      	uxth	r3, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6e:	459c      	cmp	ip, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c78:	f080 80d6 	bcs.w	8000e28 <__udivmoddi4+0x230>
 8000c7c:	459c      	cmp	ip, r3
 8000c7e:	f240 80d3 	bls.w	8000e28 <__udivmoddi4+0x230>
 8000c82:	443b      	add	r3, r7
 8000c84:	3802      	subs	r0, #2
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	eba3 030c 	sub.w	r3, r3, ip
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40f3      	lsrs	r3, r6
 8000c94:	2200      	movs	r2, #0
 8000c96:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xb6>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb0>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d146      	bne.n	8000d44 <__udivmoddi4+0x14c>
 8000cb6:	4573      	cmp	r3, lr
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xc8>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 8105 	bhi.w	8000eca <__udivmoddi4+0x2d2>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	4690      	mov	r8, r2
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e5      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cce:	e9c5 4800 	strd	r4, r8, [r5]
 8000cd2:	e7e2      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f000 8090 	beq.w	8000dfa <__udivmoddi4+0x202>
 8000cda:	fab2 f682 	clz	r6, r2
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	f040 80a4 	bne.w	8000e2c <__udivmoddi4+0x234>
 8000ce4:	1a8a      	subs	r2, r1, r2
 8000ce6:	0c03      	lsrs	r3, r0, #16
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	b280      	uxth	r0, r0
 8000cee:	b2bc      	uxth	r4, r7
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cf6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x11e>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x11c>
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	f200 80e0 	bhi.w	8000ed4 <__udivmoddi4+0x2dc>
 8000d14:	46c4      	mov	ip, r8
 8000d16:	1a9b      	subs	r3, r3, r2
 8000d18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d24:	fb02 f404 	mul.w	r4, r2, r4
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x144>
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x142>
 8000d34:	429c      	cmp	r4, r3
 8000d36:	f200 80ca 	bhi.w	8000ece <__udivmoddi4+0x2d6>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	1b1b      	subs	r3, r3, r4
 8000d3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d42:	e7a5      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d44:	f1c1 0620 	rsb	r6, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4e:	431f      	orrs	r7, r3
 8000d50:	fa0e f401 	lsl.w	r4, lr, r1
 8000d54:	fa20 f306 	lsr.w	r3, r0, r6
 8000d58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	fa1f fc87 	uxth.w	ip, r7
 8000d6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x1a0>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d8a:	f080 809c 	bcs.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f240 8099 	bls.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d94:	3802      	subs	r0, #2
 8000d96:	443c      	add	r4, r7
 8000d98:	eba4 040e 	sub.w	r4, r4, lr
 8000d9c:	fa1f fe83 	uxth.w	lr, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db0:	45a4      	cmp	ip, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1ce>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dba:	f080 8082 	bcs.w	8000ec2 <__udivmoddi4+0x2ca>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d97f      	bls.n	8000ec2 <__udivmoddi4+0x2ca>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	443c      	add	r4, r7
 8000dc6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dca:	eba4 040c 	sub.w	r4, r4, ip
 8000dce:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	4673      	mov	r3, lr
 8000dd6:	46e1      	mov	r9, ip
 8000dd8:	d362      	bcc.n	8000ea0 <__udivmoddi4+0x2a8>
 8000dda:	d05f      	beq.n	8000e9c <__udivmoddi4+0x2a4>
 8000ddc:	b15d      	cbz	r5, 8000df6 <__udivmoddi4+0x1fe>
 8000dde:	ebb8 0203 	subs.w	r2, r8, r3
 8000de2:	eb64 0409 	sbc.w	r4, r4, r9
 8000de6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dea:	fa22 f301 	lsr.w	r3, r2, r1
 8000dee:	431e      	orrs	r6, r3
 8000df0:	40cc      	lsrs	r4, r1
 8000df2:	e9c5 6400 	strd	r6, r4, [r5]
 8000df6:	2100      	movs	r1, #0
 8000df8:	e74f      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000dfa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dfe:	0c01      	lsrs	r1, r0, #16
 8000e00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e04:	b280      	uxth	r0, r0
 8000e06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	463c      	mov	r4, r7
 8000e10:	46b8      	mov	r8, r7
 8000e12:	46be      	mov	lr, r7
 8000e14:	2620      	movs	r6, #32
 8000e16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e1a:	eba2 0208 	sub.w	r2, r2, r8
 8000e1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e22:	e766      	b.n	8000cf2 <__udivmoddi4+0xfa>
 8000e24:	4601      	mov	r1, r0
 8000e26:	e718      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e72c      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000e2c:	f1c6 0220 	rsb	r2, r6, #32
 8000e30:	fa2e f302 	lsr.w	r3, lr, r2
 8000e34:	40b7      	lsls	r7, r6
 8000e36:	40b1      	lsls	r1, r6
 8000e38:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e40:	430a      	orrs	r2, r1
 8000e42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e46:	b2bc      	uxth	r4, r7
 8000e48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb08 f904 	mul.w	r9, r8, r4
 8000e56:	40b0      	lsls	r0, r6
 8000e58:	4589      	cmp	r9, r1
 8000e5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e5e:	b280      	uxth	r0, r0
 8000e60:	d93e      	bls.n	8000ee0 <__udivmoddi4+0x2e8>
 8000e62:	1879      	adds	r1, r7, r1
 8000e64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e68:	d201      	bcs.n	8000e6e <__udivmoddi4+0x276>
 8000e6a:	4589      	cmp	r9, r1
 8000e6c:	d81f      	bhi.n	8000eae <__udivmoddi4+0x2b6>
 8000e6e:	eba1 0109 	sub.w	r1, r1, r9
 8000e72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e76:	fb09 f804 	mul.w	r8, r9, r4
 8000e7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e84:	4542      	cmp	r2, r8
 8000e86:	d229      	bcs.n	8000edc <__udivmoddi4+0x2e4>
 8000e88:	18ba      	adds	r2, r7, r2
 8000e8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e8e:	d2c4      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e90:	4542      	cmp	r2, r8
 8000e92:	d2c2      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e94:	f1a9 0102 	sub.w	r1, r9, #2
 8000e98:	443a      	add	r2, r7
 8000e9a:	e7be      	b.n	8000e1a <__udivmoddi4+0x222>
 8000e9c:	45f0      	cmp	r8, lr
 8000e9e:	d29d      	bcs.n	8000ddc <__udivmoddi4+0x1e4>
 8000ea0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ea4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	46e1      	mov	r9, ip
 8000eac:	e796      	b.n	8000ddc <__udivmoddi4+0x1e4>
 8000eae:	eba7 0909 	sub.w	r9, r7, r9
 8000eb2:	4449      	add	r1, r9
 8000eb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000eb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ebc:	fb09 f804 	mul.w	r8, r9, r4
 8000ec0:	e7db      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ec2:	4673      	mov	r3, lr
 8000ec4:	e77f      	b.n	8000dc6 <__udivmoddi4+0x1ce>
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	e766      	b.n	8000d98 <__udivmoddi4+0x1a0>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e6fd      	b.n	8000cca <__udivmoddi4+0xd2>
 8000ece:	443b      	add	r3, r7
 8000ed0:	3a02      	subs	r2, #2
 8000ed2:	e733      	b.n	8000d3c <__udivmoddi4+0x144>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	443b      	add	r3, r7
 8000eda:	e71c      	b.n	8000d16 <__udivmoddi4+0x11e>
 8000edc:	4649      	mov	r1, r9
 8000ede:	e79c      	b.n	8000e1a <__udivmoddi4+0x222>
 8000ee0:	eba1 0109 	sub.w	r1, r1, r9
 8000ee4:	46c4      	mov	ip, r8
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fb09 f804 	mul.w	r8, r9, r4
 8000eee:	e7c4      	b.n	8000e7a <__udivmoddi4+0x282>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ef4:	b510      	push	{r4, lr}

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ef6:	4826      	ldr	r0, [pc, #152]	@ (8000f90 <MX_ADC1_Init+0x9c>)
 8000ef8:	4a26      	ldr	r2, [pc, #152]	@ (8000f94 <MX_ADC1_Init+0xa0>)
{
 8000efa:	b08a      	sub	sp, #40	@ 0x28
  hadc1.Instance = ADC1;
 8000efc:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000efe:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
  ADC_MultiModeTypeDef multimode = {0};
 8000f02:	2300      	movs	r3, #0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000f04:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f06:	2204      	movs	r2, #4
 8000f08:	e9c0 3204 	strd	r3, r2, [r0, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 8000f0c:	2201      	movs	r2, #1
  ADC_MultiModeTypeDef multimode = {0};
 8000f0e:	e9cd 3301 	strd	r3, r3, [sp, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f12:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000f16:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000f1a:	e9cd 3307 	strd	r3, r3, [sp, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f22:	9309      	str	r3, [sp, #36]	@ 0x24
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f24:	8303      	strh	r3, [r0, #24]
  hadc1.Init.NbrOfConversion = 1;
 8000f26:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f28:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f2c:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f30:	6343      	str	r3, [r0, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f32:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f36:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000f3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f3e:	e9c0 230a 	strd	r2, r3, [r0, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f42:	f002 f89b 	bl	800307c <HAL_ADC_Init>
 8000f46:	b9c0      	cbnz	r0, 8000f7a <MX_ADC1_Init+0x86>
    Error_Handler();
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f48:	2300      	movs	r3, #0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f4a:	4811      	ldr	r0, [pc, #68]	@ (8000f90 <MX_ADC1_Init+0x9c>)
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f4c:	9301      	str	r3, [sp, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f4e:	a901      	add	r1, sp, #4
 8000f50:	f002 fe64 	bl	8003c1c <HAL_ADCEx_MultiModeConfigChannel>
 8000f54:	b9c0      	cbnz	r0, 8000f88 <MX_ADC1_Init+0x94>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f56:	4810      	ldr	r0, [pc, #64]	@ (8000f98 <MX_ADC1_Init+0xa4>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f58:	2206      	movs	r2, #6
 8000f5a:	e9cd 0204 	strd	r0, r2, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f5e:	2300      	movs	r3, #0
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f60:	247f      	movs	r4, #127	@ 0x7f
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f62:	2204      	movs	r2, #4
  sConfig.Offset = 0;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f64:	480a      	ldr	r0, [pc, #40]	@ (8000f90 <MX_ADC1_Init+0x9c>)
 8000f66:	a904      	add	r1, sp, #16
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f68:	e9cd 3406 	strd	r3, r4, [sp, #24]
  sConfig.Offset = 0;
 8000f6c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f70:	f002 f9ae 	bl	80032d0 <HAL_ADC_ConfigChannel>
 8000f74:	b920      	cbnz	r0, 8000f80 <MX_ADC1_Init+0x8c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f76:	b00a      	add	sp, #40	@ 0x28
 8000f78:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f7a:	f000 fbff 	bl	800177c <Error_Handler>
 8000f7e:	e7e3      	b.n	8000f48 <MX_ADC1_Init+0x54>
    Error_Handler();
 8000f80:	f000 fbfc 	bl	800177c <Error_Handler>
}
 8000f84:	b00a      	add	sp, #40	@ 0x28
 8000f86:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000f88:	f000 fbf8 	bl	800177c <Error_Handler>
 8000f8c:	e7e3      	b.n	8000f56 <MX_ADC1_Init+0x62>
 8000f8e:	bf00      	nop
 8000f90:	20002e3c 	.word	0x20002e3c
 8000f94:	50040000 	.word	0x50040000
 8000f98:	14f00020 	.word	0x14f00020

08000f9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f9c:	b570      	push	{r4, r5, r6, lr}
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	b0aa      	sub	sp, #168	@ 0xa8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa2:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa4:	228c      	movs	r2, #140	@ 0x8c
 8000fa6:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa8:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8000fac:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8000fb0:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fb2:	f007 fbd4 	bl	800875e <memset>
  if(adcHandle->Instance==ADC1)
 8000fb6:	4b27      	ldr	r3, [pc, #156]	@ (8001054 <HAL_ADC_MspInit+0xb8>)
 8000fb8:	6822      	ldr	r2, [r4, #0]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	d001      	beq.n	8000fc2 <HAL_ADC_MspInit+0x26>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fbe:	b02a      	add	sp, #168	@ 0xa8
 8000fc0:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fc2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000fc6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fca:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000fcc:	9207      	str	r2, [sp, #28]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000fce:	9326      	str	r3, [sp, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fd0:	f004 f9ba 	bl	8005348 <HAL_RCCEx_PeriphCLKConfig>
 8000fd4:	2800      	cmp	r0, #0
 8000fd6:	d136      	bne.n	8001046 <HAL_ADC_MspInit+0xaa>
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	@ (8001058 <HAL_ADC_MspInit+0xbc>)
    hdma_adc1.Instance = DMA1_Channel1;
 8000fda:	4d20      	ldr	r5, [pc, #128]	@ (800105c <HAL_ADC_MspInit+0xc0>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fdc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fde:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000fe2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000fe4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000fe6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8000fea:	9200      	str	r2, [sp, #0]
 8000fec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ff0:	f042 0201 	orr.w	r2, r2, #1
 8000ff4:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000ff6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ff8:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001000:	2201      	movs	r2, #1
 8001002:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001008:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800100a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	9604      	str	r6, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f003 f9e5 	bl	80043e0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 8001016:	4a12      	ldr	r2, [pc, #72]	@ (8001060 <HAL_ADC_MspInit+0xc4>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001018:	2380      	movs	r3, #128	@ 0x80
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800101a:	e9c5 2600 	strd	r2, r6, [r5]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800101e:	612b      	str	r3, [r5, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001020:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001024:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001028:	e9c5 2305 	strd	r2, r3, [r5, #20]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800102c:	4628      	mov	r0, r5
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800102e:	2320      	movs	r3, #32
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001030:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001034:	e9c5 3607 	strd	r3, r6, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001038:	f003 f8b0 	bl	800419c <HAL_DMA_Init>
 800103c:	b930      	cbnz	r0, 800104c <HAL_ADC_MspInit+0xb0>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800103e:	6525      	str	r5, [r4, #80]	@ 0x50
 8001040:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8001042:	b02a      	add	sp, #168	@ 0xa8
 8001044:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001046:	f000 fb99 	bl	800177c <Error_Handler>
 800104a:	e7c5      	b.n	8000fd8 <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 800104c:	f000 fb96 	bl	800177c <Error_Handler>
 8001050:	e7f5      	b.n	800103e <HAL_ADC_MspInit+0xa2>
 8001052:	bf00      	nop
 8001054:	50040000 	.word	0x50040000
 8001058:	40021000 	.word	0x40021000
 800105c:	20002df4 	.word	0x20002df4
 8001060:	40020008 	.word	0x40020008

08001064 <send_spectrogram>:
		DEBUG_PRINT("Packet counter overflow.\r\n");
		Error_Handler();
	}
}

static void send_spectrogram() {
 8001064:	b510      	push	{r4, lr}
 8001066:	4b1a      	ldr	r3, [pc, #104]	@ (80010d0 <send_spectrogram+0x6c>)
 8001068:	f5ad 7d4e 	sub.w	sp, sp, #824	@ 0x338
	for (size_t i=0; i<N_MELVECS; i++) {
 800106c:	46ec      	mov	ip, sp
 800106e:	2000      	movs	r0, #0
static void send_spectrogram() {
 8001070:	4662      	mov	r2, ip
 8001072:	f103 0e28 	add.w	lr, r3, #40	@ 0x28
			(packet+PACKET_HEADER_LENGTH)[(i*MELVEC_LENGTH+j)*2]   = mel_vectors[i][j] >> 8;
 8001076:	f933 1f02 	ldrsh.w	r1, [r3, #2]!
			(packet+PACKET_HEADER_LENGTH)[(i*MELVEC_LENGTH+j)*2+1] = mel_vectors[i][j] & 0xFF;
 800107a:	7251      	strb	r1, [r2, #9]
		for (size_t j=0; j<MELVEC_LENGTH; j++) {
 800107c:	4573      	cmp	r3, lr
			(packet+PACKET_HEADER_LENGTH)[(i*MELVEC_LENGTH+j)*2]   = mel_vectors[i][j] >> 8;
 800107e:	ea4f 2121 	mov.w	r1, r1, asr #8
 8001082:	7211      	strb	r1, [r2, #8]
		for (size_t j=0; j<MELVEC_LENGTH; j++) {
 8001084:	f102 0202 	add.w	r2, r2, #2
 8001088:	d1f5      	bne.n	8001076 <send_spectrogram+0x12>
	for (size_t i=0; i<N_MELVECS; i++) {
 800108a:	3014      	adds	r0, #20
 800108c:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8001090:	f10c 0c28 	add.w	ip, ip, #40	@ 0x28
 8001094:	d1ec      	bne.n	8001070 <send_spectrogram+0xc>
	make_packet(packet, PAYLOAD_LENGTH, 0, *packet_cnt);
 8001096:	4c0f      	ldr	r4, [pc, #60]	@ (80010d4 <send_spectrogram+0x70>)
 8001098:	2200      	movs	r2, #0
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80010a0:	4668      	mov	r0, sp
 80010a2:	f000 fc93 	bl	80019cc <make_packet>
	*packet_cnt += 1;
 80010a6:	6823      	ldr	r3, [r4, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	6023      	str	r3, [r4, #0]
	if (*packet_cnt == 0) {
 80010ac:	b163      	cbz	r3, 80010c8 <send_spectrogram+0x64>
//	start_cycle_count();
	encode_packet(packet, &packet_cnt);
//	stop_cycle_count("Encode packet");

//	start_cycle_count();
	S2LP_Send(packet, PACKET_LENGTH);
 80010ae:	f44f 714e 	mov.w	r1, #824	@ 0x338
 80010b2:	4668      	mov	r0, sp
 80010b4:	f000 fe14 	bl	8001ce0 <S2LP_Send>
//	stop_cycle_count("Radio WFI");

	start_cycle_count();
 80010b8:	f001 ff58 	bl	8002f6c <start_cycle_count>
	stop_cycle_count("Send packet");
 80010bc:	4806      	ldr	r0, [pc, #24]	@ (80010d8 <send_spectrogram+0x74>)
 80010be:	f001 ff57 	bl	8002f70 <stop_cycle_count>

//	print_encoded_packet(packet);
}
 80010c2:	f50d 7d4e 	add.w	sp, sp, #824	@ 0x338
 80010c6:	bd10      	pop	{r4, pc}
		Error_Handler();
 80010c8:	f000 fb58 	bl	800177c <Error_Handler>
 80010cc:	e7ef      	b.n	80010ae <send_spectrogram+0x4a>
 80010ce:	bf00      	nop
 80010d0:	20002eae 	.word	0x20002eae
 80010d4:	20002eac 	.word	0x20002eac
 80010d8:	0800a5e8 	.word	0x0800a5e8

080010dc <StartADCAcq>:
int StartADCAcq(int32_t n_bufs) {
 80010dc:	b508      	push	{r3, lr}
	cur_melvec = 0;
 80010de:	4a07      	ldr	r2, [pc, #28]	@ (80010fc <StartADCAcq+0x20>)
	rem_n_bufs = n_bufs;
 80010e0:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <StartADCAcq+0x24>)
	cur_melvec = 0;
 80010e2:	2100      	movs	r1, #0
	rem_n_bufs = n_bufs;
 80010e4:	6018      	str	r0, [r3, #0]
	cur_melvec = 0;
 80010e6:	7011      	strb	r1, [r2, #0]
	if (rem_n_bufs != 0) {
 80010e8:	6818      	ldr	r0, [r3, #0]
 80010ea:	b900      	cbnz	r0, 80010ee <StartADCAcq+0x12>
}
 80010ec:	bd08      	pop	{r3, pc}
		return HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADCDoubleBuf, 2*ADC_BUF_SIZE);
 80010ee:	4905      	ldr	r1, [pc, #20]	@ (8001104 <StartADCAcq+0x28>)
 80010f0:	4805      	ldr	r0, [pc, #20]	@ (8001108 <StartADCAcq+0x2c>)
 80010f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f6:	f002 fc47 	bl	8003988 <HAL_ADC_Start_DMA>
}
 80010fa:	bd08      	pop	{r3, pc}
 80010fc:	200031d0 	.word	0x200031d0
 8001100:	20002ea8 	.word	0x20002ea8
 8001104:	200031d8 	.word	0x200031d8
 8001108:	20002e3c 	.word	0x20002e3c

0800110c <IsADCFinished>:
	return (rem_n_bufs == 0);
 800110c:	4b02      	ldr	r3, [pc, #8]	@ (8001118 <IsADCFinished+0xc>)
 800110e:	6818      	ldr	r0, [r3, #0]
}
 8001110:	fab0 f080 	clz	r0, r0
 8001114:	0940      	lsrs	r0, r0, #5
 8001116:	4770      	bx	lr
 8001118:	20002ea8 	.word	0x20002ea8

0800111c <HAL_ADC_ConvCpltCallback>:
#error "Wrong value for EVENT_DETECTION."
#endif
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800111c:	b570      	push	{r4, r5, r6, lr}
	if (in_routine == 0) {
 800111e:	4d26      	ldr	r5, [pc, #152]	@ (80011b8 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001120:	782b      	ldrb	r3, [r5, #0]
{
 8001122:	b082      	sub	sp, #8
	if (in_routine == 0) {
 8001124:	b9ab      	cbnz	r3, 8001152 <HAL_ADC_ConvCpltCallback+0x36>
	q15_t max = 0;
 8001126:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
 800112a:	f8ad 0002 	strh.w	r0, [sp, #2]
	arm_max_q15((q15_t *)ADCData[buf_cplt], SAMPLES_PER_MELVEC, &max, &ignored);
 800112e:	ab01      	add	r3, sp, #4
	uint32_t ignored = 0;
 8001130:	9001      	str	r0, [sp, #4]
	arm_max_q15((q15_t *)ADCData[buf_cplt], SAMPLES_PER_MELVEC, &max, &ignored);
 8001132:	f10d 0202 	add.w	r2, sp, #2
 8001136:	4821      	ldr	r0, [pc, #132]	@ (80011bc <HAL_ADC_ConvCpltCallback+0xa0>)
 8001138:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800113c:	f005 fac8 	bl	80066d0 <arm_max_q15>
	if (max > threshold) {
 8001140:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8001144:	f5b3 6f16 	cmp.w	r3, #2400	@ 0x960
 8001148:	dc01      	bgt.n	800114e <HAL_ADC_ConvCpltCallback+0x32>
	ADC_Callback(1);
}
 800114a:	b002      	add	sp, #8
 800114c:	bd70      	pop	{r4, r5, r6, pc}
			in_routine = 1;
 800114e:	2301      	movs	r3, #1
 8001150:	702b      	strb	r3, [r5, #0]
	if (rem_n_bufs != -1) {
 8001152:	4c1b      	ldr	r4, [pc, #108]	@ (80011c0 <HAL_ADC_ConvCpltCallback+0xa4>)
 8001154:	6823      	ldr	r3, [r4, #0]
 8001156:	3301      	adds	r3, #1
 8001158:	d002      	beq.n	8001160 <HAL_ADC_ConvCpltCallback+0x44>
			rem_n_bufs--;
 800115a:	6823      	ldr	r3, [r4, #0]
 800115c:	3b01      	subs	r3, #1
 800115e:	6023      	str	r3, [r4, #0]
	if (rem_n_bufs == 0) {
 8001160:	6823      	ldr	r3, [r4, #0]
 8001162:	b1fb      	cbz	r3, 80011a4 <HAL_ADC_ConvCpltCallback+0x88>
	} else if (ADCDataRdy[1-buf_cplt]) {
 8001164:	4e17      	ldr	r6, [pc, #92]	@ (80011c4 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001166:	7833      	ldrb	r3, [r6, #0]
 8001168:	bb13      	cbnz	r3, 80011b0 <HAL_ADC_ConvCpltCallback+0x94>
	Spectrogram_Compute((q15_t *)ADCData[buf_cplt], mel_vectors[cur_melvec]);
 800116a:	4d17      	ldr	r5, [pc, #92]	@ (80011c8 <HAL_ADC_ConvCpltCallback+0xac>)
	Spectrogram_Format((q15_t *)ADCData[buf_cplt]);
 800116c:	4813      	ldr	r0, [pc, #76]	@ (80011bc <HAL_ADC_ConvCpltCallback+0xa0>)
	ADCDataRdy[buf_cplt] = 1;
 800116e:	2301      	movs	r3, #1
 8001170:	7073      	strb	r3, [r6, #1]
	Spectrogram_Format((q15_t *)ADCData[buf_cplt]);
 8001172:	f001 fced 	bl	8002b50 <Spectrogram_Format>
	Spectrogram_Compute((q15_t *)ADCData[buf_cplt], mel_vectors[cur_melvec]);
 8001176:	782b      	ldrb	r3, [r5, #0]
 8001178:	4914      	ldr	r1, [pc, #80]	@ (80011cc <HAL_ADC_ConvCpltCallback+0xb0>)
 800117a:	4810      	ldr	r0, [pc, #64]	@ (80011bc <HAL_ADC_ConvCpltCallback+0xa0>)
 800117c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001180:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8001184:	f001 fd06 	bl	8002b94 <Spectrogram_Compute>
	cur_melvec++;
 8001188:	782b      	ldrb	r3, [r5, #0]
 800118a:	3301      	adds	r3, #1
 800118c:	b2db      	uxtb	r3, r3
	ADCDataRdy[buf_cplt] = 0;
 800118e:	2200      	movs	r2, #0
	cur_melvec++;
 8001190:	702b      	strb	r3, [r5, #0]
	ADCDataRdy[buf_cplt] = 0;
 8001192:	7072      	strb	r2, [r6, #1]
	if (rem_n_bufs == 0) {
 8001194:	6823      	ldr	r3, [r4, #0]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1d7      	bne.n	800114a <HAL_ADC_ConvCpltCallback+0x2e>
}
 800119a:	b002      	add	sp, #8
 800119c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		send_spectrogram();
 80011a0:	f7ff bf60 	b.w	8001064 <send_spectrogram>
	HAL_ADC_Stop_DMA(&hadc1);
 80011a4:	480a      	ldr	r0, [pc, #40]	@ (80011d0 <HAL_ADC_ConvCpltCallback+0xb4>)
		in_routine = 0;
 80011a6:	702b      	strb	r3, [r5, #0]
	HAL_ADC_Stop_DMA(&hadc1);
 80011a8:	4e06      	ldr	r6, [pc, #24]	@ (80011c4 <HAL_ADC_ConvCpltCallback+0xa8>)
 80011aa:	f002 fca3 	bl	8003af4 <HAL_ADC_Stop_DMA>
}
 80011ae:	e7dc      	b.n	800116a <HAL_ADC_ConvCpltCallback+0x4e>
		Error_Handler();
 80011b0:	f000 fae4 	bl	800177c <Error_Handler>
 80011b4:	e7d9      	b.n	800116a <HAL_ADC_ConvCpltCallback+0x4e>
 80011b6:	bf00      	nop
 80011b8:	20002ea4 	.word	0x20002ea4
 80011bc:	200035d8 	.word	0x200035d8
 80011c0:	20002ea8 	.word	0x20002ea8
 80011c4:	200031d4 	.word	0x200031d4
 80011c8:	200031d0 	.word	0x200031d0
 80011cc:	20002eb0 	.word	0x20002eb0
 80011d0:	20002e3c 	.word	0x20002e3c

080011d4 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80011d4:	b570      	push	{r4, r5, r6, lr}
	if (in_routine == 0) {
 80011d6:	4d26      	ldr	r5, [pc, #152]	@ (8001270 <HAL_ADC_ConvHalfCpltCallback+0x9c>)
 80011d8:	782b      	ldrb	r3, [r5, #0]
{
 80011da:	b082      	sub	sp, #8
	if (in_routine == 0) {
 80011dc:	b9ab      	cbnz	r3, 800120a <HAL_ADC_ConvHalfCpltCallback+0x36>
	q15_t max = 0;
 80011de:	f003 00ff 	and.w	r0, r3, #255	@ 0xff
 80011e2:	f8ad 0002 	strh.w	r0, [sp, #2]
	arm_max_q15((q15_t *)ADCData[buf_cplt], SAMPLES_PER_MELVEC, &max, &ignored);
 80011e6:	ab01      	add	r3, sp, #4
	uint32_t ignored = 0;
 80011e8:	9001      	str	r0, [sp, #4]
	arm_max_q15((q15_t *)ADCData[buf_cplt], SAMPLES_PER_MELVEC, &max, &ignored);
 80011ea:	f10d 0202 	add.w	r2, sp, #2
 80011ee:	4821      	ldr	r0, [pc, #132]	@ (8001274 <HAL_ADC_ConvHalfCpltCallback+0xa0>)
 80011f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011f4:	f005 fa6c 	bl	80066d0 <arm_max_q15>
	if (max > threshold) {
 80011f8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80011fc:	f5b3 6f16 	cmp.w	r3, #2400	@ 0x960
 8001200:	dc01      	bgt.n	8001206 <HAL_ADC_ConvHalfCpltCallback+0x32>
	ADC_Callback(0);
}
 8001202:	b002      	add	sp, #8
 8001204:	bd70      	pop	{r4, r5, r6, pc}
			in_routine = 1;
 8001206:	2301      	movs	r3, #1
 8001208:	702b      	strb	r3, [r5, #0]
	if (rem_n_bufs != -1) {
 800120a:	4c1b      	ldr	r4, [pc, #108]	@ (8001278 <HAL_ADC_ConvHalfCpltCallback+0xa4>)
 800120c:	6823      	ldr	r3, [r4, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	d002      	beq.n	8001218 <HAL_ADC_ConvHalfCpltCallback+0x44>
			rem_n_bufs--;
 8001212:	6823      	ldr	r3, [r4, #0]
 8001214:	3b01      	subs	r3, #1
 8001216:	6023      	str	r3, [r4, #0]
	if (rem_n_bufs == 0) {
 8001218:	6823      	ldr	r3, [r4, #0]
 800121a:	b1fb      	cbz	r3, 800125c <HAL_ADC_ConvHalfCpltCallback+0x88>
	} else if (ADCDataRdy[1-buf_cplt]) {
 800121c:	4e17      	ldr	r6, [pc, #92]	@ (800127c <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 800121e:	7873      	ldrb	r3, [r6, #1]
 8001220:	bb13      	cbnz	r3, 8001268 <HAL_ADC_ConvHalfCpltCallback+0x94>
	Spectrogram_Compute((q15_t *)ADCData[buf_cplt], mel_vectors[cur_melvec]);
 8001222:	4d17      	ldr	r5, [pc, #92]	@ (8001280 <HAL_ADC_ConvHalfCpltCallback+0xac>)
	Spectrogram_Format((q15_t *)ADCData[buf_cplt]);
 8001224:	4813      	ldr	r0, [pc, #76]	@ (8001274 <HAL_ADC_ConvHalfCpltCallback+0xa0>)
	ADCDataRdy[buf_cplt] = 1;
 8001226:	2301      	movs	r3, #1
 8001228:	7033      	strb	r3, [r6, #0]
	Spectrogram_Format((q15_t *)ADCData[buf_cplt]);
 800122a:	f001 fc91 	bl	8002b50 <Spectrogram_Format>
	Spectrogram_Compute((q15_t *)ADCData[buf_cplt], mel_vectors[cur_melvec]);
 800122e:	782b      	ldrb	r3, [r5, #0]
 8001230:	4914      	ldr	r1, [pc, #80]	@ (8001284 <HAL_ADC_ConvHalfCpltCallback+0xb0>)
 8001232:	4810      	ldr	r0, [pc, #64]	@ (8001274 <HAL_ADC_ConvHalfCpltCallback+0xa0>)
 8001234:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001238:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800123c:	f001 fcaa 	bl	8002b94 <Spectrogram_Compute>
	cur_melvec++;
 8001240:	782b      	ldrb	r3, [r5, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	b2db      	uxtb	r3, r3
	ADCDataRdy[buf_cplt] = 0;
 8001246:	2200      	movs	r2, #0
	cur_melvec++;
 8001248:	702b      	strb	r3, [r5, #0]
	ADCDataRdy[buf_cplt] = 0;
 800124a:	7032      	strb	r2, [r6, #0]
	if (rem_n_bufs == 0) {
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1d7      	bne.n	8001202 <HAL_ADC_ConvHalfCpltCallback+0x2e>
}
 8001252:	b002      	add	sp, #8
 8001254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		send_spectrogram();
 8001258:	f7ff bf04 	b.w	8001064 <send_spectrogram>
	HAL_ADC_Stop_DMA(&hadc1);
 800125c:	480a      	ldr	r0, [pc, #40]	@ (8001288 <HAL_ADC_ConvHalfCpltCallback+0xb4>)
		in_routine = 0;
 800125e:	702b      	strb	r3, [r5, #0]
	HAL_ADC_Stop_DMA(&hadc1);
 8001260:	4e06      	ldr	r6, [pc, #24]	@ (800127c <HAL_ADC_ConvHalfCpltCallback+0xa8>)
 8001262:	f002 fc47 	bl	8003af4 <HAL_ADC_Stop_DMA>
}
 8001266:	e7dc      	b.n	8001222 <HAL_ADC_ConvHalfCpltCallback+0x4e>
		Error_Handler();
 8001268:	f000 fa88 	bl	800177c <Error_Handler>
 800126c:	e7d9      	b.n	8001222 <HAL_ADC_ConvHalfCpltCallback+0x4e>
 800126e:	bf00      	nop
 8001270:	20002ea4 	.word	0x20002ea4
 8001274:	200031d8 	.word	0x200031d8
 8001278:	20002ea8 	.word	0x20002ea8
 800127c:	200031d4 	.word	0x200031d4
 8001280:	200031d0 	.word	0x200031d0
 8001284:	20002eb0 	.word	0x20002eb0
 8001288:	20002e3c 	.word	0x20002e3c
 800128c:	00000000 	.word	0x00000000

08001290 <MX_AES_Init>:
  /* USER CODE END AES_Init 0 */

  /* USER CODE BEGIN AES_Init 1 */

  /* USER CODE END AES_Init 1 */
  hcryp.Instance = AES;
 8001290:	480f      	ldr	r0, [pc, #60]	@ (80012d0 <MX_AES_Init+0x40>)
 8001292:	4a10      	ldr	r2, [pc, #64]	@ (80012d4 <MX_AES_Init+0x44>)
  hcryp.Init.DataType = CRYP_DATATYPE_32B;
  hcryp.Init.KeySize = CRYP_KEYSIZE_128B;
  hcryp.Init.OperatingMode = CRYP_ALGOMODE_ENCRYPT;
  hcryp.Init.ChainingMode = CRYP_CHAINMODE_AES_CBC;
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
  hcryp.Init.pKey = (uint8_t *)pKeyAES;
 8001294:	4910      	ldr	r1, [pc, #64]	@ (80012d8 <MX_AES_Init+0x48>)
{
 8001296:	b508      	push	{r3, lr}
  hcryp.Init.DataType = CRYP_DATATYPE_32B;
 8001298:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80012c8 <MX_AES_Init+0x38>
  hcryp.Init.pInitVect = (uint8_t *)pInitVectAES;
 800129c:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <MX_AES_Init+0x4c>)
 800129e:	6243      	str	r3, [r0, #36]	@ 0x24
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 80012a0:	2300      	movs	r3, #0
  hcryp.Instance = AES;
 80012a2:	6002      	str	r2, [r0, #0]
  hcryp.Init.KeyWriteFlag = CRYP_KEY_WRITE_ENABLE;
 80012a4:	6183      	str	r3, [r0, #24]
  hcryp.Init.DataType = CRYP_DATATYPE_32B;
 80012a6:	2200      	movs	r2, #0
 80012a8:	2320      	movs	r3, #32
 80012aa:	ed80 7b02 	vstr	d7, [r0, #8]
 80012ae:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hcryp.Init.pKey = (uint8_t *)pKeyAES;
 80012b2:	6201      	str	r1, [r0, #32]
  if (HAL_CRYP_Init(&hcryp) != HAL_OK)
 80012b4:	f002 fdc2 	bl	8003e3c <HAL_CRYP_Init>
 80012b8:	b900      	cbnz	r0, 80012bc <MX_AES_Init+0x2c>
  }
  /* USER CODE BEGIN AES_Init 2 */

  /* USER CODE END AES_Init 2 */

}
 80012ba:	bd08      	pop	{r3, pc}
 80012bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80012c0:	f000 ba5c 	b.w	800177c <Error_Handler>
 80012c4:	f3af 8000 	nop.w
	...
 80012d0:	200039d8 	.word	0x200039d8
 80012d4:	50060000 	.word	0x50060000
 80012d8:	0800a634 	.word	0x0800a634
 80012dc:	0800a624 	.word	0x0800a624

080012e0 <HAL_CRYP_MspInit>:

void HAL_CRYP_MspInit(CRYP_HandleTypeDef* crypHandle)
{

  if(crypHandle->Instance==AES)
 80012e0:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <HAL_CRYP_MspInit+0x2c>)
 80012e2:	6802      	ldr	r2, [r0, #0]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d000      	beq.n	80012ea <HAL_CRYP_MspInit+0xa>
 80012e8:	4770      	bx	lr
  {
  /* USER CODE BEGIN AES_MspInit 0 */

  /* USER CODE END AES_MspInit 0 */
    /* AES clock enable */
    __HAL_RCC_AES_CLK_ENABLE();
 80012ea:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 80012ee:	f5a3 337c 	sub.w	r3, r3, #258048	@ 0x3f000
{
 80012f2:	b082      	sub	sp, #8
    __HAL_RCC_AES_CLK_ENABLE();
 80012f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80012f6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80012fa:	64da      	str	r2, [r3, #76]	@ 0x4c
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN AES_MspInit 1 */

  /* USER CODE END AES_MspInit 1 */
  }
}
 8001306:	b002      	add	sp, #8
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	50060000 	.word	0x50060000

08001310 <arm_absmax_q15>:
void arm_absmax_q15(
  const q15_t * pSrc,
        uint32_t blockSize,
        q15_t * pResult,
        uint32_t * pIndex)
{
 8001310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        uint32_t index;                                /* index of maximum value */                         \
                                                                                                            \
  /* Initialize index value to zero. */                                                                     \
  outIndex = 0U;                                                                                            \
  /* Load first input value that act as reference value for comparision */                                  \
  out = *pSrc++;                                                                                            \
 8001314:	4680      	mov	r8, r0
 8001316:	f938 cb02 	ldrsh.w	ip, [r8], #2
  out = (out > 0) ? out : (q15_t)__QSUB16(0, out);                                                                           \
 800131a:	f1bc 0f00 	cmp.w	ip, #0
 800131e:	dc04      	bgt.n	800132a <arm_absmax_q15+0x1a>

__STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8001320:	2400      	movs	r4, #0
 8001322:	fad4 f41c 	qsub16	r4, r4, ip
 8001326:	fa0f fc84 	sxth.w	ip, r4
  /* Initialize index of extrema value. */                                                                  \
  index = 0U;                                                                                               \
                                                                                                            \
  /* Loop unrolling: Compute 4 outputs at a time */                                                         \
  blkCnt = (blockSize - 1U) >> 2U;                                                                          \
 800132a:	f101 39ff 	add.w	r9, r1, #4294967295
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 800132e:	ea5f 0a99 	movs.w	sl, r9, lsr #2
 8001332:	d07c      	beq.n	800142e <arm_absmax_q15+0x11e>
  index = 0U;                                                                                               \
 8001334:	2400      	movs	r4, #0
 8001336:	300a      	adds	r0, #10
 8001338:	ea4f 078a 	mov.w	r7, sl, lsl #2
  outIndex = 0U;                                                                                            \
 800133c:	4625      	mov	r5, r4
 800133e:	4626      	mov	r6, r4
  {                                                                                                         \
    /* Initialize cur_absmax to next consecutive values one by one */                                         \
    cur_absmax = *pSrc++;                                                                                     \
 8001340:	f930 ec08 	ldrsh.w	lr, [r0, #-8]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8001344:	f1be 0f00 	cmp.w	lr, #0
 8001348:	dc03      	bgt.n	8001352 <arm_absmax_q15+0x42>
 800134a:	fad6 fe1e 	qsub16	lr, r6, lr
 800134e:	fa0f fe8e 	sxth.w	lr, lr
    /* compare for the extrema value */                                                                     \
    if (cur_absmax > out)                                                                         \
 8001352:	45e6      	cmp	lr, ip
    {                                                                                                       \
      /* Update the extrema value and it's index */                                                         \
      out = cur_absmax;                                                                                       \
 8001354:	bfc8      	it	gt
 8001356:	46f4      	movgt	ip, lr
      outIndex = index + 1U;                                                                                \
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8001358:	f930 ec06 	ldrsh.w	lr, [r0, #-6]
      outIndex = index + 1U;                                                                                \
 800135c:	bfc8      	it	gt
 800135e:	1c65      	addgt	r5, r4, #1
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 8001360:	f1be 0f00 	cmp.w	lr, #0
 8001364:	dc03      	bgt.n	800136e <arm_absmax_q15+0x5e>
 8001366:	fad6 fe1e 	qsub16	lr, r6, lr
 800136a:	fa0f fe8e 	sxth.w	lr, lr
    if (cur_absmax > out)                                                                         \
 800136e:	45f4      	cmp	ip, lr
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 8001370:	bfb8      	it	lt
 8001372:	46f4      	movlt	ip, lr
      outIndex = index + 2U;                                                                                \
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8001374:	f930 ec04 	ldrsh.w	lr, [r0, #-4]
      outIndex = index + 2U;                                                                                \
 8001378:	bfb8      	it	lt
 800137a:	1ca5      	addlt	r5, r4, #2
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                \
 800137c:	f1be 0f00 	cmp.w	lr, #0
 8001380:	dc03      	bgt.n	800138a <arm_absmax_q15+0x7a>
 8001382:	fad6 fe1e 	qsub16	lr, r6, lr
 8001386:	fa0f fe8e 	sxth.w	lr, lr
    if (cur_absmax > out)                                                                          \
 800138a:	45f4      	cmp	ip, lr
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
      outIndex = index + 3U;                                                                                \
 800138c:	bfa8      	it	ge
 800138e:	46e6      	movge	lr, ip
    }                                                                                                       \
                                                                                                            \
    cur_absmax = *pSrc++;                                                                                     \
 8001390:	f930 cc02 	ldrsh.w	ip, [r0, #-2]
      outIndex = index + 3U;                                                                                \
 8001394:	bfb8      	it	lt
 8001396:	1ce5      	addlt	r5, r4, #3
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8001398:	f1bc 0f00 	cmp.w	ip, #0
 800139c:	dc03      	bgt.n	80013a6 <arm_absmax_q15+0x96>
 800139e:	fad6 fc1c 	qsub16	ip, r6, ip
 80013a2:	fa0f fc8c 	sxth.w	ip, ip
    if (cur_absmax > out)                                                                          \
 80013a6:	45e6      	cmp	lr, ip
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
      outIndex = index + 4U;                                                                                \
 80013a8:	f104 0404 	add.w	r4, r4, #4
    if (cur_absmax > out)                                                                          \
 80013ac:	bfac      	ite	ge
 80013ae:	46f4      	movge	ip, lr
      outIndex = index + 4U;                                                                                \
 80013b0:	4625      	movlt	r5, r4
  while (blkCnt > 0U)                                                                                       \
 80013b2:	42bc      	cmp	r4, r7
 80013b4:	f100 0008 	add.w	r0, r0, #8
 80013b8:	d1c2      	bne.n	8001340 <arm_absmax_q15+0x30>
 80013ba:	eb08 08ca 	add.w	r8, r8, sl, lsl #3
                                                                                                            \
  /* Loop unrolling: Compute remaining outputs */                                                           \
  blkCnt = (blockSize - 1U) % 4U;                                                                           \
                                                                                                            \
                                                                                                            \
  while (blkCnt > 0U)                                                                                       \
 80013be:	f019 0403 	ands.w	r4, r9, #3
 80013c2:	d01f      	beq.n	8001404 <arm_absmax_q15+0xf4>
  {                                                                                                         \
    cur_absmax = *pSrc++;                                                                                     \
 80013c4:	f9b8 0000 	ldrsh.w	r0, [r8]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 80013c8:	2800      	cmp	r0, #0
 80013ca:	dd20      	ble.n	800140e <arm_absmax_q15+0xfe>
    if (cur_absmax > out)                                                                         \
 80013cc:	4560      	cmp	r0, ip
    {                                                                                                       \
      out = cur_absmax;                                                                                       \
 80013ce:	bfc4      	itt	gt
 80013d0:	4684      	movgt	ip, r0
      outIndex = blockSize - blkCnt;                                                                        \
 80013d2:	1b0d      	subgt	r5, r1, r4
  while (blkCnt > 0U)                                                                                       \
 80013d4:	1e66      	subs	r6, r4, #1
 80013d6:	d015      	beq.n	8001404 <arm_absmax_q15+0xf4>
    cur_absmax = *pSrc++;                                                                                     \
 80013d8:	f9b8 0002 	ldrsh.w	r0, [r8, #2]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 80013dc:	2800      	cmp	r0, #0
 80013de:	dd1b      	ble.n	8001418 <arm_absmax_q15+0x108>
    if (cur_absmax > out)                                                                         \
 80013e0:	4584      	cmp	ip, r0
      outIndex = blockSize - blkCnt;                                                                        \
 80013e2:	bfbc      	itt	lt
 80013e4:	1b8d      	sublt	r5, r1, r6
      out = cur_absmax;                                                                                       \
 80013e6:	4684      	movlt	ip, r0
  while (blkCnt > 0U)                                                                                       \
 80013e8:	2c02      	cmp	r4, #2
 80013ea:	d00b      	beq.n	8001404 <arm_absmax_q15+0xf4>
    cur_absmax = *pSrc++;                                                                                     \
 80013ec:	f9b8 1004 	ldrsh.w	r1, [r8, #4]
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 80013f0:	2900      	cmp	r1, #0
 80013f2:	dc03      	bgt.n	80013fc <arm_absmax_q15+0xec>
 80013f4:	2000      	movs	r0, #0
 80013f6:	fad0 f111 	qsub16	r1, r0, r1
 80013fa:	b209      	sxth	r1, r1
      out = cur_absmax;                                                                                       \
 80013fc:	4561      	cmp	r1, ip
 80013fe:	bfc4      	itt	gt
 8001400:	464d      	movgt	r5, r9
 8001402:	468c      	movgt	ip, r1
    /* Decrement loop counter */                                                                            \
    blkCnt--;                                                                                               \
  }                                                                                                         \
                                                                                                            \
  /* Store the extrema value and it's index into destination pointers */                                    \
  *pResult = out;                                                                                           \
 8001404:	f8a2 c000 	strh.w	ip, [r2]
  *pIndex = outIndex;
 8001408:	601d      	str	r5, [r3, #0]
}
 800140a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800140e:	2600      	movs	r6, #0
 8001410:	fad6 f010 	qsub16	r0, r6, r0
    cur_absmax = (cur_absmax > 0) ? cur_absmax : (q15_t)__QSUB16(0, cur_absmax);                                                                 \
 8001414:	b200      	sxth	r0, r0
 8001416:	e7d9      	b.n	80013cc <arm_absmax_q15+0xbc>
 8001418:	2700      	movs	r7, #0
 800141a:	fad7 f010 	qsub16	r0, r7, r0
 800141e:	b200      	sxth	r0, r0
    if (cur_absmax > out)                                                                         \
 8001420:	4584      	cmp	ip, r0
      outIndex = blockSize - blkCnt;                                                                        \
 8001422:	bfbc      	itt	lt
 8001424:	1b8d      	sublt	r5, r1, r6
      out = cur_absmax;                                                                                       \
 8001426:	4684      	movlt	ip, r0
  while (blkCnt > 0U)                                                                                       \
 8001428:	2c02      	cmp	r4, #2
 800142a:	d1df      	bne.n	80013ec <arm_absmax_q15+0xdc>
 800142c:	e7ea      	b.n	8001404 <arm_absmax_q15+0xf4>
  outIndex = 0U;                                                                                            \
 800142e:	4655      	mov	r5, sl
 8001430:	e7c5      	b.n	80013be <arm_absmax_q15+0xae>
 8001432:	bf00      	nop

08001434 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001434:	b500      	push	{lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <MX_DMA_Init+0x2c>)
 8001438:	6c98      	ldr	r0, [r3, #72]	@ 0x48

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800143a:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 800143c:	4308      	orrs	r0, r1
{
 800143e:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001440:	6498      	str	r0, [r3, #72]	@ 0x48
 8001442:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001444:	400b      	ands	r3, r1
 8001446:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8001448:	2200      	movs	r2, #0
 800144a:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800144c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800144e:	f002 fc67 	bl	8003d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001452:	200b      	movs	r0, #11

}
 8001454:	b003      	add	sp, #12
 8001456:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800145a:	f002 bc9d 	b.w	8003d98 <HAL_NVIC_EnableIRQ>
 800145e:	bf00      	nop
 8001460:	40021000 	.word	0x40021000

08001464 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8001464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	2400      	movs	r4, #0
{
 800146a:	b08f      	sub	sp, #60	@ 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8001470:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001474:	4b99      	ldr	r3, [pc, #612]	@ (80016dc <MX_GPIO_Init+0x278>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001476:	940c      	str	r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001478:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  HAL_PWREx_EnableVddIO2();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 800147a:	4f99      	ldr	r7, [pc, #612]	@ (80016e0 <MX_GPIO_Init+0x27c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_SET);
 800147c:	f8df a270 	ldr.w	sl, [pc, #624]	@ 80016f0 <MX_GPIO_Init+0x28c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADIO_EEPROM_CSN_GPIO_Port, RADIO_EEPROM_CSN_Pin, GPIO_PIN_SET);
 8001480:	f8df 9270 	ldr.w	r9, [pc, #624]	@ 80016f4 <MX_GPIO_Init+0x290>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001484:	f8df 8270 	ldr.w	r8, [pc, #624]	@ 80016f8 <MX_GPIO_Init+0x294>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001488:	4e96      	ldr	r6, [pc, #600]	@ (80016e4 <MX_GPIO_Init+0x280>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800148a:	f042 0210 	orr.w	r2, r2, #16
 800148e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001490:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001492:	f002 0210 	and.w	r2, r2, #16
 8001496:	9200      	str	r2, [sp, #0]
 8001498:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800149c:	f042 0204 	orr.w	r2, r2, #4
 80014a0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014a4:	f002 0204 	and.w	r2, r2, #4
 80014a8:	9201      	str	r2, [sp, #4]
 80014aa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014ae:	f042 0220 	orr.w	r2, r2, #32
 80014b2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014b6:	f002 0220 	and.w	r2, r2, #32
 80014ba:	9202      	str	r2, [sp, #8]
 80014bc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014c4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014c8:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80014cc:	9203      	str	r2, [sp, #12]
 80014ce:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014d2:	f042 0201 	orr.w	r2, r2, #1
 80014d6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014da:	f002 0201 	and.w	r2, r2, #1
 80014de:	9204      	str	r2, [sp, #16]
 80014e0:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014e4:	f042 0202 	orr.w	r2, r2, #2
 80014e8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014ec:	f002 0202 	and.w	r2, r2, #2
 80014f0:	9205      	str	r2, [sp, #20]
 80014f2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80014fa:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014fe:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001502:	9206      	str	r2, [sp, #24]
 8001504:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001506:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001508:	f042 0208 	orr.w	r2, r2, #8
 800150c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800150e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001510:	f003 0308 	and.w	r3, r3, #8
 8001514:	9307      	str	r3, [sp, #28]
 8001516:	9b07      	ldr	r3, [sp, #28]
  HAL_PWREx_EnableVddIO2();
 8001518:	f003 f998 	bl	800484c <HAL_PWREx_EnableVddIO2>
  HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 800151c:	2201      	movs	r2, #1
 800151e:	4611      	mov	r1, r2
 8001520:	4638      	mov	r0, r7
 8001522:	f003 f939 	bl	8004798 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_SET);
 8001526:	4650      	mov	r0, sl
 8001528:	2201      	movs	r2, #1
 800152a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800152e:	f003 f933 	bl	8004798 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_EEPROM_CSN_GPIO_Port, RADIO_EEPROM_CSN_Pin, GPIO_PIN_SET);
 8001532:	4648      	mov	r0, r9
 8001534:	2201      	movs	r2, #1
 8001536:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800153a:	f003 f92d 	bl	8004798 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800153e:	4622      	mov	r2, r4
 8001540:	4640      	mov	r0, r8
 8001542:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 8001546:	f003 f927 	bl	8004798 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800154a:	4622      	mov	r2, r4
 800154c:	4630      	mov	r0, r6
 800154e:	2140      	movs	r1, #64	@ 0x40
 8001550:	f003 f922 	bl	8004798 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001554:	a908      	add	r1, sp, #32
 8001556:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8001558:	f24d 72ff 	movw	r2, #55295	@ 0xd7ff
 800155c:	2303      	movs	r3, #3
 800155e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001564:	f002 ff3c 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001568:	a908      	add	r1, sp, #32
 800156a:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = B1_Pin;
 800156c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001570:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001574:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800157a:	f002 ff31 	bl	80043e0 <HAL_GPIO_Init>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800157e:	a908      	add	r1, sp, #32
 8001580:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001582:	f64d 72ff 	movw	r2, #57343	@ 0xdfff
 8001586:	2303      	movs	r3, #3
 8001588:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800158e:	f002 ff27 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001592:	2209      	movs	r2, #9
 8001594:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001596:	a908      	add	r1, sp, #32
 8001598:	4853      	ldr	r0, [pc, #332]	@ (80016e8 <MX_GPIO_Init+0x284>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	940a      	str	r4, [sp, #40]	@ 0x28

  /*Configure GPIO pin : RADIO_S2LP_CSN_Pin */
  GPIO_InitStruct.Pin = RADIO_S2LP_CSN_Pin;
 800159c:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800159e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	f04f 0b03 	mov.w	fp, #3
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015a6:	f002 ff1b 	bl	80043e0 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_S2LP_CSN_GPIO_Port, &GPIO_InitStruct);
 80015aa:	a908      	add	r1, sp, #32
 80015ac:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	e9cd 5508 	strd	r5, r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b4:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_S2LP_CSN_GPIO_Port, &GPIO_InitStruct);
 80015b8:	f002 ff12 	bl	80043e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015bc:	4638      	mov	r0, r7
 80015be:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80015c0:	f641 72fe 	movw	r2, #8190	@ 0x1ffe
 80015c4:	2303      	movs	r3, #3
 80015c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015cc:	f002 ff08 	bl	80043e0 <HAL_GPIO_Init>
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d0:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 80015d2:	f248 0236 	movw	r2, #32822	@ 0x8036
 80015d6:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 80015dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f002 fefd 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RADIO_INT_Pin */
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 80015e6:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 80015e8:	2208      	movs	r2, #8
 80015ea:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = RADIO_INT_Pin;
 80015f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(RADIO_INT_GPIO_Port, &GPIO_InitStruct);
 80015f8:	f002 fef2 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB15
                           PB4 PB5 PB6 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80015fc:	f64b 7277 	movw	r2, #49015	@ 0xbf77
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001600:	a908      	add	r1, sp, #32
 8001602:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001604:	2303      	movs	r3, #3
 8001606:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	f002 fee8 	bl	80043e0 <HAL_GPIO_Init>
  /*Configure GPIO pin : RADIO_SDN_Pin */
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 8001610:	4650      	mov	r0, sl
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
 8001612:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 8001616:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RADIO_SDN_Pin;
 8001618:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_SDN_GPIO_Port, &GPIO_InitStruct);
 8001620:	f002 fede 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001624:	f64f 621f 	movw	r2, #65055	@ 0xfe1f
                          |GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001628:	a908      	add	r1, sp, #32
 800162a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800162c:	2303      	movs	r3, #3
 800162e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001634:	f002 fed4 	bl	80043e0 <HAL_GPIO_Init>
  /*Configure GPIO pin : RADIO_EEPROM_CSN_Pin */
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 8001638:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
 800163a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 800163e:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = RADIO_EEPROM_CSN_Pin;
 8001640:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_EEPROM_CSN_GPIO_Port, &GPIO_InitStruct);
 8001648:	f002 feca 	bl	80043e0 <HAL_GPIO_Init>
  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164c:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800164e:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001652:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001654:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	e9cd 5409 	strd	r5, r4, [sp, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165c:	f002 fec0 	bl	80043e0 <HAL_GPIO_Init>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001660:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001662:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001666:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001668:	4820      	ldr	r0, [pc, #128]	@ (80016ec <MX_GPIO_Init+0x288>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	940a      	str	r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800166c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001670:	f002 feb6 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001674:	2220      	movs	r2, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001676:	a908      	add	r1, sp, #32
 8001678:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800167a:	2300      	movs	r3, #0
 800167c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	940a      	str	r4, [sp, #40]	@ 0x28
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001682:	f002 fead 	bl	80043e0 <HAL_GPIO_Init>
  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001686:	a908      	add	r1, sp, #32
 8001688:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800168a:	2340      	movs	r3, #64	@ 0x40
 800168c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001692:	9509      	str	r5, [sp, #36]	@ 0x24
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001694:	f002 fea4 	bl	80043e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001698:	f44f 52e8 	mov.w	r2, #7424	@ 0x1d00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016a4:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016aa:	930c      	str	r3, [sp, #48]	@ 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ac:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f002 fe96 	bl	80043e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80016b4:	4622      	mov	r2, r4
 80016b6:	4621      	mov	r1, r4
 80016b8:	2009      	movs	r0, #9
 80016ba:	f002 fb31 	bl	8003d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80016be:	2009      	movs	r0, #9
 80016c0:	f002 fb6a 	bl	8003d98 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016c4:	4622      	mov	r2, r4
 80016c6:	4621      	mov	r1, r4
 80016c8:	2028      	movs	r0, #40	@ 0x28
 80016ca:	f002 fb29 	bl	8003d20 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016ce:	2028      	movs	r0, #40	@ 0x28
 80016d0:	f002 fb62 	bl	8003d98 <HAL_NVIC_EnableIRQ>

}
 80016d4:	b00f      	add	sp, #60	@ 0x3c
 80016d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	48000800 	.word	0x48000800
 80016e4:	48001800 	.word	0x48001800
 80016e8:	48001c00 	.word	0x48001c00
 80016ec:	48000c00 	.word	0x48000c00
 80016f0:	48001400 	.word	0x48001400
 80016f4:	48001000 	.word	0x48001000
 80016f8:	48000400 	.word	0x48000400

080016fc <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if (GPIO_Pin == B1_Pin) {
 80016fc:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8001700:	d002      	beq.n	8001708 <HAL_GPIO_EXTI_Callback+0xc>
		btn_press = 1;
	}
	else if (GPIO_Pin == RADIO_INT_Pin)
 8001702:	2808      	cmp	r0, #8
 8001704:	d004      	beq.n	8001710 <HAL_GPIO_EXTI_Callback+0x14>
		S2LP_IRQ_Handler();
}
 8001706:	4770      	bx	lr
		btn_press = 1;
 8001708:	4b02      	ldr	r3, [pc, #8]	@ (8001714 <HAL_GPIO_EXTI_Callback+0x18>)
 800170a:	2201      	movs	r2, #1
 800170c:	701a      	strb	r2, [r3, #0]
 800170e:	4770      	bx	lr
		S2LP_IRQ_Handler();
 8001710:	f001 b9ec 	b.w	8002aec <S2LP_IRQ_Handler>
 8001714:	20003a38 	.word	0x20003a38

08001718 <run>:
void run(void) {
#if (AUTORUN == 0)
	btn_press = 0;
#elif (AUTORUN == 1)
	DEBUG_PRINT("Autorun mode engaged.\r\n");
	btn_press = 1;
 8001718:	4c16      	ldr	r4, [pc, #88]	@ (8001774 <run+0x5c>)
#error "Wrong value for AUTORUN"
#endif

	while (1) {
	  while (!btn_press) {
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800171a:	4e17      	ldr	r6, [pc, #92]	@ (8001778 <run+0x60>)
	btn_press = 1;
 800171c:	2301      	movs	r3, #1
void run(void) {
 800171e:	b580      	push	{r7, lr}
	btn_press = 1;
 8001720:	7023      	strb	r3, [r4, #0]
		  HAL_Delay(200);
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
		  HAL_Delay(200);
	  }
	  btn_press = 0;
 8001722:	2700      	movs	r7, #0
	  while (!btn_press) {
 8001724:	7823      	ldrb	r3, [r4, #0]
 8001726:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 800172a:	b9a3      	cbnz	r3, 8001756 <run+0x3e>
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800172c:	2201      	movs	r2, #1
 800172e:	2180      	movs	r1, #128	@ 0x80
 8001730:	4630      	mov	r0, r6
 8001732:	f003 f831 	bl	8004798 <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 8001736:	20c8      	movs	r0, #200	@ 0xc8
 8001738:	f001 fc8e 	bl	8003058 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 800173c:	462a      	mov	r2, r5
 800173e:	2180      	movs	r1, #128	@ 0x80
 8001740:	4630      	mov	r0, r6
 8001742:	f003 f829 	bl	8004798 <HAL_GPIO_WritePin>
		  HAL_Delay(200);
 8001746:	20c8      	movs	r0, #200	@ 0xc8
 8001748:	f001 fc86 	bl	8003058 <HAL_Delay>
	  while (!btn_press) {
 800174c:	7823      	ldrb	r3, [r4, #0]
 800174e:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0ea      	beq.n	800172c <run+0x14>
	  btn_press = 0;
 8001756:	7027      	strb	r7, [r4, #0]
#if (EVENT_DETECTION == 1)
#if (EVENT_DETECTION_MODE == HARD_THRESHOLD)
	  DEBUG_PRINT("Waiting for events. Event detection mode is set to Hard threshold. Threshold is set at %" PRIu16 ". Metric checked is %" PRIu16 " (0: Mean, 1: Max, 2: Power)\r\n", THRESHOLD, HT_METRIC);
#endif
#endif
	  while (!btn_press) {
 8001758:	7823      	ldrb	r3, [r4, #0]
 800175a:	b943      	cbnz	r3, 800176e <run+0x56>
	if (StartADCAcq(N_MELVECS) != HAL_OK) {
 800175c:	2014      	movs	r0, #20
 800175e:	f7ff fcbd 	bl	80010dc <StartADCAcq>
	while (!IsADCFinished()) {
 8001762:	f7ff fcd3 	bl	800110c <IsADCFinished>
 8001766:	2800      	cmp	r0, #0
 8001768:	d1f6      	bne.n	8001758 <run+0x40>
		__WFI();
 800176a:	bf30      	wfi
 800176c:	e7f9      	b.n	8001762 <run+0x4a>
		  acquire_and_send_packet();
	  }
	  btn_press = 0;
 800176e:	7027      	strb	r7, [r4, #0]
	  while (!btn_press) {
 8001770:	e7d8      	b.n	8001724 <run+0xc>
 8001772:	bf00      	nop
 8001774:	20003a38 	.word	0x20003a38
 8001778:	48000400 	.word	0x48000400

0800177c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
  __ASM volatile ("cpsid i" : : : "memory");
 8001780:	b672      	cpsid	i
 8001782:	4f18      	ldr	r7, [pc, #96]	@ (80017e4 <Error_Handler+0x68>)
  __disable_irq();
  DEBUG_PRINT("Entering error Handler\r\n");
  while (1)
  {
	  // Blink LED3 (red)
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 8001784:	4e18      	ldr	r6, [pc, #96]	@ (80017e8 <Error_Handler+0x6c>)
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8001786:	4d19      	ldr	r5, [pc, #100]	@ (80017ec <Error_Handler+0x70>)
 8001788:	2400      	movs	r4, #0
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
 800178a:	2201      	movs	r2, #1
 800178c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001790:	4630      	mov	r0, r6
 8001792:	f003 f801 	bl	8004798 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	9400      	str	r4, [sp, #0]
 800179a:	9900      	ldr	r1, [sp, #0]
 800179c:	fba5 2303 	umull	r2, r3, r5, r3
 80017a0:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
 80017a4:	ea4f 1293 	mov.w	r2, r3, lsr #6
 80017a8:	d205      	bcs.n	80017b6 <Error_Handler+0x3a>
 80017aa:	9b00      	ldr	r3, [sp, #0]
 80017ac:	3301      	adds	r3, #1
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	9b00      	ldr	r3, [sp, #0]
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d3f9      	bcc.n	80017aa <Error_Handler+0x2e>
	  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_RESET);
 80017b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017ba:	2200      	movs	r2, #0
 80017bc:	4630      	mov	r0, r6
 80017be:	f002 ffeb 	bl	8004798 <HAL_GPIO_WritePin>
	  for (volatile int i=0; i < SystemCoreClock/200; i++);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	9401      	str	r4, [sp, #4]
 80017c6:	9a01      	ldr	r2, [sp, #4]
 80017c8:	fba5 1303 	umull	r1, r3, r5, r3
 80017cc:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
 80017d0:	ea4f 1193 	mov.w	r1, r3, lsr #6
 80017d4:	d2d9      	bcs.n	800178a <Error_Handler+0xe>
 80017d6:	9b01      	ldr	r3, [sp, #4]
 80017d8:	3301      	adds	r3, #1
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	9b01      	ldr	r3, [sp, #4]
 80017de:	428b      	cmp	r3, r1
 80017e0:	d3f9      	bcc.n	80017d6 <Error_Handler+0x5a>
 80017e2:	e7d2      	b.n	800178a <Error_Handler+0xe>
 80017e4:	20002c00 	.word	0x20002c00
 80017e8:	48000400 	.word	0x48000400
 80017ec:	51eb851f 	.word	0x51eb851f

080017f0 <SystemClock_Config>:
{
 80017f0:	b510      	push	{r4, lr}
 80017f2:	b098      	sub	sp, #96	@ 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f4:	2244      	movs	r2, #68	@ 0x44
 80017f6:	2100      	movs	r1, #0
 80017f8:	a806      	add	r0, sp, #24
 80017fa:	f006 ffb0 	bl	800875e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017fe:	2300      	movs	r3, #0
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001800:	f44f 7000 	mov.w	r0, #512	@ 0x200
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001804:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001808:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800180c:	9305      	str	r3, [sp, #20]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800180e:	f002 ffdd 	bl	80047cc <HAL_PWREx_ControlVoltageScaling>
 8001812:	bb38      	cbnz	r0, 8001864 <SystemClock_Config+0x74>
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001814:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8001868 <SystemClock_Config+0x78>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001818:	2210      	movs	r2, #16
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800181a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800181e:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8001870 <SystemClock_Config+0x80>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001822:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001824:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001826:	2202      	movs	r2, #2
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001828:	2160      	movs	r1, #96	@ 0x60
  RCC_OscInitStruct.PLL.PLLM = 1;
 800182a:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800182e:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8001830:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL.PLLN = 18;
 8001832:	2212      	movs	r2, #18
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001834:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001836:	910e      	str	r1, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001838:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 800183c:	9213      	str	r2, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 800183e:	9316      	str	r3, [sp, #88]	@ 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001840:	f003 f8a2 	bl	8004988 <HAL_RCC_OscConfig>
 8001844:	4601      	mov	r1, r0
 8001846:	b968      	cbnz	r0, 8001864 <SystemClock_Config+0x74>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001848:	240f      	movs	r4, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800184a:	2203      	movs	r2, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 800184c:	23a0      	movs	r3, #160	@ 0xa0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800184e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001850:	e9cd 4201 	strd	r4, r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001854:	e9cd 3103 	strd	r3, r1, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001858:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800185a:	f003 fbab 	bl	8004fb4 <HAL_RCC_ClockConfig>
 800185e:	b908      	cbnz	r0, 8001864 <SystemClock_Config+0x74>
}
 8001860:	b018      	add	sp, #96	@ 0x60
 8001862:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001864:	f7ff ff8a 	bl	800177c <Error_Handler>
 8001868:	00000001 	.word	0x00000001
 800186c:	00000000 	.word	0x00000000
 8001870:	00000002 	.word	0x00000002
 8001874:	00000002 	.word	0x00000002

08001878 <main>:
{
 8001878:	b508      	push	{r3, lr}
  HAL_Init();
 800187a:	f001 fbcb 	bl	8003014 <HAL_Init>
  SystemClock_Config();
 800187e:	f7ff ffb7 	bl	80017f0 <SystemClock_Config>
  MX_GPIO_Init();
 8001882:	f7ff fdef 	bl	8001464 <MX_GPIO_Init>
  MX_DMA_Init();
 8001886:	f7ff fdd5 	bl	8001434 <MX_DMA_Init>
  MX_SPI1_Init();
 800188a:	f001 fa23 	bl	8002cd4 <MX_SPI1_Init>
  MX_TIM3_Init();
 800188e:	f001 fb13 	bl	8002eb8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001892:	f7ff fb2f 	bl	8000ef4 <MX_ADC1_Init>
  MX_AES_Init();
 8001896:	f7ff fcfb 	bl	8001290 <MX_AES_Init>
  RetargetInit(&hlpuart1);
 800189a:	480a      	ldr	r0, [pc, #40]	@ (80018c4 <main+0x4c>)
 800189c:	f000 f8c0 	bl	8001a20 <RetargetInit>
  HAL_StatusTypeDef err = S2LP_Init(&hspi1);
 80018a0:	4809      	ldr	r0, [pc, #36]	@ (80018c8 <main+0x50>)
 80018a2:	f001 f88d 	bl	80029c0 <S2LP_Init>
  if (err)  {
 80018a6:	b920      	cbnz	r0, 80018b2 <main+0x3a>
  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK) {
 80018a8:	4808      	ldr	r0, [pc, #32]	@ (80018cc <main+0x54>)
 80018aa:	217f      	movs	r1, #127	@ 0x7f
 80018ac:	f002 f96a 	bl	8003b84 <HAL_ADCEx_Calibration_Start>
 80018b0:	b108      	cbz	r0, 80018b6 <main+0x3e>
	  Error_Handler();
 80018b2:	f7ff ff63 	bl	800177c <Error_Handler>
  if (HAL_TIM_Base_Start(&htim3) != HAL_OK) {
 80018b6:	4806      	ldr	r0, [pc, #24]	@ (80018d0 <main+0x58>)
 80018b8:	f004 fb82 	bl	8005fc0 <HAL_TIM_Base_Start>
 80018bc:	2800      	cmp	r0, #0
 80018be:	d1f8      	bne.n	80018b2 <main+0x3a>
  run();
 80018c0:	f7ff ff2a 	bl	8001718 <run>
 80018c4:	20004900 	.word	0x20004900
 80018c8:	20004848 	.word	0x20004848
 80018cc:	20002e3c 	.word	0x20002e3c
 80018d0:	200048b0 	.word	0x200048b0

080018d4 <tag_cbc_mac>:
                            0x00,0x00,0x00,0x00,
							0x00,0x00,0x00,0x00,
							0x00,0x00,0x00,0x00,
							0x00,0x00,0x00,0x00};

void tag_cbc_mac(uint8_t *tag, const uint8_t *msg, size_t msg_len) {
 80018d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018d8:	b095      	sub	sp, #84	@ 0x54
	// Parse msg into blocks of 16 bytes
	size_t num_blocks = (msg_len + 15) / 16;
	uint8_t block[16];

	// Initialize state to 0
	memset(state, 0, 16);
 80018da:	ad08      	add	r5, sp, #32
	size_t num_blocks = (msg_len + 15) / 16;
 80018dc:	f102 0e0f 	add.w	lr, r2, #15
	memset(state, 0, 16);
 80018e0:	2400      	movs	r4, #0

	for (i = 0; i < num_blocks; i++) {
 80018e2:	ea5f 1e1e 	movs.w	lr, lr, lsr #4
	memset(state, 0, 16);
 80018e6:	9408      	str	r4, [sp, #32]
void tag_cbc_mac(uint8_t *tag, const uint8_t *msg, size_t msg_len) {
 80018e8:	4684      	mov	ip, r0
	memset(state, 0, 16);
 80018ea:	e9c5 4401 	strd	r4, r4, [r5, #4]
 80018ee:	60ec      	str	r4, [r5, #12]
	for (i = 0; i < num_blocks; i++) {
 80018f0:	d05c      	beq.n	80019ac <tag_cbc_mac+0xd8>
		// Copy the current block into the block buffer
		size_t block_len = (i == num_blocks - 1) ? (msg_len % 16) : 16;
 80018f2:	f002 000f 	and.w	r0, r2, #15
 80018f6:	f10e 33ff 	add.w	r3, lr, #4294967295
 80018fa:	9303      	str	r3, [sp, #12]
		memcpy(block, msg + i * 16, block_len);

		// If the last block is not 16 bytes, pad with zeros
		if (block_len < 16) {
			memset(block + block_len, 0, 16 - block_len);
 80018fc:	f1c0 0310 	rsb	r3, r0, #16
 8001900:	4689      	mov	r9, r1
		size_t block_len = (i == num_blocks - 1) ? (msg_len % 16) : 16;
 8001902:	46a0      	mov	r8, r4
 8001904:	4627      	mov	r7, r4
 8001906:	4626      	mov	r6, r4
	for (i = 0; i < num_blocks; i++) {
 8001908:	46a3      	mov	fp, r4
 800190a:	f10d 0a40 	add.w	sl, sp, #64	@ 0x40
			memset(block + block_len, 0, 16 - block_len);
 800190e:	9306      	str	r3, [sp, #24]
 8001910:	f8cd e010 	str.w	lr, [sp, #16]
 8001914:	f8cd c01c 	str.w	ip, [sp, #28]
 8001918:	9005      	str	r0, [sp, #20]
 800191a:	e033      	b.n	8001984 <tag_cbc_mac+0xb0>
		memcpy(block, msg + i * 16, block_len);
 800191c:	f8d9 0000 	ldr.w	r0, [r9]
 8001920:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8001924:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8001928:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800192c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
		}

		// XOR the block with the current state
		for (size_t j = 0; j < 16; j++) {
			state[j] ^= block[j];
 8001930:	e9dd 020d 	ldrd	r0, r2, [sp, #52]	@ 0x34
 8001934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8001936:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8001938:	4078      	eors	r0, r7
 800193a:	4062      	eors	r2, r4
 800193c:	ea88 0303 	eor.w	r3, r8, r3
 8001940:	4071      	eors	r1, r6
 8001942:	e9cd 1008 	strd	r1, r0, [sp, #32]
 8001946:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
		}
		start_cycle_count();
 800194a:	f001 fb0f 	bl	8002f6c <start_cycle_count>
		// Encrypt the state with AES
//		AES128_encrypt(state, AES_Key);
		uint8_t buffer[16];
		memcpy(buffer, state, 16);
 800194e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001952:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}


		HAL_CRYPEx_AES(&hcryp, buffer, 16, state, HAL_MAX_DELAY);
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	2210      	movs	r2, #16
 800195e:	462b      	mov	r3, r5
 8001960:	4651      	mov	r1, sl
 8001962:	4818      	ldr	r0, [pc, #96]	@ (80019c4 <tag_cbc_mac+0xf0>)
 8001964:	f002 fb1a 	bl	8003f9c <HAL_CRYPEx_AES>
		stop_cycle_count("Encrypted");
 8001968:	4817      	ldr	r0, [pc, #92]	@ (80019c8 <tag_cbc_mac+0xf4>)
 800196a:	f001 fb01 	bl	8002f70 <stop_cycle_count>
	for (i = 0; i < num_blocks; i++) {
 800196e:	9b04      	ldr	r3, [sp, #16]
 8001970:	f10b 0b01 	add.w	fp, fp, #1
 8001974:	455b      	cmp	r3, fp
 8001976:	f109 0910 	add.w	r9, r9, #16
 800197a:	d015      	beq.n	80019a8 <tag_cbc_mac+0xd4>
	}

    // Copy the result of CBC-MAC-AES to the tag.
    for (int j=0; j<16; j++) {
        tag[j] = state[j];
 800197c:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 8001980:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	@ 0x28
		size_t block_len = (i == num_blocks - 1) ? (msg_len % 16) : 16;
 8001984:	9b03      	ldr	r3, [sp, #12]
 8001986:	459b      	cmp	fp, r3
		memcpy(block, msg + i * 16, block_len);
 8001988:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
		size_t block_len = (i == num_blocks - 1) ? (msg_len % 16) : 16;
 800198c:	d1c6      	bne.n	800191c <tag_cbc_mac+0x48>
		memcpy(block, msg + i * 16, block_len);
 800198e:	9a05      	ldr	r2, [sp, #20]
 8001990:	4649      	mov	r1, r9
 8001992:	4660      	mov	r0, ip
 8001994:	f006 ff63 	bl	800885e <memcpy>
			memset(block + block_len, 0, 16 - block_len);
 8001998:	9805      	ldr	r0, [sp, #20]
 800199a:	9a06      	ldr	r2, [sp, #24]
 800199c:	ab0c      	add	r3, sp, #48	@ 0x30
 800199e:	2100      	movs	r1, #0
 80019a0:	1818      	adds	r0, r3, r0
 80019a2:	f006 fedc 	bl	800875e <memset>
 80019a6:	e7c3      	b.n	8001930 <tag_cbc_mac+0x5c>
 80019a8:	f8dd c01c 	ldr.w	ip, [sp, #28]
        tag[j] = state[j];
 80019ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ae:	f8cc 0000 	str.w	r0, [ip]
 80019b2:	f8cc 1004 	str.w	r1, [ip, #4]
 80019b6:	f8cc 2008 	str.w	r2, [ip, #8]
 80019ba:	f8cc 300c 	str.w	r3, [ip, #12]
    }
}
 80019be:	b015      	add	sp, #84	@ 0x54
 80019c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019c4:	200039d8 	.word	0x200039d8
 80019c8:	0800a5f4 	.word	0x0800a5f4

080019cc <make_packet>:

// Assumes payload is already in place in the packet
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 80019cc:	b510      	push	{r4, lr}
 80019ce:	460c      	mov	r4, r1
 80019d0:	4696      	mov	lr, r2
    size_t packet_len = payload_len + PACKET_HEADER_LENGTH + PACKET_TAG_LENGTH;
    // Initially, the whole packet header is set to 0s
    memset(packet, 0, PACKET_HEADER_LENGTH);
    // So is the tag
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 80019d2:	f104 0208 	add.w	r2, r4, #8
    memset(packet, 0, PACKET_HEADER_LENGTH);
 80019d6:	f04f 0c00 	mov.w	ip, #0
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 80019da:	f840 c002 	str.w	ip, [r0, r2]
int make_packet(uint8_t *packet, size_t payload_len, uint8_t sender_id, uint32_t serial) {
 80019de:	4601      	mov	r1, r0
	memset(packet + payload_len + PACKET_HEADER_LENGTH, 0, PACKET_TAG_LENGTH);
 80019e0:	4410      	add	r0, r2
 80019e2:	f8c0 c004 	str.w	ip, [r0, #4]
 80019e6:	f8c0 c008 	str.w	ip, [r0, #8]
 80019ea:	f8c0 c00c 	str.w	ip, [r0, #12]
	 *		 	This will be helpful when setting fields that are on multiple bytes.
	*/

	// For the tag field, you have to calculate the tag. The function call below is correct but
	// tag_cbc_mac function, calculating the tag, is not implemented.
	packet[0] = 0x00;
 80019ee:	f881 c000 	strb.w	ip, [r1]
	packet[1] = sender_id;
	packet[2] = (payload_len >> 8) & 0xFF;
 80019f2:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 80019f6:	f881 c002 	strb.w	ip, [r1, #2]
	packet[3] = payload_len & 0xFF;
	packet[4] = (serial >> 24) & 0xFF;
 80019fa:	ea4f 6c13 	mov.w	ip, r3, lsr #24
	packet[5] = (serial >> 16) & 0xFF;
	packet[6] = (serial >> 8)  & 0XFF;
	packet[7] = serial & 0xFF;
 80019fe:	71cb      	strb	r3, [r1, #7]
	packet[4] = (serial >> 24) & 0xFF;
 8001a00:	f881 c004 	strb.w	ip, [r1, #4]
	packet[5] = (serial >> 16) & 0xFF;
 8001a04:	ea4f 4c13 	mov.w	ip, r3, lsr #16
	packet[6] = (serial >> 8)  & 0XFF;
 8001a08:	0a1b      	lsrs	r3, r3, #8
	packet[1] = sender_id;
 8001a0a:	f881 e001 	strb.w	lr, [r1, #1]
	packet[3] = payload_len & 0xFF;
 8001a0e:	70cc      	strb	r4, [r1, #3]
	packet[5] = (serial >> 16) & 0xFF;
 8001a10:	f881 c005 	strb.w	ip, [r1, #5]
	packet[6] = (serial >> 8)  & 0XFF;
 8001a14:	718b      	strb	r3, [r1, #6]

    tag_cbc_mac(packet + payload_len + PACKET_HEADER_LENGTH, packet, payload_len + PACKET_HEADER_LENGTH);
 8001a16:	f7ff ff5d 	bl	80018d4 <tag_cbc_mac>

    return packet_len;
}
 8001a1a:	f104 0018 	add.w	r0, r4, #24
 8001a1e:	bd10      	pop	{r4, pc}

08001a20 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001a20:	b430      	push	{r4, r5}
  gHuart = huart;

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <RetargetInit+0x1c>)
  gHuart = huart;
 8001a24:	4906      	ldr	r1, [pc, #24]	@ (8001a40 <RetargetInit+0x20>)
  setvbuf(stdout, NULL, _IONBF, 0);
 8001a26:	681d      	ldr	r5, [r3, #0]
void RetargetInit(UART_HandleTypeDef *huart) {
 8001a28:	4604      	mov	r4, r0
  setvbuf(stdout, NULL, _IONBF, 0);
 8001a2a:	2300      	movs	r3, #0
  gHuart = huart;
 8001a2c:	600c      	str	r4, [r1, #0]
  setvbuf(stdout, NULL, _IONBF, 0);
 8001a2e:	68a8      	ldr	r0, [r5, #8]
 8001a30:	2202      	movs	r2, #2
}
 8001a32:	bc30      	pop	{r4, r5}
  setvbuf(stdout, NULL, _IONBF, 0);
 8001a34:	4619      	mov	r1, r3
 8001a36:	f006 bd9b 	b.w	8008570 <setvbuf>
 8001a3a:	bf00      	nop
 8001a3c:	20002c18 	.word	0x20002c18
 8001a40:	20003a3c 	.word	0x20003a3c

08001a44 <_isatty>:

int _isatty(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001a44:	2802      	cmp	r0, #2
 8001a46:	d801      	bhi.n	8001a4c <_isatty+0x8>
    return 1;
 8001a48:	2001      	movs	r0, #1

  errno = EBADF;
  return 0;
}
 8001a4a:	4770      	bx	lr
int _isatty(int fd) {
 8001a4c:	b508      	push	{r3, lr}
  errno = EBADF;
 8001a4e:	f006 fed9 	bl	8008804 <__errno>
 8001a52:	2309      	movs	r3, #9
 8001a54:	6003      	str	r3, [r0, #0]
  return 0;
 8001a56:	2000      	movs	r0, #0
}
 8001a58:	bd08      	pop	{r3, pc}
 8001a5a:	bf00      	nop

08001a5c <_write>:

int _write(int fd, char* ptr, int len) {
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001a5c:	3801      	subs	r0, #1
 8001a5e:	2801      	cmp	r0, #1
int _write(int fd, char* ptr, int len) {
 8001a60:	b510      	push	{r4, lr}
  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001a62:	d80c      	bhi.n	8001a7e <_write+0x22>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001a64:	4614      	mov	r4, r2
 8001a66:	4a09      	ldr	r2, [pc, #36]	@ (8001a8c <_write+0x30>)
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6c:	6810      	ldr	r0, [r2, #0]
 8001a6e:	b2a2      	uxth	r2, r4
 8001a70:	f004 fc92 	bl	8006398 <HAL_UART_Transmit>
    if (hstatus == HAL_OK)
      return len;
 8001a74:	2800      	cmp	r0, #0
 8001a76:	bf0c      	ite	eq
 8001a78:	4620      	moveq	r0, r4
 8001a7a:	2005      	movne	r0, #5
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 8001a7c:	bd10      	pop	{r4, pc}
  errno = EBADF;
 8001a7e:	f006 fec1 	bl	8008804 <__errno>
 8001a82:	2309      	movs	r3, #9
 8001a84:	6003      	str	r3, [r0, #0]
  return -1;
 8001a86:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001a8a:	bd10      	pop	{r4, pc}
 8001a8c:	20003a3c 	.word	0x20003a3c

08001a90 <_close>:

int _close(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001a90:	2802      	cmp	r0, #2
 8001a92:	d801      	bhi.n	8001a98 <_close+0x8>
    return 0;
 8001a94:	2000      	movs	r0, #0

  errno = EBADF;
  return -1;
}
 8001a96:	4770      	bx	lr
int _close(int fd) {
 8001a98:	b508      	push	{r3, lr}
  errno = EBADF;
 8001a9a:	f006 feb3 	bl	8008804 <__errno>
 8001a9e:	2309      	movs	r3, #9
 8001aa0:	6003      	str	r3, [r0, #0]
  return -1;
 8001aa2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001aa6:	bd08      	pop	{r3, pc}

08001aa8 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001aa8:	b508      	push	{r3, lr}
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001aaa:	f006 feab 	bl	8008804 <__errno>
 8001aae:	2309      	movs	r3, #9
 8001ab0:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab6:	bd08      	pop	{r3, pc}

08001ab8 <_read>:

int _read(int fd, char* ptr, int len) {
 8001ab8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001aba:	b958      	cbnz	r0, 8001ad4 <_read+0x1c>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001abc:	4a09      	ldr	r2, [pc, #36]	@ (8001ae4 <_read+0x2c>)
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	6810      	ldr	r0, [r2, #0]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f004 fcf1 	bl	80064ac <HAL_UART_Receive>
    if (hstatus == HAL_OK)
      return 1;
 8001aca:	2800      	cmp	r0, #0
 8001acc:	bf14      	ite	ne
 8001ace:	2005      	movne	r0, #5
 8001ad0:	2001      	moveq	r0, #1
    else
      return EIO;
  }
  errno = EBADF;
  return -1;
}
 8001ad2:	bd08      	pop	{r3, pc}
  errno = EBADF;
 8001ad4:	f006 fe96 	bl	8008804 <__errno>
 8001ad8:	2309      	movs	r3, #9
 8001ada:	6003      	str	r3, [r0, #0]
  return -1;
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001ae0:	bd08      	pop	{r3, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20003a3c 	.word	0x20003a3c

08001ae8 <_fstat>:

int _fstat(int fd, struct stat* st) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001ae8:	2802      	cmp	r0, #2
int _fstat(int fd, struct stat* st) {
 8001aea:	b508      	push	{r3, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001aec:	d804      	bhi.n	8001af8 <_fstat+0x10>
    st->st_mode = S_IFCHR;
 8001aee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001af2:	604b      	str	r3, [r1, #4]
    return 0;
  }

  errno = EBADF;
  return 0;
}
 8001af4:	2000      	movs	r0, #0
 8001af6:	bd08      	pop	{r3, pc}
  errno = EBADF;
 8001af8:	f006 fe84 	bl	8008804 <__errno>
 8001afc:	2309      	movs	r3, #9
 8001afe:	6003      	str	r3, [r0, #0]
}
 8001b00:	2000      	movs	r0, #0
 8001b02:	bd08      	pop	{r3, pc}

08001b04 <S2LP_Command>:
volatile uint8_t underflow = 0;

volatile uint16_t n_chunks_tx = 0;

HAL_StatusTypeDef S2LP_Command(uint8_t cmd, S2LPStatus *status)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af02      	add	r7, sp, #8
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
	uint8_t TxBuf[2] = {0x80, cmd};
 8001b10:	2380      	movs	r3, #128	@ 0x80
 8001b12:	733b      	strb	r3, [r7, #12]
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	737b      	strb	r3, [r7, #13]
 8001b18:	b672      	cpsid	i
}
 8001b1a:	bf00      	nop
	uint8_t RxBuf[2];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2101      	movs	r1, #1
 8001b20:	480f      	ldr	r0, [pc, #60]	@ (8001b60 <S2LP_Command+0x5c>)
 8001b22:	f002 fe39 	bl	8004798 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 2, HAL_MAX_DELAY);
 8001b26:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <S2LP_Command+0x60>)
 8001b28:	6818      	ldr	r0, [r3, #0]
 8001b2a:	f107 0208 	add.w	r2, r7, #8
 8001b2e:	f107 010c 	add.w	r1, r7, #12
 8001b32:	f04f 33ff 	mov.w	r3, #4294967295
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2302      	movs	r3, #2
 8001b3a:	f003 ffbb 	bl	8005ab4 <HAL_SPI_TransmitReceive>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001b42:	2201      	movs	r2, #1
 8001b44:	2101      	movs	r1, #1
 8001b46:	4806      	ldr	r0, [pc, #24]	@ (8001b60 <S2LP_Command+0x5c>)
 8001b48:	f002 fe26 	bl	8004798 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b4c:	b662      	cpsie	i
}
 8001b4e:	bf00      	nop
	__enable_irq();

	memcpy(status, &RxBuf[0], 2);
 8001b50:	893a      	ldrh	r2, [r7, #8]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	801a      	strh	r2, [r3, #0]
	return err;
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	48000800 	.word	0x48000800
 8001b64:	20003a44 	.word	0x20003a44

08001b68 <S2LP_ReadReg>:

HAL_StatusTypeDef S2LP_ReadReg(uint8_t addr, uint8_t *retval, S2LPStatus *status)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af02      	add	r7, sp, #8
 8001b6e:	4603      	mov	r3, r0
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
 8001b74:	73fb      	strb	r3, [r7, #15]
	uint8_t TxBuf[] = {0x01, addr, 0x0};
 8001b76:	2301      	movs	r3, #1
 8001b78:	753b      	strb	r3, [r7, #20]
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	757b      	strb	r3, [r7, #21]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	75bb      	strb	r3, [r7, #22]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b82:	b672      	cpsid	i
}
 8001b84:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2101      	movs	r1, #1
 8001b8a:	4814      	ldr	r0, [pc, #80]	@ (8001bdc <S2LP_ReadReg+0x74>)
 8001b8c:	f002 fe04 	bl	8004798 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 8001b90:	4b13      	ldr	r3, [pc, #76]	@ (8001be0 <S2LP_ReadReg+0x78>)
 8001b92:	6818      	ldr	r0, [r3, #0]
 8001b94:	f107 0210 	add.w	r2, r7, #16
 8001b98:	f107 0114 	add.w	r1, r7, #20
 8001b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	f003 ff86 	bl	8005ab4 <HAL_SPI_TransmitReceive>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001bac:	2201      	movs	r2, #1
 8001bae:	2101      	movs	r1, #1
 8001bb0:	480a      	ldr	r0, [pc, #40]	@ (8001bdc <S2LP_ReadReg+0x74>)
 8001bb2:	f002 fdf1 	bl	8004798 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001bb6:	b662      	cpsie	i
}
 8001bb8:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d002      	beq.n	8001bc6 <S2LP_ReadReg+0x5e>
		memcpy(status, &RxBuf[0], 2);
 8001bc0:	8a3a      	ldrh	r2, [r7, #16]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	801a      	strh	r2, [r3, #0]
	if (retval != NULL)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d002      	beq.n	8001bd2 <S2LP_ReadReg+0x6a>
		*retval = RxBuf[2];
 8001bcc:	7cba      	ldrb	r2, [r7, #18]
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	701a      	strb	r2, [r3, #0]
	return err;
 8001bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	48000800 	.word	0x48000800
 8001be0:	20003a44 	.word	0x20003a44

08001be4 <S2LP_WriteReg>:

HAL_StatusTypeDef S2LP_WriteReg(uint8_t addr, uint8_t val, S2LPStatus *status)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	4603      	mov	r3, r0
 8001bec:	603a      	str	r2, [r7, #0]
 8001bee:	71fb      	strb	r3, [r7, #7]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	71bb      	strb	r3, [r7, #6]
	uint8_t TxBuf[] = {0x00, addr, val};
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	733b      	strb	r3, [r7, #12]
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	737b      	strb	r3, [r7, #13]
 8001bfc:	79bb      	ldrb	r3, [r7, #6]
 8001bfe:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c00:	b672      	cpsid	i
}
 8001c02:	bf00      	nop
	uint8_t RxBuf[3];

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2101      	movs	r1, #1
 8001c08:	4811      	ldr	r0, [pc, #68]	@ (8001c50 <S2LP_WriteReg+0x6c>)
 8001c0a:	f002 fdc5 	bl	8004798 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, 3, HAL_MAX_DELAY);
 8001c0e:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <S2LP_WriteReg+0x70>)
 8001c10:	6818      	ldr	r0, [r3, #0]
 8001c12:	f107 0208 	add.w	r2, r7, #8
 8001c16:	f107 010c 	add.w	r1, r7, #12
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2303      	movs	r3, #3
 8001c22:	f003 ff47 	bl	8005ab4 <HAL_SPI_TransmitReceive>
 8001c26:	4603      	mov	r3, r0
 8001c28:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	4808      	ldr	r0, [pc, #32]	@ (8001c50 <S2LP_WriteReg+0x6c>)
 8001c30:	f002 fdb2 	bl	8004798 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001c34:	b662      	cpsie	i
}
 8001c36:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <S2LP_WriteReg+0x60>
		memcpy(status, &RxBuf[0], 2);
 8001c3e:	893a      	ldrh	r2, [r7, #8]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	801a      	strh	r2, [r3, #0]
	return err;
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	48000800 	.word	0x48000800
 8001c54:	20003a44 	.word	0x20003a44

08001c58 <S2LP_WriteTxFIFO>:

HAL_StatusTypeDef S2LP_WriteTxFIFO(uint8_t *chunk, uint8_t chunk_len, S2LPStatus *status)
{
 8001c58:	b590      	push	{r4, r7, lr}
 8001c5a:	b08d      	sub	sp, #52	@ 0x34
 8001c5c:	af02      	add	r7, sp, #8
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	460b      	mov	r3, r1
 8001c62:	607a      	str	r2, [r7, #4]
 8001c64:	72fb      	strb	r3, [r7, #11]
	uint8_t TxBuf[FIFO_CHUNK_SIZE+2];
	uint8_t RxBuf[FIFO_CHUNK_SIZE+2];
	TxBuf[0] = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	773b      	strb	r3, [r7, #28]
	TxBuf[1] = 0xFF;
 8001c6a:	23ff      	movs	r3, #255	@ 0xff
 8001c6c:	777b      	strb	r3, [r7, #29]
	memcpy((void *)&TxBuf[2], (void *)chunk, chunk_len);
 8001c6e:	7afa      	ldrb	r2, [r7, #11]
 8001c70:	f107 031c 	add.w	r3, r7, #28
 8001c74:	3302      	adds	r3, #2
 8001c76:	68f9      	ldr	r1, [r7, #12]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f006 fdf0 	bl	800885e <memcpy>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c7e:	b672      	cpsid	i
}
 8001c80:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_RESET);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2101      	movs	r1, #1
 8001c86:	4814      	ldr	r0, [pc, #80]	@ (8001cd8 <S2LP_WriteTxFIFO+0x80>)
 8001c88:	f002 fd86 	bl	8004798 <HAL_GPIO_WritePin>
	HAL_StatusTypeDef err = HAL_SPI_TransmitReceive(gSPI, TxBuf, RxBuf, chunk_len+2, HAL_MAX_DELAY);
 8001c8c:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <S2LP_WriteTxFIFO+0x84>)
 8001c8e:	6818      	ldr	r0, [r3, #0]
 8001c90:	7afb      	ldrb	r3, [r7, #11]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	3302      	adds	r3, #2
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	f107 0210 	add.w	r2, r7, #16
 8001c9c:	f107 011c 	add.w	r1, r7, #28
 8001ca0:	f04f 34ff 	mov.w	r4, #4294967295
 8001ca4:	9400      	str	r4, [sp, #0]
 8001ca6:	f003 ff05 	bl	8005ab4 <HAL_SPI_TransmitReceive>
 8001caa:	4603      	mov	r3, r0
 8001cac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	HAL_GPIO_WritePin(RADIO_S2LP_CSN_GPIO_Port, RADIO_S2LP_CSN_Pin, GPIO_PIN_SET);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	4808      	ldr	r0, [pc, #32]	@ (8001cd8 <S2LP_WriteTxFIFO+0x80>)
 8001cb6:	f002 fd6f 	bl	8004798 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 8001cba:	b662      	cpsie	i
}
 8001cbc:	bf00      	nop
	__enable_irq();

	if (status != NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <S2LP_WriteTxFIFO+0x72>
		memcpy(status, &RxBuf[0], 2);
 8001cc4:	8a3a      	ldrh	r2, [r7, #16]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	801a      	strh	r2, [r3, #0]
	return err;
 8001cca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	372c      	adds	r7, #44	@ 0x2c
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd90      	pop	{r4, r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	48000800 	.word	0x48000800
 8001cdc:	20003a44 	.word	0x20003a44

08001ce0 <S2LP_Send>:

HAL_StatusTypeDef S2LP_Send(uint8_t *payload, uint16_t pay_len)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	807b      	strh	r3, [r7, #2]
	S2LPStatus radio_status;
	HAL_StatusTypeDef err;

	// Flush the Tx FIFO
	S2LP_Command(CMD_FLUSHTXFIFO, &radio_status);
 8001cec:	f107 030c 	add.w	r3, r7, #12
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	2072      	movs	r0, #114	@ 0x72
 8001cf4:	f7ff ff06 	bl	8001b04 <S2LP_Command>
	if (radio_status.MC_STATE != MC_STATE_READY) {
 8001cf8:	7b7b      	ldrb	r3, [r7, #13]
 8001cfa:	f023 0301 	bic.w	r3, r3, #1
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <S2LP_Send+0x28>
		DEBUG_PRINT("[S2LP] Error: radio is not ready\r\n");
		return HAL_BUSY;
 8001d04:	2302      	movs	r3, #2
 8001d06:	e0b0      	b.n	8001e6a <S2LP_Send+0x18a>
	}
	// Reset global interrupt variables
	packet_sent = 0;
 8001d08:	4b5a      	ldr	r3, [pc, #360]	@ (8001e74 <S2LP_Send+0x194>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
	underflow = 0;
 8001d0e:	4b5a      	ldr	r3, [pc, #360]	@ (8001e78 <S2LP_Send+0x198>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
	fifo_almost_empty = 0;
 8001d14:	4b59      	ldr	r3, [pc, #356]	@ (8001e7c <S2LP_Send+0x19c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]

	// Set the packet length
	S2LP_WriteReg(PCKTLEN1_ADDR, (uint8_t) (pay_len >> 8), NULL);
 8001d1a:	887b      	ldrh	r3, [r7, #2]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2200      	movs	r2, #0
 8001d24:	4619      	mov	r1, r3
 8001d26:	2031      	movs	r0, #49	@ 0x31
 8001d28:	f7ff ff5c 	bl	8001be4 <S2LP_WriteReg>
	S2LP_WriteReg(PCKTLEN0_ADDR, (uint8_t) (pay_len & 0xFF), NULL);
 8001d2c:	887b      	ldrh	r3, [r7, #2]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2200      	movs	r2, #0
 8001d32:	4619      	mov	r1, r3
 8001d34:	2032      	movs	r0, #50	@ 0x32
 8001d36:	f7ff ff55 	bl	8001be4 <S2LP_WriteReg>

	// Switch to lock Tx state
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 8001d3a:	e00c      	b.n	8001d56 <S2LP_Send+0x76>
		err = S2LP_Command(CMD_LOCKTX, &radio_status);
 8001d3c:	f107 030c 	add.w	r3, r7, #12
 8001d40:	4619      	mov	r1, r3
 8001d42:	2066      	movs	r0, #102	@ 0x66
 8001d44:	f7ff fede 	bl	8001b04 <S2LP_Command>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	73bb      	strb	r3, [r7, #14]
		if (err) {
 8001d4c:	7bbb      	ldrb	r3, [r7, #14]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <S2LP_Send+0x76>
			DEBUG_PRINT("[S2LP] Error: cannot lock on Tx\r\n");
			return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e089      	b.n	8001e6a <S2LP_Send+0x18a>
	while (radio_status.MC_STATE != MC_STATE_LOCKON) {
 8001d56:	7b7b      	ldrb	r3, [r7, #13]
 8001d58:	f023 0301 	bic.w	r3, r3, #1
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b18      	cmp	r3, #24
 8001d60:	d1ec      	bne.n	8001d3c <S2LP_Send+0x5c>
		}
	}

	// Fill Tx FIFO with payload chunks
	uint8_t sending = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	75fb      	strb	r3, [r7, #23]
	uint16_t n_chunks = (pay_len / FIFO_CHUNK_SIZE) + (pay_len % FIFO_CHUNK_SIZE != 0);
 8001d66:	887b      	ldrh	r3, [r7, #2]
 8001d68:	08db      	lsrs	r3, r3, #3
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	887a      	ldrh	r2, [r7, #2]
 8001d6e:	f002 0207 	and.w	r2, r2, #7
 8001d72:	b292      	uxth	r2, r2
 8001d74:	2a00      	cmp	r2, #0
 8001d76:	bf14      	ite	ne
 8001d78:	2201      	movne	r2, #1
 8001d7a:	2200      	moveq	r2, #0
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	4413      	add	r3, r2
 8001d80:	823b      	strh	r3, [r7, #16]

	uint16_t free_chunks = FIFO_SIZE / FIFO_CHUNK_SIZE;
 8001d82:	2310      	movs	r3, #16
 8001d84:	82bb      	strh	r3, [r7, #20]

	for(uint16_t i=0; i < n_chunks; i++) {
 8001d86:	2300      	movs	r3, #0
 8001d88:	827b      	strh	r3, [r7, #18]
 8001d8a:	e059      	b.n	8001e40 <S2LP_Send+0x160>
		if (underflow) {
 8001d8c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e78 <S2LP_Send+0x198>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d028      	beq.n	8001de8 <S2LP_Send+0x108>
			DEBUG_PRINT("[S2LP] Error: Tx FIFO overflow or underflow!\r\n");
			err = S2LP_ReadReg(0, NULL, &radio_status); // fetch radio state
 8001d96:	f107 030c 	add.w	r3, r7, #12
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	2000      	movs	r0, #0
 8001da0:	f7ff fee2 	bl	8001b68 <S2LP_ReadReg>
 8001da4:	4603      	mov	r3, r0
 8001da6:	73bb      	strb	r3, [r7, #14]
			if (!err) {
 8001da8:	7bbb      	ldrb	r3, [r7, #14]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d104      	bne.n	8001db8 <S2LP_Send+0xd8>
				S2LP_PrintStatus(&radio_status);
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 f864 	bl	8001e80 <S2LP_PrintStatus>
			} else {
				DEBUG_PRINT("[S2LP] Error: unable to fetch radio status!\r\n");
			}
			return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e056      	b.n	8001e6a <S2LP_Send+0x18a>
		}

		while (free_chunks == 0) {
			if (!sending) {// if FIFO is full and we are not sending yet ...
 8001dbc:	7dfb      	ldrb	r3, [r7, #23]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d107      	bne.n	8001dd2 <S2LP_Send+0xf2>
				S2LP_Command(CMD_TX, &radio_status); // start the transmission
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	2060      	movs	r0, #96	@ 0x60
 8001dca:	f7ff fe9b 	bl	8001b04 <S2LP_Command>
				sending = 1;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	75fb      	strb	r3, [r7, #23]
			}
//			stop_cycle_count("Radio WFI");
			__WFI();
 8001dd2:	bf30      	wfi
//			start_cycle_count();
			if (fifo_almost_empty) {
 8001dd4:	4b29      	ldr	r3, [pc, #164]	@ (8001e7c <S2LP_Send+0x19c>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d004      	beq.n	8001de8 <S2LP_Send+0x108>
				free_chunks = FIFO_SIZE/FIFO_CHUNK_SIZE - FIFO_EMPTY_THRESH;
 8001dde:	230c      	movs	r3, #12
 8001de0:	82bb      	strh	r3, [r7, #20]
				fifo_almost_empty = 0;
 8001de2:	4b26      	ldr	r3, [pc, #152]	@ (8001e7c <S2LP_Send+0x19c>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
		while (free_chunks == 0) {
 8001de8:	8abb      	ldrh	r3, [r7, #20]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0e6      	beq.n	8001dbc <S2LP_Send+0xdc>
			}
		}

		uint8_t chunk_len = (i == n_chunks-1) ? pay_len-(n_chunks-1)*FIFO_CHUNK_SIZE : FIFO_CHUNK_SIZE;
 8001dee:	8a7a      	ldrh	r2, [r7, #18]
 8001df0:	8a3b      	ldrh	r3, [r7, #16]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d109      	bne.n	8001e0c <S2LP_Send+0x12c>
 8001df8:	887b      	ldrh	r3, [r7, #2]
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	8a3b      	ldrh	r3, [r7, #16]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	e000      	b.n	8001e0e <S2LP_Send+0x12e>
 8001e0c:	2308      	movs	r3, #8
 8001e0e:	73fb      	strb	r3, [r7, #15]
		err = S2LP_WriteTxFIFO(&payload[i*FIFO_CHUNK_SIZE], chunk_len, &radio_status);
 8001e10:	8a7b      	ldrh	r3, [r7, #18]
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	461a      	mov	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	f107 020c 	add.w	r2, r7, #12
 8001e1e:	7bf9      	ldrb	r1, [r7, #15]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff19 	bl	8001c58 <S2LP_WriteTxFIFO>
 8001e26:	4603      	mov	r3, r0
 8001e28:	73bb      	strb	r3, [r7, #14]
		if (err) {
 8001e2a:	7bbb      	ldrb	r3, [r7, #14]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <S2LP_Send+0x154>
			DEBUG_PRINT("[S2LP] Error: cannot fill Tx FIFO\r\n");
			return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e01a      	b.n	8001e6a <S2LP_Send+0x18a>
		}
		free_chunks--;
 8001e34:	8abb      	ldrh	r3, [r7, #20]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i=0; i < n_chunks; i++) {
 8001e3a:	8a7b      	ldrh	r3, [r7, #18]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	827b      	strh	r3, [r7, #18]
 8001e40:	8a7a      	ldrh	r2, [r7, #18]
 8001e42:	8a3b      	ldrh	r3, [r7, #16]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d3a1      	bcc.n	8001d8c <S2LP_Send+0xac>
	}

	// Start transmission (for short payloads)
	if (!sending) {
 8001e48:	7dfb      	ldrb	r3, [r7, #23]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d107      	bne.n	8001e5e <S2LP_Send+0x17e>
		S2LP_Command(CMD_TX, &radio_status);
 8001e4e:	f107 030c 	add.w	r3, r7, #12
 8001e52:	4619      	mov	r1, r3
 8001e54:	2060      	movs	r0, #96	@ 0x60
 8001e56:	f7ff fe55 	bl	8001b04 <S2LP_Command>
	}

	while (!packet_sent) {
 8001e5a:	e000      	b.n	8001e5e <S2LP_Send+0x17e>
//		stop_cycle_count("Radio WFI");
		__WFI(); // wait until packet has been fully transmitted
 8001e5c:	bf30      	wfi
	while (!packet_sent) {
 8001e5e:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <S2LP_Send+0x194>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f9      	beq.n	8001e5c <S2LP_Send+0x17c>
//		start_cycle_count();
	}

	DEBUG_PRINT("[S2LP] Packet transmitted!\r\n");
	return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20003a40 	.word	0x20003a40
 8001e78:	20003a42 	.word	0x20003a42
 8001e7c:	20003a41 	.word	0x20003a41

08001e80 <S2LP_PrintStatus>:

void S2LP_PrintStatus(S2LPStatus *status)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	DEBUG_PRINT("=== S2LP Status ===\r\n");
	DEBUG_PRINT("  MC_STATE: ");
	switch (status->MC_STATE) {
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	785b      	ldrb	r3, [r3, #1]
 8001e8c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b5c      	cmp	r3, #92	@ 0x5c
 8001e94:	d06f      	beq.n	8001f76 <S2LP_PrintStatus+0xf6>
 8001e96:	2b5c      	cmp	r3, #92	@ 0x5c
 8001e98:	dc6f      	bgt.n	8001f7a <S2LP_PrintStatus+0xfa>
 8001e9a:	2b30      	cmp	r3, #48	@ 0x30
 8001e9c:	dc68      	bgt.n	8001f70 <S2LP_PrintStatus+0xf0>
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	db6b      	blt.n	8001f7a <S2LP_PrintStatus+0xfa>
 8001ea2:	2b30      	cmp	r3, #48	@ 0x30
 8001ea4:	d869      	bhi.n	8001f7a <S2LP_PrintStatus+0xfa>
 8001ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8001eac <S2LP_PrintStatus+0x2c>)
 8001ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eac:	08001f7b 	.word	0x08001f7b
 8001eb0:	08001f7b 	.word	0x08001f7b
 8001eb4:	08001f7b 	.word	0x08001f7b
 8001eb8:	08001f7b 	.word	0x08001f7b
 8001ebc:	08001f7b 	.word	0x08001f7b
 8001ec0:	08001f7b 	.word	0x08001f7b
 8001ec4:	08001f7b 	.word	0x08001f7b
 8001ec8:	08001f7b 	.word	0x08001f7b
 8001ecc:	08001f7b 	.word	0x08001f7b
 8001ed0:	08001f7b 	.word	0x08001f7b
 8001ed4:	08001f7b 	.word	0x08001f7b
 8001ed8:	08001f7b 	.word	0x08001f7b
 8001edc:	08001f7b 	.word	0x08001f7b
 8001ee0:	08001f7b 	.word	0x08001f7b
 8001ee4:	08001f7b 	.word	0x08001f7b
 8001ee8:	08001f7b 	.word	0x08001f7b
 8001eec:	08001f7b 	.word	0x08001f7b
 8001ef0:	08001f7b 	.word	0x08001f7b
 8001ef4:	08001f7b 	.word	0x08001f7b
 8001ef8:	08001f7b 	.word	0x08001f7b
 8001efc:	08001f7b 	.word	0x08001f7b
 8001f00:	08001f7b 	.word	0x08001f7b
 8001f04:	08001f7b 	.word	0x08001f7b
 8001f08:	08001f7b 	.word	0x08001f7b
 8001f0c:	08001f7b 	.word	0x08001f7b
 8001f10:	08001f7b 	.word	0x08001f7b
 8001f14:	08001f7b 	.word	0x08001f7b
 8001f18:	08001f7b 	.word	0x08001f7b
 8001f1c:	08001f7b 	.word	0x08001f7b
 8001f20:	08001f7b 	.word	0x08001f7b
 8001f24:	08001f7b 	.word	0x08001f7b
 8001f28:	08001f7b 	.word	0x08001f7b
 8001f2c:	08001f7b 	.word	0x08001f7b
 8001f30:	08001f7b 	.word	0x08001f7b
 8001f34:	08001f7b 	.word	0x08001f7b
 8001f38:	08001f7b 	.word	0x08001f7b
 8001f3c:	08001f7b 	.word	0x08001f7b
 8001f40:	08001f7b 	.word	0x08001f7b
 8001f44:	08001f7b 	.word	0x08001f7b
 8001f48:	08001f7b 	.word	0x08001f7b
 8001f4c:	08001f7b 	.word	0x08001f7b
 8001f50:	08001f7b 	.word	0x08001f7b
 8001f54:	08001f7b 	.word	0x08001f7b
 8001f58:	08001f7b 	.word	0x08001f7b
 8001f5c:	08001f7b 	.word	0x08001f7b
 8001f60:	08001f7b 	.word	0x08001f7b
 8001f64:	08001f7b 	.word	0x08001f7b
 8001f68:	08001f7b 	.word	0x08001f7b
 8001f6c:	08001f7b 	.word	0x08001f7b
 8001f70:	2b50      	cmp	r3, #80	@ 0x50
 8001f72:	d004      	beq.n	8001f7e <S2LP_PrintStatus+0xfe>
		case (MC_STATE_SYNTH_SETUP):
			DEBUG_PRINT("SYNTH_SETUP");
			break;
		default:
			DEBUG_PRINT("UNKNOWN");
			break;
 8001f74:	e001      	b.n	8001f7a <S2LP_PrintStatus+0xfa>
			break;
 8001f76:	bf00      	nop
 8001f78:	e002      	b.n	8001f80 <S2LP_PrintStatus+0x100>
			break;
 8001f7a:	bf00      	nop
 8001f7c:	e000      	b.n	8001f80 <S2LP_PrintStatus+0x100>
			break;
 8001f7e:	bf00      	nop
	}
	DEBUG_PRINT("\r\n");
	DEBUG_PRINT("  XO_ON=%u, ERROR_LOCK=%u, RX_fifo_empty=%u, TX_FIFO_FULL=%u\r\n",
			status->XO_ON, status->ERROR_LOCK, status->RX_FIFO_EMPTY, status->TX_FIFO_FULL);
	DEBUG_PRINT("  ANT_SELECT=%u, RCCAL_OK=%u, RES=%u\r\n", status->ANT_SELECT, status->RCCAL_OK, status->RESERVED);
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	0000      	movs	r0, r0
	...

08001f90 <S2LP_PLLConf>:
* @param  pfd_split pointer to the pfd register value.
* @param  lFc channel center frequency expressed in Hz (from 779 MHz to 915 MHz)
* @retval uint8_t Charge pump word.
*/
void S2LP_PLLConf(int32_t lFc)
{
 8001f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f94:	b09e      	sub	sp, #120	@ 0x78
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	63f8      	str	r0, [r7, #60]	@ 0x3c
  uint32_t vcofreq, lFRef;
  uint8_t BFactor = 4; // 779-915 MHz range
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
  uint8_t refdiv = 1; // REFDIV=0 (XO_RCO_CONF0) by default
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

  /* Calculates the syntheziser band select */
  uint64_t tgt1,tgt2,tgt;
  uint32_t synth;

  tgt = (((uint64_t)lFc)<<19)*(BFactor*refdiv);
 8001fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fa8:	17da      	asrs	r2, r3, #31
 8001faa:	469a      	mov	sl, r3
 8001fac:	4693      	mov	fp, r2
 8001fae:	ea4f 396a 	mov.w	r9, sl, asr #13
 8001fb2:	ea4f 48ca 	mov.w	r8, sl, lsl #19
 8001fb6:	f897 2075 	ldrb.w	r2, [r7, #117]	@ 0x75
 8001fba:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 8001fbe:	fb02 f303 	mul.w	r3, r2, r3
 8001fc2:	17da      	asrs	r2, r3, #31
 8001fc4:	623b      	str	r3, [r7, #32]
 8001fc6:	627a      	str	r2, [r7, #36]	@ 0x24
 8001fc8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001fcc:	4603      	mov	r3, r0
 8001fce:	fb03 f209 	mul.w	r2, r3, r9
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	fb08 f303 	mul.w	r3, r8, r3
 8001fd8:	4413      	add	r3, r2
 8001fda:	4602      	mov	r2, r0
 8001fdc:	fba8 4502 	umull	r4, r5, r8, r2
 8001fe0:	442b      	add	r3, r5
 8001fe2:	461d      	mov	r5, r3
 8001fe4:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
 8001fe8:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
  synth=(uint32_t)(tgt/XTAL_FREQ);
 8001fec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001ff0:	a374      	add	r3, pc, #464	@ (adr r3, 80021c4 <S2LP_PLLConf+0x234>)
 8001ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff6:	f7fe fde7 	bl	8000bc8 <__aeabi_uldivmod>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4613      	mov	r3, r2
 8002000:	667b      	str	r3, [r7, #100]	@ 0x64
  tgt1 = (uint64_t)XTAL_FREQ*(synth);
 8002002:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002004:	2200      	movs	r2, #0
 8002006:	61bb      	str	r3, [r7, #24]
 8002008:	61fa      	str	r2, [r7, #28]
 800200a:	4b6b      	ldr	r3, [pc, #428]	@ (80021b8 <S2LP_PLLConf+0x228>)
 800200c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002010:	462a      	mov	r2, r5
 8002012:	fb03 f202 	mul.w	r2, r3, r2
 8002016:	2300      	movs	r3, #0
 8002018:	4621      	mov	r1, r4
 800201a:	fb01 f303 	mul.w	r3, r1, r3
 800201e:	4413      	add	r3, r2
 8002020:	4a65      	ldr	r2, [pc, #404]	@ (80021b8 <S2LP_PLLConf+0x228>)
 8002022:	4621      	mov	r1, r4
 8002024:	fba1 1202 	umull	r1, r2, r1, r2
 8002028:	637a      	str	r2, [r7, #52]	@ 0x34
 800202a:	460a      	mov	r2, r1
 800202c:	633a      	str	r2, [r7, #48]	@ 0x30
 800202e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002030:	4413      	add	r3, r2
 8002032:	637b      	str	r3, [r7, #52]	@ 0x34
 8002034:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8002038:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
 800203c:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58
  tgt2 = (uint64_t)XTAL_FREQ*(synth+1);
 8002040:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002042:	3301      	adds	r3, #1
 8002044:	2200      	movs	r2, #0
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	617a      	str	r2, [r7, #20]
 800204a:	4b5b      	ldr	r3, [pc, #364]	@ (80021b8 <S2LP_PLLConf+0x228>)
 800204c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002050:	462a      	mov	r2, r5
 8002052:	fb03 f202 	mul.w	r2, r3, r2
 8002056:	2300      	movs	r3, #0
 8002058:	4621      	mov	r1, r4
 800205a:	fb01 f303 	mul.w	r3, r1, r3
 800205e:	4413      	add	r3, r2
 8002060:	4a55      	ldr	r2, [pc, #340]	@ (80021b8 <S2LP_PLLConf+0x228>)
 8002062:	4621      	mov	r1, r4
 8002064:	fba1 1202 	umull	r1, r2, r1, r2
 8002068:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800206a:	460a      	mov	r2, r1
 800206c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800206e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002070:	4413      	add	r3, r2
 8002072:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002074:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8002078:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50
 800207c:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50

  synth=((tgt2-tgt)<(tgt-tgt1))?(synth+1):(synth);
 8002080:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002084:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8002088:	1a84      	subs	r4, r0, r2
 800208a:	60bc      	str	r4, [r7, #8]
 800208c:	eb61 0303 	sbc.w	r3, r1, r3
 8002090:	60fb      	str	r3, [r7, #12]
 8002092:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002096:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800209a:	1a84      	subs	r4, r0, r2
 800209c:	603c      	str	r4, [r7, #0]
 800209e:	eb61 0303 	sbc.w	r3, r1, r3
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020a8:	4623      	mov	r3, r4
 80020aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020ae:	4602      	mov	r2, r0
 80020b0:	4293      	cmp	r3, r2
 80020b2:	462b      	mov	r3, r5
 80020b4:	460a      	mov	r2, r1
 80020b6:	4193      	sbcs	r3, r2
 80020b8:	d202      	bcs.n	80020c0 <S2LP_PLLConf+0x130>
 80020ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020bc:	3301      	adds	r3, #1
 80020be:	e000      	b.n	80020c2 <S2LP_PLLConf+0x132>
 80020c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80020c2:	667b      	str	r3, [r7, #100]	@ 0x64

  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc*BFactor;
 80020c4:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80020c8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Calculates the reference frequency clock */
  lFRef = XTAL_FREQ/refdiv;
 80020d0:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80020d4:	4a38      	ldr	r2, [pc, #224]	@ (80021b8 <S2LP_PLLConf+0x228>)
 80020d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80020da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Set the correct charge pump word */
  if (vcofreq >= VCO_CENTER_FREQ) {
 80020dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80020de:	4a37      	ldr	r2, [pc, #220]	@ (80021bc <S2LP_PLLConf+0x22c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d911      	bls.n	8002108 <S2LP_PLLConf+0x178>
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 80020e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020e6:	4a36      	ldr	r2, [pc, #216]	@ (80021c0 <S2LP_PLLConf+0x230>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d906      	bls.n	80020fa <S2LP_PLLConf+0x16a>
      cp_isel = 0x02;
 80020ec:	2302      	movs	r3, #2
 80020ee:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80020f8:	e017      	b.n	800212a <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x01;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 8002100:	2301      	movs	r3, #1
 8002102:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8002106:	e010      	b.n	800212a <S2LP_PLLConf+0x19a>
    }
  }
  else {
    if (lFRef > S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8002108:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800210a:	4a2d      	ldr	r2, [pc, #180]	@ (80021c0 <S2LP_PLLConf+0x230>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d906      	bls.n	800211e <S2LP_PLLConf+0x18e>
      cp_isel = 0x03;
 8002110:	2303      	movs	r3, #3
 8002112:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800211c:	e005      	b.n	800212a <S2LP_PLLConf+0x19a>
    }
    else {
      cp_isel = 0x02;
 800211e:	2302      	movs	r3, #2
 8002120:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      pfd_split = 1;
 8002124:	2301      	movs	r3, #1
 8002126:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
    }
  }

  //DEBUG_PRINT("SYNT: %lu, cp_ise=%u, pfd_split=%u\r\n", synth, cp_isel, pfd_split);

  uint8_t SYNT3 = (uint8_t) ((cp_isel << 5) | (synth >> 24));
 800212a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800212e:	015b      	lsls	r3, r3, #5
 8002130:	b2da      	uxtb	r2, r3
 8002132:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002134:	0e1b      	lsrs	r3, r3, #24
 8002136:	b2db      	uxtb	r3, r3
 8002138:	4313      	orrs	r3, r2
 800213a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint8_t SYNT2 = (uint8_t) ((synth >> 16) & 0xFF);
 800213e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002140:	0c1b      	lsrs	r3, r3, #16
 8002142:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  uint8_t SYNT1 = (uint8_t) ((synth >> 8) & 0xFF);
 8002146:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  uint8_t SYNT0 = (uint8_t) ((synth >> 0) & 0xFF);
 800214e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002150:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

  uint8_t SYNTH_CONFIG2 = 0xD0 + (pfd_split << 2);
 8002154:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	b2db      	uxtb	r3, r3
 800215c:	3b30      	subs	r3, #48	@ 0x30
 800215e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  S2LP_WriteReg(SYNT3_ADDR, SYNT3, NULL);
 8002162:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002166:	2200      	movs	r2, #0
 8002168:	4619      	mov	r1, r3
 800216a:	2005      	movs	r0, #5
 800216c:	f7ff fd3a 	bl	8001be4 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT2_ADDR, SYNT2, NULL);
 8002170:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002174:	2200      	movs	r2, #0
 8002176:	4619      	mov	r1, r3
 8002178:	2006      	movs	r0, #6
 800217a:	f7ff fd33 	bl	8001be4 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT1_ADDR, SYNT1, NULL);
 800217e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8002182:	2200      	movs	r2, #0
 8002184:	4619      	mov	r1, r3
 8002186:	2007      	movs	r0, #7
 8002188:	f7ff fd2c 	bl	8001be4 <S2LP_WriteReg>
  S2LP_WriteReg(SYNT0_ADDR, SYNT0, NULL);
 800218c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002190:	2200      	movs	r2, #0
 8002192:	4619      	mov	r1, r3
 8002194:	2008      	movs	r0, #8
 8002196:	f7ff fd25 	bl	8001be4 <S2LP_WriteReg>
  S2LP_WriteReg(SYNTH_CONFIG2_ADDR, SYNTH_CONFIG2, NULL);
 800219a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800219e:	2200      	movs	r2, #0
 80021a0:	4619      	mov	r1, r3
 80021a2:	2065      	movs	r0, #101	@ 0x65
 80021a4:	f7ff fd1e 	bl	8001be4 <S2LP_WriteReg>
}
 80021a8:	bf00      	nop
 80021aa:	3778      	adds	r7, #120	@ 0x78
 80021ac:	46bd      	mov	sp, r7
 80021ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021b2:	bf00      	nop
 80021b4:	f3af 8000 	nop.w
 80021b8:	02faf080 	.word	0x02faf080
 80021bc:	d693a3ff 	.word	0xd693a3ff
 80021c0:	01c9c380 	.word	0x01c9c380
 80021c4:	02faf080 	.word	0x02faf080
 80021c8:	00000000 	.word	0x00000000

080021cc <ComputeDatarate>:

uint32_t ComputeDatarate(uint16_t cM, uint8_t cE)
{
 80021cc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80021d0:	b091      	sub	sp, #68	@ 0x44
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	460a      	mov	r2, r1
 80021d8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80021da:	4613      	mov	r3, r2
 80021dc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint32_t f_dig=XTAL_FREQ;
 80021e0:	4b3f      	ldr	r3, [pc, #252]	@ (80022e0 <ComputeDatarate+0x114>)
 80021e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint64_t dr;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 80021e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80021e6:	4b3f      	ldr	r3, [pc, #252]	@ (80022e4 <ComputeDatarate+0x118>)
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d902      	bls.n	80021f2 <ComputeDatarate+0x26>
    f_dig >>= 1;
 80021ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021ee:	085b      	lsrs	r3, r3, #1
 80021f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  if(cE==0) {
 80021f2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d128      	bne.n	800224c <ComputeDatarate+0x80>
    dr=((uint64_t)f_dig*cM);
 80021fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80021fc:	2200      	movs	r2, #0
 80021fe:	61bb      	str	r3, [r7, #24]
 8002200:	61fa      	str	r2, [r7, #28]
 8002202:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002204:	2200      	movs	r2, #0
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	617a      	str	r2, [r7, #20]
 800220a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800220e:	462b      	mov	r3, r5
 8002210:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002214:	4642      	mov	r2, r8
 8002216:	fb02 f203 	mul.w	r2, r2, r3
 800221a:	464b      	mov	r3, r9
 800221c:	4621      	mov	r1, r4
 800221e:	fb01 f303 	mul.w	r3, r1, r3
 8002222:	4413      	add	r3, r2
 8002224:	4622      	mov	r2, r4
 8002226:	4641      	mov	r1, r8
 8002228:	fba2 ab01 	umull	sl, fp, r2, r1
 800222c:	445b      	add	r3, fp
 800222e:	469b      	mov	fp, r3
 8002230:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
 8002234:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
    return (uint32_t)(dr>>32);
 8002238:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	000a      	movs	r2, r1
 8002246:	2300      	movs	r3, #0
 8002248:	4613      	mov	r3, r2
 800224a:	e043      	b.n	80022d4 <ComputeDatarate+0x108>
  }

  dr=((uint64_t)f_dig)*((uint64_t)cM+65536);
 800224c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800224e:	2200      	movs	r2, #0
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	60fa      	str	r2, [r7, #12]
 8002254:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002256:	2200      	movs	r2, #0
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	607a      	str	r2, [r7, #4]
 800225c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002260:	460b      	mov	r3, r1
 8002262:	f513 3380 	adds.w	r3, r3, #65536	@ 0x10000
 8002266:	623b      	str	r3, [r7, #32]
 8002268:	4613      	mov	r3, r2
 800226a:	f143 0300 	adc.w	r3, r3, #0
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002270:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002274:	460b      	mov	r3, r1
 8002276:	e9d7 ab08 	ldrd	sl, fp, [r7, #32]
 800227a:	4652      	mov	r2, sl
 800227c:	fb02 f203 	mul.w	r2, r2, r3
 8002280:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8002284:	465b      	mov	r3, fp
 8002286:	4682      	mov	sl, r0
 8002288:	468b      	mov	fp, r1
 800228a:	4651      	mov	r1, sl
 800228c:	fb01 f303 	mul.w	r3, r1, r3
 8002290:	4413      	add	r3, r2
 8002292:	4652      	mov	r2, sl
 8002294:	6a39      	ldr	r1, [r7, #32]
 8002296:	fba2 4501 	umull	r4, r5, r2, r1
 800229a:	442b      	add	r3, r5
 800229c:	461d      	mov	r5, r3
 800229e:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
 80022a2:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30

  return (uint32_t)(dr>>(33-cE));
 80022a6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80022aa:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 80022ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80022b2:	f1c1 0420 	rsb	r4, r1, #32
 80022b6:	f1a1 0020 	sub.w	r0, r1, #32
 80022ba:	fa22 f801 	lsr.w	r8, r2, r1
 80022be:	fa03 f404 	lsl.w	r4, r3, r4
 80022c2:	ea48 0804 	orr.w	r8, r8, r4
 80022c6:	fa23 f000 	lsr.w	r0, r3, r0
 80022ca:	ea48 0800 	orr.w	r8, r8, r0
 80022ce:	fa23 f901 	lsr.w	r9, r3, r1
 80022d2:	4643      	mov	r3, r8
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3744      	adds	r7, #68	@ 0x44
 80022d8:	46bd      	mov	sp, r7
 80022da:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80022de:	4770      	bx	lr
 80022e0:	02faf080 	.word	0x02faf080
 80022e4:	01c9c380 	.word	0x01c9c380

080022e8 <SearchDatarateME>:

void SearchDatarateME(uint32_t lDatarate, uint16_t* pcM, uint8_t* pcE)
{
 80022e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022ec:	b0ae      	sub	sp, #184	@ 0xb8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
 80022f4:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 80022f8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
  uint32_t lDatarateTmp, f_dig=XTAL_FREQ;
 80022fc:	4ba5      	ldr	r3, [pc, #660]	@ (8002594 <SearchDatarateME+0x2ac>)
 80022fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint8_t uDrE;
  uint64_t tgt1,tgt2,tgt;

  if(f_dig>S2LP_DIG_DOMAIN_XTAL_THRESH) {
 8002302:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002306:	4ba4      	ldr	r3, [pc, #656]	@ (8002598 <SearchDatarateME+0x2b0>)
 8002308:	429a      	cmp	r2, r3
 800230a:	d904      	bls.n	8002316 <SearchDatarateME+0x2e>
    f_dig >>= 1;
 800230c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002310:	085b      	lsrs	r3, r3, #1
 8002312:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  }

  /* Search the exponent value */
  for(uDrE = 0; uDrE != 12; uDrE++) {
 8002316:	2300      	movs	r3, #0
 8002318:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 800231c:	e013      	b.n	8002346 <SearchDatarateME+0x5e>
    lDatarateTmp = ComputeDatarate(0xFFFF, uDrE);
 800231e:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002322:	4619      	mov	r1, r3
 8002324:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002328:	f7ff ff50 	bl	80021cc <ComputeDatarate>
 800232c:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    if(lDatarate<=lDatarateTmp)
 8002330:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002334:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002338:	429a      	cmp	r2, r3
 800233a:	d909      	bls.n	8002350 <SearchDatarateME+0x68>
  for(uDrE = 0; uDrE != 12; uDrE++) {
 800233c:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002340:	3301      	adds	r3, #1
 8002342:	f887 30b3 	strb.w	r3, [r7, #179]	@ 0xb3
 8002346:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800234a:	2b0c      	cmp	r3, #12
 800234c:	d1e7      	bne.n	800231e <SearchDatarateME+0x36>
 800234e:	e000      	b.n	8002352 <SearchDatarateME+0x6a>
      break;
 8002350:	bf00      	nop
  }
  (*pcE) = (uint8_t)uDrE;
 8002352:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8002356:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800235a:	7013      	strb	r3, [r2, #0]

  if(uDrE==0) {
 800235c:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d16b      	bne.n	800243c <SearchDatarateME+0x154>
    tgt=((uint64_t)lDatarate)<<32;
 8002364:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002368:	2200      	movs	r2, #0
 800236a:	663b      	str	r3, [r7, #96]	@ 0x60
 800236c:	667a      	str	r2, [r7, #100]	@ 0x64
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002378:	000b      	movs	r3, r1
 800237a:	2200      	movs	r2, #0
 800237c:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)(tgt/f_dig);
 8002380:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002384:	2200      	movs	r2, #0
 8002386:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002388:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800238a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800238e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002392:	f7fe fc19 	bl	8000bc8 <__aeabi_uldivmod>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	b293      	uxth	r3, r2
 800239c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80023a0:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*(*pcM);
 80023a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023a6:	2200      	movs	r2, #0
 80023a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80023aa:	657a      	str	r2, [r7, #84]	@ 0x54
 80023ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023b0:	881b      	ldrh	r3, [r3, #0]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	2200      	movs	r2, #0
 80023b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023b8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80023ba:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80023be:	462b      	mov	r3, r5
 80023c0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80023c4:	4642      	mov	r2, r8
 80023c6:	fb02 f203 	mul.w	r2, r2, r3
 80023ca:	464b      	mov	r3, r9
 80023cc:	4621      	mov	r1, r4
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	4622      	mov	r2, r4
 80023d6:	4641      	mov	r1, r8
 80023d8:	fba2 1201 	umull	r1, r2, r2, r1
 80023dc:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80023de:	460a      	mov	r2, r1
 80023e0:	67ba      	str	r2, [r7, #120]	@ 0x78
 80023e2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80023e4:	4413      	add	r3, r2
 80023e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80023e8:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80023ec:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 80023f0:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1);
 80023f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80023f8:	2200      	movs	r2, #0
 80023fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80023fc:	647a      	str	r2, [r7, #68]	@ 0x44
 80023fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	3301      	adds	r3, #1
 8002406:	17da      	asrs	r2, r3, #31
 8002408:	63bb      	str	r3, [r7, #56]	@ 0x38
 800240a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800240c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8002410:	462b      	mov	r3, r5
 8002412:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002416:	4642      	mov	r2, r8
 8002418:	fb02 f203 	mul.w	r2, r2, r3
 800241c:	464b      	mov	r3, r9
 800241e:	4621      	mov	r1, r4
 8002420:	fb01 f303 	mul.w	r3, r1, r3
 8002424:	4413      	add	r3, r2
 8002426:	4622      	mov	r2, r4
 8002428:	4641      	mov	r1, r8
 800242a:	fba2 ab01 	umull	sl, fp, r2, r1
 800242e:	445b      	add	r3, fp
 8002430:	469b      	mov	fp, r3
 8002432:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 8002436:	e9c7 ab28 	strd	sl, fp, [r7, #160]	@ 0xa0
 800243a:	e07d      	b.n	8002538 <SearchDatarateME+0x250>
  }
  else {
    tgt=((uint64_t)lDatarate)<<(33-uDrE);
 800243c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002440:	2200      	movs	r2, #0
 8002442:	4698      	mov	r8, r3
 8002444:	4691      	mov	r9, r2
 8002446:	f897 30b3 	ldrb.w	r3, [r7, #179]	@ 0xb3
 800244a:	f1c3 0121 	rsb	r1, r3, #33	@ 0x21
 800244e:	f1a1 0320 	sub.w	r3, r1, #32
 8002452:	f1c1 0220 	rsb	r2, r1, #32
 8002456:	fa09 f501 	lsl.w	r5, r9, r1
 800245a:	fa08 f303 	lsl.w	r3, r8, r3
 800245e:	431d      	orrs	r5, r3
 8002460:	fa28 f202 	lsr.w	r2, r8, r2
 8002464:	4315      	orrs	r5, r2
 8002466:	fa08 f401 	lsl.w	r4, r8, r1
 800246a:	e9c7 4526 	strd	r4, r5, [r7, #152]	@ 0x98
    (*pcM) = (uint16_t)((tgt/f_dig)-65536);
 800246e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002472:	2200      	movs	r2, #0
 8002474:	633b      	str	r3, [r7, #48]	@ 0x30
 8002476:	637a      	str	r2, [r7, #52]	@ 0x34
 8002478:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800247c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002480:	f7fe fba2 	bl	8000bc8 <__aeabi_uldivmod>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	b293      	uxth	r3, r2
 800248a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800248e:	8013      	strh	r3, [r2, #0]
    tgt1=(uint64_t)f_dig*((*pcM)+65536);
 8002490:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002494:	2200      	movs	r2, #0
 8002496:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002498:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800249a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80024a4:	17da      	asrs	r2, r3, #31
 80024a6:	623b      	str	r3, [r7, #32]
 80024a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80024aa:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80024ae:	462b      	mov	r3, r5
 80024b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024b4:	4642      	mov	r2, r8
 80024b6:	fb02 f203 	mul.w	r2, r2, r3
 80024ba:	464b      	mov	r3, r9
 80024bc:	4621      	mov	r1, r4
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	4413      	add	r3, r2
 80024c4:	4622      	mov	r2, r4
 80024c6:	4641      	mov	r1, r8
 80024c8:	fba2 1201 	umull	r1, r2, r2, r1
 80024cc:	677a      	str	r2, [r7, #116]	@ 0x74
 80024ce:	460a      	mov	r2, r1
 80024d0:	673a      	str	r2, [r7, #112]	@ 0x70
 80024d2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80024d4:	4413      	add	r3, r2
 80024d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80024d8:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 80024dc:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
 80024e0:	e9c7 342a 	strd	r3, r4, [r7, #168]	@ 0xa8
    tgt2=(uint64_t)f_dig*((*pcM)+1+65536);
 80024e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024e8:	2200      	movs	r2, #0
 80024ea:	61bb      	str	r3, [r7, #24]
 80024ec:	61fa      	str	r2, [r7, #28]
 80024ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	f103 1301 	add.w	r3, r3, #65537	@ 0x10001
 80024f8:	17da      	asrs	r2, r3, #31
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	617a      	str	r2, [r7, #20]
 80024fe:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002502:	462b      	mov	r3, r5
 8002504:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002508:	4642      	mov	r2, r8
 800250a:	fb02 f203 	mul.w	r2, r2, r3
 800250e:	464b      	mov	r3, r9
 8002510:	4621      	mov	r1, r4
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	4622      	mov	r2, r4
 800251a:	4641      	mov	r1, r8
 800251c:	fba2 1201 	umull	r1, r2, r2, r1
 8002520:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002522:	460a      	mov	r2, r1
 8002524:	66ba      	str	r2, [r7, #104]	@ 0x68
 8002526:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002528:	4413      	add	r3, r2
 800252a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800252c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8002530:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
 8002534:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
  }


  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 8002538:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800253c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002540:	1a84      	subs	r4, r0, r2
 8002542:	60bc      	str	r4, [r7, #8]
 8002544:	eb61 0303 	sbc.w	r3, r1, r3
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800254e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8002552:	1a84      	subs	r4, r0, r2
 8002554:	603c      	str	r4, [r7, #0]
 8002556:	eb61 0303 	sbc.w	r3, r1, r3
 800255a:	607b      	str	r3, [r7, #4]
 800255c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002560:	4623      	mov	r3, r4
 8002562:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002566:	4602      	mov	r2, r0
 8002568:	4293      	cmp	r3, r2
 800256a:	462b      	mov	r3, r5
 800256c:	460a      	mov	r2, r1
 800256e:	4193      	sbcs	r3, r2
 8002570:	d205      	bcs.n	800257e <SearchDatarateME+0x296>
 8002572:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	3301      	adds	r3, #1
 800257a:	b29b      	uxth	r3, r3
 800257c:	e002      	b.n	8002584 <SearchDatarateME+0x29c>
 800257e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002588:	8013      	strh	r3, [r2, #0]

}
 800258a:	bf00      	nop
 800258c:	37b8      	adds	r7, #184	@ 0xb8
 800258e:	46bd      	mov	sp, r7
 8002590:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002594:	02faf080 	.word	0x02faf080
 8002598:	01c9c380 	.word	0x01c9c380

0800259c <ComputeFreqDeviation>:

uint32_t ComputeFreqDeviation(uint8_t cM, uint8_t cE, uint8_t bs, uint8_t refdiv)
{
 800259c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80025a0:	b08c      	sub	sp, #48	@ 0x30
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	461e      	mov	r6, r3
 80025a6:	4603      	mov	r3, r0
 80025a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80025ac:	460b      	mov	r3, r1
 80025ae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80025b2:	4613      	mov	r3, r2
 80025b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80025b8:	4633      	mov	r3, r6
 80025ba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint32_t f_xo=XTAL_FREQ;
 80025be:	4b35      	ldr	r3, [pc, #212]	@ (8002694 <ComputeFreqDeviation+0xf8>)
 80025c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if(cE==0) {
 80025c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d127      	bne.n	800261a <ComputeFreqDeviation+0x7e>
    return (uint32_t)(((uint64_t)f_xo*cM)>>22);
 80025ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025cc:	2200      	movs	r2, #0
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	617a      	str	r2, [r7, #20]
 80025d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025d6:	2200      	movs	r2, #0
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	60fa      	str	r2, [r7, #12]
 80025dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80025e0:	462b      	mov	r3, r5
 80025e2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80025e6:	4642      	mov	r2, r8
 80025e8:	fb02 f203 	mul.w	r2, r2, r3
 80025ec:	464b      	mov	r3, r9
 80025ee:	4621      	mov	r1, r4
 80025f0:	fb01 f303 	mul.w	r3, r1, r3
 80025f4:	4413      	add	r3, r2
 80025f6:	4622      	mov	r2, r4
 80025f8:	4641      	mov	r1, r8
 80025fa:	fba2 ab01 	umull	sl, fp, r2, r1
 80025fe:	445b      	add	r3, fp
 8002600:	469b      	mov	fp, r3
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	ea4f 529a 	mov.w	r2, sl, lsr #22
 800260e:	ea42 228b 	orr.w	r2, r2, fp, lsl #10
 8002612:	ea4f 539b 	mov.w	r3, fp, lsr #22
 8002616:	4613      	mov	r3, r2
 8002618:	e036      	b.n	8002688 <ComputeFreqDeviation+0xec>
  }

  return (uint32_t)(((uint64_t)f_xo*(256+cM))>>(23-cE));
 800261a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800261c:	2200      	movs	r2, #0
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002626:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800262a:	17da      	asrs	r2, r3, #31
 800262c:	61bb      	str	r3, [r7, #24]
 800262e:	61fa      	str	r2, [r7, #28]
 8002630:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002634:	460b      	mov	r3, r1
 8002636:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800263a:	4652      	mov	r2, sl
 800263c:	fb02 f203 	mul.w	r2, r2, r3
 8002640:	e9c7 ab06 	strd	sl, fp, [r7, #24]
 8002644:	465b      	mov	r3, fp
 8002646:	4682      	mov	sl, r0
 8002648:	468b      	mov	fp, r1
 800264a:	4651      	mov	r1, sl
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	4413      	add	r3, r2
 8002652:	4652      	mov	r2, sl
 8002654:	69b9      	ldr	r1, [r7, #24]
 8002656:	fba2 4501 	umull	r4, r5, r2, r1
 800265a:	442b      	add	r3, r5
 800265c:	461d      	mov	r5, r3
 800265e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002662:	f1c3 0317 	rsb	r3, r3, #23
 8002666:	f1c3 0120 	rsb	r1, r3, #32
 800266a:	f1a3 0220 	sub.w	r2, r3, #32
 800266e:	fa24 f803 	lsr.w	r8, r4, r3
 8002672:	fa05 f101 	lsl.w	r1, r5, r1
 8002676:	ea48 0801 	orr.w	r8, r8, r1
 800267a:	fa25 f202 	lsr.w	r2, r5, r2
 800267e:	ea48 0802 	orr.w	r8, r8, r2
 8002682:	fa25 f903 	lsr.w	r9, r5, r3
 8002686:	4643      	mov	r3, r8
}
 8002688:	4618      	mov	r0, r3
 800268a:	3730      	adds	r7, #48	@ 0x30
 800268c:	46bd      	mov	sp, r7
 800268e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002692:	4770      	bx	lr
 8002694:	02faf080 	.word	0x02faf080

08002698 <SearchFreqDevME>:

void SearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8002698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800269c:	b0a2      	sub	sp, #136	@ 0x88
 800269e:	af00      	add	r7, sp, #0
 80026a0:	65f8      	str	r0, [r7, #92]	@ 0x5c
 80026a2:	65b9      	str	r1, [r7, #88]	@ 0x58
 80026a4:	657a      	str	r2, [r7, #84]	@ 0x54
  uint8_t uFDevE, bs = 4, refdiv = 1;
 80026a6:	2304      	movs	r3, #4
 80026a8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80026ac:	2301      	movs	r3, #1
 80026ae:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  uint32_t lFDevTmp;
  uint64_t tgt1,tgt2,tgt;

  /* Search the exponent of the frequency deviation value */
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 80026b2:	2300      	movs	r3, #0
 80026b4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80026b8:	e012      	b.n	80026e0 <SearchFreqDevME+0x48>
    lFDevTmp = ComputeFreqDeviation(255, uFDevE, bs, refdiv);
 80026ba:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80026be:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80026c2:	f897 1087 	ldrb.w	r1, [r7, #135]	@ 0x87
 80026c6:	20ff      	movs	r0, #255	@ 0xff
 80026c8:	f7ff ff68 	bl	800259c <ComputeFreqDeviation>
 80026cc:	6638      	str	r0, [r7, #96]	@ 0x60
    if(lFDev<lFDevTmp)
 80026ce:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80026d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d309      	bcc.n	80026ea <SearchFreqDevME+0x52>
  for(uFDevE = 0; uFDevE != 12; uFDevE++) {
 80026d6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80026da:	3301      	adds	r3, #1
 80026dc:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80026e0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80026e4:	2b0c      	cmp	r3, #12
 80026e6:	d1e8      	bne.n	80026ba <SearchFreqDevME+0x22>
 80026e8:	e000      	b.n	80026ec <SearchFreqDevME+0x54>
      break;
 80026ea:	bf00      	nop
  }
  (*pcE) = (uint8_t)uFDevE;
 80026ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80026ee:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80026f2:	7013      	strb	r3, [r2, #0]

  if(uFDevE==0)
 80026f4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d155      	bne.n	80027a8 <SearchFreqDevME+0x110>
  {
    tgt=((uint64_t)lFDev)<<22;
 80026fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026fe:	2200      	movs	r2, #0
 8002700:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002702:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8002710:	4629      	mov	r1, r5
 8002712:	058b      	lsls	r3, r1, #22
 8002714:	4621      	mov	r1, r4
 8002716:	ea43 2391 	orr.w	r3, r3, r1, lsr #10
 800271a:	4621      	mov	r1, r4
 800271c:	058a      	lsls	r2, r1, #22
 800271e:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ);
 8002722:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002726:	a36e      	add	r3, pc, #440	@ (adr r3, 80028e0 <SearchFreqDevME+0x248>)
 8002728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272c:	f7fe fa4c 	bl	8000bc8 <__aeabi_uldivmod>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	b2d3      	uxtb	r3, r2
 8002736:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002738:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*(*pcM);
 800273a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2200      	movs	r2, #0
 8002742:	633b      	str	r3, [r7, #48]	@ 0x30
 8002744:	637a      	str	r2, [r7, #52]	@ 0x34
 8002746:	4b68      	ldr	r3, [pc, #416]	@ (80028e8 <SearchFreqDevME+0x250>)
 8002748:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800274c:	462a      	mov	r2, r5
 800274e:	fb03 f202 	mul.w	r2, r3, r2
 8002752:	2300      	movs	r3, #0
 8002754:	4621      	mov	r1, r4
 8002756:	fb01 f303 	mul.w	r3, r1, r3
 800275a:	4413      	add	r3, r2
 800275c:	4a62      	ldr	r2, [pc, #392]	@ (80028e8 <SearchFreqDevME+0x250>)
 800275e:	4621      	mov	r1, r4
 8002760:	fba1 ab02 	umull	sl, fp, r1, r2
 8002764:	445b      	add	r3, fp
 8002766:	469b      	mov	fp, r3
 8002768:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
 800276c:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1);
 8002770:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	3301      	adds	r3, #1
 8002776:	17da      	asrs	r2, r3, #31
 8002778:	62bb      	str	r3, [r7, #40]	@ 0x28
 800277a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800277c:	4b5a      	ldr	r3, [pc, #360]	@ (80028e8 <SearchFreqDevME+0x250>)
 800277e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002782:	462a      	mov	r2, r5
 8002784:	fb03 f202 	mul.w	r2, r3, r2
 8002788:	2300      	movs	r3, #0
 800278a:	4621      	mov	r1, r4
 800278c:	fb01 f303 	mul.w	r3, r1, r3
 8002790:	4413      	add	r3, r2
 8002792:	4a55      	ldr	r2, [pc, #340]	@ (80028e8 <SearchFreqDevME+0x250>)
 8002794:	4621      	mov	r1, r4
 8002796:	fba1 8902 	umull	r8, r9, r1, r2
 800279a:	444b      	add	r3, r9
 800279c:	4699      	mov	r9, r3
 800279e:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 80027a2:	e9c7 891c 	strd	r8, r9, [r7, #112]	@ 0x70
 80027a6:	e06d      	b.n	8002884 <SearchFreqDevME+0x1ec>
  }
  else
  {
    tgt=((uint64_t)lFDev)<<(23-uFDevE);
 80027a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027aa:	2200      	movs	r2, #0
 80027ac:	623b      	str	r3, [r7, #32]
 80027ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80027b0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80027b4:	f1c3 0117 	rsb	r1, r3, #23
 80027b8:	f1a1 0320 	sub.w	r3, r1, #32
 80027bc:	f1c1 0220 	rsb	r2, r1, #32
 80027c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027c4:	4648      	mov	r0, r9
 80027c6:	fa00 f501 	lsl.w	r5, r0, r1
 80027ca:	4640      	mov	r0, r8
 80027cc:	fa00 f303 	lsl.w	r3, r0, r3
 80027d0:	431d      	orrs	r5, r3
 80027d2:	4643      	mov	r3, r8
 80027d4:	fa23 f202 	lsr.w	r2, r3, r2
 80027d8:	4315      	orrs	r5, r2
 80027da:	4643      	mov	r3, r8
 80027dc:	408b      	lsls	r3, r1
 80027de:	461c      	mov	r4, r3
 80027e0:	e9c7 451a 	strd	r4, r5, [r7, #104]	@ 0x68
    (*pcM)=(uint32_t)(tgt/XTAL_FREQ)-256;
 80027e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80027e8:	a33d      	add	r3, pc, #244	@ (adr r3, 80028e0 <SearchFreqDevME+0x248>)
 80027ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ee:	f7fe f9eb 	bl	8000bc8 <__aeabi_uldivmod>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	b2d3      	uxtb	r3, r2
 80027f8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80027fa:	7013      	strb	r3, [r2, #0]
    tgt1=(uint64_t)XTAL_FREQ*((*pcM)+256);
 80027fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002804:	17da      	asrs	r2, r3, #31
 8002806:	61bb      	str	r3, [r7, #24]
 8002808:	61fa      	str	r2, [r7, #28]
 800280a:	4b37      	ldr	r3, [pc, #220]	@ (80028e8 <SearchFreqDevME+0x250>)
 800280c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002810:	462a      	mov	r2, r5
 8002812:	fb03 f202 	mul.w	r2, r3, r2
 8002816:	2300      	movs	r3, #0
 8002818:	4621      	mov	r1, r4
 800281a:	fb01 f303 	mul.w	r3, r1, r3
 800281e:	4413      	add	r3, r2
 8002820:	4a31      	ldr	r2, [pc, #196]	@ (80028e8 <SearchFreqDevME+0x250>)
 8002822:	4621      	mov	r1, r4
 8002824:	fba1 1202 	umull	r1, r2, r1, r2
 8002828:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800282a:	460a      	mov	r2, r1
 800282c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800282e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002830:	4413      	add	r3, r2
 8002832:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002834:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8002838:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
 800283c:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    tgt2=(uint64_t)XTAL_FREQ*((*pcM)+1+256);
 8002840:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8002848:	17da      	asrs	r2, r3, #31
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	617a      	str	r2, [r7, #20]
 800284e:	4b26      	ldr	r3, [pc, #152]	@ (80028e8 <SearchFreqDevME+0x250>)
 8002850:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002854:	462a      	mov	r2, r5
 8002856:	fb03 f202 	mul.w	r2, r3, r2
 800285a:	2300      	movs	r3, #0
 800285c:	4621      	mov	r1, r4
 800285e:	fb01 f303 	mul.w	r3, r1, r3
 8002862:	4413      	add	r3, r2
 8002864:	4a20      	ldr	r2, [pc, #128]	@ (80028e8 <SearchFreqDevME+0x250>)
 8002866:	4621      	mov	r1, r4
 8002868:	fba1 1202 	umull	r1, r2, r1, r2
 800286c:	647a      	str	r2, [r7, #68]	@ 0x44
 800286e:	460a      	mov	r2, r1
 8002870:	643a      	str	r2, [r7, #64]	@ 0x40
 8002872:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002874:	4413      	add	r3, r2
 8002876:	647b      	str	r3, [r7, #68]	@ 0x44
 8002878:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800287c:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
 8002880:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
  }

  (*pcM)=((tgt2-tgt)<(tgt-tgt1))?((*pcM)+1):(*pcM);
 8002884:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002888:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800288c:	1a84      	subs	r4, r0, r2
 800288e:	60bc      	str	r4, [r7, #8]
 8002890:	eb61 0303 	sbc.w	r3, r1, r3
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800289a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800289e:	1a84      	subs	r4, r0, r2
 80028a0:	603c      	str	r4, [r7, #0]
 80028a2:	eb61 0303 	sbc.w	r3, r1, r3
 80028a6:	607b      	str	r3, [r7, #4]
 80028a8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028ac:	4623      	mov	r3, r4
 80028ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80028b2:	4602      	mov	r2, r0
 80028b4:	4293      	cmp	r3, r2
 80028b6:	462b      	mov	r3, r5
 80028b8:	460a      	mov	r2, r1
 80028ba:	4193      	sbcs	r3, r2
 80028bc:	d204      	bcs.n	80028c8 <SearchFreqDevME+0x230>
 80028be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	3301      	adds	r3, #1
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	e001      	b.n	80028cc <SearchFreqDevME+0x234>
 80028c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80028ce:	7013      	strb	r3, [r2, #0]
}
 80028d0:	bf00      	nop
 80028d2:	3788      	adds	r7, #136	@ 0x88
 80028d4:	46bd      	mov	sp, r7
 80028d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028da:	bf00      	nop
 80028dc:	f3af 8000 	nop.w
 80028e0:	02faf080 	.word	0x02faf080
 80028e4:	00000000 	.word	0x00000000
 80028e8:	02faf080 	.word	0x02faf080

080028ec <S2LP_SetModulation>:
*         [100 500000].
*         Frequency deviation expressed in Hz.
* @retval None.
*/
void S2LP_SetModulation(uint8_t mod_type, uint32_t datarate, uint32_t fdev)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	73fb      	strb	r3, [r7, #15]
  uint8_t dr_e;
  uint16_t dr_m;
  uint8_t uFDevM, uFDevE;

  /* Calculates the datarate mantissa and exponent */
  SearchDatarateME(datarate, &dr_m, &dr_e);
 80028fa:	f107 0217 	add.w	r2, r7, #23
 80028fe:	f107 0314 	add.w	r3, r7, #20
 8002902:	4619      	mov	r1, r3
 8002904:	68b8      	ldr	r0, [r7, #8]
 8002906:	f7ff fcef 	bl	80022e8 <SearchDatarateME>
  /* Calculates the frequency deviation mantissa and exponent */
  SearchFreqDevME(fdev, &uFDevM, &uFDevE);
 800290a:	f107 0212 	add.w	r2, r7, #18
 800290e:	f107 0313 	add.w	r3, r7, #19
 8002912:	4619      	mov	r1, r3
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff febf 	bl	8002698 <SearchFreqDevME>

  S2LP_WriteReg(MOD4_ADDR, (uint8_t)(dr_m >> 8), NULL);
 800291a:	8abb      	ldrh	r3, [r7, #20]
 800291c:	0a1b      	lsrs	r3, r3, #8
 800291e:	b29b      	uxth	r3, r3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2200      	movs	r2, #0
 8002924:	4619      	mov	r1, r3
 8002926:	200e      	movs	r0, #14
 8002928:	f7ff f95c 	bl	8001be4 <S2LP_WriteReg>
  S2LP_WriteReg(MOD3_ADDR, (uint8_t)dr_m, NULL);
 800292c:	8abb      	ldrh	r3, [r7, #20]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2200      	movs	r2, #0
 8002932:	4619      	mov	r1, r3
 8002934:	200f      	movs	r0, #15
 8002936:	f7ff f955 	bl	8001be4 <S2LP_WriteReg>
  S2LP_WriteReg(MOD2_ADDR, mod_type | dr_e, NULL);
 800293a:	7dfa      	ldrb	r2, [r7, #23]
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	4313      	orrs	r3, r2
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2200      	movs	r2, #0
 8002944:	4619      	mov	r1, r3
 8002946:	2010      	movs	r0, #16
 8002948:	f7ff f94c 	bl	8001be4 <S2LP_WriteReg>

  S2LP_WriteReg(MOD0_ADDR, uFDevM, NULL);
 800294c:	7cfb      	ldrb	r3, [r7, #19]
 800294e:	2200      	movs	r2, #0
 8002950:	4619      	mov	r1, r3
 8002952:	2012      	movs	r0, #18
 8002954:	f7ff f946 	bl	8001be4 <S2LP_WriteReg>
  S2LP_WriteReg(MOD1_ADDR, uFDevE, NULL);
 8002958:	7cbb      	ldrb	r3, [r7, #18]
 800295a:	2200      	movs	r2, #0
 800295c:	4619      	mov	r1, r3
 800295e:	2011      	movs	r0, #17
 8002960:	f7ff f940 	bl	8001be4 <S2LP_WriteReg>
}
 8002964:	bf00      	nop
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <S2LP_SetPALeveldBm>:

void S2LP_SetPALeveldBm(int32_t lPowerdBm)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint8_t paLevelValue;
  if(lPowerdBm> 14)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b0e      	cmp	r3, #14
 8002978:	dd02      	ble.n	8002980 <S2LP_SetPALeveldBm+0x14>
  {
    paLevelValue = 1;
 800297a:	2301      	movs	r3, #1
 800297c:	73fb      	strb	r3, [r7, #15]
 800297e:	e006      	b.n	800298e <S2LP_SetPALeveldBm+0x22>
  }
  else {
    paLevelValue = (uint8_t)((int32_t)29-2*lPowerdBm);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	b2db      	uxtb	r3, r3
 8002988:	f1c3 031d 	rsb	r3, r3, #29
 800298c:	73fb      	strb	r3, [r7, #15]
  }

  S2LP_WriteReg(PA_POWER0_ADDR, 0, NULL);
 800298e:	2200      	movs	r2, #0
 8002990:	2100      	movs	r1, #0
 8002992:	2062      	movs	r0, #98	@ 0x62
 8002994:	f7ff f926 	bl	8001be4 <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR+1, 0, NULL); // disable degeneration mode
 8002998:	2200      	movs	r2, #0
 800299a:	2100      	movs	r1, #0
 800299c:	2064      	movs	r0, #100	@ 0x64
 800299e:	f7ff f921 	bl	8001be4 <S2LP_WriteReg>
  S2LP_WriteReg(PA_CONFIG1_ADDR, 0, NULL); // disable Tx Bessel FIR
 80029a2:	2200      	movs	r2, #0
 80029a4:	2100      	movs	r1, #0
 80029a6:	2063      	movs	r0, #99	@ 0x63
 80029a8:	f7ff f91c 	bl	8001be4 <S2LP_WriteReg>
  S2LP_WriteReg(PA_POWER1_ADDR, paLevelValue, NULL);
 80029ac:	7bfb      	ldrb	r3, [r7, #15]
 80029ae:	2200      	movs	r2, #0
 80029b0:	4619      	mov	r1, r3
 80029b2:	2061      	movs	r0, #97	@ 0x61
 80029b4:	f7ff f916 	bl	8001be4 <S2LP_WriteReg>
}
 80029b8:	bf00      	nop
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <S2LP_Init>:

	return HAL_OK;
}

HAL_StatusTypeDef S2LP_Init(SPI_HandleTypeDef *spi_handle)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
	gSPI = spi_handle;
 80029c8:	4a44      	ldr	r2, [pc, #272]	@ (8002adc <S2LP_Init+0x11c>)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6013      	str	r3, [r2, #0]
	uint32_t ncycles_start = HAL_RCC_GetHCLKFreq()/9600;
 80029ce:	f002 fba7 	bl	8005120 <HAL_RCC_GetHCLKFreq>
 80029d2:	4603      	mov	r3, r0
 80029d4:	4a42      	ldr	r2, [pc, #264]	@ (8002ae0 <S2LP_Init+0x120>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	0a9b      	lsrs	r3, r3, #10
 80029dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80029de:	b672      	cpsid	i
}
 80029e0:	bf00      	nop

	__disable_irq();
	HAL_GPIO_WritePin(RADIO_SDN_GPIO_Port, RADIO_SDN_Pin, GPIO_PIN_RESET); // Power up S2LP
 80029e2:	2200      	movs	r2, #0
 80029e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80029e8:	483e      	ldr	r0, [pc, #248]	@ (8002ae4 <S2LP_Init+0x124>)
 80029ea:	f001 fed5 	bl	8004798 <HAL_GPIO_WritePin>
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	e003      	b.n	80029fc <S2LP_Init+0x3c>
		asm volatile("nop");
 80029f4:	bf00      	nop
	for(uint32_t i=0; i < ncycles_start; i++) // Wait for S2LP to start
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	3301      	adds	r3, #1
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d3f7      	bcc.n	80029f4 <S2LP_Init+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 8002a04:	b662      	cpsie	i
}
 8002a06:	bf00      	nop
	__enable_irq();

	S2LP_WriteReg(GPIO0_CONF_ADDR, 3, NULL); // Set GPIO as interrupt line
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2103      	movs	r1, #3
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f7ff f8e9 	bl	8001be4 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK0_ADDR, 0x80 | 0x20 | 0x04, NULL); // Enable "Tx Data sent" and "TX FIFO almost full" interrupts
 8002a12:	2200      	movs	r2, #0
 8002a14:	21a4      	movs	r1, #164	@ 0xa4
 8002a16:	2053      	movs	r0, #83	@ 0x53
 8002a18:	f7ff f8e4 	bl	8001be4 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK1_ADDR, 0x01, NULL); // Enable "TX FIFO almost empty" interrupt
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2101      	movs	r1, #1
 8002a20:	2052      	movs	r0, #82	@ 0x52
 8002a22:	f7ff f8df 	bl	8001be4 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK2_ADDR, 0x00, NULL);
 8002a26:	2200      	movs	r2, #0
 8002a28:	2100      	movs	r1, #0
 8002a2a:	2051      	movs	r0, #81	@ 0x51
 8002a2c:	f7ff f8da 	bl	8001be4 <S2LP_WriteReg>
	S2LP_WriteReg(IRQ_MASK3_ADDR, 0x00, NULL);
 8002a30:	2200      	movs	r2, #0
 8002a32:	2100      	movs	r1, #0
 8002a34:	2050      	movs	r0, #80	@ 0x50
 8002a36:	f7ff f8d5 	bl	8001be4 <S2LP_WriteReg>
	S2LP_WriteReg(FIFO_CONFIG0_ADDR, FIFO_EMPTY_THRESH * FIFO_CHUNK_SIZE, NULL);
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	2120      	movs	r1, #32
 8002a3e:	203f      	movs	r0, #63	@ 0x3f
 8002a40:	f7ff f8d0 	bl	8001be4 <S2LP_WriteReg>

	// Change sync word bytes
	S2LP_WriteReg(SYNC3_ADDR, 0xB7, NULL);
 8002a44:	2200      	movs	r2, #0
 8002a46:	21b7      	movs	r1, #183	@ 0xb7
 8002a48:	2033      	movs	r0, #51	@ 0x33
 8002a4a:	f7ff f8cb 	bl	8001be4 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC2_ADDR, 0x54, NULL);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2154      	movs	r1, #84	@ 0x54
 8002a52:	2034      	movs	r0, #52	@ 0x34
 8002a54:	f7ff f8c6 	bl	8001be4 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC1_ADDR, 0x2A, NULL);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	212a      	movs	r1, #42	@ 0x2a
 8002a5c:	2035      	movs	r0, #53	@ 0x35
 8002a5e:	f7ff f8c1 	bl	8001be4 <S2LP_WriteReg>
	S2LP_WriteReg(SYNC0_ADDR, 0x3E, NULL);
 8002a62:	2200      	movs	r2, #0
 8002a64:	213e      	movs	r1, #62	@ 0x3e
 8002a66:	2036      	movs	r0, #54	@ 0x36
 8002a68:	f7ff f8bc 	bl	8001be4 <S2LP_WriteReg>

	// PLL and PA configuration
	S2LP_PLLConf(BASE_FREQ);
 8002a6c:	481e      	ldr	r0, [pc, #120]	@ (8002ae8 <S2LP_Init+0x128>)
 8002a6e:	f7ff fa8f 	bl	8001f90 <S2LP_PLLConf>
	S2LP_SetPALeveldBm(PA_LEVEL);
 8002a72:	2000      	movs	r0, #0
 8002a74:	f7ff ff7a 	bl	800296c <S2LP_SetPALeveldBm>

	// Modulation and packet configuration
	S2LP_SetModulation(MOD_2FSK, DATARATE, FREQDEV);
 8002a78:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8002a7c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8002a80:	2000      	movs	r0, #0
 8002a82:	f7ff ff33 	bl	80028ec <S2LP_SetModulation>
	S2LP_WriteReg(PCKTCTRL1_ADDR, 0x20, NULL); // No whitening, CRC with poly 0x07
 8002a86:	2200      	movs	r2, #0
 8002a88:	2120      	movs	r1, #32
 8002a8a:	2030      	movs	r0, #48	@ 0x30
 8002a8c:	f7ff f8aa 	bl	8001be4 <S2LP_WriteReg>
	S2LP_WriteReg(PCKTCTRL3_ADDR, 0x00, NULL); // Enable basic packet structure
 8002a90:	2200      	movs	r2, #0
 8002a92:	2100      	movs	r1, #0
 8002a94:	202e      	movs	r0, #46	@ 0x2e
 8002a96:	f7ff f8a5 	bl	8001be4 <S2LP_WriteReg>

	S2LPStatus radio_status;
	uint8_t rco_conf;
	HAL_StatusTypeDef err = S2LP_ReadReg(XO_RCO_CONF1_ADDR, &rco_conf, &radio_status); // fetch radio state
 8002a9a:	f107 020c 	add.w	r2, r7, #12
 8002a9e:	f107 030b 	add.w	r3, r7, #11
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	206c      	movs	r0, #108	@ 0x6c
 8002aa6:	f7ff f85f 	bl	8001b68 <S2LP_ReadReg>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	73fb      	strb	r3, [r7, #15]
	if (err) {
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <S2LP_Init+0xf8>
		return err;
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	e00d      	b.n	8002ad4 <S2LP_Init+0x114>
	} else if (rco_conf != 0x45) {
 8002ab8:	7afb      	ldrb	r3, [r7, #11]
 8002aba:	2b45      	cmp	r3, #69	@ 0x45
 8002abc:	d001      	beq.n	8002ac2 <S2LP_Init+0x102>
		DEBUG_PRINT("[S2LP] Error: XO_RCO_CONF1 register is invalid (0x%X instead of 0x45), faulty SPI bus?\r\n", rco_conf);
		return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e008      	b.n	8002ad4 <S2LP_Init+0x114>
	}

	if (radio_status.MC_STATE != MC_STATE_READY) {
 8002ac2:	7b7b      	ldrb	r3, [r7, #13]
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <S2LP_Init+0x112>
		DEBUG_PRINT("[S2LP] Error: radio is not ready after initialization\r\n");
		return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <S2LP_Init+0x114>
	}

	return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	20003a44 	.word	0x20003a44
 8002ae0:	1b4e81b5 	.word	0x1b4e81b5
 8002ae4:	48001400 	.word	0x48001400
 8002ae8:	33611380 	.word	0x33611380

08002aec <S2LP_IRQ_Handler>:

void S2LP_IRQ_Handler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
	uint8_t irq_status1, irq_status0;
	S2LP_ReadReg(IRQ_STATUS1_ADDR, &irq_status1, NULL);
 8002af2:	1dfb      	adds	r3, r7, #7
 8002af4:	2200      	movs	r2, #0
 8002af6:	4619      	mov	r1, r3
 8002af8:	20fc      	movs	r0, #252	@ 0xfc
 8002afa:	f7ff f835 	bl	8001b68 <S2LP_ReadReg>
	S2LP_ReadReg(IRQ_STATUS0_ADDR, &irq_status0, NULL);
 8002afe:	1dbb      	adds	r3, r7, #6
 8002b00:	2200      	movs	r2, #0
 8002b02:	4619      	mov	r1, r3
 8002b04:	20fd      	movs	r0, #253	@ 0xfd
 8002b06:	f7ff f82f 	bl	8001b68 <S2LP_ReadReg>

	if (irq_status1 & 0x01) // TX FIFO almost empty
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d002      	beq.n	8002b1a <S2LP_IRQ_Handler+0x2e>
		fifo_almost_empty = 1;
 8002b14:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <S2LP_IRQ_Handler+0x58>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x20) // TX/RX FIFO underflow or overflow
 8002b1a:	79bb      	ldrb	r3, [r7, #6]
 8002b1c:	f003 0320 	and.w	r3, r3, #32
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <S2LP_IRQ_Handler+0x3e>
		underflow = 1;
 8002b24:	4b08      	ldr	r3, [pc, #32]	@ (8002b48 <S2LP_IRQ_Handler+0x5c>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	701a      	strb	r2, [r3, #0]

	if (irq_status0 & 0x04) // Packet transmitted
 8002b2a:	79bb      	ldrb	r3, [r7, #6]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <S2LP_IRQ_Handler+0x4e>
		packet_sent = 1;
 8002b34:	4b05      	ldr	r3, [pc, #20]	@ (8002b4c <S2LP_IRQ_Handler+0x60>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20003a41 	.word	0x20003a41
 8002b48:	20003a42 	.word	0x20003a42
 8002b4c:	20003a40 	.word	0x20003a40

08002b50 <Spectrogram_Format>:
q15_t buf_fft[2*SAMPLES_PER_MELVEC  ]; // Double size (real|imag) buffer needed for arm_rfft_q15
q15_t buf_tmp[  SAMPLES_PER_MELVEC/2]; // Intermediate buffer for arm_mat_mult_fast_q15

// Convert 12-bit DC ADC samples to Q1.15 fixed point signal and remove DC component
void Spectrogram_Format(q15_t *buf)
{
 8002b50:	b510      	push	{r4, lr}
 8002b52:	4604      	mov	r4, r0
	start_cycle_count();
 8002b54:	f000 fa0a 	bl	8002f6c <start_cycle_count>
	// That way, the value of buf[i] is in [0 , 2**15 - 1]

	// /!\ When multiplying/dividing by a power 2, always prefer shifting left/right instead, ARM instructions to do so are more efficient.
	// Here we should shift left by 3.

	arm_shift_q15(buf, 3, buf, SAMPLES_PER_MELVEC);
 8002b58:	4622      	mov	r2, r4
 8002b5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b5e:	2103      	movs	r1, #3
 8002b60:	4620      	mov	r0, r4
 8002b62:	f004 fa39 	bl	8006fd8 <arm_shift_q15>
	stop_cycle_count("0.1");
 8002b66:	4808      	ldr	r0, [pc, #32]	@ (8002b88 <Spectrogram_Format+0x38>)
 8002b68:	f000 fa02 	bl	8002f70 <stop_cycle_count>
	start_cycle_count();
 8002b6c:	f000 f9fe 	bl	8002f6c <start_cycle_count>

	// Since we use a signed representation, we should now center the value around zero, we can do this by substracting 2**14.
	// Now the value of buf[i] is in [-2**14 , 2**14 - 1]

	q15_t offset = -(1 << 14);
	arm_offset_q15(buf, offset, buf, SAMPLES_PER_MELVEC);
 8002b70:	4620      	mov	r0, r4
 8002b72:	4622      	mov	r2, r4
 8002b74:	4905      	ldr	r1, [pc, #20]	@ (8002b8c <Spectrogram_Format+0x3c>)
 8002b76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b7a:	f004 fabf 	bl	80070fc <arm_offset_q15>

//	for(uint16_t i=0; i < SAMPLES_PER_MELVEC; i++) { // Remove DC component
//		buf[i] -= (1 << 14);
//	}
	stop_cycle_count("0.2");
}
 8002b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	stop_cycle_count("0.2");
 8002b82:	4803      	ldr	r0, [pc, #12]	@ (8002b90 <Spectrogram_Format+0x40>)
 8002b84:	f000 b9f4 	b.w	8002f70 <stop_cycle_count>
 8002b88:	0800a600 	.word	0x0800a600
 8002b8c:	ffffc000 	.word	0xffffc000
 8002b90:	0800a604 	.word	0x0800a604

08002b94 <Spectrogram_Compute>:

// Compute spectrogram of samples and transform into MEL vectors.
void Spectrogram_Compute(q15_t *samples, q15_t *melvec)
{
 8002b94:	b530      	push	{r4, r5, lr}
 8002b96:	4604      	mov	r4, r0
 8002b98:	b08f      	sub	sp, #60	@ 0x3c
 8002b9a:	460d      	mov	r5, r1
	start_cycle_count();
 8002b9c:	f000 f9e6 	bl	8002f6c <start_cycle_count>
	// STEP 1  : Windowing of input samples
	//           --> Pointwise product
	//           Complexity: O(N)
	//           Number of cycles: < >
	arm_mult_q15(samples, hamming_window, buf, SAMPLES_PER_MELVEC);
 8002ba0:	4a3d      	ldr	r2, [pc, #244]	@ (8002c98 <Spectrogram_Compute+0x104>)
 8002ba2:	493e      	ldr	r1, [pc, #248]	@ (8002c9c <Spectrogram_Compute+0x108>)
 8002ba4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f004 fadb 	bl	8007164 <arm_mult_q15>
	stop_cycle_count("1");
 8002bae:	483c      	ldr	r0, [pc, #240]	@ (8002ca0 <Spectrogram_Compute+0x10c>)
 8002bb0:	4c3c      	ldr	r4, [pc, #240]	@ (8002ca4 <Spectrogram_Compute+0x110>)
 8002bb2:	f000 f9dd 	bl	8002f70 <stop_cycle_count>
	start_cycle_count();
 8002bb6:	f000 f9d9 	bl	8002f6c <start_cycle_count>
	//           Number of cycles: < >

	// Since the FFT is a recursive algorithm, the values are rescaled in the function to ensure that overflow cannot happen.
	arm_rfft_instance_q15 rfft_inst;

	arm_rfft_init_q15(&rfft_inst, SAMPLES_PER_MELVEC, 0, 1);
 8002bba:	2301      	movs	r3, #1
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002bc2:	a808      	add	r0, sp, #32
 8002bc4:	f003 fedc 	bl	8006980 <arm_rfft_init_q15>

	arm_rfft_q15(&rfft_inst, buf, buf_fft);
 8002bc8:	4a37      	ldr	r2, [pc, #220]	@ (8002ca8 <Spectrogram_Compute+0x114>)
 8002bca:	4933      	ldr	r1, [pc, #204]	@ (8002c98 <Spectrogram_Compute+0x104>)
 8002bcc:	a808      	add	r0, sp, #32
 8002bce:	f003 fe5b 	bl	8006888 <arm_rfft_q15>
	stop_cycle_count("2");
 8002bd2:	4836      	ldr	r0, [pc, #216]	@ (8002cac <Spectrogram_Compute+0x118>)
 8002bd4:	f000 f9cc 	bl	8002f70 <stop_cycle_count>
	start_cycle_count();
 8002bd8:	f000 f9c8 	bl	8002f6c <start_cycle_count>
	// STEP 3.1: Find the extremum value (maximum of absolute values)
	//           Complexity: O(N)
	//           Number of cycles: < >

	q15_t vmax;
	uint32_t pIndex=0;
 8002bdc:	2100      	movs	r1, #0

	arm_absmax_q15(buf_fft, SAMPLES_PER_MELVEC, &vmax, &pIndex);
 8002bde:	ab01      	add	r3, sp, #4
 8002be0:	f10d 0202 	add.w	r2, sp, #2
 8002be4:	4830      	ldr	r0, [pc, #192]	@ (8002ca8 <Spectrogram_Compute+0x114>)
	uint32_t pIndex=0;
 8002be6:	9101      	str	r1, [sp, #4]
	arm_absmax_q15(buf_fft, SAMPLES_PER_MELVEC, &vmax, &pIndex);
 8002be8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002bec:	f7fe fb90 	bl	8001310 <arm_absmax_q15>
	stop_cycle_count("3.1");
 8002bf0:	482f      	ldr	r0, [pc, #188]	@ (8002cb0 <Spectrogram_Compute+0x11c>)
 8002bf2:	f000 f9bd 	bl	8002f70 <stop_cycle_count>
	start_cycle_count();
 8002bf6:	f000 f9b9 	bl	8002f6c <start_cycle_count>
	// STEP 3.2: Normalize the vector - Dynamic range increase
	//           Complexity: O(N)
	//           Number of cycles: < >

	for (int i=0; i < SAMPLES_PER_MELVEC; i++) // We don't use the second half of the symmetric spectrum
 8002bfa:	4b2e      	ldr	r3, [pc, #184]	@ (8002cb4 <Spectrogram_Compute+0x120>)
	{
		buf[i] = (q15_t) (((q31_t) buf_fft[i] << 15) /((q31_t)vmax));
 8002bfc:	f9bd c002 	ldrsh.w	ip, [sp, #2]
 8002c00:	f503 6080 	add.w	r0, r3, #1024	@ 0x400
 8002c04:	4621      	mov	r1, r4
 8002c06:	f933 2f02 	ldrsh.w	r2, [r3, #2]!
	for (int i=0; i < SAMPLES_PER_MELVEC; i++) // We don't use the second half of the symmetric spectrum
 8002c0a:	4283      	cmp	r3, r0
		buf[i] = (q15_t) (((q31_t) buf_fft[i] << 15) /((q31_t)vmax));
 8002c0c:	ea4f 32c2 	mov.w	r2, r2, lsl #15
 8002c10:	fb92 f2fc 	sdiv	r2, r2, ip
 8002c14:	f821 2f02 	strh.w	r2, [r1, #2]!
	for (int i=0; i < SAMPLES_PER_MELVEC; i++) // We don't use the second half of the symmetric spectrum
 8002c18:	d1f5      	bne.n	8002c06 <Spectrogram_Compute+0x72>
	}
	stop_cycle_count("3.2");
 8002c1a:	4827      	ldr	r0, [pc, #156]	@ (8002cb8 <Spectrogram_Compute+0x124>)
 8002c1c:	f000 f9a8 	bl	8002f70 <stop_cycle_count>
	start_cycle_count();
 8002c20:	f000 f9a4 	bl	8002f6c <start_cycle_count>
	// STEP 3.3: Compute the complex magnitude
	//           --> The output buffer is now two times smaller because (real|imag) --> (mag)
	//           Complexity: O(N)
	//           Number of cycles: < >

	arm_cmplx_mag_q15(buf, buf, SAMPLES_PER_MELVEC/2);
 8002c24:	491c      	ldr	r1, [pc, #112]	@ (8002c98 <Spectrogram_Compute+0x104>)
 8002c26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c2a:	4608      	mov	r0, r1
 8002c2c:	f004 f92a 	bl	8006e84 <arm_cmplx_mag_q15>
	stop_cycle_count("3.3");
 8002c30:	4822      	ldr	r0, [pc, #136]	@ (8002cbc <Spectrogram_Compute+0x128>)
 8002c32:	f000 f99d 	bl	8002f70 <stop_cycle_count>
	start_cycle_count();
 8002c36:	f000 f999 	bl	8002f6c <start_cycle_count>
	// STEP 3.4: Denormalize the vector
	//           Complexity: O(N)
	//           Number of cycles: < >

	for (int i=0; i < SAMPLES_PER_MELVEC/2; i++)
 8002c3a:	4921      	ldr	r1, [pc, #132]	@ (8002cc0 <Spectrogram_Compute+0x12c>)
	{
		buf[i] = (q15_t) ((((q31_t) buf[i]) * ((q31_t) vmax) ) >> 15 );
 8002c3c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8002c40:	f834 2f02 	ldrh.w	r2, [r4, #2]!
 8002c44:	fb12 f203 	smulbb	r2, r2, r3
 8002c48:	13d2      	asrs	r2, r2, #15
	for (int i=0; i < SAMPLES_PER_MELVEC/2; i++)
 8002c4a:	42a1      	cmp	r1, r4
		buf[i] = (q15_t) ((((q31_t) buf[i]) * ((q31_t) vmax) ) >> 15 );
 8002c4c:	8022      	strh	r2, [r4, #0]
	for (int i=0; i < SAMPLES_PER_MELVEC/2; i++)
 8002c4e:	d1f7      	bne.n	8002c40 <Spectrogram_Compute+0xac>
	}
	stop_cycle_count("3.4");
 8002c50:	481c      	ldr	r0, [pc, #112]	@ (8002cc4 <Spectrogram_Compute+0x130>)
 8002c52:	f000 f98d 	bl	8002f70 <stop_cycle_count>
	start_cycle_count();
 8002c56:	f000 f989 	bl	8002f6c <start_cycle_count>
	// /!\ In order to avoid overflows completely the input signals should be scaled down. Scale down one of the input matrices by log2(numColsA) bits to avoid overflows,
	// as a total of numColsA additions are computed internally for each output element. Because our hz2mel_mat matrix contains lots of zeros in its rows, this is not necessary.
	
	arm_matrix_instance_q15 hz2mel_inst, fftmag_inst, melvec_inst;

	arm_mat_init_q15(&hz2mel_inst, MELVEC_LENGTH, SAMPLES_PER_MELVEC/2, hz2mel_mat);
 8002c5a:	a802      	add	r0, sp, #8
 8002c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc8 <Spectrogram_Compute+0x134>)
 8002c5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c62:	2114      	movs	r1, #20
 8002c64:	f004 f90a 	bl	8006e7c <arm_mat_init_q15>
	arm_mat_init_q15(&fftmag_inst, SAMPLES_PER_MELVEC/2, 1, buf);
 8002c68:	a804      	add	r0, sp, #16
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c98 <Spectrogram_Compute+0x104>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002c72:	f004 f903 	bl	8006e7c <arm_mat_init_q15>
	arm_mat_init_q15(&melvec_inst, MELVEC_LENGTH, 1, melvec);
 8002c76:	462b      	mov	r3, r5
 8002c78:	a806      	add	r0, sp, #24
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	2114      	movs	r1, #20
 8002c7e:	f004 f8fd 	bl	8006e7c <arm_mat_init_q15>

	arm_mat_mult_fast_q15(&hz2mel_inst, &fftmag_inst, &melvec_inst, buf_tmp);
 8002c82:	4b12      	ldr	r3, [pc, #72]	@ (8002ccc <Spectrogram_Compute+0x138>)
 8002c84:	aa06      	add	r2, sp, #24
 8002c86:	a904      	add	r1, sp, #16
 8002c88:	a802      	add	r0, sp, #8
 8002c8a:	f003 fef5 	bl	8006a78 <arm_mat_mult_fast_q15>
	stop_cycle_count("4");
 8002c8e:	4810      	ldr	r0, [pc, #64]	@ (8002cd0 <Spectrogram_Compute+0x13c>)
 8002c90:	f000 f96e 	bl	8002f70 <stop_cycle_count>
}
 8002c94:	b00f      	add	sp, #60	@ 0x3c
 8002c96:	bd30      	pop	{r4, r5, pc}
 8002c98:	20004448 	.word	0x20004448
 8002c9c:	20000000 	.word	0x20000000
 8002ca0:	0800a608 	.word	0x0800a608
 8002ca4:	20004446 	.word	0x20004446
 8002ca8:	20003c48 	.word	0x20003c48
 8002cac:	0800a60c 	.word	0x0800a60c
 8002cb0:	0800a610 	.word	0x0800a610
 8002cb4:	20003c46 	.word	0x20003c46
 8002cb8:	0800a614 	.word	0x0800a614
 8002cbc:	0800a618 	.word	0x0800a618
 8002cc0:	20004646 	.word	0x20004646
 8002cc4:	0800a61c 	.word	0x0800a61c
 8002cc8:	20000400 	.word	0x20000400
 8002ccc:	20003a48 	.word	0x20003a48
 8002cd0:	0800a620 	.word	0x0800a620

08002cd4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002cd4:	b510      	push	{r4, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002cd6:	4810      	ldr	r0, [pc, #64]	@ (8002d18 <MX_SPI1_Init+0x44>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cd8:	4c10      	ldr	r4, [pc, #64]	@ (8002d1c <MX_SPI1_Init+0x48>)
 8002cda:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8002cde:	e9c0 4100 	strd	r4, r1, [r0]
 8002ce2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	2208      	movs	r2, #8
 8002cea:	f44f 64e0 	mov.w	r4, #1792	@ 0x700
 8002cee:	6181      	str	r1, [r0, #24]
 8002cf0:	2107      	movs	r1, #7
 8002cf2:	e9c0 3402 	strd	r3, r4, [r0, #8]
 8002cf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002cfa:	e9c0 2307 	strd	r2, r3, [r0, #28]
 8002cfe:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
 8002d02:	e9c0 130b 	strd	r1, r3, [r0, #44]	@ 0x2c
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d06:	6342      	str	r2, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002d08:	f002 fe58 	bl	80059bc <HAL_SPI_Init>
 8002d0c:	b900      	cbnz	r0, 8002d10 <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002d0e:	bd10      	pop	{r4, pc}
 8002d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002d14:	f7fe bd32 	b.w	800177c <Error_Handler>
 8002d18:	20004848 	.word	0x20004848
 8002d1c:	40013000 	.word	0x40013000

08002d20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d20:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI1)
 8002d22:	4b22      	ldr	r3, [pc, #136]	@ (8002dac <HAL_SPI_MspInit+0x8c>)
 8002d24:	6802      	ldr	r2, [r0, #0]
{
 8002d26:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d28:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI1)
 8002d2a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d2c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002d30:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8002d34:	9408      	str	r4, [sp, #32]
  if(spiHandle->Instance==SPI1)
 8002d36:	d001      	beq.n	8002d3c <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002d38:	b00a      	add	sp, #40	@ 0x28
 8002d3a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d3c:	f503 4360 	add.w	r3, r3, #57344	@ 0xe000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d40:	2603      	movs	r6, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d42:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d44:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d48:	661a      	str	r2, [r3, #96]	@ 0x60
 8002d4a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d4c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002d50:	9201      	str	r2, [sp, #4]
 8002d52:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d56:	f042 0201 	orr.w	r2, r2, #1
 8002d5a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002d5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d5e:	f002 0201 	and.w	r2, r2, #1
 8002d62:	9202      	str	r2, [sp, #8]
 8002d64:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d68:	f042 0210 	orr.w	r2, r2, #16
 8002d6c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d76:	22c0      	movs	r2, #192	@ 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d78:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d7c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d82:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d86:	e9cd 6507 	strd	r6, r5, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d8a:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8c:	f001 fb28 	bl	80043e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002d90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d94:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d96:	4806      	ldr	r0, [pc, #24]	@ (8002db0 <HAL_SPI_MspInit+0x90>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d98:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d9c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9e:	e9cd 4606 	strd	r4, r6, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002da4:	f001 fb1c 	bl	80043e0 <HAL_GPIO_Init>
}
 8002da8:	b00a      	add	sp, #40	@ 0x28
 8002daa:	bd70      	pop	{r4, r5, r6, pc}
 8002dac:	40013000 	.word	0x40013000
 8002db0:	48001000 	.word	0x48001000

08002db4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db4:	4b0a      	ldr	r3, [pc, #40]	@ (8002de0 <HAL_MspInit+0x2c>)
 8002db6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002db8:	f042 0201 	orr.w	r2, r2, #1
{
 8002dbc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dbe:	661a      	str	r2, [r3, #96]	@ 0x60
 8002dc0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002dc2:	f002 0201 	and.w	r2, r2, #1
 8002dc6:	9200      	str	r2, [sp, #0]
 8002dc8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002dcc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002dd0:	659a      	str	r2, [r3, #88]	@ 0x58
 8002dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd8:	9301      	str	r3, [sp, #4]
 8002dda:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ddc:	b002      	add	sp, #8
 8002dde:	4770      	bx	lr
 8002de0:	40021000 	.word	0x40021000

08002de4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002de4:	e7fe      	b.n	8002de4 <NMI_Handler>
 8002de6:	bf00      	nop

08002de8 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002de8:	e7fe      	b.n	8002de8 <HardFault_Handler>
 8002dea:	bf00      	nop

08002dec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dec:	e7fe      	b.n	8002dec <MemManage_Handler>
 8002dee:	bf00      	nop

08002df0 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002df0:	e7fe      	b.n	8002df0 <BusFault_Handler>
 8002df2:	bf00      	nop

08002df4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002df4:	e7fe      	b.n	8002df4 <UsageFault_Handler>
 8002df6:	bf00      	nop

08002df8 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop

08002dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop

08002e00 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop

08002e04 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e04:	f000 b916 	b.w	8003034 <HAL_IncTick>

08002e08 <EXTI3_IRQHandler>:
  */
void EXTI3_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RADIO_INT_Pin);
 8002e08:	2008      	movs	r0, #8
 8002e0a:	f001 bccb 	b.w	80047a4 <HAL_GPIO_EXTI_IRQHandler>
 8002e0e:	bf00      	nop

08002e10 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e10:	4801      	ldr	r0, [pc, #4]	@ (8002e18 <DMA1_Channel1_IRQHandler+0x8>)
 8002e12:	f001 ba97 	b.w	8004344 <HAL_DMA_IRQHandler>
 8002e16:	bf00      	nop
 8002e18:	20002df4 	.word	0x20002df4

08002e1c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002e1c:	4801      	ldr	r0, [pc, #4]	@ (8002e24 <TIM3_IRQHandler+0x8>)
 8002e1e:	f003 b9bb 	b.w	8006198 <HAL_TIM_IRQHandler>
 8002e22:	bf00      	nop
 8002e24:	200048b0 	.word	0x200048b0

08002e28 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002e28:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002e2c:	f001 bcba 	b.w	80047a4 <HAL_GPIO_EXTI_IRQHandler>

08002e30 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e30:	490c      	ldr	r1, [pc, #48]	@ (8002e64 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e32:	4a0d      	ldr	r2, [pc, #52]	@ (8002e68 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8002e34:	680b      	ldr	r3, [r1, #0]
{
 8002e36:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e38:	4c0c      	ldr	r4, [pc, #48]	@ (8002e6c <_sbrk+0x3c>)
 8002e3a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8002e3c:	b12b      	cbz	r3, 8002e4a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e3e:	4418      	add	r0, r3
 8002e40:	4290      	cmp	r0, r2
 8002e42:	d807      	bhi.n	8002e54 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002e44:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002e4a:	4b09      	ldr	r3, [pc, #36]	@ (8002e70 <_sbrk+0x40>)
 8002e4c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8002e4e:	4418      	add	r0, r3
 8002e50:	4290      	cmp	r0, r2
 8002e52:	d9f7      	bls.n	8002e44 <_sbrk+0x14>
    errno = ENOMEM;
 8002e54:	f005 fcd6 	bl	8008804 <__errno>
 8002e58:	230c      	movs	r3, #12
 8002e5a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002e5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	bd10      	pop	{r4, pc}
 8002e64:	200048ac 	.word	0x200048ac
 8002e68:	20050000 	.word	0x20050000
 8002e6c:	00000400 	.word	0x00000400
 8002e70:	20004ad8 	.word	0x20004ad8

08002e74 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e74:	480e      	ldr	r0, [pc, #56]	@ (8002eb0 <SystemInit+0x3c>)
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002e76:	4b0f      	ldr	r3, [pc, #60]	@ (8002eb4 <SystemInit+0x40>)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002e78:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8002e7c:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8002e80:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  RCC->CR |= RCC_CR_MSION;
 8002e84:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002e86:	2100      	movs	r1, #0
  RCC->CR |= RCC_CR_MSION;
 8002e88:	f042 0201 	orr.w	r2, r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8002e8e:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	f022 52a8 	bic.w	r2, r2, #352321536	@ 0x15000000
 8002e96:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002e9a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 8002e9e:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 8002ea0:	60d8      	str	r0, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002ea8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002eaa:	6199      	str	r1, [r3, #24]
}
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	e000ed00 	.word	0xe000ed00
 8002eb4:	40021000 	.word	0x40021000

08002eb8 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002eb8:	b500      	push	{lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002eba:	481a      	ldr	r0, [pc, #104]	@ (8002f24 <MX_TIM3_Init+0x6c>)
 8002ebc:	4a1a      	ldr	r2, [pc, #104]	@ (8002f28 <MX_TIM3_Init+0x70>)
{
 8002ebe:	b089      	sub	sp, #36	@ 0x24
  htim3.Instance = TIM3;
 8002ec0:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 6;
 8002ec2:	2206      	movs	r2, #6
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ec4:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 6;
 8002ec6:	6042      	str	r2, [r0, #4]
 8002ec8:	2214      	movs	r2, #20
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eca:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002ece:	e9cd 3306 	strd	r3, r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ed2:	e9cd 3301 	strd	r3, r3, [sp, #4]
  htim3.Init.Prescaler = 6;
 8002ed6:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eda:	9303      	str	r3, [sp, #12]
  htim3.Init.Prescaler = 6;
 8002edc:	6103      	str	r3, [r0, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 20;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ede:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ee0:	f002 ffd8 	bl	8005e94 <HAL_TIM_Base_Init>
 8002ee4:	b998      	cbnz	r0, 8002f0e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002ee6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002eea:	480e      	ldr	r0, [pc, #56]	@ (8002f24 <MX_TIM3_Init+0x6c>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002eec:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002eee:	a904      	add	r1, sp, #16
 8002ef0:	f003 f89e 	bl	8006030 <HAL_TIM_ConfigClockSource>
 8002ef4:	b998      	cbnz	r0, 8002f1e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002ef6:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ef8:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002efa:	480a      	ldr	r0, [pc, #40]	@ (8002f24 <MX_TIM3_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002efc:	9201      	str	r2, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002efe:	a901      	add	r1, sp, #4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f00:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f02:	f003 f9f3 	bl	80062ec <HAL_TIMEx_MasterConfigSynchronization>
 8002f06:	b928      	cbnz	r0, 8002f14 <MX_TIM3_Init+0x5c>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f08:	b009      	add	sp, #36	@ 0x24
 8002f0a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002f0e:	f7fe fc35 	bl	800177c <Error_Handler>
 8002f12:	e7e8      	b.n	8002ee6 <MX_TIM3_Init+0x2e>
    Error_Handler();
 8002f14:	f7fe fc32 	bl	800177c <Error_Handler>
}
 8002f18:	b009      	add	sp, #36	@ 0x24
 8002f1a:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002f1e:	f7fe fc2d 	bl	800177c <Error_Handler>
 8002f22:	e7e8      	b.n	8002ef6 <MX_TIM3_Init+0x3e>
 8002f24:	200048b0 	.word	0x200048b0
 8002f28:	40000400 	.word	0x40000400

08002f2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 8002f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f68 <HAL_TIM_Base_MspInit+0x3c>)
 8002f2e:	6802      	ldr	r2, [r0, #0]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d000      	beq.n	8002f36 <HAL_TIM_Base_MspInit+0xa>
 8002f34:	4770      	bx	lr
{
 8002f36:	b500      	push	{lr}
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f38:	f503 3303 	add.w	r3, r3, #134144	@ 0x20c00
{
 8002f3c:	b083      	sub	sp, #12
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f3e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8002f40:	f040 0002 	orr.w	r0, r0, #2
 8002f44:	6598      	str	r0, [r3, #88]	@ 0x58
 8002f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f48:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f50:	4611      	mov	r1, r2
 8002f52:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f54:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f56:	f000 fee3 	bl	8003d20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f5a:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002f5c:	b003      	add	sp, #12
 8002f5e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f62:	f000 bf19 	b.w	8003d98 <HAL_NVIC_EnableIRQ>
 8002f66:	bf00      	nop
 8002f68:	40000400 	.word	0x40000400

08002f6c <start_cycle_count>:
	printf(" %lu cycles.\r\n", res);
}

#else

void start_cycle_count() {}
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop

08002f70 <stop_cycle_count>:
void stop_cycle_count(char *s) {}
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop

08002f74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002f74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002fac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f78:	f7ff ff7c 	bl	8002e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002f7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002f7e:	e003      	b.n	8002f88 <LoopCopyDataInit>

08002f80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002f80:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002f82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002f84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002f86:	3104      	adds	r1, #4

08002f88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002f88:	480a      	ldr	r0, [pc, #40]	@ (8002fb4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002f8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002f8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002f90:	d3f6      	bcc.n	8002f80 <CopyDataInit>
	ldr	r2, =_sbss
 8002f92:	4a0a      	ldr	r2, [pc, #40]	@ (8002fbc <LoopForever+0x12>)
	b	LoopFillZerobss
 8002f94:	e002      	b.n	8002f9c <LoopFillZerobss>

08002f96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002f96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002f98:	f842 3b04 	str.w	r3, [r2], #4

08002f9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002f9c:	4b08      	ldr	r3, [pc, #32]	@ (8002fc0 <LoopForever+0x16>)
	cmp	r2, r3
 8002f9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002fa0:	d3f9      	bcc.n	8002f96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fa2:	f005 fc35 	bl	8008810 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002fa6:	f7fe fc67 	bl	8001878 <main>

08002faa <LoopForever>:

LoopForever:
    b LoopForever
 8002faa:	e7fe      	b.n	8002faa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002fac:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8002fb0:	0801c874 	.word	0x0801c874
	ldr	r0, =_sdata
 8002fb4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002fb8:	20002dd4 	.word	0x20002dd4
	ldr	r2, =_sbss
 8002fbc:	20002dd8 	.word	0x20002dd8
	ldr	r3, = _ebss
 8002fc0:	20004ad8 	.word	0x20004ad8

08002fc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002fc4:	e7fe      	b.n	8002fc4 <ADC1_2_IRQHandler>
	...

08002fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fc8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002fca:	4b0f      	ldr	r3, [pc, #60]	@ (8003008 <HAL_InitTick+0x40>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	b90b      	cbnz	r3, 8002fd4 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8002fd0:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8002fd2:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002fd4:	490d      	ldr	r1, [pc, #52]	@ (800300c <HAL_InitTick+0x44>)
 8002fd6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002fda:	4605      	mov	r5, r0
 8002fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe0:	6808      	ldr	r0, [r1, #0]
 8002fe2:	fbb0 f0f3 	udiv	r0, r0, r3
 8002fe6:	f000 fee5 	bl	8003db4 <HAL_SYSTICK_Config>
 8002fea:	4604      	mov	r4, r0
 8002fec:	2800      	cmp	r0, #0
 8002fee:	d1ef      	bne.n	8002fd0 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ff0:	2d0f      	cmp	r5, #15
 8002ff2:	d8ed      	bhi.n	8002fd0 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ffc:	f000 fe90 	bl	8003d20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003000:	4b03      	ldr	r3, [pc, #12]	@ (8003010 <HAL_InitTick+0x48>)
 8003002:	4620      	mov	r0, r4
 8003004:	601d      	str	r5, [r3, #0]
}
 8003006:	bd38      	pop	{r3, r4, r5, pc}
 8003008:	20002c04 	.word	0x20002c04
 800300c:	20002c00 	.word	0x20002c00
 8003010:	20002c08 	.word	0x20002c08

08003014 <HAL_Init>:
{
 8003014:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003016:	2003      	movs	r0, #3
 8003018:	f000 fe70 	bl	8003cfc <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800301c:	2000      	movs	r0, #0
 800301e:	f7ff ffd3 	bl	8002fc8 <HAL_InitTick>
 8003022:	b110      	cbz	r0, 800302a <HAL_Init+0x16>
    status = HAL_ERROR;
 8003024:	2401      	movs	r4, #1
}
 8003026:	4620      	mov	r0, r4
 8003028:	bd10      	pop	{r4, pc}
 800302a:	4604      	mov	r4, r0
    HAL_MspInit();
 800302c:	f7ff fec2 	bl	8002db4 <HAL_MspInit>
}
 8003030:	4620      	mov	r0, r4
 8003032:	bd10      	pop	{r4, pc}

08003034 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003034:	4a03      	ldr	r2, [pc, #12]	@ (8003044 <HAL_IncTick+0x10>)
 8003036:	4b04      	ldr	r3, [pc, #16]	@ (8003048 <HAL_IncTick+0x14>)
 8003038:	6811      	ldr	r1, [r2, #0]
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	440b      	add	r3, r1
 800303e:	6013      	str	r3, [r2, #0]
}
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	20004988 	.word	0x20004988
 8003048:	20002c04 	.word	0x20002c04

0800304c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800304c:	4b01      	ldr	r3, [pc, #4]	@ (8003054 <HAL_GetTick+0x8>)
 800304e:	6818      	ldr	r0, [r3, #0]
}
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20004988 	.word	0x20004988

08003058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003058:	b538      	push	{r3, r4, r5, lr}
 800305a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800305c:	f7ff fff6 	bl	800304c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003060:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003062:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003064:	d002      	beq.n	800306c <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8003066:	4b04      	ldr	r3, [pc, #16]	@ (8003078 <HAL_Delay+0x20>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800306c:	f7ff ffee 	bl	800304c <HAL_GetTick>
 8003070:	1b40      	subs	r0, r0, r5
 8003072:	42a0      	cmp	r0, r4
 8003074:	d3fa      	bcc.n	800306c <HAL_Delay+0x14>
  {
  }
}
 8003076:	bd38      	pop	{r3, r4, r5, pc}
 8003078:	20002c04 	.word	0x20002c04

0800307c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800307c:	b530      	push	{r4, r5, lr}
 800307e:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003080:	2300      	movs	r3, #0
 8003082:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003084:	2800      	cmp	r0, #0
 8003086:	f000 809a 	beq.w	80031be <HAL_ADC_Init+0x142>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800308a:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 800308c:	4604      	mov	r4, r0
 800308e:	2d00      	cmp	r5, #0
 8003090:	f000 809a 	beq.w	80031c8 <HAL_ADC_Init+0x14c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003094:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003096:	6893      	ldr	r3, [r2, #8]
 8003098:	009d      	lsls	r5, r3, #2
 800309a:	d505      	bpl.n	80030a8 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800309c:	6893      	ldr	r3, [r2, #8]
 800309e:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80030a2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80030a6:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030a8:	6893      	ldr	r3, [r2, #8]
 80030aa:	00d8      	lsls	r0, r3, #3
 80030ac:	d419      	bmi.n	80030e2 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030ae:	4b5b      	ldr	r3, [pc, #364]	@ (800321c <HAL_ADC_Init+0x1a0>)
 80030b0:	485b      	ldr	r0, [pc, #364]	@ (8003220 <HAL_ADC_Init+0x1a4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80030b4:	6891      	ldr	r1, [r2, #8]
 80030b6:	099b      	lsrs	r3, r3, #6
 80030b8:	fba0 0303 	umull	r0, r3, r0, r3
 80030bc:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 80030c0:	099b      	lsrs	r3, r3, #6
 80030c2:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80030c6:	3301      	adds	r3, #1
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80030ce:	6091      	str	r1, [r2, #8]
 80030d0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80030d2:	9b01      	ldr	r3, [sp, #4]
 80030d4:	b12b      	cbz	r3, 80030e2 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 80030d6:	9b01      	ldr	r3, [sp, #4]
 80030d8:	3b01      	subs	r3, #1
 80030da:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80030dc:	9b01      	ldr	r3, [sp, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f9      	bne.n	80030d6 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030e2:	6893      	ldr	r3, [r2, #8]
 80030e4:	00d9      	lsls	r1, r3, #3
 80030e6:	d46d      	bmi.n	80031c4 <HAL_ADC_Init+0x148>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80030ea:	f043 0310 	orr.w	r3, r3, #16
 80030ee:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f0:	6de3      	ldr	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80030f2:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030f4:	4303      	orrs	r3, r0
 80030f6:	65e3      	str	r3, [r4, #92]	@ 0x5c
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030f8:	6893      	ldr	r3, [r2, #8]
 80030fa:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003100:	d159      	bne.n	80031b6 <HAL_ADC_Init+0x13a>
 8003102:	06db      	lsls	r3, r3, #27
 8003104:	d457      	bmi.n	80031b6 <HAL_ADC_Init+0x13a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003106:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003108:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800310c:	f043 0302 	orr.w	r3, r3, #2
 8003110:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003112:	6893      	ldr	r3, [r2, #8]
 8003114:	07dd      	lsls	r5, r3, #31
 8003116:	d40b      	bmi.n	8003130 <HAL_ADC_Init+0xb4>
 8003118:	4942      	ldr	r1, [pc, #264]	@ (8003224 <HAL_ADC_Init+0x1a8>)
 800311a:	4b43      	ldr	r3, [pc, #268]	@ (8003228 <HAL_ADC_Init+0x1ac>)
 800311c:	6889      	ldr	r1, [r1, #8]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f013 0f01 	tst.w	r3, #1
 8003124:	4b41      	ldr	r3, [pc, #260]	@ (800322c <HAL_ADC_Init+0x1b0>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	d102      	bne.n	8003130 <HAL_ADC_Init+0xb4>
 800312a:	430b      	orrs	r3, r1
 800312c:	07d9      	lsls	r1, r3, #31
 800312e:	d55e      	bpl.n	80031ee <HAL_ADC_Init+0x172>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 8003130:	68e5      	ldr	r5, [r4, #12]
 8003132:	6b63      	ldr	r3, [r4, #52]	@ 0x34
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003134:	f894 1020 	ldrb.w	r1, [r4, #32]
                 hadc->Init.DataAlign                                                   |
 8003138:	432b      	orrs	r3, r5
 800313a:	68a5      	ldr	r5, [r4, #8]
 800313c:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800313e:	7e65      	ldrb	r5, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003140:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 8003142:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003146:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800314a:	d04b      	beq.n	80031e4 <HAL_ADC_Init+0x168>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800314c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800314e:	b121      	cbz	r1, 800315a <HAL_ADC_Init+0xde>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 8003150:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003152:	f401 7170 	and.w	r1, r1, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8003156:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003158:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800315a:	68d5      	ldr	r5, [r2, #12]
 800315c:	4934      	ldr	r1, [pc, #208]	@ (8003230 <HAL_ADC_Init+0x1b4>)
 800315e:	4029      	ands	r1, r5
 8003160:	4319      	orrs	r1, r3
 8003162:	60d1      	str	r1, [r2, #12]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003164:	6893      	ldr	r3, [r2, #8]
 8003166:	071b      	lsls	r3, r3, #28
 8003168:	d416      	bmi.n	8003198 <HAL_ADC_Init+0x11c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800316a:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800316e:	7e25      	ldrb	r5, [r4, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003170:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003172:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003174:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
 8003178:	6ce5      	ldr	r5, [r4, #76]	@ 0x4c
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800317a:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800317e:	f021 0106 	bic.w	r1, r1, #6
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003182:	432b      	orrs	r3, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003184:	430b      	orrs	r3, r1
 8003186:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003188:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 800318c:	2b01      	cmp	r3, #1
 800318e:	d036      	beq.n	80031fe <HAL_ADC_Init+0x182>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003190:	6913      	ldr	r3, [r2, #16]
 8003192:	f023 0301 	bic.w	r3, r3, #1
 8003196:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003198:	6923      	ldr	r3, [r4, #16]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d01a      	beq.n	80031d4 <HAL_ADC_Init+0x158>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800319e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80031a0:	f023 030f 	bic.w	r3, r3, #15
 80031a4:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80031a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80031a8:	f023 0303 	bic.w	r3, r3, #3
 80031ac:	f043 0301 	orr.w	r3, r3, #1
 80031b0:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80031b2:	b003      	add	sp, #12
 80031b4:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80031b8:	f043 0310 	orr.w	r3, r3, #16
 80031bc:	65a3      	str	r3, [r4, #88]	@ 0x58
    return HAL_ERROR;
 80031be:	2001      	movs	r0, #1
}
 80031c0:	b003      	add	sp, #12
 80031c2:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031c4:	2000      	movs	r0, #0
 80031c6:	e797      	b.n	80030f8 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 80031c8:	f7fd fee8 	bl	8000f9c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80031cc:	65e5      	str	r5, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80031ce:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
 80031d2:	e75f      	b.n	8003094 <HAL_ADC_Init+0x18>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80031d4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80031d6:	69e3      	ldr	r3, [r4, #28]
 80031d8:	f021 010f 	bic.w	r1, r1, #15
 80031dc:	3b01      	subs	r3, #1
 80031de:	430b      	orrs	r3, r1
 80031e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031e2:	e7e0      	b.n	80031a6 <HAL_ADC_Init+0x12a>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031e4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80031e6:	3901      	subs	r1, #1
 80031e8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 80031ec:	e7ae      	b.n	800314c <HAL_ADC_Init+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80031ee:	4911      	ldr	r1, [pc, #68]	@ (8003234 <HAL_ADC_Init+0x1b8>)
 80031f0:	6865      	ldr	r5, [r4, #4]
 80031f2:	688b      	ldr	r3, [r1, #8]
 80031f4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 80031f8:	432b      	orrs	r3, r5
 80031fa:	608b      	str	r3, [r1, #8]
}
 80031fc:	e798      	b.n	8003130 <HAL_ADC_Init+0xb4>
        MODIFY_REG(hadc->Instance->CFGR2,
 80031fe:	6911      	ldr	r1, [r2, #16]
 8003200:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003202:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 8003204:	f36f 018a 	bfc	r1, #2, #9
 8003208:	432b      	orrs	r3, r5
 800320a:	430b      	orrs	r3, r1
 800320c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800320e:	430b      	orrs	r3, r1
 8003210:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003212:	430b      	orrs	r3, r1
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	6113      	str	r3, [r2, #16]
 800321a:	e7bd      	b.n	8003198 <HAL_ADC_Init+0x11c>
 800321c:	20002c00 	.word	0x20002c00
 8003220:	053e2d63 	.word	0x053e2d63
 8003224:	50040000 	.word	0x50040000
 8003228:	50040100 	.word	0x50040100
 800322c:	50040200 	.word	0x50040200
 8003230:	fff0c007 	.word	0xfff0c007
 8003234:	50040300 	.word	0x50040300

08003238 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003238:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800323a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800323c:	f7fd ffca 	bl	80011d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003240:	bd08      	pop	{r3, pc}
 8003242:	bf00      	nop

08003244 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop

08003248 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003248:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800324a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800324c:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 8003250:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003252:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003254:	d11d      	bne.n	8003292 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003256:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003258:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800325c:	659a      	str	r2, [r3, #88]	@ 0x58
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800325e:	680a      	ldr	r2, [r1, #0]
 8003260:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003264:	68ca      	ldr	r2, [r1, #12]
 8003266:	d01b      	beq.n	80032a0 <ADC_DMAConvCplt+0x58>
 8003268:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 800326c:	d10d      	bne.n	800328a <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800326e:	68ca      	ldr	r2, [r1, #12]
 8003270:	0494      	lsls	r4, r2, #18
 8003272:	d40a      	bmi.n	800328a <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003274:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003276:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800327a:	659a      	str	r2, [r3, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800327c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800327e:	04d1      	lsls	r1, r2, #19
 8003280:	d403      	bmi.n	800328a <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003282:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003284:	f042 0201 	orr.w	r2, r2, #1
 8003288:	659a      	str	r2, [r3, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 800328a:	4618      	mov	r0, r3
 800328c:	f7fd ff46 	bl	800111c <HAL_ADC_ConvCpltCallback>
}
 8003290:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003292:	06d2      	lsls	r2, r2, #27
 8003294:	d40a      	bmi.n	80032ac <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003296:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
}
 8003298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800329c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800329e:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80032a0:	0790      	lsls	r0, r2, #30
 80032a2:	d5e7      	bpl.n	8003274 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fd ff39 	bl	800111c <HAL_ADC_ConvCpltCallback>
 80032aa:	e7f1      	b.n	8003290 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff ffc9 	bl	8003244 <HAL_ADC_ErrorCallback>
}
 80032b2:	bd10      	pop	{r4, pc}

080032b4 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032b4:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 80032b6:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80032b8:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80032ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032be:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80032c0:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80032c2:	f043 0304 	orr.w	r3, r3, #4
 80032c6:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80032c8:	f7ff ffbc 	bl	8003244 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80032cc:	bd08      	pop	{r3, pc}
 80032ce:	bf00      	nop

080032d0 <HAL_ADC_ConfigChannel>:
{
 80032d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hadc);
 80032d4:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
{
 80032d8:	b082      	sub	sp, #8
 80032da:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80032dc:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 80032de:	f04f 0000 	mov.w	r0, #0
 80032e2:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80032e4:	f000 812f 	beq.w	8003546 <HAL_ADC_ConfigChannel+0x276>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032e8:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 80032ea:	2001      	movs	r0, #1
 80032ec:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032f0:	68a2      	ldr	r2, [r4, #8]
 80032f2:	f012 0c04 	ands.w	ip, r2, #4
 80032f6:	d155      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0xd4>
    uint32_t config_rank = pConfig->Rank;
 80032f8:	6848      	ldr	r0, [r1, #4]
    if (pConfig->Rank <= 5U)
 80032fa:	2805      	cmp	r0, #5
 80032fc:	f240 8096 	bls.w	800342c <HAL_ADC_ConfigChannel+0x15c>
  MODIFY_REG(*preg,
 8003300:	f000 051f 	and.w	r5, r0, #31
 8003304:	f04f 0e1f 	mov.w	lr, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003308:	0982      	lsrs	r2, r0, #6
  MODIFY_REG(*preg,
 800330a:	fa0e fe05 	lsl.w	lr, lr, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800330e:	f002 0c0c 	and.w	ip, r2, #12
  MODIFY_REG(*preg,
 8003312:	ea6f 0e0e 	mvn.w	lr, lr
 8003316:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003318:	f104 0030 	add.w	r0, r4, #48	@ 0x30
  MODIFY_REG(*preg,
 800331c:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8003320:	40aa      	lsls	r2, r5
 8003322:	f850 500c 	ldr.w	r5, [r0, ip]
 8003326:	ea05 050e 	and.w	r5, r5, lr
 800332a:	432a      	orrs	r2, r5
 800332c:	f840 200c 	str.w	r2, [r0, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003330:	68a2      	ldr	r2, [r4, #8]
 8003332:	0757      	lsls	r7, r2, #29
 8003334:	d540      	bpl.n	80033b8 <HAL_ADC_ConfigChannel+0xe8>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003336:	68a2      	ldr	r2, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003338:	680a      	ldr	r2, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800333a:	68a0      	ldr	r0, [r4, #8]
 800333c:	07c5      	lsls	r5, r0, #31
 800333e:	d412      	bmi.n	8003366 <HAL_ADC_ConfigChannel+0x96>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003340:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8003342:	48b2      	ldr	r0, [pc, #712]	@ (800360c <HAL_ADC_ConfigChannel+0x33c>)
 8003344:	f8d4 50b0 	ldr.w	r5, [r4, #176]	@ 0xb0
 8003348:	f006 0718 	and.w	r7, r6, #24
 800334c:	40f8      	lsrs	r0, r7
 800334e:	f3c2 0712 	ubfx	r7, r2, #0, #19
 8003352:	4010      	ands	r0, r2
 8003354:	ea25 0507 	bic.w	r5, r5, r7
 8003358:	4328      	orrs	r0, r5
 800335a:	f8c4 00b0 	str.w	r0, [r4, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800335e:	48ac      	ldr	r0, [pc, #688]	@ (8003610 <HAL_ADC_ConfigChannel+0x340>)
 8003360:	4286      	cmp	r6, r0
 8003362:	f000 80a0 	beq.w	80034a6 <HAL_ADC_ConfigChannel+0x1d6>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003366:	49ab      	ldr	r1, [pc, #684]	@ (8003614 <HAL_ADC_ConfigChannel+0x344>)
 8003368:	420a      	tst	r2, r1
 800336a:	d019      	beq.n	80033a0 <HAL_ADC_ConfigChannel+0xd0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800336c:	48aa      	ldr	r0, [pc, #680]	@ (8003618 <HAL_ADC_ConfigChannel+0x348>)
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800336e:	4dab      	ldr	r5, [pc, #684]	@ (800361c <HAL_ADC_ConfigChannel+0x34c>)
 8003370:	6881      	ldr	r1, [r0, #8]
 8003372:	42aa      	cmp	r2, r5
 8003374:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8003378:	d06e      	beq.n	8003458 <HAL_ADC_ConfigChannel+0x188>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800337a:	4da9      	ldr	r5, [pc, #676]	@ (8003620 <HAL_ADC_ConfigChannel+0x350>)
 800337c:	42aa      	cmp	r2, r5
 800337e:	f000 80e6 	beq.w	800354e <HAL_ADC_ConfigChannel+0x27e>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003382:	4da8      	ldr	r5, [pc, #672]	@ (8003624 <HAL_ADC_ConfigChannel+0x354>)
 8003384:	42aa      	cmp	r2, r5
 8003386:	d10b      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0xd0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003388:	024a      	lsls	r2, r1, #9
 800338a:	d409      	bmi.n	80033a0 <HAL_ADC_ConfigChannel+0xd0>
        if (ADC_VREFINT_INSTANCE(hadc))
 800338c:	4aa6      	ldr	r2, [pc, #664]	@ (8003628 <HAL_ADC_ConfigChannel+0x358>)
 800338e:	4294      	cmp	r4, r2
 8003390:	d106      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003392:	6882      	ldr	r2, [r0, #8]
 8003394:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003398:	4332      	orrs	r2, r6
 800339a:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800339e:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033a0:	2000      	movs	r0, #0
 80033a2:	e003      	b.n	80033ac <HAL_ADC_ConfigChannel+0xdc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80033a6:	f042 0220 	orr.w	r2, r2, #32
 80033aa:	659a      	str	r2, [r3, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 80033b2:	b002      	add	sp, #8
 80033b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80033b8:	68a0      	ldr	r0, [r4, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80033ba:	680a      	ldr	r2, [r1, #0]
 80033bc:	0706      	lsls	r6, r0, #28
 80033be:	d4bc      	bmi.n	800333a <HAL_ADC_ConfigChannel+0x6a>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80033c0:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 80033c2:	f3c2 5604 	ubfx	r6, r2, #20, #5
 80033c6:	2007      	movs	r0, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80033c8:	0dd2      	lsrs	r2, r2, #23
  MODIFY_REG(*preg,
 80033ca:	40b0      	lsls	r0, r6
 80033cc:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80033d0:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 80033d4:	ea6f 0000 	mvn.w	r0, r0
 80033d8:	f000 810d 	beq.w	80035f6 <HAL_ADC_ConfigChannel+0x326>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80033dc:	f104 0714 	add.w	r7, r4, #20
  MODIFY_REG(*preg,
 80033e0:	40b5      	lsls	r5, r6
 80033e2:	58be      	ldr	r6, [r7, r2]
 80033e4:	4030      	ands	r0, r6
 80033e6:	4328      	orrs	r0, r5
 80033e8:	50b8      	str	r0, [r7, r2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80033ea:	6962      	ldr	r2, [r4, #20]
 80033ec:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80033f0:	6162      	str	r2, [r4, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80033f2:	e9d1 6004 	ldrd	r6, r0, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80033f6:	680a      	ldr	r2, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80033f8:	68e5      	ldr	r5, [r4, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033fa:	2e04      	cmp	r6, #4
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80033fc:	4617      	mov	r7, r2
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033fe:	f000 80ce 	beq.w	800359e <HAL_ADC_ConfigChannel+0x2ce>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003402:	f104 0760 	add.w	r7, r4, #96	@ 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003406:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 800340a:	006d      	lsls	r5, r5, #1
  MODIFY_REG(*preg,
 800340c:	f857 c026 	ldr.w	ip, [r7, r6, lsl #2]
 8003410:	40a8      	lsls	r0, r5
 8003412:	4d86      	ldr	r5, [pc, #536]	@ (800362c <HAL_ADC_ConfigChannel+0x35c>)
 8003414:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8003418:	ea0c 0505 	and.w	r5, ip, r5
 800341c:	4315      	orrs	r5, r2
 800341e:	4328      	orrs	r0, r5
 8003420:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8003424:	f847 0026 	str.w	r0, [r7, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003428:	680a      	ldr	r2, [r1, #0]
}
 800342a:	e786      	b.n	800333a <HAL_ADC_ConfigChannel+0x6a>
      switch (pConfig->Rank)
 800342c:	3802      	subs	r0, #2
 800342e:	2803      	cmp	r0, #3
 8003430:	d903      	bls.n	800343a <HAL_ADC_ConfigChannel+0x16a>
    if (pConfig->Rank <= 5U)
 8003432:	f46f 6ef8 	mvn.w	lr, #1984	@ 0x7c0
 8003436:	2506      	movs	r5, #6
 8003438:	e76d      	b.n	8003316 <HAL_ADC_ConfigChannel+0x46>
 800343a:	4a7d      	ldr	r2, [pc, #500]	@ (8003630 <HAL_ADC_ConfigChannel+0x360>)
 800343c:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
  MODIFY_REG(*preg,
 8003440:	f04f 0e1f 	mov.w	lr, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003444:	09aa      	lsrs	r2, r5, #6
  MODIFY_REG(*preg,
 8003446:	f005 051f 	and.w	r5, r5, #31
 800344a:	fa0e fe05 	lsl.w	lr, lr, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800344e:	f002 0c0c 	and.w	ip, r2, #12
  MODIFY_REG(*preg,
 8003452:	ea6f 0e0e 	mvn.w	lr, lr
 8003456:	e75e      	b.n	8003316 <HAL_ADC_ConfigChannel+0x46>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003458:	0208      	lsls	r0, r1, #8
 800345a:	d4a1      	bmi.n	80033a0 <HAL_ADC_ConfigChannel+0xd0>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800345c:	4a72      	ldr	r2, [pc, #456]	@ (8003628 <HAL_ADC_ConfigChannel+0x358>)
 800345e:	4294      	cmp	r4, r2
 8003460:	d003      	beq.n	800346a <HAL_ADC_ConfigChannel+0x19a>
 8003462:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8003466:	4294      	cmp	r4, r2
 8003468:	d19a      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800346a:	496b      	ldr	r1, [pc, #428]	@ (8003618 <HAL_ADC_ConfigChannel+0x348>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800346c:	4871      	ldr	r0, [pc, #452]	@ (8003634 <HAL_ADC_ConfigChannel+0x364>)
 800346e:	688a      	ldr	r2, [r1, #8]
 8003470:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003474:	4332      	orrs	r2, r6
 8003476:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800347a:	608a      	str	r2, [r1, #8]
 800347c:	6802      	ldr	r2, [r0, #0]
 800347e:	496e      	ldr	r1, [pc, #440]	@ (8003638 <HAL_ADC_ConfigChannel+0x368>)
 8003480:	0992      	lsrs	r2, r2, #6
 8003482:	fba1 1202 	umull	r1, r2, r1, r2
 8003486:	0992      	lsrs	r2, r2, #6
 8003488:	3201      	adds	r2, #1
 800348a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800348e:	0092      	lsls	r2, r2, #2
 8003490:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003492:	9a01      	ldr	r2, [sp, #4]
 8003494:	2a00      	cmp	r2, #0
 8003496:	d083      	beq.n	80033a0 <HAL_ADC_ConfigChannel+0xd0>
            wait_loop_index--;
 8003498:	9a01      	ldr	r2, [sp, #4]
 800349a:	3a01      	subs	r2, #1
 800349c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800349e:	9a01      	ldr	r2, [sp, #4]
 80034a0:	2a00      	cmp	r2, #0
 80034a2:	d1f9      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x1c8>
 80034a4:	e77c      	b.n	80033a0 <HAL_ADC_ConfigChannel+0xd0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034a6:	2f00      	cmp	r7, #0
 80034a8:	d065      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x2a6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80034ae:	2800      	cmp	r0, #0
 80034b0:	f000 80c4 	beq.w	800363c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80034b4:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034b8:	3001      	adds	r0, #1
 80034ba:	f000 001f 	and.w	r0, r0, #31
 80034be:	2809      	cmp	r0, #9
 80034c0:	f240 80bc 	bls.w	800363c <HAL_ADC_ConfigChannel+0x36c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c4:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80034c8:	2800      	cmp	r0, #0
 80034ca:	f000 815d 	beq.w	8003788 <HAL_ADC_ConfigChannel+0x4b8>
  return __builtin_clz(value);
 80034ce:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80034d2:	3001      	adds	r0, #1
 80034d4:	0680      	lsls	r0, r0, #26
 80034d6:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034da:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80034de:	2d00      	cmp	r5, #0
 80034e0:	f000 815c 	beq.w	800379c <HAL_ADC_ConfigChannel+0x4cc>
  return __builtin_clz(value);
 80034e4:	fab5 f585 	clz	r5, r5
 80034e8:	3501      	adds	r5, #1
 80034ea:	f005 051f 	and.w	r5, r5, #31
 80034ee:	2601      	movs	r6, #1
 80034f0:	fa06 f505 	lsl.w	r5, r6, r5
 80034f4:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80034fa:	2a00      	cmp	r2, #0
 80034fc:	f000 814c 	beq.w	8003798 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003500:	fab2 f282 	clz	r2, r2
 8003504:	1c55      	adds	r5, r2, #1
 8003506:	f005 051f 	and.w	r5, r5, #31
 800350a:	2203      	movs	r2, #3
 800350c:	f06f 061d 	mvn.w	r6, #29
 8003510:	fb12 6205 	smlabb	r2, r2, r5, r6
 8003514:	0512      	lsls	r2, r2, #20
 8003516:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800351a:	4302      	orrs	r2, r0
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800351c:	0dd6      	lsrs	r6, r2, #23
  MODIFY_REG(*preg,
 800351e:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003520:	f006 0604 	and.w	r6, r6, #4
 8003524:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 8003528:	f3c2 5204 	ubfx	r2, r2, #20, #5
 800352c:	fa00 f702 	lsl.w	r7, r0, r2
 8003530:	f04f 0c07 	mov.w	ip, #7
 8003534:	59a8      	ldr	r0, [r5, r6]
 8003536:	fa0c f202 	lsl.w	r2, ip, r2
 800353a:	ea20 0202 	bic.w	r2, r0, r2
 800353e:	433a      	orrs	r2, r7
 8003540:	51aa      	str	r2, [r5, r6]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003542:	680a      	ldr	r2, [r1, #0]
}
 8003544:	e70f      	b.n	8003366 <HAL_ADC_ConfigChannel+0x96>
  __HAL_LOCK(hadc);
 8003546:	2002      	movs	r0, #2
}
 8003548:	b002      	add	sp, #8
 800354a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800354e:	01c9      	lsls	r1, r1, #7
 8003550:	f53f af26 	bmi.w	80033a0 <HAL_ADC_ConfigChannel+0xd0>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003554:	4a34      	ldr	r2, [pc, #208]	@ (8003628 <HAL_ADC_ConfigChannel+0x358>)
 8003556:	4294      	cmp	r4, r2
 8003558:	d004      	beq.n	8003564 <HAL_ADC_ConfigChannel+0x294>
 800355a:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800355e:	4294      	cmp	r4, r2
 8003560:	f47f af1e 	bne.w	80033a0 <HAL_ADC_ConfigChannel+0xd0>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003564:	492c      	ldr	r1, [pc, #176]	@ (8003618 <HAL_ADC_ConfigChannel+0x348>)
 8003566:	688a      	ldr	r2, [r1, #8]
 8003568:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800356c:	4332      	orrs	r2, r6
 800356e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003572:	608a      	str	r2, [r1, #8]
}
 8003574:	e714      	b.n	80033a0 <HAL_ADC_ConfigChannel+0xd0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003576:	0e92      	lsrs	r2, r2, #26
 8003578:	3201      	adds	r2, #1
 800357a:	f002 051f 	and.w	r5, r2, #31
 800357e:	2001      	movs	r0, #1
 8003580:	0692      	lsls	r2, r2, #26
 8003582:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
 8003586:	40a8      	lsls	r0, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003588:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800358a:	ea40 0002 	orr.w	r0, r0, r2
 800358e:	eb05 0245 	add.w	r2, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003592:	d978      	bls.n	8003686 <HAL_ADC_ConfigChannel+0x3b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003594:	3a1e      	subs	r2, #30
 8003596:	0512      	lsls	r2, r2, #20
 8003598:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800359c:	e7bd      	b.n	800351a <HAL_ADC_ConfigChannel+0x24a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800359e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80035a0:	6e20      	ldr	r0, [r4, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035a2:	f3c2 0512 	ubfx	r5, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035a6:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035aa:	2d00      	cmp	r5, #0
 80035ac:	d16d      	bne.n	800368a <HAL_ADC_ConfigChannel+0x3ba>
 80035ae:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80035b2:	4290      	cmp	r0, r2
 80035b4:	f000 80a1 	beq.w	80036fa <HAL_ADC_ConfigChannel+0x42a>
 80035b8:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80035ba:	6e65      	ldr	r5, [r4, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035bc:	f104 0060 	add.w	r0, r4, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035c0:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80035c4:	f104 0e64 	add.w	lr, r4, #100	@ 0x64
 80035c8:	4295      	cmp	r5, r2
 80035ca:	f000 80c1 	beq.w	8003750 <HAL_ADC_ConfigChannel+0x480>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80035ce:	6885      	ldr	r5, [r0, #8]
 80035d0:	6885      	ldr	r5, [r0, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035d2:	f100 0c08 	add.w	ip, r0, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035d6:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80035da:	4295      	cmp	r5, r2
 80035dc:	f000 80a2 	beq.w	8003724 <HAL_ADC_ConfigChannel+0x454>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80035e0:	68c5      	ldr	r5, [r0, #12]
 80035e2:	68c5      	ldr	r5, [r0, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035e4:	f100 060c 	add.w	r6, r0, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035e8:	f3c5 6084 	ubfx	r0, r5, #26, #5
 80035ec:	4282      	cmp	r2, r0
 80035ee:	f000 80c5 	beq.w	800377c <HAL_ADC_ConfigChannel+0x4ac>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80035f2:	463a      	mov	r2, r7
 80035f4:	e6a1      	b.n	800333a <HAL_ADC_ConfigChannel+0x6a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80035f6:	f104 0614 	add.w	r6, r4, #20
  MODIFY_REG(*preg,
 80035fa:	58b5      	ldr	r5, [r6, r2]
 80035fc:	4028      	ands	r0, r5
 80035fe:	50b0      	str	r0, [r6, r2]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003600:	6962      	ldr	r2, [r4, #20]
 8003602:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003606:	6162      	str	r2, [r4, #20]
}
 8003608:	e6f3      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x122>
 800360a:	bf00      	nop
 800360c:	0007ffff 	.word	0x0007ffff
 8003610:	407f0000 	.word	0x407f0000
 8003614:	80080000 	.word	0x80080000
 8003618:	50040300 	.word	0x50040300
 800361c:	c7520000 	.word	0xc7520000
 8003620:	cb840000 	.word	0xcb840000
 8003624:	80000001 	.word	0x80000001
 8003628:	50040000 	.word	0x50040000
 800362c:	03fff000 	.word	0x03fff000
 8003630:	0800a684 	.word	0x0800a684
 8003634:	20002c00 	.word	0x20002c00
 8003638:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8003640:	2800      	cmp	r0, #0
 8003642:	f000 80b7 	beq.w	80037b4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003646:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800364a:	3001      	adds	r0, #1
 800364c:	0680      	lsls	r0, r0, #26
 800364e:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003652:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8003656:	2d00      	cmp	r5, #0
 8003658:	f000 80aa 	beq.w	80037b0 <HAL_ADC_ConfigChannel+0x4e0>
  return __builtin_clz(value);
 800365c:	fab5 f585 	clz	r5, r5
 8003660:	3501      	adds	r5, #1
 8003662:	f005 051f 	and.w	r5, r5, #31
 8003666:	2601      	movs	r6, #1
 8003668:	fa06 f505 	lsl.w	r5, r6, r5
 800366c:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8003672:	2a00      	cmp	r2, #0
 8003674:	f000 8099 	beq.w	80037aa <HAL_ADC_ConfigChannel+0x4da>
  return __builtin_clz(value);
 8003678:	fab2 f282 	clz	r2, r2
 800367c:	3201      	adds	r2, #1
 800367e:	f002 021f 	and.w	r2, r2, #31
 8003682:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003686:	0512      	lsls	r2, r2, #20
 8003688:	e747      	b.n	800351a <HAL_ADC_ConfigChannel+0x24a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800368e:	b11d      	cbz	r5, 8003698 <HAL_ADC_ConfigChannel+0x3c8>
  return __builtin_clz(value);
 8003690:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003694:	42a8      	cmp	r0, r5
 8003696:	d030      	beq.n	80036fa <HAL_ADC_ConfigChannel+0x42a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003698:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 800369a:	6e65      	ldr	r5, [r4, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800369c:	f104 0060 	add.w	r0, r4, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036a0:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80036a4:	f104 0e64 	add.w	lr, r4, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a8:	fa97 f6a7 	rbit	r6, r7
 80036ac:	f100 0c08 	add.w	ip, r0, #8
 80036b0:	46e0      	mov	r8, ip
  if (value == 0U)
 80036b2:	2e00      	cmp	r6, #0
 80036b4:	d074      	beq.n	80037a0 <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 80036b6:	fab6 f686 	clz	r6, r6
 80036ba:	42ae      	cmp	r6, r5
 80036bc:	d04a      	beq.n	8003754 <HAL_ADC_ConfigChannel+0x484>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80036be:	f8dc 5000 	ldr.w	r5, [ip]
 80036c2:	f8dc 5000 	ldr.w	r5, [ip]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80036c6:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	fa97 fea7 	rbit	lr, r7
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036ce:	f100 060c 	add.w	r6, r0, #12
 80036d2:	46b0      	mov	r8, r6
  if (value == 0U)
 80036d4:	f1be 0f00 	cmp.w	lr, #0
 80036d8:	d059      	beq.n	800378e <HAL_ADC_ConfigChannel+0x4be>
  return __builtin_clz(value);
 80036da:	fabe fe8e 	clz	lr, lr
 80036de:	45ae      	cmp	lr, r5
 80036e0:	d022      	beq.n	8003728 <HAL_ADC_ConfigChannel+0x458>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80036e2:	6830      	ldr	r0, [r6, #0]
 80036e4:	6830      	ldr	r0, [r6, #0]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036e6:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	fa97 f5a7 	rbit	r5, r7
  if (value == 0U)
 80036ee:	2d00      	cmp	r5, #0
 80036f0:	f43f ae23 	beq.w	800333a <HAL_ADC_ConfigChannel+0x6a>
  return __builtin_clz(value);
 80036f4:	fab5 f285 	clz	r2, r5
 80036f8:	e778      	b.n	80035ec <HAL_ADC_ConfigChannel+0x31c>
  MODIFY_REG(*preg,
 80036fa:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 80036fc:	4620      	mov	r0, r4
 80036fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003702:	f840 2f60 	str.w	r2, [r0, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003706:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003708:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800370a:	6e65      	ldr	r5, [r4, #100]	@ 0x64
 800370c:	f3c7 0612 	ubfx	r6, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003710:	f104 0e64 	add.w	lr, r4, #100	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003714:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003718:	463a      	mov	r2, r7
 800371a:	2e00      	cmp	r6, #0
 800371c:	d1c4      	bne.n	80036a8 <HAL_ADC_ConfigChannel+0x3d8>
 800371e:	f3c7 6284 	ubfx	r2, r7, #26, #5
 8003722:	e751      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x2f8>
 8003724:	f100 080c 	add.w	r8, r0, #12
  MODIFY_REG(*preg,
 8003728:	f8dc 2000 	ldr.w	r2, [ip]
 800372c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003730:	f8cc 2000 	str.w	r2, [ip]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003734:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003736:	68c2      	ldr	r2, [r0, #12]
 8003738:	68c0      	ldr	r0, [r0, #12]
 800373a:	f3c7 0512 	ubfx	r5, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800373e:	4646      	mov	r6, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003740:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003744:	463a      	mov	r2, r7
 8003746:	2d00      	cmp	r5, #0
 8003748:	d1cf      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x41a>
 800374a:	f3c7 6284 	ubfx	r2, r7, #26, #5
 800374e:	e74d      	b.n	80035ec <HAL_ADC_ConfigChannel+0x31c>
 8003750:	f100 0808 	add.w	r8, r0, #8
  MODIFY_REG(*preg,
 8003754:	f8de 2000 	ldr.w	r2, [lr]
 8003758:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800375c:	f8ce 2000 	str.w	r2, [lr]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003760:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003762:	6882      	ldr	r2, [r0, #8]
 8003764:	6885      	ldr	r5, [r0, #8]
 8003766:	f3c7 0612 	ubfx	r6, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800376a:	46c4      	mov	ip, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800376c:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003770:	463a      	mov	r2, r7
 8003772:	2e00      	cmp	r6, #0
 8003774:	d1a9      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x3fa>
 8003776:	f3c7 6284 	ubfx	r2, r7, #26, #5
 800377a:	e72e      	b.n	80035da <HAL_ADC_ConfigChannel+0x30a>
  MODIFY_REG(*preg,
 800377c:	6832      	ldr	r2, [r6, #0]
 800377e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003782:	6032      	str	r2, [r6, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003784:	680a      	ldr	r2, [r1, #0]
}
 8003786:	e5d8      	b.n	800333a <HAL_ADC_ConfigChannel+0x6a>
 8003788:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800378c:	e6a5      	b.n	80034da <HAL_ADC_ConfigChannel+0x20a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800378e:	68c5      	ldr	r5, [r0, #12]
 8003790:	68c0      	ldr	r0, [r0, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003792:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8003796:	e7a8      	b.n	80036ea <HAL_ADC_ConfigChannel+0x41a>
 8003798:	4a08      	ldr	r2, [pc, #32]	@ (80037bc <HAL_ADC_ConfigChannel+0x4ec>)
 800379a:	e6be      	b.n	800351a <HAL_ADC_ConfigChannel+0x24a>
 800379c:	2502      	movs	r5, #2
 800379e:	e6a9      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x224>
 80037a0:	6885      	ldr	r5, [r0, #8]
 80037a2:	6885      	ldr	r5, [r0, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037a4:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80037a8:	e78f      	b.n	80036ca <HAL_ADC_ConfigChannel+0x3fa>
 80037aa:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80037ae:	e6b4      	b.n	800351a <HAL_ADC_ConfigChannel+0x24a>
 80037b0:	2502      	movs	r5, #2
 80037b2:	e75b      	b.n	800366c <HAL_ADC_ConfigChannel+0x39c>
 80037b4:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80037b8:	e74b      	b.n	8003652 <HAL_ADC_ConfigChannel+0x382>
 80037ba:	bf00      	nop
 80037bc:	fe500000 	.word	0xfe500000

080037c0 <ADC_ConversionStop>:
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037c0:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	f012 0f04 	tst.w	r2, #4
{
 80037c8:	b570      	push	{r4, r5, r6, lr}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037ce:	d101      	bne.n	80037d4 <ADC_ConversionStop+0x14>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80037d0:	0716      	lsls	r6, r2, #28
 80037d2:	d53c      	bpl.n	800384e <ADC_ConversionStop+0x8e>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	0195      	lsls	r5, r2, #6
 80037d8:	d504      	bpl.n	80037e4 <ADC_ConversionStop+0x24>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80037da:	8b20      	ldrh	r0, [r4, #24]
 80037dc:	f240 1201 	movw	r2, #257	@ 0x101
 80037e0:	4290      	cmp	r0, r2
 80037e2:	d045      	beq.n	8003870 <ADC_ConversionStop+0xb0>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80037e4:	2902      	cmp	r1, #2
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	d033      	beq.n	8003852 <ADC_ConversionStop+0x92>
 80037ea:	0750      	lsls	r0, r2, #29
 80037ec:	d502      	bpl.n	80037f4 <ADC_ConversionStop+0x34>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	0792      	lsls	r2, r2, #30
 80037f2:	d559      	bpl.n	80038a8 <ADC_ConversionStop+0xe8>
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80037f4:	2901      	cmp	r1, #1
 80037f6:	d055      	beq.n	80038a4 <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	0710      	lsls	r0, r2, #28
 80037fc:	d50a      	bpl.n	8003814 <ADC_ConversionStop+0x54>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	0792      	lsls	r2, r2, #30
 8003802:	d407      	bmi.n	8003814 <ADC_ConversionStop+0x54>
  MODIFY_REG(ADCx->CR,
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800380a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800380e:	f042 0220 	orr.w	r2, r2, #32
 8003812:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8003814:	2903      	cmp	r1, #3
 8003816:	d145      	bne.n	80038a4 <ADC_ConversionStop+0xe4>
 8003818:	250c      	movs	r5, #12
    tickstart = HAL_GetTick();
 800381a:	f7ff fc17 	bl	800304c <HAL_GetTick>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800381e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003820:	4606      	mov	r6, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	421d      	tst	r5, r3
 8003826:	d012      	beq.n	800384e <ADC_ConversionStop+0x8e>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003828:	f7ff fc10 	bl	800304c <HAL_GetTick>
 800382c:	1b80      	subs	r0, r0, r6
 800382e:	2805      	cmp	r0, #5
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003830:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003832:	d9f6      	bls.n	8003822 <ADC_ConversionStop+0x62>
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	422a      	tst	r2, r5
 8003838:	d0f3      	beq.n	8003822 <ADC_ConversionStop+0x62>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800383a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800383c:	f043 0310 	orr.w	r3, r3, #16
 8003840:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003842:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	65e3      	str	r3, [r4, #92]	@ 0x5c
          return HAL_ERROR;
 800384a:	2001      	movs	r0, #1
}
 800384c:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800384e:	2000      	movs	r0, #0
}
 8003850:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003852:	0716      	lsls	r6, r2, #28
 8003854:	d50a      	bpl.n	800386c <ADC_ConversionStop+0xac>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	0795      	lsls	r5, r2, #30
 800385a:	d407      	bmi.n	800386c <ADC_ConversionStop+0xac>
  MODIFY_REG(ADCx->CR,
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003862:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003866:	f042 0220 	orr.w	r2, r2, #32
 800386a:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800386c:	2508      	movs	r5, #8
 800386e:	e7d4      	b.n	800381a <ADC_ConversionStop+0x5a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	0650      	lsls	r0, r2, #25
 8003874:	d406      	bmi.n	8003884 <ADC_ConversionStop+0xc4>
 8003876:	4a11      	ldr	r2, [pc, #68]	@ (80038bc <ADC_ConversionStop+0xfc>)
 8003878:	e001      	b.n	800387e <ADC_ConversionStop+0xbe>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800387a:	3a01      	subs	r2, #1
 800387c:	d0dd      	beq.n	800383a <ADC_ConversionStop+0x7a>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800387e:	6819      	ldr	r1, [r3, #0]
 8003880:	0649      	lsls	r1, r1, #25
 8003882:	d5fa      	bpl.n	800387a <ADC_ConversionStop+0xba>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003884:	2240      	movs	r2, #64	@ 0x40
 8003886:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	0756      	lsls	r6, r2, #29
 800388c:	d50a      	bpl.n	80038a4 <ADC_ConversionStop+0xe4>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	0795      	lsls	r5, r2, #30
 8003892:	d407      	bmi.n	80038a4 <ADC_ConversionStop+0xe4>
  MODIFY_REG(ADCx->CR,
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800389a:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800389e:	f042 0210 	orr.w	r2, r2, #16
 80038a2:	609a      	str	r2, [r3, #8]
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80038a4:	2504      	movs	r5, #4
 80038a6:	e7b8      	b.n	800381a <ADC_ConversionStop+0x5a>
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038ae:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80038b2:	f042 0210 	orr.w	r2, r2, #16
 80038b6:	609a      	str	r2, [r3, #8]
}
 80038b8:	e79c      	b.n	80037f4 <ADC_ConversionStop+0x34>
 80038ba:	bf00      	nop
 80038bc:	a3400000 	.word	0xa3400000

080038c0 <ADC_Enable>:
{
 80038c0:	b570      	push	{r4, r5, r6, lr}
 80038c2:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80038c4:	2200      	movs	r2, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038c6:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 80038c8:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	07d2      	lsls	r2, r2, #31
 80038ce:	d42c      	bmi.n	800392a <ADC_Enable+0x6a>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80038d0:	6899      	ldr	r1, [r3, #8]
 80038d2:	4a28      	ldr	r2, [pc, #160]	@ (8003974 <ADC_Enable+0xb4>)
 80038d4:	4211      	tst	r1, r2
 80038d6:	4604      	mov	r4, r0
 80038d8:	d12a      	bne.n	8003930 <ADC_Enable+0x70>
  MODIFY_REG(ADCx->CR,
 80038da:	689a      	ldr	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038dc:	4926      	ldr	r1, [pc, #152]	@ (8003978 <ADC_Enable+0xb8>)
  MODIFY_REG(ADCx->CR,
 80038de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038e2:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80038ec:	688b      	ldr	r3, [r1, #8]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	d429      	bmi.n	8003946 <ADC_Enable+0x86>
    tickstart = HAL_GetTick();
 80038f2:	f7ff fbab 	bl	800304c <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038f6:	6823      	ldr	r3, [r4, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	07d6      	lsls	r6, r2, #31
    tickstart = HAL_GetTick();
 80038fc:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038fe:	d414      	bmi.n	800392a <ADC_Enable+0x6a>
  MODIFY_REG(ADCx->CR,
 8003900:	4e1e      	ldr	r6, [pc, #120]	@ (800397c <ADC_Enable+0xbc>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	07d0      	lsls	r0, r2, #31
 8003906:	d404      	bmi.n	8003912 <ADC_Enable+0x52>
  MODIFY_REG(ADCx->CR,
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	4032      	ands	r2, r6
 800390c:	f042 0201 	orr.w	r2, r2, #1
 8003910:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003912:	f7ff fb9b 	bl	800304c <HAL_GetTick>
 8003916:	1b43      	subs	r3, r0, r5
 8003918:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800391a:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800391c:	d902      	bls.n	8003924 <ADC_Enable+0x64>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	07d1      	lsls	r1, r2, #31
 8003922:	d505      	bpl.n	8003930 <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	07d2      	lsls	r2, r2, #31
 8003928:	d5eb      	bpl.n	8003902 <ADC_Enable+0x42>
  return HAL_OK;
 800392a:	2000      	movs	r0, #0
}
 800392c:	b002      	add	sp, #8
 800392e:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003930:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003932:	f043 0310 	orr.w	r3, r3, #16
 8003936:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003938:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 800393a:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 8003942:	b002      	add	sp, #8
 8003944:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003946:	4b0e      	ldr	r3, [pc, #56]	@ (8003980 <ADC_Enable+0xc0>)
 8003948:	4a0e      	ldr	r2, [pc, #56]	@ (8003984 <ADC_Enable+0xc4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	099b      	lsrs	r3, r3, #6
 800394e:	fba2 2303 	umull	r2, r3, r2, r3
 8003952:	099b      	lsrs	r3, r3, #6
 8003954:	3301      	adds	r3, #1
 8003956:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800395e:	9b01      	ldr	r3, [sp, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0c6      	beq.n	80038f2 <ADC_Enable+0x32>
        wait_loop_index--;
 8003964:	9b01      	ldr	r3, [sp, #4]
 8003966:	3b01      	subs	r3, #1
 8003968:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800396a:	9b01      	ldr	r3, [sp, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1f9      	bne.n	8003964 <ADC_Enable+0xa4>
 8003970:	e7bf      	b.n	80038f2 <ADC_Enable+0x32>
 8003972:	bf00      	nop
 8003974:	8000003f 	.word	0x8000003f
 8003978:	50040300 	.word	0x50040300
 800397c:	7fffffc0 	.word	0x7fffffc0
 8003980:	20002c00 	.word	0x20002c00
 8003984:	053e2d63 	.word	0x053e2d63

08003988 <HAL_ADC_Start_DMA>:
{
 8003988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800398c:	4b36      	ldr	r3, [pc, #216]	@ (8003a68 <HAL_ADC_Start_DMA+0xe0>)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800398e:	6806      	ldr	r6, [r0, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
{
 8003992:	460d      	mov	r5, r1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003994:	68b1      	ldr	r1, [r6, #8]
 8003996:	0749      	lsls	r1, r1, #29
 8003998:	d417      	bmi.n	80039ca <HAL_ADC_Start_DMA+0x42>
 800399a:	4617      	mov	r7, r2
    __HAL_LOCK(hadc);
 800399c:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 80039a0:	2a01      	cmp	r2, #1
 80039a2:	4604      	mov	r4, r0
 80039a4:	d011      	beq.n	80039ca <HAL_ADC_Start_DMA+0x42>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80039a6:	f003 081f 	and.w	r8, r3, #31
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80039aa:	4b30      	ldr	r3, [pc, #192]	@ (8003a6c <HAL_ADC_Start_DMA+0xe4>)
    __HAL_LOCK(hadc);
 80039ac:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80039ae:	429e      	cmp	r6, r3
    __HAL_LOCK(hadc);
 80039b0:	f884 0054 	strb.w	r0, [r4, #84]	@ 0x54
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80039b4:	d00c      	beq.n	80039d0 <HAL_ADC_Start_DMA+0x48>
 80039b6:	f240 2121 	movw	r1, #545	@ 0x221
 80039ba:	fa21 f108 	lsr.w	r1, r1, r8
 80039be:	4001      	ands	r1, r0
 80039c0:	d106      	bne.n	80039d0 <HAL_ADC_Start_DMA+0x48>
      __HAL_UNLOCK(hadc);
 80039c2:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
}
 80039c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 80039ca:	2002      	movs	r0, #2
}
 80039cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80039d0:	4620      	mov	r0, r4
 80039d2:	f7ff ff75 	bl	80038c0 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80039d6:	2800      	cmp	r0, #0
 80039d8:	d13c      	bne.n	8003a54 <HAL_ADC_Start_DMA+0xcc>
        ADC_STATE_CLR_SET(hadc->State,
 80039da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039dc:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80039de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80039e2:	f023 0301 	bic.w	r3, r3, #1
 80039e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039ea:	65a3      	str	r3, [r4, #88]	@ 0x58
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80039ec:	4b20      	ldr	r3, [pc, #128]	@ (8003a70 <HAL_ADC_Start_DMA+0xe8>)
 80039ee:	4299      	cmp	r1, r3
 80039f0:	d035      	beq.n	8003a5e <HAL_ADC_Start_DMA+0xd6>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80039f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80039f8:	65a3      	str	r3, [r4, #88]	@ 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80039fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80039fc:	6d20      	ldr	r0, [r4, #80]	@ 0x50
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80039fe:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a02:	bf18      	it	ne
 8003a04:	6de3      	ldrne	r3, [r4, #92]	@ 0x5c
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003a06:	462a      	mov	r2, r5
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a08:	bf18      	it	ne
 8003a0a:	f023 0306 	bicne.w	r3, r3, #6
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a0e:	4d19      	ldr	r5, [pc, #100]	@ (8003a74 <HAL_ADC_Start_DMA+0xec>)
          ADC_CLEAR_ERRORCODE(hadc);
 8003a10:	65e3      	str	r3, [r4, #92]	@ 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a12:	62c5      	str	r5, [r0, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a14:	4d18      	ldr	r5, [pc, #96]	@ (8003a78 <HAL_ADC_Start_DMA+0xf0>)
 8003a16:	6305      	str	r5, [r0, #48]	@ 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a18:	4d18      	ldr	r5, [pc, #96]	@ (8003a7c <HAL_ADC_Start_DMA+0xf4>)
 8003a1a:	6345      	str	r5, [r0, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003a1c:	251c      	movs	r5, #28
 8003a1e:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 8003a20:	2500      	movs	r5, #0
 8003a22:	f884 5054 	strb.w	r5, [r4, #84]	@ 0x54
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a26:	684d      	ldr	r5, [r1, #4]
 8003a28:	f045 0510 	orr.w	r5, r5, #16
 8003a2c:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003a2e:	68cd      	ldr	r5, [r1, #12]
 8003a30:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003a34:	463b      	mov	r3, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003a36:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003a38:	3140      	adds	r1, #64	@ 0x40
 8003a3a:	f000 fc19 	bl	8004270 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003a3e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003a40:	6893      	ldr	r3, [r2, #8]
 8003a42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a46:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a4a:	f043 0304 	orr.w	r3, r3, #4
 8003a4e:	6093      	str	r3, [r2, #8]
}
 8003a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 8003a54:	2300      	movs	r3, #0
 8003a56:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 8003a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a5e:	f1b8 0f00 	cmp.w	r8, #0
 8003a62:	d1ca      	bne.n	80039fa <HAL_ADC_Start_DMA+0x72>
 8003a64:	e7c5      	b.n	80039f2 <HAL_ADC_Start_DMA+0x6a>
 8003a66:	bf00      	nop
 8003a68:	50040300 	.word	0x50040300
 8003a6c:	50040200 	.word	0x50040200
 8003a70:	50040100 	.word	0x50040100
 8003a74:	08003249 	.word	0x08003249
 8003a78:	08003239 	.word	0x08003239
 8003a7c:	080032b5 	.word	0x080032b5

08003a80 <ADC_Disable>:
{
 8003a80:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a82:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	0795      	lsls	r5, r2, #30
 8003a88:	d502      	bpl.n	8003a90 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a8a:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8003a8c:	2000      	movs	r0, #0
}
 8003a8e:	bd38      	pop	{r3, r4, r5, pc}
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	07d4      	lsls	r4, r2, #31
 8003a94:	d5fa      	bpl.n	8003a8c <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	f002 020d 	and.w	r2, r2, #13
 8003a9c:	2a01      	cmp	r2, #1
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	d009      	beq.n	8003ab6 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aa2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003aa4:	f043 0310 	orr.w	r3, r3, #16
 8003aa8:	65a3      	str	r3, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aaa:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8003ab2:	2001      	movs	r0, #1
}
 8003ab4:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003abc:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003ac0:	2103      	movs	r1, #3
 8003ac2:	f042 0202 	orr.w	r2, r2, #2
 8003ac6:	609a      	str	r2, [r3, #8]
 8003ac8:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8003aca:	f7ff fabf 	bl	800304c <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ace:	6823      	ldr	r3, [r4, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 8003ad4:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ad6:	d403      	bmi.n	8003ae0 <ADC_Disable+0x60>
 8003ad8:	e7d8      	b.n	8003a8c <ADC_Disable+0xc>
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	07db      	lsls	r3, r3, #31
 8003ade:	d5d5      	bpl.n	8003a8c <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ae0:	f7ff fab4 	bl	800304c <HAL_GetTick>
 8003ae4:	1b40      	subs	r0, r0, r5
 8003ae6:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ae8:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003aea:	d9f6      	bls.n	8003ada <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	07d2      	lsls	r2, r2, #31
 8003af0:	d5f3      	bpl.n	8003ada <ADC_Disable+0x5a>
 8003af2:	e7d6      	b.n	8003aa2 <ADC_Disable+0x22>

08003af4 <HAL_ADC_Stop_DMA>:
{
 8003af4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hadc);
 8003af6:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d028      	beq.n	8003b50 <HAL_ADC_Stop_DMA+0x5c>
 8003afe:	2301      	movs	r3, #1
 8003b00:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003b04:	2103      	movs	r1, #3
 8003b06:	4604      	mov	r4, r0
 8003b08:	f7ff fe5a 	bl	80037c0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003b0c:	4605      	mov	r5, r0
 8003b0e:	b9d0      	cbnz	r0, 8003b46 <HAL_ADC_Stop_DMA+0x52>
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003b10:	6823      	ldr	r3, [r4, #0]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003b12:	6d20      	ldr	r0, [r4, #80]	@ 0x50
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003b14:	68da      	ldr	r2, [r3, #12]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	60da      	str	r2, [r3, #12]
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003b1c:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003b20:	2a02      	cmp	r2, #2
 8003b22:	d018      	beq.n	8003b56 <HAL_ADC_Stop_DMA+0x62>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	f022 0210 	bic.w	r2, r2, #16
 8003b2a:	605a      	str	r2, [r3, #4]
      tmp_hal_status = ADC_Disable(hadc);
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	f7ff ffa7 	bl	8003a80 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003b32:	4605      	mov	r5, r0
 8003b34:	b938      	cbnz	r0, 8003b46 <HAL_ADC_Stop_DMA+0x52>
      ADC_STATE_CLR_SET(hadc->State,
 8003b36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003b38:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003b3c:	f023 0301 	bic.w	r3, r3, #1
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	65a3      	str	r3, [r4, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8003b46:	2300      	movs	r3, #0
 8003b48:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
}
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hadc);
 8003b50:	2502      	movs	r5, #2
}
 8003b52:	4628      	mov	r0, r5
 8003b54:	bd38      	pop	{r3, r4, r5, pc}
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003b56:	f000 fbcf 	bl	80042f8 <HAL_DMA_Abort>
      if (tmp_hal_status != HAL_OK)
 8003b5a:	4605      	mov	r5, r0
 8003b5c:	b160      	cbz	r0, 8003b78 <HAL_ADC_Stop_DMA+0x84>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003b60:	6822      	ldr	r2, [r4, #0]
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b66:	65a3      	str	r3, [r4, #88]	@ 0x58
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003b68:	6853      	ldr	r3, [r2, #4]
 8003b6a:	f023 0310 	bic.w	r3, r3, #16
      (void)ADC_Disable(hadc);
 8003b6e:	4620      	mov	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003b70:	6053      	str	r3, [r2, #4]
      (void)ADC_Disable(hadc);
 8003b72:	f7ff ff85 	bl	8003a80 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003b76:	e7e6      	b.n	8003b46 <HAL_ADC_Stop_DMA+0x52>
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003b78:	6822      	ldr	r2, [r4, #0]
 8003b7a:	6853      	ldr	r3, [r2, #4]
 8003b7c:	f023 0310 	bic.w	r3, r3, #16
 8003b80:	6053      	str	r3, [r2, #4]
    if (tmp_hal_status == HAL_OK)
 8003b82:	e7d3      	b.n	8003b2c <HAL_ADC_Stop_DMA+0x38>

08003b84 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003b84:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b86:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
{
 8003b8a:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8003b8c:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003b8e:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 8003b90:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8003b92:	d03f      	beq.n	8003c14 <HAL_ADCEx_Calibration_Start+0x90>
 8003b94:	2301      	movs	r3, #1
 8003b96:	f880 3054 	strb.w	r3, [r0, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003b9a:	4604      	mov	r4, r0
 8003b9c:	460d      	mov	r5, r1
 8003b9e:	f7ff ff6f 	bl	8003a80 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ba2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
  if (tmp_hal_status == HAL_OK)
 8003ba4:	b9e0      	cbnz	r0, 8003be0 <HAL_ADCEx_Calibration_Start+0x5c>
    ADC_STATE_CLR_SET(hadc->State,
 8003ba6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003baa:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003bae:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8003bb0:	f043 0302 	orr.w	r3, r3, #2
 8003bb4:	65a3      	str	r3, [r4, #88]	@ 0x58
  MODIFY_REG(ADCx->CR,
 8003bb6:	6893      	ldr	r3, [r2, #8]
 8003bb8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003bbc:	f005 4180 	and.w	r1, r5, #1073741824	@ 0x40000000
 8003bc0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bca:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003bcc:	6893      	ldr	r3, [r2, #8]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	db0e      	blt.n	8003bf0 <HAL_ADCEx_Calibration_Start+0x6c>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003bd4:	f023 0303 	bic.w	r3, r3, #3
 8003bd8:	f043 0301 	orr.w	r3, r3, #1
 8003bdc:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003bde:	e002      	b.n	8003be6 <HAL_ADCEx_Calibration_Start+0x62>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003be0:	f043 0310 	orr.w	r3, r3, #16
 8003be4:	65a3      	str	r3, [r4, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003be6:	2300      	movs	r3, #0
 8003be8:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
}
 8003bec:	b003      	add	sp, #12
 8003bee:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 8003bf0:	9b01      	ldr	r3, [sp, #4]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003bf6:	9b01      	ldr	r3, [sp, #4]
 8003bf8:	f5b3 2f91 	cmp.w	r3, #296960	@ 0x48800
 8003bfc:	d3e6      	bcc.n	8003bcc <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 8003bfe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c00:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 8003c04:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 8003c06:	f043 0310 	orr.w	r3, r3, #16
 8003c0a:	65a3      	str	r3, [r4, #88]	@ 0x58
        __HAL_UNLOCK(hadc);
 8003c0c:	f884 2054 	strb.w	r2, [r4, #84]	@ 0x54
        return HAL_ERROR;
 8003c10:	2001      	movs	r0, #1
 8003c12:	e7eb      	b.n	8003bec <HAL_ADCEx_Calibration_Start+0x68>
  __HAL_LOCK(hadc);
 8003c14:	2002      	movs	r0, #2
}
 8003c16:	b003      	add	sp, #12
 8003c18:	bd30      	pop	{r4, r5, pc}
 8003c1a:	bf00      	nop

08003c1c <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c1c:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 8003c20:	2a01      	cmp	r2, #1
 8003c22:	d049      	beq.n	8003cb8 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
{
 8003c24:	b4f0      	push	{r4, r5, r6, r7}

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003c26:	6804      	ldr	r4, [r0, #0]
 8003c28:	4d30      	ldr	r5, [pc, #192]	@ (8003cec <HAL_ADCEx_MultiModeConfigChannel+0xd0>)
{
 8003c2a:	b09a      	sub	sp, #104	@ 0x68
 8003c2c:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003c2e:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003c30:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003c32:	42ac      	cmp	r4, r5
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003c34:	9216      	str	r2, [sp, #88]	@ 0x58
  __HAL_LOCK(hadc);
 8003c36:	f883 0054 	strb.w	r0, [r3, #84]	@ 0x54
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003c3a:	9217      	str	r2, [sp, #92]	@ 0x5c
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003c3c:	d008      	beq.n	8003c50 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c3e:	6d99      	ldr	r1, [r3, #88]	@ 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c40:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c44:	f041 0120 	orr.w	r1, r1, #32
 8003c48:	6599      	str	r1, [r3, #88]	@ 0x58
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8003c4a:	b01a      	add	sp, #104	@ 0x68
 8003c4c:	bcf0      	pop	{r4, r5, r6, r7}
 8003c4e:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c50:	4a27      	ldr	r2, [pc, #156]	@ (8003cf0 <HAL_ADCEx_MultiModeConfigChannel+0xd4>)
 8003c52:	6890      	ldr	r0, [r2, #8]
 8003c54:	0740      	lsls	r0, r0, #29
 8003c56:	d50b      	bpl.n	8003c70 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 8003c58:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c5a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003c5c:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8003c60:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c62:	659a      	str	r2, [r3, #88]	@ 0x58
  __HAL_UNLOCK(hadc);
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
}
 8003c6a:	b01a      	add	sp, #104	@ 0x68
 8003c6c:	bcf0      	pop	{r4, r5, r6, r7}
 8003c6e:	4770      	bx	lr
 8003c70:	68a0      	ldr	r0, [r4, #8]
 8003c72:	0740      	lsls	r0, r0, #29
 8003c74:	d4f1      	bmi.n	8003c5a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c76:	680d      	ldr	r5, [r1, #0]
 8003c78:	b305      	cbz	r5, 8003cbc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003c7a:	4e1e      	ldr	r6, [pc, #120]	@ (8003cf4 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 8003c7c:	684f      	ldr	r7, [r1, #4]
 8003c7e:	68b0      	ldr	r0, [r6, #8]
 8003c80:	f893 c030 	ldrb.w	ip, [r3, #48]	@ 0x30
 8003c84:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 8003c88:	4338      	orrs	r0, r7
 8003c8a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 8003c8e:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c90:	68a0      	ldr	r0, [r4, #8]
 8003c92:	6892      	ldr	r2, [r2, #8]
 8003c94:	f012 0f01 	tst.w	r2, #1
 8003c98:	4a17      	ldr	r2, [pc, #92]	@ (8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0xdc>)
 8003c9a:	6892      	ldr	r2, [r2, #8]
 8003c9c:	d123      	bne.n	8003ce6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003c9e:	4302      	orrs	r2, r0
 8003ca0:	07d7      	lsls	r7, r2, #31
 8003ca2:	d420      	bmi.n	8003ce6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
        MODIFY_REG(tmpADC_Common->CCR,
 8003ca4:	68b2      	ldr	r2, [r6, #8]
 8003ca6:	6889      	ldr	r1, [r1, #8]
 8003ca8:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8003cac:	430d      	orrs	r5, r1
 8003cae:	f022 020f 	bic.w	r2, r2, #15
 8003cb2:	4315      	orrs	r5, r2
 8003cb4:	60b5      	str	r5, [r6, #8]
 8003cb6:	e016      	b.n	8003ce6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
  __HAL_LOCK(hadc);
 8003cb8:	2002      	movs	r0, #2
}
 8003cba:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003cbc:	480d      	ldr	r0, [pc, #52]	@ (8003cf4 <HAL_ADCEx_MultiModeConfigChannel+0xd8>)
 8003cbe:	6881      	ldr	r1, [r0, #8]
 8003cc0:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8003cc4:	6081      	str	r1, [r0, #8]
 8003cc6:	68a1      	ldr	r1, [r4, #8]
 8003cc8:	6892      	ldr	r2, [r2, #8]
 8003cca:	f012 0f01 	tst.w	r2, #1
 8003cce:	4a0a      	ldr	r2, [pc, #40]	@ (8003cf8 <HAL_ADCEx_MultiModeConfigChannel+0xdc>)
 8003cd0:	6892      	ldr	r2, [r2, #8]
 8003cd2:	d108      	bne.n	8003ce6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	07d4      	lsls	r4, r2, #31
 8003cd8:	d405      	bmi.n	8003ce6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003cda:	6882      	ldr	r2, [r0, #8]
 8003cdc:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8003ce0:	f022 020f 	bic.w	r2, r2, #15
 8003ce4:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	e7bc      	b.n	8003c64 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8003cea:	bf00      	nop
 8003cec:	50040000 	.word	0x50040000
 8003cf0:	50040100 	.word	0x50040100
 8003cf4:	50040300 	.word	0x50040300
 8003cf8:	50040200 	.word	0x50040200

08003cfc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cfc:	4907      	ldr	r1, [pc, #28]	@ (8003d1c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003cfe:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d00:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d02:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d06:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d0a:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d0c:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d0e:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8003d16:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	e000ed00 	.word	0xe000ed00

08003d20 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d20:	4b1b      	ldr	r3, [pc, #108]	@ (8003d90 <HAL_NVIC_SetPriority+0x70>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d28:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d2a:	f1c3 0e07 	rsb	lr, r3, #7
 8003d2e:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d32:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d36:	bf28      	it	cs
 8003d38:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d3c:	f1bc 0f06 	cmp.w	ip, #6
 8003d40:	d91c      	bls.n	8003d7c <HAL_NVIC_SetPriority+0x5c>
 8003d42:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d46:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4a:	fa03 f30c 	lsl.w	r3, r3, ip
 8003d4e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d52:	f04f 33ff 	mov.w	r3, #4294967295
 8003d56:	fa03 f30e 	lsl.w	r3, r3, lr
 8003d5a:	ea21 0303 	bic.w	r3, r1, r3
 8003d5e:	fa03 f30c 	lsl.w	r3, r3, ip
 8003d62:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d64:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8003d66:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d68:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8003d6a:	db0a      	blt.n	8003d82 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d6c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003d70:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8003d74:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003d78:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d7c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d7e:	4694      	mov	ip, r2
 8003d80:	e7e7      	b.n	8003d52 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d82:	4a04      	ldr	r2, [pc, #16]	@ (8003d94 <HAL_NVIC_SetPriority+0x74>)
 8003d84:	f000 000f 	and.w	r0, r0, #15
 8003d88:	4402      	add	r2, r0
 8003d8a:	7613      	strb	r3, [r2, #24]
 8003d8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d90:	e000ed00 	.word	0xe000ed00
 8003d94:	e000ecfc 	.word	0xe000ecfc

08003d98 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003d98:	2800      	cmp	r0, #0
 8003d9a:	db07      	blt.n	8003dac <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d9c:	4a04      	ldr	r2, [pc, #16]	@ (8003db0 <HAL_NVIC_EnableIRQ+0x18>)
 8003d9e:	0941      	lsrs	r1, r0, #5
 8003da0:	2301      	movs	r3, #1
 8003da2:	f000 001f 	and.w	r0, r0, #31
 8003da6:	4083      	lsls	r3, r0
 8003da8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	e000e100 	.word	0xe000e100

08003db4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003db4:	3801      	subs	r0, #1
 8003db6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8003dba:	d301      	bcc.n	8003dc0 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dbc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003dbe:	4770      	bx	lr
{
 8003dc0:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dc2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc6:	4c07      	ldr	r4, [pc, #28]	@ (8003de4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dc8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dca:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8003dce:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dd2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dd4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dd6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dd8:	619a      	str	r2, [r3, #24]
}
 8003dda:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dde:	6119      	str	r1, [r3, #16]
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <CRYP_SetKey>:
  */
static HAL_StatusTypeDef  CRYP_SetKey(CRYP_HandleTypeDef *hcryp)
{
  uint32_t keyaddr;

  if (hcryp->Init.pKey == NULL)
 8003de8:	6a03      	ldr	r3, [r0, #32]
 8003dea:	b32b      	cbz	r3, 8003e38 <CRYP_SetKey+0x50>
{
 8003dec:	b410      	push	{r4}
  }


  keyaddr = (uint32_t)(hcryp->Init.pKey);

  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8003dee:	68c4      	ldr	r4, [r0, #12]
  {
    hcryp->Instance->KEYR7 = __REV(*(uint32_t*)(keyaddr));
 8003df0:	6802      	ldr	r2, [r0, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8003df2:	f5b4 2f80 	cmp.w	r4, #262144	@ 0x40000
  keyaddr = (uint32_t)(hcryp->Init.pKey);
 8003df6:	4619      	mov	r1, r3
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8003df8:	d10e      	bne.n	8003e18 <CRYP_SetKey+0x30>
  return __builtin_bswap32(value);
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	ba00      	rev	r0, r0
    hcryp->Instance->KEYR7 = __REV(*(uint32_t*)(keyaddr));
 8003dfe:	63d0      	str	r0, [r2, #60]	@ 0x3c
 8003e00:	6858      	ldr	r0, [r3, #4]
 8003e02:	ba00      	rev	r0, r0
    keyaddr+=4U;
    hcryp->Instance->KEYR6 = __REV(*(uint32_t*)(keyaddr));
 8003e04:	6390      	str	r0, [r2, #56]	@ 0x38
 8003e06:	6898      	ldr	r0, [r3, #8]
 8003e08:	ba00      	rev	r0, r0
    keyaddr+=4U;
    hcryp->Instance->KEYR5 = __REV(*(uint32_t*)(keyaddr));
 8003e0a:	6350      	str	r0, [r2, #52]	@ 0x34
 8003e0c:	68d8      	ldr	r0, [r3, #12]
    keyaddr+=4U;
    hcryp->Instance->KEYR4 = __REV(*(uint32_t*)(keyaddr));
    keyaddr+=4U;
 8003e0e:	f103 0110 	add.w	r1, r3, #16
 8003e12:	ba00      	rev	r0, r0
  }

  hcryp->Instance->KEYR3 = __REV(*(uint32_t*)(keyaddr));
 8003e14:	460b      	mov	r3, r1
    hcryp->Instance->KEYR4 = __REV(*(uint32_t*)(keyaddr));
 8003e16:	6310      	str	r0, [r2, #48]	@ 0x30
 8003e18:	681b      	ldr	r3, [r3, #0]
  hcryp->Instance->KEYR1 = __REV(*(uint32_t*)(keyaddr));
  keyaddr+=4U;
  hcryp->Instance->KEYR0 = __REV(*(uint32_t*)(keyaddr));

  return HAL_OK;
}
 8003e1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e1e:	ba1b      	rev	r3, r3
  hcryp->Instance->KEYR3 = __REV(*(uint32_t*)(keyaddr));
 8003e20:	61d3      	str	r3, [r2, #28]
 8003e22:	684b      	ldr	r3, [r1, #4]
 8003e24:	ba1b      	rev	r3, r3
  hcryp->Instance->KEYR2 = __REV(*(uint32_t*)(keyaddr));
 8003e26:	6193      	str	r3, [r2, #24]
 8003e28:	688b      	ldr	r3, [r1, #8]
 8003e2a:	ba1b      	rev	r3, r3
  hcryp->Instance->KEYR1 = __REV(*(uint32_t*)(keyaddr));
 8003e2c:	6153      	str	r3, [r2, #20]
 8003e2e:	68cb      	ldr	r3, [r1, #12]
 8003e30:	ba1b      	rev	r3, r3
  return HAL_OK;
 8003e32:	2000      	movs	r0, #0
  hcryp->Instance->KEYR0 = __REV(*(uint32_t*)(keyaddr));
 8003e34:	6113      	str	r3, [r2, #16]
}
 8003e36:	4770      	bx	lr
    return HAL_ERROR;
 8003e38:	2001      	movs	r0, #1
}
 8003e3a:	4770      	bx	lr

08003e3c <HAL_CRYP_Init>:
  if(hcryp == NULL)
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	f000 80a5 	beq.w	8003f8c <HAL_CRYP_Init+0x150>
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 8003e42:	6902      	ldr	r2, [r0, #16]
 8003e44:	2a18      	cmp	r2, #24
{
 8003e46:	b570      	push	{r4, r5, r6, lr}
 8003e48:	4604      	mov	r4, r0
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 8003e4a:	d04d      	beq.n	8003ee8 <HAL_CRYP_Init+0xac>
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003e4c:	2a08      	cmp	r2, #8
 8003e4e:	d03e      	beq.n	8003ece <HAL_CRYP_Init+0x92>
  if(hcryp->State == HAL_CRYP_STATE_RESET)
 8003e50:	f894 3055 	ldrb.w	r3, [r4, #85]	@ 0x55
 8003e54:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d03e      	beq.n	8003eda <HAL_CRYP_Init+0x9e>
  __HAL_CRYP_DISABLE(hcryp);
 8003e5c:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 8003e5e:	68e1      	ldr	r1, [r4, #12]
  hcryp->State = HAL_CRYP_STATE_BUSY;
 8003e60:	2302      	movs	r3, #2
 8003e62:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
  __HAL_CRYP_DISABLE(hcryp);
 8003e66:	682b      	ldr	r3, [r5, #0]
 8003e68:	f023 0301 	bic.w	r3, r3, #1
 8003e6c:	602b      	str	r3, [r5, #0]
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 8003e6e:	682b      	ldr	r3, [r5, #0]
 8003e70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e74:	430b      	orrs	r3, r1
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003e76:	2a08      	cmp	r2, #8
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 8003e78:	f04f 010a 	mov.w	r1, #10
  MODIFY_REG(hcryp->Instance->CR, AES_CR_KEYSIZE, hcryp->Init.KeySize);
 8003e7c:	602b      	str	r3, [r5, #0]
  hcryp->Phase = HAL_CRYP_PHASE_NOT_USED;
 8003e7e:	f884 1048 	strb.w	r1, [r4, #72]	@ 0x48
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003e82:	d067      	beq.n	8003f54 <HAL_CRYP_Init+0x118>
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003e84:	e9d4 6005 	ldrd	r6, r0, [r4, #20]
    if (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_GCM_GMAC)
 8003e88:	2e60      	cmp	r6, #96	@ 0x60
 8003e8a:	d033      	beq.n	8003ef4 <HAL_CRYP_Init+0xb8>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8003e8c:	6829      	ldr	r1, [r5, #0]
 8003e8e:	68a3      	ldr	r3, [r4, #8]
 8003e90:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8003e94:	f021 017e 	bic.w	r1, r1, #126	@ 0x7e
 8003e98:	4333      	orrs	r3, r6
 8003e9a:	430b      	orrs	r3, r1
 8003e9c:	4313      	orrs	r3, r2
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8003e9e:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.DataType|hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8003ea2:	602b      	str	r3, [r5, #0]
    || (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8003ea4:	d062      	beq.n	8003f6c <HAL_CRYP_Init+0x130>
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003ea6:	2800      	cmp	r0, #0
 8003ea8:	d04c      	beq.n	8003f44 <HAL_CRYP_Init+0x108>
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 8003eaa:	2e00      	cmp	r6, #0
 8003eac:	d13a      	bne.n	8003f24 <HAL_CRYP_Init+0xe8>
  hcryp->CrypInCount = 0;
 8003eae:	2200      	movs	r2, #0
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8003eb6:	2000      	movs	r0, #0
  hcryp->State = HAL_CRYP_STATE_READY;
 8003eb8:	2301      	movs	r3, #1
  hcryp->ErrorCode = HAL_CRYP_ERROR_NONE;
 8003eba:	65a0      	str	r0, [r4, #88]	@ 0x58
  hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 8003ebc:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  hcryp->State = HAL_CRYP_STATE_READY;
 8003ec0:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
  __HAL_CRYP_ENABLE(hcryp);
 8003ec4:	682b      	ldr	r3, [r5, #0]
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	602b      	str	r3, [r5, #0]
}
 8003ecc:	bd70      	pop	{r4, r5, r6, pc}
   && (hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CMAC))
 8003ece:	6943      	ldr	r3, [r0, #20]
 8003ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ed4:	d1bc      	bne.n	8003e50 <HAL_CRYP_Init+0x14>
    return HAL_ERROR;
 8003ed6:	2001      	movs	r0, #1
}
 8003ed8:	bd70      	pop	{r4, r5, r6, pc}
    hcryp->Lock = HAL_UNLOCKED;
 8003eda:	f884 1054 	strb.w	r1, [r4, #84]	@ 0x54
    HAL_CRYP_MspInit(hcryp);
 8003ede:	4620      	mov	r0, r4
 8003ee0:	f7fd f9fe 	bl	80012e0 <HAL_CRYP_MspInit>
  if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003ee4:	6922      	ldr	r2, [r4, #16]
 8003ee6:	e7b9      	b.n	8003e5c <HAL_CRYP_Init+0x20>
         ((hcryp->Init.ChainingMode == CRYP_CHAINMODE_AES_CTR)           \
 8003ee8:	6943      	ldr	r3, [r0, #20]
  if ((hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION_DECRYPT) &&\
 8003eea:	f023 0120 	bic.w	r1, r3, #32
 8003eee:	2940      	cmp	r1, #64	@ 0x40
 8003ef0:	d1ee      	bne.n	8003ed0 <HAL_CRYP_Init+0x94>
 8003ef2:	e7f0      	b.n	8003ed6 <HAL_CRYP_Init+0x9a>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_DATATYPE|AES_CR_MODE|AES_CR_CHMOD, hcryp->Init.OperatingMode|hcryp->Init.ChainingMode);
 8003ef4:	682b      	ldr	r3, [r5, #0]
 8003ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003efa:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003f04:	602b      	str	r3, [r5, #0]
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003f06:	682b      	ldr	r3, [r5, #0]
 8003f08:	69e2      	ldr	r2, [r4, #28]
 8003f0a:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8003f0e:	4313      	orrs	r3, r2
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003f10:	2203      	movs	r2, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003f12:	602b      	str	r3, [r5, #0]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003f14:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003f18:	b920      	cbnz	r0, 8003f24 <HAL_CRYP_Init+0xe8>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	f7ff ff64 	bl	8003de8 <CRYP_SetKey>
 8003f20:	2800      	cmp	r0, #0
 8003f22:	d1d8      	bne.n	8003ed6 <HAL_CRYP_Init+0x9a>
    hcryp->Instance->IVR0 = 0;
  }
  else
#endif
  {
    if (hcryp->Init.pInitVect == NULL)
 8003f24:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0d5      	beq.n	8003ed6 <HAL_CRYP_Init+0x9a>
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	ba12      	rev	r2, r2
      return HAL_ERROR;
    }

    ivaddr = (uint32_t)(hcryp->Init.pInitVect);

    hcryp->Instance->IVR3 = __REV(*(uint32_t*)(ivaddr));
 8003f2e:	62ea      	str	r2, [r5, #44]	@ 0x2c
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	ba12      	rev	r2, r2
    ivaddr+=4U;
    hcryp->Instance->IVR2 = __REV(*(uint32_t*)(ivaddr));
 8003f34:	62aa      	str	r2, [r5, #40]	@ 0x28
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	ba12      	rev	r2, r2
    ivaddr+=4U;
    hcryp->Instance->IVR1 = __REV(*(uint32_t*)(ivaddr));
 8003f3a:	626a      	str	r2, [r5, #36]	@ 0x24
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	ba1b      	rev	r3, r3
    ivaddr+=4U;
    hcryp->Instance->IVR0 = __REV(*(uint32_t*)(ivaddr));
 8003f40:	622b      	str	r3, [r5, #32]
 8003f42:	e7b4      	b.n	8003eae <HAL_CRYP_Init+0x72>
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8003f44:	4620      	mov	r0, r4
 8003f46:	f7ff ff4f 	bl	8003de8 <CRYP_SetKey>
 8003f4a:	2800      	cmp	r0, #0
 8003f4c:	d1c3      	bne.n	8003ed6 <HAL_CRYP_Init+0x9a>
    if (hcryp->Init.ChainingMode != CRYP_CHAINMODE_AES_ECB)
 8003f4e:	2e00      	cmp	r6, #0
 8003f50:	d0ad      	beq.n	8003eae <HAL_CRYP_Init+0x72>
 8003f52:	e7e7      	b.n	8003f24 <HAL_CRYP_Init+0xe8>
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 8003f54:	682b      	ldr	r3, [r5, #0]
 8003f56:	f023 0318 	bic.w	r3, r3, #24
 8003f5a:	f043 0308 	orr.w	r3, r3, #8
    if (CRYP_SetKey(hcryp) != HAL_OK)
 8003f5e:	4620      	mov	r0, r4
    MODIFY_REG(hcryp->Instance->CR, AES_CR_MODE, CRYP_ALGOMODE_KEYDERIVATION);
 8003f60:	602b      	str	r3, [r5, #0]
    if (CRYP_SetKey(hcryp) != HAL_OK)
 8003f62:	f7ff ff41 	bl	8003de8 <CRYP_SetKey>
 8003f66:	2800      	cmp	r0, #0
 8003f68:	d0a1      	beq.n	8003eae <HAL_CRYP_Init+0x72>
 8003f6a:	e7b4      	b.n	8003ed6 <HAL_CRYP_Init+0x9a>
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003f6c:	682b      	ldr	r3, [r5, #0]
 8003f6e:	69e2      	ldr	r2, [r4, #28]
 8003f70:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8003f74:	4313      	orrs	r3, r2
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003f76:	2203      	movs	r2, #3
      MODIFY_REG(hcryp->Instance->CR, AES_CR_GCMPH, hcryp->Init.GCMCMACPhase);
 8003f78:	602b      	str	r3, [r5, #0]
      hcryp->Phase = HAL_CRYP_PHASE_START;
 8003f7a:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
    if (hcryp->Init.KeyWriteFlag == CRYP_KEY_WRITE_ENABLE)
 8003f7e:	b138      	cbz	r0, 8003f90 <HAL_CRYP_Init+0x154>
    hcryp->Instance->IVR3 = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	62eb      	str	r3, [r5, #44]	@ 0x2c
    hcryp->Instance->IVR2 = 0;
 8003f84:	62ab      	str	r3, [r5, #40]	@ 0x28
    hcryp->Instance->IVR1 = 0;
 8003f86:	626b      	str	r3, [r5, #36]	@ 0x24
    hcryp->Instance->IVR0 = 0;
 8003f88:	622b      	str	r3, [r5, #32]
 8003f8a:	e790      	b.n	8003eae <HAL_CRYP_Init+0x72>
    return HAL_ERROR;
 8003f8c:	2001      	movs	r0, #1
}
 8003f8e:	4770      	bx	lr
      if (CRYP_SetKey(hcryp) != HAL_OK)
 8003f90:	4620      	mov	r0, r4
 8003f92:	f7ff ff29 	bl	8003de8 <CRYP_SetKey>
 8003f96:	2800      	cmp	r0, #0
 8003f98:	d19d      	bne.n	8003ed6 <HAL_CRYP_Init+0x9a>
 8003f9a:	e7f1      	b.n	8003f80 <HAL_CRYP_Init+0x144>

08003f9c <HAL_CRYPEx_AES>:
  *                     case of key derivation only.
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRYPEx_AES(CRYP_HandleTypeDef *hcryp, uint8_t *pInputData, uint16_t Size, uint8_t *pOutputData, uint32_t Timeout)
{
 8003f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  if (hcryp->State == HAL_CRYP_STATE_READY)
 8003fa0:	f890 5055 	ldrb.w	r5, [r0, #85]	@ 0x55
 8003fa4:	2d01      	cmp	r5, #1
 8003fa6:	f040 8089 	bne.w	80040bc <HAL_CRYPEx_AES+0x120>
 8003faa:	4606      	mov	r6, r0
 8003fac:	461c      	mov	r4, r3
  {
    /* Check parameters setting */
    if (hcryp->Init.OperatingMode == CRYP_ALGOMODE_KEYDERIVATION)
 8003fae:	6933      	ldr	r3, [r6, #16]
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	b2e8      	uxtb	r0, r5
 8003fb4:	d04b      	beq.n	800404e <HAL_CRYPEx_AES+0xb2>
        return  HAL_ERROR;
      }
    }
    else
    {
      if ((pInputData == NULL) || (pOutputData == NULL) || (Size == 0U))
 8003fb6:	2900      	cmp	r1, #0
 8003fb8:	d07e      	beq.n	80040b8 <HAL_CRYPEx_AES+0x11c>
 8003fba:	2c00      	cmp	r4, #0
 8003fbc:	d07c      	beq.n	80040b8 <HAL_CRYPEx_AES+0x11c>
 8003fbe:	4617      	mov	r7, r2
 8003fc0:	2a00      	cmp	r2, #0
 8003fc2:	d079      	beq.n	80040b8 <HAL_CRYPEx_AES+0x11c>
        return  HAL_ERROR;
      }
    }

    /* Process Locked */
    __HAL_LOCK(hcryp);
 8003fc4:	f896 3054 	ldrb.w	r3, [r6, #84]	@ 0x54
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d077      	beq.n	80040bc <HAL_CRYPEx_AES+0x120>
 8003fcc:	9a08      	ldr	r2, [sp, #32]
 8003fce:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54

    /* Change the CRYP state */
    hcryp->State = HAL_CRYP_STATE_BUSY;
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	3201      	adds	r2, #1
 8003fd6:	f886 3055 	strb.w	r3, [r6, #85]	@ 0x55
  uint32_t index;
  uint32_t inputaddr  = (uint32_t)Input;
  uint32_t outputaddr = (uint32_t)Output;


  for(index=0U ; (index < Ilength); index += 16U)
 8003fda:	f101 0510 	add.w	r5, r1, #16
  {
    /* Write the Input block in the Data Input register */
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8003fde:	6833      	ldr	r3, [r6, #0]
 8003fe0:	f104 0410 	add.w	r4, r4, #16
  for(index=0U ; (index < Ilength); index += 16U)
 8003fe4:	f04f 0800 	mov.w	r8, #0
 8003fe8:	f040 8088 	bne.w	80040fc <HAL_CRYPEx_AES+0x160>
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8003fec:	f855 2c10 	ldr.w	r2, [r5, #-16]
 8003ff0:	609a      	str	r2, [r3, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8003ff2:	f855 2c0c 	ldr.w	r2, [r5, #-12]
 8003ff6:	609a      	str	r2, [r3, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR  = *(uint32_t*)(inputaddr);
 8003ff8:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8003ffc:	609a      	str	r2, [r3, #8]
    inputaddr+=4U;
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8003ffe:	f855 2c04 	ldr.w	r2, [r5, #-4]
 8004002:	609a      	str	r2, [r3, #8]
static HAL_StatusTypeDef CRYP_WaitOnCCFlag(CRYP_HandleTypeDef const * const hcryp, uint32_t Timeout)
{
  uint32_t tickstart;

  /* Get timeout */
  tickstart = HAL_GetTick();
 8004004:	f7ff f822 	bl	800304c <HAL_GetTick>

  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8004008:	6833      	ldr	r3, [r6, #0]
 800400a:	6859      	ldr	r1, [r3, #4]
 800400c:	07c8      	lsls	r0, r1, #31
 800400e:	d5fc      	bpl.n	800400a <HAL_CRYPEx_AES+0x6e>
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8004010:	6819      	ldr	r1, [r3, #0]
 8004012:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004016:	6019      	str	r1, [r3, #0]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 8004018:	68d9      	ldr	r1, [r3, #12]
 800401a:	f844 1c10 	str.w	r1, [r4, #-16]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 800401e:	68d9      	ldr	r1, [r3, #12]
 8004020:	f844 1c0c 	str.w	r1, [r4, #-12]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 8004024:	68d9      	ldr	r1, [r3, #12]
 8004026:	f844 1c08 	str.w	r1, [r4, #-8]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 800402a:	68d9      	ldr	r1, [r3, #12]
 800402c:	f844 1c04 	str.w	r1, [r4, #-4]
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 8004030:	f896 105c 	ldrb.w	r1, [r6, #92]	@ 0x5c
 8004034:	2901      	cmp	r1, #1
 8004036:	f108 0210 	add.w	r2, r8, #16
 800403a:	f000 8082 	beq.w	8004142 <HAL_CRYPEx_AES+0x1a6>
  for(index=0U ; (index < Ilength); index += 16U)
 800403e:	4297      	cmp	r7, r2
 8004040:	f105 0510 	add.w	r5, r5, #16
 8004044:	f104 0410 	add.w	r4, r4, #16
 8004048:	d92a      	bls.n	80040a0 <HAL_CRYPEx_AES+0x104>
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 800404a:	4690      	mov	r8, r2
 800404c:	e7ce      	b.n	8003fec <HAL_CRYPEx_AES+0x50>
      if (pOutputData == NULL)
 800404e:	2c00      	cmp	r4, #0
 8004050:	d032      	beq.n	80040b8 <HAL_CRYPEx_AES+0x11c>
    __HAL_LOCK(hcryp);
 8004052:	f896 3054 	ldrb.w	r3, [r6, #84]	@ 0x54
 8004056:	2b01      	cmp	r3, #1
 8004058:	d030      	beq.n	80040bc <HAL_CRYPEx_AES+0x120>
    hcryp->State = HAL_CRYP_STATE_BUSY;
 800405a:	2302      	movs	r3, #2
 800405c:	f886 3055 	strb.w	r3, [r6, #85]	@ 0x55
    __HAL_LOCK(hcryp);
 8004060:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54
  tickstart = HAL_GetTick();
 8004064:	f7fe fff2 	bl	800304c <HAL_GetTick>
 8004068:	9b08      	ldr	r3, [sp, #32]
 800406a:	3301      	adds	r3, #1
 800406c:	4605      	mov	r5, r0
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 800406e:	d178      	bne.n	8004162 <HAL_CRYPEx_AES+0x1c6>
 8004070:	6832      	ldr	r2, [r6, #0]
 8004072:	6853      	ldr	r3, [r2, #4]
 8004074:	07dd      	lsls	r5, r3, #31
 8004076:	d5fc      	bpl.n	8004072 <HAL_CRYPEx_AES+0xd6>
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8004078:	6813      	ldr	r3, [r2, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 800407a:	68f1      	ldr	r1, [r6, #12]
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 800407c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8004080:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
  __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 8004084:	6013      	str	r3, [r2, #0]
  if (hcryp->Init.KeySize == CRYP_KEYSIZE_256B)
 8004086:	d077      	beq.n	8004178 <HAL_CRYPEx_AES+0x1dc>
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR3);
 8004088:	69d3      	ldr	r3, [r2, #28]
 800408a:	ba1b      	rev	r3, r3
 800408c:	6023      	str	r3, [r4, #0]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR2);
 800408e:	6993      	ldr	r3, [r2, #24]
 8004090:	ba1b      	rev	r3, r3
 8004092:	6063      	str	r3, [r4, #4]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR1);
 8004094:	6953      	ldr	r3, [r2, #20]
 8004096:	ba1b      	rev	r3, r3
 8004098:	60a3      	str	r3, [r4, #8]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR0);
 800409a:	6913      	ldr	r3, [r2, #16]
 800409c:	ba1b      	rev	r3, r3
 800409e:	60e3      	str	r3, [r4, #12]
    if (hcryp->State != HAL_CRYP_STATE_SUSPENDED)
 80040a0:	f896 3055 	ldrb.w	r3, [r6, #85]	@ 0x55
 80040a4:	2b05      	cmp	r3, #5
      hcryp->State = HAL_CRYP_STATE_READY;
 80040a6:	bf18      	it	ne
 80040a8:	2301      	movne	r3, #1
    __HAL_UNLOCK(hcryp);
 80040aa:	f04f 0000 	mov.w	r0, #0
      hcryp->State = HAL_CRYP_STATE_READY;
 80040ae:	bf18      	it	ne
 80040b0:	f886 3055 	strbne.w	r3, [r6, #85]	@ 0x55
    __HAL_UNLOCK(hcryp);
 80040b4:	f886 0054 	strb.w	r0, [r6, #84]	@ 0x54
}
 80040b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hcryp);
 80040bc:	2002      	movs	r0, #2
}
 80040be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_CRYP_CLEAR_FLAG(hcryp, CRYP_CCF_CLEAR);
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80040c8:	601a      	str	r2, [r3, #0]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	f844 2c10 	str.w	r2, [r4, #-16]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	f844 2c0c 	str.w	r2, [r4, #-12]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	f844 2c08 	str.w	r2, [r4, #-8]
    *(uint32_t*)(outputaddr) = hcryp->Instance->DOUTR;
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	f844 2c04 	str.w	r2, [r4, #-4]
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 80040e2:	f896 105c 	ldrb.w	r1, [r6, #92]	@ 0x5c
 80040e6:	2901      	cmp	r1, #1
 80040e8:	f108 0210 	add.w	r2, r8, #16
 80040ec:	d029      	beq.n	8004142 <HAL_CRYPEx_AES+0x1a6>
  for(index=0U ; (index < Ilength); index += 16U)
 80040ee:	4297      	cmp	r7, r2
 80040f0:	f105 0510 	add.w	r5, r5, #16
 80040f4:	f104 0410 	add.w	r4, r4, #16
 80040f8:	d9d2      	bls.n	80040a0 <HAL_CRYPEx_AES+0x104>
 80040fa:	4690      	mov	r8, r2
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 80040fc:	f855 2c10 	ldr.w	r2, [r5, #-16]
 8004100:	609a      	str	r2, [r3, #8]
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 8004102:	f855 2c0c 	ldr.w	r2, [r5, #-12]
 8004106:	609a      	str	r2, [r3, #8]
    hcryp->Instance->DINR  = *(uint32_t*)(inputaddr);
 8004108:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800410c:	609a      	str	r2, [r3, #8]
    hcryp->Instance->DINR = *(uint32_t*)(inputaddr);
 800410e:	f855 2c04 	ldr.w	r2, [r5, #-4]
 8004112:	609a      	str	r2, [r3, #8]
  tickstart = HAL_GetTick();
 8004114:	f7fe ff9a 	bl	800304c <HAL_GetTick>
 8004118:	4681      	mov	r9, r0
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 800411a:	6833      	ldr	r3, [r6, #0]
 800411c:	685a      	ldr	r2, [r3, #4]
 800411e:	07d2      	lsls	r2, r2, #31
 8004120:	d4cf      	bmi.n	80040c2 <HAL_CRYPEx_AES+0x126>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((HAL_GetTick() - tickstart ) > Timeout)
 8004122:	f7fe ff93 	bl	800304c <HAL_GetTick>
 8004126:	9a08      	ldr	r2, [sp, #32]
 8004128:	eba0 0309 	sub.w	r3, r0, r9
 800412c:	429a      	cmp	r2, r3
 800412e:	d2f4      	bcs.n	800411a <HAL_CRYPEx_AES+0x17e>
    hcryp->State = HAL_CRYP_STATE_READY;
 8004130:	2301      	movs	r3, #1
 8004132:	f886 3055 	strb.w	r3, [r6, #85]	@ 0x55
    __HAL_UNLOCK(hcryp);
 8004136:	2300      	movs	r3, #0
 8004138:	f886 3054 	strb.w	r3, [r6, #84]	@ 0x54
        return HAL_TIMEOUT;
 800413c:	2003      	movs	r0, #3
}
 800413e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hcryp->SuspendRequest == HAL_CRYP_SUSPEND) && ((index+16U) < Ilength))
 8004142:	4297      	cmp	r7, r2
 8004144:	d9ac      	bls.n	80040a0 <HAL_CRYPEx_AES+0x104>
      hcryp->CrypInCount     =  Ilength - (index+16U);
 8004146:	f1a7 0310 	sub.w	r3, r7, #16
 800414a:	eba3 0308 	sub.w	r3, r3, r8
      hcryp->State = HAL_CRYP_STATE_SUSPENDED;
 800414e:	2205      	movs	r2, #5
      hcryp->CrypInCount     =  Ilength - (index+16U);
 8004150:	6433      	str	r3, [r6, #64]	@ 0x40
      hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 8004152:	2300      	movs	r3, #0
      hcryp->pCrypOutBuffPtr =  (uint8_t *)outputaddr;
 8004154:	63f4      	str	r4, [r6, #60]	@ 0x3c
      hcryp->pCrypInBuffPtr  =  (uint8_t *)inputaddr;
 8004156:	63b5      	str	r5, [r6, #56]	@ 0x38
      hcryp->State = HAL_CRYP_STATE_SUSPENDED;
 8004158:	f886 2055 	strb.w	r2, [r6, #85]	@ 0x55
      hcryp->SuspendRequest = HAL_CRYP_SUSPEND_NONE;
 800415c:	f886 305c 	strb.w	r3, [r6, #92]	@ 0x5c
      return HAL_OK;
 8004160:	e79e      	b.n	80040a0 <HAL_CRYPEx_AES+0x104>
  while(HAL_IS_BIT_CLR(hcryp->Instance->SR, AES_SR_CCF))
 8004162:	6832      	ldr	r2, [r6, #0]
 8004164:	6853      	ldr	r3, [r2, #4]
 8004166:	07d9      	lsls	r1, r3, #31
 8004168:	d486      	bmi.n	8004078 <HAL_CRYPEx_AES+0xdc>
      if((HAL_GetTick() - tickstart ) > Timeout)
 800416a:	f7fe ff6f 	bl	800304c <HAL_GetTick>
 800416e:	9a08      	ldr	r2, [sp, #32]
 8004170:	1b43      	subs	r3, r0, r5
 8004172:	429a      	cmp	r2, r3
 8004174:	d2f5      	bcs.n	8004162 <HAL_CRYPEx_AES+0x1c6>
 8004176:	e7db      	b.n	8004130 <HAL_CRYPEx_AES+0x194>
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR7);
 8004178:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
    outputaddr+=4U;
 800417a:	3410      	adds	r4, #16
 800417c:	ba1b      	rev	r3, r3
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR7);
 800417e:	f844 3c10 	str.w	r3, [r4, #-16]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR6);
 8004182:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8004184:	ba1b      	rev	r3, r3
 8004186:	f844 3c0c 	str.w	r3, [r4, #-12]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR5);
 800418a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 800418c:	ba1b      	rev	r3, r3
 800418e:	f844 3c08 	str.w	r3, [r4, #-8]
    *(uint32_t*)(outputaddr) = __REV(hcryp->Instance->KEYR4);
 8004192:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8004194:	ba1b      	rev	r3, r3
 8004196:	f844 3c04 	str.w	r3, [r4, #-4]
    outputaddr+=4U;
 800419a:	e775      	b.n	8004088 <HAL_CRYPEx_AES+0xec>

0800419c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800419c:	2800      	cmp	r0, #0
 800419e:	d04e      	beq.n	800423e <HAL_DMA_Init+0xa2>
{
 80041a0:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80041a2:	4a2d      	ldr	r2, [pc, #180]	@ (8004258 <HAL_DMA_Init+0xbc>)
 80041a4:	6804      	ldr	r4, [r0, #0]
 80041a6:	4294      	cmp	r4, r2
 80041a8:	4603      	mov	r3, r0
 80041aa:	d93f      	bls.n	800422c <HAL_DMA_Init+0x90>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041ac:	492b      	ldr	r1, [pc, #172]	@ (800425c <HAL_DMA_Init+0xc0>)
 80041ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004260 <HAL_DMA_Init+0xc4>)
    hdma->DmaBaseAddress = DMA2;
 80041b0:	4d2c      	ldr	r5, [pc, #176]	@ (8004264 <HAL_DMA_Init+0xc8>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041b2:	4421      	add	r1, r4
 80041b4:	fba2 2101 	umull	r2, r1, r2, r1
 80041b8:	0909      	lsrs	r1, r1, #4
 80041ba:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041bc:	2202      	movs	r2, #2
 80041be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041c2:	e9d3 6202 	ldrd	r6, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041c6:	691f      	ldr	r7, [r3, #16]
  tmp = hdma->Instance->CCR;
 80041c8:	6820      	ldr	r0, [r4, #0]
 80041ca:	641d      	str	r5, [r3, #64]	@ 0x40
  tmp |=  hdma->Init.Direction        |
 80041cc:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041ce:	433a      	orrs	r2, r7
 80041d0:	695f      	ldr	r7, [r3, #20]
 80041d2:	6459      	str	r1, [r3, #68]	@ 0x44
 80041d4:	433a      	orrs	r2, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041d6:	699f      	ldr	r7, [r3, #24]
 80041d8:	433a      	orrs	r2, r7
 80041da:	69df      	ldr	r7, [r3, #28]
 80041dc:	433a      	orrs	r2, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 80041de:	6a1f      	ldr	r7, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80041e0:	f36f 100e 	bfc	r0, #4, #11
          hdma->Init.Mode                | hdma->Init.Priority;
 80041e4:	433a      	orrs	r2, r7
  tmp |=  hdma->Init.Direction        |
 80041e6:	4302      	orrs	r2, r0
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80041e8:	f5b6 4f80 	cmp.w	r6, #16384	@ 0x4000
  hdma->Instance->CCR = tmp;
 80041ec:	6022      	str	r2, [r4, #0]
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80041ee:	d014      	beq.n	800421a <HAL_DMA_Init+0x7e>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80041f0:	6858      	ldr	r0, [r3, #4]
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80041f2:	f001 011c 	and.w	r1, r1, #28
 80041f6:	220f      	movs	r2, #15
 80041f8:	408a      	lsls	r2, r1
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80041fa:	4088      	lsls	r0, r1
    if (DMA1 == hdma->DmaBaseAddress)
 80041fc:	491a      	ldr	r1, [pc, #104]	@ (8004268 <HAL_DMA_Init+0xcc>)
 80041fe:	428d      	cmp	r5, r1
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004200:	ea6f 0202 	mvn.w	r2, r2
    if (DMA1 == hdma->DmaBaseAddress)
 8004204:	d01d      	beq.n	8004242 <HAL_DMA_Init+0xa6>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004206:	f8d1 44a8 	ldr.w	r4, [r1, #1192]	@ 0x4a8
 800420a:	4022      	ands	r2, r4
 800420c:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004210:	f8d1 24a8 	ldr.w	r2, [r1, #1192]	@ 0x4a8
 8004214:	4302      	orrs	r2, r0
 8004216:	f8c1 24a8 	str.w	r2, [r1, #1192]	@ 0x4a8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800421a:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800421c:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800421e:	63d8      	str	r0, [r3, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004220:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_READY;
 8004224:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  return HAL_OK;
}
 8004228:	bcf0      	pop	{r4, r5, r6, r7}
 800422a:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800422c:	490f      	ldr	r1, [pc, #60]	@ (800426c <HAL_DMA_Init+0xd0>)
 800422e:	4a0c      	ldr	r2, [pc, #48]	@ (8004260 <HAL_DMA_Init+0xc4>)
    hdma->DmaBaseAddress = DMA1;
 8004230:	4d0d      	ldr	r5, [pc, #52]	@ (8004268 <HAL_DMA_Init+0xcc>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004232:	4421      	add	r1, r4
 8004234:	fba2 2101 	umull	r2, r1, r2, r1
 8004238:	0909      	lsrs	r1, r1, #4
 800423a:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 800423c:	e7be      	b.n	80041bc <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 800423e:	2001      	movs	r0, #1
}
 8004240:	4770      	bx	lr
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004242:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 8004246:	400a      	ands	r2, r1
 8004248:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800424c:	f8d5 20a8 	ldr.w	r2, [r5, #168]	@ 0xa8
 8004250:	4302      	orrs	r2, r0
 8004252:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
 8004256:	e7e0      	b.n	800421a <HAL_DMA_Init+0x7e>
 8004258:	40020407 	.word	0x40020407
 800425c:	bffdfbf8 	.word	0xbffdfbf8
 8004260:	cccccccd 	.word	0xcccccccd
 8004264:	40020400 	.word	0x40020400
 8004268:	40020000 	.word	0x40020000
 800426c:	bffdfff8 	.word	0xbffdfff8

08004270 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004270:	b470      	push	{r4, r5, r6}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004272:	f890 4024 	ldrb.w	r4, [r0, #36]	@ 0x24
 8004276:	2c01      	cmp	r4, #1
 8004278:	d00b      	beq.n	8004292 <HAL_DMA_Start_IT+0x22>
 800427a:	2401      	movs	r4, #1
 800427c:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004280:	f890 4025 	ldrb.w	r4, [r0, #37]	@ 0x25
 8004284:	2c01      	cmp	r4, #1
 8004286:	fa5f fc84 	uxtb.w	ip, r4
 800428a:	d005      	beq.n	8004298 <HAL_DMA_Start_IT+0x28>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800428c:	2300      	movs	r3, #0
 800428e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 8004292:	2002      	movs	r0, #2

    /* Remain BUSY */
    status = HAL_BUSY;
  }
  return status;
}
 8004294:	bc70      	pop	{r4, r5, r6}
 8004296:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8004298:	2502      	movs	r5, #2
 800429a:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
    __HAL_DMA_DISABLE(hdma);
 800429e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042a0:	2500      	movs	r5, #0
 80042a2:	63c5      	str	r5, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 80042a4:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042a6:	6c45      	ldr	r5, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE(hdma);
 80042a8:	f026 0601 	bic.w	r6, r6, #1
 80042ac:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80042ae:	f005 051c 	and.w	r5, r5, #28
 80042b2:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 80042b4:	fa0c f505 	lsl.w	r5, ip, r5
 80042b8:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042ba:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042bc:	6883      	ldr	r3, [r0, #8]
 80042be:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 80042c0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042c2:	bf0b      	itete	eq
 80042c4:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80042c6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80042c8:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80042ca:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 80042cc:	b153      	cbz	r3, 80042e4 <HAL_DMA_Start_IT+0x74>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042ce:	6823      	ldr	r3, [r4, #0]
 80042d0:	f043 030e 	orr.w	r3, r3, #14
 80042d4:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80042dc:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80042de:	6023      	str	r3, [r4, #0]
}
 80042e0:	bc70      	pop	{r4, r5, r6}
 80042e2:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	f023 0304 	bic.w	r3, r3, #4
 80042ea:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	f043 030a 	orr.w	r3, r3, #10
 80042f2:	6023      	str	r3, [r4, #0]
 80042f4:	e7ef      	b.n	80042d6 <HAL_DMA_Start_IT+0x66>
 80042f6:	bf00      	nop

080042f8 <HAL_DMA_Abort>:
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80042f8:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80042fc:	2a02      	cmp	r2, #2
{
 80042fe:	4603      	mov	r3, r0
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004300:	d006      	beq.n	8004310 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004302:	2204      	movs	r2, #4
 8004304:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8004306:	2200      	movs	r2, #0
    return HAL_ERROR;
 8004308:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 800430a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800430e:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004310:	6801      	ldr	r1, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004312:	6c42      	ldr	r2, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004314:	6808      	ldr	r0, [r1, #0]
 8004316:	f020 000e 	bic.w	r0, r0, #14
 800431a:	6008      	str	r0, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800431c:	6808      	ldr	r0, [r1, #0]
 800431e:	f020 0001 	bic.w	r0, r0, #1
 8004322:	6008      	str	r0, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004324:	f04f 0c01 	mov.w	ip, #1
 8004328:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800432a:	f002 021c 	and.w	r2, r2, #28
 800432e:	fa0c f202 	lsl.w	r2, ip, r2
 8004332:	604a      	str	r2, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004334:	2200      	movs	r2, #0
    return status;
 8004336:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8004338:	f883 c025 	strb.w	ip, [r3, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 800433c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop

08004344 <HAL_DMA_IRQHandler>:
{
 8004344:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004346:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004348:	6c06      	ldr	r6, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 800434a:	6805      	ldr	r5, [r0, #0]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800434c:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800434e:	682c      	ldr	r4, [r5, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004350:	f003 031c 	and.w	r3, r3, #28
 8004354:	2204      	movs	r2, #4
 8004356:	409a      	lsls	r2, r3
 8004358:	420a      	tst	r2, r1
 800435a:	d00e      	beq.n	800437a <HAL_DMA_IRQHandler+0x36>
 800435c:	f014 0f04 	tst.w	r4, #4
 8004360:	d00b      	beq.n	800437a <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004362:	682b      	ldr	r3, [r5, #0]
 8004364:	069b      	lsls	r3, r3, #26
 8004366:	d403      	bmi.n	8004370 <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004368:	682b      	ldr	r3, [r5, #0]
 800436a:	f023 0304 	bic.w	r3, r3, #4
 800436e:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 8004370:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004372:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8004374:	b1cb      	cbz	r3, 80043aa <HAL_DMA_IRQHandler+0x66>
}
 8004376:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 8004378:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800437a:	2202      	movs	r2, #2
 800437c:	409a      	lsls	r2, r3
 800437e:	420a      	tst	r2, r1
 8004380:	d015      	beq.n	80043ae <HAL_DMA_IRQHandler+0x6a>
 8004382:	f014 0f02 	tst.w	r4, #2
 8004386:	d012      	beq.n	80043ae <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004388:	682b      	ldr	r3, [r5, #0]
 800438a:	0699      	lsls	r1, r3, #26
 800438c:	d406      	bmi.n	800439c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800438e:	682b      	ldr	r3, [r5, #0]
 8004390:	f023 030a 	bic.w	r3, r3, #10
 8004394:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004396:	2301      	movs	r3, #1
 8004398:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
    if (hdma->XferCpltCallback != NULL)
 800439c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800439e:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 80043a0:	2100      	movs	r1, #0
 80043a2:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    if (hdma->XferCpltCallback != NULL)
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1e5      	bne.n	8004376 <HAL_DMA_IRQHandler+0x32>
}
 80043aa:	bc70      	pop	{r4, r5, r6}
 80043ac:	4770      	bx	lr
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80043ae:	2208      	movs	r2, #8
 80043b0:	409a      	lsls	r2, r3
 80043b2:	420a      	tst	r2, r1
 80043b4:	d0f9      	beq.n	80043aa <HAL_DMA_IRQHandler+0x66>
 80043b6:	0722      	lsls	r2, r4, #28
 80043b8:	d5f7      	bpl.n	80043aa <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043ba:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 80043bc:	6b41      	ldr	r1, [r0, #52]	@ 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043be:	f022 020e 	bic.w	r2, r2, #14
 80043c2:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043c4:	2201      	movs	r2, #1
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 80043ca:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043cc:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043ce:	63c2      	str	r2, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80043d0:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 80043d4:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
    if (hdma->XferErrorCallback != NULL)
 80043d8:	2900      	cmp	r1, #0
 80043da:	d0e6      	beq.n	80043aa <HAL_DMA_IRQHandler+0x66>
}
 80043dc:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80043de:	4708      	bx	r1

080043e0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043e0:	680b      	ldr	r3, [r1, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 81ac 	beq.w	8004740 <HAL_GPIO_Init+0x360>
{
 80043e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ec:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 80043f0:	b085      	sub	sp, #20
  uint32_t position = 0x00u;
 80043f2:	f04f 0200 	mov.w	r2, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043f6:	f04f 0b01 	mov.w	fp, #1
 80043fa:	f000 80ec 	beq.w	80045d6 <HAL_GPIO_Init+0x1f6>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043fe:	f8df e380 	ldr.w	lr, [pc, #896]	@ 8004780 <HAL_GPIO_Init+0x3a0>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004402:	9300      	str	r3, [sp, #0]
    if (iocurrent != 0x00u)
 8004404:	9b00      	ldr	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004406:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00u)
 800440a:	ea1c 0a03 	ands.w	sl, ip, r3
 800440e:	f000 8132 	beq.w	8004676 <HAL_GPIO_Init+0x296>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004412:	684d      	ldr	r5, [r1, #4]
 8004414:	f005 0703 	and.w	r7, r5, #3
 8004418:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800441a:	2303      	movs	r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800441c:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004420:	fa03 f604 	lsl.w	r6, r3, r4
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004424:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004428:	ea6f 0606 	mvn.w	r6, r6
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800442c:	f240 812c 	bls.w	8004688 <HAL_GPIO_Init+0x2a8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004430:	2f03      	cmp	r7, #3
 8004432:	f040 8192 	bne.w	800475a <HAL_GPIO_Init+0x37a>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004436:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 800443a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800443c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800443e:	4334      	orrs	r4, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004440:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8004444:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004446:	f000 8116 	beq.w	8004676 <HAL_GPIO_Init+0x296>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800444a:	4eca      	ldr	r6, [pc, #808]	@ (8004774 <HAL_GPIO_Init+0x394>)
 800444c:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 800444e:	f044 0401 	orr.w	r4, r4, #1
 8004452:	6634      	str	r4, [r6, #96]	@ 0x60
 8004454:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 8004456:	f004 0401 	and.w	r4, r4, #1
 800445a:	9403      	str	r4, [sp, #12]
 800445c:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 800445e:	f022 0403 	bic.w	r4, r2, #3
 8004462:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004466:	f002 0703 	and.w	r7, r2, #3
 800446a:	230f      	movs	r3, #15
 800446c:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 8004470:	00bf      	lsls	r7, r7, #2
 8004472:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004476:	4bc0      	ldr	r3, [pc, #768]	@ (8004778 <HAL_GPIO_Init+0x398>)
        temp = SYSCFG->EXTICR[position >> 2u];
 8004478:	68a6      	ldr	r6, [r4, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800447a:	4298      	cmp	r0, r3
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800447c:	ea26 060c 	bic.w	r6, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004480:	f000 814c 	beq.w	800471c <HAL_GPIO_Init+0x33c>
 8004484:	4bbd      	ldr	r3, [pc, #756]	@ (800477c <HAL_GPIO_Init+0x39c>)
 8004486:	4298      	cmp	r0, r3
 8004488:	f000 80c9 	beq.w	800461e <HAL_GPIO_Init+0x23e>
 800448c:	f8df c2f4 	ldr.w	ip, [pc, #756]	@ 8004784 <HAL_GPIO_Init+0x3a4>
 8004490:	4560      	cmp	r0, ip
 8004492:	f000 814f 	beq.w	8004734 <HAL_GPIO_Init+0x354>
 8004496:	f8df c2f0 	ldr.w	ip, [pc, #752]	@ 8004788 <HAL_GPIO_Init+0x3a8>
 800449a:	4560      	cmp	r0, ip
 800449c:	f000 8151 	beq.w	8004742 <HAL_GPIO_Init+0x362>
 80044a0:	f8df c2e8 	ldr.w	ip, [pc, #744]	@ 800478c <HAL_GPIO_Init+0x3ac>
 80044a4:	4560      	cmp	r0, ip
 80044a6:	f000 813f 	beq.w	8004728 <HAL_GPIO_Init+0x348>
 80044aa:	f8df c2e4 	ldr.w	ip, [pc, #740]	@ 8004790 <HAL_GPIO_Init+0x3b0>
 80044ae:	4560      	cmp	r0, ip
 80044b0:	f000 814d 	beq.w	800474e <HAL_GPIO_Init+0x36e>
 80044b4:	f8df c2dc 	ldr.w	ip, [pc, #732]	@ 8004794 <HAL_GPIO_Init+0x3b4>
 80044b8:	4560      	cmp	r0, ip
 80044ba:	bf0c      	ite	eq
 80044bc:	f04f 0c07 	moveq.w	ip, #7
 80044c0:	f04f 0c08 	movne.w	ip, #8
 80044c4:	fa0c f707 	lsl.w	r7, ip, r7
 80044c8:	433e      	orrs	r6, r7
 80044ca:	e0ad      	b.n	8004628 <HAL_GPIO_Init+0x248>
        temp = GPIOx->OSPEEDR;
 80044cc:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044d0:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80044d2:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2u));
 80044d6:	fa06 f807 	lsl.w	r8, r6, r7
 80044da:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 80044de:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 80044e2:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044e6:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044ea:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 80044ee:	fa0e fe02 	lsl.w	lr, lr, r2
 80044f2:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 80044f6:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 80044fa:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044fe:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004500:	ea0a 0808 	and.w	r8, sl, r8
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004504:	fa06 fe07 	lsl.w	lr, r6, r7
 8004508:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800450c:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 800450e:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004512:	d119      	bne.n	8004548 <HAL_GPIO_Init+0x168>
        temp = GPIOx->AFR[position >> 3u];
 8004514:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004518:	690e      	ldr	r6, [r1, #16]
 800451a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800451e:	f002 0807 	and.w	r8, r2, #7
 8004522:	f10e 4e90 	add.w	lr, lr, #1207959552	@ 0x48000000
 8004526:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800452a:	fa06 f608 	lsl.w	r6, r6, r8
        temp = GPIOx->AFR[position >> 3u];
 800452e:	f8de 9020 	ldr.w	r9, [lr, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004532:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004534:	260f      	movs	r6, #15
 8004536:	fa06 f808 	lsl.w	r8, r6, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800453a:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800453c:	ea29 0908 	bic.w	r9, r9, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004540:	ea46 0809 	orr.w	r8, r6, r9
        GPIOx->AFR[position >> 3u] = temp;
 8004544:	f8ce 8020 	str.w	r8, [lr, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004548:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 800454a:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800454c:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004550:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004552:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8004556:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004558:	d039      	beq.n	80045ce <HAL_GPIO_Init+0x1ee>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800455a:	4f86      	ldr	r7, [pc, #536]	@ (8004774 <HAL_GPIO_Init+0x394>)
 800455c:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 800455e:	f044 0401 	orr.w	r4, r4, #1
 8004562:	663c      	str	r4, [r7, #96]	@ 0x60
 8004564:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 8004566:	f004 0401 	and.w	r4, r4, #1
 800456a:	9403      	str	r4, [sp, #12]
 800456c:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 800456e:	f022 0403 	bic.w	r4, r2, #3
 8004572:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8004576:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800457a:	f002 0703 	and.w	r7, r2, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 800457e:	f8d4 e008 	ldr.w	lr, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004582:	260f      	movs	r6, #15
 8004584:	00bf      	lsls	r7, r7, #2
 8004586:	fa06 f707 	lsl.w	r7, r6, r7
 800458a:	ea2e 0707 	bic.w	r7, lr, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800458e:	60a7      	str	r7, [r4, #8]
        temp = EXTI->RTSR1;
 8004590:	4c7b      	ldr	r4, [pc, #492]	@ (8004780 <HAL_GPIO_Init+0x3a0>)
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004592:	02ee      	lsls	r6, r5, #11
        temp = EXTI->RTSR1;
 8004594:	68a4      	ldr	r4, [r4, #8]
        temp &= ~(iocurrent);
 8004596:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800459a:	f100 80b3 	bmi.w	8004704 <HAL_GPIO_Init+0x324>
        temp &= ~(iocurrent);
 800459e:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80045a0:	4e77      	ldr	r6, [pc, #476]	@ (8004780 <HAL_GPIO_Init+0x3a0>)
 80045a2:	60b4      	str	r4, [r6, #8]

        temp = EXTI->FTSR1;
 80045a4:	68f4      	ldr	r4, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045a6:	02ae      	lsls	r6, r5, #10
 80045a8:	f100 80b5 	bmi.w	8004716 <HAL_GPIO_Init+0x336>
        temp &= ~(iocurrent);
 80045ac:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80045ae:	4e74      	ldr	r6, [pc, #464]	@ (8004780 <HAL_GPIO_Init+0x3a0>)
 80045b0:	60f4      	str	r4, [r6, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80045b2:	6874      	ldr	r4, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045b4:	03ae      	lsls	r6, r5, #14
 80045b6:	f100 80ab 	bmi.w	8004710 <HAL_GPIO_Init+0x330>
        temp &= ~(iocurrent);
 80045ba:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80045bc:	4e70      	ldr	r6, [pc, #448]	@ (8004780 <HAL_GPIO_Init+0x3a0>)

        temp = EXTI->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045be:	03ed      	lsls	r5, r5, #15
        EXTI->EMR1 = temp;
 80045c0:	6074      	str	r4, [r6, #4]
        temp = EXTI->IMR1;
 80045c2:	6834      	ldr	r4, [r6, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045c4:	f100 80a1 	bmi.w	800470a <HAL_GPIO_Init+0x32a>
        temp &= ~(iocurrent);
 80045c8:	403c      	ands	r4, r7
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80045ca:	4d6d      	ldr	r5, [pc, #436]	@ (8004780 <HAL_GPIO_Init+0x3a0>)
 80045cc:	602c      	str	r4, [r5, #0]
      }
    }

    position++;
 80045ce:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045d0:	fa33 f402 	lsrs.w	r4, r3, r2
 80045d4:	d055      	beq.n	8004682 <HAL_GPIO_Init+0x2a2>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80045d6:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00u)
 80045da:	ea13 0c0e 	ands.w	ip, r3, lr
 80045de:	d0f6      	beq.n	80045ce <HAL_GPIO_Init+0x1ee>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045e0:	684d      	ldr	r5, [r1, #4]
 80045e2:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045e4:	2603      	movs	r6, #3
 80045e6:	fa06 f807 	lsl.w	r8, r6, r7
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045ea:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80045ee:	ea6f 0a08 	mvn.w	sl, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80045f2:	f104 38ff 	add.w	r8, r4, #4294967295
 80045f6:	f1b8 0f01 	cmp.w	r8, #1
 80045fa:	f67f af67 	bls.w	80044cc <HAL_GPIO_Init+0xec>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045fe:	2c03      	cmp	r4, #3
 8004600:	d0a2      	beq.n	8004548 <HAL_GPIO_Init+0x168>
        temp = GPIOx->PUPDR;
 8004602:	f04f 4890 	mov.w	r8, #1207959552	@ 0x48000000
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004606:	688e      	ldr	r6, [r1, #8]
        temp = GPIOx->PUPDR;
 8004608:	f8d8 900c 	ldr.w	r9, [r8, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800460c:	fa06 fe07 	lsl.w	lr, r6, r7
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004610:	ea0a 0909 	and.w	r9, sl, r9
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004614:	ea4e 0e09 	orr.w	lr, lr, r9
        GPIOx->PUPDR = temp;
 8004618:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800461c:	e794      	b.n	8004548 <HAL_GPIO_Init+0x168>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800461e:	f04f 0c02 	mov.w	ip, #2
 8004622:	fa0c f707 	lsl.w	r7, ip, r7
 8004626:	433e      	orrs	r6, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004628:	60a6      	str	r6, [r4, #8]
        temp = EXTI->RTSR1;
 800462a:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
 800462e:	ea6f 060a 	mvn.w	r6, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004632:	02ef      	lsls	r7, r5, #11
        temp &= ~(iocurrent);
 8004634:	bf54      	ite	pl
 8004636:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8004638:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI->RTSR1 = temp;
 800463c:	f8ce 4008 	str.w	r4, [lr, #8]
        temp = EXTI->FTSR1;
 8004640:	f8de 400c 	ldr.w	r4, [lr, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004644:	02ab      	lsls	r3, r5, #10
        temp &= ~(iocurrent);
 8004646:	bf54      	ite	pl
 8004648:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800464a:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI->FTSR1 = temp;
 800464e:	f8ce 400c 	str.w	r4, [lr, #12]
        temp = EXTI->EMR1;
 8004652:	f8de 4004 	ldr.w	r4, [lr, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004656:	03af      	lsls	r7, r5, #14
        temp &= ~(iocurrent);
 8004658:	bf54      	ite	pl
 800465a:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800465c:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI->EMR1 = temp;
 8004660:	f8ce 4004 	str.w	r4, [lr, #4]
        temp = EXTI->IMR1;
 8004664:	f8de 4000 	ldr.w	r4, [lr]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004668:	03eb      	lsls	r3, r5, #15
        temp &= ~(iocurrent);
 800466a:	bf54      	ite	pl
 800466c:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800466e:	ea4a 0404 	orrmi.w	r4, sl, r4
        EXTI->IMR1 = temp;
 8004672:	f8ce 4000 	str.w	r4, [lr]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004676:	9b00      	ldr	r3, [sp, #0]
    position++;
 8004678:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800467a:	fa33 f402 	lsrs.w	r4, r3, r2
 800467e:	f47f aec1 	bne.w	8004404 <HAL_GPIO_Init+0x24>
  }
}
 8004682:	b005      	add	sp, #20
 8004684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8004688:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800468c:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800468e:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004692:	fa03 f804 	lsl.w	r8, r3, r4
 8004696:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800469a:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 800469e:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046a2:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046a4:	ea28 080c 	bic.w	r8, r8, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046a8:	f3c5 1c00 	ubfx	ip, r5, #4, #1
 80046ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80046b0:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->OTYPER = temp;
 80046b4:	f8c0 c004 	str.w	ip, [r0, #4]
        temp = GPIOx->PUPDR;
 80046b8:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046bc:	fa03 fc04 	lsl.w	ip, r3, r4
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80046c0:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046c4:	ea4c 0c08 	orr.w	ip, ip, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046c8:	2f02      	cmp	r7, #2
        GPIOx->PUPDR = temp;
 80046ca:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ce:	f47f aeb2 	bne.w	8004436 <HAL_GPIO_Init+0x56>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046d2:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 80046d4:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046d8:	f002 0c07 	and.w	ip, r2, #7
 80046dc:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80046e0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046e4:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3u];
 80046e8:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046ec:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046ee:	230f      	movs	r3, #15
 80046f0:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046f4:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80046f6:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80046fa:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3u] = temp;
 80046fe:	f8c8 c020 	str.w	ip, [r8, #32]
 8004702:	e698      	b.n	8004436 <HAL_GPIO_Init+0x56>
          temp |= iocurrent;
 8004704:	ea44 040c 	orr.w	r4, r4, ip
 8004708:	e74a      	b.n	80045a0 <HAL_GPIO_Init+0x1c0>
          temp |= iocurrent;
 800470a:	ea4c 0404 	orr.w	r4, ip, r4
 800470e:	e75c      	b.n	80045ca <HAL_GPIO_Init+0x1ea>
          temp |= iocurrent;
 8004710:	ea44 040c 	orr.w	r4, r4, ip
 8004714:	e752      	b.n	80045bc <HAL_GPIO_Init+0x1dc>
          temp |= iocurrent;
 8004716:	ea44 040c 	orr.w	r4, r4, ip
 800471a:	e748      	b.n	80045ae <HAL_GPIO_Init+0x1ce>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800471c:	f04f 0c01 	mov.w	ip, #1
 8004720:	fa0c f707 	lsl.w	r7, ip, r7
 8004724:	433e      	orrs	r6, r7
 8004726:	e77f      	b.n	8004628 <HAL_GPIO_Init+0x248>
 8004728:	f04f 0c05 	mov.w	ip, #5
 800472c:	fa0c f707 	lsl.w	r7, ip, r7
 8004730:	433e      	orrs	r6, r7
 8004732:	e779      	b.n	8004628 <HAL_GPIO_Init+0x248>
 8004734:	f04f 0c03 	mov.w	ip, #3
 8004738:	fa0c f707 	lsl.w	r7, ip, r7
 800473c:	433e      	orrs	r6, r7
 800473e:	e773      	b.n	8004628 <HAL_GPIO_Init+0x248>
 8004740:	4770      	bx	lr
 8004742:	f04f 0c04 	mov.w	ip, #4
 8004746:	fa0c f707 	lsl.w	r7, ip, r7
 800474a:	433e      	orrs	r6, r7
 800474c:	e76c      	b.n	8004628 <HAL_GPIO_Init+0x248>
 800474e:	f04f 0c06 	mov.w	ip, #6
 8004752:	fa0c f707 	lsl.w	r7, ip, r7
 8004756:	433e      	orrs	r6, r7
 8004758:	e766      	b.n	8004628 <HAL_GPIO_Init+0x248>
        temp = GPIOx->PUPDR;
 800475a:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800475e:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004760:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004764:	fa03 fc04 	lsl.w	ip, r3, r4
 8004768:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->PUPDR = temp;
 800476c:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004770:	e661      	b.n	8004436 <HAL_GPIO_Init+0x56>
 8004772:	bf00      	nop
 8004774:	40021000 	.word	0x40021000
 8004778:	48000400 	.word	0x48000400
 800477c:	48000800 	.word	0x48000800
 8004780:	40010400 	.word	0x40010400
 8004784:	48000c00 	.word	0x48000c00
 8004788:	48001000 	.word	0x48001000
 800478c:	48001400 	.word	0x48001400
 8004790:	48001800 	.word	0x48001800
 8004794:	48001c00 	.word	0x48001c00

08004798 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004798:	b10a      	cbz	r2, 800479e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800479a:	6181      	str	r1, [r0, #24]
 800479c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800479e:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop

080047a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80047a4:	4a04      	ldr	r2, [pc, #16]	@ (80047b8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80047a6:	6951      	ldr	r1, [r2, #20]
 80047a8:	4201      	tst	r1, r0
 80047aa:	d100      	bne.n	80047ae <HAL_GPIO_EXTI_IRQHandler+0xa>
 80047ac:	4770      	bx	lr
{
 80047ae:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80047b0:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80047b2:	f7fc ffa3 	bl	80016fc <HAL_GPIO_EXTI_Callback>
  }
}
 80047b6:	bd08      	pop	{r3, pc}
 80047b8:	40010400 	.word	0x40010400

080047bc <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80047bc:	4b02      	ldr	r3, [pc, #8]	@ (80047c8 <HAL_PWREx_GetVoltageRange+0xc>)
 80047be:	6818      	ldr	r0, [r3, #0]
#endif
}
 80047c0:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40007000 	.word	0x40007000

080047cc <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047cc:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80047d0:	d00e      	beq.n	80047f0 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80047d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004840 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80047d4:	6813      	ldr	r3, [r2, #0]
 80047d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047de:	d005      	beq.n	80047ec <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047e0:	6813      	ldr	r3, [r2, #0]
 80047e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80047e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80047ec:	2000      	movs	r0, #0
 80047ee:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80047f0:	4913      	ldr	r1, [pc, #76]	@ (8004840 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80047f2:	680b      	ldr	r3, [r1, #0]
 80047f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80047f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047fc:	d0f6      	beq.n	80047ec <HAL_PWREx_ControlVoltageScaling+0x20>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047fe:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004800:	4a10      	ldr	r2, [pc, #64]	@ (8004844 <HAL_PWREx_ControlVoltageScaling+0x78>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004802:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004806:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800480a:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800480c:	6813      	ldr	r3, [r2, #0]
 800480e:	4a0e      	ldr	r2, [pc, #56]	@ (8004848 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004810:	2032      	movs	r0, #50	@ 0x32
 8004812:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004816:	6948      	ldr	r0, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800481e:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004820:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004824:	d506      	bpl.n	8004834 <HAL_PWREx_ControlVoltageScaling+0x68>
 8004826:	e000      	b.n	800482a <HAL_PWREx_ControlVoltageScaling+0x5e>
 8004828:	b123      	cbz	r3, 8004834 <HAL_PWREx_ControlVoltageScaling+0x68>
 800482a:	694a      	ldr	r2, [r1, #20]
 800482c:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 800482e:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004832:	d4f9      	bmi.n	8004828 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004834:	4b02      	ldr	r3, [pc, #8]	@ (8004840 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004836:	695b      	ldr	r3, [r3, #20]
 8004838:	055b      	lsls	r3, r3, #21
 800483a:	d5d7      	bpl.n	80047ec <HAL_PWREx_ControlVoltageScaling+0x20>
        return HAL_TIMEOUT;
 800483c:	2003      	movs	r0, #3
}
 800483e:	4770      	bx	lr
 8004840:	40007000 	.word	0x40007000
 8004844:	20002c00 	.word	0x20002c00
 8004848:	431bde83 	.word	0x431bde83

0800484c <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800484c:	4a02      	ldr	r2, [pc, #8]	@ (8004858 <HAL_PWREx_EnableVddIO2+0xc>)
 800484e:	6853      	ldr	r3, [r2, #4]
 8004850:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004854:	6053      	str	r3, [r2, #4]
}
 8004856:	4770      	bx	lr
 8004858:	40007000 	.word	0x40007000

0800485c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800485c:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800485e:	4d20      	ldr	r5, [pc, #128]	@ (80048e0 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8004860:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8004862:	00db      	lsls	r3, r3, #3
{
 8004864:	b083      	sub	sp, #12
 8004866:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004868:	d51a      	bpl.n	80048a0 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800486a:	f7ff ffa7 	bl	80047bc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800486e:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8004872:	d027      	beq.n	80048c4 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004874:	2c80      	cmp	r4, #128	@ 0x80
 8004876:	d82c      	bhi.n	80048d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004878:	d02f      	beq.n	80048da <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 800487a:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 800487e:	fab4 f484 	clz	r4, r4
 8004882:	0964      	lsrs	r4, r4, #5
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004884:	4917      	ldr	r1, [pc, #92]	@ (80048e4 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 8004886:	680b      	ldr	r3, [r1, #0]
 8004888:	f023 0307 	bic.w	r3, r3, #7
 800488c:	4323      	orrs	r3, r4
 800488e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004890:	6808      	ldr	r0, [r1, #0]
 8004892:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8004896:	1b00      	subs	r0, r0, r4
 8004898:	bf18      	it	ne
 800489a:	2001      	movne	r0, #1
 800489c:	b003      	add	sp, #12
 800489e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80048a0:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80048a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048a6:	65ab      	str	r3, [r5, #88]	@ 0x58
 80048a8:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80048aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ae:	9301      	str	r3, [sp, #4]
 80048b0:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80048b2:	f7ff ff83 	bl	80047bc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80048b6:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048b8:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 80048bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048c0:	65ab      	str	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048c2:	d1d7      	bne.n	8004874 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 80048c4:	2c80      	cmp	r4, #128	@ 0x80
 80048c6:	d906      	bls.n	80048d6 <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_1; /* 1WS */
 80048c8:	2ca0      	cmp	r4, #160	@ 0xa0
 80048ca:	bf8c      	ite	hi
 80048cc:	2402      	movhi	r4, #2
 80048ce:	2401      	movls	r4, #1
 80048d0:	e7d8      	b.n	8004884 <RCC_SetFlashLatencyFromMSIRange+0x28>
      latency = FLASH_LATENCY_3; /* 3WS */
 80048d2:	2403      	movs	r4, #3
 80048d4:	e7d6      	b.n	8004884 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048d6:	2400      	movs	r4, #0
 80048d8:	e7d4      	b.n	8004884 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 80048da:	2402      	movs	r4, #2
 80048dc:	e7d2      	b.n	8004884 <RCC_SetFlashLatencyFromMSIRange+0x28>
 80048de:	bf00      	nop
 80048e0:	40021000 	.word	0x40021000
 80048e4:	40022000 	.word	0x40022000

080048e8 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048e8:	4a23      	ldr	r2, [pc, #140]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x90>)
 80048ea:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048ec:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048ee:	f013 030c 	ands.w	r3, r3, #12
 80048f2:	d008      	beq.n	8004906 <HAL_RCC_GetSysClockFreq+0x1e>
 80048f4:	2b0c      	cmp	r3, #12
 80048f6:	d036      	beq.n	8004966 <HAL_RCC_GetSysClockFreq+0x7e>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d032      	beq.n	8004962 <HAL_RCC_GetSysClockFreq+0x7a>
    sysclockfreq = HSE_VALUE;
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	481f      	ldr	r0, [pc, #124]	@ (800497c <HAL_RCC_GetSysClockFreq+0x94>)
 8004900:	bf18      	it	ne
 8004902:	2000      	movne	r0, #0
 8004904:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004906:	4a1c      	ldr	r2, [pc, #112]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x90>)
 8004908:	6811      	ldr	r1, [r2, #0]
 800490a:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800490c:	bf54      	ite	pl
 800490e:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004912:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8004914:	491a      	ldr	r1, [pc, #104]	@ (8004980 <HAL_RCC_GetSysClockFreq+0x98>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004916:	bf54      	ite	pl
 8004918:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800491c:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8004920:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004924:	b1f3      	cbz	r3, 8004964 <HAL_RCC_GetSysClockFreq+0x7c>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004926:	4b14      	ldr	r3, [pc, #80]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x90>)
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800492e:	2b02      	cmp	r3, #2
 8004930:	d01f      	beq.n	8004972 <HAL_RCC_GetSysClockFreq+0x8a>
 8004932:	4a12      	ldr	r2, [pc, #72]	@ (800497c <HAL_RCC_GetSysClockFreq+0x94>)
 8004934:	2b03      	cmp	r3, #3
 8004936:	bf08      	it	eq
 8004938:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800493a:	4b0f      	ldr	r3, [pc, #60]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x90>)
 800493c:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800493e:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004946:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800494a:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800494e:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004950:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004954:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004956:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004958:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 800495c:	fbb2 f0f3 	udiv	r0, r2, r3
 8004960:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8004962:	4808      	ldr	r0, [pc, #32]	@ (8004984 <HAL_RCC_GetSysClockFreq+0x9c>)
}
 8004964:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004966:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800496a:	2a01      	cmp	r2, #1
 800496c:	d0cb      	beq.n	8004906 <HAL_RCC_GetSysClockFreq+0x1e>
 800496e:	2000      	movs	r0, #0
 8004970:	e7d9      	b.n	8004926 <HAL_RCC_GetSysClockFreq+0x3e>
      pllvco = HSI_VALUE;
 8004972:	4804      	ldr	r0, [pc, #16]	@ (8004984 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004974:	e7e1      	b.n	800493a <HAL_RCC_GetSysClockFreq+0x52>
 8004976:	bf00      	nop
 8004978:	40021000 	.word	0x40021000
 800497c:	007a1200 	.word	0x007a1200
 8004980:	0800a644 	.word	0x0800a644
 8004984:	00f42400 	.word	0x00f42400

08004988 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8004988:	2800      	cmp	r0, #0
 800498a:	f000 824b 	beq.w	8004e24 <HAL_RCC_OscConfig+0x49c>
{
 800498e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004992:	4a8c      	ldr	r2, [pc, #560]	@ (8004bc4 <HAL_RCC_OscConfig+0x23c>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004994:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004996:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004998:	68d6      	ldr	r6, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800499a:	06d9      	lsls	r1, r3, #27
{
 800499c:	b083      	sub	sp, #12
 800499e:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049a0:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049a4:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80049a8:	461a      	mov	r2, r3
 80049aa:	d52f      	bpl.n	8004a0c <HAL_RCC_OscConfig+0x84>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049ac:	2d00      	cmp	r5, #0
 80049ae:	f000 8112 	beq.w	8004bd6 <HAL_RCC_OscConfig+0x24e>
 80049b2:	2d0c      	cmp	r5, #12
 80049b4:	f000 810c 	beq.w	8004bd0 <HAL_RCC_OscConfig+0x248>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049b8:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 80049ba:	4f82      	ldr	r7, [pc, #520]	@ (8004bc4 <HAL_RCC_OscConfig+0x23c>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 81a7 	beq.w	8004d10 <HAL_RCC_OscConfig+0x388>
        __HAL_RCC_MSI_ENABLE();
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80049ca:	f7fe fb3f 	bl	800304c <HAL_GetTick>
 80049ce:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049d0:	e006      	b.n	80049e0 <HAL_RCC_OscConfig+0x58>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049d2:	f7fe fb3b 	bl	800304c <HAL_GetTick>
 80049d6:	eba0 0008 	sub.w	r0, r0, r8
 80049da:	2802      	cmp	r0, #2
 80049dc:	f200 8194 	bhi.w	8004d08 <HAL_RCC_OscConfig+0x380>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	079a      	lsls	r2, r3, #30
 80049e4:	d5f5      	bpl.n	80049d2 <HAL_RCC_OscConfig+0x4a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	f043 0308 	orr.w	r3, r3, #8
 80049ec:	603b      	str	r3, [r7, #0]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	6a22      	ldr	r2, [r4, #32]
 80049f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049f6:	4313      	orrs	r3, r2
 80049f8:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69e2      	ldr	r2, [r4, #28]
 80049fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004a06:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	07df      	lsls	r7, r3, #31
 8004a0e:	d529      	bpl.n	8004a64 <HAL_RCC_OscConfig+0xdc>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a10:	2d08      	cmp	r5, #8
 8004a12:	f000 814b 	beq.w	8004cac <HAL_RCC_OscConfig+0x324>
 8004a16:	2d0c      	cmp	r5, #12
 8004a18:	f000 8145 	beq.w	8004ca6 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a1c:	6863      	ldr	r3, [r4, #4]
 8004a1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a22:	f000 8189 	beq.w	8004d38 <HAL_RCC_OscConfig+0x3b0>
 8004a26:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a2a:	f000 8209 	beq.w	8004e40 <HAL_RCC_OscConfig+0x4b8>
 8004a2e:	4f65      	ldr	r7, [pc, #404]	@ (8004bc4 <HAL_RCC_OscConfig+0x23c>)
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004a36:	603a      	str	r2, [r7, #0]
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a3e:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f040 817e 	bne.w	8004d42 <HAL_RCC_OscConfig+0x3ba>
        tickstart = HAL_GetTick();
 8004a46:	f7fe fb01 	bl	800304c <HAL_GetTick>
 8004a4a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a4c:	e006      	b.n	8004a5c <HAL_RCC_OscConfig+0xd4>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a4e:	f7fe fafd 	bl	800304c <HAL_GetTick>
 8004a52:	eba0 0008 	sub.w	r0, r0, r8
 8004a56:	2864      	cmp	r0, #100	@ 0x64
 8004a58:	f200 8156 	bhi.w	8004d08 <HAL_RCC_OscConfig+0x380>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	0398      	lsls	r0, r3, #14
 8004a60:	d4f5      	bmi.n	8004a4e <HAL_RCC_OscConfig+0xc6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a62:	6822      	ldr	r2, [r4, #0]
 8004a64:	0791      	lsls	r1, r2, #30
 8004a66:	d513      	bpl.n	8004a90 <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004a68:	2d04      	cmp	r5, #4
 8004a6a:	f040 80f5 	bne.w	8004c58 <HAL_RCC_OscConfig+0x2d0>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a6e:	4b55      	ldr	r3, [pc, #340]	@ (8004bc4 <HAL_RCC_OscConfig+0x23c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	055a      	lsls	r2, r3, #21
 8004a74:	d503      	bpl.n	8004a7e <HAL_RCC_OscConfig+0xf6>
 8004a76:	68e3      	ldr	r3, [r4, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 8110 	beq.w	8004c9e <HAL_RCC_OscConfig+0x316>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a7e:	4a51      	ldr	r2, [pc, #324]	@ (8004bc4 <HAL_RCC_OscConfig+0x23c>)
 8004a80:	6921      	ldr	r1, [r4, #16]
 8004a82:	6853      	ldr	r3, [r2, #4]
 8004a84:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004a88:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004a8c:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a8e:	6822      	ldr	r2, [r4, #0]
 8004a90:	0711      	lsls	r1, r2, #28
 8004a92:	d519      	bpl.n	8004ac8 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a94:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8004a96:	4e4b      	ldr	r6, [pc, #300]	@ (8004bc4 <HAL_RCC_OscConfig+0x23c>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8110 	beq.w	8004cbe <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_LSI_ENABLE();
 8004a9e:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8004aaa:	f7fe facf 	bl	800304c <HAL_GetTick>
 8004aae:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ab0:	e005      	b.n	8004abe <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ab2:	f7fe facb 	bl	800304c <HAL_GetTick>
 8004ab6:	1bc0      	subs	r0, r0, r7
 8004ab8:	2802      	cmp	r0, #2
 8004aba:	f200 8125 	bhi.w	8004d08 <HAL_RCC_OscConfig+0x380>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004abe:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8004ac2:	079a      	lsls	r2, r3, #30
 8004ac4:	d5f5      	bpl.n	8004ab2 <HAL_RCC_OscConfig+0x12a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ac6:	6822      	ldr	r2, [r4, #0]
 8004ac8:	0757      	lsls	r7, r2, #29
 8004aca:	d53f      	bpl.n	8004b4c <HAL_RCC_OscConfig+0x1c4>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004acc:	4b3d      	ldr	r3, [pc, #244]	@ (8004bc4 <HAL_RCC_OscConfig+0x23c>)
 8004ace:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004ad0:	00d6      	lsls	r6, r2, #3
 8004ad2:	f100 8146 	bmi.w	8004d62 <HAL_RCC_OscConfig+0x3da>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ad6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004ad8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004adc:	659a      	str	r2, [r3, #88]	@ 0x58
 8004ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ae0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ae4:	9301      	str	r3, [sp, #4]
 8004ae6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004ae8:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aea:	4f37      	ldr	r7, [pc, #220]	@ (8004bc8 <HAL_RCC_OscConfig+0x240>)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	05d8      	lsls	r0, r3, #23
 8004af0:	f140 80f9 	bpl.w	8004ce6 <HAL_RCC_OscConfig+0x35e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004af4:	68a3      	ldr	r3, [r4, #8]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	f000 8147 	beq.w	8004d8a <HAL_RCC_OscConfig+0x402>
 8004afc:	2b05      	cmp	r3, #5
 8004afe:	f000 81ac 	beq.w	8004e5a <HAL_RCC_OscConfig+0x4d2>
 8004b02:	4f30      	ldr	r7, [pc, #192]	@ (8004bc4 <HAL_RCC_OscConfig+0x23c>)
 8004b04:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004b08:	f022 0201 	bic.w	r2, r2, #1
 8004b0c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8004b10:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004b14:	f022 0204 	bic.w	r2, r2, #4
 8004b18:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f040 813b 	bne.w	8004d98 <HAL_RCC_OscConfig+0x410>
      tickstart = HAL_GetTick();
 8004b22:	f7fe fa93 	bl	800304c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b26:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004b2a:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b2c:	e006      	b.n	8004b3c <HAL_RCC_OscConfig+0x1b4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b2e:	f7fe fa8d 	bl	800304c <HAL_GetTick>
 8004b32:	eba0 0008 	sub.w	r0, r0, r8
 8004b36:	4548      	cmp	r0, r9
 8004b38:	f200 80e6 	bhi.w	8004d08 <HAL_RCC_OscConfig+0x380>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004b40:	079b      	lsls	r3, r3, #30
 8004b42:	d4f4      	bmi.n	8004b2e <HAL_RCC_OscConfig+0x1a6>
    if(pwrclkchanged == SET)
 8004b44:	2e00      	cmp	r6, #0
 8004b46:	f040 816f 	bne.w	8004e28 <HAL_RCC_OscConfig+0x4a0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b4a:	6822      	ldr	r2, [r4, #0]
 8004b4c:	0696      	lsls	r6, r2, #26
 8004b4e:	d518      	bpl.n	8004b82 <HAL_RCC_OscConfig+0x1fa>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b50:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      __HAL_RCC_HSI48_ENABLE();
 8004b52:	4e1c      	ldr	r6, [pc, #112]	@ (8004bc4 <HAL_RCC_OscConfig+0x23c>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	f000 8150 	beq.w	8004dfa <HAL_RCC_OscConfig+0x472>
      __HAL_RCC_HSI48_ENABLE();
 8004b5a:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8004b5e:	f043 0301 	orr.w	r3, r3, #1
 8004b62:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8004b66:	f7fe fa71 	bl	800304c <HAL_GetTick>
 8004b6a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b6c:	e005      	b.n	8004b7a <HAL_RCC_OscConfig+0x1f2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b6e:	f7fe fa6d 	bl	800304c <HAL_GetTick>
 8004b72:	1bc0      	subs	r0, r0, r7
 8004b74:	2802      	cmp	r0, #2
 8004b76:	f200 80c7 	bhi.w	8004d08 <HAL_RCC_OscConfig+0x380>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b7a:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8004b7e:	0798      	lsls	r0, r3, #30
 8004b80:	d5f5      	bpl.n	8004b6e <HAL_RCC_OscConfig+0x1e6>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b82:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004b84:	b1db      	cbz	r3, 8004bbe <HAL_RCC_OscConfig+0x236>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	f000 817e 	beq.w	8004e88 <HAL_RCC_OscConfig+0x500>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b8c:	2d0c      	cmp	r5, #12
 8004b8e:	f000 8086 	beq.w	8004c9e <HAL_RCC_OscConfig+0x316>
        __HAL_RCC_PLL_DISABLE();
 8004b92:	4c0c      	ldr	r4, [pc, #48]	@ (8004bc4 <HAL_RCC_OscConfig+0x23c>)
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b9a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004b9c:	f7fe fa56 	bl	800304c <HAL_GetTick>
 8004ba0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ba2:	e005      	b.n	8004bb0 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba4:	f7fe fa52 	bl	800304c <HAL_GetTick>
 8004ba8:	1b40      	subs	r0, r0, r5
 8004baa:	2802      	cmp	r0, #2
 8004bac:	f200 80ac 	bhi.w	8004d08 <HAL_RCC_OscConfig+0x380>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	019b      	lsls	r3, r3, #6
 8004bb4:	d4f6      	bmi.n	8004ba4 <HAL_RCC_OscConfig+0x21c>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004bb6:	68e2      	ldr	r2, [r4, #12]
 8004bb8:	4b04      	ldr	r3, [pc, #16]	@ (8004bcc <HAL_RCC_OscConfig+0x244>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	60e3      	str	r3, [r4, #12]
  return HAL_OK;
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	e06e      	b.n	8004ca0 <HAL_RCC_OscConfig+0x318>
 8004bc2:	bf00      	nop
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	40007000 	.word	0x40007000
 8004bcc:	feeefffc 	.word	0xfeeefffc
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004bd0:	2e01      	cmp	r6, #1
 8004bd2:	f47f aef1 	bne.w	80049b8 <HAL_RCC_OscConfig+0x30>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bd6:	4ba8      	ldr	r3, [pc, #672]	@ (8004e78 <HAL_RCC_OscConfig+0x4f0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	079b      	lsls	r3, r3, #30
 8004bdc:	d45c      	bmi.n	8004c98 <HAL_RCC_OscConfig+0x310>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bde:	4ba6      	ldr	r3, [pc, #664]	@ (8004e78 <HAL_RCC_OscConfig+0x4f0>)
 8004be0:	6a20      	ldr	r0, [r4, #32]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	0717      	lsls	r7, r2, #28
 8004be6:	bf56      	itet	pl
 8004be8:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 8004bec:	681b      	ldrmi	r3, [r3, #0]
 8004bee:	091b      	lsrpl	r3, r3, #4
 8004bf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bf4:	4298      	cmp	r0, r3
 8004bf6:	f200 80e4 	bhi.w	8004dc2 <HAL_RCC_OscConfig+0x43a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bfa:	4b9f      	ldr	r3, [pc, #636]	@ (8004e78 <HAL_RCC_OscConfig+0x4f0>)
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	f042 0208 	orr.w	r2, r2, #8
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004c0a:	4302      	orrs	r2, r0
 8004c0c:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	69e1      	ldr	r1, [r4, #28]
 8004c12:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004c16:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004c1a:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c1c:	2d00      	cmp	r5, #0
 8004c1e:	f000 8109 	beq.w	8004e34 <HAL_RCC_OscConfig+0x4ac>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c22:	f7ff fe61 	bl	80048e8 <HAL_RCC_GetSysClockFreq>
 8004c26:	4b94      	ldr	r3, [pc, #592]	@ (8004e78 <HAL_RCC_OscConfig+0x4f0>)
 8004c28:	4a94      	ldr	r2, [pc, #592]	@ (8004e7c <HAL_RCC_OscConfig+0x4f4>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004c30:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 8004c32:	4a93      	ldr	r2, [pc, #588]	@ (8004e80 <HAL_RCC_OscConfig+0x4f8>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c34:	f003 031f 	and.w	r3, r3, #31
 8004c38:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8004c3c:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c3e:	4a91      	ldr	r2, [pc, #580]	@ (8004e84 <HAL_RCC_OscConfig+0x4fc>)
 8004c40:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8004c42:	f7fe f9c1 	bl	8002fc8 <HAL_InitTick>
        if(status != HAL_OK)
 8004c46:	bb58      	cbnz	r0, 8004ca0 <HAL_RCC_OscConfig+0x318>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c48:	6822      	ldr	r2, [r4, #0]
 8004c4a:	07d1      	lsls	r1, r2, #31
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	f53f aee2 	bmi.w	8004a16 <HAL_RCC_OscConfig+0x8e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c52:	0791      	lsls	r1, r2, #30
 8004c54:	f57f af1c 	bpl.w	8004a90 <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c58:	2d0c      	cmp	r5, #12
 8004c5a:	f000 80ca 	beq.w	8004df2 <HAL_RCC_OscConfig+0x46a>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c5e:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8004c60:	4e85      	ldr	r6, [pc, #532]	@ (8004e78 <HAL_RCC_OscConfig+0x4f0>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d07f      	beq.n	8004d66 <HAL_RCC_OscConfig+0x3de>
        __HAL_RCC_HSI_ENABLE();
 8004c66:	6833      	ldr	r3, [r6, #0]
 8004c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c6c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004c6e:	f7fe f9ed 	bl	800304c <HAL_GetTick>
 8004c72:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c74:	e004      	b.n	8004c80 <HAL_RCC_OscConfig+0x2f8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c76:	f7fe f9e9 	bl	800304c <HAL_GetTick>
 8004c7a:	1bc0      	subs	r0, r0, r7
 8004c7c:	2802      	cmp	r0, #2
 8004c7e:	d843      	bhi.n	8004d08 <HAL_RCC_OscConfig+0x380>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c80:	6833      	ldr	r3, [r6, #0]
 8004c82:	055b      	lsls	r3, r3, #21
 8004c84:	d5f7      	bpl.n	8004c76 <HAL_RCC_OscConfig+0x2ee>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c86:	6873      	ldr	r3, [r6, #4]
 8004c88:	6922      	ldr	r2, [r4, #16]
 8004c8a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004c8e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004c92:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c94:	6822      	ldr	r2, [r4, #0]
 8004c96:	e6fb      	b.n	8004a90 <HAL_RCC_OscConfig+0x108>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c98:	69a3      	ldr	r3, [r4, #24]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d19f      	bne.n	8004bde <HAL_RCC_OscConfig+0x256>
    return HAL_ERROR;
 8004c9e:	2001      	movs	r0, #1
}
 8004ca0:	b003      	add	sp, #12
 8004ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ca6:	2e03      	cmp	r6, #3
 8004ca8:	f47f aeb8 	bne.w	8004a1c <HAL_RCC_OscConfig+0x94>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cac:	4a72      	ldr	r2, [pc, #456]	@ (8004e78 <HAL_RCC_OscConfig+0x4f0>)
 8004cae:	6812      	ldr	r2, [r2, #0]
 8004cb0:	0390      	lsls	r0, r2, #14
 8004cb2:	d502      	bpl.n	8004cba <HAL_RCC_OscConfig+0x332>
 8004cb4:	6862      	ldr	r2, [r4, #4]
 8004cb6:	2a00      	cmp	r2, #0
 8004cb8:	d0f1      	beq.n	8004c9e <HAL_RCC_OscConfig+0x316>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cba:	461a      	mov	r2, r3
 8004cbc:	e7c9      	b.n	8004c52 <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_LSI_DISABLE();
 8004cbe:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8004cc2:	f023 0301 	bic.w	r3, r3, #1
 8004cc6:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8004cca:	f7fe f9bf 	bl	800304c <HAL_GetTick>
 8004cce:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cd0:	e004      	b.n	8004cdc <HAL_RCC_OscConfig+0x354>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cd2:	f7fe f9bb 	bl	800304c <HAL_GetTick>
 8004cd6:	1bc0      	subs	r0, r0, r7
 8004cd8:	2802      	cmp	r0, #2
 8004cda:	d815      	bhi.n	8004d08 <HAL_RCC_OscConfig+0x380>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cdc:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8004ce0:	079b      	lsls	r3, r3, #30
 8004ce2:	d4f6      	bmi.n	8004cd2 <HAL_RCC_OscConfig+0x34a>
 8004ce4:	e6ef      	b.n	8004ac6 <HAL_RCC_OscConfig+0x13e>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cec:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004cee:	f7fe f9ad 	bl	800304c <HAL_GetTick>
 8004cf2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	05d9      	lsls	r1, r3, #23
 8004cf8:	f53f aefc 	bmi.w	8004af4 <HAL_RCC_OscConfig+0x16c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cfc:	f7fe f9a6 	bl	800304c <HAL_GetTick>
 8004d00:	eba0 0008 	sub.w	r0, r0, r8
 8004d04:	2802      	cmp	r0, #2
 8004d06:	d9f5      	bls.n	8004cf4 <HAL_RCC_OscConfig+0x36c>
            return HAL_TIMEOUT;
 8004d08:	2003      	movs	r0, #3
}
 8004d0a:	b003      	add	sp, #12
 8004d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        __HAL_RCC_MSI_DISABLE();
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	f023 0301 	bic.w	r3, r3, #1
 8004d16:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8004d18:	f7fe f998 	bl	800304c <HAL_GetTick>
 8004d1c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d1e:	e005      	b.n	8004d2c <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d20:	f7fe f994 	bl	800304c <HAL_GetTick>
 8004d24:	eba0 0008 	sub.w	r0, r0, r8
 8004d28:	2802      	cmp	r0, #2
 8004d2a:	d8ed      	bhi.n	8004d08 <HAL_RCC_OscConfig+0x380>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	079b      	lsls	r3, r3, #30
 8004d30:	d4f6      	bmi.n	8004d20 <HAL_RCC_OscConfig+0x398>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	461a      	mov	r2, r3
 8004d36:	e669      	b.n	8004a0c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d38:	4a4f      	ldr	r2, [pc, #316]	@ (8004e78 <HAL_RCC_OscConfig+0x4f0>)
 8004d3a:	6813      	ldr	r3, [r2, #0]
 8004d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d40:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004d42:	f7fe f983 	bl	800304c <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d46:	f8df 8130 	ldr.w	r8, [pc, #304]	@ 8004e78 <HAL_RCC_OscConfig+0x4f0>
        tickstart = HAL_GetTick();
 8004d4a:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d4c:	e004      	b.n	8004d58 <HAL_RCC_OscConfig+0x3d0>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d4e:	f7fe f97d 	bl	800304c <HAL_GetTick>
 8004d52:	1bc0      	subs	r0, r0, r7
 8004d54:	2864      	cmp	r0, #100	@ 0x64
 8004d56:	d8d7      	bhi.n	8004d08 <HAL_RCC_OscConfig+0x380>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d58:	f8d8 3000 	ldr.w	r3, [r8]
 8004d5c:	039b      	lsls	r3, r3, #14
 8004d5e:	d5f6      	bpl.n	8004d4e <HAL_RCC_OscConfig+0x3c6>
 8004d60:	e67f      	b.n	8004a62 <HAL_RCC_OscConfig+0xda>
    FlagStatus       pwrclkchanged = RESET;
 8004d62:	2600      	movs	r6, #0
 8004d64:	e6c1      	b.n	8004aea <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8004d66:	6833      	ldr	r3, [r6, #0]
 8004d68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d6c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004d6e:	f7fe f96d 	bl	800304c <HAL_GetTick>
 8004d72:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d74:	e004      	b.n	8004d80 <HAL_RCC_OscConfig+0x3f8>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d76:	f7fe f969 	bl	800304c <HAL_GetTick>
 8004d7a:	1bc0      	subs	r0, r0, r7
 8004d7c:	2802      	cmp	r0, #2
 8004d7e:	d8c3      	bhi.n	8004d08 <HAL_RCC_OscConfig+0x380>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d80:	6833      	ldr	r3, [r6, #0]
 8004d82:	0558      	lsls	r0, r3, #21
 8004d84:	d4f7      	bmi.n	8004d76 <HAL_RCC_OscConfig+0x3ee>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d86:	6822      	ldr	r2, [r4, #0]
 8004d88:	e682      	b.n	8004a90 <HAL_RCC_OscConfig+0x108>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d8a:	4a3b      	ldr	r2, [pc, #236]	@ (8004e78 <HAL_RCC_OscConfig+0x4f0>)
 8004d8c:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004d90:	f043 0301 	orr.w	r3, r3, #1
 8004d94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8004d98:	f7fe f958 	bl	800304c <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d9c:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 8004e78 <HAL_RCC_OscConfig+0x4f0>
      tickstart = HAL_GetTick();
 8004da0:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da2:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004da6:	e004      	b.n	8004db2 <HAL_RCC_OscConfig+0x42a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da8:	f7fe f950 	bl	800304c <HAL_GetTick>
 8004dac:	1bc0      	subs	r0, r0, r7
 8004dae:	4548      	cmp	r0, r9
 8004db0:	d8aa      	bhi.n	8004d08 <HAL_RCC_OscConfig+0x380>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004db2:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 8004db6:	079a      	lsls	r2, r3, #30
 8004db8:	d5f6      	bpl.n	8004da8 <HAL_RCC_OscConfig+0x420>
    if(pwrclkchanged == SET)
 8004dba:	2e00      	cmp	r6, #0
 8004dbc:	f43f aec5 	beq.w	8004b4a <HAL_RCC_OscConfig+0x1c2>
 8004dc0:	e032      	b.n	8004e28 <HAL_RCC_OscConfig+0x4a0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004dc2:	f7ff fd4b 	bl	800485c <RCC_SetFlashLatencyFromMSIRange>
 8004dc6:	2800      	cmp	r0, #0
 8004dc8:	f47f af69 	bne.w	8004c9e <HAL_RCC_OscConfig+0x316>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dcc:	4b2a      	ldr	r3, [pc, #168]	@ (8004e78 <HAL_RCC_OscConfig+0x4f0>)
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	f042 0208 	orr.w	r2, r2, #8
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	6a21      	ldr	r1, [r4, #32]
 8004dda:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004dde:	430a      	orrs	r2, r1
 8004de0:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	69e1      	ldr	r1, [r4, #28]
 8004de6:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8004dea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004dee:	605a      	str	r2, [r3, #4]
 8004df0:	e717      	b.n	8004c22 <HAL_RCC_OscConfig+0x29a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004df2:	2e02      	cmp	r6, #2
 8004df4:	f47f af33 	bne.w	8004c5e <HAL_RCC_OscConfig+0x2d6>
 8004df8:	e639      	b.n	8004a6e <HAL_RCC_OscConfig+0xe6>
      __HAL_RCC_HSI48_DISABLE();
 8004dfa:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8004dfe:	f023 0301 	bic.w	r3, r3, #1
 8004e02:	f8c6 3098 	str.w	r3, [r6, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8004e06:	f7fe f921 	bl	800304c <HAL_GetTick>
 8004e0a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e0c:	e005      	b.n	8004e1a <HAL_RCC_OscConfig+0x492>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e0e:	f7fe f91d 	bl	800304c <HAL_GetTick>
 8004e12:	1bc0      	subs	r0, r0, r7
 8004e14:	2802      	cmp	r0, #2
 8004e16:	f63f af77 	bhi.w	8004d08 <HAL_RCC_OscConfig+0x380>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e1a:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 8004e1e:	0799      	lsls	r1, r3, #30
 8004e20:	d4f5      	bmi.n	8004e0e <HAL_RCC_OscConfig+0x486>
 8004e22:	e6ae      	b.n	8004b82 <HAL_RCC_OscConfig+0x1fa>
    return HAL_ERROR;
 8004e24:	2001      	movs	r0, #1
}
 8004e26:	4770      	bx	lr
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e28:	4a13      	ldr	r2, [pc, #76]	@ (8004e78 <HAL_RCC_OscConfig+0x4f0>)
 8004e2a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8004e2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e30:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e32:	e68a      	b.n	8004b4a <HAL_RCC_OscConfig+0x1c2>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e34:	f7ff fd12 	bl	800485c <RCC_SetFlashLatencyFromMSIRange>
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	f43f aef2 	beq.w	8004c22 <HAL_RCC_OscConfig+0x29a>
 8004e3e:	e72e      	b.n	8004c9e <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e44:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004e56:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e58:	e773      	b.n	8004d42 <HAL_RCC_OscConfig+0x3ba>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e5a:	4b07      	ldr	r3, [pc, #28]	@ (8004e78 <HAL_RCC_OscConfig+0x4f0>)
 8004e5c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004e60:	f042 0204 	orr.w	r2, r2, #4
 8004e64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8004e68:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004e6c:	f042 0201 	orr.w	r2, r2, #1
 8004e70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e74:	e790      	b.n	8004d98 <HAL_RCC_OscConfig+0x410>
 8004e76:	bf00      	nop
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	0800a674 	.word	0x0800a674
 8004e80:	20002c08 	.word	0x20002c08
 8004e84:	20002c00 	.word	0x20002c00
      pll_config = RCC->PLLCFGR;
 8004e88:	4e48      	ldr	r6, [pc, #288]	@ (8004fac <HAL_RCC_OscConfig+0x624>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      pll_config = RCC->PLLCFGR;
 8004e8c:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8e:	f003 0103 	and.w	r1, r3, #3
 8004e92:	4291      	cmp	r1, r2
 8004e94:	d04d      	beq.n	8004f32 <HAL_RCC_OscConfig+0x5aa>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e96:	2d0c      	cmp	r5, #12
 8004e98:	f43f af01 	beq.w	8004c9e <HAL_RCC_OscConfig+0x316>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e9c:	4d43      	ldr	r5, [pc, #268]	@ (8004fac <HAL_RCC_OscConfig+0x624>)
 8004e9e:	682b      	ldr	r3, [r5, #0]
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	f53f aefc 	bmi.w	8004c9e <HAL_RCC_OscConfig+0x316>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004ea6:	682b      	ldr	r3, [r5, #0]
 8004ea8:	00db      	lsls	r3, r3, #3
 8004eaa:	f53f aef8 	bmi.w	8004c9e <HAL_RCC_OscConfig+0x316>
            __HAL_RCC_PLL_DISABLE();
 8004eae:	682b      	ldr	r3, [r5, #0]
 8004eb0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004eb4:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8004eb6:	f7fe f8c9 	bl	800304c <HAL_GetTick>
 8004eba:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ebc:	e005      	b.n	8004eca <HAL_RCC_OscConfig+0x542>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ebe:	f7fe f8c5 	bl	800304c <HAL_GetTick>
 8004ec2:	1b80      	subs	r0, r0, r6
 8004ec4:	2802      	cmp	r0, #2
 8004ec6:	f63f af1f 	bhi.w	8004d08 <HAL_RCC_OscConfig+0x380>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eca:	682b      	ldr	r3, [r5, #0]
 8004ecc:	019f      	lsls	r7, r3, #6
 8004ece:	d4f6      	bmi.n	8004ebe <HAL_RCC_OscConfig+0x536>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ed0:	68e9      	ldr	r1, [r5, #12]
 8004ed2:	4b37      	ldr	r3, [pc, #220]	@ (8004fb0 <HAL_RCC_OscConfig+0x628>)
 8004ed4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004ed6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8004ed8:	400b      	ands	r3, r1
 8004eda:	4313      	orrs	r3, r2
 8004edc:	e9d4 120d 	ldrd	r1, r2, [r4, #52]	@ 0x34
 8004ee0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004ee4:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8004ee8:	e9d4 120f 	ldrd	r1, r2, [r4, #60]	@ 0x3c
 8004eec:	3801      	subs	r0, #1
 8004eee:	0849      	lsrs	r1, r1, #1
 8004ef0:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004ef4:	3901      	subs	r1, #1
 8004ef6:	0852      	lsrs	r2, r2, #1
 8004ef8:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8004efc:	3a01      	subs	r2, #1
 8004efe:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004f02:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 8004f04:	682b      	ldr	r3, [r5, #0]
 8004f06:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f0a:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f0c:	68eb      	ldr	r3, [r5, #12]
 8004f0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f12:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 8004f14:	f7fe f89a 	bl	800304c <HAL_GetTick>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f18:	4d24      	ldr	r5, [pc, #144]	@ (8004fac <HAL_RCC_OscConfig+0x624>)
            tickstart = HAL_GetTick();
 8004f1a:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f1c:	e005      	b.n	8004f2a <HAL_RCC_OscConfig+0x5a2>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f1e:	f7fe f895 	bl	800304c <HAL_GetTick>
 8004f22:	1b00      	subs	r0, r0, r4
 8004f24:	2802      	cmp	r0, #2
 8004f26:	f63f aeef 	bhi.w	8004d08 <HAL_RCC_OscConfig+0x380>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f2a:	682b      	ldr	r3, [r5, #0]
 8004f2c:	0198      	lsls	r0, r3, #6
 8004f2e:	d5f6      	bpl.n	8004f1e <HAL_RCC_OscConfig+0x596>
 8004f30:	e645      	b.n	8004bbe <HAL_RCC_OscConfig+0x236>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f32:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004f34:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004f38:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3a:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8004f3e:	d1aa      	bne.n	8004e96 <HAL_RCC_OscConfig+0x50e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f42:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f46:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004f4a:	d1a4      	bne.n	8004e96 <HAL_RCC_OscConfig+0x50e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f4c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004f4e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f52:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8004f56:	d19e      	bne.n	8004e96 <HAL_RCC_OscConfig+0x50e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f58:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8004f5a:	0852      	lsrs	r2, r2, #1
 8004f5c:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8004f60:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f62:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004f66:	d196      	bne.n	8004e96 <HAL_RCC_OscConfig+0x50e>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f68:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004f6a:	0852      	lsrs	r2, r2, #1
 8004f6c:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8004f70:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f72:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8004f76:	d18e      	bne.n	8004e96 <HAL_RCC_OscConfig+0x50e>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f78:	6833      	ldr	r3, [r6, #0]
 8004f7a:	0199      	lsls	r1, r3, #6
 8004f7c:	f53f ae1f 	bmi.w	8004bbe <HAL_RCC_OscConfig+0x236>
          __HAL_RCC_PLL_ENABLE();
 8004f80:	6833      	ldr	r3, [r6, #0]
 8004f82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f86:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f88:	68f3      	ldr	r3, [r6, #12]
 8004f8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f8e:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8004f90:	f7fe f85c 	bl	800304c <HAL_GetTick>
 8004f94:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f96:	e005      	b.n	8004fa4 <HAL_RCC_OscConfig+0x61c>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f98:	f7fe f858 	bl	800304c <HAL_GetTick>
 8004f9c:	1b03      	subs	r3, r0, r4
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	f63f aeb2 	bhi.w	8004d08 <HAL_RCC_OscConfig+0x380>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fa4:	6833      	ldr	r3, [r6, #0]
 8004fa6:	019a      	lsls	r2, r3, #6
 8004fa8:	d5f6      	bpl.n	8004f98 <HAL_RCC_OscConfig+0x610>
 8004faa:	e608      	b.n	8004bbe <HAL_RCC_OscConfig+0x236>
 8004fac:	40021000 	.word	0x40021000
 8004fb0:	019d808c 	.word	0x019d808c

08004fb4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	f000 80a0 	beq.w	80050fa <HAL_RCC_ClockConfig+0x146>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fba:	4a54      	ldr	r2, [pc, #336]	@ (800510c <HAL_RCC_ClockConfig+0x158>)
 8004fbc:	6813      	ldr	r3, [r2, #0]
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	428b      	cmp	r3, r1
{
 8004fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fc8:	460d      	mov	r5, r1
 8004fca:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fcc:	d20c      	bcs.n	8004fe8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fce:	6813      	ldr	r3, [r2, #0]
 8004fd0:	f023 0307 	bic.w	r3, r3, #7
 8004fd4:	430b      	orrs	r3, r1
 8004fd6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd8:	6813      	ldr	r3, [r2, #0]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	428b      	cmp	r3, r1
 8004fe0:	d002      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004fe2:	2001      	movs	r0, #1
}
 8004fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	0799      	lsls	r1, r3, #30
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fec:	f003 0201 	and.w	r2, r3, #1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff0:	d570      	bpl.n	80050d4 <HAL_RCC_ClockConfig+0x120>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ff2:	4e47      	ldr	r6, [pc, #284]	@ (8005110 <HAL_RCC_ClockConfig+0x15c>)
 8004ff4:	68a0      	ldr	r0, [r4, #8]
 8004ff6:	68b1      	ldr	r1, [r6, #8]
 8004ff8:	f001 01f0 	and.w	r1, r1, #240	@ 0xf0
 8004ffc:	4288      	cmp	r0, r1
 8004ffe:	d904      	bls.n	800500a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005000:	68b1      	ldr	r1, [r6, #8]
 8005002:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
 8005006:	4301      	orrs	r1, r0
 8005008:	60b1      	str	r1, [r6, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800500a:	b332      	cbz	r2, 800505a <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800500c:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800500e:	4b40      	ldr	r3, [pc, #256]	@ (8005110 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005010:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005012:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005014:	d065      	beq.n	80050e2 <HAL_RCC_ClockConfig+0x12e>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005016:	2a02      	cmp	r2, #2
 8005018:	d06c      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x140>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800501a:	2a00      	cmp	r2, #0
 800501c:	d171      	bne.n	8005102 <HAL_RCC_ClockConfig+0x14e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800501e:	079e      	lsls	r6, r3, #30
 8005020:	d5df      	bpl.n	8004fe2 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005022:	4e3b      	ldr	r6, [pc, #236]	@ (8005110 <HAL_RCC_ClockConfig+0x15c>)
 8005024:	68b3      	ldr	r3, [r6, #8]
 8005026:	f023 0303 	bic.w	r3, r3, #3
 800502a:	4313      	orrs	r3, r2
 800502c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800502e:	f7fe f80d 	bl	800304c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005032:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8005036:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005038:	e004      	b.n	8005044 <HAL_RCC_ClockConfig+0x90>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800503a:	f7fe f807 	bl	800304c <HAL_GetTick>
 800503e:	1bc0      	subs	r0, r0, r7
 8005040:	4540      	cmp	r0, r8
 8005042:	d85c      	bhi.n	80050fe <HAL_RCC_ClockConfig+0x14a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005044:	68b3      	ldr	r3, [r6, #8]
 8005046:	6862      	ldr	r2, [r4, #4]
 8005048:	f003 030c 	and.w	r3, r3, #12
 800504c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005050:	d1f3      	bne.n	800503a <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	0799      	lsls	r1, r3, #30
 8005056:	d506      	bpl.n	8005066 <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005058:	68a0      	ldr	r0, [r4, #8]
 800505a:	492d      	ldr	r1, [pc, #180]	@ (8005110 <HAL_RCC_ClockConfig+0x15c>)
 800505c:	688a      	ldr	r2, [r1, #8]
 800505e:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8005062:	4282      	cmp	r2, r0
 8005064:	d840      	bhi.n	80050e8 <HAL_RCC_ClockConfig+0x134>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005066:	4929      	ldr	r1, [pc, #164]	@ (800510c <HAL_RCC_ClockConfig+0x158>)
 8005068:	680a      	ldr	r2, [r1, #0]
 800506a:	f002 0207 	and.w	r2, r2, #7
 800506e:	42aa      	cmp	r2, r5
 8005070:	d909      	bls.n	8005086 <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005072:	680a      	ldr	r2, [r1, #0]
 8005074:	f022 0207 	bic.w	r2, r2, #7
 8005078:	432a      	orrs	r2, r5
 800507a:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800507c:	680a      	ldr	r2, [r1, #0]
 800507e:	f002 0207 	and.w	r2, r2, #7
 8005082:	42aa      	cmp	r2, r5
 8005084:	d1ad      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005086:	075a      	lsls	r2, r3, #29
 8005088:	d506      	bpl.n	8005098 <HAL_RCC_ClockConfig+0xe4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800508a:	4921      	ldr	r1, [pc, #132]	@ (8005110 <HAL_RCC_ClockConfig+0x15c>)
 800508c:	68e0      	ldr	r0, [r4, #12]
 800508e:	688a      	ldr	r2, [r1, #8]
 8005090:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005094:	4302      	orrs	r2, r0
 8005096:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005098:	071b      	lsls	r3, r3, #28
 800509a:	d507      	bpl.n	80050ac <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800509c:	4a1c      	ldr	r2, [pc, #112]	@ (8005110 <HAL_RCC_ClockConfig+0x15c>)
 800509e:	6921      	ldr	r1, [r4, #16]
 80050a0:	6893      	ldr	r3, [r2, #8]
 80050a2:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80050a6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80050aa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050ac:	f7ff fc1c 	bl	80048e8 <HAL_RCC_GetSysClockFreq>
 80050b0:	4a17      	ldr	r2, [pc, #92]	@ (8005110 <HAL_RCC_ClockConfig+0x15c>)
 80050b2:	4c18      	ldr	r4, [pc, #96]	@ (8005114 <HAL_RCC_ClockConfig+0x160>)
 80050b4:	6892      	ldr	r2, [r2, #8]
 80050b6:	4918      	ldr	r1, [pc, #96]	@ (8005118 <HAL_RCC_ClockConfig+0x164>)
 80050b8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80050bc:	4603      	mov	r3, r0
 80050be:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 80050c0:	4816      	ldr	r0, [pc, #88]	@ (800511c <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050c2:	f002 021f 	and.w	r2, r2, #31
 80050c6:	40d3      	lsrs	r3, r2
}
 80050c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 80050cc:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050ce:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 80050d0:	f7fd bf7a 	b.w	8002fc8 <HAL_InitTick>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050d4:	2a00      	cmp	r2, #0
 80050d6:	d0c6      	beq.n	8005066 <HAL_RCC_ClockConfig+0xb2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050d8:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050da:	4b0d      	ldr	r3, [pc, #52]	@ (8005110 <HAL_RCC_ClockConfig+0x15c>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050dc:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050de:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050e0:	d199      	bne.n	8005016 <HAL_RCC_ClockConfig+0x62>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050e2:	019b      	lsls	r3, r3, #6
 80050e4:	d49d      	bmi.n	8005022 <HAL_RCC_ClockConfig+0x6e>
 80050e6:	e77c      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050e8:	688a      	ldr	r2, [r1, #8]
 80050ea:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80050ee:	4302      	orrs	r2, r0
 80050f0:	608a      	str	r2, [r1, #8]
 80050f2:	e7b8      	b.n	8005066 <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050f4:	039f      	lsls	r7, r3, #14
 80050f6:	d494      	bmi.n	8005022 <HAL_RCC_ClockConfig+0x6e>
 80050f8:	e773      	b.n	8004fe2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80050fa:	2001      	movs	r0, #1
}
 80050fc:	4770      	bx	lr
        return HAL_TIMEOUT;
 80050fe:	2003      	movs	r0, #3
 8005100:	e770      	b.n	8004fe4 <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005102:	0558      	lsls	r0, r3, #21
 8005104:	f57f af6d 	bpl.w	8004fe2 <HAL_RCC_ClockConfig+0x2e>
 8005108:	e78b      	b.n	8005022 <HAL_RCC_ClockConfig+0x6e>
 800510a:	bf00      	nop
 800510c:	40022000 	.word	0x40022000
 8005110:	40021000 	.word	0x40021000
 8005114:	0800a674 	.word	0x0800a674
 8005118:	20002c00 	.word	0x20002c00
 800511c:	20002c08 	.word	0x20002c08

08005120 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8005120:	4b01      	ldr	r3, [pc, #4]	@ (8005128 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	20002c00 	.word	0x20002c00

0800512c <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800512c:	4a45      	ldr	r2, [pc, #276]	@ (8005244 <RCCEx_PLLSAI1_Config+0x118>)
{
 800512e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005130:	68d6      	ldr	r6, [r2, #12]
{
 8005132:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005134:	07b1      	lsls	r1, r6, #30
{
 8005136:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005138:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800513a:	d006      	beq.n	800514a <RCCEx_PLLSAI1_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800513c:	68d1      	ldr	r1, [r2, #12]
 800513e:	f001 0103 	and.w	r1, r1, #3
 8005142:	4281      	cmp	r1, r0
 8005144:	d04b      	beq.n	80051de <RCCEx_PLLSAI1_Config+0xb2>
 8005146:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8005148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 800514a:	2802      	cmp	r0, #2
 800514c:	d058      	beq.n	8005200 <RCCEx_PLLSAI1_Config+0xd4>
 800514e:	2803      	cmp	r0, #3
 8005150:	d04f      	beq.n	80051f2 <RCCEx_PLLSAI1_Config+0xc6>
 8005152:	2801      	cmp	r0, #1
 8005154:	d1f7      	bne.n	8005146 <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005156:	6812      	ldr	r2, [r2, #0]
 8005158:	0793      	lsls	r3, r2, #30
 800515a:	d5f5      	bpl.n	8005148 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800515c:	4939      	ldr	r1, [pc, #228]	@ (8005244 <RCCEx_PLLSAI1_Config+0x118>)
 800515e:	68ca      	ldr	r2, [r1, #12]
 8005160:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8005164:	ea42 0300 	orr.w	r3, r2, r0
 8005168:	6862      	ldr	r2, [r4, #4]
 800516a:	3a01      	subs	r2, #1
 800516c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8005170:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 8005172:	4e34      	ldr	r6, [pc, #208]	@ (8005244 <RCCEx_PLLSAI1_Config+0x118>)
 8005174:	6833      	ldr	r3, [r6, #0]
 8005176:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800517a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800517c:	f7fd ff66 	bl	800304c <HAL_GetTick>
 8005180:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005182:	e004      	b.n	800518e <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005184:	f7fd ff62 	bl	800304c <HAL_GetTick>
 8005188:	1bc3      	subs	r3, r0, r7
 800518a:	2b02      	cmp	r3, #2
 800518c:	d83c      	bhi.n	8005208 <RCCEx_PLLSAI1_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800518e:	6833      	ldr	r3, [r6, #0]
 8005190:	011a      	lsls	r2, r3, #4
 8005192:	d4f7      	bmi.n	8005184 <RCCEx_PLLSAI1_Config+0x58>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005194:	68a3      	ldr	r3, [r4, #8]
 8005196:	0219      	lsls	r1, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 8005198:	2d00      	cmp	r5, #0
 800519a:	d137      	bne.n	800520c <RCCEx_PLLSAI1_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800519c:	6932      	ldr	r2, [r6, #16]
 800519e:	68e3      	ldr	r3, [r4, #12]
 80051a0:	f022 4278 	bic.w	r2, r2, #4160749568	@ 0xf8000000
 80051a4:	ea41 63c3 	orr.w	r3, r1, r3, lsl #27
 80051a8:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 80051ac:	4313      	orrs	r3, r2
 80051ae:	6133      	str	r3, [r6, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80051b0:	4d24      	ldr	r5, [pc, #144]	@ (8005244 <RCCEx_PLLSAI1_Config+0x118>)
 80051b2:	682b      	ldr	r3, [r5, #0]
 80051b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051b8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80051ba:	f7fd ff47 	bl	800304c <HAL_GetTick>
 80051be:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051c0:	e004      	b.n	80051cc <RCCEx_PLLSAI1_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051c2:	f7fd ff43 	bl	800304c <HAL_GetTick>
 80051c6:	1b80      	subs	r0, r0, r6
 80051c8:	2802      	cmp	r0, #2
 80051ca:	d81d      	bhi.n	8005208 <RCCEx_PLLSAI1_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051cc:	682b      	ldr	r3, [r5, #0]
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	d5f7      	bpl.n	80051c2 <RCCEx_PLLSAI1_Config+0x96>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051d2:	692b      	ldr	r3, [r5, #16]
 80051d4:	69a2      	ldr	r2, [r4, #24]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	2000      	movs	r0, #0
 80051da:	612b      	str	r3, [r5, #16]
}
 80051dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80051de:	2900      	cmp	r1, #0
 80051e0:	d0b1      	beq.n	8005146 <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80051e2:	68d3      	ldr	r3, [r2, #12]
       ||
 80051e4:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80051e6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80051ea:	3301      	adds	r3, #1
       ||
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d1aa      	bne.n	8005146 <RCCEx_PLLSAI1_Config+0x1a>
 80051f0:	e7bf      	b.n	8005172 <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051f2:	6811      	ldr	r1, [r2, #0]
 80051f4:	038e      	lsls	r6, r1, #14
 80051f6:	d4b1      	bmi.n	800515c <RCCEx_PLLSAI1_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051f8:	6812      	ldr	r2, [r2, #0]
 80051fa:	0351      	lsls	r1, r2, #13
 80051fc:	d5a3      	bpl.n	8005146 <RCCEx_PLLSAI1_Config+0x1a>
 80051fe:	e7ad      	b.n	800515c <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005200:	6812      	ldr	r2, [r2, #0]
 8005202:	0557      	lsls	r7, r2, #21
 8005204:	d59f      	bpl.n	8005146 <RCCEx_PLLSAI1_Config+0x1a>
 8005206:	e7a9      	b.n	800515c <RCCEx_PLLSAI1_Config+0x30>
 8005208:	2003      	movs	r0, #3
}
 800520a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 800520c:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800520e:	6933      	ldr	r3, [r6, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8005210:	d00b      	beq.n	800522a <RCCEx_PLLSAI1_Config+0xfe>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005212:	6962      	ldr	r2, [r4, #20]
 8005214:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005218:	0852      	lsrs	r2, r2, #1
 800521a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800521e:	3a01      	subs	r2, #1
 8005220:	430b      	orrs	r3, r1
 8005222:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005226:	6133      	str	r3, [r6, #16]
 8005228:	e7c2      	b.n	80051b0 <RCCEx_PLLSAI1_Config+0x84>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800522a:	6922      	ldr	r2, [r4, #16]
 800522c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005230:	0852      	lsrs	r2, r2, #1
 8005232:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005236:	3a01      	subs	r2, #1
 8005238:	430b      	orrs	r3, r1
 800523a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800523e:	6133      	str	r3, [r6, #16]
 8005240:	e7b6      	b.n	80051b0 <RCCEx_PLLSAI1_Config+0x84>
 8005242:	bf00      	nop
 8005244:	40021000 	.word	0x40021000

08005248 <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005248:	4a3e      	ldr	r2, [pc, #248]	@ (8005344 <RCCEx_PLLSAI2_Config+0xfc>)
{
 800524a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800524c:	68d6      	ldr	r6, [r2, #12]
{
 800524e:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005250:	07b1      	lsls	r1, r6, #30
{
 8005252:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005254:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005256:	d006      	beq.n	8005266 <RCCEx_PLLSAI2_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005258:	68d1      	ldr	r1, [r2, #12]
 800525a:	f001 0103 	and.w	r1, r1, #3
 800525e:	4281      	cmp	r1, r0
 8005260:	d04b      	beq.n	80052fa <RCCEx_PLLSAI2_Config+0xb2>
 8005262:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8005264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 8005266:	2802      	cmp	r0, #2
 8005268:	d058      	beq.n	800531c <RCCEx_PLLSAI2_Config+0xd4>
 800526a:	2803      	cmp	r0, #3
 800526c:	d04f      	beq.n	800530e <RCCEx_PLLSAI2_Config+0xc6>
 800526e:	2801      	cmp	r0, #1
 8005270:	d1f7      	bne.n	8005262 <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005272:	6812      	ldr	r2, [r2, #0]
 8005274:	0793      	lsls	r3, r2, #30
 8005276:	d5f5      	bpl.n	8005264 <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005278:	4932      	ldr	r1, [pc, #200]	@ (8005344 <RCCEx_PLLSAI2_Config+0xfc>)
 800527a:	68ca      	ldr	r2, [r1, #12]
 800527c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8005280:	ea42 0300 	orr.w	r3, r2, r0
 8005284:	6862      	ldr	r2, [r4, #4]
 8005286:	3a01      	subs	r2, #1
 8005288:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800528c:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 800528e:	4e2d      	ldr	r6, [pc, #180]	@ (8005344 <RCCEx_PLLSAI2_Config+0xfc>)
 8005290:	6833      	ldr	r3, [r6, #0]
 8005292:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005296:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005298:	f7fd fed8 	bl	800304c <HAL_GetTick>
 800529c:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800529e:	e004      	b.n	80052aa <RCCEx_PLLSAI2_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052a0:	f7fd fed4 	bl	800304c <HAL_GetTick>
 80052a4:	1bc3      	subs	r3, r0, r7
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d83c      	bhi.n	8005324 <RCCEx_PLLSAI2_Config+0xdc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052aa:	6833      	ldr	r3, [r6, #0]
 80052ac:	009a      	lsls	r2, r3, #2
 80052ae:	d4f7      	bmi.n	80052a0 <RCCEx_PLLSAI2_Config+0x58>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052b0:	68a3      	ldr	r3, [r4, #8]
 80052b2:	021b      	lsls	r3, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 80052b4:	2d00      	cmp	r5, #0
 80052b6:	d137      	bne.n	8005328 <RCCEx_PLLSAI2_Config+0xe0>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052b8:	6972      	ldr	r2, [r6, #20]
 80052ba:	68e1      	ldr	r1, [r4, #12]
 80052bc:	f022 4278 	bic.w	r2, r2, #4160749568	@ 0xf8000000
 80052c0:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 80052c4:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 80052c8:	4313      	orrs	r3, r2
 80052ca:	6173      	str	r3, [r6, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80052cc:	4d1d      	ldr	r5, [pc, #116]	@ (8005344 <RCCEx_PLLSAI2_Config+0xfc>)
 80052ce:	682b      	ldr	r3, [r5, #0]
 80052d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052d4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80052d6:	f7fd feb9 	bl	800304c <HAL_GetTick>
 80052da:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052dc:	e004      	b.n	80052e8 <RCCEx_PLLSAI2_Config+0xa0>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052de:	f7fd feb5 	bl	800304c <HAL_GetTick>
 80052e2:	1b80      	subs	r0, r0, r6
 80052e4:	2802      	cmp	r0, #2
 80052e6:	d81d      	bhi.n	8005324 <RCCEx_PLLSAI2_Config+0xdc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052e8:	682b      	ldr	r3, [r5, #0]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	d5f7      	bpl.n	80052de <RCCEx_PLLSAI2_Config+0x96>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052ee:	696b      	ldr	r3, [r5, #20]
 80052f0:	6962      	ldr	r2, [r4, #20]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	2000      	movs	r0, #0
 80052f6:	616b      	str	r3, [r5, #20]
}
 80052f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 80052fa:	2900      	cmp	r1, #0
 80052fc:	d0b1      	beq.n	8005262 <RCCEx_PLLSAI2_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80052fe:	68d3      	ldr	r3, [r2, #12]
       ||
 8005300:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005302:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005306:	3301      	adds	r3, #1
       ||
 8005308:	4293      	cmp	r3, r2
 800530a:	d1aa      	bne.n	8005262 <RCCEx_PLLSAI2_Config+0x1a>
 800530c:	e7bf      	b.n	800528e <RCCEx_PLLSAI2_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800530e:	6811      	ldr	r1, [r2, #0]
 8005310:	038e      	lsls	r6, r1, #14
 8005312:	d4b1      	bmi.n	8005278 <RCCEx_PLLSAI2_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005314:	6812      	ldr	r2, [r2, #0]
 8005316:	0351      	lsls	r1, r2, #13
 8005318:	d5a3      	bpl.n	8005262 <RCCEx_PLLSAI2_Config+0x1a>
 800531a:	e7ad      	b.n	8005278 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800531c:	6812      	ldr	r2, [r2, #0]
 800531e:	0557      	lsls	r7, r2, #21
 8005320:	d59f      	bpl.n	8005262 <RCCEx_PLLSAI2_Config+0x1a>
 8005322:	e7a9      	b.n	8005278 <RCCEx_PLLSAI2_Config+0x30>
 8005324:	2003      	movs	r0, #3
}
 8005326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005328:	6972      	ldr	r2, [r6, #20]
 800532a:	6921      	ldr	r1, [r4, #16]
 800532c:	f022 62c0 	bic.w	r2, r2, #100663296	@ 0x6000000
 8005330:	0849      	lsrs	r1, r1, #1
 8005332:	f422 42fe 	bic.w	r2, r2, #32512	@ 0x7f00
 8005336:	3901      	subs	r1, #1
 8005338:	431a      	orrs	r2, r3
 800533a:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 800533e:	6172      	str	r2, [r6, #20]
 8005340:	e7c4      	b.n	80052cc <RCCEx_PLLSAI2_Config+0x84>
 8005342:	bf00      	nop
 8005344:	40021000 	.word	0x40021000

08005348 <HAL_RCCEx_PeriphCLKConfig>:
{
 8005348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800534c:	6803      	ldr	r3, [r0, #0]
 800534e:	f413 6600 	ands.w	r6, r3, #2048	@ 0x800
{
 8005352:	b083      	sub	sp, #12
 8005354:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005356:	d01e      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005358:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 800535a:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800535e:	f000 81be 	beq.w	80056de <HAL_RCCEx_PeriphCLKConfig+0x396>
 8005362:	f200 8201 	bhi.w	8005768 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005366:	2900      	cmp	r1, #0
 8005368:	f000 81c9 	beq.w	80056fe <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800536c:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8005370:	f040 81fe 	bne.w	8005770 <HAL_RCCEx_PeriphCLKConfig+0x428>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005374:	2100      	movs	r1, #0
 8005376:	3020      	adds	r0, #32
 8005378:	f7ff ff66 	bl	8005248 <RCCEx_PLLSAI2_Config>
 800537c:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800537e:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8005380:	b94e      	cbnz	r6, 8005396 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005382:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8005384:	48b1      	ldr	r0, [pc, #708]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005386:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 800538a:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800538e:	430a      	orrs	r2, r1
 8005390:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005394:	2600      	movs	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005396:	04d8      	lsls	r0, r3, #19
 8005398:	f140 8115 	bpl.w	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    switch(PeriphClkInit->Sai2ClockSelection)
 800539c:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 800539e:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 80053a2:	f000 81b1 	beq.w	8005708 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80053a6:	f200 8109 	bhi.w	80055bc <HAL_RCCEx_PeriphCLKConfig+0x274>
 80053aa:	2900      	cmp	r1, #0
 80053ac:	f000 819d 	beq.w	80056ea <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 80053b0:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 80053b4:	f040 8106 	bne.w	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053b8:	2100      	movs	r1, #0
 80053ba:	f104 0020 	add.w	r0, r4, #32
 80053be:	f7ff ff43 	bl	8005248 <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053c2:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053c4:	4607      	mov	r7, r0
    if(ret == HAL_OK)
 80053c6:	2f00      	cmp	r7, #0
 80053c8:	f040 8197 	bne.w	80056fa <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053cc:	499f      	ldr	r1, [pc, #636]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80053ce:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 80053d0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80053d4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80053d8:	4302      	orrs	r2, r0
 80053da:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053de:	0399      	lsls	r1, r3, #14
 80053e0:	f100 80f5 	bmi.w	80055ce <HAL_RCCEx_PeriphCLKConfig+0x286>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053e4:	07d9      	lsls	r1, r3, #31
 80053e6:	d508      	bpl.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xb2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053e8:	4998      	ldr	r1, [pc, #608]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80053ea:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80053ec:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80053f0:	f022 0203 	bic.w	r2, r2, #3
 80053f4:	4302      	orrs	r2, r0
 80053f6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053fa:	079a      	lsls	r2, r3, #30
 80053fc:	d508      	bpl.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xc8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053fe:	4993      	ldr	r1, [pc, #588]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005400:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005402:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005406:	f022 020c 	bic.w	r2, r2, #12
 800540a:	4302      	orrs	r2, r0
 800540c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005410:	075f      	lsls	r7, r3, #29
 8005412:	d508      	bpl.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005414:	498d      	ldr	r1, [pc, #564]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005416:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8005418:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800541c:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8005420:	4302      	orrs	r2, r0
 8005422:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005426:	071d      	lsls	r5, r3, #28
 8005428:	d508      	bpl.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800542a:	4988      	ldr	r1, [pc, #544]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800542c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800542e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005432:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8005436:	4302      	orrs	r2, r0
 8005438:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800543c:	06d8      	lsls	r0, r3, #27
 800543e:	d508      	bpl.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x10a>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005440:	4982      	ldr	r1, [pc, #520]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005442:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8005444:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005448:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800544c:	4302      	orrs	r2, r0
 800544e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005452:	0699      	lsls	r1, r3, #26
 8005454:	d508      	bpl.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x120>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005456:	497d      	ldr	r1, [pc, #500]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005458:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800545a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800545e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005462:	4302      	orrs	r2, r0
 8005464:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005468:	059a      	lsls	r2, r3, #22
 800546a:	d508      	bpl.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x136>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800546c:	4977      	ldr	r1, [pc, #476]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800546e:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8005470:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005474:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8005478:	4302      	orrs	r2, r0
 800547a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800547e:	055f      	lsls	r7, r3, #21
 8005480:	d508      	bpl.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005482:	4972      	ldr	r1, [pc, #456]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005484:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8005486:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800548a:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800548e:	4302      	orrs	r2, r0
 8005490:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005494:	065d      	lsls	r5, r3, #25
 8005496:	d508      	bpl.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x162>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005498:	496c      	ldr	r1, [pc, #432]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800549a:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800549c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80054a0:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80054a4:	4302      	orrs	r2, r0
 80054a6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054aa:	0618      	lsls	r0, r3, #24
 80054ac:	d508      	bpl.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x178>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054ae:	4967      	ldr	r1, [pc, #412]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80054b0:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80054b2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80054b6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80054ba:	4302      	orrs	r2, r0
 80054bc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054c0:	05d9      	lsls	r1, r3, #23
 80054c2:	d508      	bpl.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054c4:	4961      	ldr	r1, [pc, #388]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80054c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80054cc:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80054d0:	4302      	orrs	r2, r0
 80054d2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054d6:	02da      	lsls	r2, r3, #11
 80054d8:	d508      	bpl.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054da:	495c      	ldr	r1, [pc, #368]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80054dc:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80054de:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 80054e2:	f022 0203 	bic.w	r2, r2, #3
 80054e6:	4302      	orrs	r2, r0
 80054e8:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80054ec:	049f      	lsls	r7, r3, #18
 80054ee:	d510      	bpl.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054f0:	4956      	ldr	r1, [pc, #344]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80054f2:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 80054f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80054f8:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80054fc:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80054fe:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005502:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005506:	f000 80c7 	beq.w	8005698 <HAL_RCCEx_PeriphCLKConfig+0x350>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800550a:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 800550e:	f000 8117 	beq.w	8005740 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005512:	031d      	lsls	r5, r3, #12
 8005514:	d510      	bpl.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005516:	494d      	ldr	r1, [pc, #308]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005518:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800551a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800551e:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8005522:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005524:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005528:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800552c:	f000 80aa 	beq.w	8005684 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005530:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8005534:	f000 810e 	beq.w	8005754 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005538:	0358      	lsls	r0, r3, #13
 800553a:	d510      	bpl.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800553c:	4943      	ldr	r1, [pc, #268]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800553e:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
 8005540:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005544:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8005548:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800554a:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800554e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005552:	f000 809c 	beq.w	800568e <HAL_RCCEx_PeriphCLKConfig+0x346>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005556:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 800555a:	f000 80e7 	beq.w	800572c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800555e:	0459      	lsls	r1, r3, #17
 8005560:	d510      	bpl.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005562:	483a      	ldr	r0, [pc, #232]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005564:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8005566:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 800556a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800556e:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005570:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005574:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005578:	f000 80a7 	beq.w	80056ca <HAL_RCCEx_PeriphCLKConfig+0x382>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800557c:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8005580:	f000 80c9 	beq.w	8005716 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005584:	041a      	lsls	r2, r3, #16
 8005586:	d509      	bpl.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x254>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005588:	4930      	ldr	r1, [pc, #192]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800558a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800558e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8005592:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8005596:	4302      	orrs	r2, r0
 8005598:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800559c:	03db      	lsls	r3, r3, #15
 800559e:	d509      	bpl.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80055a0:	4a2a      	ldr	r2, [pc, #168]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80055a2:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 80055a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80055aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80055ae:	430b      	orrs	r3, r1
 80055b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 80055b4:	4630      	mov	r0, r6
 80055b6:	b003      	add	sp, #12
 80055b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai2ClockSelection)
 80055bc:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 80055c0:	f000 80a7 	beq.w	8005712 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 80055c4:	2601      	movs	r6, #1
 80055c6:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80055c8:	0399      	lsls	r1, r3, #14
 80055ca:	f57f af0b 	bpl.w	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055ce:	4b1f      	ldr	r3, [pc, #124]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80055d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80055d2:	00d2      	lsls	r2, r2, #3
 80055d4:	d53e      	bpl.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    FlagStatus       pwrclkchanged = RESET;
 80055d6:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055da:	4d1d      	ldr	r5, [pc, #116]	@ (8005650 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80055dc:	682b      	ldr	r3, [r5, #0]
 80055de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055e2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80055e4:	f7fd fd32 	bl	800304c <HAL_GetTick>
 80055e8:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055ea:	e005      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ec:	f7fd fd2e 	bl	800304c <HAL_GetTick>
 80055f0:	eba0 0309 	sub.w	r3, r0, r9
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d839      	bhi.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x324>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055f8:	682b      	ldr	r3, [r5, #0]
 80055fa:	05db      	lsls	r3, r3, #23
 80055fc:	d5f6      	bpl.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x2a4>
    if(ret == HAL_OK)
 80055fe:	2f00      	cmp	r7, #0
 8005600:	f040 80b8 	bne.w	8005774 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005604:	4d11      	ldr	r5, [pc, #68]	@ (800564c <HAL_RCCEx_PeriphCLKConfig+0x304>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005606:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800560a:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800560e:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005612:	d051      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8005614:	4293      	cmp	r3, r2
 8005616:	d04f      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005618:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 800561c:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8005620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005624:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005628:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800562c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005630:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005634:	07cf      	lsls	r7, r1, #31
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005636:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        RCC->BDCR = tmpregister;
 800563a:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800563e:	d53b      	bpl.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        tickstart = HAL_GetTick();
 8005640:	f7fd fd04 	bl	800304c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005644:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8005648:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800564a:	e02f      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x364>
 800564c:	40021000 	.word	0x40021000
 8005650:	40007000 	.word	0x40007000
      __HAL_RCC_PWR_CLK_ENABLE();
 8005654:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005656:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800565a:	659a      	str	r2, [r3, #88]	@ 0x58
 800565c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800565e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005662:	9301      	str	r3, [sp, #4]
 8005664:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005666:	f04f 0801 	mov.w	r8, #1
 800566a:	e7b6      	b.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x292>
        ret = HAL_TIMEOUT;
 800566c:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800566e:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8005670:	f1b8 0f00 	cmp.w	r8, #0
 8005674:	f43f aeb6 	beq.w	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005678:	493f      	ldr	r1, [pc, #252]	@ (8005778 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 800567a:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 800567c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8005680:	658a      	str	r2, [r1, #88]	@ 0x58
 8005682:	e6af      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005684:	68ca      	ldr	r2, [r1, #12]
 8005686:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800568a:	60ca      	str	r2, [r1, #12]
 800568c:	e754      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800568e:	68ca      	ldr	r2, [r1, #12]
 8005690:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8005694:	60ca      	str	r2, [r1, #12]
 8005696:	e762      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005698:	68ca      	ldr	r2, [r1, #12]
 800569a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800569e:	60ca      	str	r2, [r1, #12]
 80056a0:	e737      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a2:	f7fd fcd3 	bl	800304c <HAL_GetTick>
 80056a6:	1bc0      	subs	r0, r0, r7
 80056a8:	4548      	cmp	r0, r9
 80056aa:	d8df      	bhi.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x324>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80056ac:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80056b0:	0798      	lsls	r0, r3, #30
 80056b2:	d5f6      	bpl.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056b4:	f8d4 2088 	ldr.w	r2, [r4, #136]	@ 0x88
 80056b8:	492f      	ldr	r1, [pc, #188]	@ (8005778 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 80056ba:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 80056be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80056c8:	e7d1      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x326>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80056ca:	2102      	movs	r1, #2
 80056cc:	1d20      	adds	r0, r4, #4
 80056ce:	f7ff fd2d 	bl	800512c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80056d2:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 80056d4:	2800      	cmp	r0, #0
 80056d6:	f43f af55 	beq.w	8005584 <HAL_RCCEx_PeriphCLKConfig+0x23c>
        status = ret;
 80056da:	4606      	mov	r6, r0
 80056dc:	e752      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056de:	4826      	ldr	r0, [pc, #152]	@ (8005778 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 80056e0:	68c2      	ldr	r2, [r0, #12]
 80056e2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80056e6:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 80056e8:	e64c      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056ea:	1d20      	adds	r0, r4, #4
 80056ec:	f7ff fd1e 	bl	800512c <RCCEx_PLLSAI1_Config>
 80056f0:	4607      	mov	r7, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056f2:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 80056f4:	2f00      	cmp	r7, #0
 80056f6:	f43f ae69 	beq.w	80053cc <HAL_RCCEx_PeriphCLKConfig+0x84>
      status = ret;
 80056fa:	463e      	mov	r6, r7
 80056fc:	e764      	b.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80056fe:	3004      	adds	r0, #4
 8005700:	f7ff fd14 	bl	800512c <RCCEx_PLLSAI1_Config>
 8005704:	4606      	mov	r6, r0
      break;
 8005706:	e63a      	b.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x36>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005708:	491b      	ldr	r1, [pc, #108]	@ (8005778 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 800570a:	68ca      	ldr	r2, [r1, #12]
 800570c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005710:	60ca      	str	r2, [r1, #12]
    switch(PeriphClkInit->Sai1ClockSelection)
 8005712:	4637      	mov	r7, r6
 8005714:	e657      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005716:	2102      	movs	r1, #2
 8005718:	f104 0020 	add.w	r0, r4, #32
 800571c:	f7ff fd94 	bl	8005248 <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005720:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005722:	2800      	cmp	r0, #0
 8005724:	f43f af2e 	beq.w	8005584 <HAL_RCCEx_PeriphCLKConfig+0x23c>
        status = ret;
 8005728:	4606      	mov	r6, r0
 800572a:	e72b      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800572c:	2101      	movs	r1, #1
 800572e:	1d20      	adds	r0, r4, #4
 8005730:	f7ff fcfc 	bl	800512c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005734:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 8005736:	2800      	cmp	r0, #0
 8005738:	f43f af11 	beq.w	800555e <HAL_RCCEx_PeriphCLKConfig+0x216>
        status = ret;
 800573c:	4606      	mov	r6, r0
 800573e:	e70e      	b.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x216>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005740:	2101      	movs	r1, #1
 8005742:	1d20      	adds	r0, r4, #4
 8005744:	f7ff fcf2 	bl	800512c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005748:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 800574a:	2800      	cmp	r0, #0
 800574c:	f43f aee1 	beq.w	8005512 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
          status = ret;
 8005750:	4606      	mov	r6, r0
 8005752:	e6de      	b.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005754:	2101      	movs	r1, #1
 8005756:	1d20      	adds	r0, r4, #4
 8005758:	f7ff fce8 	bl	800512c <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800575c:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800575e:	2800      	cmp	r0, #0
 8005760:	f43f aeea 	beq.w	8005538 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        status = ret;
 8005764:	4606      	mov	r6, r0
 8005766:	e6e7      	b.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    switch(PeriphClkInit->Sai1ClockSelection)
 8005768:	f5b1 0f40 	cmp.w	r1, #12582912	@ 0xc00000
 800576c:	f43f ae0a 	beq.w	8005384 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005770:	2601      	movs	r6, #1
 8005772:	e610      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      status = ret;
 8005774:	463e      	mov	r6, r7
 8005776:	e77a      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x326>
 8005778:	40021000 	.word	0x40021000

0800577c <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800577c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005780:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005782:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8005784:	460e      	mov	r6, r1
 8005786:	4615      	mov	r5, r2
  __IO uint8_t  tmpreg8 = 0;
 8005788:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800578c:	4607      	mov	r7, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800578e:	f7fd fc5d 	bl	800304c <HAL_GetTick>
 8005792:	4435      	add	r5, r6
 8005794:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8005796:	f7fd fc59 	bl	800304c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800579a:	4b32      	ldr	r3, [pc, #200]	@ (8005864 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe8>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800579c:	683c      	ldr	r4, [r7, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80057a4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80057a8:	0d1b      	lsrs	r3, r3, #20
 80057aa:	fb05 f303 	mul.w	r3, r5, r3
 80057ae:	3601      	adds	r6, #1
 80057b0:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80057b2:	d111      	bne.n	80057d8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5c>
 80057b4:	68a3      	ldr	r3, [r4, #8]
 80057b6:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 80057ba:	d009      	beq.n	80057d0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80057bc:	7b23      	ldrb	r3, [r4, #12]
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80057c4:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 80057c8:	68a3      	ldr	r3, [r4, #8]
 80057ca:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 80057ce:	d1f5      	bne.n	80057bc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 80057d0:	2000      	movs	r0, #0
}
 80057d2:	b002      	add	sp, #8
 80057d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057d8:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80057da:	4623      	mov	r3, r4
  while ((hspi->Instance->SR & Fifo) != State)
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 80057e2:	d0f5      	beq.n	80057d0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
 80057e4:	7b23      	ldrb	r3, [r4, #12]
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 80057ec:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057f0:	f7fd fc2c 	bl	800304c <HAL_GetTick>
 80057f4:	eba0 0008 	sub.w	r0, r0, r8
 80057f8:	42a8      	cmp	r0, r5
 80057fa:	d209      	bcs.n	8005810 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x94>
      if (count == 0U)
 80057fc:	9a01      	ldr	r2, [sp, #4]
      count--;
 80057fe:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8005800:	2a00      	cmp	r2, #0
      count--;
 8005802:	f103 33ff 	add.w	r3, r3, #4294967295
 8005806:	9301      	str	r3, [sp, #4]
        tmp_timeout = 0U;
 8005808:	bf08      	it	eq
 800580a:	2500      	moveq	r5, #0
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	e7e5      	b.n	80057dc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005810:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005814:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005816:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800581a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800581e:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005820:	d013      	beq.n	800584a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xce>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005822:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005824:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005828:	d107      	bne.n	800583a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          SPI_RESET_CRC(hspi);
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005838:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800583a:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 800583c:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 800583e:	f887 205d 	strb.w	r2, [r7, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005842:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005846:	2003      	movs	r0, #3
 8005848:	e7c3      	b.n	80057d2 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x56>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8005850:	d002      	beq.n	8005858 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005852:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8005856:	d1e4      	bne.n	8005822 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
          __HAL_SPI_DISABLE(hspi);
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800585e:	601a      	str	r2, [r3, #0]
 8005860:	e7df      	b.n	8005822 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
 8005862:	bf00      	nop
 8005864:	20002c00 	.word	0x20002c00

08005868 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800586c:	b084      	sub	sp, #16
  __IO uint8_t  tmpreg8 = 0;
 800586e:	2300      	movs	r3, #0
{
 8005870:	460e      	mov	r6, r1
 8005872:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8005874:	f88d 3007 	strb.w	r3, [sp, #7]
{
 8005878:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800587a:	f7fd fbe7 	bl	800304c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800587e:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 80059b8 <SPI_EndRxTxTransaction+0x150>
 8005882:	eb06 0807 	add.w	r8, r6, r7
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005886:	eba8 0400 	sub.w	r4, r8, r0
  tmp_tickstart = HAL_GetTick();
 800588a:	f7fd fbdf 	bl	800304c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800588e:	f8d9 3000 	ldr.w	r3, [r9]
 8005892:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005896:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800589a:	0d1b      	lsrs	r3, r3, #20
 800589c:	fb04 f303 	mul.w	r3, r4, r3
 80058a0:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 80058a2:	1c73      	adds	r3, r6, #1
 80058a4:	d126      	bne.n	80058f4 <SPI_EndRxTxTransaction+0x8c>
 80058a6:	682c      	ldr	r4, [r5, #0]
 80058a8:	68a3      	ldr	r3, [r4, #8]
 80058aa:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 80058ae:	d1fb      	bne.n	80058a8 <SPI_EndRxTxTransaction+0x40>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058b0:	f7fd fbcc 	bl	800304c <HAL_GetTick>
 80058b4:	eba8 0800 	sub.w	r8, r8, r0
  tmp_tickstart = HAL_GetTick();
 80058b8:	f7fd fbc8 	bl	800304c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058bc:	f8d9 3000 	ldr.w	r3, [r9]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058c0:	682a      	ldr	r2, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058c2:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80058c6:	fb08 f303 	mul.w	r3, r8, r3
 80058ca:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058cc:	6893      	ldr	r3, [r2, #8]
 80058ce:	0619      	lsls	r1, r3, #24
 80058d0:	d4fc      	bmi.n	80058cc <SPI_EndRxTxTransaction+0x64>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058d2:	463a      	mov	r2, r7
 80058d4:	4631      	mov	r1, r6
 80058d6:	4628      	mov	r0, r5
 80058d8:	f7ff ff50 	bl	800577c <SPI_WaitFifoStateUntilTimeout.constprop.0>
 80058dc:	b910      	cbnz	r0, 80058e4 <SPI_EndRxTxTransaction+0x7c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80058de:	b004      	add	sp, #16
 80058e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058e4:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80058e6:	f043 0320 	orr.w	r3, r3, #32
 80058ea:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 80058ec:	2003      	movs	r0, #3
}
 80058ee:	b004      	add	sp, #16
 80058f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f4:	4682      	mov	sl, r0
  while ((hspi->Instance->SR & Fifo) != State)
 80058f6:	682b      	ldr	r3, [r5, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 80058fe:	d00e      	beq.n	800591e <SPI_EndRxTxTransaction+0xb6>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005900:	f7fd fba4 	bl	800304c <HAL_GetTick>
 8005904:	eba0 030a 	sub.w	r3, r0, sl
 8005908:	42a3      	cmp	r3, r4
 800590a:	d220      	bcs.n	800594e <SPI_EndRxTxTransaction+0xe6>
      if (count == 0U)
 800590c:	9a02      	ldr	r2, [sp, #8]
      count--;
 800590e:	9b02      	ldr	r3, [sp, #8]
        tmp_timeout = 0U;
 8005910:	2a00      	cmp	r2, #0
      count--;
 8005912:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8005916:	bf08      	it	eq
 8005918:	2400      	moveq	r4, #0
      count--;
 800591a:	9302      	str	r3, [sp, #8]
 800591c:	e7eb      	b.n	80058f6 <SPI_EndRxTxTransaction+0x8e>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800591e:	f7fd fb95 	bl	800304c <HAL_GetTick>
 8005922:	eba8 0400 	sub.w	r4, r8, r0
  tmp_tickstart = HAL_GetTick();
 8005926:	f7fd fb91 	bl	800304c <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800592a:	f8d9 3000 	ldr.w	r3, [r9]
 800592e:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8005932:	fb04 f303 	mul.w	r3, r4, r3
  tmp_tickstart = HAL_GetTick();
 8005936:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005938:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800593a:	682b      	ldr	r3, [r5, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	061b      	lsls	r3, r3, #24
 8005940:	d5c7      	bpl.n	80058d2 <SPI_EndRxTxTransaction+0x6a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005942:	f7fd fb83 	bl	800304c <HAL_GetTick>
 8005946:	eba0 0308 	sub.w	r3, r0, r8
 800594a:	42a3      	cmp	r3, r4
 800594c:	d31f      	bcc.n	800598e <SPI_EndRxTxTransaction+0x126>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800594e:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005952:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005954:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005958:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800595c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800595e:	d01f      	beq.n	80059a0 <SPI_EndRxTxTransaction+0x138>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005960:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8005962:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005966:	d107      	bne.n	8005978 <SPI_EndRxTxTransaction+0x110>
          SPI_RESET_CRC(hspi);
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800596e:	601a      	str	r2, [r3, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005976:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005978:	2301      	movs	r3, #1
 800597a:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800597e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 8005980:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005982:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 8005986:	f885 205c 	strb.w	r2, [r5, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800598a:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 800598c:	e7ae      	b.n	80058ec <SPI_EndRxTxTransaction+0x84>
      if (count == 0U)
 800598e:	9a03      	ldr	r2, [sp, #12]
      count--;
 8005990:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8005992:	2a00      	cmp	r2, #0
      count--;
 8005994:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8005998:	bf08      	it	eq
 800599a:	2400      	moveq	r4, #0
      count--;
 800599c:	9303      	str	r3, [sp, #12]
 800599e:	e7cc      	b.n	800593a <SPI_EndRxTxTransaction+0xd2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059a0:	68aa      	ldr	r2, [r5, #8]
 80059a2:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80059a6:	d002      	beq.n	80059ae <SPI_EndRxTxTransaction+0x146>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059a8:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80059ac:	d1d8      	bne.n	8005960 <SPI_EndRxTxTransaction+0xf8>
          __HAL_SPI_DISABLE(hspi);
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	e7d3      	b.n	8005960 <SPI_EndRxTxTransaction+0xf8>
 80059b8:	20002c00 	.word	0x20002c00

080059bc <HAL_SPI_Init>:
  if (hspi == NULL)
 80059bc:	2800      	cmp	r0, #0
 80059be:	d074      	beq.n	8005aaa <HAL_SPI_Init+0xee>
{
 80059c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c4:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059c6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80059c8:	2800      	cmp	r0, #0
 80059ca:	d053      	beq.n	8005a74 <HAL_SPI_Init+0xb8>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059cc:	2300      	movs	r3, #0
 80059ce:	e9c4 3304 	strd	r3, r3, [r4, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80059d2:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059d6:	2200      	movs	r2, #0
 80059d8:	62a2      	str	r2, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80059da:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d057      	beq.n	8005a92 <HAL_SPI_Init+0xd6>
  __HAL_SPI_DISABLE(hspi);
 80059e2:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059e4:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80059e6:	2302      	movs	r3, #2
 80059e8:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 80059ec:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059ee:	f5b7 6fe0 	cmp.w	r7, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 80059f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059f6:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059f8:	d842      	bhi.n	8005a80 <HAL_SPI_Init+0xc4>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059fa:	d151      	bne.n	8005aa0 <HAL_SPI_Init+0xe4>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059fc:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059fe:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a02:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 8005a06:	6862      	ldr	r2, [r4, #4]
 8005a08:	68a3      	ldr	r3, [r4, #8]
 8005a0a:	69a6      	ldr	r6, [r4, #24]
 8005a0c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a10:	f402 7282 	and.w	r2, r2, #260	@ 0x104
 8005a14:	431a      	orrs	r2, r3
 8005a16:	6923      	ldr	r3, [r4, #16]
 8005a18:	f003 0302 	and.w	r3, r3, #2
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	6962      	ldr	r2, [r4, #20]
 8005a20:	f002 0201 	and.w	r2, r2, #1
 8005a24:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a26:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005a28:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
 8005a2c:	f003 0308 	and.w	r3, r3, #8
 8005a30:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a34:	69e3      	ldr	r3, [r4, #28]
 8005a36:	f003 0838 	and.w	r8, r3, #56	@ 0x38
 8005a3a:	6a23      	ldr	r3, [r4, #32]
 8005a3c:	f003 0780 	and.w	r7, r3, #128	@ 0x80
 8005a40:	f406 7300 	and.w	r3, r6, #512	@ 0x200
 8005a44:	4313      	orrs	r3, r2
 8005a46:	ea43 0308 	orr.w	r3, r3, r8
 8005a4a:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a4c:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a4e:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a50:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a54:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a56:	f000 0010 	and.w	r0, r0, #16
 8005a5a:	ea4e 0306 	orr.w	r3, lr, r6
 8005a5e:	4303      	orrs	r3, r0
 8005a60:	ea43 030c 	orr.w	r3, r3, ip
 8005a64:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a66:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8005a68:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a6a:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a6c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
}
 8005a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a74:	6863      	ldr	r3, [r4, #4]
 8005a76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a7a:	d0aa      	beq.n	80059d2 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a7c:	61e0      	str	r0, [r4, #28]
 8005a7e:	e7a8      	b.n	80059d2 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a80:	f5b7 6f70 	cmp.w	r7, #3840	@ 0xf00
 8005a84:	d113      	bne.n	8005aae <HAL_SPI_Init+0xf2>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a86:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a88:	f04f 0c00 	mov.w	ip, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a8c:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 8005a90:	e7b9      	b.n	8005a06 <HAL_SPI_Init+0x4a>
    HAL_SPI_MspInit(hspi);
 8005a92:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8005a94:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8005a98:	f7fd f942 	bl	8002d20 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a9c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005a9e:	e7a0      	b.n	80059e2 <HAL_SPI_Init+0x26>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005aa0:	f44f 5c80 	mov.w	ip, #4096	@ 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aa4:	2500      	movs	r5, #0
 8005aa6:	62a5      	str	r5, [r4, #40]	@ 0x28
 8005aa8:	e7ad      	b.n	8005a06 <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 8005aaa:	2001      	movs	r0, #1
}
 8005aac:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005aae:	f04f 0c00 	mov.w	ip, #0
 8005ab2:	e7f7      	b.n	8005aa4 <HAL_SPI_Init+0xe8>

08005ab4 <HAL_SPI_TransmitReceive>:
{
 8005ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab8:	4604      	mov	r4, r0
 8005aba:	4690      	mov	r8, r2
 8005abc:	461e      	mov	r6, r3
 8005abe:	460f      	mov	r7, r1
  tickstart = HAL_GetTick();
 8005ac0:	f7fd fac4 	bl	800304c <HAL_GetTick>
  tmp_state           = hspi->State;
 8005ac4:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 8005ac8:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005aca:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8005acc:	4605      	mov	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ace:	d00b      	beq.n	8005ae8 <HAL_SPI_TransmitReceive+0x34>
 8005ad0:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8005ad4:	f040 808c 	bne.w	8005bf0 <HAL_SPI_TransmitReceive+0x13c>
 8005ad8:	b2d9      	uxtb	r1, r3
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8005ada:	68a3      	ldr	r3, [r4, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f040 8087 	bne.w	8005bf0 <HAL_SPI_TransmitReceive+0x13c>
 8005ae2:	2904      	cmp	r1, #4
 8005ae4:	f040 8084 	bne.w	8005bf0 <HAL_SPI_TransmitReceive+0x13c>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ae8:	2f00      	cmp	r7, #0
 8005aea:	f000 8169 	beq.w	8005dc0 <HAL_SPI_TransmitReceive+0x30c>
 8005aee:	f1b8 0f00 	cmp.w	r8, #0
 8005af2:	f000 8165 	beq.w	8005dc0 <HAL_SPI_TransmitReceive+0x30c>
 8005af6:	2e00      	cmp	r6, #0
 8005af8:	f000 8162 	beq.w	8005dc0 <HAL_SPI_TransmitReceive+0x30c>
  __HAL_LOCK(hspi);
 8005afc:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d075      	beq.n	8005bf0 <HAL_SPI_TransmitReceive+0x13c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b04:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b08:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
  __HAL_LOCK(hspi);
 8005b0c:	2101      	movs	r1, #1
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b0e:	2b04      	cmp	r3, #4
  __HAL_LOCK(hspi);
 8005b10:	f884 105c 	strb.w	r1, [r4, #92]	@ 0x5c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005b14:	68e1      	ldr	r1, [r4, #12]
  hspi->RxXferSize  = Size;
 8005b16:	f8a4 6044 	strh.w	r6, [r4, #68]	@ 0x44
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b1a:	bf1c      	itt	ne
 8005b1c:	2305      	movne	r3, #5
 8005b1e:	f884 305d 	strbne.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b22:	2300      	movs	r3, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005b24:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b28:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 8005b2a:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->RxXferCount = Size;
 8005b2c:	f8a4 6046 	strh.w	r6, [r4, #70]	@ 0x46
  hspi->RxISR       = NULL;
 8005b30:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005b32:	63a7      	str	r7, [r4, #56]	@ 0x38
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b34:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 8005b36:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005b38:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005b3a:	d95c      	bls.n	8005bf6 <HAL_SPI_TransmitReceive+0x142>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005b3c:	6859      	ldr	r1, [r3, #4]
 8005b3e:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8005b42:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b44:	6819      	ldr	r1, [r3, #0]
 8005b46:	0648      	lsls	r0, r1, #25
 8005b48:	d403      	bmi.n	8005b52 <HAL_SPI_TransmitReceive+0x9e>
    __HAL_SPI_ENABLE(hspi);
 8005b4a:	6819      	ldr	r1, [r3, #0]
 8005b4c:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 8005b50:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b52:	2a00      	cmp	r2, #0
 8005b54:	f000 8100 	beq.w	8005d58 <HAL_SPI_TransmitReceive+0x2a4>
 8005b58:	2e01      	cmp	r6, #1
 8005b5a:	f000 80fd 	beq.w	8005d58 <HAL_SPI_TransmitReceive+0x2a4>
 8005b5e:	9b06      	ldr	r3, [sp, #24]
 8005b60:	3301      	adds	r3, #1
        txallowed = 1U;
 8005b62:	f04f 0601 	mov.w	r6, #1
 8005b66:	d028      	beq.n	8005bba <HAL_SPI_TransmitReceive+0x106>
 8005b68:	e09a      	b.n	8005ca0 <HAL_SPI_TransmitReceive+0x1ec>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b6a:	6822      	ldr	r2, [r4, #0]
 8005b6c:	6893      	ldr	r3, [r2, #8]
 8005b6e:	0799      	lsls	r1, r3, #30
 8005b70:	d50d      	bpl.n	8005b8e <HAL_SPI_TransmitReceive+0xda>
 8005b72:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	b153      	cbz	r3, 8005b8e <HAL_SPI_TransmitReceive+0xda>
 8005b78:	b146      	cbz	r6, 8005b8c <HAL_SPI_TransmitReceive+0xd8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b7a:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005b7c:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005b80:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8005b82:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b84:	63a1      	str	r1, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005b86:	3b01      	subs	r3, #1
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8005b8c:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b8e:	6893      	ldr	r3, [r2, #8]
 8005b90:	f013 0301 	ands.w	r3, r3, #1
 8005b94:	d00f      	beq.n	8005bb6 <HAL_SPI_TransmitReceive+0x102>
 8005b96:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8005b9a:	b289      	uxth	r1, r1
 8005b9c:	b159      	cbz	r1, 8005bb6 <HAL_SPI_TransmitReceive+0x102>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b9e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8005ba0:	68d2      	ldr	r2, [r2, #12]
 8005ba2:	f821 2b02 	strh.w	r2, [r1], #2
        txallowed = 1U;
 8005ba6:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 8005ba8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bac:	6421      	str	r1, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bb6:	f7fd fa49 	bl	800304c <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bba:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1d3      	bne.n	8005b6a <HAL_SPI_TransmitReceive+0xb6>
 8005bc2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1ce      	bne.n	8005b6a <HAL_SPI_TransmitReceive+0xb6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bcc:	9906      	ldr	r1, [sp, #24]
 8005bce:	462a      	mov	r2, r5
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	f7ff fe49 	bl	8005868 <SPI_EndRxTxTransaction>
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	f040 80ed 	bne.w	8005db6 <HAL_SPI_TransmitReceive+0x302>
  hspi->State = HAL_SPI_STATE_READY;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005be2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 8005be4:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005be8:	1e18      	subs	r0, r3, #0
 8005bea:	bf18      	it	ne
 8005bec:	2001      	movne	r0, #1
 8005bee:	e000      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x13e>
    return HAL_BUSY;
 8005bf0:	2002      	movs	r0, #2
}
 8005bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005bf6:	2e01      	cmp	r6, #1
 8005bf8:	f000 8118 	beq.w	8005e2c <HAL_SPI_TransmitReceive+0x378>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005bfc:	6859      	ldr	r1, [r3, #4]
 8005bfe:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8005c02:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c04:	6819      	ldr	r1, [r3, #0]
 8005c06:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8005c08:	bf5e      	ittt	pl
 8005c0a:	6819      	ldrpl	r1, [r3, #0]
 8005c0c:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
 8005c10:	6019      	strpl	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c12:	b962      	cbnz	r2, 8005c2e <HAL_SPI_TransmitReceive+0x17a>
      if (hspi->TxXferCount > 1U)
 8005c14:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8005c16:	b292      	uxth	r2, r2
 8005c18:	2a01      	cmp	r2, #1
 8005c1a:	f240 80d3 	bls.w	8005dc4 <HAL_SPI_TransmitReceive+0x310>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005c1e:	f837 2b02 	ldrh.w	r2, [r7], #2
 8005c22:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8005c24:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c26:	63a7      	str	r7, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005c28:	3b02      	subs	r3, #2
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8005c2e:	9b06      	ldr	r3, [sp, #24]
 8005c30:	3301      	adds	r3, #1
        txallowed = 1U;
 8005c32:	f04f 0601 	mov.w	r6, #1
 8005c36:	d17d      	bne.n	8005d34 <HAL_SPI_TransmitReceive+0x280>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c38:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	b923      	cbnz	r3, 8005c48 <HAL_SPI_TransmitReceive+0x194>
 8005c3e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d0c1      	beq.n	8005bcc <HAL_SPI_TransmitReceive+0x118>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c48:	6822      	ldr	r2, [r4, #0]
 8005c4a:	6893      	ldr	r3, [r2, #8]
 8005c4c:	079f      	lsls	r7, r3, #30
 8005c4e:	d506      	bpl.n	8005c5e <HAL_SPI_TransmitReceive+0x1aa>
 8005c50:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	b11b      	cbz	r3, 8005c5e <HAL_SPI_TransmitReceive+0x1aa>
 8005c56:	2e00      	cmp	r6, #0
 8005c58:	f040 8093 	bne.w	8005d82 <HAL_SPI_TransmitReceive+0x2ce>
        txallowed = 1U;
 8005c5c:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c5e:	6893      	ldr	r3, [r2, #8]
 8005c60:	f013 0301 	ands.w	r3, r3, #1
 8005c64:	d019      	beq.n	8005c9a <HAL_SPI_TransmitReceive+0x1e6>
 8005c66:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8005c6a:	b289      	uxth	r1, r1
 8005c6c:	b1a9      	cbz	r1, 8005c9a <HAL_SPI_TransmitReceive+0x1e6>
        if (hspi->RxXferCount > 1U)
 8005c6e:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c72:	6c21      	ldr	r1, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 8005c74:	b280      	uxth	r0, r0
 8005c76:	2801      	cmp	r0, #1
 8005c78:	d977      	bls.n	8005d6a <HAL_SPI_TransmitReceive+0x2b6>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c7a:	68d0      	ldr	r0, [r2, #12]
 8005c7c:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c80:	6421      	str	r1, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005c82:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8005c86:	3902      	subs	r1, #2
 8005c88:	b289      	uxth	r1, r1
 8005c8a:	f8a4 1046 	strh.w	r1, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005c8e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8005c92:	b289      	uxth	r1, r1
 8005c94:	2901      	cmp	r1, #1
 8005c96:	d935      	bls.n	8005d04 <HAL_SPI_TransmitReceive+0x250>
        txallowed = 1U;
 8005c98:	461e      	mov	r6, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c9a:	f7fd f9d7 	bl	800304c <HAL_GetTick>
 8005c9e:	e7cb      	b.n	8005c38 <HAL_SPI_TransmitReceive+0x184>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ca0:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	b923      	cbnz	r3, 8005cb0 <HAL_SPI_TransmitReceive+0x1fc>
 8005ca6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d08d      	beq.n	8005bcc <HAL_SPI_TransmitReceive+0x118>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cb0:	6822      	ldr	r2, [r4, #0]
 8005cb2:	6893      	ldr	r3, [r2, #8]
 8005cb4:	0798      	lsls	r0, r3, #30
 8005cb6:	d50d      	bpl.n	8005cd4 <HAL_SPI_TransmitReceive+0x220>
 8005cb8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	b153      	cbz	r3, 8005cd4 <HAL_SPI_TransmitReceive+0x220>
 8005cbe:	b146      	cbz	r6, 8005cd2 <HAL_SPI_TransmitReceive+0x21e>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005cc0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005cc2:	f831 3b02 	ldrh.w	r3, [r1], #2
 8005cc6:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 8005cc8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cca:	63a1      	str	r1, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
{
 8005cd2:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cd4:	6893      	ldr	r3, [r2, #8]
 8005cd6:	f013 0301 	ands.w	r3, r3, #1
 8005cda:	d004      	beq.n	8005ce6 <HAL_SPI_TransmitReceive+0x232>
 8005cdc:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8005ce0:	b289      	uxth	r1, r1
 8005ce2:	2900      	cmp	r1, #0
 8005ce4:	d178      	bne.n	8005dd8 <HAL_SPI_TransmitReceive+0x324>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ce6:	f7fd f9b1 	bl	800304c <HAL_GetTick>
 8005cea:	9b06      	ldr	r3, [sp, #24]
 8005cec:	1b40      	subs	r0, r0, r5
 8005cee:	4298      	cmp	r0, r3
 8005cf0:	d3d6      	bcc.n	8005ca0 <HAL_SPI_TransmitReceive+0x1ec>
        hspi->State = HAL_SPI_STATE_READY;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8005cfe:	2003      	movs	r0, #3
}
 8005d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d04:	6851      	ldr	r1, [r2, #4]
 8005d06:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 8005d0a:	6051      	str	r1, [r2, #4]
 8005d0c:	e7c4      	b.n	8005c98 <HAL_SPI_TransmitReceive+0x1e4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d0e:	2e00      	cmp	r6, #0
 8005d10:	f040 80a6 	bne.w	8005e60 <HAL_SPI_TransmitReceive+0x3ac>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d14:	2600      	movs	r6, #0
 8005d16:	6893      	ldr	r3, [r2, #8]
 8005d18:	f013 0301 	ands.w	r3, r3, #1
 8005d1c:	d004      	beq.n	8005d28 <HAL_SPI_TransmitReceive+0x274>
 8005d1e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8005d22:	b289      	uxth	r1, r1
 8005d24:	2900      	cmp	r1, #0
 8005d26:	d164      	bne.n	8005df2 <HAL_SPI_TransmitReceive+0x33e>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d28:	f7fd f990 	bl	800304c <HAL_GetTick>
 8005d2c:	9b06      	ldr	r3, [sp, #24]
 8005d2e:	1b40      	subs	r0, r0, r5
 8005d30:	4298      	cmp	r0, r3
 8005d32:	d2de      	bcs.n	8005cf2 <HAL_SPI_TransmitReceive+0x23e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d34:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	b92b      	cbnz	r3, 8005d46 <HAL_SPI_TransmitReceive+0x292>
 8005d3a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f43f af43 	beq.w	8005bcc <HAL_SPI_TransmitReceive+0x118>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d46:	6822      	ldr	r2, [r4, #0]
 8005d48:	6893      	ldr	r3, [r2, #8]
 8005d4a:	079b      	lsls	r3, r3, #30
 8005d4c:	d5e3      	bpl.n	8005d16 <HAL_SPI_TransmitReceive+0x262>
 8005d4e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0df      	beq.n	8005d16 <HAL_SPI_TransmitReceive+0x262>
 8005d56:	e7da      	b.n	8005d0e <HAL_SPI_TransmitReceive+0x25a>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d58:	f837 2b02 	ldrh.w	r2, [r7], #2
 8005d5c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005d5e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d60:	63a7      	str	r7, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8005d62:	3b01      	subs	r3, #1
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8005d68:	e6f9      	b.n	8005b5e <HAL_SPI_TransmitReceive+0xaa>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d6a:	7b12      	ldrb	r2, [r2, #12]
 8005d6c:	700a      	strb	r2, [r1, #0]
          hspi->RxXferCount--;
 8005d6e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
          hspi->pRxBuffPtr++;
 8005d72:	6c21      	ldr	r1, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8005d74:	3a01      	subs	r2, #1
          hspi->pRxBuffPtr++;
 8005d76:	3101      	adds	r1, #1
          hspi->RxXferCount--;
 8005d78:	b292      	uxth	r2, r2
          hspi->pRxBuffPtr++;
 8005d7a:	6421      	str	r1, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8005d7c:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 8005d80:	e78a      	b.n	8005c98 <HAL_SPI_TransmitReceive+0x1e4>
        if (hspi->TxXferCount > 1U)
 8005d82:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d84:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8005d86:	b289      	uxth	r1, r1
 8005d88:	2901      	cmp	r1, #1
 8005d8a:	d908      	bls.n	8005d9e <HAL_SPI_TransmitReceive+0x2ea>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005d8c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005d90:	60d1      	str	r1, [r2, #12]
          hspi->TxXferCount -= 2U;
 8005d92:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d94:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005d96:	1e8b      	subs	r3, r1, #2
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8005d9c:	e75e      	b.n	8005c5c <HAL_SPI_TransmitReceive+0x1a8>
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8005da2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 8005da4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8005da6:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8005da8:	1c51      	adds	r1, r2, #1
          hspi->TxXferCount--;
 8005daa:	b29b      	uxth	r3, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dac:	6822      	ldr	r2, [r4, #0]
          hspi->pTxBuffPtr++;
 8005dae:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8005db0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005db2:	2600      	movs	r6, #0
 8005db4:	e753      	b.n	8005c5e <HAL_SPI_TransmitReceive+0x1aa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005db6:	2220      	movs	r2, #32
    __HAL_UNLOCK(hspi);
 8005db8:	2300      	movs	r3, #0
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dba:	6622      	str	r2, [r4, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8005dbc:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8005dc0:	2001      	movs	r0, #1
 8005dc2:	e716      	b.n	8005bf2 <HAL_SPI_TransmitReceive+0x13e>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005dc4:	783a      	ldrb	r2, [r7, #0]
 8005dc6:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8005dc8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr++;
 8005dca:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005dcc:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8005dce:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8005dd0:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8005dd2:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8005dd4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8005dd6:	e72a      	b.n	8005c2e <HAL_SPI_TransmitReceive+0x17a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dd8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8005dda:	68d2      	ldr	r2, [r2, #12]
 8005ddc:	f821 2b02 	strh.w	r2, [r1], #2
        txallowed = 1U;
 8005de0:	461e      	mov	r6, r3
        hspi->RxXferCount--;
 8005de2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005de6:	6421      	str	r1, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8005df0:	e779      	b.n	8005ce6 <HAL_SPI_TransmitReceive+0x232>
        if (hspi->RxXferCount > 1U)
 8005df2:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005df6:	6c21      	ldr	r1, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 8005df8:	b280      	uxth	r0, r0
 8005dfa:	2801      	cmp	r0, #1
 8005dfc:	d923      	bls.n	8005e46 <HAL_SPI_TransmitReceive+0x392>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dfe:	68d0      	ldr	r0, [r2, #12]
 8005e00:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e04:	6421      	str	r1, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8005e06:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8005e0a:	3902      	subs	r1, #2
 8005e0c:	b289      	uxth	r1, r1
 8005e0e:	f8a4 1046 	strh.w	r1, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8005e12:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8005e16:	b289      	uxth	r1, r1
 8005e18:	2901      	cmp	r1, #1
 8005e1a:	d901      	bls.n	8005e20 <HAL_SPI_TransmitReceive+0x36c>
        txallowed = 1U;
 8005e1c:	461e      	mov	r6, r3
 8005e1e:	e783      	b.n	8005d28 <HAL_SPI_TransmitReceive+0x274>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e20:	6851      	ldr	r1, [r2, #4]
 8005e22:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 8005e26:	6051      	str	r1, [r2, #4]
        txallowed = 1U;
 8005e28:	461e      	mov	r6, r3
 8005e2a:	e77d      	b.n	8005d28 <HAL_SPI_TransmitReceive+0x274>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005e32:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	0656      	lsls	r6, r2, #25
 8005e38:	f53f aeec 	bmi.w	8005c14 <HAL_SPI_TransmitReceive+0x160>
    __HAL_SPI_ENABLE(hspi);
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e42:	601a      	str	r2, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e44:	e6e6      	b.n	8005c14 <HAL_SPI_TransmitReceive+0x160>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e46:	7b12      	ldrb	r2, [r2, #12]
 8005e48:	700a      	strb	r2, [r1, #0]
          hspi->RxXferCount--;
 8005e4a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
          hspi->pRxBuffPtr++;
 8005e4e:	6c21      	ldr	r1, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8005e50:	3a01      	subs	r2, #1
          hspi->pRxBuffPtr++;
 8005e52:	3101      	adds	r1, #1
          hspi->RxXferCount--;
 8005e54:	b292      	uxth	r2, r2
          hspi->pRxBuffPtr++;
 8005e56:	6421      	str	r1, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 8005e58:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
        txallowed = 1U;
 8005e5c:	461e      	mov	r6, r3
 8005e5e:	e763      	b.n	8005d28 <HAL_SPI_TransmitReceive+0x274>
        if (hspi->TxXferCount > 1U)
 8005e60:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e62:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d909      	bls.n	8005e7e <HAL_SPI_TransmitReceive+0x3ca>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8005e70:	60d1      	str	r1, [r2, #12]
          hspi->TxXferCount -= 2U;
 8005e72:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e74:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005e76:	1e8b      	subs	r3, r1, #2
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8005e7c:	e74a      	b.n	8005d14 <HAL_SPI_TransmitReceive+0x260>
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005e7e:	780b      	ldrb	r3, [r1, #0]
 8005e80:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8005e82:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 8005e84:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8005e86:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 8005e88:	1c51      	adds	r1, r2, #1
          hspi->TxXferCount--;
 8005e8a:	b29b      	uxth	r3, r3
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e8c:	6822      	ldr	r2, [r4, #0]
          hspi->pTxBuffPtr++;
 8005e8e:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 8005e90:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8005e92:	e73f      	b.n	8005d14 <HAL_SPI_TransmitReceive+0x260>

08005e94 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e94:	2800      	cmp	r0, #0
 8005e96:	f000 808c 	beq.w	8005fb2 <HAL_TIM_Base_Init+0x11e>
{
 8005e9a:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e9c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d078      	beq.n	8005f9c <HAL_TIM_Base_Init+0x108>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eaa:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eac:	4942      	ldr	r1, [pc, #264]	@ (8005fb8 <HAL_TIM_Base_Init+0x124>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eb4:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8005eb6:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005eb8:	d05c      	beq.n	8005f74 <HAL_TIM_Base_Init+0xe0>
 8005eba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ebe:	d024      	beq.n	8005f0a <HAL_TIM_Base_Init+0x76>
 8005ec0:	f5a1 3194 	sub.w	r1, r1, #75776	@ 0x12800
 8005ec4:	428b      	cmp	r3, r1
 8005ec6:	d020      	beq.n	8005f0a <HAL_TIM_Base_Init+0x76>
 8005ec8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005ecc:	428b      	cmp	r3, r1
 8005ece:	d01c      	beq.n	8005f0a <HAL_TIM_Base_Init+0x76>
 8005ed0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005ed4:	428b      	cmp	r3, r1
 8005ed6:	d018      	beq.n	8005f0a <HAL_TIM_Base_Init+0x76>
 8005ed8:	f501 3194 	add.w	r1, r1, #75776	@ 0x12800
 8005edc:	428b      	cmp	r3, r1
 8005ede:	d049      	beq.n	8005f74 <HAL_TIM_Base_Init+0xe0>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ee0:	4936      	ldr	r1, [pc, #216]	@ (8005fbc <HAL_TIM_Base_Init+0x128>)
 8005ee2:	428b      	cmp	r3, r1
 8005ee4:	d05f      	beq.n	8005fa6 <HAL_TIM_Base_Init+0x112>
 8005ee6:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005eea:	428b      	cmp	r3, r1
 8005eec:	d05b      	beq.n	8005fa6 <HAL_TIM_Base_Init+0x112>
 8005eee:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005ef2:	428b      	cmp	r3, r1
 8005ef4:	d057      	beq.n	8005fa6 <HAL_TIM_Base_Init+0x112>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ef6:	69a5      	ldr	r5, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ef8:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005efa:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005efc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f00:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005f02:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f04:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005f06:	6299      	str	r1, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f08:	e010      	b.n	8005f2c <HAL_TIM_Base_Init+0x98>
    tmpcr1 |= Structure->CounterMode;
 8005f0a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f0c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f0e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005f12:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f14:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f18:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f1a:	4302      	orrs	r2, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f20:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f22:	430a      	orrs	r2, r1
  TIMx->PSC = Structure->Prescaler;
 8005f24:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005f26:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f28:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005f2a:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f30:	691a      	ldr	r2, [r3, #16]
 8005f32:	07d2      	lsls	r2, r2, #31
 8005f34:	d503      	bpl.n	8005f3e <HAL_TIM_Base_Init+0xaa>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f36:	691a      	ldr	r2, [r3, #16]
 8005f38:	f022 0201 	bic.w	r2, r2, #1
 8005f3c:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f44:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8005f48:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8005f4c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8005f50:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8005f54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f5c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8005f60:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8005f64:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8005f68:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8005f6c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8005f70:	2000      	movs	r0, #0
}
 8005f72:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 8005f74:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f76:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f78:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8005f7c:	4302      	orrs	r2, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f7e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f82:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f84:	69a1      	ldr	r1, [r4, #24]
 8005f86:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005f8a:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8005f8c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f8e:	68e2      	ldr	r2, [r4, #12]
 8005f90:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005f92:	6862      	ldr	r2, [r4, #4]
 8005f94:	629a      	str	r2, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005f96:	6962      	ldr	r2, [r4, #20]
 8005f98:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f9a:	e7c7      	b.n	8005f2c <HAL_TIM_Base_Init+0x98>
    htim->Lock = HAL_UNLOCKED;
 8005f9c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005fa0:	f7fc ffc4 	bl	8002f2c <HAL_TIM_Base_MspInit>
 8005fa4:	e781      	b.n	8005eaa <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fa6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fa8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005faa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fae:	4302      	orrs	r2, r0
 8005fb0:	e7e9      	b.n	8005f86 <HAL_TIM_Base_Init+0xf2>
    return HAL_ERROR;
 8005fb2:	2001      	movs	r0, #1
}
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	40012c00 	.word	0x40012c00
 8005fbc:	40014000 	.word	0x40014000

08005fc0 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005fc0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d123      	bne.n	8006010 <HAL_TIM_Base_Start+0x50>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc8:	6803      	ldr	r3, [r0, #0]
 8005fca:	4a17      	ldr	r2, [pc, #92]	@ (8006028 <HAL_TIM_Base_Start+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005fcc:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fce:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd0:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fd4:	d01e      	beq.n	8006014 <HAL_TIM_Base_Start+0x54>
 8005fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fda:	d01b      	beq.n	8006014 <HAL_TIM_Base_Start+0x54>
 8005fdc:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d017      	beq.n	8006014 <HAL_TIM_Base_Start+0x54>
 8005fe4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d013      	beq.n	8006014 <HAL_TIM_Base_Start+0x54>
 8005fec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d00f      	beq.n	8006014 <HAL_TIM_Base_Start+0x54>
 8005ff4:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d00b      	beq.n	8006014 <HAL_TIM_Base_Start+0x54>
 8005ffc:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8006000:	4293      	cmp	r3, r2
 8006002:	d007      	beq.n	8006014 <HAL_TIM_Base_Start+0x54>
      __HAL_TIM_ENABLE(htim);
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	f042 0201 	orr.w	r2, r2, #1
 800600a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800600c:	2000      	movs	r0, #0
 800600e:	4770      	bx	lr
    return HAL_ERROR;
 8006010:	2001      	movs	r0, #1
}
 8006012:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006014:	6899      	ldr	r1, [r3, #8]
 8006016:	4a05      	ldr	r2, [pc, #20]	@ (800602c <HAL_TIM_Base_Start+0x6c>)
 8006018:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601a:	2a06      	cmp	r2, #6
 800601c:	d0f6      	beq.n	800600c <HAL_TIM_Base_Start+0x4c>
 800601e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8006022:	d1ef      	bne.n	8006004 <HAL_TIM_Base_Start+0x44>
  return HAL_OK;
 8006024:	2000      	movs	r0, #0
 8006026:	4770      	bx	lr
 8006028:	40012c00 	.word	0x40012c00
 800602c:	00010007 	.word	0x00010007

08006030 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006030:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8006034:	2a01      	cmp	r2, #1
 8006036:	d06c      	beq.n	8006112 <HAL_TIM_ConfigClockSource+0xe2>
 8006038:	4603      	mov	r3, r0
{
 800603a:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 800603c:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800603e:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 8006040:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8006042:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8006046:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800604a:	6895      	ldr	r5, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800604c:	4c4c      	ldr	r4, [pc, #304]	@ (8006180 <HAL_TIM_ConfigClockSource+0x150>)
 800604e:	402c      	ands	r4, r5
  htim->Instance->SMCR = tmpsmcr;
 8006050:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8006052:	680c      	ldr	r4, [r1, #0]
 8006054:	2c60      	cmp	r4, #96	@ 0x60
 8006056:	d076      	beq.n	8006146 <HAL_TIM_ConfigClockSource+0x116>
 8006058:	d811      	bhi.n	800607e <HAL_TIM_ConfigClockSource+0x4e>
 800605a:	2c40      	cmp	r4, #64	@ 0x40
 800605c:	d05b      	beq.n	8006116 <HAL_TIM_ConfigClockSource+0xe6>
 800605e:	d82e      	bhi.n	80060be <HAL_TIM_ConfigClockSource+0x8e>
 8006060:	2c20      	cmp	r4, #32
 8006062:	d004      	beq.n	800606e <HAL_TIM_ConfigClockSource+0x3e>
 8006064:	f200 8088 	bhi.w	8006178 <HAL_TIM_ConfigClockSource+0x148>
 8006068:	f034 0110 	bics.w	r1, r4, #16
 800606c:	d11f      	bne.n	80060ae <HAL_TIM_ConfigClockSource+0x7e>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800606e:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006070:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006074:	4321      	orrs	r1, r4
 8006076:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800607a:	6091      	str	r1, [r2, #8]
}
 800607c:	e016      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x7c>
  switch (sClockSourceConfig->ClockSource)
 800607e:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8006082:	d013      	beq.n	80060ac <HAL_TIM_ConfigClockSource+0x7c>
 8006084:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8006088:	d033      	beq.n	80060f2 <HAL_TIM_ConfigClockSource+0xc2>
 800608a:	2c70      	cmp	r4, #112	@ 0x70
 800608c:	d10f      	bne.n	80060ae <HAL_TIM_ConfigClockSource+0x7e>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800608e:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8006092:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006094:	4328      	orrs	r0, r5
 8006096:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006098:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800609c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80060a0:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060a2:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 80060a4:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060a6:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80060aa:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80060ac:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80060ae:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80060b0:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80060b2:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80060b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80060ba:	bc30      	pop	{r4, r5}
 80060bc:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80060be:	2c50      	cmp	r4, #80	@ 0x50
 80060c0:	d1f5      	bne.n	80060ae <HAL_TIM_ConfigClockSource+0x7e>
                               sClockSourceConfig->ClockPolarity,
 80060c2:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80060c4:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 80060c6:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060c8:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80060cc:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060ce:	6a11      	ldr	r1, [r2, #32]
 80060d0:	f021 0101 	bic.w	r1, r1, #1
 80060d4:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060d6:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060d8:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060dc:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80060e0:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80060e2:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80060e4:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80060e6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060ea:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80060ee:	6091      	str	r1, [r2, #8]
}
 80060f0:	e7dc      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x7c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060f2:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80060f6:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060f8:	4328      	orrs	r0, r5
 80060fa:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060fc:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006100:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8006104:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8006106:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006108:	6891      	ldr	r1, [r2, #8]
 800610a:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 800610e:	6091      	str	r1, [r2, #8]
      break;
 8006110:	e7cc      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x7c>
  __HAL_LOCK(htim);
 8006112:	2002      	movs	r0, #2
}
 8006114:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8006116:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006118:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 800611a:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800611c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8006120:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006122:	6a11      	ldr	r1, [r2, #32]
 8006124:	f021 0101 	bic.w	r1, r1, #1
 8006128:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800612a:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800612c:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006130:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006134:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8006136:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8006138:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800613a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800613e:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8006142:	6091      	str	r1, [r2, #8]
}
 8006144:	e7b2      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x7c>
                               sClockSourceConfig->ClockPolarity,
 8006146:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8006148:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 800614a:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800614c:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006150:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006154:	6a10      	ldr	r0, [r2, #32]
 8006156:	f020 0010 	bic.w	r0, r0, #16
 800615a:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800615c:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800615e:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006162:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8006166:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8006168:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 800616a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800616c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006170:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8006174:	6091      	str	r1, [r2, #8]
}
 8006176:	e799      	b.n	80060ac <HAL_TIM_ConfigClockSource+0x7c>
  switch (sClockSourceConfig->ClockSource)
 8006178:	2c30      	cmp	r4, #48	@ 0x30
 800617a:	f43f af78 	beq.w	800606e <HAL_TIM_ConfigClockSource+0x3e>
 800617e:	e796      	b.n	80060ae <HAL_TIM_ConfigClockSource+0x7e>
 8006180:	fffe0088 	.word	0xfffe0088

08006184 <HAL_TIM_PeriodElapsedCallback>:
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop

08006188 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8006188:	4770      	bx	lr
 800618a:	bf00      	nop

0800618c <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop

08006190 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop

08006194 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop

08006198 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8006198:	6803      	ldr	r3, [r0, #0]
{
 800619a:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800619c:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800619e:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061a0:	07aa      	lsls	r2, r5, #30
{
 80061a2:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80061a4:	d501      	bpl.n	80061aa <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80061a6:	07b1      	lsls	r1, r6, #30
 80061a8:	d452      	bmi.n	8006250 <HAL_TIM_IRQHandler+0xb8>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80061aa:	076b      	lsls	r3, r5, #29
 80061ac:	d501      	bpl.n	80061b2 <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80061ae:	0770      	lsls	r0, r6, #29
 80061b0:	d43b      	bmi.n	800622a <HAL_TIM_IRQHandler+0x92>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80061b2:	0729      	lsls	r1, r5, #28
 80061b4:	d501      	bpl.n	80061ba <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80061b6:	0732      	lsls	r2, r6, #28
 80061b8:	d425      	bmi.n	8006206 <HAL_TIM_IRQHandler+0x6e>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80061ba:	06e8      	lsls	r0, r5, #27
 80061bc:	d501      	bpl.n	80061c2 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80061be:	06f1      	lsls	r1, r6, #27
 80061c0:	d411      	bmi.n	80061e6 <HAL_TIM_IRQHandler+0x4e>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061c2:	07ea      	lsls	r2, r5, #31
 80061c4:	d501      	bpl.n	80061ca <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80061c6:	07f3      	lsls	r3, r6, #31
 80061c8:	d464      	bmi.n	8006294 <HAL_TIM_IRQHandler+0xfc>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80061ca:	f415 5f02 	tst.w	r5, #8320	@ 0x2080
 80061ce:	d04c      	beq.n	800626a <HAL_TIM_IRQHandler+0xd2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061d0:	0630      	lsls	r0, r6, #24
 80061d2:	d467      	bmi.n	80062a4 <HAL_TIM_IRQHandler+0x10c>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061d4:	0668      	lsls	r0, r5, #25
 80061d6:	d501      	bpl.n	80061dc <HAL_TIM_IRQHandler+0x44>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061d8:	0671      	lsls	r1, r6, #25
 80061da:	d46d      	bmi.n	80062b8 <HAL_TIM_IRQHandler+0x120>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80061dc:	06aa      	lsls	r2, r5, #26
 80061de:	d501      	bpl.n	80061e4 <HAL_TIM_IRQHandler+0x4c>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80061e0:	06b3      	lsls	r3, r6, #26
 80061e2:	d44e      	bmi.n	8006282 <HAL_TIM_IRQHandler+0xea>
}
 80061e4:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80061e6:	6823      	ldr	r3, [r4, #0]
 80061e8:	f06f 0210 	mvn.w	r2, #16
 80061ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061ee:	2208      	movs	r2, #8
 80061f0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061f2:	69db      	ldr	r3, [r3, #28]
 80061f4:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80061f8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061fa:	d071      	beq.n	80062e0 <HAL_TIM_IRQHandler+0x148>
        HAL_TIM_IC_CaptureCallback(htim);
 80061fc:	f7ff ffc6 	bl	800618c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006200:	2300      	movs	r3, #0
 8006202:	7723      	strb	r3, [r4, #28]
 8006204:	e7dd      	b.n	80061c2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	f06f 0208 	mvn.w	r2, #8
 800620c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800620e:	2204      	movs	r2, #4
 8006210:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	079b      	lsls	r3, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8006216:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006218:	d15f      	bne.n	80062da <HAL_TIM_IRQHandler+0x142>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800621a:	f7ff ffb5 	bl	8006188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800621e:	4620      	mov	r0, r4
 8006220:	f7ff ffb6 	bl	8006190 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006224:	2300      	movs	r3, #0
 8006226:	7723      	strb	r3, [r4, #28]
 8006228:	e7c7      	b.n	80061ba <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	f06f 0204 	mvn.w	r2, #4
 8006230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006232:	2202      	movs	r2, #2
 8006234:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800623c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800623e:	d149      	bne.n	80062d4 <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006240:	f7ff ffa2 	bl	8006188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006244:	4620      	mov	r0, r4
 8006246:	f7ff ffa3 	bl	8006190 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800624a:	2300      	movs	r3, #0
 800624c:	7723      	strb	r3, [r4, #28]
 800624e:	e7b0      	b.n	80061b2 <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006250:	f06f 0202 	mvn.w	r2, #2
 8006254:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006256:	2201      	movs	r2, #1
 8006258:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	079a      	lsls	r2, r3, #30
 800625e:	d033      	beq.n	80062c8 <HAL_TIM_IRQHandler+0x130>
          HAL_TIM_IC_CaptureCallback(htim);
 8006260:	f7ff ff94 	bl	800618c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006264:	2300      	movs	r3, #0
 8006266:	7723      	strb	r3, [r4, #28]
 8006268:	e79f      	b.n	80061aa <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800626a:	05ea      	lsls	r2, r5, #23
 800626c:	d5b2      	bpl.n	80061d4 <HAL_TIM_IRQHandler+0x3c>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800626e:	0633      	lsls	r3, r6, #24
 8006270:	d5b0      	bpl.n	80061d4 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006278:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800627a:	4620      	mov	r0, r4
 800627c:	f000 f88a 	bl	8006394 <HAL_TIMEx_Break2Callback>
 8006280:	e7a8      	b.n	80061d4 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8006288:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800628a:	611a      	str	r2, [r3, #16]
}
 800628c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8006290:	f000 b87c 	b.w	800638c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	f06f 0201 	mvn.w	r2, #1
 800629a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800629c:	4620      	mov	r0, r4
 800629e:	f7ff ff71 	bl	8006184 <HAL_TIM_PeriodElapsedCallback>
 80062a2:	e792      	b.n	80061ca <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80062aa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80062ac:	4620      	mov	r0, r4
 80062ae:	f000 f86f 	bl	8006390 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80062b2:	05e9      	lsls	r1, r5, #23
 80062b4:	d58e      	bpl.n	80061d4 <HAL_TIM_IRQHandler+0x3c>
 80062b6:	e7dc      	b.n	8006272 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062be:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80062c0:	4620      	mov	r0, r4
 80062c2:	f7ff ff67 	bl	8006194 <HAL_TIM_TriggerCallback>
 80062c6:	e789      	b.n	80061dc <HAL_TIM_IRQHandler+0x44>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062c8:	f7ff ff5e 	bl	8006188 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062cc:	4620      	mov	r0, r4
 80062ce:	f7ff ff5f 	bl	8006190 <HAL_TIM_PWM_PulseFinishedCallback>
 80062d2:	e7c7      	b.n	8006264 <HAL_TIM_IRQHandler+0xcc>
        HAL_TIM_IC_CaptureCallback(htim);
 80062d4:	f7ff ff5a 	bl	800618c <HAL_TIM_IC_CaptureCallback>
 80062d8:	e7b7      	b.n	800624a <HAL_TIM_IRQHandler+0xb2>
        HAL_TIM_IC_CaptureCallback(htim);
 80062da:	f7ff ff57 	bl	800618c <HAL_TIM_IC_CaptureCallback>
 80062de:	e7a1      	b.n	8006224 <HAL_TIM_IRQHandler+0x8c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062e0:	f7ff ff52 	bl	8006188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e4:	4620      	mov	r0, r4
 80062e6:	f7ff ff53 	bl	8006190 <HAL_TIM_PWM_PulseFinishedCallback>
 80062ea:	e789      	b.n	8006200 <HAL_TIM_IRQHandler+0x68>

080062ec <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ec:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80062f0:	2a01      	cmp	r2, #1
 80062f2:	d044      	beq.n	800637e <HAL_TIMEx_MasterConfigSynchronization+0x92>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062f4:	6802      	ldr	r2, [r0, #0]
{
 80062f6:	b470      	push	{r4, r5, r6}
 80062f8:	4603      	mov	r3, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062fa:	4e22      	ldr	r6, [pc, #136]	@ (8006384 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
  htim->State = HAL_TIM_STATE_BUSY;
 80062fc:	2002      	movs	r0, #2
 80062fe:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006302:	42b2      	cmp	r2, r6
  tmpcr2 = htim->Instance->CR2;
 8006304:	6850      	ldr	r0, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006306:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8006308:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800630a:	d026      	beq.n	800635a <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 800630c:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8006310:	42b2      	cmp	r2, r6
 8006312:	d02b      	beq.n	800636c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 8006314:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006318:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800631a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800631e:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006320:	d00e      	beq.n	8006340 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006322:	4819      	ldr	r0, [pc, #100]	@ (8006388 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8006324:	4282      	cmp	r2, r0
 8006326:	d00b      	beq.n	8006340 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006328:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800632c:	4282      	cmp	r2, r0
 800632e:	d007      	beq.n	8006340 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006330:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8006334:	4282      	cmp	r2, r0
 8006336:	d003      	beq.n	8006340 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 8006338:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 800633c:	4282      	cmp	r2, r0
 800633e:	d104      	bne.n	800634a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006340:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006342:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006346:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006348:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800634a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800634c:	2201      	movs	r2, #1
 800634e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006352:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8006356:	bc70      	pop	{r4, r5, r6}
 8006358:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800635a:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800635c:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006360:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8006362:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006366:	4328      	orrs	r0, r5
  htim->Instance->CR2 = tmpcr2;
 8006368:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800636a:	e7e9      	b.n	8006340 <HAL_TIMEx_MasterConfigSynchronization+0x54>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800636c:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800636e:	f420 0070 	bic.w	r0, r0, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006372:	4330      	orrs	r0, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8006374:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006378:	4305      	orrs	r5, r0
  htim->Instance->CR2 = tmpcr2;
 800637a:	6055      	str	r5, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800637c:	e7e0      	b.n	8006340 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  __HAL_LOCK(htim);
 800637e:	2002      	movs	r0, #2
}
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	40012c00 	.word	0x40012c00
 8006388:	40000400 	.word	0x40000400

0800638c <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop

08006390 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop

08006394 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop

08006398 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800639c:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800639e:	6fc0      	ldr	r0, [r0, #124]	@ 0x7c
 80063a0:	2820      	cmp	r0, #32
 80063a2:	d15c      	bne.n	800645e <HAL_UART_Transmit+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80063a4:	460d      	mov	r5, r1
 80063a6:	b109      	cbz	r1, 80063ac <HAL_UART_Transmit+0x14>
 80063a8:	4616      	mov	r6, r2
 80063aa:	b912      	cbnz	r2, 80063b2 <HAL_UART_Transmit+0x1a>
    {
      return  HAL_ERROR;
 80063ac:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 80063ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063b2:	461f      	mov	r7, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b4:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063b8:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ba:	f8c4 8084 	str.w	r8, [r4, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063be:	67e3      	str	r3, [r4, #124]	@ 0x7c
    tickstart = HAL_GetTick();
 80063c0:	f7fc fe44 	bl	800304c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063c4:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80063c6:	f8a4 6050 	strh.w	r6, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 80063ce:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 80063d0:	f8a4 6052 	strh.w	r6, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063d4:	d046      	beq.n	8006464 <HAL_UART_Transmit+0xcc>
    while (huart->TxXferCount > 0U)
 80063d6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063da:	6822      	ldr	r2, [r4, #0]
    while (huart->TxXferCount > 0U)
 80063dc:	b29b      	uxth	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d04b      	beq.n	800647a <HAL_UART_Transmit+0xe2>
 80063e2:	1c7b      	adds	r3, r7, #1
 80063e4:	d129      	bne.n	800643a <HAL_UART_Transmit+0xa2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063e6:	69d3      	ldr	r3, [r2, #28]
 80063e8:	061f      	lsls	r7, r3, #24
 80063ea:	d5fc      	bpl.n	80063e6 <HAL_UART_Transmit+0x4e>
      if (pdata8bits == NULL)
 80063ec:	2d00      	cmp	r5, #0
 80063ee:	d031      	beq.n	8006454 <HAL_UART_Transmit+0xbc>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063f0:	f815 3b01 	ldrb.w	r3, [r5], #1
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063f4:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80063f6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 80063fa:	3b01      	subs	r3, #1
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006402:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 8006406:	b29b      	uxth	r3, r3
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1ec      	bne.n	80063e6 <HAL_UART_Transmit+0x4e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800640c:	69d3      	ldr	r3, [r2, #28]
 800640e:	0659      	lsls	r1, r3, #25
 8006410:	d5fc      	bpl.n	800640c <HAL_UART_Transmit+0x74>
    huart->gState = HAL_UART_STATE_READY;
 8006412:	2320      	movs	r3, #32
 8006414:	67e3      	str	r3, [r4, #124]	@ 0x7c
    return HAL_OK;
 8006416:	2000      	movs	r0, #0
}
 8006418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 800641c:	2d00      	cmp	r5, #0
 800641e:	d03f      	beq.n	80064a0 <HAL_UART_Transmit+0x108>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006420:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006424:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8006426:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 800642a:	3b01      	subs	r3, #1
 800642c:	b29b      	uxth	r3, r3
 800642e:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006432:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 8006436:	b29b      	uxth	r3, r3
 8006438:	b30b      	cbz	r3, 800647e <HAL_UART_Transmit+0xe6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800643a:	69d3      	ldr	r3, [r2, #28]
 800643c:	061e      	lsls	r6, r3, #24
 800643e:	d4ed      	bmi.n	800641c <HAL_UART_Transmit+0x84>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006440:	f7fc fe04 	bl	800304c <HAL_GetTick>
 8006444:	eba0 0309 	sub.w	r3, r0, r9
 8006448:	429f      	cmp	r7, r3
 800644a:	d311      	bcc.n	8006470 <HAL_UART_Transmit+0xd8>
 800644c:	b187      	cbz	r7, 8006470 <HAL_UART_Transmit+0xd8>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800644e:	6822      	ldr	r2, [r4, #0]
 8006450:	6813      	ldr	r3, [r2, #0]
 8006452:	e7f2      	b.n	800643a <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006454:	f838 3b02 	ldrh.w	r3, [r8], #2
 8006458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800645c:	e7ca      	b.n	80063f4 <HAL_UART_Transmit+0x5c>
    return HAL_BUSY;
 800645e:	2002      	movs	r0, #2
}
 8006460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006464:	6923      	ldr	r3, [r4, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1b5      	bne.n	80063d6 <HAL_UART_Transmit+0x3e>
      pdata16bits = (const uint16_t *) pData;
 800646a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800646c:	461d      	mov	r5, r3
 800646e:	e7b2      	b.n	80063d6 <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 8006470:	2320      	movs	r3, #32
 8006472:	67e3      	str	r3, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 8006474:	2003      	movs	r0, #3
}
 8006476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800647a:	1c78      	adds	r0, r7, #1
 800647c:	d0c6      	beq.n	800640c <HAL_UART_Transmit+0x74>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800647e:	69d3      	ldr	r3, [r2, #28]
 8006480:	065b      	lsls	r3, r3, #25
 8006482:	d4c6      	bmi.n	8006412 <HAL_UART_Transmit+0x7a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006484:	f7fc fde2 	bl	800304c <HAL_GetTick>
 8006488:	eba0 0309 	sub.w	r3, r0, r9
 800648c:	429f      	cmp	r7, r3
 800648e:	d3ef      	bcc.n	8006470 <HAL_UART_Transmit+0xd8>
 8006490:	2f00      	cmp	r7, #0
 8006492:	d0ed      	beq.n	8006470 <HAL_UART_Transmit+0xd8>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006494:	6822      	ldr	r2, [r4, #0]
 8006496:	6813      	ldr	r3, [r2, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006498:	69d3      	ldr	r3, [r2, #28]
 800649a:	065b      	lsls	r3, r3, #25
 800649c:	d5f2      	bpl.n	8006484 <HAL_UART_Transmit+0xec>
 800649e:	e7b8      	b.n	8006412 <HAL_UART_Transmit+0x7a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064a0:	f838 3b02 	ldrh.w	r3, [r8], #2
 80064a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064a8:	e7bc      	b.n	8006424 <HAL_UART_Transmit+0x8c>
 80064aa:	bf00      	nop

080064ac <HAL_UART_Receive>:
{
 80064ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064b0:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80064b2:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 80064b6:	2820      	cmp	r0, #32
 80064b8:	d143      	bne.n	8006542 <HAL_UART_Receive+0x96>
    if ((pData == NULL) || (Size == 0U))
 80064ba:	460d      	mov	r5, r1
 80064bc:	b109      	cbz	r1, 80064c2 <HAL_UART_Receive+0x16>
 80064be:	4617      	mov	r7, r2
 80064c0:	b912      	cbnz	r2, 80064c8 <HAL_UART_Receive+0x1c>
      return  HAL_ERROR;
 80064c2:	2001      	movs	r0, #1
}
 80064c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c8:	2600      	movs	r6, #0
 80064ca:	4698      	mov	r8, r3
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064cc:	2322      	movs	r3, #34	@ 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ce:	f8c4 6084 	str.w	r6, [r4, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064d2:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d6:	6626      	str	r6, [r4, #96]	@ 0x60
    tickstart = HAL_GetTick();
 80064d8:	f7fc fdb8 	bl	800304c <HAL_GetTick>
    huart->RxXferSize  = Size;
 80064dc:	f8a4 7058 	strh.w	r7, [r4, #88]	@ 0x58
    huart->RxXferCount = Size;
 80064e0:	f8a4 705a 	strh.w	r7, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 80064e4:	68a7      	ldr	r7, [r4, #8]
 80064e6:	f5b7 5f80 	cmp.w	r7, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 80064ea:	4681      	mov	r9, r0
    UART_MASK_COMPUTATION(huart);
 80064ec:	d02c      	beq.n	8006548 <HAL_UART_Receive+0x9c>
 80064ee:	2f00      	cmp	r7, #0
 80064f0:	f040 8098 	bne.w	8006624 <HAL_UART_Receive+0x178>
 80064f4:	6923      	ldr	r3, [r4, #16]
    uhMask = huart->Mask;
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	bf0c      	ite	eq
 80064fa:	26ff      	moveq	r6, #255	@ 0xff
 80064fc:	267f      	movne	r6, #127	@ 0x7f
    while (huart->RxXferCount > 0U)
 80064fe:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
    UART_MASK_COMPUTATION(huart);
 8006502:	f8a4 605c 	strh.w	r6, [r4, #92]	@ 0x5c
    while (huart->RxXferCount > 0U)
 8006506:	b29b      	uxth	r3, r3
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 8085 	beq.w	8006618 <HAL_UART_Receive+0x16c>
 800650e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006512:	6822      	ldr	r2, [r4, #0]
 8006514:	d132      	bne.n	800657c <HAL_UART_Receive+0xd0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006516:	69d3      	ldr	r3, [r2, #28]
 8006518:	0699      	lsls	r1, r3, #26
 800651a:	d5fc      	bpl.n	8006516 <HAL_UART_Receive+0x6a>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800651c:	8c93      	ldrh	r3, [r2, #36]	@ 0x24
 800651e:	4033      	ands	r3, r6
      if (pdata8bits == NULL)
 8006520:	2d00      	cmp	r5, #0
 8006522:	d06b      	beq.n	80065fc <HAL_UART_Receive+0x150>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006524:	f805 3b01 	strb.w	r3, [r5], #1
      huart->RxXferCount--;
 8006528:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 800652c:	3b01      	subs	r3, #1
 800652e:	b29b      	uxth	r3, r3
 8006530:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006534:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8006538:	b29b      	uxth	r3, r3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d06c      	beq.n	8006618 <HAL_UART_Receive+0x16c>
 800653e:	6822      	ldr	r2, [r4, #0]
 8006540:	e7e9      	b.n	8006516 <HAL_UART_Receive+0x6a>
    return HAL_BUSY;
 8006542:	2002      	movs	r0, #2
}
 8006544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8006548:	6923      	ldr	r3, [r4, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d175      	bne.n	800663a <HAL_UART_Receive+0x18e>
      pdata16bits = (uint16_t *) pData;
 800654e:	462f      	mov	r7, r5
    uhMask = huart->Mask;
 8006550:	f240 16ff 	movw	r6, #511	@ 0x1ff
      pdata8bits  = NULL;
 8006554:	461d      	mov	r5, r3
 8006556:	e7d2      	b.n	80064fe <HAL_UART_Receive+0x52>
      if (pdata8bits == NULL)
 8006558:	2d00      	cmp	r5, #0
 800655a:	d071      	beq.n	8006640 <HAL_UART_Receive+0x194>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800655c:	8c93      	ldrh	r3, [r2, #36]	@ 0x24
 800655e:	4033      	ands	r3, r6
 8006560:	f805 3b01 	strb.w	r3, [r5], #1
      huart->RxXferCount--;
 8006564:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8006568:	3b01      	subs	r3, #1
 800656a:	b29b      	uxth	r3, r3
 800656c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006570:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8006574:	b29b      	uxth	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d04e      	beq.n	8006618 <HAL_UART_Receive+0x16c>
 800657a:	6822      	ldr	r2, [r4, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800657c:	69d3      	ldr	r3, [r2, #28]
 800657e:	069b      	lsls	r3, r3, #26
 8006580:	d4ea      	bmi.n	8006558 <HAL_UART_Receive+0xac>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006582:	f7fc fd63 	bl	800304c <HAL_GetTick>
 8006586:	eba0 0309 	sub.w	r3, r0, r9
 800658a:	4598      	cmp	r8, r3
 800658c:	d330      	bcc.n	80065f0 <HAL_UART_Receive+0x144>
 800658e:	f1b8 0f00 	cmp.w	r8, #0
 8006592:	d02d      	beq.n	80065f0 <HAL_UART_Receive+0x144>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006594:	6822      	ldr	r2, [r4, #0]
 8006596:	6813      	ldr	r3, [r2, #0]
 8006598:	075b      	lsls	r3, r3, #29
 800659a:	d5ef      	bpl.n	800657c <HAL_UART_Receive+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800659c:	69d3      	ldr	r3, [r2, #28]
 800659e:	0718      	lsls	r0, r3, #28
 80065a0:	d467      	bmi.n	8006672 <HAL_UART_Receive+0x1c6>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065a2:	69d3      	ldr	r3, [r2, #28]
 80065a4:	0519      	lsls	r1, r3, #20
 80065a6:	d5e9      	bpl.n	800657c <HAL_UART_Receive+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80065ac:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	e842 3100 	strex	r1, r3, [r2]
 80065ba:	2900      	cmp	r1, #0
 80065bc:	d1f7      	bne.n	80065ae <HAL_UART_Receive+0x102>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065be:	f102 0308 	add.w	r3, r2, #8
 80065c2:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	f102 0008 	add.w	r0, r2, #8
 80065ce:	e840 3100 	strex	r1, r3, [r0]
 80065d2:	2900      	cmp	r1, #0
 80065d4:	d1f3      	bne.n	80065be <HAL_UART_Receive+0x112>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d6:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d041      	beq.n	8006660 <HAL_UART_Receive+0x1b4>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065dc:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80065de:	2220      	movs	r2, #32
 80065e0:	f8c4 2080 	str.w	r2, [r4, #128]	@ 0x80

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065e4:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e6:	6623      	str	r3, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80065e8:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065ec:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80065f0:	2320      	movs	r3, #32
 80065f2:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        return HAL_TIMEOUT;
 80065f6:	2003      	movs	r0, #3
}
 80065f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80065fc:	f827 3b02 	strh.w	r3, [r7], #2
      huart->RxXferCount--;
 8006600:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8006604:	3b01      	subs	r3, #1
 8006606:	b29b      	uxth	r3, r3
 8006608:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 800660c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8006610:	b29b      	uxth	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	f47f af7f 	bne.w	8006516 <HAL_UART_Receive+0x6a>
    huart->RxState = HAL_UART_STATE_READY;
 8006618:	2320      	movs	r3, #32
 800661a:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
    return HAL_OK;
 800661e:	2000      	movs	r0, #0
}
 8006620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8006624:	f1b7 5f80 	cmp.w	r7, #268435456	@ 0x10000000
    uhMask = huart->Mask;
 8006628:	4637      	mov	r7, r6
    UART_MASK_COMPUTATION(huart);
 800662a:	f47f af68 	bne.w	80064fe <HAL_UART_Receive+0x52>
 800662e:	6923      	ldr	r3, [r4, #16]
    uhMask = huart->Mask;
 8006630:	2b00      	cmp	r3, #0
 8006632:	bf14      	ite	ne
 8006634:	263f      	movne	r6, #63	@ 0x3f
 8006636:	267f      	moveq	r6, #127	@ 0x7f
 8006638:	e761      	b.n	80064fe <HAL_UART_Receive+0x52>
      pdata16bits = NULL;
 800663a:	4637      	mov	r7, r6
    uhMask = huart->Mask;
 800663c:	26ff      	movs	r6, #255	@ 0xff
 800663e:	e75e      	b.n	80064fe <HAL_UART_Receive+0x52>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006640:	8c93      	ldrh	r3, [r2, #36]	@ 0x24
 8006642:	4033      	ands	r3, r6
 8006644:	f827 3b02 	strh.w	r3, [r7], #2
      huart->RxXferCount--;
 8006648:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 800664c:	3b01      	subs	r3, #1
 800664e:	b29b      	uxth	r3, r3
 8006650:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006654:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8006658:	b29b      	uxth	r3, r3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d18e      	bne.n	800657c <HAL_UART_Receive+0xd0>
 800665e:	e7db      	b.n	8006618 <HAL_UART_Receive+0x16c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006664:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006668:	e842 3100 	strex	r1, r3, [r2]
 800666c:	2900      	cmp	r1, #0
 800666e:	d1f7      	bne.n	8006660 <HAL_UART_Receive+0x1b4>
 8006670:	e7b4      	b.n	80065dc <HAL_UART_Receive+0x130>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006672:	2308      	movs	r3, #8
 8006674:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006676:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800667a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	e842 3100 	strex	r1, r3, [r2]
 8006682:	2900      	cmp	r1, #0
 8006684:	d1f7      	bne.n	8006676 <HAL_UART_Receive+0x1ca>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006686:	f102 0308 	add.w	r3, r2, #8
 800668a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800668e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006692:	f102 0008 	add.w	r0, r2, #8
 8006696:	e840 3100 	strex	r1, r3, [r0]
 800669a:	2900      	cmp	r1, #0
 800669c:	d1f3      	bne.n	8006686 <HAL_UART_Receive+0x1da>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800669e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d00b      	beq.n	80066bc <HAL_UART_Receive+0x210>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a4:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80066a6:	2120      	movs	r1, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066a8:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 80066aa:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
  huart->RxISR = NULL;
 80066ae:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066b0:	6623      	str	r3, [r4, #96]	@ 0x60
          __HAL_UNLOCK(huart);
 80066b2:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066b6:	f8c4 2084 	str.w	r2, [r4, #132]	@ 0x84
          return HAL_ERROR;
 80066ba:	e799      	b.n	80065f0 <HAL_UART_Receive+0x144>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066bc:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066c0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c4:	e842 3100 	strex	r1, r3, [r2]
 80066c8:	2900      	cmp	r1, #0
 80066ca:	d1f7      	bne.n	80066bc <HAL_UART_Receive+0x210>
 80066cc:	e7ea      	b.n	80066a4 <HAL_UART_Receive+0x1f8>
 80066ce:	bf00      	nop

080066d0 <arm_max_q15>:
 80066d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066d4:	4686      	mov	lr, r0
 80066d6:	f101 38ff 	add.w	r8, r1, #4294967295
 80066da:	ea5f 0998 	movs.w	r9, r8, lsr #2
 80066de:	f93e 4b02 	ldrsh.w	r4, [lr], #2
 80066e2:	d048      	beq.n	8006776 <arm_max_q15+0xa6>
 80066e4:	f109 0c01 	add.w	ip, r9, #1
 80066e8:	300a      	adds	r0, #10
 80066ea:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80066ee:	2504      	movs	r5, #4
 80066f0:	2700      	movs	r7, #0
 80066f2:	f930 6c08 	ldrsh.w	r6, [r0, #-8]
 80066f6:	42b4      	cmp	r4, r6
 80066f8:	bfb8      	it	lt
 80066fa:	4634      	movlt	r4, r6
 80066fc:	f930 6c06 	ldrsh.w	r6, [r0, #-6]
 8006700:	bfb8      	it	lt
 8006702:	1eef      	sublt	r7, r5, #3
 8006704:	42b4      	cmp	r4, r6
 8006706:	bfb8      	it	lt
 8006708:	4634      	movlt	r4, r6
 800670a:	f930 6c04 	ldrsh.w	r6, [r0, #-4]
 800670e:	bfb8      	it	lt
 8006710:	1eaf      	sublt	r7, r5, #2
 8006712:	42b4      	cmp	r4, r6
 8006714:	bfb8      	it	lt
 8006716:	4634      	movlt	r4, r6
 8006718:	f930 6c02 	ldrsh.w	r6, [r0, #-2]
 800671c:	bfb8      	it	lt
 800671e:	f105 37ff 	addlt.w	r7, r5, #4294967295
 8006722:	42b4      	cmp	r4, r6
 8006724:	bfb8      	it	lt
 8006726:	462f      	movlt	r7, r5
 8006728:	f105 0504 	add.w	r5, r5, #4
 800672c:	bfb8      	it	lt
 800672e:	4634      	movlt	r4, r6
 8006730:	4565      	cmp	r5, ip
 8006732:	f100 0008 	add.w	r0, r0, #8
 8006736:	d1dc      	bne.n	80066f2 <arm_max_q15+0x22>
 8006738:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 800673c:	f018 0003 	ands.w	r0, r8, #3
 8006740:	d015      	beq.n	800676e <arm_max_q15+0x9e>
 8006742:	f9be 5000 	ldrsh.w	r5, [lr]
 8006746:	42a5      	cmp	r5, r4
 8006748:	bfc4      	itt	gt
 800674a:	462c      	movgt	r4, r5
 800674c:	1a0f      	subgt	r7, r1, r0
 800674e:	3801      	subs	r0, #1
 8006750:	d00d      	beq.n	800676e <arm_max_q15+0x9e>
 8006752:	f9be 5002 	ldrsh.w	r5, [lr, #2]
 8006756:	42ac      	cmp	r4, r5
 8006758:	bfbc      	itt	lt
 800675a:	1a0f      	sublt	r7, r1, r0
 800675c:	462c      	movlt	r4, r5
 800675e:	2801      	cmp	r0, #1
 8006760:	d005      	beq.n	800676e <arm_max_q15+0x9e>
 8006762:	f9be 1004 	ldrsh.w	r1, [lr, #4]
 8006766:	428c      	cmp	r4, r1
 8006768:	bfbc      	itt	lt
 800676a:	4647      	movlt	r7, r8
 800676c:	460c      	movlt	r4, r1
 800676e:	8014      	strh	r4, [r2, #0]
 8006770:	601f      	str	r7, [r3, #0]
 8006772:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006776:	464f      	mov	r7, r9
 8006778:	e7e0      	b.n	800673c <arm_max_q15+0x6c>
 800677a:	bf00      	nop

0800677c <arm_split_rfft_q15>:
 800677c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006780:	b083      	sub	sp, #12
 8006782:	f101 4580 	add.w	r5, r1, #1073741824	@ 0x40000000
 8006786:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006788:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 800678a:	3d01      	subs	r5, #1
 800678c:	eb04 06c1 	add.w	r6, r4, r1, lsl #3
 8006790:	00ac      	lsls	r4, r5, #2
 8006792:	9401      	str	r4, [sp, #4]
 8006794:	1e4c      	subs	r4, r1, #1
 8006796:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 800679a:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 800679e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80067a2:	d02d      	beq.n	8006800 <arm_split_rfft_q15+0x84>
 80067a4:	2f01      	cmp	r7, #1
 80067a6:	f1a6 0c04 	sub.w	ip, r6, #4
 80067aa:	f100 0604 	add.w	r6, r0, #4
 80067ae:	d13e      	bne.n	800682e <arm_split_rfft_q15+0xb2>
 80067b0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80067b2:	f1ac 0104 	sub.w	r1, ip, #4
 80067b6:	f107 0808 	add.w	r8, r7, #8
 80067ba:	f856 7b04 	ldr.w	r7, [r6], #4
 80067be:	f852 9b04 	ldr.w	r9, [r2], #4
 80067c2:	fb47 fc09 	smusd	ip, r7, r9
 80067c6:	f855 e904 	ldr.w	lr, [r5], #-4
 80067ca:	f853 ab04 	ldr.w	sl, [r3], #4
 80067ce:	fb2e cc0a 	smlad	ip, lr, sl, ip
 80067d2:	fb4e fe1a 	smusdx	lr, lr, sl
 80067d6:	fb27 e719 	smladx	r7, r7, r9, lr
 80067da:	143f      	asrs	r7, r7, #16
 80067dc:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 80067e0:	f1c7 0e00 	rsb	lr, r7, #0
 80067e4:	3c01      	subs	r4, #1
 80067e6:	f828 7c02 	strh.w	r7, [r8, #-2]
 80067ea:	f828 cc04 	strh.w	ip, [r8, #-4]
 80067ee:	f1a1 0104 	sub.w	r1, r1, #4
 80067f2:	f8a1 e00a 	strh.w	lr, [r1, #10]
 80067f6:	f8a1 c008 	strh.w	ip, [r1, #8]
 80067fa:	f108 0804 	add.w	r8, r8, #4
 80067fe:	d1dc      	bne.n	80067ba <arm_split_rfft_q15+0x3e>
 8006800:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8006804:	f9b0 3000 	ldrsh.w	r3, [r0]
 8006808:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800680a:	9a01      	ldr	r2, [sp, #4]
 800680c:	1a5b      	subs	r3, r3, r1
 800680e:	4422      	add	r2, r4
 8006810:	2100      	movs	r1, #0
 8006812:	105b      	asrs	r3, r3, #1
 8006814:	8093      	strh	r3, [r2, #4]
 8006816:	80d1      	strh	r1, [r2, #6]
 8006818:	f9b0 3000 	ldrsh.w	r3, [r0]
 800681c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8006820:	8061      	strh	r1, [r4, #2]
 8006822:	4413      	add	r3, r2
 8006824:	105b      	asrs	r3, r3, #1
 8006826:	8023      	strh	r3, [r4, #0]
 8006828:	b003      	add	sp, #12
 800682a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800682e:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8006832:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8006834:	f1ac 0104 	sub.w	r1, ip, #4
 8006838:	f107 0808 	add.w	r8, r7, #8
 800683c:	f856 7b04 	ldr.w	r7, [r6], #4
 8006840:	f8d2 9000 	ldr.w	r9, [r2]
 8006844:	fb47 fc09 	smusd	ip, r7, r9
 8006848:	f855 e904 	ldr.w	lr, [r5], #-4
 800684c:	f8d3 a000 	ldr.w	sl, [r3]
 8006850:	fb2e cc0a 	smlad	ip, lr, sl, ip
 8006854:	fb4e fe1a 	smusdx	lr, lr, sl
 8006858:	fb27 e719 	smladx	r7, r7, r9, lr
 800685c:	143f      	asrs	r7, r7, #16
 800685e:	ea4f 4c2c 	mov.w	ip, ip, asr #16
 8006862:	f1c7 0e00 	rsb	lr, r7, #0
 8006866:	3c01      	subs	r4, #1
 8006868:	f828 7c02 	strh.w	r7, [r8, #-2]
 800686c:	f828 cc04 	strh.w	ip, [r8, #-4]
 8006870:	445b      	add	r3, fp
 8006872:	f8a1 e006 	strh.w	lr, [r1, #6]
 8006876:	f8a1 c004 	strh.w	ip, [r1, #4]
 800687a:	445a      	add	r2, fp
 800687c:	f108 0804 	add.w	r8, r8, #4
 8006880:	f1a1 0104 	sub.w	r1, r1, #4
 8006884:	d1da      	bne.n	800683c <arm_split_rfft_q15+0xc0>
 8006886:	e7bb      	b.n	8006800 <arm_split_rfft_q15+0x84>

08006888 <arm_rfft_q15>:
 8006888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688c:	f890 e004 	ldrb.w	lr, [r0, #4]
 8006890:	6806      	ldr	r6, [r0, #0]
 8006892:	f1be 0f01 	cmp.w	lr, #1
 8006896:	4604      	mov	r4, r0
 8006898:	b083      	sub	sp, #12
 800689a:	6940      	ldr	r0, [r0, #20]
 800689c:	4615      	mov	r5, r2
 800689e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80068a2:	460f      	mov	r7, r1
 80068a4:	d00f      	beq.n	80068c6 <arm_rfft_q15+0x3e>
 80068a6:	7963      	ldrb	r3, [r4, #5]
 80068a8:	4672      	mov	r2, lr
 80068aa:	f000 fd75 	bl	8007398 <arm_cfft_q15>
 80068ae:	68a3      	ldr	r3, [r4, #8]
 80068b0:	9301      	str	r3, [sp, #4]
 80068b2:	9500      	str	r5, [sp, #0]
 80068b4:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 80068b8:	4631      	mov	r1, r6
 80068ba:	4638      	mov	r0, r7
 80068bc:	f7ff ff5e 	bl	800677c <arm_split_rfft_q15>
 80068c0:	b003      	add	sp, #12
 80068c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c6:	e9d4 3103 	ldrd	r3, r1, [r4, #12]
 80068ca:	68a2      	ldr	r2, [r4, #8]
 80068cc:	eb07 0c86 	add.w	ip, r7, r6, lsl #2
 80068d0:	b30e      	cbz	r6, 8006916 <arm_rfft_q15+0x8e>
 80068d2:	2a01      	cmp	r2, #1
 80068d4:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 80068d8:	d132      	bne.n	8006940 <arm_rfft_q15+0xb8>
 80068da:	46a9      	mov	r9, r5
 80068dc:	f85c 8904 	ldr.w	r8, [ip], #-4
 80068e0:	f851 2b04 	ldr.w	r2, [r1], #4
 80068e4:	fb48 fa02 	smusd	sl, r8, r2
 80068e8:	f857 bb04 	ldr.w	fp, [r7], #4
 80068ec:	f853 eb04 	ldr.w	lr, [r3], #4
 80068f0:	fb2b aa0e 	smlad	sl, fp, lr, sl
 80068f4:	fb28 f812 	smuadx	r8, r8, r2
 80068f8:	f1c8 0200 	rsb	r2, r8, #0
 80068fc:	fb4e 2e1b 	smlsdx	lr, lr, fp, r2
 8006900:	ea4f 421e 	mov.w	r2, lr, lsr #16
 8006904:	0412      	lsls	r2, r2, #16
 8006906:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 800690a:	3e01      	subs	r6, #1
 800690c:	f849 2b04 	str.w	r2, [r9], #4
 8006910:	d1e4      	bne.n	80068dc <arm_rfft_q15+0x54>
 8006912:	f894 e004 	ldrb.w	lr, [r4, #4]
 8006916:	7963      	ldrb	r3, [r4, #5]
 8006918:	4672      	mov	r2, lr
 800691a:	4629      	mov	r1, r5
 800691c:	f000 fd3c 	bl	8007398 <arm_cfft_q15>
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d0cc      	beq.n	80068c0 <arm_rfft_q15+0x38>
 8006926:	3d02      	subs	r5, #2
 8006928:	2100      	movs	r1, #0
 800692a:	f935 3f02 	ldrsh.w	r3, [r5, #2]!
 800692e:	005b      	lsls	r3, r3, #1
 8006930:	802b      	strh	r3, [r5, #0]
 8006932:	6823      	ldr	r3, [r4, #0]
 8006934:	3101      	adds	r1, #1
 8006936:	428b      	cmp	r3, r1
 8006938:	d8f7      	bhi.n	800692a <arm_rfft_q15+0xa2>
 800693a:	b003      	add	sp, #12
 800693c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006940:	ee07 0a90 	vmov	s15, r0
 8006944:	46a8      	mov	r8, r5
 8006946:	f85c e904 	ldr.w	lr, [ip], #-4
 800694a:	6808      	ldr	r0, [r1, #0]
 800694c:	fb4e f900 	smusd	r9, lr, r0
 8006950:	f857 ab04 	ldr.w	sl, [r7], #4
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	fb2a 9902 	smlad	r9, sl, r2, r9
 800695a:	fb2e fe10 	smuadx	lr, lr, r0
 800695e:	f1ce 0e00 	rsb	lr, lr, #0
 8006962:	fb42 e21a 	smlsdx	r2, r2, sl, lr
 8006966:	0c12      	lsrs	r2, r2, #16
 8006968:	0412      	lsls	r2, r2, #16
 800696a:	ea42 4219 	orr.w	r2, r2, r9, lsr #16
 800696e:	3e01      	subs	r6, #1
 8006970:	f848 2b04 	str.w	r2, [r8], #4
 8006974:	4459      	add	r1, fp
 8006976:	445b      	add	r3, fp
 8006978:	d1e5      	bne.n	8006946 <arm_rfft_q15+0xbe>
 800697a:	ee17 0a90 	vmov	r0, s15
 800697e:	e7c8      	b.n	8006912 <arm_rfft_q15+0x8a>

08006980 <arm_rfft_init_q15>:
 8006980:	b430      	push	{r4, r5}
 8006982:	b289      	uxth	r1, r1
 8006984:	4d31      	ldr	r5, [pc, #196]	@ (8006a4c <arm_rfft_init_q15+0xcc>)
 8006986:	4c32      	ldr	r4, [pc, #200]	@ (8006a50 <arm_rfft_init_q15+0xd0>)
 8006988:	6001      	str	r1, [r0, #0]
 800698a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800698e:	e9c0 5403 	strd	r5, r4, [r0, #12]
 8006992:	7102      	strb	r2, [r0, #4]
 8006994:	7143      	strb	r3, [r0, #5]
 8006996:	d053      	beq.n	8006a40 <arm_rfft_init_q15+0xc0>
 8006998:	d91a      	bls.n	80069d0 <arm_rfft_init_q15+0x50>
 800699a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800699e:	d033      	beq.n	8006a08 <arm_rfft_init_q15+0x88>
 80069a0:	d909      	bls.n	80069b6 <arm_rfft_init_q15+0x36>
 80069a2:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 80069a6:	d12b      	bne.n	8006a00 <arm_rfft_init_q15+0x80>
 80069a8:	4b2a      	ldr	r3, [pc, #168]	@ (8006a54 <arm_rfft_init_q15+0xd4>)
 80069aa:	6143      	str	r3, [r0, #20]
 80069ac:	2201      	movs	r2, #1
 80069ae:	6082      	str	r2, [r0, #8]
 80069b0:	2000      	movs	r0, #0
 80069b2:	bc30      	pop	{r4, r5}
 80069b4:	4770      	bx	lr
 80069b6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80069ba:	d02c      	beq.n	8006a16 <arm_rfft_init_q15+0x96>
 80069bc:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80069c0:	d11e      	bne.n	8006a00 <arm_rfft_init_q15+0x80>
 80069c2:	4b25      	ldr	r3, [pc, #148]	@ (8006a58 <arm_rfft_init_q15+0xd8>)
 80069c4:	6143      	str	r3, [r0, #20]
 80069c6:	2204      	movs	r2, #4
 80069c8:	6082      	str	r2, [r0, #8]
 80069ca:	bc30      	pop	{r4, r5}
 80069cc:	2000      	movs	r0, #0
 80069ce:	4770      	bx	lr
 80069d0:	2980      	cmp	r1, #128	@ 0x80
 80069d2:	d027      	beq.n	8006a24 <arm_rfft_init_q15+0xa4>
 80069d4:	d909      	bls.n	80069ea <arm_rfft_init_q15+0x6a>
 80069d6:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80069da:	d111      	bne.n	8006a00 <arm_rfft_init_q15+0x80>
 80069dc:	4b1f      	ldr	r3, [pc, #124]	@ (8006a5c <arm_rfft_init_q15+0xdc>)
 80069de:	6143      	str	r3, [r0, #20]
 80069e0:	2220      	movs	r2, #32
 80069e2:	6082      	str	r2, [r0, #8]
 80069e4:	bc30      	pop	{r4, r5}
 80069e6:	2000      	movs	r0, #0
 80069e8:	4770      	bx	lr
 80069ea:	2920      	cmp	r1, #32
 80069ec:	d021      	beq.n	8006a32 <arm_rfft_init_q15+0xb2>
 80069ee:	2940      	cmp	r1, #64	@ 0x40
 80069f0:	d106      	bne.n	8006a00 <arm_rfft_init_q15+0x80>
 80069f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006a60 <arm_rfft_init_q15+0xe0>)
 80069f4:	6143      	str	r3, [r0, #20]
 80069f6:	2280      	movs	r2, #128	@ 0x80
 80069f8:	6082      	str	r2, [r0, #8]
 80069fa:	bc30      	pop	{r4, r5}
 80069fc:	2000      	movs	r0, #0
 80069fe:	4770      	bx	lr
 8006a00:	f04f 30ff 	mov.w	r0, #4294967295
 8006a04:	bc30      	pop	{r4, r5}
 8006a06:	4770      	bx	lr
 8006a08:	4b16      	ldr	r3, [pc, #88]	@ (8006a64 <arm_rfft_init_q15+0xe4>)
 8006a0a:	6143      	str	r3, [r0, #20]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	6082      	str	r2, [r0, #8]
 8006a10:	bc30      	pop	{r4, r5}
 8006a12:	2000      	movs	r0, #0
 8006a14:	4770      	bx	lr
 8006a16:	4b14      	ldr	r3, [pc, #80]	@ (8006a68 <arm_rfft_init_q15+0xe8>)
 8006a18:	6143      	str	r3, [r0, #20]
 8006a1a:	2208      	movs	r2, #8
 8006a1c:	6082      	str	r2, [r0, #8]
 8006a1e:	bc30      	pop	{r4, r5}
 8006a20:	2000      	movs	r0, #0
 8006a22:	4770      	bx	lr
 8006a24:	4b11      	ldr	r3, [pc, #68]	@ (8006a6c <arm_rfft_init_q15+0xec>)
 8006a26:	6143      	str	r3, [r0, #20]
 8006a28:	2240      	movs	r2, #64	@ 0x40
 8006a2a:	6082      	str	r2, [r0, #8]
 8006a2c:	bc30      	pop	{r4, r5}
 8006a2e:	2000      	movs	r0, #0
 8006a30:	4770      	bx	lr
 8006a32:	4b0f      	ldr	r3, [pc, #60]	@ (8006a70 <arm_rfft_init_q15+0xf0>)
 8006a34:	6143      	str	r3, [r0, #20]
 8006a36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a3a:	6082      	str	r2, [r0, #8]
 8006a3c:	2000      	movs	r0, #0
 8006a3e:	e7b8      	b.n	80069b2 <arm_rfft_init_q15+0x32>
 8006a40:	4b0c      	ldr	r3, [pc, #48]	@ (8006a74 <arm_rfft_init_q15+0xf4>)
 8006a42:	6143      	str	r3, [r0, #20]
 8006a44:	2210      	movs	r2, #16
 8006a46:	6082      	str	r2, [r0, #8]
 8006a48:	2000      	movs	r0, #0
 8006a4a:	e7b2      	b.n	80069b2 <arm_rfft_init_q15+0x32>
 8006a4c:	0800e51c 	.word	0x0800e51c
 8006a50:	0801251c 	.word	0x0801251c
 8006a54:	0800a6f4 	.word	0x0800a6f4
 8006a58:	0800a694 	.word	0x0800a694
 8006a5c:	0800a6a4 	.word	0x0800a6a4
 8006a60:	0800a6e4 	.word	0x0800a6e4
 8006a64:	0800a6c4 	.word	0x0800a6c4
 8006a68:	0800a704 	.word	0x0800a704
 8006a6c:	0800a714 	.word	0x0800a714
 8006a70:	0800a6b4 	.word	0x0800a6b4
 8006a74:	0800a6d4 	.word	0x0800a6d4

08006a78 <arm_mat_mult_fast_q15>:
 8006a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7c:	b09d      	sub	sp, #116	@ 0x74
 8006a7e:	880f      	ldrh	r7, [r1, #0]
 8006a80:	9009      	str	r0, [sp, #36]	@ 0x24
 8006a82:	4606      	mov	r6, r0
 8006a84:	8840      	ldrh	r0, [r0, #2]
 8006a86:	884d      	ldrh	r5, [r1, #2]
 8006a88:	8836      	ldrh	r6, [r6, #0]
 8006a8a:	684c      	ldr	r4, [r1, #4]
 8006a8c:	9017      	str	r0, [sp, #92]	@ 0x5c
 8006a8e:	42b8      	cmp	r0, r7
 8006a90:	971a      	str	r7, [sp, #104]	@ 0x68
 8006a92:	9518      	str	r5, [sp, #96]	@ 0x60
 8006a94:	9616      	str	r6, [sp, #88]	@ 0x58
 8006a96:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a98:	9311      	str	r3, [sp, #68]	@ 0x44
 8006a9a:	f040 81e9 	bne.w	8006e70 <arm_mat_mult_fast_q15+0x3f8>
 8006a9e:	8813      	ldrh	r3, [r2, #0]
 8006aa0:	42b3      	cmp	r3, r6
 8006aa2:	f040 81e5 	bne.w	8006e70 <arm_mat_mult_fast_q15+0x3f8>
 8006aa6:	8853      	ldrh	r3, [r2, #2]
 8006aa8:	42ab      	cmp	r3, r5
 8006aaa:	f040 81e1 	bne.w	8006e70 <arm_mat_mult_fast_q15+0x3f8>
 8006aae:	0043      	lsls	r3, r0, #1
 8006ab0:	2801      	cmp	r0, #1
 8006ab2:	ea4f 0695 	mov.w	r6, r5, lsr #2
 8006ab6:	9306      	str	r3, [sp, #24]
 8006ab8:	f005 0703 	and.w	r7, r5, #3
 8006abc:	d133      	bne.n	8006b26 <arm_mat_mult_fast_q15+0xae>
 8006abe:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
 8006ac2:	fb06 fc03 	mul.w	ip, r6, r3
 8006ac6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8006aca:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 8006ace:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8006ad2:	4655      	mov	r5, sl
 8006ad4:	4699      	mov	r9, r3
 8006ad6:	462b      	mov	r3, r5
 8006ad8:	b1ae      	cbz	r6, 8006b06 <arm_mat_mult_fast_q15+0x8e>
 8006ada:	4621      	mov	r1, r4
 8006adc:	4630      	mov	r0, r6
 8006ade:	680a      	ldr	r2, [r1, #0]
 8006ae0:	801a      	strh	r2, [r3, #0]
 8006ae2:	1412      	asrs	r2, r2, #16
 8006ae4:	f823 2009 	strh.w	r2, [r3, r9]
 8006ae8:	684a      	ldr	r2, [r1, #4]
 8006aea:	f823 2019 	strh.w	r2, [r3, r9, lsl #1]
 8006aee:	3801      	subs	r0, #1
 8006af0:	ea4f 4222 	mov.w	r2, r2, asr #16
 8006af4:	80da      	strh	r2, [r3, #6]
 8006af6:	f101 0108 	add.w	r1, r1, #8
 8006afa:	f103 0308 	add.w	r3, r3, #8
 8006afe:	d1ee      	bne.n	8006ade <arm_mat_mult_fast_q15+0x66>
 8006b00:	4444      	add	r4, r8
 8006b02:	eb05 030c 	add.w	r3, r5, ip
 8006b06:	b147      	cbz	r7, 8006b1a <arm_mat_mult_fast_q15+0xa2>
 8006b08:	4621      	mov	r1, r4
 8006b0a:	463a      	mov	r2, r7
 8006b0c:	f931 0b02 	ldrsh.w	r0, [r1], #2
 8006b10:	8018      	strh	r0, [r3, #0]
 8006b12:	3a01      	subs	r2, #1
 8006b14:	444b      	add	r3, r9
 8006b16:	d1f9      	bne.n	8006b0c <arm_mat_mult_fast_q15+0x94>
 8006b18:	4474      	add	r4, lr
 8006b1a:	45aa      	cmp	sl, r5
 8006b1c:	f105 0302 	add.w	r3, r5, #2
 8006b20:	d038      	beq.n	8006b94 <arm_mat_mult_fast_q15+0x11c>
 8006b22:	461d      	mov	r5, r3
 8006b24:	e7d7      	b.n	8006ad6 <arm_mat_mult_fast_q15+0x5e>
 8006b26:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006b28:	181d      	adds	r5, r3, r0
 8006b2a:	fb06 f803 	mul.w	r8, r6, r3
 8006b2e:	4696      	mov	lr, r2
 8006b30:	441a      	add	r2, r3
 8006b32:	006d      	lsls	r5, r5, #1
 8006b34:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8006b38:	9212      	str	r2, [sp, #72]	@ 0x48
 8006b3a:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 8006b3e:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8006b42:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8006b46:	469b      	mov	fp, r3
 8006b48:	4673      	mov	r3, lr
 8006b4a:	b1a6      	cbz	r6, 8006b76 <arm_mat_mult_fast_q15+0xfe>
 8006b4c:	4621      	mov	r1, r4
 8006b4e:	4630      	mov	r0, r6
 8006b50:	680a      	ldr	r2, [r1, #0]
 8006b52:	801a      	strh	r2, [r3, #0]
 8006b54:	1412      	asrs	r2, r2, #16
 8006b56:	f823 200b 	strh.w	r2, [r3, fp]
 8006b5a:	684a      	ldr	r2, [r1, #4]
 8006b5c:	f823 201b 	strh.w	r2, [r3, fp, lsl #1]
 8006b60:	3801      	subs	r0, #1
 8006b62:	ea4f 4222 	mov.w	r2, r2, asr #16
 8006b66:	535a      	strh	r2, [r3, r5]
 8006b68:	f101 0108 	add.w	r1, r1, #8
 8006b6c:	4463      	add	r3, ip
 8006b6e:	d1ef      	bne.n	8006b50 <arm_mat_mult_fast_q15+0xd8>
 8006b70:	444c      	add	r4, r9
 8006b72:	eb0e 0308 	add.w	r3, lr, r8
 8006b76:	b147      	cbz	r7, 8006b8a <arm_mat_mult_fast_q15+0x112>
 8006b78:	4621      	mov	r1, r4
 8006b7a:	463a      	mov	r2, r7
 8006b7c:	f931 0b02 	ldrsh.w	r0, [r1], #2
 8006b80:	8018      	strh	r0, [r3, #0]
 8006b82:	3a01      	subs	r2, #1
 8006b84:	445b      	add	r3, fp
 8006b86:	d1f9      	bne.n	8006b7c <arm_mat_mult_fast_q15+0x104>
 8006b88:	4454      	add	r4, sl
 8006b8a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006b8c:	f10e 0e02 	add.w	lr, lr, #2
 8006b90:	4573      	cmp	r3, lr
 8006b92:	d1d9      	bne.n	8006b48 <arm_mat_mult_fast_q15+0xd0>
 8006b94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b96:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006b9c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006b9e:	004c      	lsls	r4, r1, #1
 8006ba0:	eb03 0541 	add.w	r5, r3, r1, lsl #1
 8006ba4:	0852      	lsrs	r2, r2, #1
 8006ba6:	9415      	str	r4, [sp, #84]	@ 0x54
 8006ba8:	950d      	str	r5, [sp, #52]	@ 0x34
 8006baa:	9210      	str	r2, [sp, #64]	@ 0x40
 8006bac:	f000 80b1 	beq.w	8006d12 <arm_mat_mult_fast_q15+0x29a>
 8006bb0:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8006bb2:	460a      	mov	r2, r1
 8006bb4:	0846      	lsrs	r6, r0, #1
 8006bb6:	f001 0101 	and.w	r1, r1, #1
 8006bba:	f000 0001 	and.w	r0, r0, #1
 8006bbe:	0852      	lsrs	r2, r2, #1
 8006bc0:	911b      	str	r1, [sp, #108]	@ 0x6c
 8006bc2:	9607      	str	r6, [sp, #28]
 8006bc4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006bc8:	900a      	str	r0, [sp, #40]	@ 0x28
 8006bca:	f000 809f 	beq.w	8006d0c <arm_mat_mult_fast_q15+0x294>
 8006bce:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006bd2:	1ac8      	subs	r0, r1, r3
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006bda:	9205      	str	r2, [sp, #20]
 8006bdc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006bde:	0092      	lsls	r2, r2, #2
 8006be0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006be2:	00b2      	lsls	r2, r6, #2
 8006be4:	1861      	adds	r1, r4, r1
 8006be6:	920c      	str	r2, [sp, #48]	@ 0x30
 8006be8:	2200      	movs	r2, #0
 8006bea:	9114      	str	r1, [sp, #80]	@ 0x50
 8006bec:	920e      	str	r2, [sp, #56]	@ 0x38
 8006bee:	9906      	ldr	r1, [sp, #24]
 8006bf0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006bf2:	1828      	adds	r0, r5, r0
 8006bf4:	440a      	add	r2, r1
 8006bf6:	9013      	str	r0, [sp, #76]	@ 0x4c
 8006bf8:	9212      	str	r2, [sp, #72]	@ 0x48
 8006bfa:	9304      	str	r3, [sp, #16]
 8006bfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bfe:	005b      	lsls	r3, r3, #1
 8006c00:	9308      	str	r3, [sp, #32]
 8006c02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c04:	3304      	adds	r3, #4
 8006c06:	9303      	str	r3, [sp, #12]
 8006c08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006c0a:	9301      	str	r3, [sp, #4]
 8006c0c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c12:	9a08      	ldr	r2, [sp, #32]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	eb03 0b02 	add.w	fp, r3, r2
 8006c1a:	9b06      	ldr	r3, [sp, #24]
 8006c1c:	eb0b 0203 	add.w	r2, fp, r3
 8006c20:	9b07      	ldr	r3, [sp, #28]
 8006c22:	9202      	str	r2, [sp, #8]
 8006c24:	e9dd e800 	ldrd	lr, r8, [sp]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d06a      	beq.n	8006d02 <arm_mat_mult_fast_q15+0x28a>
 8006c2c:	2500      	movs	r5, #0
 8006c2e:	462e      	mov	r6, r5
 8006c30:	462f      	mov	r7, r5
 8006c32:	46ac      	mov	ip, r5
 8006c34:	4692      	mov	sl, r2
 8006c36:	46d9      	mov	r9, fp
 8006c38:	f859 4b04 	ldr.w	r4, [r9], #4
 8006c3c:	f858 0b04 	ldr.w	r0, [r8], #4
 8006c40:	f85a 2b04 	ldr.w	r2, [sl], #4
 8006c44:	f85e 1b04 	ldr.w	r1, [lr], #4
 8006c48:	fb24 cc00 	smlad	ip, r4, r0, ip
 8006c4c:	fb24 7701 	smlad	r7, r4, r1, r7
 8006c50:	fb22 6600 	smlad	r6, r2, r0, r6
 8006c54:	fb22 5501 	smlad	r5, r2, r1, r5
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	d1ed      	bne.n	8006c38 <arm_mat_mult_fast_q15+0x1c0>
 8006c5c:	9a02      	ldr	r2, [sp, #8]
 8006c5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c60:	4611      	mov	r1, r2
 8006c62:	9a00      	ldr	r2, [sp, #0]
 8006c64:	eb02 0e03 	add.w	lr, r2, r3
 8006c68:	9a01      	ldr	r2, [sp, #4]
 8006c6a:	4419      	add	r1, r3
 8006c6c:	9102      	str	r1, [sp, #8]
 8006c6e:	449b      	add	fp, r3
 8006c70:	eb02 0803 	add.w	r8, r2, r3
 8006c74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c76:	b183      	cbz	r3, 8006c9a <arm_mat_mult_fast_q15+0x222>
 8006c78:	9902      	ldr	r1, [sp, #8]
 8006c7a:	f9bb 3000 	ldrsh.w	r3, [fp]
 8006c7e:	f9b8 2000 	ldrsh.w	r2, [r8]
 8006c82:	f9b1 1000 	ldrsh.w	r1, [r1]
 8006c86:	f9be 0000 	ldrsh.w	r0, [lr]
 8006c8a:	fb03 cc02 	mla	ip, r3, r2, ip
 8006c8e:	fb02 6601 	mla	r6, r2, r1, r6
 8006c92:	fb03 7700 	mla	r7, r3, r0, r7
 8006c96:	fb01 5500 	mla	r5, r1, r0, r5
 8006c9a:	9b04      	ldr	r3, [sp, #16]
 8006c9c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006c9e:	9801      	ldr	r0, [sp, #4]
 8006ca0:	ea4f 3cec 	mov.w	ip, ip, asr #15
 8006ca4:	13ff      	asrs	r7, r7, #15
 8006ca6:	1d19      	adds	r1, r3, #4
 8006ca8:	f823 cc04 	strh.w	ip, [r3, #-4]
 8006cac:	f823 7c02 	strh.w	r7, [r3, #-2]
 8006cb0:	9b03      	ldr	r3, [sp, #12]
 8006cb2:	9104      	str	r1, [sp, #16]
 8006cb4:	13f6      	asrs	r6, r6, #15
 8006cb6:	13ed      	asrs	r5, r5, #15
 8006cb8:	f823 6c04 	strh.w	r6, [r3, #-4]
 8006cbc:	f823 5c02 	strh.w	r5, [r3, #-2]
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	9303      	str	r3, [sp, #12]
 8006cc4:	9b00      	ldr	r3, [sp, #0]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	9b05      	ldr	r3, [sp, #20]
 8006ccc:	4604      	mov	r4, r0
 8006cce:	4414      	add	r4, r2
 8006cd0:	428b      	cmp	r3, r1
 8006cd2:	9401      	str	r4, [sp, #4]
 8006cd4:	d19c      	bne.n	8006c10 <arm_mat_mult_fast_q15+0x198>
 8006cd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cd8:	9a06      	ldr	r2, [sp, #24]
 8006cda:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006cdc:	4413      	add	r3, r2
 8006cde:	930e      	str	r3, [sp, #56]	@ 0x38
 8006ce0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006ce2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	4419      	add	r1, r3
 8006ce8:	9a05      	ldr	r2, [sp, #20]
 8006cea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006cec:	910f      	str	r1, [sp, #60]	@ 0x3c
 8006cee:	4418      	add	r0, r3
 8006cf0:	441a      	add	r2, r3
 8006cf2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006cf4:	900d      	str	r0, [sp, #52]	@ 0x34
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	9205      	str	r2, [sp, #20]
 8006cfa:	9310      	str	r3, [sp, #64]	@ 0x40
 8006cfc:	d006      	beq.n	8006d0c <arm_mat_mult_fast_q15+0x294>
 8006cfe:	1d0b      	adds	r3, r1, #4
 8006d00:	e77b      	b.n	8006bfa <arm_mat_mult_fast_q15+0x182>
 8006d02:	469c      	mov	ip, r3
 8006d04:	461d      	mov	r5, r3
 8006d06:	461e      	mov	r6, r3
 8006d08:	461f      	mov	r7, r3
 8006d0a:	e7b3      	b.n	8006c74 <arm_mat_mult_fast_q15+0x1fc>
 8006d0c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d155      	bne.n	8006dbe <arm_mat_mult_fast_q15+0x346>
 8006d12:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006d14:	07da      	lsls	r2, r3, #31
 8006d16:	d54e      	bpl.n	8006db6 <arm_mat_mult_fast_q15+0x33e>
 8006d18:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006d1a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8006d1c:	6852      	ldr	r2, [r2, #4]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	fb03 fe01 	mul.w	lr, r3, r1
 8006d24:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8006d28:	2900      	cmp	r1, #0
 8006d2a:	d044      	beq.n	8006db6 <arm_mat_mult_fast_q15+0x33e>
 8006d2c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006d2e:	fb03 f302 	mul.w	r3, r3, r2
 8006d32:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 8006d36:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006d38:	f8cd b008 	str.w	fp, [sp, #8]
 8006d3c:	4473      	add	r3, lr
 8006d3e:	f002 0903 	and.w	r9, r2, #3
 8006d42:	ea4f 0892 	mov.w	r8, r2, lsr #2
 8006d46:	9301      	str	r3, [sp, #4]
 8006d48:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
 8006d4c:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8006d50:	ea4f 0ac8 	mov.w	sl, r8, lsl #3
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d58:	685d      	ldr	r5, [r3, #4]
 8006d5a:	9b02      	ldr	r3, [sp, #8]
 8006d5c:	441d      	add	r5, r3
 8006d5e:	f1b8 0f00 	cmp.w	r8, #0
 8006d62:	f000 8083 	beq.w	8006e6c <arm_mat_mult_fast_q15+0x3f4>
 8006d66:	4658      	mov	r0, fp
 8006d68:	4629      	mov	r1, r5
 8006d6a:	4644      	mov	r4, r8
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	680f      	ldr	r7, [r1, #0]
 8006d70:	684a      	ldr	r2, [r1, #4]
 8006d72:	f8d0 c000 	ldr.w	ip, [r0]
 8006d76:	6846      	ldr	r6, [r0, #4]
 8006d78:	3108      	adds	r1, #8
 8006d7a:	3008      	adds	r0, #8
 8006d7c:	fb27 330c 	smlad	r3, r7, ip, r3
 8006d80:	fb22 3306 	smlad	r3, r2, r6, r3
 8006d84:	3c01      	subs	r4, #1
 8006d86:	d1f2      	bne.n	8006d6e <arm_mat_mult_fast_q15+0x2f6>
 8006d88:	44d3      	add	fp, sl
 8006d8a:	4455      	add	r5, sl
 8006d8c:	f1b9 0f00 	cmp.w	r9, #0
 8006d90:	d00b      	beq.n	8006daa <arm_mat_mult_fast_q15+0x332>
 8006d92:	4659      	mov	r1, fp
 8006d94:	464a      	mov	r2, r9
 8006d96:	f835 4b02 	ldrh.w	r4, [r5], #2
 8006d9a:	f831 0b02 	ldrh.w	r0, [r1], #2
 8006d9e:	3a01      	subs	r2, #1
 8006da0:	fb14 3300 	smlabb	r3, r4, r0, r3
 8006da4:	d1f7      	bne.n	8006d96 <arm_mat_mult_fast_q15+0x31e>
 8006da6:	9a00      	ldr	r2, [sp, #0]
 8006da8:	4493      	add	fp, r2
 8006daa:	13db      	asrs	r3, r3, #15
 8006dac:	f82e 3b02 	strh.w	r3, [lr], #2
 8006db0:	9b01      	ldr	r3, [sp, #4]
 8006db2:	459e      	cmp	lr, r3
 8006db4:	d1cf      	bne.n	8006d56 <arm_mat_mult_fast_q15+0x2de>
 8006db6:	2000      	movs	r0, #0
 8006db8:	b01d      	add	sp, #116	@ 0x74
 8006dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dbe:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8006dc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dc2:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8006dc4:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8006dc8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006dca:	f103 3bff 	add.w	fp, r3, #4294967295
 8006dce:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8006dd0:	fb03 fb0b 	mul.w	fp, r3, fp
 8006dd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006dd6:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
 8006dda:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f002 0903 	and.w	r9, r2, #3
 8006de2:	f1a1 0e02 	sub.w	lr, r1, #2
 8006de6:	ea4f 0892 	mov.w	r8, r2, lsr #2
 8006dea:	449e      	add	lr, r3
 8006dec:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8006df0:	eb0b 02c8 	add.w	r2, fp, r8, lsl #3
 8006df4:	9301      	str	r3, [sp, #4]
 8006df6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006df8:	9202      	str	r2, [sp, #8]
 8006dfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006dfe:	9200      	str	r2, [sp, #0]
 8006e00:	f023 0a01 	bic.w	sl, r3, #1
 8006e04:	f1b8 0f00 	cmp.w	r8, #0
 8006e08:	d02d      	beq.n	8006e66 <arm_mat_mult_fast_q15+0x3ee>
 8006e0a:	4658      	mov	r0, fp
 8006e0c:	4661      	mov	r1, ip
 8006e0e:	4644      	mov	r4, r8
 8006e10:	2300      	movs	r3, #0
 8006e12:	680e      	ldr	r6, [r1, #0]
 8006e14:	684a      	ldr	r2, [r1, #4]
 8006e16:	6807      	ldr	r7, [r0, #0]
 8006e18:	6845      	ldr	r5, [r0, #4]
 8006e1a:	3108      	adds	r1, #8
 8006e1c:	3008      	adds	r0, #8
 8006e1e:	fb26 3307 	smlad	r3, r6, r7, r3
 8006e22:	fb22 3305 	smlad	r3, r2, r5, r3
 8006e26:	3c01      	subs	r4, #1
 8006e28:	d1f3      	bne.n	8006e12 <arm_mat_mult_fast_q15+0x39a>
 8006e2a:	9a00      	ldr	r2, [sp, #0]
 8006e2c:	9902      	ldr	r1, [sp, #8]
 8006e2e:	4494      	add	ip, r2
 8006e30:	f1b9 0f00 	cmp.w	r9, #0
 8006e34:	d00b      	beq.n	8006e4e <arm_mat_mult_fast_q15+0x3d6>
 8006e36:	4660      	mov	r0, ip
 8006e38:	464a      	mov	r2, r9
 8006e3a:	f830 5b02 	ldrh.w	r5, [r0], #2
 8006e3e:	f831 4b02 	ldrh.w	r4, [r1], #2
 8006e42:	3a01      	subs	r2, #1
 8006e44:	fb15 3304 	smlabb	r3, r5, r4, r3
 8006e48:	d1f7      	bne.n	8006e3a <arm_mat_mult_fast_q15+0x3c2>
 8006e4a:	9a01      	ldr	r2, [sp, #4]
 8006e4c:	4494      	add	ip, r2
 8006e4e:	13db      	asrs	r3, r3, #15
 8006e50:	f8ae 3000 	strh.w	r3, [lr]
 8006e54:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006e56:	f1ba 0a01 	subs.w	sl, sl, #1
 8006e5a:	449e      	add	lr, r3
 8006e5c:	f43f af59 	beq.w	8006d12 <arm_mat_mult_fast_q15+0x29a>
 8006e60:	f1b8 0f00 	cmp.w	r8, #0
 8006e64:	d1d1      	bne.n	8006e0a <arm_mat_mult_fast_q15+0x392>
 8006e66:	4659      	mov	r1, fp
 8006e68:	4643      	mov	r3, r8
 8006e6a:	e7e1      	b.n	8006e30 <arm_mat_mult_fast_q15+0x3b8>
 8006e6c:	4643      	mov	r3, r8
 8006e6e:	e78d      	b.n	8006d8c <arm_mat_mult_fast_q15+0x314>
 8006e70:	f06f 0002 	mvn.w	r0, #2
 8006e74:	b01d      	add	sp, #116	@ 0x74
 8006e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e7a:	bf00      	nop

08006e7c <arm_mat_init_q15>:
 8006e7c:	8001      	strh	r1, [r0, #0]
 8006e7e:	8042      	strh	r2, [r0, #2]
 8006e80:	6043      	str	r3, [r0, #4]
 8006e82:	4770      	bx	lr

08006e84 <arm_cmplx_mag_q15>:
 8006e84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e88:	ea5f 0992 	movs.w	r9, r2, lsr #2
 8006e8c:	4617      	mov	r7, r2
 8006e8e:	4680      	mov	r8, r0
 8006e90:	460e      	mov	r6, r1
 8006e92:	d029      	beq.n	8006ee8 <arm_cmplx_mag_q15+0x64>
 8006e94:	4605      	mov	r5, r0
 8006e96:	46ca      	mov	sl, r9
 8006e98:	460c      	mov	r4, r1
 8006e9a:	6828      	ldr	r0, [r5, #0]
 8006e9c:	fb20 f000 	smuad	r0, r0, r0
 8006ea0:	4621      	mov	r1, r4
 8006ea2:	1440      	asrs	r0, r0, #17
 8006ea4:	f000 f832 	bl	8006f0c <arm_sqrt_q15>
 8006ea8:	6868      	ldr	r0, [r5, #4]
 8006eaa:	fb20 f000 	smuad	r0, r0, r0
 8006eae:	1ca1      	adds	r1, r4, #2
 8006eb0:	1440      	asrs	r0, r0, #17
 8006eb2:	f000 f82b 	bl	8006f0c <arm_sqrt_q15>
 8006eb6:	68a8      	ldr	r0, [r5, #8]
 8006eb8:	fb20 f000 	smuad	r0, r0, r0
 8006ebc:	1d21      	adds	r1, r4, #4
 8006ebe:	1440      	asrs	r0, r0, #17
 8006ec0:	f000 f824 	bl	8006f0c <arm_sqrt_q15>
 8006ec4:	3510      	adds	r5, #16
 8006ec6:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8006eca:	fb23 f303 	smuad	r3, r3, r3
 8006ece:	1da1      	adds	r1, r4, #6
 8006ed0:	1458      	asrs	r0, r3, #17
 8006ed2:	f000 f81b 	bl	8006f0c <arm_sqrt_q15>
 8006ed6:	f1ba 0a01 	subs.w	sl, sl, #1
 8006eda:	f104 0408 	add.w	r4, r4, #8
 8006ede:	d1dc      	bne.n	8006e9a <arm_cmplx_mag_q15+0x16>
 8006ee0:	eb06 06c9 	add.w	r6, r6, r9, lsl #3
 8006ee4:	eb08 1809 	add.w	r8, r8, r9, lsl #4
 8006ee8:	f017 0703 	ands.w	r7, r7, #3
 8006eec:	d00c      	beq.n	8006f08 <arm_cmplx_mag_q15+0x84>
 8006eee:	eb06 0747 	add.w	r7, r6, r7, lsl #1
 8006ef2:	f858 0b04 	ldr.w	r0, [r8], #4
 8006ef6:	fb20 f000 	smuad	r0, r0, r0
 8006efa:	4631      	mov	r1, r6
 8006efc:	1440      	asrs	r0, r0, #17
 8006efe:	3602      	adds	r6, #2
 8006f00:	f000 f804 	bl	8006f0c <arm_sqrt_q15>
 8006f04:	42be      	cmp	r6, r7
 8006f06:	d1f4      	bne.n	8006ef2 <arm_cmplx_mag_q15+0x6e>
 8006f08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f0c <arm_sqrt_q15>:
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	dd5c      	ble.n	8006fca <arm_sqrt_q15+0xbe>
 8006f10:	fab0 f280 	clz	r2, r0
 8006f14:	3a11      	subs	r2, #17
 8006f16:	b470      	push	{r4, r5, r6}
 8006f18:	b294      	uxth	r4, r2
 8006f1a:	f012 0201 	ands.w	r2, r2, #1
 8006f1e:	bf1a      	itte	ne
 8006f20:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006f24:	4098      	lslne	r0, r3
 8006f26:	40a0      	lsleq	r0, r4
 8006f28:	b200      	sxth	r0, r0
 8006f2a:	ee07 0a90 	vmov	s15, r0
 8006f2e:	eefa 7ae8 	vcvt.f32.s32	s15, s15, #15
 8006f32:	4b28      	ldr	r3, [pc, #160]	@ (8006fd4 <arm_sqrt_q15+0xc8>)
 8006f34:	ee17 5a90 	vmov	r5, s15
 8006f38:	eba3 0365 	sub.w	r3, r3, r5, asr #1
 8006f3c:	ee07 3a90 	vmov	s15, r3
 8006f40:	eefe 7ac9 	vcvt.s32.f32	s15, s15, #14
 8006f44:	1046      	asrs	r6, r0, #1
 8006f46:	ee17 3a90 	vmov	r3, s15
 8006f4a:	b21b      	sxth	r3, r3
 8006f4c:	fb03 f503 	mul.w	r5, r3, r3
 8006f50:	13ed      	asrs	r5, r5, #15
 8006f52:	fb15 f506 	smulbb	r5, r5, r6
 8006f56:	13ed      	asrs	r5, r5, #15
 8006f58:	f5c5 5540 	rsb	r5, r5, #12288	@ 0x3000
 8006f5c:	fb03 f305 	mul.w	r3, r3, r5
 8006f60:	f343 334f 	sbfx	r3, r3, #13, #16
 8006f64:	f023 0303 	bic.w	r3, r3, #3
 8006f68:	fb03 f503 	mul.w	r5, r3, r3
 8006f6c:	13ed      	asrs	r5, r5, #15
 8006f6e:	fb15 f506 	smulbb	r5, r5, r6
 8006f72:	13ed      	asrs	r5, r5, #15
 8006f74:	f5c5 5540 	rsb	r5, r5, #12288	@ 0x3000
 8006f78:	fb03 f305 	mul.w	r3, r3, r5
 8006f7c:	f343 334f 	sbfx	r3, r3, #13, #16
 8006f80:	f023 0303 	bic.w	r3, r3, #3
 8006f84:	fb03 f503 	mul.w	r5, r3, r3
 8006f88:	13ed      	asrs	r5, r5, #15
 8006f8a:	fb15 f506 	smulbb	r5, r5, r6
 8006f8e:	13ed      	asrs	r5, r5, #15
 8006f90:	f5c5 5540 	rsb	r5, r5, #12288	@ 0x3000
 8006f94:	fb03 f305 	mul.w	r3, r3, r5
 8006f98:	13db      	asrs	r3, r3, #15
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	fb13 f300 	smulbb	r3, r3, r0
 8006fa0:	f343 338f 	sbfx	r3, r3, #14, #16
 8006fa4:	f023 0301 	bic.w	r3, r3, #1
 8006fa8:	b13a      	cbz	r2, 8006fba <arm_sqrt_q15+0xae>
 8006faa:	3c01      	subs	r4, #1
 8006fac:	1064      	asrs	r4, r4, #1
 8006fae:	4123      	asrs	r3, r4
 8006fb0:	b21b      	sxth	r3, r3
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	bc70      	pop	{r4, r5, r6}
 8006fb6:	800b      	strh	r3, [r1, #0]
 8006fb8:	4770      	bx	lr
 8006fba:	f344 044e 	sbfx	r4, r4, #1, #15
 8006fbe:	4123      	asrs	r3, r4
 8006fc0:	b21b      	sxth	r3, r3
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	bc70      	pop	{r4, r5, r6}
 8006fc6:	800b      	strh	r3, [r1, #0]
 8006fc8:	4770      	bx	lr
 8006fca:	2300      	movs	r3, #0
 8006fcc:	800b      	strh	r3, [r1, #0]
 8006fce:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd2:	4770      	bx	lr
 8006fd4:	5f3759df 	.word	0x5f3759df

08006fd8 <arm_shift_q15>:
 8006fd8:	2900      	cmp	r1, #0
 8006fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fde:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8006fe2:	db4a      	blt.n	800707a <arm_shift_q15+0xa2>
 8006fe4:	f1bc 0f00 	cmp.w	ip, #0
 8006fe8:	d02b      	beq.n	8007042 <arm_shift_q15+0x6a>
 8006fea:	f100 0508 	add.w	r5, r0, #8
 8006fee:	4616      	mov	r6, r2
 8006ff0:	4667      	mov	r7, ip
 8006ff2:	f935 4c08 	ldrsh.w	r4, [r5, #-8]
 8006ff6:	408c      	lsls	r4, r1
 8006ff8:	f304 040f 	ssat	r4, #16, r4
 8006ffc:	f935 ec06 	ldrsh.w	lr, [r5, #-6]
 8007000:	fa0e fe01 	lsl.w	lr, lr, r1
 8007004:	f30e 0e0f 	ssat	lr, #16, lr
 8007008:	b2a4      	uxth	r4, r4
 800700a:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800700e:	6034      	str	r4, [r6, #0]
 8007010:	f935 4c04 	ldrsh.w	r4, [r5, #-4]
 8007014:	408c      	lsls	r4, r1
 8007016:	f304 040f 	ssat	r4, #16, r4
 800701a:	f935 ec02 	ldrsh.w	lr, [r5, #-2]
 800701e:	fa0e fe01 	lsl.w	lr, lr, r1
 8007022:	f30e 0e0f 	ssat	lr, #16, lr
 8007026:	b2a4      	uxth	r4, r4
 8007028:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800702c:	3f01      	subs	r7, #1
 800702e:	6074      	str	r4, [r6, #4]
 8007030:	f105 0508 	add.w	r5, r5, #8
 8007034:	f106 0608 	add.w	r6, r6, #8
 8007038:	d1db      	bne.n	8006ff2 <arm_shift_q15+0x1a>
 800703a:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 800703e:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 8007042:	f013 0303 	ands.w	r3, r3, #3
 8007046:	d016      	beq.n	8007076 <arm_shift_q15+0x9e>
 8007048:	f9b0 4000 	ldrsh.w	r4, [r0]
 800704c:	408c      	lsls	r4, r1
 800704e:	f304 040f 	ssat	r4, #16, r4
 8007052:	3b01      	subs	r3, #1
 8007054:	8014      	strh	r4, [r2, #0]
 8007056:	d00e      	beq.n	8007076 <arm_shift_q15+0x9e>
 8007058:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800705c:	408c      	lsls	r4, r1
 800705e:	f304 040f 	ssat	r4, #16, r4
 8007062:	2b01      	cmp	r3, #1
 8007064:	8054      	strh	r4, [r2, #2]
 8007066:	d006      	beq.n	8007076 <arm_shift_q15+0x9e>
 8007068:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800706c:	fa03 f101 	lsl.w	r1, r3, r1
 8007070:	f301 010f 	ssat	r1, #16, r1
 8007074:	8091      	strh	r1, [r2, #4]
 8007076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800707a:	f1bc 0f00 	cmp.w	ip, #0
 800707e:	d025      	beq.n	80070cc <arm_shift_q15+0xf4>
 8007080:	424f      	negs	r7, r1
 8007082:	f100 0508 	add.w	r5, r0, #8
 8007086:	4616      	mov	r6, r2
 8007088:	46e6      	mov	lr, ip
 800708a:	f935 4c08 	ldrsh.w	r4, [r5, #-8]
 800708e:	f935 8c06 	ldrsh.w	r8, [r5, #-6]
 8007092:	413c      	asrs	r4, r7
 8007094:	fa48 f807 	asr.w	r8, r8, r7
 8007098:	b2a4      	uxth	r4, r4
 800709a:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800709e:	6034      	str	r4, [r6, #0]
 80070a0:	f935 4c04 	ldrsh.w	r4, [r5, #-4]
 80070a4:	f935 8c02 	ldrsh.w	r8, [r5, #-2]
 80070a8:	413c      	asrs	r4, r7
 80070aa:	b2a4      	uxth	r4, r4
 80070ac:	fa48 f807 	asr.w	r8, r8, r7
 80070b0:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80070b4:	f1be 0e01 	subs.w	lr, lr, #1
 80070b8:	6074      	str	r4, [r6, #4]
 80070ba:	f105 0508 	add.w	r5, r5, #8
 80070be:	f106 0608 	add.w	r6, r6, #8
 80070c2:	d1e2      	bne.n	800708a <arm_shift_q15+0xb2>
 80070c4:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
 80070c8:	eb02 02cc 	add.w	r2, r2, ip, lsl #3
 80070cc:	f013 0303 	ands.w	r3, r3, #3
 80070d0:	d0d1      	beq.n	8007076 <arm_shift_q15+0x9e>
 80070d2:	f9b0 4000 	ldrsh.w	r4, [r0]
 80070d6:	4249      	negs	r1, r1
 80070d8:	410c      	asrs	r4, r1
 80070da:	3b01      	subs	r3, #1
 80070dc:	8014      	strh	r4, [r2, #0]
 80070de:	d0ca      	beq.n	8007076 <arm_shift_q15+0x9e>
 80070e0:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	fa44 f401 	asr.w	r4, r4, r1
 80070ea:	8054      	strh	r4, [r2, #2]
 80070ec:	d0c3      	beq.n	8007076 <arm_shift_q15+0x9e>
 80070ee:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80070f2:	fa43 f101 	asr.w	r1, r3, r1
 80070f6:	8091      	strh	r1, [r2, #4]
 80070f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080070fc <arm_offset_q15>:
 80070fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070fe:	fa1f fc81 	uxth.w	ip, r1
 8007102:	ea5f 0e93 	movs.w	lr, r3, lsr #2
 8007106:	ea4c 4c01 	orr.w	ip, ip, r1, lsl #16
 800710a:	d014      	beq.n	8007136 <arm_offset_q15+0x3a>
 800710c:	4615      	mov	r5, r2
 800710e:	4604      	mov	r4, r0
 8007110:	4677      	mov	r7, lr
 8007112:	6826      	ldr	r6, [r4, #0]
 8007114:	fa96 f61c 	qadd16	r6, r6, ip
 8007118:	3f01      	subs	r7, #1
 800711a:	602e      	str	r6, [r5, #0]
 800711c:	6866      	ldr	r6, [r4, #4]
 800711e:	fa96 f61c 	qadd16	r6, r6, ip
 8007122:	f104 0408 	add.w	r4, r4, #8
 8007126:	606e      	str	r6, [r5, #4]
 8007128:	f105 0508 	add.w	r5, r5, #8
 800712c:	d1f1      	bne.n	8007112 <arm_offset_q15+0x16>
 800712e:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
 8007132:	eb02 02ce 	add.w	r2, r2, lr, lsl #3
 8007136:	f013 0303 	ands.w	r3, r3, #3
 800713a:	d012      	beq.n	8007162 <arm_offset_q15+0x66>
 800713c:	3b01      	subs	r3, #1
 800713e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8007142:	fa94 f411 	qadd16	r4, r4, r1
 8007146:	8014      	strh	r4, [r2, #0]
 8007148:	d00b      	beq.n	8007162 <arm_offset_q15+0x66>
 800714a:	2b01      	cmp	r3, #1
 800714c:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8007150:	fa94 f411 	qadd16	r4, r4, r1
 8007154:	8054      	strh	r4, [r2, #2]
 8007156:	d004      	beq.n	8007162 <arm_offset_q15+0x66>
 8007158:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800715c:	fa93 f111 	qadd16	r1, r3, r1
 8007160:	8091      	strh	r1, [r2, #4]
 8007162:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007164 <arm_mult_q15>:
 8007164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007168:	ea5f 0893 	movs.w	r8, r3, lsr #2
 800716c:	d037      	beq.n	80071de <arm_mult_q15+0x7a>
 800716e:	4694      	mov	ip, r2
 8007170:	460f      	mov	r7, r1
 8007172:	4606      	mov	r6, r0
 8007174:	46c6      	mov	lr, r8
 8007176:	f8d6 a000 	ldr.w	sl, [r6]
 800717a:	683d      	ldr	r5, [r7, #0]
 800717c:	6874      	ldr	r4, [r6, #4]
 800717e:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8007182:	fb15 f93a 	smultt	r9, r5, sl
 8007186:	ea4f 39e9 	mov.w	r9, r9, asr #15
 800718a:	3608      	adds	r6, #8
 800718c:	3708      	adds	r7, #8
 800718e:	f309 090f 	ssat	r9, #16, r9
 8007192:	fb1a fa05 	smulbb	sl, sl, r5
 8007196:	ea4f 3aea 	mov.w	sl, sl, asr #15
 800719a:	f30a 0a0f 	ssat	sl, #16, sl
 800719e:	fb1b f534 	smultt	r5, fp, r4
 80071a2:	13ed      	asrs	r5, r5, #15
 80071a4:	f305 050f 	ssat	r5, #16, r5
 80071a8:	fb14 f40b 	smulbb	r4, r4, fp
 80071ac:	13e4      	asrs	r4, r4, #15
 80071ae:	f304 040f 	ssat	r4, #16, r4
 80071b2:	fa1f fa8a 	uxth.w	sl, sl
 80071b6:	b2a4      	uxth	r4, r4
 80071b8:	ea4a 4909 	orr.w	r9, sl, r9, lsl #16
 80071bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80071c0:	f1be 0e01 	subs.w	lr, lr, #1
 80071c4:	f8cc 9000 	str.w	r9, [ip]
 80071c8:	f8cc 4004 	str.w	r4, [ip, #4]
 80071cc:	f10c 0c08 	add.w	ip, ip, #8
 80071d0:	d1d1      	bne.n	8007176 <arm_mult_q15+0x12>
 80071d2:	eb00 00c8 	add.w	r0, r0, r8, lsl #3
 80071d6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80071da:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
 80071de:	f013 0303 	ands.w	r3, r3, #3
 80071e2:	d01b      	beq.n	800721c <arm_mult_q15+0xb8>
 80071e4:	880c      	ldrh	r4, [r1, #0]
 80071e6:	8805      	ldrh	r5, [r0, #0]
 80071e8:	fb14 f405 	smulbb	r4, r4, r5
 80071ec:	13e4      	asrs	r4, r4, #15
 80071ee:	f304 040f 	ssat	r4, #16, r4
 80071f2:	3b01      	subs	r3, #1
 80071f4:	8014      	strh	r4, [r2, #0]
 80071f6:	d011      	beq.n	800721c <arm_mult_q15+0xb8>
 80071f8:	884c      	ldrh	r4, [r1, #2]
 80071fa:	8845      	ldrh	r5, [r0, #2]
 80071fc:	fb14 f405 	smulbb	r4, r4, r5
 8007200:	13e4      	asrs	r4, r4, #15
 8007202:	f304 040f 	ssat	r4, #16, r4
 8007206:	2b01      	cmp	r3, #1
 8007208:	8054      	strh	r4, [r2, #2]
 800720a:	d007      	beq.n	800721c <arm_mult_q15+0xb8>
 800720c:	8883      	ldrh	r3, [r0, #4]
 800720e:	8889      	ldrh	r1, [r1, #4]
 8007210:	fb13 f301 	smulbb	r3, r3, r1
 8007214:	13db      	asrs	r3, r3, #15
 8007216:	f303 030f 	ssat	r3, #16, r3
 800721a:	8093      	strh	r3, [r2, #4]
 800721c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007220 <arm_cfft_radix4by2_q15>:
 8007220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007224:	084d      	lsrs	r5, r1, #1
 8007226:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 800722a:	4616      	mov	r6, r2
 800722c:	d047      	beq.n	80072be <arm_cfft_radix4by2_q15+0x9e>
 800722e:	4604      	mov	r4, r0
 8007230:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 80072d8 <arm_cfft_radix4by2_q15+0xb8>
 8007234:	4696      	mov	lr, r2
 8007236:	4638      	mov	r0, r7
 8007238:	4621      	mov	r1, r4
 800723a:	462a      	mov	r2, r5
 800723c:	f04f 0c00 	mov.w	ip, #0
 8007240:	680b      	ldr	r3, [r1, #0]
 8007242:	f8d0 a000 	ldr.w	sl, [r0]
 8007246:	fa93 f32c 	shadd16	r3, r3, ip
 800724a:	fa9a fa2c 	shadd16	sl, sl, ip
 800724e:	fa93 f92a 	shadd16	r9, r3, sl
 8007252:	fad3 fa1a 	qsub16	sl, r3, sl
 8007256:	f85e 3b04 	ldr.w	r3, [lr], #4
 800725a:	f841 9b04 	str.w	r9, [r1], #4
 800725e:	fb23 f90a 	smuad	r9, r3, sl
 8007262:	fb43 f31a 	smusdx	r3, r3, sl
 8007266:	ea03 0308 	and.w	r3, r3, r8
 800726a:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 800726e:	3a01      	subs	r2, #1
 8007270:	f840 3b04 	str.w	r3, [r0], #4
 8007274:	d1e4      	bne.n	8007240 <arm_cfft_radix4by2_q15+0x20>
 8007276:	4629      	mov	r1, r5
 8007278:	2302      	movs	r3, #2
 800727a:	4632      	mov	r2, r6
 800727c:	4620      	mov	r0, r4
 800727e:	f000 f8e9 	bl	8007454 <arm_radix4_butterfly_q15>
 8007282:	4638      	mov	r0, r7
 8007284:	4629      	mov	r1, r5
 8007286:	4632      	mov	r2, r6
 8007288:	2302      	movs	r3, #2
 800728a:	f000 f8e3 	bl	8007454 <arm_radix4_butterfly_q15>
 800728e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8007292:	4620      	mov	r0, r4
 8007294:	f9b0 6000 	ldrsh.w	r6, [r0]
 8007298:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 800729c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80072a0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80072a4:	0076      	lsls	r6, r6, #1
 80072a6:	0064      	lsls	r4, r4, #1
 80072a8:	0052      	lsls	r2, r2, #1
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	8006      	strh	r6, [r0, #0]
 80072ae:	8044      	strh	r4, [r0, #2]
 80072b0:	8082      	strh	r2, [r0, #4]
 80072b2:	80c3      	strh	r3, [r0, #6]
 80072b4:	3008      	adds	r0, #8
 80072b6:	4285      	cmp	r5, r0
 80072b8:	d1ec      	bne.n	8007294 <arm_cfft_radix4by2_q15+0x74>
 80072ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072be:	4629      	mov	r1, r5
 80072c0:	2302      	movs	r3, #2
 80072c2:	f000 f8c7 	bl	8007454 <arm_radix4_butterfly_q15>
 80072c6:	4632      	mov	r2, r6
 80072c8:	4629      	mov	r1, r5
 80072ca:	4638      	mov	r0, r7
 80072cc:	2302      	movs	r3, #2
 80072ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072d2:	f000 b8bf 	b.w	8007454 <arm_radix4_butterfly_q15>
 80072d6:	bf00      	nop
 80072d8:	ffff0000 	.word	0xffff0000

080072dc <arm_cfft_radix4by2_inverse_q15>:
 80072dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072e0:	084d      	lsrs	r5, r1, #1
 80072e2:	eb00 0741 	add.w	r7, r0, r1, lsl #1
 80072e6:	4616      	mov	r6, r2
 80072e8:	d047      	beq.n	800737a <arm_cfft_radix4by2_inverse_q15+0x9e>
 80072ea:	4604      	mov	r4, r0
 80072ec:	f8df 80a4 	ldr.w	r8, [pc, #164]	@ 8007394 <arm_cfft_radix4by2_inverse_q15+0xb8>
 80072f0:	4696      	mov	lr, r2
 80072f2:	4638      	mov	r0, r7
 80072f4:	4621      	mov	r1, r4
 80072f6:	462a      	mov	r2, r5
 80072f8:	f04f 0c00 	mov.w	ip, #0
 80072fc:	680b      	ldr	r3, [r1, #0]
 80072fe:	f8d0 a000 	ldr.w	sl, [r0]
 8007302:	fa93 f32c 	shadd16	r3, r3, ip
 8007306:	fa9a fa2c 	shadd16	sl, sl, ip
 800730a:	fa93 f92a 	shadd16	r9, r3, sl
 800730e:	fad3 fa1a 	qsub16	sl, r3, sl
 8007312:	f85e 3b04 	ldr.w	r3, [lr], #4
 8007316:	f841 9b04 	str.w	r9, [r1], #4
 800731a:	fb43 f90a 	smusd	r9, r3, sl
 800731e:	fb23 f31a 	smuadx	r3, r3, sl
 8007322:	ea03 0308 	and.w	r3, r3, r8
 8007326:	ea43 4319 	orr.w	r3, r3, r9, lsr #16
 800732a:	3a01      	subs	r2, #1
 800732c:	f840 3b04 	str.w	r3, [r0], #4
 8007330:	d1e4      	bne.n	80072fc <arm_cfft_radix4by2_inverse_q15+0x20>
 8007332:	4629      	mov	r1, r5
 8007334:	2302      	movs	r3, #2
 8007336:	4632      	mov	r2, r6
 8007338:	4620      	mov	r0, r4
 800733a:	f000 fa35 	bl	80077a8 <arm_radix4_butterfly_inverse_q15>
 800733e:	4638      	mov	r0, r7
 8007340:	4629      	mov	r1, r5
 8007342:	4632      	mov	r2, r6
 8007344:	2302      	movs	r3, #2
 8007346:	f000 fa2f 	bl	80077a8 <arm_radix4_butterfly_inverse_q15>
 800734a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800734e:	4620      	mov	r0, r4
 8007350:	f9b0 6000 	ldrsh.w	r6, [r0]
 8007354:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 8007358:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 800735c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8007360:	0076      	lsls	r6, r6, #1
 8007362:	0064      	lsls	r4, r4, #1
 8007364:	0052      	lsls	r2, r2, #1
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	8006      	strh	r6, [r0, #0]
 800736a:	8044      	strh	r4, [r0, #2]
 800736c:	8082      	strh	r2, [r0, #4]
 800736e:	80c3      	strh	r3, [r0, #6]
 8007370:	3008      	adds	r0, #8
 8007372:	4285      	cmp	r5, r0
 8007374:	d1ec      	bne.n	8007350 <arm_cfft_radix4by2_inverse_q15+0x74>
 8007376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800737a:	4629      	mov	r1, r5
 800737c:	2302      	movs	r3, #2
 800737e:	f000 fa13 	bl	80077a8 <arm_radix4_butterfly_inverse_q15>
 8007382:	4632      	mov	r2, r6
 8007384:	4629      	mov	r1, r5
 8007386:	4638      	mov	r0, r7
 8007388:	2302      	movs	r3, #2
 800738a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800738e:	f000 ba0b 	b.w	80077a8 <arm_radix4_butterfly_inverse_q15>
 8007392:	bf00      	nop
 8007394:	ffff0000 	.word	0xffff0000

08007398 <arm_cfft_q15>:
 8007398:	b5e0      	push	{r5, r6, r7, lr}
 800739a:	2a01      	cmp	r2, #1
 800739c:	460f      	mov	r7, r1
 800739e:	4605      	mov	r5, r0
 80073a0:	8801      	ldrh	r1, [r0, #0]
 80073a2:	461e      	mov	r6, r3
 80073a4:	d02f      	beq.n	8007406 <arm_cfft_q15+0x6e>
 80073a6:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 80073aa:	d026      	beq.n	80073fa <arm_cfft_q15+0x62>
 80073ac:	d908      	bls.n	80073c0 <arm_cfft_q15+0x28>
 80073ae:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 80073b2:	d017      	beq.n	80073e4 <arm_cfft_q15+0x4c>
 80073b4:	d91b      	bls.n	80073ee <arm_cfft_q15+0x56>
 80073b6:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80073ba:	d01e      	beq.n	80073fa <arm_cfft_q15+0x62>
 80073bc:	b93e      	cbnz	r6, 80073ce <arm_cfft_q15+0x36>
 80073be:	bde0      	pop	{r5, r6, r7, pc}
 80073c0:	2940      	cmp	r1, #64	@ 0x40
 80073c2:	d01a      	beq.n	80073fa <arm_cfft_q15+0x62>
 80073c4:	d90a      	bls.n	80073dc <arm_cfft_q15+0x44>
 80073c6:	2980      	cmp	r1, #128	@ 0x80
 80073c8:	d00c      	beq.n	80073e4 <arm_cfft_q15+0x4c>
 80073ca:	2e00      	cmp	r6, #0
 80073cc:	d0f7      	beq.n	80073be <arm_cfft_q15+0x26>
 80073ce:	68aa      	ldr	r2, [r5, #8]
 80073d0:	89a9      	ldrh	r1, [r5, #12]
 80073d2:	4638      	mov	r0, r7
 80073d4:	e8bd 40e0 	ldmia.w	sp!, {r5, r6, r7, lr}
 80073d8:	f000 bb90 	b.w	8007afc <arm_bitreversal_16>
 80073dc:	2910      	cmp	r1, #16
 80073de:	d00c      	beq.n	80073fa <arm_cfft_q15+0x62>
 80073e0:	2920      	cmp	r1, #32
 80073e2:	d1eb      	bne.n	80073bc <arm_cfft_q15+0x24>
 80073e4:	686a      	ldr	r2, [r5, #4]
 80073e6:	4638      	mov	r0, r7
 80073e8:	f7ff ff1a 	bl	8007220 <arm_cfft_radix4by2_q15>
 80073ec:	e7e6      	b.n	80073bc <arm_cfft_q15+0x24>
 80073ee:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80073f2:	d0f7      	beq.n	80073e4 <arm_cfft_q15+0x4c>
 80073f4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80073f8:	d1e0      	bne.n	80073bc <arm_cfft_q15+0x24>
 80073fa:	686a      	ldr	r2, [r5, #4]
 80073fc:	2301      	movs	r3, #1
 80073fe:	4638      	mov	r0, r7
 8007400:	f000 f828 	bl	8007454 <arm_radix4_butterfly_q15>
 8007404:	e7da      	b.n	80073bc <arm_cfft_q15+0x24>
 8007406:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800740a:	d01d      	beq.n	8007448 <arm_cfft_q15+0xb0>
 800740c:	d907      	bls.n	800741e <arm_cfft_q15+0x86>
 800740e:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8007412:	d00e      	beq.n	8007432 <arm_cfft_q15+0x9a>
 8007414:	d912      	bls.n	800743c <arm_cfft_q15+0xa4>
 8007416:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800741a:	d1cf      	bne.n	80073bc <arm_cfft_q15+0x24>
 800741c:	e014      	b.n	8007448 <arm_cfft_q15+0xb0>
 800741e:	2940      	cmp	r1, #64	@ 0x40
 8007420:	d012      	beq.n	8007448 <arm_cfft_q15+0xb0>
 8007422:	d902      	bls.n	800742a <arm_cfft_q15+0x92>
 8007424:	2980      	cmp	r1, #128	@ 0x80
 8007426:	d004      	beq.n	8007432 <arm_cfft_q15+0x9a>
 8007428:	e7c8      	b.n	80073bc <arm_cfft_q15+0x24>
 800742a:	2910      	cmp	r1, #16
 800742c:	d00c      	beq.n	8007448 <arm_cfft_q15+0xb0>
 800742e:	2920      	cmp	r1, #32
 8007430:	d1c4      	bne.n	80073bc <arm_cfft_q15+0x24>
 8007432:	686a      	ldr	r2, [r5, #4]
 8007434:	4638      	mov	r0, r7
 8007436:	f7ff ff51 	bl	80072dc <arm_cfft_radix4by2_inverse_q15>
 800743a:	e7bf      	b.n	80073bc <arm_cfft_q15+0x24>
 800743c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007440:	d0f7      	beq.n	8007432 <arm_cfft_q15+0x9a>
 8007442:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007446:	d1b9      	bne.n	80073bc <arm_cfft_q15+0x24>
 8007448:	686a      	ldr	r2, [r5, #4]
 800744a:	2301      	movs	r3, #1
 800744c:	4638      	mov	r0, r7
 800744e:	f000 f9ab 	bl	80077a8 <arm_radix4_butterfly_inverse_q15>
 8007452:	e7b3      	b.n	80073bc <arm_cfft_q15+0x24>

08007454 <arm_radix4_butterfly_q15>:
 8007454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007458:	b093      	sub	sp, #76	@ 0x4c
 800745a:	f021 0a03 	bic.w	sl, r1, #3
 800745e:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 8007462:	9210      	str	r2, [sp, #64]	@ 0x40
 8007464:	2b01      	cmp	r3, #1
 8007466:	ea4f 0291 	mov.w	r2, r1, lsr #2
 800746a:	eb0c 050a 	add.w	r5, ip, sl
 800746e:	9101      	str	r1, [sp, #4]
 8007470:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007472:	9303      	str	r3, [sp, #12]
 8007474:	4482      	add	sl, r0
 8007476:	9211      	str	r2, [sp, #68]	@ 0x44
 8007478:	f040 8124 	bne.w	80076c4 <arm_radix4_butterfly_q15+0x270>
 800747c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800747e:	f8df e324 	ldr.w	lr, [pc, #804]	@ 80077a4 <arm_radix4_butterfly_q15+0x350>
 8007482:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8007484:	f8cd a008 	str.w	sl, [sp, #8]
 8007488:	4693      	mov	fp, r2
 800748a:	4690      	mov	r8, r2
 800748c:	4657      	mov	r7, sl
 800748e:	2300      	movs	r3, #0
 8007490:	4691      	mov	r9, r2
 8007492:	6830      	ldr	r0, [r6, #0]
 8007494:	f8dc 2000 	ldr.w	r2, [ip]
 8007498:	6839      	ldr	r1, [r7, #0]
 800749a:	fa90 f023 	shadd16	r0, r0, r3
 800749e:	fa91 f123 	shadd16	r1, r1, r3
 80074a2:	fa90 f023 	shadd16	r0, r0, r3
 80074a6:	fa91 fa23 	shadd16	sl, r1, r3
 80074aa:	fa92 f223 	shadd16	r2, r2, r3
 80074ae:	6829      	ldr	r1, [r5, #0]
 80074b0:	fa92 f223 	shadd16	r2, r2, r3
 80074b4:	fa91 f123 	shadd16	r1, r1, r3
 80074b8:	fa90 f412 	qadd16	r4, r0, r2
 80074bc:	fa91 f123 	shadd16	r1, r1, r3
 80074c0:	fa9a f111 	qadd16	r1, sl, r1
 80074c4:	fa94 fa21 	shadd16	sl, r4, r1
 80074c8:	f846 ab04 	str.w	sl, [r6], #4
 80074cc:	fad4 f411 	qsub16	r4, r4, r1
 80074d0:	fad0 f212 	qsub16	r2, r0, r2
 80074d4:	f85b 1b08 	ldr.w	r1, [fp], #8
 80074d8:	fb21 f004 	smuad	r0, r1, r4
 80074dc:	fb41 f114 	smusdx	r1, r1, r4
 80074e0:	ea01 010e 	and.w	r1, r1, lr
 80074e4:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 80074e8:	6838      	ldr	r0, [r7, #0]
 80074ea:	f847 1b04 	str.w	r1, [r7], #4
 80074ee:	fa90 f023 	shadd16	r0, r0, r3
 80074f2:	682c      	ldr	r4, [r5, #0]
 80074f4:	fa90 f023 	shadd16	r0, r0, r3
 80074f8:	fa94 f423 	shadd16	r4, r4, r3
 80074fc:	f859 1b04 	ldr.w	r1, [r9], #4
 8007500:	fa94 f423 	shadd16	r4, r4, r3
 8007504:	fad0 f014 	qsub16	r0, r0, r4
 8007508:	faa2 f410 	qasx	r4, r2, r0
 800750c:	fae2 f210 	qsax	r2, r2, r0
 8007510:	fb21 fa02 	smuad	sl, r1, r2
 8007514:	fb41 f212 	smusdx	r2, r1, r2
 8007518:	ea02 020e 	and.w	r2, r2, lr
 800751c:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 8007520:	f84c 2b04 	str.w	r2, [ip], #4
 8007524:	f858 2b0c 	ldr.w	r2, [r8], #12
 8007528:	fb22 f104 	smuad	r1, r2, r4
 800752c:	fb42 f214 	smusdx	r2, r2, r4
 8007530:	ea02 020e 	and.w	r2, r2, lr
 8007534:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8007538:	f845 2b04 	str.w	r2, [r5], #4
 800753c:	9a02      	ldr	r2, [sp, #8]
 800753e:	42b2      	cmp	r2, r6
 8007540:	d1a7      	bne.n	8007492 <arm_radix4_butterfly_q15+0x3e>
 8007542:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007544:	9b03      	ldr	r3, [sp, #12]
 8007546:	2a04      	cmp	r2, #4
 8007548:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800754c:	f240 8127 	bls.w	800779e <arm_radix4_butterfly_q15+0x34a>
 8007550:	f8df a250 	ldr.w	sl, [pc, #592]	@ 80077a4 <arm_radix4_butterfly_q15+0x350>
 8007554:	920e      	str	r2, [sp, #56]	@ 0x38
 8007556:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007558:	9102      	str	r1, [sp, #8]
 800755a:	4608      	mov	r0, r1
 800755c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8007560:	0889      	lsrs	r1, r1, #2
 8007562:	0092      	lsls	r2, r2, #2
 8007564:	0086      	lsls	r6, r0, #2
 8007566:	9801      	ldr	r0, [sp, #4]
 8007568:	920d      	str	r2, [sp, #52]	@ 0x34
 800756a:	008c      	lsls	r4, r1, #2
 800756c:	009a      	lsls	r2, r3, #2
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	4288      	cmp	r0, r1
 8007572:	940a      	str	r4, [sp, #40]	@ 0x28
 8007574:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007576:	4604      	mov	r4, r0
 8007578:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800757a:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800757c:	910e      	str	r1, [sp, #56]	@ 0x38
 800757e:	bf28      	it	cs
 8007580:	460c      	movcs	r4, r1
 8007582:	e9cd 0305 	strd	r0, r3, [sp, #20]
 8007586:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800758a:	9308      	str	r3, [sp, #32]
 800758c:	9307      	str	r3, [sp, #28]
 800758e:	2300      	movs	r3, #0
 8007590:	940c      	str	r4, [sp, #48]	@ 0x30
 8007592:	9104      	str	r1, [sp, #16]
 8007594:	9209      	str	r2, [sp, #36]	@ 0x24
 8007596:	9303      	str	r3, [sp, #12]
 8007598:	9b08      	ldr	r3, [sp, #32]
 800759a:	9a05      	ldr	r2, [sp, #20]
 800759c:	f8d3 9000 	ldr.w	r9, [r3]
 80075a0:	9b07      	ldr	r3, [sp, #28]
 80075a2:	9f03      	ldr	r7, [sp, #12]
 80075a4:	f8d3 8000 	ldr.w	r8, [r3]
 80075a8:	9b06      	ldr	r3, [sp, #24]
 80075aa:	f8d3 e000 	ldr.w	lr, [r3]
 80075ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075b0:	4615      	mov	r5, r2
 80075b2:	1898      	adds	r0, r3, r2
 80075b4:	9a04      	ldr	r2, [sp, #16]
 80075b6:	4614      	mov	r4, r2
 80075b8:	1899      	adds	r1, r3, r2
 80075ba:	682a      	ldr	r2, [r5, #0]
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	f8d0 b000 	ldr.w	fp, [r0]
 80075c2:	fa92 fc13 	qadd16	ip, r2, r3
 80075c6:	fad2 f213 	qsub16	r2, r2, r3
 80075ca:	680b      	ldr	r3, [r1, #0]
 80075cc:	fa9b f313 	qadd16	r3, fp, r3
 80075d0:	fa9c fb23 	shadd16	fp, ip, r3
 80075d4:	fadc f323 	shsub16	r3, ip, r3
 80075d8:	f04f 0c00 	mov.w	ip, #0
 80075dc:	fa9b fb2c 	shadd16	fp, fp, ip
 80075e0:	f8c5 b000 	str.w	fp, [r5]
 80075e4:	4435      	add	r5, r6
 80075e6:	fb28 fb03 	smuad	fp, r8, r3
 80075ea:	fb48 f313 	smusdx	r3, r8, r3
 80075ee:	ea03 030a 	and.w	r3, r3, sl
 80075f2:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 80075f6:	f8d0 b000 	ldr.w	fp, [r0]
 80075fa:	6003      	str	r3, [r0, #0]
 80075fc:	f8d1 c000 	ldr.w	ip, [r1]
 8007600:	fadb fc1c 	qsub16	ip, fp, ip
 8007604:	4430      	add	r0, r6
 8007606:	faa2 f32c 	shasx	r3, r2, ip
 800760a:	fae2 f22c 	shsax	r2, r2, ip
 800760e:	fb29 fc02 	smuad	ip, r9, r2
 8007612:	fb49 f212 	smusdx	r2, r9, r2
 8007616:	ea02 020a 	and.w	r2, r2, sl
 800761a:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 800761e:	6022      	str	r2, [r4, #0]
 8007620:	4434      	add	r4, r6
 8007622:	fb2e f203 	smuad	r2, lr, r3
 8007626:	fb4e f313 	smusdx	r3, lr, r3
 800762a:	ea03 030a 	and.w	r3, r3, sl
 800762e:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8007632:	9a02      	ldr	r2, [sp, #8]
 8007634:	600b      	str	r3, [r1, #0]
 8007636:	9b01      	ldr	r3, [sp, #4]
 8007638:	4417      	add	r7, r2
 800763a:	42bb      	cmp	r3, r7
 800763c:	4431      	add	r1, r6
 800763e:	d8bc      	bhi.n	80075ba <arm_radix4_butterfly_q15+0x166>
 8007640:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8007644:	440a      	add	r2, r1
 8007646:	9208      	str	r2, [sp, #32]
 8007648:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800764a:	9a07      	ldr	r2, [sp, #28]
 800764c:	9b03      	ldr	r3, [sp, #12]
 800764e:	440a      	add	r2, r1
 8007650:	9207      	str	r2, [sp, #28]
 8007652:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007654:	9a06      	ldr	r2, [sp, #24]
 8007656:	440a      	add	r2, r1
 8007658:	9206      	str	r2, [sp, #24]
 800765a:	9a05      	ldr	r2, [sp, #20]
 800765c:	3204      	adds	r2, #4
 800765e:	9205      	str	r2, [sp, #20]
 8007660:	9a04      	ldr	r2, [sp, #16]
 8007662:	3204      	adds	r2, #4
 8007664:	9204      	str	r2, [sp, #16]
 8007666:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007668:	3301      	adds	r3, #1
 800766a:	4293      	cmp	r3, r2
 800766c:	9303      	str	r3, [sp, #12]
 800766e:	d393      	bcc.n	8007598 <arm_radix4_butterfly_q15+0x144>
 8007670:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007672:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007674:	2a04      	cmp	r2, #4
 8007676:	f63f af6e 	bhi.w	8007556 <arm_radix4_butterfly_q15+0x102>
 800767a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800767c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800767e:	689d      	ldr	r5, [r3, #8]
 8007680:	68de      	ldr	r6, [r3, #12]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	6859      	ldr	r1, [r3, #4]
 8007686:	fa92 f015 	qadd16	r0, r2, r5
 800768a:	3c01      	subs	r4, #1
 800768c:	fad2 f215 	qsub16	r2, r2, r5
 8007690:	f103 0310 	add.w	r3, r3, #16
 8007694:	fa91 f516 	qadd16	r5, r1, r6
 8007698:	fad1 f116 	qsub16	r1, r1, r6
 800769c:	fa90 f625 	shadd16	r6, r0, r5
 80076a0:	fad0 f025 	shsub16	r0, r0, r5
 80076a4:	f843 6c10 	str.w	r6, [r3, #-16]
 80076a8:	f843 0c0c 	str.w	r0, [r3, #-12]
 80076ac:	fae2 f021 	shsax	r0, r2, r1
 80076b0:	faa2 f221 	shasx	r2, r2, r1
 80076b4:	f843 0c08 	str.w	r0, [r3, #-8]
 80076b8:	f843 2c04 	str.w	r2, [r3, #-4]
 80076bc:	d1df      	bne.n	800767e <arm_radix4_butterfly_q15+0x22a>
 80076be:	b013      	add	sp, #76	@ 0x4c
 80076c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076c4:	2400      	movs	r4, #0
 80076c6:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 80077a4 <arm_radix4_butterfly_q15+0x350>
 80076ca:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80076cc:	4623      	mov	r3, r4
 80076ce:	4680      	mov	r8, r0
 80076d0:	4691      	mov	r9, r2
 80076d2:	f8d8 0000 	ldr.w	r0, [r8]
 80076d6:	f8dc 2000 	ldr.w	r2, [ip]
 80076da:	f8da 1000 	ldr.w	r1, [sl]
 80076de:	fa90 f023 	shadd16	r0, r0, r3
 80076e2:	fa91 f123 	shadd16	r1, r1, r3
 80076e6:	fa90 f023 	shadd16	r0, r0, r3
 80076ea:	fa91 fb23 	shadd16	fp, r1, r3
 80076ee:	fa92 f223 	shadd16	r2, r2, r3
 80076f2:	6829      	ldr	r1, [r5, #0]
 80076f4:	fa92 f223 	shadd16	r2, r2, r3
 80076f8:	fa91 f123 	shadd16	r1, r1, r3
 80076fc:	fa90 f612 	qadd16	r6, r0, r2
 8007700:	fa91 f123 	shadd16	r1, r1, r3
 8007704:	fa9b f111 	qadd16	r1, fp, r1
 8007708:	fa96 fb21 	shadd16	fp, r6, r1
 800770c:	f848 bb04 	str.w	fp, [r8], #4
 8007710:	fad6 f611 	qsub16	r6, r6, r1
 8007714:	fad0 f212 	qsub16	r2, r0, r2
 8007718:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 800771c:	fb21 f006 	smuad	r0, r1, r6
 8007720:	fb41 f116 	smusdx	r1, r1, r6
 8007724:	ea01 010e 	and.w	r1, r1, lr
 8007728:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 800772c:	f8da 0000 	ldr.w	r0, [sl]
 8007730:	f84a 1b04 	str.w	r1, [sl], #4
 8007734:	fa90 f023 	shadd16	r0, r0, r3
 8007738:	682e      	ldr	r6, [r5, #0]
 800773a:	fa90 f023 	shadd16	r0, r0, r3
 800773e:	fa96 f623 	shadd16	r6, r6, r3
 8007742:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8007746:	fa96 f623 	shadd16	r6, r6, r3
 800774a:	fad0 f016 	qsub16	r0, r0, r6
 800774e:	faa2 f610 	qasx	r6, r2, r0
 8007752:	fae2 f210 	qsax	r2, r2, r0
 8007756:	fb21 fb02 	smuad	fp, r1, r2
 800775a:	fb41 f212 	smusdx	r2, r1, r2
 800775e:	ea02 020e 	and.w	r2, r2, lr
 8007762:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 8007766:	f84c 2b04 	str.w	r2, [ip], #4
 800776a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800776e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8007772:	fb22 f106 	smuad	r1, r2, r6
 8007776:	fb42 f216 	smusdx	r2, r2, r6
 800777a:	ea02 020e 	and.w	r2, r2, lr
 800777e:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8007782:	f845 2b04 	str.w	r2, [r5], #4
 8007786:	9a03      	ldr	r2, [sp, #12]
 8007788:	f1b9 0901 	subs.w	r9, r9, #1
 800778c:	4414      	add	r4, r2
 800778e:	d1a0      	bne.n	80076d2 <arm_radix4_butterfly_q15+0x27e>
 8007790:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007792:	9b03      	ldr	r3, [sp, #12]
 8007794:	2a04      	cmp	r2, #4
 8007796:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800779a:	f63f aed9 	bhi.w	8007550 <arm_radix4_butterfly_q15+0xfc>
 800779e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077a0:	4614      	mov	r4, r2
 80077a2:	e76c      	b.n	800767e <arm_radix4_butterfly_q15+0x22a>
 80077a4:	ffff0000 	.word	0xffff0000

080077a8 <arm_radix4_butterfly_inverse_q15>:
 80077a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ac:	b093      	sub	sp, #76	@ 0x4c
 80077ae:	f021 0a03 	bic.w	sl, r1, #3
 80077b2:	eb00 0c4a 	add.w	ip, r0, sl, lsl #1
 80077b6:	9210      	str	r2, [sp, #64]	@ 0x40
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	ea4f 0291 	mov.w	r2, r1, lsr #2
 80077be:	eb0c 050a 	add.w	r5, ip, sl
 80077c2:	9101      	str	r1, [sp, #4]
 80077c4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80077c6:	9303      	str	r3, [sp, #12]
 80077c8:	4482      	add	sl, r0
 80077ca:	9211      	str	r2, [sp, #68]	@ 0x44
 80077cc:	f040 8124 	bne.w	8007a18 <arm_radix4_butterfly_inverse_q15+0x270>
 80077d0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80077d2:	f8df e324 	ldr.w	lr, [pc, #804]	@ 8007af8 <arm_radix4_butterfly_inverse_q15+0x350>
 80077d6:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80077d8:	f8cd a008 	str.w	sl, [sp, #8]
 80077dc:	4693      	mov	fp, r2
 80077de:	4690      	mov	r8, r2
 80077e0:	4657      	mov	r7, sl
 80077e2:	2300      	movs	r3, #0
 80077e4:	4691      	mov	r9, r2
 80077e6:	6830      	ldr	r0, [r6, #0]
 80077e8:	f8dc 2000 	ldr.w	r2, [ip]
 80077ec:	6839      	ldr	r1, [r7, #0]
 80077ee:	fa90 f023 	shadd16	r0, r0, r3
 80077f2:	fa91 f123 	shadd16	r1, r1, r3
 80077f6:	fa90 f023 	shadd16	r0, r0, r3
 80077fa:	fa91 fa23 	shadd16	sl, r1, r3
 80077fe:	fa92 f223 	shadd16	r2, r2, r3
 8007802:	6829      	ldr	r1, [r5, #0]
 8007804:	fa92 f223 	shadd16	r2, r2, r3
 8007808:	fa91 f123 	shadd16	r1, r1, r3
 800780c:	fa90 f412 	qadd16	r4, r0, r2
 8007810:	fa91 f123 	shadd16	r1, r1, r3
 8007814:	fa9a f111 	qadd16	r1, sl, r1
 8007818:	fa94 fa21 	shadd16	sl, r4, r1
 800781c:	f846 ab04 	str.w	sl, [r6], #4
 8007820:	fad4 f411 	qsub16	r4, r4, r1
 8007824:	fad0 f212 	qsub16	r2, r0, r2
 8007828:	f85b 1b08 	ldr.w	r1, [fp], #8
 800782c:	fb41 f004 	smusd	r0, r1, r4
 8007830:	fb21 f114 	smuadx	r1, r1, r4
 8007834:	ea01 010e 	and.w	r1, r1, lr
 8007838:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 800783c:	6838      	ldr	r0, [r7, #0]
 800783e:	f847 1b04 	str.w	r1, [r7], #4
 8007842:	fa90 f023 	shadd16	r0, r0, r3
 8007846:	682c      	ldr	r4, [r5, #0]
 8007848:	fa90 f023 	shadd16	r0, r0, r3
 800784c:	fa94 f423 	shadd16	r4, r4, r3
 8007850:	f859 1b04 	ldr.w	r1, [r9], #4
 8007854:	fa94 f423 	shadd16	r4, r4, r3
 8007858:	fad0 f014 	qsub16	r0, r0, r4
 800785c:	fae2 f410 	qsax	r4, r2, r0
 8007860:	faa2 f210 	qasx	r2, r2, r0
 8007864:	fb41 fa02 	smusd	sl, r1, r2
 8007868:	fb21 f212 	smuadx	r2, r1, r2
 800786c:	ea02 020e 	and.w	r2, r2, lr
 8007870:	ea42 421a 	orr.w	r2, r2, sl, lsr #16
 8007874:	f84c 2b04 	str.w	r2, [ip], #4
 8007878:	f858 2b0c 	ldr.w	r2, [r8], #12
 800787c:	fb42 f104 	smusd	r1, r2, r4
 8007880:	fb22 f214 	smuadx	r2, r2, r4
 8007884:	ea02 020e 	and.w	r2, r2, lr
 8007888:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 800788c:	f845 2b04 	str.w	r2, [r5], #4
 8007890:	9a02      	ldr	r2, [sp, #8]
 8007892:	42b2      	cmp	r2, r6
 8007894:	d1a7      	bne.n	80077e6 <arm_radix4_butterfly_inverse_q15+0x3e>
 8007896:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007898:	9b03      	ldr	r3, [sp, #12]
 800789a:	2a04      	cmp	r2, #4
 800789c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80078a0:	f240 8127 	bls.w	8007af2 <arm_radix4_butterfly_inverse_q15+0x34a>
 80078a4:	f8df a250 	ldr.w	sl, [pc, #592]	@ 8007af8 <arm_radix4_butterfly_inverse_q15+0x350>
 80078a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80078aa:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80078ac:	9102      	str	r1, [sp, #8]
 80078ae:	4608      	mov	r0, r1
 80078b0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80078b4:	0889      	lsrs	r1, r1, #2
 80078b6:	0092      	lsls	r2, r2, #2
 80078b8:	0086      	lsls	r6, r0, #2
 80078ba:	9801      	ldr	r0, [sp, #4]
 80078bc:	920d      	str	r2, [sp, #52]	@ 0x34
 80078be:	008c      	lsls	r4, r1, #2
 80078c0:	009a      	lsls	r2, r3, #2
 80078c2:	00db      	lsls	r3, r3, #3
 80078c4:	4288      	cmp	r0, r1
 80078c6:	940a      	str	r4, [sp, #40]	@ 0x28
 80078c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078ca:	4604      	mov	r4, r0
 80078cc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80078ce:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 80078d0:	910e      	str	r1, [sp, #56]	@ 0x38
 80078d2:	bf28      	it	cs
 80078d4:	460c      	movcs	r4, r1
 80078d6:	e9cd 0305 	strd	r0, r3, [sp, #20]
 80078da:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80078de:	9308      	str	r3, [sp, #32]
 80078e0:	9307      	str	r3, [sp, #28]
 80078e2:	2300      	movs	r3, #0
 80078e4:	940c      	str	r4, [sp, #48]	@ 0x30
 80078e6:	9104      	str	r1, [sp, #16]
 80078e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80078ea:	9303      	str	r3, [sp, #12]
 80078ec:	9b08      	ldr	r3, [sp, #32]
 80078ee:	9a05      	ldr	r2, [sp, #20]
 80078f0:	f8d3 9000 	ldr.w	r9, [r3]
 80078f4:	9b07      	ldr	r3, [sp, #28]
 80078f6:	9f03      	ldr	r7, [sp, #12]
 80078f8:	f8d3 8000 	ldr.w	r8, [r3]
 80078fc:	9b06      	ldr	r3, [sp, #24]
 80078fe:	f8d3 e000 	ldr.w	lr, [r3]
 8007902:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007904:	4615      	mov	r5, r2
 8007906:	1898      	adds	r0, r3, r2
 8007908:	9a04      	ldr	r2, [sp, #16]
 800790a:	4614      	mov	r4, r2
 800790c:	1899      	adds	r1, r3, r2
 800790e:	682a      	ldr	r2, [r5, #0]
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	f8d0 b000 	ldr.w	fp, [r0]
 8007916:	fa92 fc13 	qadd16	ip, r2, r3
 800791a:	fad2 f213 	qsub16	r2, r2, r3
 800791e:	680b      	ldr	r3, [r1, #0]
 8007920:	fa9b f313 	qadd16	r3, fp, r3
 8007924:	fa9c fb23 	shadd16	fp, ip, r3
 8007928:	fadc f323 	shsub16	r3, ip, r3
 800792c:	f04f 0c00 	mov.w	ip, #0
 8007930:	fa9b fb2c 	shadd16	fp, fp, ip
 8007934:	f8c5 b000 	str.w	fp, [r5]
 8007938:	4435      	add	r5, r6
 800793a:	fb48 fb03 	smusd	fp, r8, r3
 800793e:	fb28 f313 	smuadx	r3, r8, r3
 8007942:	ea03 030a 	and.w	r3, r3, sl
 8007946:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
 800794a:	f8d0 b000 	ldr.w	fp, [r0]
 800794e:	6003      	str	r3, [r0, #0]
 8007950:	f8d1 c000 	ldr.w	ip, [r1]
 8007954:	fadb fc1c 	qsub16	ip, fp, ip
 8007958:	4430      	add	r0, r6
 800795a:	fae2 f32c 	shsax	r3, r2, ip
 800795e:	faa2 f22c 	shasx	r2, r2, ip
 8007962:	fb49 fc02 	smusd	ip, r9, r2
 8007966:	fb29 f212 	smuadx	r2, r9, r2
 800796a:	ea02 020a 	and.w	r2, r2, sl
 800796e:	ea42 421c 	orr.w	r2, r2, ip, lsr #16
 8007972:	6022      	str	r2, [r4, #0]
 8007974:	4434      	add	r4, r6
 8007976:	fb4e f203 	smusd	r2, lr, r3
 800797a:	fb2e f313 	smuadx	r3, lr, r3
 800797e:	ea03 030a 	and.w	r3, r3, sl
 8007982:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
 8007986:	9a02      	ldr	r2, [sp, #8]
 8007988:	600b      	str	r3, [r1, #0]
 800798a:	9b01      	ldr	r3, [sp, #4]
 800798c:	4417      	add	r7, r2
 800798e:	42bb      	cmp	r3, r7
 8007990:	4431      	add	r1, r6
 8007992:	d8bc      	bhi.n	800790e <arm_radix4_butterfly_inverse_q15+0x166>
 8007994:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8007998:	440a      	add	r2, r1
 800799a:	9208      	str	r2, [sp, #32]
 800799c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800799e:	9a07      	ldr	r2, [sp, #28]
 80079a0:	9b03      	ldr	r3, [sp, #12]
 80079a2:	440a      	add	r2, r1
 80079a4:	9207      	str	r2, [sp, #28]
 80079a6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80079a8:	9a06      	ldr	r2, [sp, #24]
 80079aa:	440a      	add	r2, r1
 80079ac:	9206      	str	r2, [sp, #24]
 80079ae:	9a05      	ldr	r2, [sp, #20]
 80079b0:	3204      	adds	r2, #4
 80079b2:	9205      	str	r2, [sp, #20]
 80079b4:	9a04      	ldr	r2, [sp, #16]
 80079b6:	3204      	adds	r2, #4
 80079b8:	9204      	str	r2, [sp, #16]
 80079ba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80079bc:	3301      	adds	r3, #1
 80079be:	4293      	cmp	r3, r2
 80079c0:	9303      	str	r3, [sp, #12]
 80079c2:	d393      	bcc.n	80078ec <arm_radix4_butterfly_inverse_q15+0x144>
 80079c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079c8:	2a04      	cmp	r2, #4
 80079ca:	f63f af6e 	bhi.w	80078aa <arm_radix4_butterfly_inverse_q15+0x102>
 80079ce:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80079d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079d2:	689d      	ldr	r5, [r3, #8]
 80079d4:	68de      	ldr	r6, [r3, #12]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	6859      	ldr	r1, [r3, #4]
 80079da:	fa92 f015 	qadd16	r0, r2, r5
 80079de:	3c01      	subs	r4, #1
 80079e0:	fad2 f215 	qsub16	r2, r2, r5
 80079e4:	f103 0310 	add.w	r3, r3, #16
 80079e8:	fa91 f516 	qadd16	r5, r1, r6
 80079ec:	fad1 f116 	qsub16	r1, r1, r6
 80079f0:	fa90 f625 	shadd16	r6, r0, r5
 80079f4:	fad0 f025 	shsub16	r0, r0, r5
 80079f8:	f843 6c10 	str.w	r6, [r3, #-16]
 80079fc:	f843 0c0c 	str.w	r0, [r3, #-12]
 8007a00:	faa2 f021 	shasx	r0, r2, r1
 8007a04:	fae2 f221 	shsax	r2, r2, r1
 8007a08:	f843 0c08 	str.w	r0, [r3, #-8]
 8007a0c:	f843 2c04 	str.w	r2, [r3, #-4]
 8007a10:	d1df      	bne.n	80079d2 <arm_radix4_butterfly_inverse_q15+0x22a>
 8007a12:	b013      	add	sp, #76	@ 0x4c
 8007a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a18:	2400      	movs	r4, #0
 8007a1a:	f8df e0dc 	ldr.w	lr, [pc, #220]	@ 8007af8 <arm_radix4_butterfly_inverse_q15+0x350>
 8007a1e:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8007a20:	4623      	mov	r3, r4
 8007a22:	4680      	mov	r8, r0
 8007a24:	4691      	mov	r9, r2
 8007a26:	f8d8 0000 	ldr.w	r0, [r8]
 8007a2a:	f8dc 2000 	ldr.w	r2, [ip]
 8007a2e:	f8da 1000 	ldr.w	r1, [sl]
 8007a32:	fa90 f023 	shadd16	r0, r0, r3
 8007a36:	fa91 f123 	shadd16	r1, r1, r3
 8007a3a:	fa90 f023 	shadd16	r0, r0, r3
 8007a3e:	fa91 fb23 	shadd16	fp, r1, r3
 8007a42:	fa92 f223 	shadd16	r2, r2, r3
 8007a46:	6829      	ldr	r1, [r5, #0]
 8007a48:	fa92 f223 	shadd16	r2, r2, r3
 8007a4c:	fa91 f123 	shadd16	r1, r1, r3
 8007a50:	fa90 f612 	qadd16	r6, r0, r2
 8007a54:	fa91 f123 	shadd16	r1, r1, r3
 8007a58:	fa9b f111 	qadd16	r1, fp, r1
 8007a5c:	fa96 fb21 	shadd16	fp, r6, r1
 8007a60:	f848 bb04 	str.w	fp, [r8], #4
 8007a64:	fad6 f611 	qsub16	r6, r6, r1
 8007a68:	fad0 f212 	qsub16	r2, r0, r2
 8007a6c:	f857 1034 	ldr.w	r1, [r7, r4, lsl #3]
 8007a70:	fb41 f006 	smusd	r0, r1, r6
 8007a74:	fb21 f116 	smuadx	r1, r1, r6
 8007a78:	ea01 010e 	and.w	r1, r1, lr
 8007a7c:	ea41 4110 	orr.w	r1, r1, r0, lsr #16
 8007a80:	f8da 0000 	ldr.w	r0, [sl]
 8007a84:	f84a 1b04 	str.w	r1, [sl], #4
 8007a88:	fa90 f023 	shadd16	r0, r0, r3
 8007a8c:	682e      	ldr	r6, [r5, #0]
 8007a8e:	fa90 f023 	shadd16	r0, r0, r3
 8007a92:	fa96 f623 	shadd16	r6, r6, r3
 8007a96:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8007a9a:	fa96 f623 	shadd16	r6, r6, r3
 8007a9e:	fad0 f016 	qsub16	r0, r0, r6
 8007aa2:	fae2 f610 	qsax	r6, r2, r0
 8007aa6:	faa2 f210 	qasx	r2, r2, r0
 8007aaa:	fb41 fb02 	smusd	fp, r1, r2
 8007aae:	fb21 f212 	smuadx	r2, r1, r2
 8007ab2:	ea02 020e 	and.w	r2, r2, lr
 8007ab6:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
 8007aba:	f84c 2b04 	str.w	r2, [ip], #4
 8007abe:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8007ac2:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8007ac6:	fb42 f106 	smusd	r1, r2, r6
 8007aca:	fb22 f216 	smuadx	r2, r2, r6
 8007ace:	ea02 020e 	and.w	r2, r2, lr
 8007ad2:	ea42 4211 	orr.w	r2, r2, r1, lsr #16
 8007ad6:	f845 2b04 	str.w	r2, [r5], #4
 8007ada:	9a03      	ldr	r2, [sp, #12]
 8007adc:	f1b9 0901 	subs.w	r9, r9, #1
 8007ae0:	4414      	add	r4, r2
 8007ae2:	d1a0      	bne.n	8007a26 <arm_radix4_butterfly_inverse_q15+0x27e>
 8007ae4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007ae6:	9b03      	ldr	r3, [sp, #12]
 8007ae8:	2a04      	cmp	r2, #4
 8007aea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007aee:	f63f aed9 	bhi.w	80078a4 <arm_radix4_butterfly_inverse_q15+0xfc>
 8007af2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007af4:	4614      	mov	r4, r2
 8007af6:	e76c      	b.n	80079d2 <arm_radix4_butterfly_inverse_q15+0x22a>
 8007af8:	ffff0000 	.word	0xffff0000

08007afc <arm_bitreversal_16>:
 8007afc:	b1f1      	cbz	r1, 8007b3c <arm_bitreversal_16+0x40>
 8007afe:	b4f0      	push	{r4, r5, r6, r7}
 8007b00:	2400      	movs	r4, #0
 8007b02:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 8007b06:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 8007b0a:	886d      	ldrh	r5, [r5, #2]
 8007b0c:	08ad      	lsrs	r5, r5, #2
 8007b0e:	089b      	lsrs	r3, r3, #2
 8007b10:	f830 6015 	ldrh.w	r6, [r0, r5, lsl #1]
 8007b14:	f830 7013 	ldrh.w	r7, [r0, r3, lsl #1]
 8007b18:	f820 6013 	strh.w	r6, [r0, r3, lsl #1]
 8007b1c:	006e      	lsls	r6, r5, #1
 8007b1e:	005b      	lsls	r3, r3, #1
 8007b20:	f820 7015 	strh.w	r7, [r0, r5, lsl #1]
 8007b24:	3302      	adds	r3, #2
 8007b26:	1cb5      	adds	r5, r6, #2
 8007b28:	3402      	adds	r4, #2
 8007b2a:	b2a4      	uxth	r4, r4
 8007b2c:	5ac6      	ldrh	r6, [r0, r3]
 8007b2e:	5b47      	ldrh	r7, [r0, r5]
 8007b30:	52c7      	strh	r7, [r0, r3]
 8007b32:	42a1      	cmp	r1, r4
 8007b34:	5346      	strh	r6, [r0, r5]
 8007b36:	d8e4      	bhi.n	8007b02 <arm_bitreversal_16+0x6>
 8007b38:	bcf0      	pop	{r4, r5, r6, r7}
 8007b3a:	4770      	bx	lr
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop

08007b40 <__cvt>:
 8007b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b44:	ec57 6b10 	vmov	r6, r7, d0
 8007b48:	2f00      	cmp	r7, #0
 8007b4a:	460c      	mov	r4, r1
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	463b      	mov	r3, r7
 8007b50:	bfbb      	ittet	lt
 8007b52:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007b56:	461f      	movlt	r7, r3
 8007b58:	2300      	movge	r3, #0
 8007b5a:	232d      	movlt	r3, #45	@ 0x2d
 8007b5c:	700b      	strb	r3, [r1, #0]
 8007b5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b60:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007b64:	4691      	mov	r9, r2
 8007b66:	f023 0820 	bic.w	r8, r3, #32
 8007b6a:	bfbc      	itt	lt
 8007b6c:	4632      	movlt	r2, r6
 8007b6e:	4616      	movlt	r6, r2
 8007b70:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007b74:	d005      	beq.n	8007b82 <__cvt+0x42>
 8007b76:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007b7a:	d100      	bne.n	8007b7e <__cvt+0x3e>
 8007b7c:	3401      	adds	r4, #1
 8007b7e:	2102      	movs	r1, #2
 8007b80:	e000      	b.n	8007b84 <__cvt+0x44>
 8007b82:	2103      	movs	r1, #3
 8007b84:	ab03      	add	r3, sp, #12
 8007b86:	9301      	str	r3, [sp, #4]
 8007b88:	ab02      	add	r3, sp, #8
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	ec47 6b10 	vmov	d0, r6, r7
 8007b90:	4653      	mov	r3, sl
 8007b92:	4622      	mov	r2, r4
 8007b94:	f000 fefc 	bl	8008990 <_dtoa_r>
 8007b98:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007b9c:	4605      	mov	r5, r0
 8007b9e:	d119      	bne.n	8007bd4 <__cvt+0x94>
 8007ba0:	f019 0f01 	tst.w	r9, #1
 8007ba4:	d00e      	beq.n	8007bc4 <__cvt+0x84>
 8007ba6:	eb00 0904 	add.w	r9, r0, r4
 8007baa:	2200      	movs	r2, #0
 8007bac:	2300      	movs	r3, #0
 8007bae:	4630      	mov	r0, r6
 8007bb0:	4639      	mov	r1, r7
 8007bb2:	f7f8 ff99 	bl	8000ae8 <__aeabi_dcmpeq>
 8007bb6:	b108      	cbz	r0, 8007bbc <__cvt+0x7c>
 8007bb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8007bbc:	2230      	movs	r2, #48	@ 0x30
 8007bbe:	9b03      	ldr	r3, [sp, #12]
 8007bc0:	454b      	cmp	r3, r9
 8007bc2:	d31e      	bcc.n	8007c02 <__cvt+0xc2>
 8007bc4:	9b03      	ldr	r3, [sp, #12]
 8007bc6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bc8:	1b5b      	subs	r3, r3, r5
 8007bca:	4628      	mov	r0, r5
 8007bcc:	6013      	str	r3, [r2, #0]
 8007bce:	b004      	add	sp, #16
 8007bd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007bd8:	eb00 0904 	add.w	r9, r0, r4
 8007bdc:	d1e5      	bne.n	8007baa <__cvt+0x6a>
 8007bde:	7803      	ldrb	r3, [r0, #0]
 8007be0:	2b30      	cmp	r3, #48	@ 0x30
 8007be2:	d10a      	bne.n	8007bfa <__cvt+0xba>
 8007be4:	2200      	movs	r2, #0
 8007be6:	2300      	movs	r3, #0
 8007be8:	4630      	mov	r0, r6
 8007bea:	4639      	mov	r1, r7
 8007bec:	f7f8 ff7c 	bl	8000ae8 <__aeabi_dcmpeq>
 8007bf0:	b918      	cbnz	r0, 8007bfa <__cvt+0xba>
 8007bf2:	f1c4 0401 	rsb	r4, r4, #1
 8007bf6:	f8ca 4000 	str.w	r4, [sl]
 8007bfa:	f8da 3000 	ldr.w	r3, [sl]
 8007bfe:	4499      	add	r9, r3
 8007c00:	e7d3      	b.n	8007baa <__cvt+0x6a>
 8007c02:	1c59      	adds	r1, r3, #1
 8007c04:	9103      	str	r1, [sp, #12]
 8007c06:	701a      	strb	r2, [r3, #0]
 8007c08:	e7d9      	b.n	8007bbe <__cvt+0x7e>

08007c0a <__exponent>:
 8007c0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c0c:	2900      	cmp	r1, #0
 8007c0e:	bfba      	itte	lt
 8007c10:	4249      	neglt	r1, r1
 8007c12:	232d      	movlt	r3, #45	@ 0x2d
 8007c14:	232b      	movge	r3, #43	@ 0x2b
 8007c16:	2909      	cmp	r1, #9
 8007c18:	7002      	strb	r2, [r0, #0]
 8007c1a:	7043      	strb	r3, [r0, #1]
 8007c1c:	dd29      	ble.n	8007c72 <__exponent+0x68>
 8007c1e:	f10d 0307 	add.w	r3, sp, #7
 8007c22:	461d      	mov	r5, r3
 8007c24:	270a      	movs	r7, #10
 8007c26:	461a      	mov	r2, r3
 8007c28:	fbb1 f6f7 	udiv	r6, r1, r7
 8007c2c:	fb07 1416 	mls	r4, r7, r6, r1
 8007c30:	3430      	adds	r4, #48	@ 0x30
 8007c32:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007c36:	460c      	mov	r4, r1
 8007c38:	2c63      	cmp	r4, #99	@ 0x63
 8007c3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007c3e:	4631      	mov	r1, r6
 8007c40:	dcf1      	bgt.n	8007c26 <__exponent+0x1c>
 8007c42:	3130      	adds	r1, #48	@ 0x30
 8007c44:	1e94      	subs	r4, r2, #2
 8007c46:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007c4a:	1c41      	adds	r1, r0, #1
 8007c4c:	4623      	mov	r3, r4
 8007c4e:	42ab      	cmp	r3, r5
 8007c50:	d30a      	bcc.n	8007c68 <__exponent+0x5e>
 8007c52:	f10d 0309 	add.w	r3, sp, #9
 8007c56:	1a9b      	subs	r3, r3, r2
 8007c58:	42ac      	cmp	r4, r5
 8007c5a:	bf88      	it	hi
 8007c5c:	2300      	movhi	r3, #0
 8007c5e:	3302      	adds	r3, #2
 8007c60:	4403      	add	r3, r0
 8007c62:	1a18      	subs	r0, r3, r0
 8007c64:	b003      	add	sp, #12
 8007c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c68:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007c6c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007c70:	e7ed      	b.n	8007c4e <__exponent+0x44>
 8007c72:	2330      	movs	r3, #48	@ 0x30
 8007c74:	3130      	adds	r1, #48	@ 0x30
 8007c76:	7083      	strb	r3, [r0, #2]
 8007c78:	70c1      	strb	r1, [r0, #3]
 8007c7a:	1d03      	adds	r3, r0, #4
 8007c7c:	e7f1      	b.n	8007c62 <__exponent+0x58>
	...

08007c80 <_printf_float>:
 8007c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c84:	b08d      	sub	sp, #52	@ 0x34
 8007c86:	460c      	mov	r4, r1
 8007c88:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007c8c:	4616      	mov	r6, r2
 8007c8e:	461f      	mov	r7, r3
 8007c90:	4605      	mov	r5, r0
 8007c92:	f000 fd6d 	bl	8008770 <_localeconv_r>
 8007c96:	6803      	ldr	r3, [r0, #0]
 8007c98:	9304      	str	r3, [sp, #16]
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7f8 faf8 	bl	8000290 <strlen>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8007ca8:	9005      	str	r0, [sp, #20]
 8007caa:	3307      	adds	r3, #7
 8007cac:	f023 0307 	bic.w	r3, r3, #7
 8007cb0:	f103 0208 	add.w	r2, r3, #8
 8007cb4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007cb8:	f8d4 b000 	ldr.w	fp, [r4]
 8007cbc:	f8c8 2000 	str.w	r2, [r8]
 8007cc0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007cc4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007cc8:	9307      	str	r3, [sp, #28]
 8007cca:	f8cd 8018 	str.w	r8, [sp, #24]
 8007cce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007cd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cd6:	4b9c      	ldr	r3, [pc, #624]	@ (8007f48 <_printf_float+0x2c8>)
 8007cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cdc:	f7f8 ff36 	bl	8000b4c <__aeabi_dcmpun>
 8007ce0:	bb70      	cbnz	r0, 8007d40 <_printf_float+0xc0>
 8007ce2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ce6:	4b98      	ldr	r3, [pc, #608]	@ (8007f48 <_printf_float+0x2c8>)
 8007ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cec:	f7f8 ff10 	bl	8000b10 <__aeabi_dcmple>
 8007cf0:	bb30      	cbnz	r0, 8007d40 <_printf_float+0xc0>
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	4640      	mov	r0, r8
 8007cf8:	4649      	mov	r1, r9
 8007cfa:	f7f8 feff 	bl	8000afc <__aeabi_dcmplt>
 8007cfe:	b110      	cbz	r0, 8007d06 <_printf_float+0x86>
 8007d00:	232d      	movs	r3, #45	@ 0x2d
 8007d02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d06:	4a91      	ldr	r2, [pc, #580]	@ (8007f4c <_printf_float+0x2cc>)
 8007d08:	4b91      	ldr	r3, [pc, #580]	@ (8007f50 <_printf_float+0x2d0>)
 8007d0a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007d0e:	bf8c      	ite	hi
 8007d10:	4690      	movhi	r8, r2
 8007d12:	4698      	movls	r8, r3
 8007d14:	2303      	movs	r3, #3
 8007d16:	6123      	str	r3, [r4, #16]
 8007d18:	f02b 0304 	bic.w	r3, fp, #4
 8007d1c:	6023      	str	r3, [r4, #0]
 8007d1e:	f04f 0900 	mov.w	r9, #0
 8007d22:	9700      	str	r7, [sp, #0]
 8007d24:	4633      	mov	r3, r6
 8007d26:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007d28:	4621      	mov	r1, r4
 8007d2a:	4628      	mov	r0, r5
 8007d2c:	f000 f9d2 	bl	80080d4 <_printf_common>
 8007d30:	3001      	adds	r0, #1
 8007d32:	f040 808d 	bne.w	8007e50 <_printf_float+0x1d0>
 8007d36:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3a:	b00d      	add	sp, #52	@ 0x34
 8007d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d40:	4642      	mov	r2, r8
 8007d42:	464b      	mov	r3, r9
 8007d44:	4640      	mov	r0, r8
 8007d46:	4649      	mov	r1, r9
 8007d48:	f7f8 ff00 	bl	8000b4c <__aeabi_dcmpun>
 8007d4c:	b140      	cbz	r0, 8007d60 <_printf_float+0xe0>
 8007d4e:	464b      	mov	r3, r9
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	bfbc      	itt	lt
 8007d54:	232d      	movlt	r3, #45	@ 0x2d
 8007d56:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007d5a:	4a7e      	ldr	r2, [pc, #504]	@ (8007f54 <_printf_float+0x2d4>)
 8007d5c:	4b7e      	ldr	r3, [pc, #504]	@ (8007f58 <_printf_float+0x2d8>)
 8007d5e:	e7d4      	b.n	8007d0a <_printf_float+0x8a>
 8007d60:	6863      	ldr	r3, [r4, #4]
 8007d62:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007d66:	9206      	str	r2, [sp, #24]
 8007d68:	1c5a      	adds	r2, r3, #1
 8007d6a:	d13b      	bne.n	8007de4 <_printf_float+0x164>
 8007d6c:	2306      	movs	r3, #6
 8007d6e:	6063      	str	r3, [r4, #4]
 8007d70:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007d74:	2300      	movs	r3, #0
 8007d76:	6022      	str	r2, [r4, #0]
 8007d78:	9303      	str	r3, [sp, #12]
 8007d7a:	ab0a      	add	r3, sp, #40	@ 0x28
 8007d7c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007d80:	ab09      	add	r3, sp, #36	@ 0x24
 8007d82:	9300      	str	r3, [sp, #0]
 8007d84:	6861      	ldr	r1, [r4, #4]
 8007d86:	ec49 8b10 	vmov	d0, r8, r9
 8007d8a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007d8e:	4628      	mov	r0, r5
 8007d90:	f7ff fed6 	bl	8007b40 <__cvt>
 8007d94:	9b06      	ldr	r3, [sp, #24]
 8007d96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d98:	2b47      	cmp	r3, #71	@ 0x47
 8007d9a:	4680      	mov	r8, r0
 8007d9c:	d129      	bne.n	8007df2 <_printf_float+0x172>
 8007d9e:	1cc8      	adds	r0, r1, #3
 8007da0:	db02      	blt.n	8007da8 <_printf_float+0x128>
 8007da2:	6863      	ldr	r3, [r4, #4]
 8007da4:	4299      	cmp	r1, r3
 8007da6:	dd41      	ble.n	8007e2c <_printf_float+0x1ac>
 8007da8:	f1aa 0a02 	sub.w	sl, sl, #2
 8007dac:	fa5f fa8a 	uxtb.w	sl, sl
 8007db0:	3901      	subs	r1, #1
 8007db2:	4652      	mov	r2, sl
 8007db4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007db8:	9109      	str	r1, [sp, #36]	@ 0x24
 8007dba:	f7ff ff26 	bl	8007c0a <__exponent>
 8007dbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007dc0:	1813      	adds	r3, r2, r0
 8007dc2:	2a01      	cmp	r2, #1
 8007dc4:	4681      	mov	r9, r0
 8007dc6:	6123      	str	r3, [r4, #16]
 8007dc8:	dc02      	bgt.n	8007dd0 <_printf_float+0x150>
 8007dca:	6822      	ldr	r2, [r4, #0]
 8007dcc:	07d2      	lsls	r2, r2, #31
 8007dce:	d501      	bpl.n	8007dd4 <_printf_float+0x154>
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	6123      	str	r3, [r4, #16]
 8007dd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d0a2      	beq.n	8007d22 <_printf_float+0xa2>
 8007ddc:	232d      	movs	r3, #45	@ 0x2d
 8007dde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007de2:	e79e      	b.n	8007d22 <_printf_float+0xa2>
 8007de4:	9a06      	ldr	r2, [sp, #24]
 8007de6:	2a47      	cmp	r2, #71	@ 0x47
 8007de8:	d1c2      	bne.n	8007d70 <_printf_float+0xf0>
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1c0      	bne.n	8007d70 <_printf_float+0xf0>
 8007dee:	2301      	movs	r3, #1
 8007df0:	e7bd      	b.n	8007d6e <_printf_float+0xee>
 8007df2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007df6:	d9db      	bls.n	8007db0 <_printf_float+0x130>
 8007df8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007dfc:	d118      	bne.n	8007e30 <_printf_float+0x1b0>
 8007dfe:	2900      	cmp	r1, #0
 8007e00:	6863      	ldr	r3, [r4, #4]
 8007e02:	dd0b      	ble.n	8007e1c <_printf_float+0x19c>
 8007e04:	6121      	str	r1, [r4, #16]
 8007e06:	b913      	cbnz	r3, 8007e0e <_printf_float+0x18e>
 8007e08:	6822      	ldr	r2, [r4, #0]
 8007e0a:	07d0      	lsls	r0, r2, #31
 8007e0c:	d502      	bpl.n	8007e14 <_printf_float+0x194>
 8007e0e:	3301      	adds	r3, #1
 8007e10:	440b      	add	r3, r1
 8007e12:	6123      	str	r3, [r4, #16]
 8007e14:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007e16:	f04f 0900 	mov.w	r9, #0
 8007e1a:	e7db      	b.n	8007dd4 <_printf_float+0x154>
 8007e1c:	b913      	cbnz	r3, 8007e24 <_printf_float+0x1a4>
 8007e1e:	6822      	ldr	r2, [r4, #0]
 8007e20:	07d2      	lsls	r2, r2, #31
 8007e22:	d501      	bpl.n	8007e28 <_printf_float+0x1a8>
 8007e24:	3302      	adds	r3, #2
 8007e26:	e7f4      	b.n	8007e12 <_printf_float+0x192>
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e7f2      	b.n	8007e12 <_printf_float+0x192>
 8007e2c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007e30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e32:	4299      	cmp	r1, r3
 8007e34:	db05      	blt.n	8007e42 <_printf_float+0x1c2>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	6121      	str	r1, [r4, #16]
 8007e3a:	07d8      	lsls	r0, r3, #31
 8007e3c:	d5ea      	bpl.n	8007e14 <_printf_float+0x194>
 8007e3e:	1c4b      	adds	r3, r1, #1
 8007e40:	e7e7      	b.n	8007e12 <_printf_float+0x192>
 8007e42:	2900      	cmp	r1, #0
 8007e44:	bfd4      	ite	le
 8007e46:	f1c1 0202 	rsble	r2, r1, #2
 8007e4a:	2201      	movgt	r2, #1
 8007e4c:	4413      	add	r3, r2
 8007e4e:	e7e0      	b.n	8007e12 <_printf_float+0x192>
 8007e50:	6823      	ldr	r3, [r4, #0]
 8007e52:	055a      	lsls	r2, r3, #21
 8007e54:	d407      	bmi.n	8007e66 <_printf_float+0x1e6>
 8007e56:	6923      	ldr	r3, [r4, #16]
 8007e58:	4642      	mov	r2, r8
 8007e5a:	4631      	mov	r1, r6
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	47b8      	blx	r7
 8007e60:	3001      	adds	r0, #1
 8007e62:	d12b      	bne.n	8007ebc <_printf_float+0x23c>
 8007e64:	e767      	b.n	8007d36 <_printf_float+0xb6>
 8007e66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e6a:	f240 80dd 	bls.w	8008028 <_printf_float+0x3a8>
 8007e6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007e72:	2200      	movs	r2, #0
 8007e74:	2300      	movs	r3, #0
 8007e76:	f7f8 fe37 	bl	8000ae8 <__aeabi_dcmpeq>
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	d033      	beq.n	8007ee6 <_printf_float+0x266>
 8007e7e:	4a37      	ldr	r2, [pc, #220]	@ (8007f5c <_printf_float+0x2dc>)
 8007e80:	2301      	movs	r3, #1
 8007e82:	4631      	mov	r1, r6
 8007e84:	4628      	mov	r0, r5
 8007e86:	47b8      	blx	r7
 8007e88:	3001      	adds	r0, #1
 8007e8a:	f43f af54 	beq.w	8007d36 <_printf_float+0xb6>
 8007e8e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007e92:	4543      	cmp	r3, r8
 8007e94:	db02      	blt.n	8007e9c <_printf_float+0x21c>
 8007e96:	6823      	ldr	r3, [r4, #0]
 8007e98:	07d8      	lsls	r0, r3, #31
 8007e9a:	d50f      	bpl.n	8007ebc <_printf_float+0x23c>
 8007e9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ea0:	4631      	mov	r1, r6
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	47b8      	blx	r7
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	f43f af45 	beq.w	8007d36 <_printf_float+0xb6>
 8007eac:	f04f 0900 	mov.w	r9, #0
 8007eb0:	f108 38ff 	add.w	r8, r8, #4294967295
 8007eb4:	f104 0a1a 	add.w	sl, r4, #26
 8007eb8:	45c8      	cmp	r8, r9
 8007eba:	dc09      	bgt.n	8007ed0 <_printf_float+0x250>
 8007ebc:	6823      	ldr	r3, [r4, #0]
 8007ebe:	079b      	lsls	r3, r3, #30
 8007ec0:	f100 8103 	bmi.w	80080ca <_printf_float+0x44a>
 8007ec4:	68e0      	ldr	r0, [r4, #12]
 8007ec6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ec8:	4298      	cmp	r0, r3
 8007eca:	bfb8      	it	lt
 8007ecc:	4618      	movlt	r0, r3
 8007ece:	e734      	b.n	8007d3a <_printf_float+0xba>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	4652      	mov	r2, sl
 8007ed4:	4631      	mov	r1, r6
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	47b8      	blx	r7
 8007eda:	3001      	adds	r0, #1
 8007edc:	f43f af2b 	beq.w	8007d36 <_printf_float+0xb6>
 8007ee0:	f109 0901 	add.w	r9, r9, #1
 8007ee4:	e7e8      	b.n	8007eb8 <_printf_float+0x238>
 8007ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	dc39      	bgt.n	8007f60 <_printf_float+0x2e0>
 8007eec:	4a1b      	ldr	r2, [pc, #108]	@ (8007f5c <_printf_float+0x2dc>)
 8007eee:	2301      	movs	r3, #1
 8007ef0:	4631      	mov	r1, r6
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	47b8      	blx	r7
 8007ef6:	3001      	adds	r0, #1
 8007ef8:	f43f af1d 	beq.w	8007d36 <_printf_float+0xb6>
 8007efc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007f00:	ea59 0303 	orrs.w	r3, r9, r3
 8007f04:	d102      	bne.n	8007f0c <_printf_float+0x28c>
 8007f06:	6823      	ldr	r3, [r4, #0]
 8007f08:	07d9      	lsls	r1, r3, #31
 8007f0a:	d5d7      	bpl.n	8007ebc <_printf_float+0x23c>
 8007f0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f10:	4631      	mov	r1, r6
 8007f12:	4628      	mov	r0, r5
 8007f14:	47b8      	blx	r7
 8007f16:	3001      	adds	r0, #1
 8007f18:	f43f af0d 	beq.w	8007d36 <_printf_float+0xb6>
 8007f1c:	f04f 0a00 	mov.w	sl, #0
 8007f20:	f104 0b1a 	add.w	fp, r4, #26
 8007f24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f26:	425b      	negs	r3, r3
 8007f28:	4553      	cmp	r3, sl
 8007f2a:	dc01      	bgt.n	8007f30 <_printf_float+0x2b0>
 8007f2c:	464b      	mov	r3, r9
 8007f2e:	e793      	b.n	8007e58 <_printf_float+0x1d8>
 8007f30:	2301      	movs	r3, #1
 8007f32:	465a      	mov	r2, fp
 8007f34:	4631      	mov	r1, r6
 8007f36:	4628      	mov	r0, r5
 8007f38:	47b8      	blx	r7
 8007f3a:	3001      	adds	r0, #1
 8007f3c:	f43f aefb 	beq.w	8007d36 <_printf_float+0xb6>
 8007f40:	f10a 0a01 	add.w	sl, sl, #1
 8007f44:	e7ee      	b.n	8007f24 <_printf_float+0x2a4>
 8007f46:	bf00      	nop
 8007f48:	7fefffff 	.word	0x7fefffff
 8007f4c:	0801c4f0 	.word	0x0801c4f0
 8007f50:	0801c4ec 	.word	0x0801c4ec
 8007f54:	0801c4f8 	.word	0x0801c4f8
 8007f58:	0801c4f4 	.word	0x0801c4f4
 8007f5c:	0801c4fc 	.word	0x0801c4fc
 8007f60:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007f62:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007f66:	4553      	cmp	r3, sl
 8007f68:	bfa8      	it	ge
 8007f6a:	4653      	movge	r3, sl
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	4699      	mov	r9, r3
 8007f70:	dc36      	bgt.n	8007fe0 <_printf_float+0x360>
 8007f72:	f04f 0b00 	mov.w	fp, #0
 8007f76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f7a:	f104 021a 	add.w	r2, r4, #26
 8007f7e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007f80:	9306      	str	r3, [sp, #24]
 8007f82:	eba3 0309 	sub.w	r3, r3, r9
 8007f86:	455b      	cmp	r3, fp
 8007f88:	dc31      	bgt.n	8007fee <_printf_float+0x36e>
 8007f8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f8c:	459a      	cmp	sl, r3
 8007f8e:	dc3a      	bgt.n	8008006 <_printf_float+0x386>
 8007f90:	6823      	ldr	r3, [r4, #0]
 8007f92:	07da      	lsls	r2, r3, #31
 8007f94:	d437      	bmi.n	8008006 <_printf_float+0x386>
 8007f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f98:	ebaa 0903 	sub.w	r9, sl, r3
 8007f9c:	9b06      	ldr	r3, [sp, #24]
 8007f9e:	ebaa 0303 	sub.w	r3, sl, r3
 8007fa2:	4599      	cmp	r9, r3
 8007fa4:	bfa8      	it	ge
 8007fa6:	4699      	movge	r9, r3
 8007fa8:	f1b9 0f00 	cmp.w	r9, #0
 8007fac:	dc33      	bgt.n	8008016 <_printf_float+0x396>
 8007fae:	f04f 0800 	mov.w	r8, #0
 8007fb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fb6:	f104 0b1a 	add.w	fp, r4, #26
 8007fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fbc:	ebaa 0303 	sub.w	r3, sl, r3
 8007fc0:	eba3 0309 	sub.w	r3, r3, r9
 8007fc4:	4543      	cmp	r3, r8
 8007fc6:	f77f af79 	ble.w	8007ebc <_printf_float+0x23c>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	465a      	mov	r2, fp
 8007fce:	4631      	mov	r1, r6
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	47b8      	blx	r7
 8007fd4:	3001      	adds	r0, #1
 8007fd6:	f43f aeae 	beq.w	8007d36 <_printf_float+0xb6>
 8007fda:	f108 0801 	add.w	r8, r8, #1
 8007fde:	e7ec      	b.n	8007fba <_printf_float+0x33a>
 8007fe0:	4642      	mov	r2, r8
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	47b8      	blx	r7
 8007fe8:	3001      	adds	r0, #1
 8007fea:	d1c2      	bne.n	8007f72 <_printf_float+0x2f2>
 8007fec:	e6a3      	b.n	8007d36 <_printf_float+0xb6>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	4631      	mov	r1, r6
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	9206      	str	r2, [sp, #24]
 8007ff6:	47b8      	blx	r7
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	f43f ae9c 	beq.w	8007d36 <_printf_float+0xb6>
 8007ffe:	9a06      	ldr	r2, [sp, #24]
 8008000:	f10b 0b01 	add.w	fp, fp, #1
 8008004:	e7bb      	b.n	8007f7e <_printf_float+0x2fe>
 8008006:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800800a:	4631      	mov	r1, r6
 800800c:	4628      	mov	r0, r5
 800800e:	47b8      	blx	r7
 8008010:	3001      	adds	r0, #1
 8008012:	d1c0      	bne.n	8007f96 <_printf_float+0x316>
 8008014:	e68f      	b.n	8007d36 <_printf_float+0xb6>
 8008016:	9a06      	ldr	r2, [sp, #24]
 8008018:	464b      	mov	r3, r9
 800801a:	4442      	add	r2, r8
 800801c:	4631      	mov	r1, r6
 800801e:	4628      	mov	r0, r5
 8008020:	47b8      	blx	r7
 8008022:	3001      	adds	r0, #1
 8008024:	d1c3      	bne.n	8007fae <_printf_float+0x32e>
 8008026:	e686      	b.n	8007d36 <_printf_float+0xb6>
 8008028:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800802c:	f1ba 0f01 	cmp.w	sl, #1
 8008030:	dc01      	bgt.n	8008036 <_printf_float+0x3b6>
 8008032:	07db      	lsls	r3, r3, #31
 8008034:	d536      	bpl.n	80080a4 <_printf_float+0x424>
 8008036:	2301      	movs	r3, #1
 8008038:	4642      	mov	r2, r8
 800803a:	4631      	mov	r1, r6
 800803c:	4628      	mov	r0, r5
 800803e:	47b8      	blx	r7
 8008040:	3001      	adds	r0, #1
 8008042:	f43f ae78 	beq.w	8007d36 <_printf_float+0xb6>
 8008046:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800804a:	4631      	mov	r1, r6
 800804c:	4628      	mov	r0, r5
 800804e:	47b8      	blx	r7
 8008050:	3001      	adds	r0, #1
 8008052:	f43f ae70 	beq.w	8007d36 <_printf_float+0xb6>
 8008056:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800805a:	2200      	movs	r2, #0
 800805c:	2300      	movs	r3, #0
 800805e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008062:	f7f8 fd41 	bl	8000ae8 <__aeabi_dcmpeq>
 8008066:	b9c0      	cbnz	r0, 800809a <_printf_float+0x41a>
 8008068:	4653      	mov	r3, sl
 800806a:	f108 0201 	add.w	r2, r8, #1
 800806e:	4631      	mov	r1, r6
 8008070:	4628      	mov	r0, r5
 8008072:	47b8      	blx	r7
 8008074:	3001      	adds	r0, #1
 8008076:	d10c      	bne.n	8008092 <_printf_float+0x412>
 8008078:	e65d      	b.n	8007d36 <_printf_float+0xb6>
 800807a:	2301      	movs	r3, #1
 800807c:	465a      	mov	r2, fp
 800807e:	4631      	mov	r1, r6
 8008080:	4628      	mov	r0, r5
 8008082:	47b8      	blx	r7
 8008084:	3001      	adds	r0, #1
 8008086:	f43f ae56 	beq.w	8007d36 <_printf_float+0xb6>
 800808a:	f108 0801 	add.w	r8, r8, #1
 800808e:	45d0      	cmp	r8, sl
 8008090:	dbf3      	blt.n	800807a <_printf_float+0x3fa>
 8008092:	464b      	mov	r3, r9
 8008094:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008098:	e6df      	b.n	8007e5a <_printf_float+0x1da>
 800809a:	f04f 0800 	mov.w	r8, #0
 800809e:	f104 0b1a 	add.w	fp, r4, #26
 80080a2:	e7f4      	b.n	800808e <_printf_float+0x40e>
 80080a4:	2301      	movs	r3, #1
 80080a6:	4642      	mov	r2, r8
 80080a8:	e7e1      	b.n	800806e <_printf_float+0x3ee>
 80080aa:	2301      	movs	r3, #1
 80080ac:	464a      	mov	r2, r9
 80080ae:	4631      	mov	r1, r6
 80080b0:	4628      	mov	r0, r5
 80080b2:	47b8      	blx	r7
 80080b4:	3001      	adds	r0, #1
 80080b6:	f43f ae3e 	beq.w	8007d36 <_printf_float+0xb6>
 80080ba:	f108 0801 	add.w	r8, r8, #1
 80080be:	68e3      	ldr	r3, [r4, #12]
 80080c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80080c2:	1a5b      	subs	r3, r3, r1
 80080c4:	4543      	cmp	r3, r8
 80080c6:	dcf0      	bgt.n	80080aa <_printf_float+0x42a>
 80080c8:	e6fc      	b.n	8007ec4 <_printf_float+0x244>
 80080ca:	f04f 0800 	mov.w	r8, #0
 80080ce:	f104 0919 	add.w	r9, r4, #25
 80080d2:	e7f4      	b.n	80080be <_printf_float+0x43e>

080080d4 <_printf_common>:
 80080d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080d8:	4616      	mov	r6, r2
 80080da:	4698      	mov	r8, r3
 80080dc:	688a      	ldr	r2, [r1, #8]
 80080de:	690b      	ldr	r3, [r1, #16]
 80080e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80080e4:	4293      	cmp	r3, r2
 80080e6:	bfb8      	it	lt
 80080e8:	4613      	movlt	r3, r2
 80080ea:	6033      	str	r3, [r6, #0]
 80080ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80080f0:	4607      	mov	r7, r0
 80080f2:	460c      	mov	r4, r1
 80080f4:	b10a      	cbz	r2, 80080fa <_printf_common+0x26>
 80080f6:	3301      	adds	r3, #1
 80080f8:	6033      	str	r3, [r6, #0]
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	0699      	lsls	r1, r3, #26
 80080fe:	bf42      	ittt	mi
 8008100:	6833      	ldrmi	r3, [r6, #0]
 8008102:	3302      	addmi	r3, #2
 8008104:	6033      	strmi	r3, [r6, #0]
 8008106:	6825      	ldr	r5, [r4, #0]
 8008108:	f015 0506 	ands.w	r5, r5, #6
 800810c:	d106      	bne.n	800811c <_printf_common+0x48>
 800810e:	f104 0a19 	add.w	sl, r4, #25
 8008112:	68e3      	ldr	r3, [r4, #12]
 8008114:	6832      	ldr	r2, [r6, #0]
 8008116:	1a9b      	subs	r3, r3, r2
 8008118:	42ab      	cmp	r3, r5
 800811a:	dc26      	bgt.n	800816a <_printf_common+0x96>
 800811c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008120:	6822      	ldr	r2, [r4, #0]
 8008122:	3b00      	subs	r3, #0
 8008124:	bf18      	it	ne
 8008126:	2301      	movne	r3, #1
 8008128:	0692      	lsls	r2, r2, #26
 800812a:	d42b      	bmi.n	8008184 <_printf_common+0xb0>
 800812c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008130:	4641      	mov	r1, r8
 8008132:	4638      	mov	r0, r7
 8008134:	47c8      	blx	r9
 8008136:	3001      	adds	r0, #1
 8008138:	d01e      	beq.n	8008178 <_printf_common+0xa4>
 800813a:	6823      	ldr	r3, [r4, #0]
 800813c:	6922      	ldr	r2, [r4, #16]
 800813e:	f003 0306 	and.w	r3, r3, #6
 8008142:	2b04      	cmp	r3, #4
 8008144:	bf02      	ittt	eq
 8008146:	68e5      	ldreq	r5, [r4, #12]
 8008148:	6833      	ldreq	r3, [r6, #0]
 800814a:	1aed      	subeq	r5, r5, r3
 800814c:	68a3      	ldr	r3, [r4, #8]
 800814e:	bf0c      	ite	eq
 8008150:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008154:	2500      	movne	r5, #0
 8008156:	4293      	cmp	r3, r2
 8008158:	bfc4      	itt	gt
 800815a:	1a9b      	subgt	r3, r3, r2
 800815c:	18ed      	addgt	r5, r5, r3
 800815e:	2600      	movs	r6, #0
 8008160:	341a      	adds	r4, #26
 8008162:	42b5      	cmp	r5, r6
 8008164:	d11a      	bne.n	800819c <_printf_common+0xc8>
 8008166:	2000      	movs	r0, #0
 8008168:	e008      	b.n	800817c <_printf_common+0xa8>
 800816a:	2301      	movs	r3, #1
 800816c:	4652      	mov	r2, sl
 800816e:	4641      	mov	r1, r8
 8008170:	4638      	mov	r0, r7
 8008172:	47c8      	blx	r9
 8008174:	3001      	adds	r0, #1
 8008176:	d103      	bne.n	8008180 <_printf_common+0xac>
 8008178:	f04f 30ff 	mov.w	r0, #4294967295
 800817c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008180:	3501      	adds	r5, #1
 8008182:	e7c6      	b.n	8008112 <_printf_common+0x3e>
 8008184:	18e1      	adds	r1, r4, r3
 8008186:	1c5a      	adds	r2, r3, #1
 8008188:	2030      	movs	r0, #48	@ 0x30
 800818a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800818e:	4422      	add	r2, r4
 8008190:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008194:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008198:	3302      	adds	r3, #2
 800819a:	e7c7      	b.n	800812c <_printf_common+0x58>
 800819c:	2301      	movs	r3, #1
 800819e:	4622      	mov	r2, r4
 80081a0:	4641      	mov	r1, r8
 80081a2:	4638      	mov	r0, r7
 80081a4:	47c8      	blx	r9
 80081a6:	3001      	adds	r0, #1
 80081a8:	d0e6      	beq.n	8008178 <_printf_common+0xa4>
 80081aa:	3601      	adds	r6, #1
 80081ac:	e7d9      	b.n	8008162 <_printf_common+0x8e>
	...

080081b0 <_printf_i>:
 80081b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081b4:	7e0f      	ldrb	r7, [r1, #24]
 80081b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80081b8:	2f78      	cmp	r7, #120	@ 0x78
 80081ba:	4691      	mov	r9, r2
 80081bc:	4680      	mov	r8, r0
 80081be:	460c      	mov	r4, r1
 80081c0:	469a      	mov	sl, r3
 80081c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80081c6:	d807      	bhi.n	80081d8 <_printf_i+0x28>
 80081c8:	2f62      	cmp	r7, #98	@ 0x62
 80081ca:	d80a      	bhi.n	80081e2 <_printf_i+0x32>
 80081cc:	2f00      	cmp	r7, #0
 80081ce:	f000 80d1 	beq.w	8008374 <_printf_i+0x1c4>
 80081d2:	2f58      	cmp	r7, #88	@ 0x58
 80081d4:	f000 80b8 	beq.w	8008348 <_printf_i+0x198>
 80081d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80081dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80081e0:	e03a      	b.n	8008258 <_printf_i+0xa8>
 80081e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80081e6:	2b15      	cmp	r3, #21
 80081e8:	d8f6      	bhi.n	80081d8 <_printf_i+0x28>
 80081ea:	a101      	add	r1, pc, #4	@ (adr r1, 80081f0 <_printf_i+0x40>)
 80081ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081f0:	08008249 	.word	0x08008249
 80081f4:	0800825d 	.word	0x0800825d
 80081f8:	080081d9 	.word	0x080081d9
 80081fc:	080081d9 	.word	0x080081d9
 8008200:	080081d9 	.word	0x080081d9
 8008204:	080081d9 	.word	0x080081d9
 8008208:	0800825d 	.word	0x0800825d
 800820c:	080081d9 	.word	0x080081d9
 8008210:	080081d9 	.word	0x080081d9
 8008214:	080081d9 	.word	0x080081d9
 8008218:	080081d9 	.word	0x080081d9
 800821c:	0800835b 	.word	0x0800835b
 8008220:	08008287 	.word	0x08008287
 8008224:	08008315 	.word	0x08008315
 8008228:	080081d9 	.word	0x080081d9
 800822c:	080081d9 	.word	0x080081d9
 8008230:	0800837d 	.word	0x0800837d
 8008234:	080081d9 	.word	0x080081d9
 8008238:	08008287 	.word	0x08008287
 800823c:	080081d9 	.word	0x080081d9
 8008240:	080081d9 	.word	0x080081d9
 8008244:	0800831d 	.word	0x0800831d
 8008248:	6833      	ldr	r3, [r6, #0]
 800824a:	1d1a      	adds	r2, r3, #4
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	6032      	str	r2, [r6, #0]
 8008250:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008254:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008258:	2301      	movs	r3, #1
 800825a:	e09c      	b.n	8008396 <_printf_i+0x1e6>
 800825c:	6833      	ldr	r3, [r6, #0]
 800825e:	6820      	ldr	r0, [r4, #0]
 8008260:	1d19      	adds	r1, r3, #4
 8008262:	6031      	str	r1, [r6, #0]
 8008264:	0606      	lsls	r6, r0, #24
 8008266:	d501      	bpl.n	800826c <_printf_i+0xbc>
 8008268:	681d      	ldr	r5, [r3, #0]
 800826a:	e003      	b.n	8008274 <_printf_i+0xc4>
 800826c:	0645      	lsls	r5, r0, #25
 800826e:	d5fb      	bpl.n	8008268 <_printf_i+0xb8>
 8008270:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008274:	2d00      	cmp	r5, #0
 8008276:	da03      	bge.n	8008280 <_printf_i+0xd0>
 8008278:	232d      	movs	r3, #45	@ 0x2d
 800827a:	426d      	negs	r5, r5
 800827c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008280:	4858      	ldr	r0, [pc, #352]	@ (80083e4 <_printf_i+0x234>)
 8008282:	230a      	movs	r3, #10
 8008284:	e011      	b.n	80082aa <_printf_i+0xfa>
 8008286:	6821      	ldr	r1, [r4, #0]
 8008288:	6833      	ldr	r3, [r6, #0]
 800828a:	0608      	lsls	r0, r1, #24
 800828c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008290:	d402      	bmi.n	8008298 <_printf_i+0xe8>
 8008292:	0649      	lsls	r1, r1, #25
 8008294:	bf48      	it	mi
 8008296:	b2ad      	uxthmi	r5, r5
 8008298:	2f6f      	cmp	r7, #111	@ 0x6f
 800829a:	4852      	ldr	r0, [pc, #328]	@ (80083e4 <_printf_i+0x234>)
 800829c:	6033      	str	r3, [r6, #0]
 800829e:	bf14      	ite	ne
 80082a0:	230a      	movne	r3, #10
 80082a2:	2308      	moveq	r3, #8
 80082a4:	2100      	movs	r1, #0
 80082a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80082aa:	6866      	ldr	r6, [r4, #4]
 80082ac:	60a6      	str	r6, [r4, #8]
 80082ae:	2e00      	cmp	r6, #0
 80082b0:	db05      	blt.n	80082be <_printf_i+0x10e>
 80082b2:	6821      	ldr	r1, [r4, #0]
 80082b4:	432e      	orrs	r6, r5
 80082b6:	f021 0104 	bic.w	r1, r1, #4
 80082ba:	6021      	str	r1, [r4, #0]
 80082bc:	d04b      	beq.n	8008356 <_printf_i+0x1a6>
 80082be:	4616      	mov	r6, r2
 80082c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80082c4:	fb03 5711 	mls	r7, r3, r1, r5
 80082c8:	5dc7      	ldrb	r7, [r0, r7]
 80082ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80082ce:	462f      	mov	r7, r5
 80082d0:	42bb      	cmp	r3, r7
 80082d2:	460d      	mov	r5, r1
 80082d4:	d9f4      	bls.n	80082c0 <_printf_i+0x110>
 80082d6:	2b08      	cmp	r3, #8
 80082d8:	d10b      	bne.n	80082f2 <_printf_i+0x142>
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	07df      	lsls	r7, r3, #31
 80082de:	d508      	bpl.n	80082f2 <_printf_i+0x142>
 80082e0:	6923      	ldr	r3, [r4, #16]
 80082e2:	6861      	ldr	r1, [r4, #4]
 80082e4:	4299      	cmp	r1, r3
 80082e6:	bfde      	ittt	le
 80082e8:	2330      	movle	r3, #48	@ 0x30
 80082ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80082ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80082f2:	1b92      	subs	r2, r2, r6
 80082f4:	6122      	str	r2, [r4, #16]
 80082f6:	f8cd a000 	str.w	sl, [sp]
 80082fa:	464b      	mov	r3, r9
 80082fc:	aa03      	add	r2, sp, #12
 80082fe:	4621      	mov	r1, r4
 8008300:	4640      	mov	r0, r8
 8008302:	f7ff fee7 	bl	80080d4 <_printf_common>
 8008306:	3001      	adds	r0, #1
 8008308:	d14a      	bne.n	80083a0 <_printf_i+0x1f0>
 800830a:	f04f 30ff 	mov.w	r0, #4294967295
 800830e:	b004      	add	sp, #16
 8008310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008314:	6823      	ldr	r3, [r4, #0]
 8008316:	f043 0320 	orr.w	r3, r3, #32
 800831a:	6023      	str	r3, [r4, #0]
 800831c:	4832      	ldr	r0, [pc, #200]	@ (80083e8 <_printf_i+0x238>)
 800831e:	2778      	movs	r7, #120	@ 0x78
 8008320:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008324:	6823      	ldr	r3, [r4, #0]
 8008326:	6831      	ldr	r1, [r6, #0]
 8008328:	061f      	lsls	r7, r3, #24
 800832a:	f851 5b04 	ldr.w	r5, [r1], #4
 800832e:	d402      	bmi.n	8008336 <_printf_i+0x186>
 8008330:	065f      	lsls	r7, r3, #25
 8008332:	bf48      	it	mi
 8008334:	b2ad      	uxthmi	r5, r5
 8008336:	6031      	str	r1, [r6, #0]
 8008338:	07d9      	lsls	r1, r3, #31
 800833a:	bf44      	itt	mi
 800833c:	f043 0320 	orrmi.w	r3, r3, #32
 8008340:	6023      	strmi	r3, [r4, #0]
 8008342:	b11d      	cbz	r5, 800834c <_printf_i+0x19c>
 8008344:	2310      	movs	r3, #16
 8008346:	e7ad      	b.n	80082a4 <_printf_i+0xf4>
 8008348:	4826      	ldr	r0, [pc, #152]	@ (80083e4 <_printf_i+0x234>)
 800834a:	e7e9      	b.n	8008320 <_printf_i+0x170>
 800834c:	6823      	ldr	r3, [r4, #0]
 800834e:	f023 0320 	bic.w	r3, r3, #32
 8008352:	6023      	str	r3, [r4, #0]
 8008354:	e7f6      	b.n	8008344 <_printf_i+0x194>
 8008356:	4616      	mov	r6, r2
 8008358:	e7bd      	b.n	80082d6 <_printf_i+0x126>
 800835a:	6833      	ldr	r3, [r6, #0]
 800835c:	6825      	ldr	r5, [r4, #0]
 800835e:	6961      	ldr	r1, [r4, #20]
 8008360:	1d18      	adds	r0, r3, #4
 8008362:	6030      	str	r0, [r6, #0]
 8008364:	062e      	lsls	r6, r5, #24
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	d501      	bpl.n	800836e <_printf_i+0x1be>
 800836a:	6019      	str	r1, [r3, #0]
 800836c:	e002      	b.n	8008374 <_printf_i+0x1c4>
 800836e:	0668      	lsls	r0, r5, #25
 8008370:	d5fb      	bpl.n	800836a <_printf_i+0x1ba>
 8008372:	8019      	strh	r1, [r3, #0]
 8008374:	2300      	movs	r3, #0
 8008376:	6123      	str	r3, [r4, #16]
 8008378:	4616      	mov	r6, r2
 800837a:	e7bc      	b.n	80082f6 <_printf_i+0x146>
 800837c:	6833      	ldr	r3, [r6, #0]
 800837e:	1d1a      	adds	r2, r3, #4
 8008380:	6032      	str	r2, [r6, #0]
 8008382:	681e      	ldr	r6, [r3, #0]
 8008384:	6862      	ldr	r2, [r4, #4]
 8008386:	2100      	movs	r1, #0
 8008388:	4630      	mov	r0, r6
 800838a:	f7f7 ff31 	bl	80001f0 <memchr>
 800838e:	b108      	cbz	r0, 8008394 <_printf_i+0x1e4>
 8008390:	1b80      	subs	r0, r0, r6
 8008392:	6060      	str	r0, [r4, #4]
 8008394:	6863      	ldr	r3, [r4, #4]
 8008396:	6123      	str	r3, [r4, #16]
 8008398:	2300      	movs	r3, #0
 800839a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800839e:	e7aa      	b.n	80082f6 <_printf_i+0x146>
 80083a0:	6923      	ldr	r3, [r4, #16]
 80083a2:	4632      	mov	r2, r6
 80083a4:	4649      	mov	r1, r9
 80083a6:	4640      	mov	r0, r8
 80083a8:	47d0      	blx	sl
 80083aa:	3001      	adds	r0, #1
 80083ac:	d0ad      	beq.n	800830a <_printf_i+0x15a>
 80083ae:	6823      	ldr	r3, [r4, #0]
 80083b0:	079b      	lsls	r3, r3, #30
 80083b2:	d413      	bmi.n	80083dc <_printf_i+0x22c>
 80083b4:	68e0      	ldr	r0, [r4, #12]
 80083b6:	9b03      	ldr	r3, [sp, #12]
 80083b8:	4298      	cmp	r0, r3
 80083ba:	bfb8      	it	lt
 80083bc:	4618      	movlt	r0, r3
 80083be:	e7a6      	b.n	800830e <_printf_i+0x15e>
 80083c0:	2301      	movs	r3, #1
 80083c2:	4632      	mov	r2, r6
 80083c4:	4649      	mov	r1, r9
 80083c6:	4640      	mov	r0, r8
 80083c8:	47d0      	blx	sl
 80083ca:	3001      	adds	r0, #1
 80083cc:	d09d      	beq.n	800830a <_printf_i+0x15a>
 80083ce:	3501      	adds	r5, #1
 80083d0:	68e3      	ldr	r3, [r4, #12]
 80083d2:	9903      	ldr	r1, [sp, #12]
 80083d4:	1a5b      	subs	r3, r3, r1
 80083d6:	42ab      	cmp	r3, r5
 80083d8:	dcf2      	bgt.n	80083c0 <_printf_i+0x210>
 80083da:	e7eb      	b.n	80083b4 <_printf_i+0x204>
 80083dc:	2500      	movs	r5, #0
 80083de:	f104 0619 	add.w	r6, r4, #25
 80083e2:	e7f5      	b.n	80083d0 <_printf_i+0x220>
 80083e4:	0801c4fe 	.word	0x0801c4fe
 80083e8:	0801c50f 	.word	0x0801c50f

080083ec <std>:
 80083ec:	2300      	movs	r3, #0
 80083ee:	b510      	push	{r4, lr}
 80083f0:	4604      	mov	r4, r0
 80083f2:	e9c0 3300 	strd	r3, r3, [r0]
 80083f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083fa:	6083      	str	r3, [r0, #8]
 80083fc:	8181      	strh	r1, [r0, #12]
 80083fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8008400:	81c2      	strh	r2, [r0, #14]
 8008402:	6183      	str	r3, [r0, #24]
 8008404:	4619      	mov	r1, r3
 8008406:	2208      	movs	r2, #8
 8008408:	305c      	adds	r0, #92	@ 0x5c
 800840a:	f000 f9a8 	bl	800875e <memset>
 800840e:	4b0d      	ldr	r3, [pc, #52]	@ (8008444 <std+0x58>)
 8008410:	6263      	str	r3, [r4, #36]	@ 0x24
 8008412:	4b0d      	ldr	r3, [pc, #52]	@ (8008448 <std+0x5c>)
 8008414:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008416:	4b0d      	ldr	r3, [pc, #52]	@ (800844c <std+0x60>)
 8008418:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800841a:	4b0d      	ldr	r3, [pc, #52]	@ (8008450 <std+0x64>)
 800841c:	6323      	str	r3, [r4, #48]	@ 0x30
 800841e:	4b0d      	ldr	r3, [pc, #52]	@ (8008454 <std+0x68>)
 8008420:	6224      	str	r4, [r4, #32]
 8008422:	429c      	cmp	r4, r3
 8008424:	d006      	beq.n	8008434 <std+0x48>
 8008426:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800842a:	4294      	cmp	r4, r2
 800842c:	d002      	beq.n	8008434 <std+0x48>
 800842e:	33d0      	adds	r3, #208	@ 0xd0
 8008430:	429c      	cmp	r4, r3
 8008432:	d105      	bne.n	8008440 <std+0x54>
 8008434:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800843c:	f000 ba0c 	b.w	8008858 <__retarget_lock_init_recursive>
 8008440:	bd10      	pop	{r4, pc}
 8008442:	bf00      	nop
 8008444:	080086d9 	.word	0x080086d9
 8008448:	080086fb 	.word	0x080086fb
 800844c:	08008733 	.word	0x08008733
 8008450:	08008757 	.word	0x08008757
 8008454:	2000498c 	.word	0x2000498c

08008458 <stdio_exit_handler>:
 8008458:	4a02      	ldr	r2, [pc, #8]	@ (8008464 <stdio_exit_handler+0xc>)
 800845a:	4903      	ldr	r1, [pc, #12]	@ (8008468 <stdio_exit_handler+0x10>)
 800845c:	4803      	ldr	r0, [pc, #12]	@ (800846c <stdio_exit_handler+0x14>)
 800845e:	f000 b869 	b.w	8008534 <_fwalk_sglue>
 8008462:	bf00      	nop
 8008464:	20002c0c 	.word	0x20002c0c
 8008468:	08009f2d 	.word	0x08009f2d
 800846c:	20002c1c 	.word	0x20002c1c

08008470 <cleanup_stdio>:
 8008470:	6841      	ldr	r1, [r0, #4]
 8008472:	4b0c      	ldr	r3, [pc, #48]	@ (80084a4 <cleanup_stdio+0x34>)
 8008474:	4299      	cmp	r1, r3
 8008476:	b510      	push	{r4, lr}
 8008478:	4604      	mov	r4, r0
 800847a:	d001      	beq.n	8008480 <cleanup_stdio+0x10>
 800847c:	f001 fd56 	bl	8009f2c <_fflush_r>
 8008480:	68a1      	ldr	r1, [r4, #8]
 8008482:	4b09      	ldr	r3, [pc, #36]	@ (80084a8 <cleanup_stdio+0x38>)
 8008484:	4299      	cmp	r1, r3
 8008486:	d002      	beq.n	800848e <cleanup_stdio+0x1e>
 8008488:	4620      	mov	r0, r4
 800848a:	f001 fd4f 	bl	8009f2c <_fflush_r>
 800848e:	68e1      	ldr	r1, [r4, #12]
 8008490:	4b06      	ldr	r3, [pc, #24]	@ (80084ac <cleanup_stdio+0x3c>)
 8008492:	4299      	cmp	r1, r3
 8008494:	d004      	beq.n	80084a0 <cleanup_stdio+0x30>
 8008496:	4620      	mov	r0, r4
 8008498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800849c:	f001 bd46 	b.w	8009f2c <_fflush_r>
 80084a0:	bd10      	pop	{r4, pc}
 80084a2:	bf00      	nop
 80084a4:	2000498c 	.word	0x2000498c
 80084a8:	200049f4 	.word	0x200049f4
 80084ac:	20004a5c 	.word	0x20004a5c

080084b0 <global_stdio_init.part.0>:
 80084b0:	b510      	push	{r4, lr}
 80084b2:	4b0b      	ldr	r3, [pc, #44]	@ (80084e0 <global_stdio_init.part.0+0x30>)
 80084b4:	4c0b      	ldr	r4, [pc, #44]	@ (80084e4 <global_stdio_init.part.0+0x34>)
 80084b6:	4a0c      	ldr	r2, [pc, #48]	@ (80084e8 <global_stdio_init.part.0+0x38>)
 80084b8:	601a      	str	r2, [r3, #0]
 80084ba:	4620      	mov	r0, r4
 80084bc:	2200      	movs	r2, #0
 80084be:	2104      	movs	r1, #4
 80084c0:	f7ff ff94 	bl	80083ec <std>
 80084c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80084c8:	2201      	movs	r2, #1
 80084ca:	2109      	movs	r1, #9
 80084cc:	f7ff ff8e 	bl	80083ec <std>
 80084d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80084d4:	2202      	movs	r2, #2
 80084d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084da:	2112      	movs	r1, #18
 80084dc:	f7ff bf86 	b.w	80083ec <std>
 80084e0:	20004ac4 	.word	0x20004ac4
 80084e4:	2000498c 	.word	0x2000498c
 80084e8:	08008459 	.word	0x08008459

080084ec <__sfp_lock_acquire>:
 80084ec:	4801      	ldr	r0, [pc, #4]	@ (80084f4 <__sfp_lock_acquire+0x8>)
 80084ee:	f000 b9b4 	b.w	800885a <__retarget_lock_acquire_recursive>
 80084f2:	bf00      	nop
 80084f4:	20004acd 	.word	0x20004acd

080084f8 <__sfp_lock_release>:
 80084f8:	4801      	ldr	r0, [pc, #4]	@ (8008500 <__sfp_lock_release+0x8>)
 80084fa:	f000 b9af 	b.w	800885c <__retarget_lock_release_recursive>
 80084fe:	bf00      	nop
 8008500:	20004acd 	.word	0x20004acd

08008504 <__sinit>:
 8008504:	b510      	push	{r4, lr}
 8008506:	4604      	mov	r4, r0
 8008508:	f7ff fff0 	bl	80084ec <__sfp_lock_acquire>
 800850c:	6a23      	ldr	r3, [r4, #32]
 800850e:	b11b      	cbz	r3, 8008518 <__sinit+0x14>
 8008510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008514:	f7ff bff0 	b.w	80084f8 <__sfp_lock_release>
 8008518:	4b04      	ldr	r3, [pc, #16]	@ (800852c <__sinit+0x28>)
 800851a:	6223      	str	r3, [r4, #32]
 800851c:	4b04      	ldr	r3, [pc, #16]	@ (8008530 <__sinit+0x2c>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1f5      	bne.n	8008510 <__sinit+0xc>
 8008524:	f7ff ffc4 	bl	80084b0 <global_stdio_init.part.0>
 8008528:	e7f2      	b.n	8008510 <__sinit+0xc>
 800852a:	bf00      	nop
 800852c:	08008471 	.word	0x08008471
 8008530:	20004ac4 	.word	0x20004ac4

08008534 <_fwalk_sglue>:
 8008534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008538:	4607      	mov	r7, r0
 800853a:	4688      	mov	r8, r1
 800853c:	4614      	mov	r4, r2
 800853e:	2600      	movs	r6, #0
 8008540:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008544:	f1b9 0901 	subs.w	r9, r9, #1
 8008548:	d505      	bpl.n	8008556 <_fwalk_sglue+0x22>
 800854a:	6824      	ldr	r4, [r4, #0]
 800854c:	2c00      	cmp	r4, #0
 800854e:	d1f7      	bne.n	8008540 <_fwalk_sglue+0xc>
 8008550:	4630      	mov	r0, r6
 8008552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008556:	89ab      	ldrh	r3, [r5, #12]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d907      	bls.n	800856c <_fwalk_sglue+0x38>
 800855c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008560:	3301      	adds	r3, #1
 8008562:	d003      	beq.n	800856c <_fwalk_sglue+0x38>
 8008564:	4629      	mov	r1, r5
 8008566:	4638      	mov	r0, r7
 8008568:	47c0      	blx	r8
 800856a:	4306      	orrs	r6, r0
 800856c:	3568      	adds	r5, #104	@ 0x68
 800856e:	e7e9      	b.n	8008544 <_fwalk_sglue+0x10>

08008570 <setvbuf>:
 8008570:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008574:	461d      	mov	r5, r3
 8008576:	4b57      	ldr	r3, [pc, #348]	@ (80086d4 <setvbuf+0x164>)
 8008578:	681f      	ldr	r7, [r3, #0]
 800857a:	4604      	mov	r4, r0
 800857c:	460e      	mov	r6, r1
 800857e:	4690      	mov	r8, r2
 8008580:	b127      	cbz	r7, 800858c <setvbuf+0x1c>
 8008582:	6a3b      	ldr	r3, [r7, #32]
 8008584:	b913      	cbnz	r3, 800858c <setvbuf+0x1c>
 8008586:	4638      	mov	r0, r7
 8008588:	f7ff ffbc 	bl	8008504 <__sinit>
 800858c:	f1b8 0f02 	cmp.w	r8, #2
 8008590:	d006      	beq.n	80085a0 <setvbuf+0x30>
 8008592:	f1b8 0f01 	cmp.w	r8, #1
 8008596:	f200 809a 	bhi.w	80086ce <setvbuf+0x15e>
 800859a:	2d00      	cmp	r5, #0
 800859c:	f2c0 8097 	blt.w	80086ce <setvbuf+0x15e>
 80085a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80085a2:	07d9      	lsls	r1, r3, #31
 80085a4:	d405      	bmi.n	80085b2 <setvbuf+0x42>
 80085a6:	89a3      	ldrh	r3, [r4, #12]
 80085a8:	059a      	lsls	r2, r3, #22
 80085aa:	d402      	bmi.n	80085b2 <setvbuf+0x42>
 80085ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085ae:	f000 f954 	bl	800885a <__retarget_lock_acquire_recursive>
 80085b2:	4621      	mov	r1, r4
 80085b4:	4638      	mov	r0, r7
 80085b6:	f001 fcb9 	bl	8009f2c <_fflush_r>
 80085ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085bc:	b141      	cbz	r1, 80085d0 <setvbuf+0x60>
 80085be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085c2:	4299      	cmp	r1, r3
 80085c4:	d002      	beq.n	80085cc <setvbuf+0x5c>
 80085c6:	4638      	mov	r0, r7
 80085c8:	f000 ffb2 	bl	8009530 <_free_r>
 80085cc:	2300      	movs	r3, #0
 80085ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80085d0:	2300      	movs	r3, #0
 80085d2:	61a3      	str	r3, [r4, #24]
 80085d4:	6063      	str	r3, [r4, #4]
 80085d6:	89a3      	ldrh	r3, [r4, #12]
 80085d8:	061b      	lsls	r3, r3, #24
 80085da:	d503      	bpl.n	80085e4 <setvbuf+0x74>
 80085dc:	6921      	ldr	r1, [r4, #16]
 80085de:	4638      	mov	r0, r7
 80085e0:	f000 ffa6 	bl	8009530 <_free_r>
 80085e4:	89a3      	ldrh	r3, [r4, #12]
 80085e6:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80085ea:	f023 0303 	bic.w	r3, r3, #3
 80085ee:	f1b8 0f02 	cmp.w	r8, #2
 80085f2:	81a3      	strh	r3, [r4, #12]
 80085f4:	d061      	beq.n	80086ba <setvbuf+0x14a>
 80085f6:	ab01      	add	r3, sp, #4
 80085f8:	466a      	mov	r2, sp
 80085fa:	4621      	mov	r1, r4
 80085fc:	4638      	mov	r0, r7
 80085fe:	f001 fcbd 	bl	8009f7c <__swhatbuf_r>
 8008602:	89a3      	ldrh	r3, [r4, #12]
 8008604:	4318      	orrs	r0, r3
 8008606:	81a0      	strh	r0, [r4, #12]
 8008608:	bb2d      	cbnz	r5, 8008656 <setvbuf+0xe6>
 800860a:	9d00      	ldr	r5, [sp, #0]
 800860c:	4628      	mov	r0, r5
 800860e:	f000 ffd9 	bl	80095c4 <malloc>
 8008612:	4606      	mov	r6, r0
 8008614:	2800      	cmp	r0, #0
 8008616:	d152      	bne.n	80086be <setvbuf+0x14e>
 8008618:	f8dd 9000 	ldr.w	r9, [sp]
 800861c:	45a9      	cmp	r9, r5
 800861e:	d140      	bne.n	80086a2 <setvbuf+0x132>
 8008620:	f04f 35ff 	mov.w	r5, #4294967295
 8008624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008628:	f043 0202 	orr.w	r2, r3, #2
 800862c:	81a2      	strh	r2, [r4, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	60a2      	str	r2, [r4, #8]
 8008632:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8008636:	6022      	str	r2, [r4, #0]
 8008638:	6122      	str	r2, [r4, #16]
 800863a:	2201      	movs	r2, #1
 800863c:	6162      	str	r2, [r4, #20]
 800863e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008640:	07d6      	lsls	r6, r2, #31
 8008642:	d404      	bmi.n	800864e <setvbuf+0xde>
 8008644:	0598      	lsls	r0, r3, #22
 8008646:	d402      	bmi.n	800864e <setvbuf+0xde>
 8008648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800864a:	f000 f907 	bl	800885c <__retarget_lock_release_recursive>
 800864e:	4628      	mov	r0, r5
 8008650:	b003      	add	sp, #12
 8008652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008656:	2e00      	cmp	r6, #0
 8008658:	d0d8      	beq.n	800860c <setvbuf+0x9c>
 800865a:	6a3b      	ldr	r3, [r7, #32]
 800865c:	b913      	cbnz	r3, 8008664 <setvbuf+0xf4>
 800865e:	4638      	mov	r0, r7
 8008660:	f7ff ff50 	bl	8008504 <__sinit>
 8008664:	f1b8 0f01 	cmp.w	r8, #1
 8008668:	bf08      	it	eq
 800866a:	89a3      	ldrheq	r3, [r4, #12]
 800866c:	6026      	str	r6, [r4, #0]
 800866e:	bf04      	itt	eq
 8008670:	f043 0301 	orreq.w	r3, r3, #1
 8008674:	81a3      	strheq	r3, [r4, #12]
 8008676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800867a:	f013 0208 	ands.w	r2, r3, #8
 800867e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008682:	d01e      	beq.n	80086c2 <setvbuf+0x152>
 8008684:	07d9      	lsls	r1, r3, #31
 8008686:	bf41      	itttt	mi
 8008688:	2200      	movmi	r2, #0
 800868a:	426d      	negmi	r5, r5
 800868c:	60a2      	strmi	r2, [r4, #8]
 800868e:	61a5      	strmi	r5, [r4, #24]
 8008690:	bf58      	it	pl
 8008692:	60a5      	strpl	r5, [r4, #8]
 8008694:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008696:	07d2      	lsls	r2, r2, #31
 8008698:	d401      	bmi.n	800869e <setvbuf+0x12e>
 800869a:	059b      	lsls	r3, r3, #22
 800869c:	d513      	bpl.n	80086c6 <setvbuf+0x156>
 800869e:	2500      	movs	r5, #0
 80086a0:	e7d5      	b.n	800864e <setvbuf+0xde>
 80086a2:	4648      	mov	r0, r9
 80086a4:	f000 ff8e 	bl	80095c4 <malloc>
 80086a8:	4606      	mov	r6, r0
 80086aa:	2800      	cmp	r0, #0
 80086ac:	d0b8      	beq.n	8008620 <setvbuf+0xb0>
 80086ae:	89a3      	ldrh	r3, [r4, #12]
 80086b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086b4:	81a3      	strh	r3, [r4, #12]
 80086b6:	464d      	mov	r5, r9
 80086b8:	e7cf      	b.n	800865a <setvbuf+0xea>
 80086ba:	2500      	movs	r5, #0
 80086bc:	e7b2      	b.n	8008624 <setvbuf+0xb4>
 80086be:	46a9      	mov	r9, r5
 80086c0:	e7f5      	b.n	80086ae <setvbuf+0x13e>
 80086c2:	60a2      	str	r2, [r4, #8]
 80086c4:	e7e6      	b.n	8008694 <setvbuf+0x124>
 80086c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086c8:	f000 f8c8 	bl	800885c <__retarget_lock_release_recursive>
 80086cc:	e7e7      	b.n	800869e <setvbuf+0x12e>
 80086ce:	f04f 35ff 	mov.w	r5, #4294967295
 80086d2:	e7bc      	b.n	800864e <setvbuf+0xde>
 80086d4:	20002c18 	.word	0x20002c18

080086d8 <__sread>:
 80086d8:	b510      	push	{r4, lr}
 80086da:	460c      	mov	r4, r1
 80086dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e0:	f000 f86c 	bl	80087bc <_read_r>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	bfab      	itete	ge
 80086e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80086ea:	89a3      	ldrhlt	r3, [r4, #12]
 80086ec:	181b      	addge	r3, r3, r0
 80086ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80086f2:	bfac      	ite	ge
 80086f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80086f6:	81a3      	strhlt	r3, [r4, #12]
 80086f8:	bd10      	pop	{r4, pc}

080086fa <__swrite>:
 80086fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086fe:	461f      	mov	r7, r3
 8008700:	898b      	ldrh	r3, [r1, #12]
 8008702:	05db      	lsls	r3, r3, #23
 8008704:	4605      	mov	r5, r0
 8008706:	460c      	mov	r4, r1
 8008708:	4616      	mov	r6, r2
 800870a:	d505      	bpl.n	8008718 <__swrite+0x1e>
 800870c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008710:	2302      	movs	r3, #2
 8008712:	2200      	movs	r2, #0
 8008714:	f000 f840 	bl	8008798 <_lseek_r>
 8008718:	89a3      	ldrh	r3, [r4, #12]
 800871a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800871e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008722:	81a3      	strh	r3, [r4, #12]
 8008724:	4632      	mov	r2, r6
 8008726:	463b      	mov	r3, r7
 8008728:	4628      	mov	r0, r5
 800872a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800872e:	f000 b857 	b.w	80087e0 <_write_r>

08008732 <__sseek>:
 8008732:	b510      	push	{r4, lr}
 8008734:	460c      	mov	r4, r1
 8008736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800873a:	f000 f82d 	bl	8008798 <_lseek_r>
 800873e:	1c43      	adds	r3, r0, #1
 8008740:	89a3      	ldrh	r3, [r4, #12]
 8008742:	bf15      	itete	ne
 8008744:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008746:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800874a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800874e:	81a3      	strheq	r3, [r4, #12]
 8008750:	bf18      	it	ne
 8008752:	81a3      	strhne	r3, [r4, #12]
 8008754:	bd10      	pop	{r4, pc}

08008756 <__sclose>:
 8008756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800875a:	f000 b80d 	b.w	8008778 <_close_r>

0800875e <memset>:
 800875e:	4402      	add	r2, r0
 8008760:	4603      	mov	r3, r0
 8008762:	4293      	cmp	r3, r2
 8008764:	d100      	bne.n	8008768 <memset+0xa>
 8008766:	4770      	bx	lr
 8008768:	f803 1b01 	strb.w	r1, [r3], #1
 800876c:	e7f9      	b.n	8008762 <memset+0x4>
	...

08008770 <_localeconv_r>:
 8008770:	4800      	ldr	r0, [pc, #0]	@ (8008774 <_localeconv_r+0x4>)
 8008772:	4770      	bx	lr
 8008774:	20002d58 	.word	0x20002d58

08008778 <_close_r>:
 8008778:	b538      	push	{r3, r4, r5, lr}
 800877a:	4d06      	ldr	r5, [pc, #24]	@ (8008794 <_close_r+0x1c>)
 800877c:	2300      	movs	r3, #0
 800877e:	4604      	mov	r4, r0
 8008780:	4608      	mov	r0, r1
 8008782:	602b      	str	r3, [r5, #0]
 8008784:	f7f9 f984 	bl	8001a90 <_close>
 8008788:	1c43      	adds	r3, r0, #1
 800878a:	d102      	bne.n	8008792 <_close_r+0x1a>
 800878c:	682b      	ldr	r3, [r5, #0]
 800878e:	b103      	cbz	r3, 8008792 <_close_r+0x1a>
 8008790:	6023      	str	r3, [r4, #0]
 8008792:	bd38      	pop	{r3, r4, r5, pc}
 8008794:	20004ac8 	.word	0x20004ac8

08008798 <_lseek_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4d07      	ldr	r5, [pc, #28]	@ (80087b8 <_lseek_r+0x20>)
 800879c:	4604      	mov	r4, r0
 800879e:	4608      	mov	r0, r1
 80087a0:	4611      	mov	r1, r2
 80087a2:	2200      	movs	r2, #0
 80087a4:	602a      	str	r2, [r5, #0]
 80087a6:	461a      	mov	r2, r3
 80087a8:	f7f9 f97e 	bl	8001aa8 <_lseek>
 80087ac:	1c43      	adds	r3, r0, #1
 80087ae:	d102      	bne.n	80087b6 <_lseek_r+0x1e>
 80087b0:	682b      	ldr	r3, [r5, #0]
 80087b2:	b103      	cbz	r3, 80087b6 <_lseek_r+0x1e>
 80087b4:	6023      	str	r3, [r4, #0]
 80087b6:	bd38      	pop	{r3, r4, r5, pc}
 80087b8:	20004ac8 	.word	0x20004ac8

080087bc <_read_r>:
 80087bc:	b538      	push	{r3, r4, r5, lr}
 80087be:	4d07      	ldr	r5, [pc, #28]	@ (80087dc <_read_r+0x20>)
 80087c0:	4604      	mov	r4, r0
 80087c2:	4608      	mov	r0, r1
 80087c4:	4611      	mov	r1, r2
 80087c6:	2200      	movs	r2, #0
 80087c8:	602a      	str	r2, [r5, #0]
 80087ca:	461a      	mov	r2, r3
 80087cc:	f7f9 f974 	bl	8001ab8 <_read>
 80087d0:	1c43      	adds	r3, r0, #1
 80087d2:	d102      	bne.n	80087da <_read_r+0x1e>
 80087d4:	682b      	ldr	r3, [r5, #0]
 80087d6:	b103      	cbz	r3, 80087da <_read_r+0x1e>
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	bd38      	pop	{r3, r4, r5, pc}
 80087dc:	20004ac8 	.word	0x20004ac8

080087e0 <_write_r>:
 80087e0:	b538      	push	{r3, r4, r5, lr}
 80087e2:	4d07      	ldr	r5, [pc, #28]	@ (8008800 <_write_r+0x20>)
 80087e4:	4604      	mov	r4, r0
 80087e6:	4608      	mov	r0, r1
 80087e8:	4611      	mov	r1, r2
 80087ea:	2200      	movs	r2, #0
 80087ec:	602a      	str	r2, [r5, #0]
 80087ee:	461a      	mov	r2, r3
 80087f0:	f7f9 f934 	bl	8001a5c <_write>
 80087f4:	1c43      	adds	r3, r0, #1
 80087f6:	d102      	bne.n	80087fe <_write_r+0x1e>
 80087f8:	682b      	ldr	r3, [r5, #0]
 80087fa:	b103      	cbz	r3, 80087fe <_write_r+0x1e>
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	bd38      	pop	{r3, r4, r5, pc}
 8008800:	20004ac8 	.word	0x20004ac8

08008804 <__errno>:
 8008804:	4b01      	ldr	r3, [pc, #4]	@ (800880c <__errno+0x8>)
 8008806:	6818      	ldr	r0, [r3, #0]
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	20002c18 	.word	0x20002c18

08008810 <__libc_init_array>:
 8008810:	b570      	push	{r4, r5, r6, lr}
 8008812:	4d0d      	ldr	r5, [pc, #52]	@ (8008848 <__libc_init_array+0x38>)
 8008814:	4c0d      	ldr	r4, [pc, #52]	@ (800884c <__libc_init_array+0x3c>)
 8008816:	1b64      	subs	r4, r4, r5
 8008818:	10a4      	asrs	r4, r4, #2
 800881a:	2600      	movs	r6, #0
 800881c:	42a6      	cmp	r6, r4
 800881e:	d109      	bne.n	8008834 <__libc_init_array+0x24>
 8008820:	4d0b      	ldr	r5, [pc, #44]	@ (8008850 <__libc_init_array+0x40>)
 8008822:	4c0c      	ldr	r4, [pc, #48]	@ (8008854 <__libc_init_array+0x44>)
 8008824:	f001 fed4 	bl	800a5d0 <_init>
 8008828:	1b64      	subs	r4, r4, r5
 800882a:	10a4      	asrs	r4, r4, #2
 800882c:	2600      	movs	r6, #0
 800882e:	42a6      	cmp	r6, r4
 8008830:	d105      	bne.n	800883e <__libc_init_array+0x2e>
 8008832:	bd70      	pop	{r4, r5, r6, pc}
 8008834:	f855 3b04 	ldr.w	r3, [r5], #4
 8008838:	4798      	blx	r3
 800883a:	3601      	adds	r6, #1
 800883c:	e7ee      	b.n	800881c <__libc_init_array+0xc>
 800883e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008842:	4798      	blx	r3
 8008844:	3601      	adds	r6, #1
 8008846:	e7f2      	b.n	800882e <__libc_init_array+0x1e>
 8008848:	0801c86c 	.word	0x0801c86c
 800884c:	0801c86c 	.word	0x0801c86c
 8008850:	0801c86c 	.word	0x0801c86c
 8008854:	0801c870 	.word	0x0801c870

08008858 <__retarget_lock_init_recursive>:
 8008858:	4770      	bx	lr

0800885a <__retarget_lock_acquire_recursive>:
 800885a:	4770      	bx	lr

0800885c <__retarget_lock_release_recursive>:
 800885c:	4770      	bx	lr

0800885e <memcpy>:
 800885e:	440a      	add	r2, r1
 8008860:	4291      	cmp	r1, r2
 8008862:	f100 33ff 	add.w	r3, r0, #4294967295
 8008866:	d100      	bne.n	800886a <memcpy+0xc>
 8008868:	4770      	bx	lr
 800886a:	b510      	push	{r4, lr}
 800886c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008870:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008874:	4291      	cmp	r1, r2
 8008876:	d1f9      	bne.n	800886c <memcpy+0xe>
 8008878:	bd10      	pop	{r4, pc}

0800887a <quorem>:
 800887a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887e:	6903      	ldr	r3, [r0, #16]
 8008880:	690c      	ldr	r4, [r1, #16]
 8008882:	42a3      	cmp	r3, r4
 8008884:	4607      	mov	r7, r0
 8008886:	db7e      	blt.n	8008986 <quorem+0x10c>
 8008888:	3c01      	subs	r4, #1
 800888a:	f101 0814 	add.w	r8, r1, #20
 800888e:	00a3      	lsls	r3, r4, #2
 8008890:	f100 0514 	add.w	r5, r0, #20
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800889a:	9301      	str	r3, [sp, #4]
 800889c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088a4:	3301      	adds	r3, #1
 80088a6:	429a      	cmp	r2, r3
 80088a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80088b0:	d32e      	bcc.n	8008910 <quorem+0x96>
 80088b2:	f04f 0a00 	mov.w	sl, #0
 80088b6:	46c4      	mov	ip, r8
 80088b8:	46ae      	mov	lr, r5
 80088ba:	46d3      	mov	fp, sl
 80088bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80088c0:	b298      	uxth	r0, r3
 80088c2:	fb06 a000 	mla	r0, r6, r0, sl
 80088c6:	0c02      	lsrs	r2, r0, #16
 80088c8:	0c1b      	lsrs	r3, r3, #16
 80088ca:	fb06 2303 	mla	r3, r6, r3, r2
 80088ce:	f8de 2000 	ldr.w	r2, [lr]
 80088d2:	b280      	uxth	r0, r0
 80088d4:	b292      	uxth	r2, r2
 80088d6:	1a12      	subs	r2, r2, r0
 80088d8:	445a      	add	r2, fp
 80088da:	f8de 0000 	ldr.w	r0, [lr]
 80088de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80088e8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80088ec:	b292      	uxth	r2, r2
 80088ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80088f2:	45e1      	cmp	r9, ip
 80088f4:	f84e 2b04 	str.w	r2, [lr], #4
 80088f8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80088fc:	d2de      	bcs.n	80088bc <quorem+0x42>
 80088fe:	9b00      	ldr	r3, [sp, #0]
 8008900:	58eb      	ldr	r3, [r5, r3]
 8008902:	b92b      	cbnz	r3, 8008910 <quorem+0x96>
 8008904:	9b01      	ldr	r3, [sp, #4]
 8008906:	3b04      	subs	r3, #4
 8008908:	429d      	cmp	r5, r3
 800890a:	461a      	mov	r2, r3
 800890c:	d32f      	bcc.n	800896e <quorem+0xf4>
 800890e:	613c      	str	r4, [r7, #16]
 8008910:	4638      	mov	r0, r7
 8008912:	f001 f97f 	bl	8009c14 <__mcmp>
 8008916:	2800      	cmp	r0, #0
 8008918:	db25      	blt.n	8008966 <quorem+0xec>
 800891a:	4629      	mov	r1, r5
 800891c:	2000      	movs	r0, #0
 800891e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008922:	f8d1 c000 	ldr.w	ip, [r1]
 8008926:	fa1f fe82 	uxth.w	lr, r2
 800892a:	fa1f f38c 	uxth.w	r3, ip
 800892e:	eba3 030e 	sub.w	r3, r3, lr
 8008932:	4403      	add	r3, r0
 8008934:	0c12      	lsrs	r2, r2, #16
 8008936:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800893a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800893e:	b29b      	uxth	r3, r3
 8008940:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008944:	45c1      	cmp	r9, r8
 8008946:	f841 3b04 	str.w	r3, [r1], #4
 800894a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800894e:	d2e6      	bcs.n	800891e <quorem+0xa4>
 8008950:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008954:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008958:	b922      	cbnz	r2, 8008964 <quorem+0xea>
 800895a:	3b04      	subs	r3, #4
 800895c:	429d      	cmp	r5, r3
 800895e:	461a      	mov	r2, r3
 8008960:	d30b      	bcc.n	800897a <quorem+0x100>
 8008962:	613c      	str	r4, [r7, #16]
 8008964:	3601      	adds	r6, #1
 8008966:	4630      	mov	r0, r6
 8008968:	b003      	add	sp, #12
 800896a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896e:	6812      	ldr	r2, [r2, #0]
 8008970:	3b04      	subs	r3, #4
 8008972:	2a00      	cmp	r2, #0
 8008974:	d1cb      	bne.n	800890e <quorem+0x94>
 8008976:	3c01      	subs	r4, #1
 8008978:	e7c6      	b.n	8008908 <quorem+0x8e>
 800897a:	6812      	ldr	r2, [r2, #0]
 800897c:	3b04      	subs	r3, #4
 800897e:	2a00      	cmp	r2, #0
 8008980:	d1ef      	bne.n	8008962 <quorem+0xe8>
 8008982:	3c01      	subs	r4, #1
 8008984:	e7ea      	b.n	800895c <quorem+0xe2>
 8008986:	2000      	movs	r0, #0
 8008988:	e7ee      	b.n	8008968 <quorem+0xee>
 800898a:	0000      	movs	r0, r0
 800898c:	0000      	movs	r0, r0
	...

08008990 <_dtoa_r>:
 8008990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008994:	69c7      	ldr	r7, [r0, #28]
 8008996:	b097      	sub	sp, #92	@ 0x5c
 8008998:	ed8d 0b04 	vstr	d0, [sp, #16]
 800899c:	ec55 4b10 	vmov	r4, r5, d0
 80089a0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80089a2:	9107      	str	r1, [sp, #28]
 80089a4:	4681      	mov	r9, r0
 80089a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80089a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80089aa:	b97f      	cbnz	r7, 80089cc <_dtoa_r+0x3c>
 80089ac:	2010      	movs	r0, #16
 80089ae:	f000 fe09 	bl	80095c4 <malloc>
 80089b2:	4602      	mov	r2, r0
 80089b4:	f8c9 001c 	str.w	r0, [r9, #28]
 80089b8:	b920      	cbnz	r0, 80089c4 <_dtoa_r+0x34>
 80089ba:	4ba9      	ldr	r3, [pc, #676]	@ (8008c60 <_dtoa_r+0x2d0>)
 80089bc:	21ef      	movs	r1, #239	@ 0xef
 80089be:	48a9      	ldr	r0, [pc, #676]	@ (8008c64 <_dtoa_r+0x2d4>)
 80089c0:	f001 fb70 	bl	800a0a4 <__assert_func>
 80089c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80089c8:	6007      	str	r7, [r0, #0]
 80089ca:	60c7      	str	r7, [r0, #12]
 80089cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80089d0:	6819      	ldr	r1, [r3, #0]
 80089d2:	b159      	cbz	r1, 80089ec <_dtoa_r+0x5c>
 80089d4:	685a      	ldr	r2, [r3, #4]
 80089d6:	604a      	str	r2, [r1, #4]
 80089d8:	2301      	movs	r3, #1
 80089da:	4093      	lsls	r3, r2
 80089dc:	608b      	str	r3, [r1, #8]
 80089de:	4648      	mov	r0, r9
 80089e0:	f000 fee6 	bl	80097b0 <_Bfree>
 80089e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80089e8:	2200      	movs	r2, #0
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	1e2b      	subs	r3, r5, #0
 80089ee:	bfb9      	ittee	lt
 80089f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80089f4:	9305      	strlt	r3, [sp, #20]
 80089f6:	2300      	movge	r3, #0
 80089f8:	6033      	strge	r3, [r6, #0]
 80089fa:	9f05      	ldr	r7, [sp, #20]
 80089fc:	4b9a      	ldr	r3, [pc, #616]	@ (8008c68 <_dtoa_r+0x2d8>)
 80089fe:	bfbc      	itt	lt
 8008a00:	2201      	movlt	r2, #1
 8008a02:	6032      	strlt	r2, [r6, #0]
 8008a04:	43bb      	bics	r3, r7
 8008a06:	d112      	bne.n	8008a2e <_dtoa_r+0x9e>
 8008a08:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008a0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008a0e:	6013      	str	r3, [r2, #0]
 8008a10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008a14:	4323      	orrs	r3, r4
 8008a16:	f000 855a 	beq.w	80094ce <_dtoa_r+0xb3e>
 8008a1a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a1c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008c7c <_dtoa_r+0x2ec>
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f000 855c 	beq.w	80094de <_dtoa_r+0xb4e>
 8008a26:	f10a 0303 	add.w	r3, sl, #3
 8008a2a:	f000 bd56 	b.w	80094da <_dtoa_r+0xb4a>
 8008a2e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008a32:	2200      	movs	r2, #0
 8008a34:	ec51 0b17 	vmov	r0, r1, d7
 8008a38:	2300      	movs	r3, #0
 8008a3a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008a3e:	f7f8 f853 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a42:	4680      	mov	r8, r0
 8008a44:	b158      	cbz	r0, 8008a5e <_dtoa_r+0xce>
 8008a46:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008a48:	2301      	movs	r3, #1
 8008a4a:	6013      	str	r3, [r2, #0]
 8008a4c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a4e:	b113      	cbz	r3, 8008a56 <_dtoa_r+0xc6>
 8008a50:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008a52:	4b86      	ldr	r3, [pc, #536]	@ (8008c6c <_dtoa_r+0x2dc>)
 8008a54:	6013      	str	r3, [r2, #0]
 8008a56:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008c80 <_dtoa_r+0x2f0>
 8008a5a:	f000 bd40 	b.w	80094de <_dtoa_r+0xb4e>
 8008a5e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008a62:	aa14      	add	r2, sp, #80	@ 0x50
 8008a64:	a915      	add	r1, sp, #84	@ 0x54
 8008a66:	4648      	mov	r0, r9
 8008a68:	f001 f984 	bl	8009d74 <__d2b>
 8008a6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008a70:	9002      	str	r0, [sp, #8]
 8008a72:	2e00      	cmp	r6, #0
 8008a74:	d078      	beq.n	8008b68 <_dtoa_r+0x1d8>
 8008a76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a78:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008a7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008a84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008a88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008a8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008a90:	4619      	mov	r1, r3
 8008a92:	2200      	movs	r2, #0
 8008a94:	4b76      	ldr	r3, [pc, #472]	@ (8008c70 <_dtoa_r+0x2e0>)
 8008a96:	f7f7 fc07 	bl	80002a8 <__aeabi_dsub>
 8008a9a:	a36b      	add	r3, pc, #428	@ (adr r3, 8008c48 <_dtoa_r+0x2b8>)
 8008a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa0:	f7f7 fdba 	bl	8000618 <__aeabi_dmul>
 8008aa4:	a36a      	add	r3, pc, #424	@ (adr r3, 8008c50 <_dtoa_r+0x2c0>)
 8008aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aaa:	f7f7 fbff 	bl	80002ac <__adddf3>
 8008aae:	4604      	mov	r4, r0
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	460d      	mov	r5, r1
 8008ab4:	f7f7 fd46 	bl	8000544 <__aeabi_i2d>
 8008ab8:	a367      	add	r3, pc, #412	@ (adr r3, 8008c58 <_dtoa_r+0x2c8>)
 8008aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abe:	f7f7 fdab 	bl	8000618 <__aeabi_dmul>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	4629      	mov	r1, r5
 8008aca:	f7f7 fbef 	bl	80002ac <__adddf3>
 8008ace:	4604      	mov	r4, r0
 8008ad0:	460d      	mov	r5, r1
 8008ad2:	f7f8 f851 	bl	8000b78 <__aeabi_d2iz>
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	4607      	mov	r7, r0
 8008ada:	2300      	movs	r3, #0
 8008adc:	4620      	mov	r0, r4
 8008ade:	4629      	mov	r1, r5
 8008ae0:	f7f8 f80c 	bl	8000afc <__aeabi_dcmplt>
 8008ae4:	b140      	cbz	r0, 8008af8 <_dtoa_r+0x168>
 8008ae6:	4638      	mov	r0, r7
 8008ae8:	f7f7 fd2c 	bl	8000544 <__aeabi_i2d>
 8008aec:	4622      	mov	r2, r4
 8008aee:	462b      	mov	r3, r5
 8008af0:	f7f7 fffa 	bl	8000ae8 <__aeabi_dcmpeq>
 8008af4:	b900      	cbnz	r0, 8008af8 <_dtoa_r+0x168>
 8008af6:	3f01      	subs	r7, #1
 8008af8:	2f16      	cmp	r7, #22
 8008afa:	d852      	bhi.n	8008ba2 <_dtoa_r+0x212>
 8008afc:	4b5d      	ldr	r3, [pc, #372]	@ (8008c74 <_dtoa_r+0x2e4>)
 8008afe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008b0a:	f7f7 fff7 	bl	8000afc <__aeabi_dcmplt>
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d049      	beq.n	8008ba6 <_dtoa_r+0x216>
 8008b12:	3f01      	subs	r7, #1
 8008b14:	2300      	movs	r3, #0
 8008b16:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b18:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008b1a:	1b9b      	subs	r3, r3, r6
 8008b1c:	1e5a      	subs	r2, r3, #1
 8008b1e:	bf45      	ittet	mi
 8008b20:	f1c3 0301 	rsbmi	r3, r3, #1
 8008b24:	9300      	strmi	r3, [sp, #0]
 8008b26:	2300      	movpl	r3, #0
 8008b28:	2300      	movmi	r3, #0
 8008b2a:	9206      	str	r2, [sp, #24]
 8008b2c:	bf54      	ite	pl
 8008b2e:	9300      	strpl	r3, [sp, #0]
 8008b30:	9306      	strmi	r3, [sp, #24]
 8008b32:	2f00      	cmp	r7, #0
 8008b34:	db39      	blt.n	8008baa <_dtoa_r+0x21a>
 8008b36:	9b06      	ldr	r3, [sp, #24]
 8008b38:	970d      	str	r7, [sp, #52]	@ 0x34
 8008b3a:	443b      	add	r3, r7
 8008b3c:	9306      	str	r3, [sp, #24]
 8008b3e:	2300      	movs	r3, #0
 8008b40:	9308      	str	r3, [sp, #32]
 8008b42:	9b07      	ldr	r3, [sp, #28]
 8008b44:	2b09      	cmp	r3, #9
 8008b46:	d863      	bhi.n	8008c10 <_dtoa_r+0x280>
 8008b48:	2b05      	cmp	r3, #5
 8008b4a:	bfc4      	itt	gt
 8008b4c:	3b04      	subgt	r3, #4
 8008b4e:	9307      	strgt	r3, [sp, #28]
 8008b50:	9b07      	ldr	r3, [sp, #28]
 8008b52:	f1a3 0302 	sub.w	r3, r3, #2
 8008b56:	bfcc      	ite	gt
 8008b58:	2400      	movgt	r4, #0
 8008b5a:	2401      	movle	r4, #1
 8008b5c:	2b03      	cmp	r3, #3
 8008b5e:	d863      	bhi.n	8008c28 <_dtoa_r+0x298>
 8008b60:	e8df f003 	tbb	[pc, r3]
 8008b64:	2b375452 	.word	0x2b375452
 8008b68:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008b6c:	441e      	add	r6, r3
 8008b6e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008b72:	2b20      	cmp	r3, #32
 8008b74:	bfc1      	itttt	gt
 8008b76:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008b7a:	409f      	lslgt	r7, r3
 8008b7c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008b80:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008b84:	bfd6      	itet	le
 8008b86:	f1c3 0320 	rsble	r3, r3, #32
 8008b8a:	ea47 0003 	orrgt.w	r0, r7, r3
 8008b8e:	fa04 f003 	lslle.w	r0, r4, r3
 8008b92:	f7f7 fcc7 	bl	8000524 <__aeabi_ui2d>
 8008b96:	2201      	movs	r2, #1
 8008b98:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008b9c:	3e01      	subs	r6, #1
 8008b9e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008ba0:	e776      	b.n	8008a90 <_dtoa_r+0x100>
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e7b7      	b.n	8008b16 <_dtoa_r+0x186>
 8008ba6:	9010      	str	r0, [sp, #64]	@ 0x40
 8008ba8:	e7b6      	b.n	8008b18 <_dtoa_r+0x188>
 8008baa:	9b00      	ldr	r3, [sp, #0]
 8008bac:	1bdb      	subs	r3, r3, r7
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	427b      	negs	r3, r7
 8008bb2:	9308      	str	r3, [sp, #32]
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	930d      	str	r3, [sp, #52]	@ 0x34
 8008bb8:	e7c3      	b.n	8008b42 <_dtoa_r+0x1b2>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bc0:	eb07 0b03 	add.w	fp, r7, r3
 8008bc4:	f10b 0301 	add.w	r3, fp, #1
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	9303      	str	r3, [sp, #12]
 8008bcc:	bfb8      	it	lt
 8008bce:	2301      	movlt	r3, #1
 8008bd0:	e006      	b.n	8008be0 <_dtoa_r+0x250>
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	dd28      	ble.n	8008c2e <_dtoa_r+0x29e>
 8008bdc:	469b      	mov	fp, r3
 8008bde:	9303      	str	r3, [sp, #12]
 8008be0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008be4:	2100      	movs	r1, #0
 8008be6:	2204      	movs	r2, #4
 8008be8:	f102 0514 	add.w	r5, r2, #20
 8008bec:	429d      	cmp	r5, r3
 8008bee:	d926      	bls.n	8008c3e <_dtoa_r+0x2ae>
 8008bf0:	6041      	str	r1, [r0, #4]
 8008bf2:	4648      	mov	r0, r9
 8008bf4:	f000 fd9c 	bl	8009730 <_Balloc>
 8008bf8:	4682      	mov	sl, r0
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d142      	bne.n	8008c84 <_dtoa_r+0x2f4>
 8008bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8008c78 <_dtoa_r+0x2e8>)
 8008c00:	4602      	mov	r2, r0
 8008c02:	f240 11af 	movw	r1, #431	@ 0x1af
 8008c06:	e6da      	b.n	80089be <_dtoa_r+0x2e>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	e7e3      	b.n	8008bd4 <_dtoa_r+0x244>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	e7d5      	b.n	8008bbc <_dtoa_r+0x22c>
 8008c10:	2401      	movs	r4, #1
 8008c12:	2300      	movs	r3, #0
 8008c14:	9307      	str	r3, [sp, #28]
 8008c16:	9409      	str	r4, [sp, #36]	@ 0x24
 8008c18:	f04f 3bff 	mov.w	fp, #4294967295
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008c22:	2312      	movs	r3, #18
 8008c24:	920c      	str	r2, [sp, #48]	@ 0x30
 8008c26:	e7db      	b.n	8008be0 <_dtoa_r+0x250>
 8008c28:	2301      	movs	r3, #1
 8008c2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c2c:	e7f4      	b.n	8008c18 <_dtoa_r+0x288>
 8008c2e:	f04f 0b01 	mov.w	fp, #1
 8008c32:	f8cd b00c 	str.w	fp, [sp, #12]
 8008c36:	465b      	mov	r3, fp
 8008c38:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008c3c:	e7d0      	b.n	8008be0 <_dtoa_r+0x250>
 8008c3e:	3101      	adds	r1, #1
 8008c40:	0052      	lsls	r2, r2, #1
 8008c42:	e7d1      	b.n	8008be8 <_dtoa_r+0x258>
 8008c44:	f3af 8000 	nop.w
 8008c48:	636f4361 	.word	0x636f4361
 8008c4c:	3fd287a7 	.word	0x3fd287a7
 8008c50:	8b60c8b3 	.word	0x8b60c8b3
 8008c54:	3fc68a28 	.word	0x3fc68a28
 8008c58:	509f79fb 	.word	0x509f79fb
 8008c5c:	3fd34413 	.word	0x3fd34413
 8008c60:	0801c52d 	.word	0x0801c52d
 8008c64:	0801c544 	.word	0x0801c544
 8008c68:	7ff00000 	.word	0x7ff00000
 8008c6c:	0801c4fd 	.word	0x0801c4fd
 8008c70:	3ff80000 	.word	0x3ff80000
 8008c74:	0801c698 	.word	0x0801c698
 8008c78:	0801c59c 	.word	0x0801c59c
 8008c7c:	0801c529 	.word	0x0801c529
 8008c80:	0801c4fc 	.word	0x0801c4fc
 8008c84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008c88:	6018      	str	r0, [r3, #0]
 8008c8a:	9b03      	ldr	r3, [sp, #12]
 8008c8c:	2b0e      	cmp	r3, #14
 8008c8e:	f200 80a1 	bhi.w	8008dd4 <_dtoa_r+0x444>
 8008c92:	2c00      	cmp	r4, #0
 8008c94:	f000 809e 	beq.w	8008dd4 <_dtoa_r+0x444>
 8008c98:	2f00      	cmp	r7, #0
 8008c9a:	dd33      	ble.n	8008d04 <_dtoa_r+0x374>
 8008c9c:	4b9c      	ldr	r3, [pc, #624]	@ (8008f10 <_dtoa_r+0x580>)
 8008c9e:	f007 020f 	and.w	r2, r7, #15
 8008ca2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ca6:	ed93 7b00 	vldr	d7, [r3]
 8008caa:	05f8      	lsls	r0, r7, #23
 8008cac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008cb0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008cb4:	d516      	bpl.n	8008ce4 <_dtoa_r+0x354>
 8008cb6:	4b97      	ldr	r3, [pc, #604]	@ (8008f14 <_dtoa_r+0x584>)
 8008cb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008cbc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008cc0:	f7f7 fdd4 	bl	800086c <__aeabi_ddiv>
 8008cc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cc8:	f004 040f 	and.w	r4, r4, #15
 8008ccc:	2603      	movs	r6, #3
 8008cce:	4d91      	ldr	r5, [pc, #580]	@ (8008f14 <_dtoa_r+0x584>)
 8008cd0:	b954      	cbnz	r4, 8008ce8 <_dtoa_r+0x358>
 8008cd2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008cd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cda:	f7f7 fdc7 	bl	800086c <__aeabi_ddiv>
 8008cde:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ce2:	e028      	b.n	8008d36 <_dtoa_r+0x3a6>
 8008ce4:	2602      	movs	r6, #2
 8008ce6:	e7f2      	b.n	8008cce <_dtoa_r+0x33e>
 8008ce8:	07e1      	lsls	r1, r4, #31
 8008cea:	d508      	bpl.n	8008cfe <_dtoa_r+0x36e>
 8008cec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008cf0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008cf4:	f7f7 fc90 	bl	8000618 <__aeabi_dmul>
 8008cf8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008cfc:	3601      	adds	r6, #1
 8008cfe:	1064      	asrs	r4, r4, #1
 8008d00:	3508      	adds	r5, #8
 8008d02:	e7e5      	b.n	8008cd0 <_dtoa_r+0x340>
 8008d04:	f000 80af 	beq.w	8008e66 <_dtoa_r+0x4d6>
 8008d08:	427c      	negs	r4, r7
 8008d0a:	4b81      	ldr	r3, [pc, #516]	@ (8008f10 <_dtoa_r+0x580>)
 8008d0c:	4d81      	ldr	r5, [pc, #516]	@ (8008f14 <_dtoa_r+0x584>)
 8008d0e:	f004 020f 	and.w	r2, r4, #15
 8008d12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008d1e:	f7f7 fc7b 	bl	8000618 <__aeabi_dmul>
 8008d22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d26:	1124      	asrs	r4, r4, #4
 8008d28:	2300      	movs	r3, #0
 8008d2a:	2602      	movs	r6, #2
 8008d2c:	2c00      	cmp	r4, #0
 8008d2e:	f040 808f 	bne.w	8008e50 <_dtoa_r+0x4c0>
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1d3      	bne.n	8008cde <_dtoa_r+0x34e>
 8008d36:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008d38:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f000 8094 	beq.w	8008e6a <_dtoa_r+0x4da>
 8008d42:	4b75      	ldr	r3, [pc, #468]	@ (8008f18 <_dtoa_r+0x588>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	4620      	mov	r0, r4
 8008d48:	4629      	mov	r1, r5
 8008d4a:	f7f7 fed7 	bl	8000afc <__aeabi_dcmplt>
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	f000 808b 	beq.w	8008e6a <_dtoa_r+0x4da>
 8008d54:	9b03      	ldr	r3, [sp, #12]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	f000 8087 	beq.w	8008e6a <_dtoa_r+0x4da>
 8008d5c:	f1bb 0f00 	cmp.w	fp, #0
 8008d60:	dd34      	ble.n	8008dcc <_dtoa_r+0x43c>
 8008d62:	4620      	mov	r0, r4
 8008d64:	4b6d      	ldr	r3, [pc, #436]	@ (8008f1c <_dtoa_r+0x58c>)
 8008d66:	2200      	movs	r2, #0
 8008d68:	4629      	mov	r1, r5
 8008d6a:	f7f7 fc55 	bl	8000618 <__aeabi_dmul>
 8008d6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d72:	f107 38ff 	add.w	r8, r7, #4294967295
 8008d76:	3601      	adds	r6, #1
 8008d78:	465c      	mov	r4, fp
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	f7f7 fbe2 	bl	8000544 <__aeabi_i2d>
 8008d80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d84:	f7f7 fc48 	bl	8000618 <__aeabi_dmul>
 8008d88:	4b65      	ldr	r3, [pc, #404]	@ (8008f20 <_dtoa_r+0x590>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f7f7 fa8e 	bl	80002ac <__adddf3>
 8008d90:	4605      	mov	r5, r0
 8008d92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008d96:	2c00      	cmp	r4, #0
 8008d98:	d16a      	bne.n	8008e70 <_dtoa_r+0x4e0>
 8008d9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d9e:	4b61      	ldr	r3, [pc, #388]	@ (8008f24 <_dtoa_r+0x594>)
 8008da0:	2200      	movs	r2, #0
 8008da2:	f7f7 fa81 	bl	80002a8 <__aeabi_dsub>
 8008da6:	4602      	mov	r2, r0
 8008da8:	460b      	mov	r3, r1
 8008daa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008dae:	462a      	mov	r2, r5
 8008db0:	4633      	mov	r3, r6
 8008db2:	f7f7 fec1 	bl	8000b38 <__aeabi_dcmpgt>
 8008db6:	2800      	cmp	r0, #0
 8008db8:	f040 8298 	bne.w	80092ec <_dtoa_r+0x95c>
 8008dbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008dc0:	462a      	mov	r2, r5
 8008dc2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008dc6:	f7f7 fe99 	bl	8000afc <__aeabi_dcmplt>
 8008dca:	bb38      	cbnz	r0, 8008e1c <_dtoa_r+0x48c>
 8008dcc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008dd0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008dd4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f2c0 8157 	blt.w	800908a <_dtoa_r+0x6fa>
 8008ddc:	2f0e      	cmp	r7, #14
 8008dde:	f300 8154 	bgt.w	800908a <_dtoa_r+0x6fa>
 8008de2:	4b4b      	ldr	r3, [pc, #300]	@ (8008f10 <_dtoa_r+0x580>)
 8008de4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008de8:	ed93 7b00 	vldr	d7, [r3]
 8008dec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	ed8d 7b00 	vstr	d7, [sp]
 8008df4:	f280 80e5 	bge.w	8008fc2 <_dtoa_r+0x632>
 8008df8:	9b03      	ldr	r3, [sp, #12]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	f300 80e1 	bgt.w	8008fc2 <_dtoa_r+0x632>
 8008e00:	d10c      	bne.n	8008e1c <_dtoa_r+0x48c>
 8008e02:	4b48      	ldr	r3, [pc, #288]	@ (8008f24 <_dtoa_r+0x594>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	ec51 0b17 	vmov	r0, r1, d7
 8008e0a:	f7f7 fc05 	bl	8000618 <__aeabi_dmul>
 8008e0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e12:	f7f7 fe87 	bl	8000b24 <__aeabi_dcmpge>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	f000 8266 	beq.w	80092e8 <_dtoa_r+0x958>
 8008e1c:	2400      	movs	r4, #0
 8008e1e:	4625      	mov	r5, r4
 8008e20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e22:	4656      	mov	r6, sl
 8008e24:	ea6f 0803 	mvn.w	r8, r3
 8008e28:	2700      	movs	r7, #0
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	4648      	mov	r0, r9
 8008e2e:	f000 fcbf 	bl	80097b0 <_Bfree>
 8008e32:	2d00      	cmp	r5, #0
 8008e34:	f000 80bd 	beq.w	8008fb2 <_dtoa_r+0x622>
 8008e38:	b12f      	cbz	r7, 8008e46 <_dtoa_r+0x4b6>
 8008e3a:	42af      	cmp	r7, r5
 8008e3c:	d003      	beq.n	8008e46 <_dtoa_r+0x4b6>
 8008e3e:	4639      	mov	r1, r7
 8008e40:	4648      	mov	r0, r9
 8008e42:	f000 fcb5 	bl	80097b0 <_Bfree>
 8008e46:	4629      	mov	r1, r5
 8008e48:	4648      	mov	r0, r9
 8008e4a:	f000 fcb1 	bl	80097b0 <_Bfree>
 8008e4e:	e0b0      	b.n	8008fb2 <_dtoa_r+0x622>
 8008e50:	07e2      	lsls	r2, r4, #31
 8008e52:	d505      	bpl.n	8008e60 <_dtoa_r+0x4d0>
 8008e54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e58:	f7f7 fbde 	bl	8000618 <__aeabi_dmul>
 8008e5c:	3601      	adds	r6, #1
 8008e5e:	2301      	movs	r3, #1
 8008e60:	1064      	asrs	r4, r4, #1
 8008e62:	3508      	adds	r5, #8
 8008e64:	e762      	b.n	8008d2c <_dtoa_r+0x39c>
 8008e66:	2602      	movs	r6, #2
 8008e68:	e765      	b.n	8008d36 <_dtoa_r+0x3a6>
 8008e6a:	9c03      	ldr	r4, [sp, #12]
 8008e6c:	46b8      	mov	r8, r7
 8008e6e:	e784      	b.n	8008d7a <_dtoa_r+0x3ea>
 8008e70:	4b27      	ldr	r3, [pc, #156]	@ (8008f10 <_dtoa_r+0x580>)
 8008e72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e7c:	4454      	add	r4, sl
 8008e7e:	2900      	cmp	r1, #0
 8008e80:	d054      	beq.n	8008f2c <_dtoa_r+0x59c>
 8008e82:	4929      	ldr	r1, [pc, #164]	@ (8008f28 <_dtoa_r+0x598>)
 8008e84:	2000      	movs	r0, #0
 8008e86:	f7f7 fcf1 	bl	800086c <__aeabi_ddiv>
 8008e8a:	4633      	mov	r3, r6
 8008e8c:	462a      	mov	r2, r5
 8008e8e:	f7f7 fa0b 	bl	80002a8 <__aeabi_dsub>
 8008e92:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008e96:	4656      	mov	r6, sl
 8008e98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008e9c:	f7f7 fe6c 	bl	8000b78 <__aeabi_d2iz>
 8008ea0:	4605      	mov	r5, r0
 8008ea2:	f7f7 fb4f 	bl	8000544 <__aeabi_i2d>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008eae:	f7f7 f9fb 	bl	80002a8 <__aeabi_dsub>
 8008eb2:	3530      	adds	r5, #48	@ 0x30
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008ebc:	f806 5b01 	strb.w	r5, [r6], #1
 8008ec0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008ec4:	f7f7 fe1a 	bl	8000afc <__aeabi_dcmplt>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	d172      	bne.n	8008fb2 <_dtoa_r+0x622>
 8008ecc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ed0:	4911      	ldr	r1, [pc, #68]	@ (8008f18 <_dtoa_r+0x588>)
 8008ed2:	2000      	movs	r0, #0
 8008ed4:	f7f7 f9e8 	bl	80002a8 <__aeabi_dsub>
 8008ed8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008edc:	f7f7 fe0e 	bl	8000afc <__aeabi_dcmplt>
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	f040 80b4 	bne.w	800904e <_dtoa_r+0x6be>
 8008ee6:	42a6      	cmp	r6, r4
 8008ee8:	f43f af70 	beq.w	8008dcc <_dtoa_r+0x43c>
 8008eec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8008f1c <_dtoa_r+0x58c>)
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	f7f7 fb90 	bl	8000618 <__aeabi_dmul>
 8008ef8:	4b08      	ldr	r3, [pc, #32]	@ (8008f1c <_dtoa_r+0x58c>)
 8008efa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008efe:	2200      	movs	r2, #0
 8008f00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f04:	f7f7 fb88 	bl	8000618 <__aeabi_dmul>
 8008f08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f0c:	e7c4      	b.n	8008e98 <_dtoa_r+0x508>
 8008f0e:	bf00      	nop
 8008f10:	0801c698 	.word	0x0801c698
 8008f14:	0801c670 	.word	0x0801c670
 8008f18:	3ff00000 	.word	0x3ff00000
 8008f1c:	40240000 	.word	0x40240000
 8008f20:	401c0000 	.word	0x401c0000
 8008f24:	40140000 	.word	0x40140000
 8008f28:	3fe00000 	.word	0x3fe00000
 8008f2c:	4631      	mov	r1, r6
 8008f2e:	4628      	mov	r0, r5
 8008f30:	f7f7 fb72 	bl	8000618 <__aeabi_dmul>
 8008f34:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008f38:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008f3a:	4656      	mov	r6, sl
 8008f3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f40:	f7f7 fe1a 	bl	8000b78 <__aeabi_d2iz>
 8008f44:	4605      	mov	r5, r0
 8008f46:	f7f7 fafd 	bl	8000544 <__aeabi_i2d>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f52:	f7f7 f9a9 	bl	80002a8 <__aeabi_dsub>
 8008f56:	3530      	adds	r5, #48	@ 0x30
 8008f58:	f806 5b01 	strb.w	r5, [r6], #1
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	460b      	mov	r3, r1
 8008f60:	42a6      	cmp	r6, r4
 8008f62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008f66:	f04f 0200 	mov.w	r2, #0
 8008f6a:	d124      	bne.n	8008fb6 <_dtoa_r+0x626>
 8008f6c:	4baf      	ldr	r3, [pc, #700]	@ (800922c <_dtoa_r+0x89c>)
 8008f6e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008f72:	f7f7 f99b 	bl	80002ac <__adddf3>
 8008f76:	4602      	mov	r2, r0
 8008f78:	460b      	mov	r3, r1
 8008f7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f7e:	f7f7 fddb 	bl	8000b38 <__aeabi_dcmpgt>
 8008f82:	2800      	cmp	r0, #0
 8008f84:	d163      	bne.n	800904e <_dtoa_r+0x6be>
 8008f86:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008f8a:	49a8      	ldr	r1, [pc, #672]	@ (800922c <_dtoa_r+0x89c>)
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	f7f7 f98b 	bl	80002a8 <__aeabi_dsub>
 8008f92:	4602      	mov	r2, r0
 8008f94:	460b      	mov	r3, r1
 8008f96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f9a:	f7f7 fdaf 	bl	8000afc <__aeabi_dcmplt>
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	f43f af14 	beq.w	8008dcc <_dtoa_r+0x43c>
 8008fa4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008fa6:	1e73      	subs	r3, r6, #1
 8008fa8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008faa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008fae:	2b30      	cmp	r3, #48	@ 0x30
 8008fb0:	d0f8      	beq.n	8008fa4 <_dtoa_r+0x614>
 8008fb2:	4647      	mov	r7, r8
 8008fb4:	e03b      	b.n	800902e <_dtoa_r+0x69e>
 8008fb6:	4b9e      	ldr	r3, [pc, #632]	@ (8009230 <_dtoa_r+0x8a0>)
 8008fb8:	f7f7 fb2e 	bl	8000618 <__aeabi_dmul>
 8008fbc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fc0:	e7bc      	b.n	8008f3c <_dtoa_r+0x5ac>
 8008fc2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008fc6:	4656      	mov	r6, sl
 8008fc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fcc:	4620      	mov	r0, r4
 8008fce:	4629      	mov	r1, r5
 8008fd0:	f7f7 fc4c 	bl	800086c <__aeabi_ddiv>
 8008fd4:	f7f7 fdd0 	bl	8000b78 <__aeabi_d2iz>
 8008fd8:	4680      	mov	r8, r0
 8008fda:	f7f7 fab3 	bl	8000544 <__aeabi_i2d>
 8008fde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fe2:	f7f7 fb19 	bl	8000618 <__aeabi_dmul>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	4620      	mov	r0, r4
 8008fec:	4629      	mov	r1, r5
 8008fee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008ff2:	f7f7 f959 	bl	80002a8 <__aeabi_dsub>
 8008ff6:	f806 4b01 	strb.w	r4, [r6], #1
 8008ffa:	9d03      	ldr	r5, [sp, #12]
 8008ffc:	eba6 040a 	sub.w	r4, r6, sl
 8009000:	42a5      	cmp	r5, r4
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	d133      	bne.n	8009070 <_dtoa_r+0x6e0>
 8009008:	f7f7 f950 	bl	80002ac <__adddf3>
 800900c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009010:	4604      	mov	r4, r0
 8009012:	460d      	mov	r5, r1
 8009014:	f7f7 fd90 	bl	8000b38 <__aeabi_dcmpgt>
 8009018:	b9c0      	cbnz	r0, 800904c <_dtoa_r+0x6bc>
 800901a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800901e:	4620      	mov	r0, r4
 8009020:	4629      	mov	r1, r5
 8009022:	f7f7 fd61 	bl	8000ae8 <__aeabi_dcmpeq>
 8009026:	b110      	cbz	r0, 800902e <_dtoa_r+0x69e>
 8009028:	f018 0f01 	tst.w	r8, #1
 800902c:	d10e      	bne.n	800904c <_dtoa_r+0x6bc>
 800902e:	9902      	ldr	r1, [sp, #8]
 8009030:	4648      	mov	r0, r9
 8009032:	f000 fbbd 	bl	80097b0 <_Bfree>
 8009036:	2300      	movs	r3, #0
 8009038:	7033      	strb	r3, [r6, #0]
 800903a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800903c:	3701      	adds	r7, #1
 800903e:	601f      	str	r7, [r3, #0]
 8009040:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009042:	2b00      	cmp	r3, #0
 8009044:	f000 824b 	beq.w	80094de <_dtoa_r+0xb4e>
 8009048:	601e      	str	r6, [r3, #0]
 800904a:	e248      	b.n	80094de <_dtoa_r+0xb4e>
 800904c:	46b8      	mov	r8, r7
 800904e:	4633      	mov	r3, r6
 8009050:	461e      	mov	r6, r3
 8009052:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009056:	2a39      	cmp	r2, #57	@ 0x39
 8009058:	d106      	bne.n	8009068 <_dtoa_r+0x6d8>
 800905a:	459a      	cmp	sl, r3
 800905c:	d1f8      	bne.n	8009050 <_dtoa_r+0x6c0>
 800905e:	2230      	movs	r2, #48	@ 0x30
 8009060:	f108 0801 	add.w	r8, r8, #1
 8009064:	f88a 2000 	strb.w	r2, [sl]
 8009068:	781a      	ldrb	r2, [r3, #0]
 800906a:	3201      	adds	r2, #1
 800906c:	701a      	strb	r2, [r3, #0]
 800906e:	e7a0      	b.n	8008fb2 <_dtoa_r+0x622>
 8009070:	4b6f      	ldr	r3, [pc, #444]	@ (8009230 <_dtoa_r+0x8a0>)
 8009072:	2200      	movs	r2, #0
 8009074:	f7f7 fad0 	bl	8000618 <__aeabi_dmul>
 8009078:	2200      	movs	r2, #0
 800907a:	2300      	movs	r3, #0
 800907c:	4604      	mov	r4, r0
 800907e:	460d      	mov	r5, r1
 8009080:	f7f7 fd32 	bl	8000ae8 <__aeabi_dcmpeq>
 8009084:	2800      	cmp	r0, #0
 8009086:	d09f      	beq.n	8008fc8 <_dtoa_r+0x638>
 8009088:	e7d1      	b.n	800902e <_dtoa_r+0x69e>
 800908a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800908c:	2a00      	cmp	r2, #0
 800908e:	f000 80ea 	beq.w	8009266 <_dtoa_r+0x8d6>
 8009092:	9a07      	ldr	r2, [sp, #28]
 8009094:	2a01      	cmp	r2, #1
 8009096:	f300 80cd 	bgt.w	8009234 <_dtoa_r+0x8a4>
 800909a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800909c:	2a00      	cmp	r2, #0
 800909e:	f000 80c1 	beq.w	8009224 <_dtoa_r+0x894>
 80090a2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80090a6:	9c08      	ldr	r4, [sp, #32]
 80090a8:	9e00      	ldr	r6, [sp, #0]
 80090aa:	9a00      	ldr	r2, [sp, #0]
 80090ac:	441a      	add	r2, r3
 80090ae:	9200      	str	r2, [sp, #0]
 80090b0:	9a06      	ldr	r2, [sp, #24]
 80090b2:	2101      	movs	r1, #1
 80090b4:	441a      	add	r2, r3
 80090b6:	4648      	mov	r0, r9
 80090b8:	9206      	str	r2, [sp, #24]
 80090ba:	f000 fc2d 	bl	8009918 <__i2b>
 80090be:	4605      	mov	r5, r0
 80090c0:	b166      	cbz	r6, 80090dc <_dtoa_r+0x74c>
 80090c2:	9b06      	ldr	r3, [sp, #24]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	dd09      	ble.n	80090dc <_dtoa_r+0x74c>
 80090c8:	42b3      	cmp	r3, r6
 80090ca:	9a00      	ldr	r2, [sp, #0]
 80090cc:	bfa8      	it	ge
 80090ce:	4633      	movge	r3, r6
 80090d0:	1ad2      	subs	r2, r2, r3
 80090d2:	9200      	str	r2, [sp, #0]
 80090d4:	9a06      	ldr	r2, [sp, #24]
 80090d6:	1af6      	subs	r6, r6, r3
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	9306      	str	r3, [sp, #24]
 80090dc:	9b08      	ldr	r3, [sp, #32]
 80090de:	b30b      	cbz	r3, 8009124 <_dtoa_r+0x794>
 80090e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 80c6 	beq.w	8009274 <_dtoa_r+0x8e4>
 80090e8:	2c00      	cmp	r4, #0
 80090ea:	f000 80c0 	beq.w	800926e <_dtoa_r+0x8de>
 80090ee:	4629      	mov	r1, r5
 80090f0:	4622      	mov	r2, r4
 80090f2:	4648      	mov	r0, r9
 80090f4:	f000 fcc8 	bl	8009a88 <__pow5mult>
 80090f8:	9a02      	ldr	r2, [sp, #8]
 80090fa:	4601      	mov	r1, r0
 80090fc:	4605      	mov	r5, r0
 80090fe:	4648      	mov	r0, r9
 8009100:	f000 fc20 	bl	8009944 <__multiply>
 8009104:	9902      	ldr	r1, [sp, #8]
 8009106:	4680      	mov	r8, r0
 8009108:	4648      	mov	r0, r9
 800910a:	f000 fb51 	bl	80097b0 <_Bfree>
 800910e:	9b08      	ldr	r3, [sp, #32]
 8009110:	1b1b      	subs	r3, r3, r4
 8009112:	9308      	str	r3, [sp, #32]
 8009114:	f000 80b1 	beq.w	800927a <_dtoa_r+0x8ea>
 8009118:	9a08      	ldr	r2, [sp, #32]
 800911a:	4641      	mov	r1, r8
 800911c:	4648      	mov	r0, r9
 800911e:	f000 fcb3 	bl	8009a88 <__pow5mult>
 8009122:	9002      	str	r0, [sp, #8]
 8009124:	2101      	movs	r1, #1
 8009126:	4648      	mov	r0, r9
 8009128:	f000 fbf6 	bl	8009918 <__i2b>
 800912c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800912e:	4604      	mov	r4, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	f000 81d8 	beq.w	80094e6 <_dtoa_r+0xb56>
 8009136:	461a      	mov	r2, r3
 8009138:	4601      	mov	r1, r0
 800913a:	4648      	mov	r0, r9
 800913c:	f000 fca4 	bl	8009a88 <__pow5mult>
 8009140:	9b07      	ldr	r3, [sp, #28]
 8009142:	2b01      	cmp	r3, #1
 8009144:	4604      	mov	r4, r0
 8009146:	f300 809f 	bgt.w	8009288 <_dtoa_r+0x8f8>
 800914a:	9b04      	ldr	r3, [sp, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	f040 8097 	bne.w	8009280 <_dtoa_r+0x8f0>
 8009152:	9b05      	ldr	r3, [sp, #20]
 8009154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009158:	2b00      	cmp	r3, #0
 800915a:	f040 8093 	bne.w	8009284 <_dtoa_r+0x8f4>
 800915e:	9b05      	ldr	r3, [sp, #20]
 8009160:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009164:	0d1b      	lsrs	r3, r3, #20
 8009166:	051b      	lsls	r3, r3, #20
 8009168:	b133      	cbz	r3, 8009178 <_dtoa_r+0x7e8>
 800916a:	9b00      	ldr	r3, [sp, #0]
 800916c:	3301      	adds	r3, #1
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	9b06      	ldr	r3, [sp, #24]
 8009172:	3301      	adds	r3, #1
 8009174:	9306      	str	r3, [sp, #24]
 8009176:	2301      	movs	r3, #1
 8009178:	9308      	str	r3, [sp, #32]
 800917a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800917c:	2b00      	cmp	r3, #0
 800917e:	f000 81b8 	beq.w	80094f2 <_dtoa_r+0xb62>
 8009182:	6923      	ldr	r3, [r4, #16]
 8009184:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009188:	6918      	ldr	r0, [r3, #16]
 800918a:	f000 fb79 	bl	8009880 <__hi0bits>
 800918e:	f1c0 0020 	rsb	r0, r0, #32
 8009192:	9b06      	ldr	r3, [sp, #24]
 8009194:	4418      	add	r0, r3
 8009196:	f010 001f 	ands.w	r0, r0, #31
 800919a:	f000 8082 	beq.w	80092a2 <_dtoa_r+0x912>
 800919e:	f1c0 0320 	rsb	r3, r0, #32
 80091a2:	2b04      	cmp	r3, #4
 80091a4:	dd73      	ble.n	800928e <_dtoa_r+0x8fe>
 80091a6:	9b00      	ldr	r3, [sp, #0]
 80091a8:	f1c0 001c 	rsb	r0, r0, #28
 80091ac:	4403      	add	r3, r0
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	9b06      	ldr	r3, [sp, #24]
 80091b2:	4403      	add	r3, r0
 80091b4:	4406      	add	r6, r0
 80091b6:	9306      	str	r3, [sp, #24]
 80091b8:	9b00      	ldr	r3, [sp, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	dd05      	ble.n	80091ca <_dtoa_r+0x83a>
 80091be:	9902      	ldr	r1, [sp, #8]
 80091c0:	461a      	mov	r2, r3
 80091c2:	4648      	mov	r0, r9
 80091c4:	f000 fcba 	bl	8009b3c <__lshift>
 80091c8:	9002      	str	r0, [sp, #8]
 80091ca:	9b06      	ldr	r3, [sp, #24]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	dd05      	ble.n	80091dc <_dtoa_r+0x84c>
 80091d0:	4621      	mov	r1, r4
 80091d2:	461a      	mov	r2, r3
 80091d4:	4648      	mov	r0, r9
 80091d6:	f000 fcb1 	bl	8009b3c <__lshift>
 80091da:	4604      	mov	r4, r0
 80091dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d061      	beq.n	80092a6 <_dtoa_r+0x916>
 80091e2:	9802      	ldr	r0, [sp, #8]
 80091e4:	4621      	mov	r1, r4
 80091e6:	f000 fd15 	bl	8009c14 <__mcmp>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	da5b      	bge.n	80092a6 <_dtoa_r+0x916>
 80091ee:	2300      	movs	r3, #0
 80091f0:	9902      	ldr	r1, [sp, #8]
 80091f2:	220a      	movs	r2, #10
 80091f4:	4648      	mov	r0, r9
 80091f6:	f000 fafd 	bl	80097f4 <__multadd>
 80091fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091fc:	9002      	str	r0, [sp, #8]
 80091fe:	f107 38ff 	add.w	r8, r7, #4294967295
 8009202:	2b00      	cmp	r3, #0
 8009204:	f000 8177 	beq.w	80094f6 <_dtoa_r+0xb66>
 8009208:	4629      	mov	r1, r5
 800920a:	2300      	movs	r3, #0
 800920c:	220a      	movs	r2, #10
 800920e:	4648      	mov	r0, r9
 8009210:	f000 faf0 	bl	80097f4 <__multadd>
 8009214:	f1bb 0f00 	cmp.w	fp, #0
 8009218:	4605      	mov	r5, r0
 800921a:	dc6f      	bgt.n	80092fc <_dtoa_r+0x96c>
 800921c:	9b07      	ldr	r3, [sp, #28]
 800921e:	2b02      	cmp	r3, #2
 8009220:	dc49      	bgt.n	80092b6 <_dtoa_r+0x926>
 8009222:	e06b      	b.n	80092fc <_dtoa_r+0x96c>
 8009224:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009226:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800922a:	e73c      	b.n	80090a6 <_dtoa_r+0x716>
 800922c:	3fe00000 	.word	0x3fe00000
 8009230:	40240000 	.word	0x40240000
 8009234:	9b03      	ldr	r3, [sp, #12]
 8009236:	1e5c      	subs	r4, r3, #1
 8009238:	9b08      	ldr	r3, [sp, #32]
 800923a:	42a3      	cmp	r3, r4
 800923c:	db09      	blt.n	8009252 <_dtoa_r+0x8c2>
 800923e:	1b1c      	subs	r4, r3, r4
 8009240:	9b03      	ldr	r3, [sp, #12]
 8009242:	2b00      	cmp	r3, #0
 8009244:	f6bf af30 	bge.w	80090a8 <_dtoa_r+0x718>
 8009248:	9b00      	ldr	r3, [sp, #0]
 800924a:	9a03      	ldr	r2, [sp, #12]
 800924c:	1a9e      	subs	r6, r3, r2
 800924e:	2300      	movs	r3, #0
 8009250:	e72b      	b.n	80090aa <_dtoa_r+0x71a>
 8009252:	9b08      	ldr	r3, [sp, #32]
 8009254:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009256:	9408      	str	r4, [sp, #32]
 8009258:	1ae3      	subs	r3, r4, r3
 800925a:	441a      	add	r2, r3
 800925c:	9e00      	ldr	r6, [sp, #0]
 800925e:	9b03      	ldr	r3, [sp, #12]
 8009260:	920d      	str	r2, [sp, #52]	@ 0x34
 8009262:	2400      	movs	r4, #0
 8009264:	e721      	b.n	80090aa <_dtoa_r+0x71a>
 8009266:	9c08      	ldr	r4, [sp, #32]
 8009268:	9e00      	ldr	r6, [sp, #0]
 800926a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800926c:	e728      	b.n	80090c0 <_dtoa_r+0x730>
 800926e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009272:	e751      	b.n	8009118 <_dtoa_r+0x788>
 8009274:	9a08      	ldr	r2, [sp, #32]
 8009276:	9902      	ldr	r1, [sp, #8]
 8009278:	e750      	b.n	800911c <_dtoa_r+0x78c>
 800927a:	f8cd 8008 	str.w	r8, [sp, #8]
 800927e:	e751      	b.n	8009124 <_dtoa_r+0x794>
 8009280:	2300      	movs	r3, #0
 8009282:	e779      	b.n	8009178 <_dtoa_r+0x7e8>
 8009284:	9b04      	ldr	r3, [sp, #16]
 8009286:	e777      	b.n	8009178 <_dtoa_r+0x7e8>
 8009288:	2300      	movs	r3, #0
 800928a:	9308      	str	r3, [sp, #32]
 800928c:	e779      	b.n	8009182 <_dtoa_r+0x7f2>
 800928e:	d093      	beq.n	80091b8 <_dtoa_r+0x828>
 8009290:	9a00      	ldr	r2, [sp, #0]
 8009292:	331c      	adds	r3, #28
 8009294:	441a      	add	r2, r3
 8009296:	9200      	str	r2, [sp, #0]
 8009298:	9a06      	ldr	r2, [sp, #24]
 800929a:	441a      	add	r2, r3
 800929c:	441e      	add	r6, r3
 800929e:	9206      	str	r2, [sp, #24]
 80092a0:	e78a      	b.n	80091b8 <_dtoa_r+0x828>
 80092a2:	4603      	mov	r3, r0
 80092a4:	e7f4      	b.n	8009290 <_dtoa_r+0x900>
 80092a6:	9b03      	ldr	r3, [sp, #12]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	46b8      	mov	r8, r7
 80092ac:	dc20      	bgt.n	80092f0 <_dtoa_r+0x960>
 80092ae:	469b      	mov	fp, r3
 80092b0:	9b07      	ldr	r3, [sp, #28]
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	dd1e      	ble.n	80092f4 <_dtoa_r+0x964>
 80092b6:	f1bb 0f00 	cmp.w	fp, #0
 80092ba:	f47f adb1 	bne.w	8008e20 <_dtoa_r+0x490>
 80092be:	4621      	mov	r1, r4
 80092c0:	465b      	mov	r3, fp
 80092c2:	2205      	movs	r2, #5
 80092c4:	4648      	mov	r0, r9
 80092c6:	f000 fa95 	bl	80097f4 <__multadd>
 80092ca:	4601      	mov	r1, r0
 80092cc:	4604      	mov	r4, r0
 80092ce:	9802      	ldr	r0, [sp, #8]
 80092d0:	f000 fca0 	bl	8009c14 <__mcmp>
 80092d4:	2800      	cmp	r0, #0
 80092d6:	f77f ada3 	ble.w	8008e20 <_dtoa_r+0x490>
 80092da:	4656      	mov	r6, sl
 80092dc:	2331      	movs	r3, #49	@ 0x31
 80092de:	f806 3b01 	strb.w	r3, [r6], #1
 80092e2:	f108 0801 	add.w	r8, r8, #1
 80092e6:	e59f      	b.n	8008e28 <_dtoa_r+0x498>
 80092e8:	9c03      	ldr	r4, [sp, #12]
 80092ea:	46b8      	mov	r8, r7
 80092ec:	4625      	mov	r5, r4
 80092ee:	e7f4      	b.n	80092da <_dtoa_r+0x94a>
 80092f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80092f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f000 8101 	beq.w	80094fe <_dtoa_r+0xb6e>
 80092fc:	2e00      	cmp	r6, #0
 80092fe:	dd05      	ble.n	800930c <_dtoa_r+0x97c>
 8009300:	4629      	mov	r1, r5
 8009302:	4632      	mov	r2, r6
 8009304:	4648      	mov	r0, r9
 8009306:	f000 fc19 	bl	8009b3c <__lshift>
 800930a:	4605      	mov	r5, r0
 800930c:	9b08      	ldr	r3, [sp, #32]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d05c      	beq.n	80093cc <_dtoa_r+0xa3c>
 8009312:	6869      	ldr	r1, [r5, #4]
 8009314:	4648      	mov	r0, r9
 8009316:	f000 fa0b 	bl	8009730 <_Balloc>
 800931a:	4606      	mov	r6, r0
 800931c:	b928      	cbnz	r0, 800932a <_dtoa_r+0x99a>
 800931e:	4b82      	ldr	r3, [pc, #520]	@ (8009528 <_dtoa_r+0xb98>)
 8009320:	4602      	mov	r2, r0
 8009322:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009326:	f7ff bb4a 	b.w	80089be <_dtoa_r+0x2e>
 800932a:	692a      	ldr	r2, [r5, #16]
 800932c:	3202      	adds	r2, #2
 800932e:	0092      	lsls	r2, r2, #2
 8009330:	f105 010c 	add.w	r1, r5, #12
 8009334:	300c      	adds	r0, #12
 8009336:	f7ff fa92 	bl	800885e <memcpy>
 800933a:	2201      	movs	r2, #1
 800933c:	4631      	mov	r1, r6
 800933e:	4648      	mov	r0, r9
 8009340:	f000 fbfc 	bl	8009b3c <__lshift>
 8009344:	f10a 0301 	add.w	r3, sl, #1
 8009348:	9300      	str	r3, [sp, #0]
 800934a:	eb0a 030b 	add.w	r3, sl, fp
 800934e:	9308      	str	r3, [sp, #32]
 8009350:	9b04      	ldr	r3, [sp, #16]
 8009352:	f003 0301 	and.w	r3, r3, #1
 8009356:	462f      	mov	r7, r5
 8009358:	9306      	str	r3, [sp, #24]
 800935a:	4605      	mov	r5, r0
 800935c:	9b00      	ldr	r3, [sp, #0]
 800935e:	9802      	ldr	r0, [sp, #8]
 8009360:	4621      	mov	r1, r4
 8009362:	f103 3bff 	add.w	fp, r3, #4294967295
 8009366:	f7ff fa88 	bl	800887a <quorem>
 800936a:	4603      	mov	r3, r0
 800936c:	3330      	adds	r3, #48	@ 0x30
 800936e:	9003      	str	r0, [sp, #12]
 8009370:	4639      	mov	r1, r7
 8009372:	9802      	ldr	r0, [sp, #8]
 8009374:	9309      	str	r3, [sp, #36]	@ 0x24
 8009376:	f000 fc4d 	bl	8009c14 <__mcmp>
 800937a:	462a      	mov	r2, r5
 800937c:	9004      	str	r0, [sp, #16]
 800937e:	4621      	mov	r1, r4
 8009380:	4648      	mov	r0, r9
 8009382:	f000 fc63 	bl	8009c4c <__mdiff>
 8009386:	68c2      	ldr	r2, [r0, #12]
 8009388:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800938a:	4606      	mov	r6, r0
 800938c:	bb02      	cbnz	r2, 80093d0 <_dtoa_r+0xa40>
 800938e:	4601      	mov	r1, r0
 8009390:	9802      	ldr	r0, [sp, #8]
 8009392:	f000 fc3f 	bl	8009c14 <__mcmp>
 8009396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009398:	4602      	mov	r2, r0
 800939a:	4631      	mov	r1, r6
 800939c:	4648      	mov	r0, r9
 800939e:	920c      	str	r2, [sp, #48]	@ 0x30
 80093a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80093a2:	f000 fa05 	bl	80097b0 <_Bfree>
 80093a6:	9b07      	ldr	r3, [sp, #28]
 80093a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80093aa:	9e00      	ldr	r6, [sp, #0]
 80093ac:	ea42 0103 	orr.w	r1, r2, r3
 80093b0:	9b06      	ldr	r3, [sp, #24]
 80093b2:	4319      	orrs	r1, r3
 80093b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093b6:	d10d      	bne.n	80093d4 <_dtoa_r+0xa44>
 80093b8:	2b39      	cmp	r3, #57	@ 0x39
 80093ba:	d027      	beq.n	800940c <_dtoa_r+0xa7c>
 80093bc:	9a04      	ldr	r2, [sp, #16]
 80093be:	2a00      	cmp	r2, #0
 80093c0:	dd01      	ble.n	80093c6 <_dtoa_r+0xa36>
 80093c2:	9b03      	ldr	r3, [sp, #12]
 80093c4:	3331      	adds	r3, #49	@ 0x31
 80093c6:	f88b 3000 	strb.w	r3, [fp]
 80093ca:	e52e      	b.n	8008e2a <_dtoa_r+0x49a>
 80093cc:	4628      	mov	r0, r5
 80093ce:	e7b9      	b.n	8009344 <_dtoa_r+0x9b4>
 80093d0:	2201      	movs	r2, #1
 80093d2:	e7e2      	b.n	800939a <_dtoa_r+0xa0a>
 80093d4:	9904      	ldr	r1, [sp, #16]
 80093d6:	2900      	cmp	r1, #0
 80093d8:	db04      	blt.n	80093e4 <_dtoa_r+0xa54>
 80093da:	9807      	ldr	r0, [sp, #28]
 80093dc:	4301      	orrs	r1, r0
 80093de:	9806      	ldr	r0, [sp, #24]
 80093e0:	4301      	orrs	r1, r0
 80093e2:	d120      	bne.n	8009426 <_dtoa_r+0xa96>
 80093e4:	2a00      	cmp	r2, #0
 80093e6:	ddee      	ble.n	80093c6 <_dtoa_r+0xa36>
 80093e8:	9902      	ldr	r1, [sp, #8]
 80093ea:	9300      	str	r3, [sp, #0]
 80093ec:	2201      	movs	r2, #1
 80093ee:	4648      	mov	r0, r9
 80093f0:	f000 fba4 	bl	8009b3c <__lshift>
 80093f4:	4621      	mov	r1, r4
 80093f6:	9002      	str	r0, [sp, #8]
 80093f8:	f000 fc0c 	bl	8009c14 <__mcmp>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	9b00      	ldr	r3, [sp, #0]
 8009400:	dc02      	bgt.n	8009408 <_dtoa_r+0xa78>
 8009402:	d1e0      	bne.n	80093c6 <_dtoa_r+0xa36>
 8009404:	07da      	lsls	r2, r3, #31
 8009406:	d5de      	bpl.n	80093c6 <_dtoa_r+0xa36>
 8009408:	2b39      	cmp	r3, #57	@ 0x39
 800940a:	d1da      	bne.n	80093c2 <_dtoa_r+0xa32>
 800940c:	2339      	movs	r3, #57	@ 0x39
 800940e:	f88b 3000 	strb.w	r3, [fp]
 8009412:	4633      	mov	r3, r6
 8009414:	461e      	mov	r6, r3
 8009416:	3b01      	subs	r3, #1
 8009418:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800941c:	2a39      	cmp	r2, #57	@ 0x39
 800941e:	d04e      	beq.n	80094be <_dtoa_r+0xb2e>
 8009420:	3201      	adds	r2, #1
 8009422:	701a      	strb	r2, [r3, #0]
 8009424:	e501      	b.n	8008e2a <_dtoa_r+0x49a>
 8009426:	2a00      	cmp	r2, #0
 8009428:	dd03      	ble.n	8009432 <_dtoa_r+0xaa2>
 800942a:	2b39      	cmp	r3, #57	@ 0x39
 800942c:	d0ee      	beq.n	800940c <_dtoa_r+0xa7c>
 800942e:	3301      	adds	r3, #1
 8009430:	e7c9      	b.n	80093c6 <_dtoa_r+0xa36>
 8009432:	9a00      	ldr	r2, [sp, #0]
 8009434:	9908      	ldr	r1, [sp, #32]
 8009436:	f802 3c01 	strb.w	r3, [r2, #-1]
 800943a:	428a      	cmp	r2, r1
 800943c:	d028      	beq.n	8009490 <_dtoa_r+0xb00>
 800943e:	9902      	ldr	r1, [sp, #8]
 8009440:	2300      	movs	r3, #0
 8009442:	220a      	movs	r2, #10
 8009444:	4648      	mov	r0, r9
 8009446:	f000 f9d5 	bl	80097f4 <__multadd>
 800944a:	42af      	cmp	r7, r5
 800944c:	9002      	str	r0, [sp, #8]
 800944e:	f04f 0300 	mov.w	r3, #0
 8009452:	f04f 020a 	mov.w	r2, #10
 8009456:	4639      	mov	r1, r7
 8009458:	4648      	mov	r0, r9
 800945a:	d107      	bne.n	800946c <_dtoa_r+0xadc>
 800945c:	f000 f9ca 	bl	80097f4 <__multadd>
 8009460:	4607      	mov	r7, r0
 8009462:	4605      	mov	r5, r0
 8009464:	9b00      	ldr	r3, [sp, #0]
 8009466:	3301      	adds	r3, #1
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	e777      	b.n	800935c <_dtoa_r+0x9cc>
 800946c:	f000 f9c2 	bl	80097f4 <__multadd>
 8009470:	4629      	mov	r1, r5
 8009472:	4607      	mov	r7, r0
 8009474:	2300      	movs	r3, #0
 8009476:	220a      	movs	r2, #10
 8009478:	4648      	mov	r0, r9
 800947a:	f000 f9bb 	bl	80097f4 <__multadd>
 800947e:	4605      	mov	r5, r0
 8009480:	e7f0      	b.n	8009464 <_dtoa_r+0xad4>
 8009482:	f1bb 0f00 	cmp.w	fp, #0
 8009486:	bfcc      	ite	gt
 8009488:	465e      	movgt	r6, fp
 800948a:	2601      	movle	r6, #1
 800948c:	4456      	add	r6, sl
 800948e:	2700      	movs	r7, #0
 8009490:	9902      	ldr	r1, [sp, #8]
 8009492:	9300      	str	r3, [sp, #0]
 8009494:	2201      	movs	r2, #1
 8009496:	4648      	mov	r0, r9
 8009498:	f000 fb50 	bl	8009b3c <__lshift>
 800949c:	4621      	mov	r1, r4
 800949e:	9002      	str	r0, [sp, #8]
 80094a0:	f000 fbb8 	bl	8009c14 <__mcmp>
 80094a4:	2800      	cmp	r0, #0
 80094a6:	dcb4      	bgt.n	8009412 <_dtoa_r+0xa82>
 80094a8:	d102      	bne.n	80094b0 <_dtoa_r+0xb20>
 80094aa:	9b00      	ldr	r3, [sp, #0]
 80094ac:	07db      	lsls	r3, r3, #31
 80094ae:	d4b0      	bmi.n	8009412 <_dtoa_r+0xa82>
 80094b0:	4633      	mov	r3, r6
 80094b2:	461e      	mov	r6, r3
 80094b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094b8:	2a30      	cmp	r2, #48	@ 0x30
 80094ba:	d0fa      	beq.n	80094b2 <_dtoa_r+0xb22>
 80094bc:	e4b5      	b.n	8008e2a <_dtoa_r+0x49a>
 80094be:	459a      	cmp	sl, r3
 80094c0:	d1a8      	bne.n	8009414 <_dtoa_r+0xa84>
 80094c2:	2331      	movs	r3, #49	@ 0x31
 80094c4:	f108 0801 	add.w	r8, r8, #1
 80094c8:	f88a 3000 	strb.w	r3, [sl]
 80094cc:	e4ad      	b.n	8008e2a <_dtoa_r+0x49a>
 80094ce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80094d0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800952c <_dtoa_r+0xb9c>
 80094d4:	b11b      	cbz	r3, 80094de <_dtoa_r+0xb4e>
 80094d6:	f10a 0308 	add.w	r3, sl, #8
 80094da:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80094dc:	6013      	str	r3, [r2, #0]
 80094de:	4650      	mov	r0, sl
 80094e0:	b017      	add	sp, #92	@ 0x5c
 80094e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094e6:	9b07      	ldr	r3, [sp, #28]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	f77f ae2e 	ble.w	800914a <_dtoa_r+0x7ba>
 80094ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094f0:	9308      	str	r3, [sp, #32]
 80094f2:	2001      	movs	r0, #1
 80094f4:	e64d      	b.n	8009192 <_dtoa_r+0x802>
 80094f6:	f1bb 0f00 	cmp.w	fp, #0
 80094fa:	f77f aed9 	ble.w	80092b0 <_dtoa_r+0x920>
 80094fe:	4656      	mov	r6, sl
 8009500:	9802      	ldr	r0, [sp, #8]
 8009502:	4621      	mov	r1, r4
 8009504:	f7ff f9b9 	bl	800887a <quorem>
 8009508:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800950c:	f806 3b01 	strb.w	r3, [r6], #1
 8009510:	eba6 020a 	sub.w	r2, r6, sl
 8009514:	4593      	cmp	fp, r2
 8009516:	ddb4      	ble.n	8009482 <_dtoa_r+0xaf2>
 8009518:	9902      	ldr	r1, [sp, #8]
 800951a:	2300      	movs	r3, #0
 800951c:	220a      	movs	r2, #10
 800951e:	4648      	mov	r0, r9
 8009520:	f000 f968 	bl	80097f4 <__multadd>
 8009524:	9002      	str	r0, [sp, #8]
 8009526:	e7eb      	b.n	8009500 <_dtoa_r+0xb70>
 8009528:	0801c59c 	.word	0x0801c59c
 800952c:	0801c520 	.word	0x0801c520

08009530 <_free_r>:
 8009530:	b538      	push	{r3, r4, r5, lr}
 8009532:	4605      	mov	r5, r0
 8009534:	2900      	cmp	r1, #0
 8009536:	d041      	beq.n	80095bc <_free_r+0x8c>
 8009538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800953c:	1f0c      	subs	r4, r1, #4
 800953e:	2b00      	cmp	r3, #0
 8009540:	bfb8      	it	lt
 8009542:	18e4      	addlt	r4, r4, r3
 8009544:	f000 f8e8 	bl	8009718 <__malloc_lock>
 8009548:	4a1d      	ldr	r2, [pc, #116]	@ (80095c0 <_free_r+0x90>)
 800954a:	6813      	ldr	r3, [r2, #0]
 800954c:	b933      	cbnz	r3, 800955c <_free_r+0x2c>
 800954e:	6063      	str	r3, [r4, #4]
 8009550:	6014      	str	r4, [r2, #0]
 8009552:	4628      	mov	r0, r5
 8009554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009558:	f000 b8e4 	b.w	8009724 <__malloc_unlock>
 800955c:	42a3      	cmp	r3, r4
 800955e:	d908      	bls.n	8009572 <_free_r+0x42>
 8009560:	6820      	ldr	r0, [r4, #0]
 8009562:	1821      	adds	r1, r4, r0
 8009564:	428b      	cmp	r3, r1
 8009566:	bf01      	itttt	eq
 8009568:	6819      	ldreq	r1, [r3, #0]
 800956a:	685b      	ldreq	r3, [r3, #4]
 800956c:	1809      	addeq	r1, r1, r0
 800956e:	6021      	streq	r1, [r4, #0]
 8009570:	e7ed      	b.n	800954e <_free_r+0x1e>
 8009572:	461a      	mov	r2, r3
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	b10b      	cbz	r3, 800957c <_free_r+0x4c>
 8009578:	42a3      	cmp	r3, r4
 800957a:	d9fa      	bls.n	8009572 <_free_r+0x42>
 800957c:	6811      	ldr	r1, [r2, #0]
 800957e:	1850      	adds	r0, r2, r1
 8009580:	42a0      	cmp	r0, r4
 8009582:	d10b      	bne.n	800959c <_free_r+0x6c>
 8009584:	6820      	ldr	r0, [r4, #0]
 8009586:	4401      	add	r1, r0
 8009588:	1850      	adds	r0, r2, r1
 800958a:	4283      	cmp	r3, r0
 800958c:	6011      	str	r1, [r2, #0]
 800958e:	d1e0      	bne.n	8009552 <_free_r+0x22>
 8009590:	6818      	ldr	r0, [r3, #0]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	6053      	str	r3, [r2, #4]
 8009596:	4408      	add	r0, r1
 8009598:	6010      	str	r0, [r2, #0]
 800959a:	e7da      	b.n	8009552 <_free_r+0x22>
 800959c:	d902      	bls.n	80095a4 <_free_r+0x74>
 800959e:	230c      	movs	r3, #12
 80095a0:	602b      	str	r3, [r5, #0]
 80095a2:	e7d6      	b.n	8009552 <_free_r+0x22>
 80095a4:	6820      	ldr	r0, [r4, #0]
 80095a6:	1821      	adds	r1, r4, r0
 80095a8:	428b      	cmp	r3, r1
 80095aa:	bf04      	itt	eq
 80095ac:	6819      	ldreq	r1, [r3, #0]
 80095ae:	685b      	ldreq	r3, [r3, #4]
 80095b0:	6063      	str	r3, [r4, #4]
 80095b2:	bf04      	itt	eq
 80095b4:	1809      	addeq	r1, r1, r0
 80095b6:	6021      	streq	r1, [r4, #0]
 80095b8:	6054      	str	r4, [r2, #4]
 80095ba:	e7ca      	b.n	8009552 <_free_r+0x22>
 80095bc:	bd38      	pop	{r3, r4, r5, pc}
 80095be:	bf00      	nop
 80095c0:	20004ad4 	.word	0x20004ad4

080095c4 <malloc>:
 80095c4:	4b02      	ldr	r3, [pc, #8]	@ (80095d0 <malloc+0xc>)
 80095c6:	4601      	mov	r1, r0
 80095c8:	6818      	ldr	r0, [r3, #0]
 80095ca:	f000 b825 	b.w	8009618 <_malloc_r>
 80095ce:	bf00      	nop
 80095d0:	20002c18 	.word	0x20002c18

080095d4 <sbrk_aligned>:
 80095d4:	b570      	push	{r4, r5, r6, lr}
 80095d6:	4e0f      	ldr	r6, [pc, #60]	@ (8009614 <sbrk_aligned+0x40>)
 80095d8:	460c      	mov	r4, r1
 80095da:	6831      	ldr	r1, [r6, #0]
 80095dc:	4605      	mov	r5, r0
 80095de:	b911      	cbnz	r1, 80095e6 <sbrk_aligned+0x12>
 80095e0:	f000 fd50 	bl	800a084 <_sbrk_r>
 80095e4:	6030      	str	r0, [r6, #0]
 80095e6:	4621      	mov	r1, r4
 80095e8:	4628      	mov	r0, r5
 80095ea:	f000 fd4b 	bl	800a084 <_sbrk_r>
 80095ee:	1c43      	adds	r3, r0, #1
 80095f0:	d103      	bne.n	80095fa <sbrk_aligned+0x26>
 80095f2:	f04f 34ff 	mov.w	r4, #4294967295
 80095f6:	4620      	mov	r0, r4
 80095f8:	bd70      	pop	{r4, r5, r6, pc}
 80095fa:	1cc4      	adds	r4, r0, #3
 80095fc:	f024 0403 	bic.w	r4, r4, #3
 8009600:	42a0      	cmp	r0, r4
 8009602:	d0f8      	beq.n	80095f6 <sbrk_aligned+0x22>
 8009604:	1a21      	subs	r1, r4, r0
 8009606:	4628      	mov	r0, r5
 8009608:	f000 fd3c 	bl	800a084 <_sbrk_r>
 800960c:	3001      	adds	r0, #1
 800960e:	d1f2      	bne.n	80095f6 <sbrk_aligned+0x22>
 8009610:	e7ef      	b.n	80095f2 <sbrk_aligned+0x1e>
 8009612:	bf00      	nop
 8009614:	20004ad0 	.word	0x20004ad0

08009618 <_malloc_r>:
 8009618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800961c:	1ccd      	adds	r5, r1, #3
 800961e:	f025 0503 	bic.w	r5, r5, #3
 8009622:	3508      	adds	r5, #8
 8009624:	2d0c      	cmp	r5, #12
 8009626:	bf38      	it	cc
 8009628:	250c      	movcc	r5, #12
 800962a:	2d00      	cmp	r5, #0
 800962c:	4606      	mov	r6, r0
 800962e:	db01      	blt.n	8009634 <_malloc_r+0x1c>
 8009630:	42a9      	cmp	r1, r5
 8009632:	d904      	bls.n	800963e <_malloc_r+0x26>
 8009634:	230c      	movs	r3, #12
 8009636:	6033      	str	r3, [r6, #0]
 8009638:	2000      	movs	r0, #0
 800963a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800963e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009714 <_malloc_r+0xfc>
 8009642:	f000 f869 	bl	8009718 <__malloc_lock>
 8009646:	f8d8 3000 	ldr.w	r3, [r8]
 800964a:	461c      	mov	r4, r3
 800964c:	bb44      	cbnz	r4, 80096a0 <_malloc_r+0x88>
 800964e:	4629      	mov	r1, r5
 8009650:	4630      	mov	r0, r6
 8009652:	f7ff ffbf 	bl	80095d4 <sbrk_aligned>
 8009656:	1c43      	adds	r3, r0, #1
 8009658:	4604      	mov	r4, r0
 800965a:	d158      	bne.n	800970e <_malloc_r+0xf6>
 800965c:	f8d8 4000 	ldr.w	r4, [r8]
 8009660:	4627      	mov	r7, r4
 8009662:	2f00      	cmp	r7, #0
 8009664:	d143      	bne.n	80096ee <_malloc_r+0xd6>
 8009666:	2c00      	cmp	r4, #0
 8009668:	d04b      	beq.n	8009702 <_malloc_r+0xea>
 800966a:	6823      	ldr	r3, [r4, #0]
 800966c:	4639      	mov	r1, r7
 800966e:	4630      	mov	r0, r6
 8009670:	eb04 0903 	add.w	r9, r4, r3
 8009674:	f000 fd06 	bl	800a084 <_sbrk_r>
 8009678:	4581      	cmp	r9, r0
 800967a:	d142      	bne.n	8009702 <_malloc_r+0xea>
 800967c:	6821      	ldr	r1, [r4, #0]
 800967e:	1a6d      	subs	r5, r5, r1
 8009680:	4629      	mov	r1, r5
 8009682:	4630      	mov	r0, r6
 8009684:	f7ff ffa6 	bl	80095d4 <sbrk_aligned>
 8009688:	3001      	adds	r0, #1
 800968a:	d03a      	beq.n	8009702 <_malloc_r+0xea>
 800968c:	6823      	ldr	r3, [r4, #0]
 800968e:	442b      	add	r3, r5
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	f8d8 3000 	ldr.w	r3, [r8]
 8009696:	685a      	ldr	r2, [r3, #4]
 8009698:	bb62      	cbnz	r2, 80096f4 <_malloc_r+0xdc>
 800969a:	f8c8 7000 	str.w	r7, [r8]
 800969e:	e00f      	b.n	80096c0 <_malloc_r+0xa8>
 80096a0:	6822      	ldr	r2, [r4, #0]
 80096a2:	1b52      	subs	r2, r2, r5
 80096a4:	d420      	bmi.n	80096e8 <_malloc_r+0xd0>
 80096a6:	2a0b      	cmp	r2, #11
 80096a8:	d917      	bls.n	80096da <_malloc_r+0xc2>
 80096aa:	1961      	adds	r1, r4, r5
 80096ac:	42a3      	cmp	r3, r4
 80096ae:	6025      	str	r5, [r4, #0]
 80096b0:	bf18      	it	ne
 80096b2:	6059      	strne	r1, [r3, #4]
 80096b4:	6863      	ldr	r3, [r4, #4]
 80096b6:	bf08      	it	eq
 80096b8:	f8c8 1000 	streq.w	r1, [r8]
 80096bc:	5162      	str	r2, [r4, r5]
 80096be:	604b      	str	r3, [r1, #4]
 80096c0:	4630      	mov	r0, r6
 80096c2:	f000 f82f 	bl	8009724 <__malloc_unlock>
 80096c6:	f104 000b 	add.w	r0, r4, #11
 80096ca:	1d23      	adds	r3, r4, #4
 80096cc:	f020 0007 	bic.w	r0, r0, #7
 80096d0:	1ac2      	subs	r2, r0, r3
 80096d2:	bf1c      	itt	ne
 80096d4:	1a1b      	subne	r3, r3, r0
 80096d6:	50a3      	strne	r3, [r4, r2]
 80096d8:	e7af      	b.n	800963a <_malloc_r+0x22>
 80096da:	6862      	ldr	r2, [r4, #4]
 80096dc:	42a3      	cmp	r3, r4
 80096de:	bf0c      	ite	eq
 80096e0:	f8c8 2000 	streq.w	r2, [r8]
 80096e4:	605a      	strne	r2, [r3, #4]
 80096e6:	e7eb      	b.n	80096c0 <_malloc_r+0xa8>
 80096e8:	4623      	mov	r3, r4
 80096ea:	6864      	ldr	r4, [r4, #4]
 80096ec:	e7ae      	b.n	800964c <_malloc_r+0x34>
 80096ee:	463c      	mov	r4, r7
 80096f0:	687f      	ldr	r7, [r7, #4]
 80096f2:	e7b6      	b.n	8009662 <_malloc_r+0x4a>
 80096f4:	461a      	mov	r2, r3
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	42a3      	cmp	r3, r4
 80096fa:	d1fb      	bne.n	80096f4 <_malloc_r+0xdc>
 80096fc:	2300      	movs	r3, #0
 80096fe:	6053      	str	r3, [r2, #4]
 8009700:	e7de      	b.n	80096c0 <_malloc_r+0xa8>
 8009702:	230c      	movs	r3, #12
 8009704:	6033      	str	r3, [r6, #0]
 8009706:	4630      	mov	r0, r6
 8009708:	f000 f80c 	bl	8009724 <__malloc_unlock>
 800970c:	e794      	b.n	8009638 <_malloc_r+0x20>
 800970e:	6005      	str	r5, [r0, #0]
 8009710:	e7d6      	b.n	80096c0 <_malloc_r+0xa8>
 8009712:	bf00      	nop
 8009714:	20004ad4 	.word	0x20004ad4

08009718 <__malloc_lock>:
 8009718:	4801      	ldr	r0, [pc, #4]	@ (8009720 <__malloc_lock+0x8>)
 800971a:	f7ff b89e 	b.w	800885a <__retarget_lock_acquire_recursive>
 800971e:	bf00      	nop
 8009720:	20004acc 	.word	0x20004acc

08009724 <__malloc_unlock>:
 8009724:	4801      	ldr	r0, [pc, #4]	@ (800972c <__malloc_unlock+0x8>)
 8009726:	f7ff b899 	b.w	800885c <__retarget_lock_release_recursive>
 800972a:	bf00      	nop
 800972c:	20004acc 	.word	0x20004acc

08009730 <_Balloc>:
 8009730:	b570      	push	{r4, r5, r6, lr}
 8009732:	69c6      	ldr	r6, [r0, #28]
 8009734:	4604      	mov	r4, r0
 8009736:	460d      	mov	r5, r1
 8009738:	b976      	cbnz	r6, 8009758 <_Balloc+0x28>
 800973a:	2010      	movs	r0, #16
 800973c:	f7ff ff42 	bl	80095c4 <malloc>
 8009740:	4602      	mov	r2, r0
 8009742:	61e0      	str	r0, [r4, #28]
 8009744:	b920      	cbnz	r0, 8009750 <_Balloc+0x20>
 8009746:	4b18      	ldr	r3, [pc, #96]	@ (80097a8 <_Balloc+0x78>)
 8009748:	4818      	ldr	r0, [pc, #96]	@ (80097ac <_Balloc+0x7c>)
 800974a:	216b      	movs	r1, #107	@ 0x6b
 800974c:	f000 fcaa 	bl	800a0a4 <__assert_func>
 8009750:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009754:	6006      	str	r6, [r0, #0]
 8009756:	60c6      	str	r6, [r0, #12]
 8009758:	69e6      	ldr	r6, [r4, #28]
 800975a:	68f3      	ldr	r3, [r6, #12]
 800975c:	b183      	cbz	r3, 8009780 <_Balloc+0x50>
 800975e:	69e3      	ldr	r3, [r4, #28]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009766:	b9b8      	cbnz	r0, 8009798 <_Balloc+0x68>
 8009768:	2101      	movs	r1, #1
 800976a:	fa01 f605 	lsl.w	r6, r1, r5
 800976e:	1d72      	adds	r2, r6, #5
 8009770:	0092      	lsls	r2, r2, #2
 8009772:	4620      	mov	r0, r4
 8009774:	f000 fcb4 	bl	800a0e0 <_calloc_r>
 8009778:	b160      	cbz	r0, 8009794 <_Balloc+0x64>
 800977a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800977e:	e00e      	b.n	800979e <_Balloc+0x6e>
 8009780:	2221      	movs	r2, #33	@ 0x21
 8009782:	2104      	movs	r1, #4
 8009784:	4620      	mov	r0, r4
 8009786:	f000 fcab 	bl	800a0e0 <_calloc_r>
 800978a:	69e3      	ldr	r3, [r4, #28]
 800978c:	60f0      	str	r0, [r6, #12]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d1e4      	bne.n	800975e <_Balloc+0x2e>
 8009794:	2000      	movs	r0, #0
 8009796:	bd70      	pop	{r4, r5, r6, pc}
 8009798:	6802      	ldr	r2, [r0, #0]
 800979a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800979e:	2300      	movs	r3, #0
 80097a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097a4:	e7f7      	b.n	8009796 <_Balloc+0x66>
 80097a6:	bf00      	nop
 80097a8:	0801c52d 	.word	0x0801c52d
 80097ac:	0801c5ad 	.word	0x0801c5ad

080097b0 <_Bfree>:
 80097b0:	b570      	push	{r4, r5, r6, lr}
 80097b2:	69c6      	ldr	r6, [r0, #28]
 80097b4:	4605      	mov	r5, r0
 80097b6:	460c      	mov	r4, r1
 80097b8:	b976      	cbnz	r6, 80097d8 <_Bfree+0x28>
 80097ba:	2010      	movs	r0, #16
 80097bc:	f7ff ff02 	bl	80095c4 <malloc>
 80097c0:	4602      	mov	r2, r0
 80097c2:	61e8      	str	r0, [r5, #28]
 80097c4:	b920      	cbnz	r0, 80097d0 <_Bfree+0x20>
 80097c6:	4b09      	ldr	r3, [pc, #36]	@ (80097ec <_Bfree+0x3c>)
 80097c8:	4809      	ldr	r0, [pc, #36]	@ (80097f0 <_Bfree+0x40>)
 80097ca:	218f      	movs	r1, #143	@ 0x8f
 80097cc:	f000 fc6a 	bl	800a0a4 <__assert_func>
 80097d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097d4:	6006      	str	r6, [r0, #0]
 80097d6:	60c6      	str	r6, [r0, #12]
 80097d8:	b13c      	cbz	r4, 80097ea <_Bfree+0x3a>
 80097da:	69eb      	ldr	r3, [r5, #28]
 80097dc:	6862      	ldr	r2, [r4, #4]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80097e4:	6021      	str	r1, [r4, #0]
 80097e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097ea:	bd70      	pop	{r4, r5, r6, pc}
 80097ec:	0801c52d 	.word	0x0801c52d
 80097f0:	0801c5ad 	.word	0x0801c5ad

080097f4 <__multadd>:
 80097f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097f8:	690d      	ldr	r5, [r1, #16]
 80097fa:	4607      	mov	r7, r0
 80097fc:	460c      	mov	r4, r1
 80097fe:	461e      	mov	r6, r3
 8009800:	f101 0c14 	add.w	ip, r1, #20
 8009804:	2000      	movs	r0, #0
 8009806:	f8dc 3000 	ldr.w	r3, [ip]
 800980a:	b299      	uxth	r1, r3
 800980c:	fb02 6101 	mla	r1, r2, r1, r6
 8009810:	0c1e      	lsrs	r6, r3, #16
 8009812:	0c0b      	lsrs	r3, r1, #16
 8009814:	fb02 3306 	mla	r3, r2, r6, r3
 8009818:	b289      	uxth	r1, r1
 800981a:	3001      	adds	r0, #1
 800981c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009820:	4285      	cmp	r5, r0
 8009822:	f84c 1b04 	str.w	r1, [ip], #4
 8009826:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800982a:	dcec      	bgt.n	8009806 <__multadd+0x12>
 800982c:	b30e      	cbz	r6, 8009872 <__multadd+0x7e>
 800982e:	68a3      	ldr	r3, [r4, #8]
 8009830:	42ab      	cmp	r3, r5
 8009832:	dc19      	bgt.n	8009868 <__multadd+0x74>
 8009834:	6861      	ldr	r1, [r4, #4]
 8009836:	4638      	mov	r0, r7
 8009838:	3101      	adds	r1, #1
 800983a:	f7ff ff79 	bl	8009730 <_Balloc>
 800983e:	4680      	mov	r8, r0
 8009840:	b928      	cbnz	r0, 800984e <__multadd+0x5a>
 8009842:	4602      	mov	r2, r0
 8009844:	4b0c      	ldr	r3, [pc, #48]	@ (8009878 <__multadd+0x84>)
 8009846:	480d      	ldr	r0, [pc, #52]	@ (800987c <__multadd+0x88>)
 8009848:	21ba      	movs	r1, #186	@ 0xba
 800984a:	f000 fc2b 	bl	800a0a4 <__assert_func>
 800984e:	6922      	ldr	r2, [r4, #16]
 8009850:	3202      	adds	r2, #2
 8009852:	f104 010c 	add.w	r1, r4, #12
 8009856:	0092      	lsls	r2, r2, #2
 8009858:	300c      	adds	r0, #12
 800985a:	f7ff f800 	bl	800885e <memcpy>
 800985e:	4621      	mov	r1, r4
 8009860:	4638      	mov	r0, r7
 8009862:	f7ff ffa5 	bl	80097b0 <_Bfree>
 8009866:	4644      	mov	r4, r8
 8009868:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800986c:	3501      	adds	r5, #1
 800986e:	615e      	str	r6, [r3, #20]
 8009870:	6125      	str	r5, [r4, #16]
 8009872:	4620      	mov	r0, r4
 8009874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009878:	0801c59c 	.word	0x0801c59c
 800987c:	0801c5ad 	.word	0x0801c5ad

08009880 <__hi0bits>:
 8009880:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009884:	4603      	mov	r3, r0
 8009886:	bf36      	itet	cc
 8009888:	0403      	lslcc	r3, r0, #16
 800988a:	2000      	movcs	r0, #0
 800988c:	2010      	movcc	r0, #16
 800988e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009892:	bf3c      	itt	cc
 8009894:	021b      	lslcc	r3, r3, #8
 8009896:	3008      	addcc	r0, #8
 8009898:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800989c:	bf3c      	itt	cc
 800989e:	011b      	lslcc	r3, r3, #4
 80098a0:	3004      	addcc	r0, #4
 80098a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098a6:	bf3c      	itt	cc
 80098a8:	009b      	lslcc	r3, r3, #2
 80098aa:	3002      	addcc	r0, #2
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	db05      	blt.n	80098bc <__hi0bits+0x3c>
 80098b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80098b4:	f100 0001 	add.w	r0, r0, #1
 80098b8:	bf08      	it	eq
 80098ba:	2020      	moveq	r0, #32
 80098bc:	4770      	bx	lr

080098be <__lo0bits>:
 80098be:	6803      	ldr	r3, [r0, #0]
 80098c0:	4602      	mov	r2, r0
 80098c2:	f013 0007 	ands.w	r0, r3, #7
 80098c6:	d00b      	beq.n	80098e0 <__lo0bits+0x22>
 80098c8:	07d9      	lsls	r1, r3, #31
 80098ca:	d421      	bmi.n	8009910 <__lo0bits+0x52>
 80098cc:	0798      	lsls	r0, r3, #30
 80098ce:	bf49      	itett	mi
 80098d0:	085b      	lsrmi	r3, r3, #1
 80098d2:	089b      	lsrpl	r3, r3, #2
 80098d4:	2001      	movmi	r0, #1
 80098d6:	6013      	strmi	r3, [r2, #0]
 80098d8:	bf5c      	itt	pl
 80098da:	6013      	strpl	r3, [r2, #0]
 80098dc:	2002      	movpl	r0, #2
 80098de:	4770      	bx	lr
 80098e0:	b299      	uxth	r1, r3
 80098e2:	b909      	cbnz	r1, 80098e8 <__lo0bits+0x2a>
 80098e4:	0c1b      	lsrs	r3, r3, #16
 80098e6:	2010      	movs	r0, #16
 80098e8:	b2d9      	uxtb	r1, r3
 80098ea:	b909      	cbnz	r1, 80098f0 <__lo0bits+0x32>
 80098ec:	3008      	adds	r0, #8
 80098ee:	0a1b      	lsrs	r3, r3, #8
 80098f0:	0719      	lsls	r1, r3, #28
 80098f2:	bf04      	itt	eq
 80098f4:	091b      	lsreq	r3, r3, #4
 80098f6:	3004      	addeq	r0, #4
 80098f8:	0799      	lsls	r1, r3, #30
 80098fa:	bf04      	itt	eq
 80098fc:	089b      	lsreq	r3, r3, #2
 80098fe:	3002      	addeq	r0, #2
 8009900:	07d9      	lsls	r1, r3, #31
 8009902:	d403      	bmi.n	800990c <__lo0bits+0x4e>
 8009904:	085b      	lsrs	r3, r3, #1
 8009906:	f100 0001 	add.w	r0, r0, #1
 800990a:	d003      	beq.n	8009914 <__lo0bits+0x56>
 800990c:	6013      	str	r3, [r2, #0]
 800990e:	4770      	bx	lr
 8009910:	2000      	movs	r0, #0
 8009912:	4770      	bx	lr
 8009914:	2020      	movs	r0, #32
 8009916:	4770      	bx	lr

08009918 <__i2b>:
 8009918:	b510      	push	{r4, lr}
 800991a:	460c      	mov	r4, r1
 800991c:	2101      	movs	r1, #1
 800991e:	f7ff ff07 	bl	8009730 <_Balloc>
 8009922:	4602      	mov	r2, r0
 8009924:	b928      	cbnz	r0, 8009932 <__i2b+0x1a>
 8009926:	4b05      	ldr	r3, [pc, #20]	@ (800993c <__i2b+0x24>)
 8009928:	4805      	ldr	r0, [pc, #20]	@ (8009940 <__i2b+0x28>)
 800992a:	f240 1145 	movw	r1, #325	@ 0x145
 800992e:	f000 fbb9 	bl	800a0a4 <__assert_func>
 8009932:	2301      	movs	r3, #1
 8009934:	6144      	str	r4, [r0, #20]
 8009936:	6103      	str	r3, [r0, #16]
 8009938:	bd10      	pop	{r4, pc}
 800993a:	bf00      	nop
 800993c:	0801c59c 	.word	0x0801c59c
 8009940:	0801c5ad 	.word	0x0801c5ad

08009944 <__multiply>:
 8009944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009948:	4617      	mov	r7, r2
 800994a:	690a      	ldr	r2, [r1, #16]
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	429a      	cmp	r2, r3
 8009950:	bfa8      	it	ge
 8009952:	463b      	movge	r3, r7
 8009954:	4689      	mov	r9, r1
 8009956:	bfa4      	itt	ge
 8009958:	460f      	movge	r7, r1
 800995a:	4699      	movge	r9, r3
 800995c:	693d      	ldr	r5, [r7, #16]
 800995e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	6879      	ldr	r1, [r7, #4]
 8009966:	eb05 060a 	add.w	r6, r5, sl
 800996a:	42b3      	cmp	r3, r6
 800996c:	b085      	sub	sp, #20
 800996e:	bfb8      	it	lt
 8009970:	3101      	addlt	r1, #1
 8009972:	f7ff fedd 	bl	8009730 <_Balloc>
 8009976:	b930      	cbnz	r0, 8009986 <__multiply+0x42>
 8009978:	4602      	mov	r2, r0
 800997a:	4b41      	ldr	r3, [pc, #260]	@ (8009a80 <__multiply+0x13c>)
 800997c:	4841      	ldr	r0, [pc, #260]	@ (8009a84 <__multiply+0x140>)
 800997e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009982:	f000 fb8f 	bl	800a0a4 <__assert_func>
 8009986:	f100 0414 	add.w	r4, r0, #20
 800998a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800998e:	4623      	mov	r3, r4
 8009990:	2200      	movs	r2, #0
 8009992:	4573      	cmp	r3, lr
 8009994:	d320      	bcc.n	80099d8 <__multiply+0x94>
 8009996:	f107 0814 	add.w	r8, r7, #20
 800999a:	f109 0114 	add.w	r1, r9, #20
 800999e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80099a2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80099a6:	9302      	str	r3, [sp, #8]
 80099a8:	1beb      	subs	r3, r5, r7
 80099aa:	3b15      	subs	r3, #21
 80099ac:	f023 0303 	bic.w	r3, r3, #3
 80099b0:	3304      	adds	r3, #4
 80099b2:	3715      	adds	r7, #21
 80099b4:	42bd      	cmp	r5, r7
 80099b6:	bf38      	it	cc
 80099b8:	2304      	movcc	r3, #4
 80099ba:	9301      	str	r3, [sp, #4]
 80099bc:	9b02      	ldr	r3, [sp, #8]
 80099be:	9103      	str	r1, [sp, #12]
 80099c0:	428b      	cmp	r3, r1
 80099c2:	d80c      	bhi.n	80099de <__multiply+0x9a>
 80099c4:	2e00      	cmp	r6, #0
 80099c6:	dd03      	ble.n	80099d0 <__multiply+0x8c>
 80099c8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d055      	beq.n	8009a7c <__multiply+0x138>
 80099d0:	6106      	str	r6, [r0, #16]
 80099d2:	b005      	add	sp, #20
 80099d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d8:	f843 2b04 	str.w	r2, [r3], #4
 80099dc:	e7d9      	b.n	8009992 <__multiply+0x4e>
 80099de:	f8b1 a000 	ldrh.w	sl, [r1]
 80099e2:	f1ba 0f00 	cmp.w	sl, #0
 80099e6:	d01f      	beq.n	8009a28 <__multiply+0xe4>
 80099e8:	46c4      	mov	ip, r8
 80099ea:	46a1      	mov	r9, r4
 80099ec:	2700      	movs	r7, #0
 80099ee:	f85c 2b04 	ldr.w	r2, [ip], #4
 80099f2:	f8d9 3000 	ldr.w	r3, [r9]
 80099f6:	fa1f fb82 	uxth.w	fp, r2
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	fb0a 330b 	mla	r3, sl, fp, r3
 8009a00:	443b      	add	r3, r7
 8009a02:	f8d9 7000 	ldr.w	r7, [r9]
 8009a06:	0c12      	lsrs	r2, r2, #16
 8009a08:	0c3f      	lsrs	r7, r7, #16
 8009a0a:	fb0a 7202 	mla	r2, sl, r2, r7
 8009a0e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a18:	4565      	cmp	r5, ip
 8009a1a:	f849 3b04 	str.w	r3, [r9], #4
 8009a1e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009a22:	d8e4      	bhi.n	80099ee <__multiply+0xaa>
 8009a24:	9b01      	ldr	r3, [sp, #4]
 8009a26:	50e7      	str	r7, [r4, r3]
 8009a28:	9b03      	ldr	r3, [sp, #12]
 8009a2a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009a2e:	3104      	adds	r1, #4
 8009a30:	f1b9 0f00 	cmp.w	r9, #0
 8009a34:	d020      	beq.n	8009a78 <__multiply+0x134>
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	4647      	mov	r7, r8
 8009a3a:	46a4      	mov	ip, r4
 8009a3c:	f04f 0a00 	mov.w	sl, #0
 8009a40:	f8b7 b000 	ldrh.w	fp, [r7]
 8009a44:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009a48:	fb09 220b 	mla	r2, r9, fp, r2
 8009a4c:	4452      	add	r2, sl
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a54:	f84c 3b04 	str.w	r3, [ip], #4
 8009a58:	f857 3b04 	ldr.w	r3, [r7], #4
 8009a5c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a60:	f8bc 3000 	ldrh.w	r3, [ip]
 8009a64:	fb09 330a 	mla	r3, r9, sl, r3
 8009a68:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009a6c:	42bd      	cmp	r5, r7
 8009a6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009a72:	d8e5      	bhi.n	8009a40 <__multiply+0xfc>
 8009a74:	9a01      	ldr	r2, [sp, #4]
 8009a76:	50a3      	str	r3, [r4, r2]
 8009a78:	3404      	adds	r4, #4
 8009a7a:	e79f      	b.n	80099bc <__multiply+0x78>
 8009a7c:	3e01      	subs	r6, #1
 8009a7e:	e7a1      	b.n	80099c4 <__multiply+0x80>
 8009a80:	0801c59c 	.word	0x0801c59c
 8009a84:	0801c5ad 	.word	0x0801c5ad

08009a88 <__pow5mult>:
 8009a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a8c:	4615      	mov	r5, r2
 8009a8e:	f012 0203 	ands.w	r2, r2, #3
 8009a92:	4607      	mov	r7, r0
 8009a94:	460e      	mov	r6, r1
 8009a96:	d007      	beq.n	8009aa8 <__pow5mult+0x20>
 8009a98:	4c25      	ldr	r4, [pc, #148]	@ (8009b30 <__pow5mult+0xa8>)
 8009a9a:	3a01      	subs	r2, #1
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009aa2:	f7ff fea7 	bl	80097f4 <__multadd>
 8009aa6:	4606      	mov	r6, r0
 8009aa8:	10ad      	asrs	r5, r5, #2
 8009aaa:	d03d      	beq.n	8009b28 <__pow5mult+0xa0>
 8009aac:	69fc      	ldr	r4, [r7, #28]
 8009aae:	b97c      	cbnz	r4, 8009ad0 <__pow5mult+0x48>
 8009ab0:	2010      	movs	r0, #16
 8009ab2:	f7ff fd87 	bl	80095c4 <malloc>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	61f8      	str	r0, [r7, #28]
 8009aba:	b928      	cbnz	r0, 8009ac8 <__pow5mult+0x40>
 8009abc:	4b1d      	ldr	r3, [pc, #116]	@ (8009b34 <__pow5mult+0xac>)
 8009abe:	481e      	ldr	r0, [pc, #120]	@ (8009b38 <__pow5mult+0xb0>)
 8009ac0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009ac4:	f000 faee 	bl	800a0a4 <__assert_func>
 8009ac8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009acc:	6004      	str	r4, [r0, #0]
 8009ace:	60c4      	str	r4, [r0, #12]
 8009ad0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009ad4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ad8:	b94c      	cbnz	r4, 8009aee <__pow5mult+0x66>
 8009ada:	f240 2171 	movw	r1, #625	@ 0x271
 8009ade:	4638      	mov	r0, r7
 8009ae0:	f7ff ff1a 	bl	8009918 <__i2b>
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009aea:	4604      	mov	r4, r0
 8009aec:	6003      	str	r3, [r0, #0]
 8009aee:	f04f 0900 	mov.w	r9, #0
 8009af2:	07eb      	lsls	r3, r5, #31
 8009af4:	d50a      	bpl.n	8009b0c <__pow5mult+0x84>
 8009af6:	4631      	mov	r1, r6
 8009af8:	4622      	mov	r2, r4
 8009afa:	4638      	mov	r0, r7
 8009afc:	f7ff ff22 	bl	8009944 <__multiply>
 8009b00:	4631      	mov	r1, r6
 8009b02:	4680      	mov	r8, r0
 8009b04:	4638      	mov	r0, r7
 8009b06:	f7ff fe53 	bl	80097b0 <_Bfree>
 8009b0a:	4646      	mov	r6, r8
 8009b0c:	106d      	asrs	r5, r5, #1
 8009b0e:	d00b      	beq.n	8009b28 <__pow5mult+0xa0>
 8009b10:	6820      	ldr	r0, [r4, #0]
 8009b12:	b938      	cbnz	r0, 8009b24 <__pow5mult+0x9c>
 8009b14:	4622      	mov	r2, r4
 8009b16:	4621      	mov	r1, r4
 8009b18:	4638      	mov	r0, r7
 8009b1a:	f7ff ff13 	bl	8009944 <__multiply>
 8009b1e:	6020      	str	r0, [r4, #0]
 8009b20:	f8c0 9000 	str.w	r9, [r0]
 8009b24:	4604      	mov	r4, r0
 8009b26:	e7e4      	b.n	8009af2 <__pow5mult+0x6a>
 8009b28:	4630      	mov	r0, r6
 8009b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b2e:	bf00      	nop
 8009b30:	0801c660 	.word	0x0801c660
 8009b34:	0801c52d 	.word	0x0801c52d
 8009b38:	0801c5ad 	.word	0x0801c5ad

08009b3c <__lshift>:
 8009b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b40:	460c      	mov	r4, r1
 8009b42:	6849      	ldr	r1, [r1, #4]
 8009b44:	6923      	ldr	r3, [r4, #16]
 8009b46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009b4a:	68a3      	ldr	r3, [r4, #8]
 8009b4c:	4607      	mov	r7, r0
 8009b4e:	4691      	mov	r9, r2
 8009b50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b54:	f108 0601 	add.w	r6, r8, #1
 8009b58:	42b3      	cmp	r3, r6
 8009b5a:	db0b      	blt.n	8009b74 <__lshift+0x38>
 8009b5c:	4638      	mov	r0, r7
 8009b5e:	f7ff fde7 	bl	8009730 <_Balloc>
 8009b62:	4605      	mov	r5, r0
 8009b64:	b948      	cbnz	r0, 8009b7a <__lshift+0x3e>
 8009b66:	4602      	mov	r2, r0
 8009b68:	4b28      	ldr	r3, [pc, #160]	@ (8009c0c <__lshift+0xd0>)
 8009b6a:	4829      	ldr	r0, [pc, #164]	@ (8009c10 <__lshift+0xd4>)
 8009b6c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009b70:	f000 fa98 	bl	800a0a4 <__assert_func>
 8009b74:	3101      	adds	r1, #1
 8009b76:	005b      	lsls	r3, r3, #1
 8009b78:	e7ee      	b.n	8009b58 <__lshift+0x1c>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	f100 0114 	add.w	r1, r0, #20
 8009b80:	f100 0210 	add.w	r2, r0, #16
 8009b84:	4618      	mov	r0, r3
 8009b86:	4553      	cmp	r3, sl
 8009b88:	db33      	blt.n	8009bf2 <__lshift+0xb6>
 8009b8a:	6920      	ldr	r0, [r4, #16]
 8009b8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b90:	f104 0314 	add.w	r3, r4, #20
 8009b94:	f019 091f 	ands.w	r9, r9, #31
 8009b98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ba0:	d02b      	beq.n	8009bfa <__lshift+0xbe>
 8009ba2:	f1c9 0e20 	rsb	lr, r9, #32
 8009ba6:	468a      	mov	sl, r1
 8009ba8:	2200      	movs	r2, #0
 8009baa:	6818      	ldr	r0, [r3, #0]
 8009bac:	fa00 f009 	lsl.w	r0, r0, r9
 8009bb0:	4310      	orrs	r0, r2
 8009bb2:	f84a 0b04 	str.w	r0, [sl], #4
 8009bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bba:	459c      	cmp	ip, r3
 8009bbc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009bc0:	d8f3      	bhi.n	8009baa <__lshift+0x6e>
 8009bc2:	ebac 0304 	sub.w	r3, ip, r4
 8009bc6:	3b15      	subs	r3, #21
 8009bc8:	f023 0303 	bic.w	r3, r3, #3
 8009bcc:	3304      	adds	r3, #4
 8009bce:	f104 0015 	add.w	r0, r4, #21
 8009bd2:	4560      	cmp	r0, ip
 8009bd4:	bf88      	it	hi
 8009bd6:	2304      	movhi	r3, #4
 8009bd8:	50ca      	str	r2, [r1, r3]
 8009bda:	b10a      	cbz	r2, 8009be0 <__lshift+0xa4>
 8009bdc:	f108 0602 	add.w	r6, r8, #2
 8009be0:	3e01      	subs	r6, #1
 8009be2:	4638      	mov	r0, r7
 8009be4:	612e      	str	r6, [r5, #16]
 8009be6:	4621      	mov	r1, r4
 8009be8:	f7ff fde2 	bl	80097b0 <_Bfree>
 8009bec:	4628      	mov	r0, r5
 8009bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bf2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	e7c5      	b.n	8009b86 <__lshift+0x4a>
 8009bfa:	3904      	subs	r1, #4
 8009bfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c00:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c04:	459c      	cmp	ip, r3
 8009c06:	d8f9      	bhi.n	8009bfc <__lshift+0xc0>
 8009c08:	e7ea      	b.n	8009be0 <__lshift+0xa4>
 8009c0a:	bf00      	nop
 8009c0c:	0801c59c 	.word	0x0801c59c
 8009c10:	0801c5ad 	.word	0x0801c5ad

08009c14 <__mcmp>:
 8009c14:	690a      	ldr	r2, [r1, #16]
 8009c16:	4603      	mov	r3, r0
 8009c18:	6900      	ldr	r0, [r0, #16]
 8009c1a:	1a80      	subs	r0, r0, r2
 8009c1c:	b530      	push	{r4, r5, lr}
 8009c1e:	d10e      	bne.n	8009c3e <__mcmp+0x2a>
 8009c20:	3314      	adds	r3, #20
 8009c22:	3114      	adds	r1, #20
 8009c24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009c28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009c2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009c30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009c34:	4295      	cmp	r5, r2
 8009c36:	d003      	beq.n	8009c40 <__mcmp+0x2c>
 8009c38:	d205      	bcs.n	8009c46 <__mcmp+0x32>
 8009c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c3e:	bd30      	pop	{r4, r5, pc}
 8009c40:	42a3      	cmp	r3, r4
 8009c42:	d3f3      	bcc.n	8009c2c <__mcmp+0x18>
 8009c44:	e7fb      	b.n	8009c3e <__mcmp+0x2a>
 8009c46:	2001      	movs	r0, #1
 8009c48:	e7f9      	b.n	8009c3e <__mcmp+0x2a>
	...

08009c4c <__mdiff>:
 8009c4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c50:	4689      	mov	r9, r1
 8009c52:	4606      	mov	r6, r0
 8009c54:	4611      	mov	r1, r2
 8009c56:	4648      	mov	r0, r9
 8009c58:	4614      	mov	r4, r2
 8009c5a:	f7ff ffdb 	bl	8009c14 <__mcmp>
 8009c5e:	1e05      	subs	r5, r0, #0
 8009c60:	d112      	bne.n	8009c88 <__mdiff+0x3c>
 8009c62:	4629      	mov	r1, r5
 8009c64:	4630      	mov	r0, r6
 8009c66:	f7ff fd63 	bl	8009730 <_Balloc>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	b928      	cbnz	r0, 8009c7a <__mdiff+0x2e>
 8009c6e:	4b3f      	ldr	r3, [pc, #252]	@ (8009d6c <__mdiff+0x120>)
 8009c70:	f240 2137 	movw	r1, #567	@ 0x237
 8009c74:	483e      	ldr	r0, [pc, #248]	@ (8009d70 <__mdiff+0x124>)
 8009c76:	f000 fa15 	bl	800a0a4 <__assert_func>
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c80:	4610      	mov	r0, r2
 8009c82:	b003      	add	sp, #12
 8009c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c88:	bfbc      	itt	lt
 8009c8a:	464b      	movlt	r3, r9
 8009c8c:	46a1      	movlt	r9, r4
 8009c8e:	4630      	mov	r0, r6
 8009c90:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009c94:	bfba      	itte	lt
 8009c96:	461c      	movlt	r4, r3
 8009c98:	2501      	movlt	r5, #1
 8009c9a:	2500      	movge	r5, #0
 8009c9c:	f7ff fd48 	bl	8009730 <_Balloc>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	b918      	cbnz	r0, 8009cac <__mdiff+0x60>
 8009ca4:	4b31      	ldr	r3, [pc, #196]	@ (8009d6c <__mdiff+0x120>)
 8009ca6:	f240 2145 	movw	r1, #581	@ 0x245
 8009caa:	e7e3      	b.n	8009c74 <__mdiff+0x28>
 8009cac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009cb0:	6926      	ldr	r6, [r4, #16]
 8009cb2:	60c5      	str	r5, [r0, #12]
 8009cb4:	f109 0310 	add.w	r3, r9, #16
 8009cb8:	f109 0514 	add.w	r5, r9, #20
 8009cbc:	f104 0e14 	add.w	lr, r4, #20
 8009cc0:	f100 0b14 	add.w	fp, r0, #20
 8009cc4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009cc8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009ccc:	9301      	str	r3, [sp, #4]
 8009cce:	46d9      	mov	r9, fp
 8009cd0:	f04f 0c00 	mov.w	ip, #0
 8009cd4:	9b01      	ldr	r3, [sp, #4]
 8009cd6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009cda:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009cde:	9301      	str	r3, [sp, #4]
 8009ce0:	fa1f f38a 	uxth.w	r3, sl
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	b283      	uxth	r3, r0
 8009ce8:	1acb      	subs	r3, r1, r3
 8009cea:	0c00      	lsrs	r0, r0, #16
 8009cec:	4463      	add	r3, ip
 8009cee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009cf2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009cfc:	4576      	cmp	r6, lr
 8009cfe:	f849 3b04 	str.w	r3, [r9], #4
 8009d02:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009d06:	d8e5      	bhi.n	8009cd4 <__mdiff+0x88>
 8009d08:	1b33      	subs	r3, r6, r4
 8009d0a:	3b15      	subs	r3, #21
 8009d0c:	f023 0303 	bic.w	r3, r3, #3
 8009d10:	3415      	adds	r4, #21
 8009d12:	3304      	adds	r3, #4
 8009d14:	42a6      	cmp	r6, r4
 8009d16:	bf38      	it	cc
 8009d18:	2304      	movcc	r3, #4
 8009d1a:	441d      	add	r5, r3
 8009d1c:	445b      	add	r3, fp
 8009d1e:	461e      	mov	r6, r3
 8009d20:	462c      	mov	r4, r5
 8009d22:	4544      	cmp	r4, r8
 8009d24:	d30e      	bcc.n	8009d44 <__mdiff+0xf8>
 8009d26:	f108 0103 	add.w	r1, r8, #3
 8009d2a:	1b49      	subs	r1, r1, r5
 8009d2c:	f021 0103 	bic.w	r1, r1, #3
 8009d30:	3d03      	subs	r5, #3
 8009d32:	45a8      	cmp	r8, r5
 8009d34:	bf38      	it	cc
 8009d36:	2100      	movcc	r1, #0
 8009d38:	440b      	add	r3, r1
 8009d3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d3e:	b191      	cbz	r1, 8009d66 <__mdiff+0x11a>
 8009d40:	6117      	str	r7, [r2, #16]
 8009d42:	e79d      	b.n	8009c80 <__mdiff+0x34>
 8009d44:	f854 1b04 	ldr.w	r1, [r4], #4
 8009d48:	46e6      	mov	lr, ip
 8009d4a:	0c08      	lsrs	r0, r1, #16
 8009d4c:	fa1c fc81 	uxtah	ip, ip, r1
 8009d50:	4471      	add	r1, lr
 8009d52:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009d56:	b289      	uxth	r1, r1
 8009d58:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009d5c:	f846 1b04 	str.w	r1, [r6], #4
 8009d60:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009d64:	e7dd      	b.n	8009d22 <__mdiff+0xd6>
 8009d66:	3f01      	subs	r7, #1
 8009d68:	e7e7      	b.n	8009d3a <__mdiff+0xee>
 8009d6a:	bf00      	nop
 8009d6c:	0801c59c 	.word	0x0801c59c
 8009d70:	0801c5ad 	.word	0x0801c5ad

08009d74 <__d2b>:
 8009d74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d78:	460f      	mov	r7, r1
 8009d7a:	2101      	movs	r1, #1
 8009d7c:	ec59 8b10 	vmov	r8, r9, d0
 8009d80:	4616      	mov	r6, r2
 8009d82:	f7ff fcd5 	bl	8009730 <_Balloc>
 8009d86:	4604      	mov	r4, r0
 8009d88:	b930      	cbnz	r0, 8009d98 <__d2b+0x24>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	4b23      	ldr	r3, [pc, #140]	@ (8009e1c <__d2b+0xa8>)
 8009d8e:	4824      	ldr	r0, [pc, #144]	@ (8009e20 <__d2b+0xac>)
 8009d90:	f240 310f 	movw	r1, #783	@ 0x30f
 8009d94:	f000 f986 	bl	800a0a4 <__assert_func>
 8009d98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009d9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009da0:	b10d      	cbz	r5, 8009da6 <__d2b+0x32>
 8009da2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009da6:	9301      	str	r3, [sp, #4]
 8009da8:	f1b8 0300 	subs.w	r3, r8, #0
 8009dac:	d023      	beq.n	8009df6 <__d2b+0x82>
 8009dae:	4668      	mov	r0, sp
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	f7ff fd84 	bl	80098be <__lo0bits>
 8009db6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009dba:	b1d0      	cbz	r0, 8009df2 <__d2b+0x7e>
 8009dbc:	f1c0 0320 	rsb	r3, r0, #32
 8009dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8009dc4:	430b      	orrs	r3, r1
 8009dc6:	40c2      	lsrs	r2, r0
 8009dc8:	6163      	str	r3, [r4, #20]
 8009dca:	9201      	str	r2, [sp, #4]
 8009dcc:	9b01      	ldr	r3, [sp, #4]
 8009dce:	61a3      	str	r3, [r4, #24]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	bf0c      	ite	eq
 8009dd4:	2201      	moveq	r2, #1
 8009dd6:	2202      	movne	r2, #2
 8009dd8:	6122      	str	r2, [r4, #16]
 8009dda:	b1a5      	cbz	r5, 8009e06 <__d2b+0x92>
 8009ddc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009de0:	4405      	add	r5, r0
 8009de2:	603d      	str	r5, [r7, #0]
 8009de4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009de8:	6030      	str	r0, [r6, #0]
 8009dea:	4620      	mov	r0, r4
 8009dec:	b003      	add	sp, #12
 8009dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009df2:	6161      	str	r1, [r4, #20]
 8009df4:	e7ea      	b.n	8009dcc <__d2b+0x58>
 8009df6:	a801      	add	r0, sp, #4
 8009df8:	f7ff fd61 	bl	80098be <__lo0bits>
 8009dfc:	9b01      	ldr	r3, [sp, #4]
 8009dfe:	6163      	str	r3, [r4, #20]
 8009e00:	3020      	adds	r0, #32
 8009e02:	2201      	movs	r2, #1
 8009e04:	e7e8      	b.n	8009dd8 <__d2b+0x64>
 8009e06:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e0a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009e0e:	6038      	str	r0, [r7, #0]
 8009e10:	6918      	ldr	r0, [r3, #16]
 8009e12:	f7ff fd35 	bl	8009880 <__hi0bits>
 8009e16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e1a:	e7e5      	b.n	8009de8 <__d2b+0x74>
 8009e1c:	0801c59c 	.word	0x0801c59c
 8009e20:	0801c5ad 	.word	0x0801c5ad

08009e24 <__sflush_r>:
 8009e24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2c:	0716      	lsls	r6, r2, #28
 8009e2e:	4605      	mov	r5, r0
 8009e30:	460c      	mov	r4, r1
 8009e32:	d454      	bmi.n	8009ede <__sflush_r+0xba>
 8009e34:	684b      	ldr	r3, [r1, #4]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	dc02      	bgt.n	8009e40 <__sflush_r+0x1c>
 8009e3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	dd48      	ble.n	8009ed2 <__sflush_r+0xae>
 8009e40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e42:	2e00      	cmp	r6, #0
 8009e44:	d045      	beq.n	8009ed2 <__sflush_r+0xae>
 8009e46:	2300      	movs	r3, #0
 8009e48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009e4c:	682f      	ldr	r7, [r5, #0]
 8009e4e:	6a21      	ldr	r1, [r4, #32]
 8009e50:	602b      	str	r3, [r5, #0]
 8009e52:	d030      	beq.n	8009eb6 <__sflush_r+0x92>
 8009e54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009e56:	89a3      	ldrh	r3, [r4, #12]
 8009e58:	0759      	lsls	r1, r3, #29
 8009e5a:	d505      	bpl.n	8009e68 <__sflush_r+0x44>
 8009e5c:	6863      	ldr	r3, [r4, #4]
 8009e5e:	1ad2      	subs	r2, r2, r3
 8009e60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009e62:	b10b      	cbz	r3, 8009e68 <__sflush_r+0x44>
 8009e64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009e66:	1ad2      	subs	r2, r2, r3
 8009e68:	2300      	movs	r3, #0
 8009e6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009e6c:	6a21      	ldr	r1, [r4, #32]
 8009e6e:	4628      	mov	r0, r5
 8009e70:	47b0      	blx	r6
 8009e72:	1c43      	adds	r3, r0, #1
 8009e74:	89a3      	ldrh	r3, [r4, #12]
 8009e76:	d106      	bne.n	8009e86 <__sflush_r+0x62>
 8009e78:	6829      	ldr	r1, [r5, #0]
 8009e7a:	291d      	cmp	r1, #29
 8009e7c:	d82b      	bhi.n	8009ed6 <__sflush_r+0xb2>
 8009e7e:	4a2a      	ldr	r2, [pc, #168]	@ (8009f28 <__sflush_r+0x104>)
 8009e80:	40ca      	lsrs	r2, r1
 8009e82:	07d6      	lsls	r6, r2, #31
 8009e84:	d527      	bpl.n	8009ed6 <__sflush_r+0xb2>
 8009e86:	2200      	movs	r2, #0
 8009e88:	6062      	str	r2, [r4, #4]
 8009e8a:	04d9      	lsls	r1, r3, #19
 8009e8c:	6922      	ldr	r2, [r4, #16]
 8009e8e:	6022      	str	r2, [r4, #0]
 8009e90:	d504      	bpl.n	8009e9c <__sflush_r+0x78>
 8009e92:	1c42      	adds	r2, r0, #1
 8009e94:	d101      	bne.n	8009e9a <__sflush_r+0x76>
 8009e96:	682b      	ldr	r3, [r5, #0]
 8009e98:	b903      	cbnz	r3, 8009e9c <__sflush_r+0x78>
 8009e9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009e9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e9e:	602f      	str	r7, [r5, #0]
 8009ea0:	b1b9      	cbz	r1, 8009ed2 <__sflush_r+0xae>
 8009ea2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ea6:	4299      	cmp	r1, r3
 8009ea8:	d002      	beq.n	8009eb0 <__sflush_r+0x8c>
 8009eaa:	4628      	mov	r0, r5
 8009eac:	f7ff fb40 	bl	8009530 <_free_r>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	6363      	str	r3, [r4, #52]	@ 0x34
 8009eb4:	e00d      	b.n	8009ed2 <__sflush_r+0xae>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	4628      	mov	r0, r5
 8009eba:	47b0      	blx	r6
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	1c50      	adds	r0, r2, #1
 8009ec0:	d1c9      	bne.n	8009e56 <__sflush_r+0x32>
 8009ec2:	682b      	ldr	r3, [r5, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d0c6      	beq.n	8009e56 <__sflush_r+0x32>
 8009ec8:	2b1d      	cmp	r3, #29
 8009eca:	d001      	beq.n	8009ed0 <__sflush_r+0xac>
 8009ecc:	2b16      	cmp	r3, #22
 8009ece:	d11e      	bne.n	8009f0e <__sflush_r+0xea>
 8009ed0:	602f      	str	r7, [r5, #0]
 8009ed2:	2000      	movs	r0, #0
 8009ed4:	e022      	b.n	8009f1c <__sflush_r+0xf8>
 8009ed6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009eda:	b21b      	sxth	r3, r3
 8009edc:	e01b      	b.n	8009f16 <__sflush_r+0xf2>
 8009ede:	690f      	ldr	r7, [r1, #16]
 8009ee0:	2f00      	cmp	r7, #0
 8009ee2:	d0f6      	beq.n	8009ed2 <__sflush_r+0xae>
 8009ee4:	0793      	lsls	r3, r2, #30
 8009ee6:	680e      	ldr	r6, [r1, #0]
 8009ee8:	bf08      	it	eq
 8009eea:	694b      	ldreq	r3, [r1, #20]
 8009eec:	600f      	str	r7, [r1, #0]
 8009eee:	bf18      	it	ne
 8009ef0:	2300      	movne	r3, #0
 8009ef2:	eba6 0807 	sub.w	r8, r6, r7
 8009ef6:	608b      	str	r3, [r1, #8]
 8009ef8:	f1b8 0f00 	cmp.w	r8, #0
 8009efc:	dde9      	ble.n	8009ed2 <__sflush_r+0xae>
 8009efe:	6a21      	ldr	r1, [r4, #32]
 8009f00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009f02:	4643      	mov	r3, r8
 8009f04:	463a      	mov	r2, r7
 8009f06:	4628      	mov	r0, r5
 8009f08:	47b0      	blx	r6
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	dc08      	bgt.n	8009f20 <__sflush_r+0xfc>
 8009f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f16:	81a3      	strh	r3, [r4, #12]
 8009f18:	f04f 30ff 	mov.w	r0, #4294967295
 8009f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f20:	4407      	add	r7, r0
 8009f22:	eba8 0800 	sub.w	r8, r8, r0
 8009f26:	e7e7      	b.n	8009ef8 <__sflush_r+0xd4>
 8009f28:	20400001 	.word	0x20400001

08009f2c <_fflush_r>:
 8009f2c:	b538      	push	{r3, r4, r5, lr}
 8009f2e:	690b      	ldr	r3, [r1, #16]
 8009f30:	4605      	mov	r5, r0
 8009f32:	460c      	mov	r4, r1
 8009f34:	b913      	cbnz	r3, 8009f3c <_fflush_r+0x10>
 8009f36:	2500      	movs	r5, #0
 8009f38:	4628      	mov	r0, r5
 8009f3a:	bd38      	pop	{r3, r4, r5, pc}
 8009f3c:	b118      	cbz	r0, 8009f46 <_fflush_r+0x1a>
 8009f3e:	6a03      	ldr	r3, [r0, #32]
 8009f40:	b90b      	cbnz	r3, 8009f46 <_fflush_r+0x1a>
 8009f42:	f7fe fadf 	bl	8008504 <__sinit>
 8009f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d0f3      	beq.n	8009f36 <_fflush_r+0xa>
 8009f4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009f50:	07d0      	lsls	r0, r2, #31
 8009f52:	d404      	bmi.n	8009f5e <_fflush_r+0x32>
 8009f54:	0599      	lsls	r1, r3, #22
 8009f56:	d402      	bmi.n	8009f5e <_fflush_r+0x32>
 8009f58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f5a:	f7fe fc7e 	bl	800885a <__retarget_lock_acquire_recursive>
 8009f5e:	4628      	mov	r0, r5
 8009f60:	4621      	mov	r1, r4
 8009f62:	f7ff ff5f 	bl	8009e24 <__sflush_r>
 8009f66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009f68:	07da      	lsls	r2, r3, #31
 8009f6a:	4605      	mov	r5, r0
 8009f6c:	d4e4      	bmi.n	8009f38 <_fflush_r+0xc>
 8009f6e:	89a3      	ldrh	r3, [r4, #12]
 8009f70:	059b      	lsls	r3, r3, #22
 8009f72:	d4e1      	bmi.n	8009f38 <_fflush_r+0xc>
 8009f74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f76:	f7fe fc71 	bl	800885c <__retarget_lock_release_recursive>
 8009f7a:	e7dd      	b.n	8009f38 <_fflush_r+0xc>

08009f7c <__swhatbuf_r>:
 8009f7c:	b570      	push	{r4, r5, r6, lr}
 8009f7e:	460c      	mov	r4, r1
 8009f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f84:	2900      	cmp	r1, #0
 8009f86:	b096      	sub	sp, #88	@ 0x58
 8009f88:	4615      	mov	r5, r2
 8009f8a:	461e      	mov	r6, r3
 8009f8c:	da0d      	bge.n	8009faa <__swhatbuf_r+0x2e>
 8009f8e:	89a3      	ldrh	r3, [r4, #12]
 8009f90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f94:	f04f 0100 	mov.w	r1, #0
 8009f98:	bf14      	ite	ne
 8009f9a:	2340      	movne	r3, #64	@ 0x40
 8009f9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	6031      	str	r1, [r6, #0]
 8009fa4:	602b      	str	r3, [r5, #0]
 8009fa6:	b016      	add	sp, #88	@ 0x58
 8009fa8:	bd70      	pop	{r4, r5, r6, pc}
 8009faa:	466a      	mov	r2, sp
 8009fac:	f000 f848 	bl	800a040 <_fstat_r>
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	dbec      	blt.n	8009f8e <__swhatbuf_r+0x12>
 8009fb4:	9901      	ldr	r1, [sp, #4]
 8009fb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009fba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009fbe:	4259      	negs	r1, r3
 8009fc0:	4159      	adcs	r1, r3
 8009fc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009fc6:	e7eb      	b.n	8009fa0 <__swhatbuf_r+0x24>

08009fc8 <__smakebuf_r>:
 8009fc8:	898b      	ldrh	r3, [r1, #12]
 8009fca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fcc:	079d      	lsls	r5, r3, #30
 8009fce:	4606      	mov	r6, r0
 8009fd0:	460c      	mov	r4, r1
 8009fd2:	d507      	bpl.n	8009fe4 <__smakebuf_r+0x1c>
 8009fd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	6123      	str	r3, [r4, #16]
 8009fdc:	2301      	movs	r3, #1
 8009fde:	6163      	str	r3, [r4, #20]
 8009fe0:	b003      	add	sp, #12
 8009fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fe4:	ab01      	add	r3, sp, #4
 8009fe6:	466a      	mov	r2, sp
 8009fe8:	f7ff ffc8 	bl	8009f7c <__swhatbuf_r>
 8009fec:	9f00      	ldr	r7, [sp, #0]
 8009fee:	4605      	mov	r5, r0
 8009ff0:	4639      	mov	r1, r7
 8009ff2:	4630      	mov	r0, r6
 8009ff4:	f7ff fb10 	bl	8009618 <_malloc_r>
 8009ff8:	b948      	cbnz	r0, 800a00e <__smakebuf_r+0x46>
 8009ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ffe:	059a      	lsls	r2, r3, #22
 800a000:	d4ee      	bmi.n	8009fe0 <__smakebuf_r+0x18>
 800a002:	f023 0303 	bic.w	r3, r3, #3
 800a006:	f043 0302 	orr.w	r3, r3, #2
 800a00a:	81a3      	strh	r3, [r4, #12]
 800a00c:	e7e2      	b.n	8009fd4 <__smakebuf_r+0xc>
 800a00e:	89a3      	ldrh	r3, [r4, #12]
 800a010:	6020      	str	r0, [r4, #0]
 800a012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a016:	81a3      	strh	r3, [r4, #12]
 800a018:	9b01      	ldr	r3, [sp, #4]
 800a01a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a01e:	b15b      	cbz	r3, 800a038 <__smakebuf_r+0x70>
 800a020:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a024:	4630      	mov	r0, r6
 800a026:	f000 f81d 	bl	800a064 <_isatty_r>
 800a02a:	b128      	cbz	r0, 800a038 <__smakebuf_r+0x70>
 800a02c:	89a3      	ldrh	r3, [r4, #12]
 800a02e:	f023 0303 	bic.w	r3, r3, #3
 800a032:	f043 0301 	orr.w	r3, r3, #1
 800a036:	81a3      	strh	r3, [r4, #12]
 800a038:	89a3      	ldrh	r3, [r4, #12]
 800a03a:	431d      	orrs	r5, r3
 800a03c:	81a5      	strh	r5, [r4, #12]
 800a03e:	e7cf      	b.n	8009fe0 <__smakebuf_r+0x18>

0800a040 <_fstat_r>:
 800a040:	b538      	push	{r3, r4, r5, lr}
 800a042:	4d07      	ldr	r5, [pc, #28]	@ (800a060 <_fstat_r+0x20>)
 800a044:	2300      	movs	r3, #0
 800a046:	4604      	mov	r4, r0
 800a048:	4608      	mov	r0, r1
 800a04a:	4611      	mov	r1, r2
 800a04c:	602b      	str	r3, [r5, #0]
 800a04e:	f7f7 fd4b 	bl	8001ae8 <_fstat>
 800a052:	1c43      	adds	r3, r0, #1
 800a054:	d102      	bne.n	800a05c <_fstat_r+0x1c>
 800a056:	682b      	ldr	r3, [r5, #0]
 800a058:	b103      	cbz	r3, 800a05c <_fstat_r+0x1c>
 800a05a:	6023      	str	r3, [r4, #0]
 800a05c:	bd38      	pop	{r3, r4, r5, pc}
 800a05e:	bf00      	nop
 800a060:	20004ac8 	.word	0x20004ac8

0800a064 <_isatty_r>:
 800a064:	b538      	push	{r3, r4, r5, lr}
 800a066:	4d06      	ldr	r5, [pc, #24]	@ (800a080 <_isatty_r+0x1c>)
 800a068:	2300      	movs	r3, #0
 800a06a:	4604      	mov	r4, r0
 800a06c:	4608      	mov	r0, r1
 800a06e:	602b      	str	r3, [r5, #0]
 800a070:	f7f7 fce8 	bl	8001a44 <_isatty>
 800a074:	1c43      	adds	r3, r0, #1
 800a076:	d102      	bne.n	800a07e <_isatty_r+0x1a>
 800a078:	682b      	ldr	r3, [r5, #0]
 800a07a:	b103      	cbz	r3, 800a07e <_isatty_r+0x1a>
 800a07c:	6023      	str	r3, [r4, #0]
 800a07e:	bd38      	pop	{r3, r4, r5, pc}
 800a080:	20004ac8 	.word	0x20004ac8

0800a084 <_sbrk_r>:
 800a084:	b538      	push	{r3, r4, r5, lr}
 800a086:	4d06      	ldr	r5, [pc, #24]	@ (800a0a0 <_sbrk_r+0x1c>)
 800a088:	2300      	movs	r3, #0
 800a08a:	4604      	mov	r4, r0
 800a08c:	4608      	mov	r0, r1
 800a08e:	602b      	str	r3, [r5, #0]
 800a090:	f7f8 fece 	bl	8002e30 <_sbrk>
 800a094:	1c43      	adds	r3, r0, #1
 800a096:	d102      	bne.n	800a09e <_sbrk_r+0x1a>
 800a098:	682b      	ldr	r3, [r5, #0]
 800a09a:	b103      	cbz	r3, 800a09e <_sbrk_r+0x1a>
 800a09c:	6023      	str	r3, [r4, #0]
 800a09e:	bd38      	pop	{r3, r4, r5, pc}
 800a0a0:	20004ac8 	.word	0x20004ac8

0800a0a4 <__assert_func>:
 800a0a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0a6:	4614      	mov	r4, r2
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	4b09      	ldr	r3, [pc, #36]	@ (800a0d0 <__assert_func+0x2c>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4605      	mov	r5, r0
 800a0b0:	68d8      	ldr	r0, [r3, #12]
 800a0b2:	b14c      	cbz	r4, 800a0c8 <__assert_func+0x24>
 800a0b4:	4b07      	ldr	r3, [pc, #28]	@ (800a0d4 <__assert_func+0x30>)
 800a0b6:	9100      	str	r1, [sp, #0]
 800a0b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0bc:	4906      	ldr	r1, [pc, #24]	@ (800a0d8 <__assert_func+0x34>)
 800a0be:	462b      	mov	r3, r5
 800a0c0:	f000 f842 	bl	800a148 <fiprintf>
 800a0c4:	f000 f852 	bl	800a16c <abort>
 800a0c8:	4b04      	ldr	r3, [pc, #16]	@ (800a0dc <__assert_func+0x38>)
 800a0ca:	461c      	mov	r4, r3
 800a0cc:	e7f3      	b.n	800a0b6 <__assert_func+0x12>
 800a0ce:	bf00      	nop
 800a0d0:	20002c18 	.word	0x20002c18
 800a0d4:	0801c610 	.word	0x0801c610
 800a0d8:	0801c61d 	.word	0x0801c61d
 800a0dc:	0801c64b 	.word	0x0801c64b

0800a0e0 <_calloc_r>:
 800a0e0:	b570      	push	{r4, r5, r6, lr}
 800a0e2:	fba1 5402 	umull	r5, r4, r1, r2
 800a0e6:	b934      	cbnz	r4, 800a0f6 <_calloc_r+0x16>
 800a0e8:	4629      	mov	r1, r5
 800a0ea:	f7ff fa95 	bl	8009618 <_malloc_r>
 800a0ee:	4606      	mov	r6, r0
 800a0f0:	b928      	cbnz	r0, 800a0fe <_calloc_r+0x1e>
 800a0f2:	4630      	mov	r0, r6
 800a0f4:	bd70      	pop	{r4, r5, r6, pc}
 800a0f6:	220c      	movs	r2, #12
 800a0f8:	6002      	str	r2, [r0, #0]
 800a0fa:	2600      	movs	r6, #0
 800a0fc:	e7f9      	b.n	800a0f2 <_calloc_r+0x12>
 800a0fe:	462a      	mov	r2, r5
 800a100:	4621      	mov	r1, r4
 800a102:	f7fe fb2c 	bl	800875e <memset>
 800a106:	e7f4      	b.n	800a0f2 <_calloc_r+0x12>

0800a108 <__ascii_mbtowc>:
 800a108:	b082      	sub	sp, #8
 800a10a:	b901      	cbnz	r1, 800a10e <__ascii_mbtowc+0x6>
 800a10c:	a901      	add	r1, sp, #4
 800a10e:	b142      	cbz	r2, 800a122 <__ascii_mbtowc+0x1a>
 800a110:	b14b      	cbz	r3, 800a126 <__ascii_mbtowc+0x1e>
 800a112:	7813      	ldrb	r3, [r2, #0]
 800a114:	600b      	str	r3, [r1, #0]
 800a116:	7812      	ldrb	r2, [r2, #0]
 800a118:	1e10      	subs	r0, r2, #0
 800a11a:	bf18      	it	ne
 800a11c:	2001      	movne	r0, #1
 800a11e:	b002      	add	sp, #8
 800a120:	4770      	bx	lr
 800a122:	4610      	mov	r0, r2
 800a124:	e7fb      	b.n	800a11e <__ascii_mbtowc+0x16>
 800a126:	f06f 0001 	mvn.w	r0, #1
 800a12a:	e7f8      	b.n	800a11e <__ascii_mbtowc+0x16>

0800a12c <__ascii_wctomb>:
 800a12c:	4603      	mov	r3, r0
 800a12e:	4608      	mov	r0, r1
 800a130:	b141      	cbz	r1, 800a144 <__ascii_wctomb+0x18>
 800a132:	2aff      	cmp	r2, #255	@ 0xff
 800a134:	d904      	bls.n	800a140 <__ascii_wctomb+0x14>
 800a136:	228a      	movs	r2, #138	@ 0x8a
 800a138:	601a      	str	r2, [r3, #0]
 800a13a:	f04f 30ff 	mov.w	r0, #4294967295
 800a13e:	4770      	bx	lr
 800a140:	700a      	strb	r2, [r1, #0]
 800a142:	2001      	movs	r0, #1
 800a144:	4770      	bx	lr
	...

0800a148 <fiprintf>:
 800a148:	b40e      	push	{r1, r2, r3}
 800a14a:	b503      	push	{r0, r1, lr}
 800a14c:	4601      	mov	r1, r0
 800a14e:	ab03      	add	r3, sp, #12
 800a150:	4805      	ldr	r0, [pc, #20]	@ (800a168 <fiprintf+0x20>)
 800a152:	f853 2b04 	ldr.w	r2, [r3], #4
 800a156:	6800      	ldr	r0, [r0, #0]
 800a158:	9301      	str	r3, [sp, #4]
 800a15a:	f000 f837 	bl	800a1cc <_vfiprintf_r>
 800a15e:	b002      	add	sp, #8
 800a160:	f85d eb04 	ldr.w	lr, [sp], #4
 800a164:	b003      	add	sp, #12
 800a166:	4770      	bx	lr
 800a168:	20002c18 	.word	0x20002c18

0800a16c <abort>:
 800a16c:	b508      	push	{r3, lr}
 800a16e:	2006      	movs	r0, #6
 800a170:	f000 fa00 	bl	800a574 <raise>
 800a174:	2001      	movs	r0, #1
 800a176:	f000 fa29 	bl	800a5cc <_exit>

0800a17a <__sfputc_r>:
 800a17a:	6893      	ldr	r3, [r2, #8]
 800a17c:	3b01      	subs	r3, #1
 800a17e:	2b00      	cmp	r3, #0
 800a180:	b410      	push	{r4}
 800a182:	6093      	str	r3, [r2, #8]
 800a184:	da08      	bge.n	800a198 <__sfputc_r+0x1e>
 800a186:	6994      	ldr	r4, [r2, #24]
 800a188:	42a3      	cmp	r3, r4
 800a18a:	db01      	blt.n	800a190 <__sfputc_r+0x16>
 800a18c:	290a      	cmp	r1, #10
 800a18e:	d103      	bne.n	800a198 <__sfputc_r+0x1e>
 800a190:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a194:	f000 b932 	b.w	800a3fc <__swbuf_r>
 800a198:	6813      	ldr	r3, [r2, #0]
 800a19a:	1c58      	adds	r0, r3, #1
 800a19c:	6010      	str	r0, [r2, #0]
 800a19e:	7019      	strb	r1, [r3, #0]
 800a1a0:	4608      	mov	r0, r1
 800a1a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <__sfputs_r>:
 800a1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1aa:	4606      	mov	r6, r0
 800a1ac:	460f      	mov	r7, r1
 800a1ae:	4614      	mov	r4, r2
 800a1b0:	18d5      	adds	r5, r2, r3
 800a1b2:	42ac      	cmp	r4, r5
 800a1b4:	d101      	bne.n	800a1ba <__sfputs_r+0x12>
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	e007      	b.n	800a1ca <__sfputs_r+0x22>
 800a1ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1be:	463a      	mov	r2, r7
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f7ff ffda 	bl	800a17a <__sfputc_r>
 800a1c6:	1c43      	adds	r3, r0, #1
 800a1c8:	d1f3      	bne.n	800a1b2 <__sfputs_r+0xa>
 800a1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a1cc <_vfiprintf_r>:
 800a1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1d0:	460d      	mov	r5, r1
 800a1d2:	b09d      	sub	sp, #116	@ 0x74
 800a1d4:	4614      	mov	r4, r2
 800a1d6:	4698      	mov	r8, r3
 800a1d8:	4606      	mov	r6, r0
 800a1da:	b118      	cbz	r0, 800a1e4 <_vfiprintf_r+0x18>
 800a1dc:	6a03      	ldr	r3, [r0, #32]
 800a1de:	b90b      	cbnz	r3, 800a1e4 <_vfiprintf_r+0x18>
 800a1e0:	f7fe f990 	bl	8008504 <__sinit>
 800a1e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1e6:	07d9      	lsls	r1, r3, #31
 800a1e8:	d405      	bmi.n	800a1f6 <_vfiprintf_r+0x2a>
 800a1ea:	89ab      	ldrh	r3, [r5, #12]
 800a1ec:	059a      	lsls	r2, r3, #22
 800a1ee:	d402      	bmi.n	800a1f6 <_vfiprintf_r+0x2a>
 800a1f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1f2:	f7fe fb32 	bl	800885a <__retarget_lock_acquire_recursive>
 800a1f6:	89ab      	ldrh	r3, [r5, #12]
 800a1f8:	071b      	lsls	r3, r3, #28
 800a1fa:	d501      	bpl.n	800a200 <_vfiprintf_r+0x34>
 800a1fc:	692b      	ldr	r3, [r5, #16]
 800a1fe:	b99b      	cbnz	r3, 800a228 <_vfiprintf_r+0x5c>
 800a200:	4629      	mov	r1, r5
 800a202:	4630      	mov	r0, r6
 800a204:	f000 f938 	bl	800a478 <__swsetup_r>
 800a208:	b170      	cbz	r0, 800a228 <_vfiprintf_r+0x5c>
 800a20a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a20c:	07dc      	lsls	r4, r3, #31
 800a20e:	d504      	bpl.n	800a21a <_vfiprintf_r+0x4e>
 800a210:	f04f 30ff 	mov.w	r0, #4294967295
 800a214:	b01d      	add	sp, #116	@ 0x74
 800a216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a21a:	89ab      	ldrh	r3, [r5, #12]
 800a21c:	0598      	lsls	r0, r3, #22
 800a21e:	d4f7      	bmi.n	800a210 <_vfiprintf_r+0x44>
 800a220:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a222:	f7fe fb1b 	bl	800885c <__retarget_lock_release_recursive>
 800a226:	e7f3      	b.n	800a210 <_vfiprintf_r+0x44>
 800a228:	2300      	movs	r3, #0
 800a22a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a22c:	2320      	movs	r3, #32
 800a22e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a232:	f8cd 800c 	str.w	r8, [sp, #12]
 800a236:	2330      	movs	r3, #48	@ 0x30
 800a238:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a3e8 <_vfiprintf_r+0x21c>
 800a23c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a240:	f04f 0901 	mov.w	r9, #1
 800a244:	4623      	mov	r3, r4
 800a246:	469a      	mov	sl, r3
 800a248:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a24c:	b10a      	cbz	r2, 800a252 <_vfiprintf_r+0x86>
 800a24e:	2a25      	cmp	r2, #37	@ 0x25
 800a250:	d1f9      	bne.n	800a246 <_vfiprintf_r+0x7a>
 800a252:	ebba 0b04 	subs.w	fp, sl, r4
 800a256:	d00b      	beq.n	800a270 <_vfiprintf_r+0xa4>
 800a258:	465b      	mov	r3, fp
 800a25a:	4622      	mov	r2, r4
 800a25c:	4629      	mov	r1, r5
 800a25e:	4630      	mov	r0, r6
 800a260:	f7ff ffa2 	bl	800a1a8 <__sfputs_r>
 800a264:	3001      	adds	r0, #1
 800a266:	f000 80a7 	beq.w	800a3b8 <_vfiprintf_r+0x1ec>
 800a26a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a26c:	445a      	add	r2, fp
 800a26e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a270:	f89a 3000 	ldrb.w	r3, [sl]
 800a274:	2b00      	cmp	r3, #0
 800a276:	f000 809f 	beq.w	800a3b8 <_vfiprintf_r+0x1ec>
 800a27a:	2300      	movs	r3, #0
 800a27c:	f04f 32ff 	mov.w	r2, #4294967295
 800a280:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a284:	f10a 0a01 	add.w	sl, sl, #1
 800a288:	9304      	str	r3, [sp, #16]
 800a28a:	9307      	str	r3, [sp, #28]
 800a28c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a290:	931a      	str	r3, [sp, #104]	@ 0x68
 800a292:	4654      	mov	r4, sl
 800a294:	2205      	movs	r2, #5
 800a296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a29a:	4853      	ldr	r0, [pc, #332]	@ (800a3e8 <_vfiprintf_r+0x21c>)
 800a29c:	f7f5 ffa8 	bl	80001f0 <memchr>
 800a2a0:	9a04      	ldr	r2, [sp, #16]
 800a2a2:	b9d8      	cbnz	r0, 800a2dc <_vfiprintf_r+0x110>
 800a2a4:	06d1      	lsls	r1, r2, #27
 800a2a6:	bf44      	itt	mi
 800a2a8:	2320      	movmi	r3, #32
 800a2aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2ae:	0713      	lsls	r3, r2, #28
 800a2b0:	bf44      	itt	mi
 800a2b2:	232b      	movmi	r3, #43	@ 0x2b
 800a2b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a2bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2be:	d015      	beq.n	800a2ec <_vfiprintf_r+0x120>
 800a2c0:	9a07      	ldr	r2, [sp, #28]
 800a2c2:	4654      	mov	r4, sl
 800a2c4:	2000      	movs	r0, #0
 800a2c6:	f04f 0c0a 	mov.w	ip, #10
 800a2ca:	4621      	mov	r1, r4
 800a2cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2d0:	3b30      	subs	r3, #48	@ 0x30
 800a2d2:	2b09      	cmp	r3, #9
 800a2d4:	d94b      	bls.n	800a36e <_vfiprintf_r+0x1a2>
 800a2d6:	b1b0      	cbz	r0, 800a306 <_vfiprintf_r+0x13a>
 800a2d8:	9207      	str	r2, [sp, #28]
 800a2da:	e014      	b.n	800a306 <_vfiprintf_r+0x13a>
 800a2dc:	eba0 0308 	sub.w	r3, r0, r8
 800a2e0:	fa09 f303 	lsl.w	r3, r9, r3
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	9304      	str	r3, [sp, #16]
 800a2e8:	46a2      	mov	sl, r4
 800a2ea:	e7d2      	b.n	800a292 <_vfiprintf_r+0xc6>
 800a2ec:	9b03      	ldr	r3, [sp, #12]
 800a2ee:	1d19      	adds	r1, r3, #4
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	9103      	str	r1, [sp, #12]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	bfbb      	ittet	lt
 800a2f8:	425b      	neglt	r3, r3
 800a2fa:	f042 0202 	orrlt.w	r2, r2, #2
 800a2fe:	9307      	strge	r3, [sp, #28]
 800a300:	9307      	strlt	r3, [sp, #28]
 800a302:	bfb8      	it	lt
 800a304:	9204      	strlt	r2, [sp, #16]
 800a306:	7823      	ldrb	r3, [r4, #0]
 800a308:	2b2e      	cmp	r3, #46	@ 0x2e
 800a30a:	d10a      	bne.n	800a322 <_vfiprintf_r+0x156>
 800a30c:	7863      	ldrb	r3, [r4, #1]
 800a30e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a310:	d132      	bne.n	800a378 <_vfiprintf_r+0x1ac>
 800a312:	9b03      	ldr	r3, [sp, #12]
 800a314:	1d1a      	adds	r2, r3, #4
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	9203      	str	r2, [sp, #12]
 800a31a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a31e:	3402      	adds	r4, #2
 800a320:	9305      	str	r3, [sp, #20]
 800a322:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a3f8 <_vfiprintf_r+0x22c>
 800a326:	7821      	ldrb	r1, [r4, #0]
 800a328:	2203      	movs	r2, #3
 800a32a:	4650      	mov	r0, sl
 800a32c:	f7f5 ff60 	bl	80001f0 <memchr>
 800a330:	b138      	cbz	r0, 800a342 <_vfiprintf_r+0x176>
 800a332:	9b04      	ldr	r3, [sp, #16]
 800a334:	eba0 000a 	sub.w	r0, r0, sl
 800a338:	2240      	movs	r2, #64	@ 0x40
 800a33a:	4082      	lsls	r2, r0
 800a33c:	4313      	orrs	r3, r2
 800a33e:	3401      	adds	r4, #1
 800a340:	9304      	str	r3, [sp, #16]
 800a342:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a346:	4829      	ldr	r0, [pc, #164]	@ (800a3ec <_vfiprintf_r+0x220>)
 800a348:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a34c:	2206      	movs	r2, #6
 800a34e:	f7f5 ff4f 	bl	80001f0 <memchr>
 800a352:	2800      	cmp	r0, #0
 800a354:	d03f      	beq.n	800a3d6 <_vfiprintf_r+0x20a>
 800a356:	4b26      	ldr	r3, [pc, #152]	@ (800a3f0 <_vfiprintf_r+0x224>)
 800a358:	bb1b      	cbnz	r3, 800a3a2 <_vfiprintf_r+0x1d6>
 800a35a:	9b03      	ldr	r3, [sp, #12]
 800a35c:	3307      	adds	r3, #7
 800a35e:	f023 0307 	bic.w	r3, r3, #7
 800a362:	3308      	adds	r3, #8
 800a364:	9303      	str	r3, [sp, #12]
 800a366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a368:	443b      	add	r3, r7
 800a36a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a36c:	e76a      	b.n	800a244 <_vfiprintf_r+0x78>
 800a36e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a372:	460c      	mov	r4, r1
 800a374:	2001      	movs	r0, #1
 800a376:	e7a8      	b.n	800a2ca <_vfiprintf_r+0xfe>
 800a378:	2300      	movs	r3, #0
 800a37a:	3401      	adds	r4, #1
 800a37c:	9305      	str	r3, [sp, #20]
 800a37e:	4619      	mov	r1, r3
 800a380:	f04f 0c0a 	mov.w	ip, #10
 800a384:	4620      	mov	r0, r4
 800a386:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a38a:	3a30      	subs	r2, #48	@ 0x30
 800a38c:	2a09      	cmp	r2, #9
 800a38e:	d903      	bls.n	800a398 <_vfiprintf_r+0x1cc>
 800a390:	2b00      	cmp	r3, #0
 800a392:	d0c6      	beq.n	800a322 <_vfiprintf_r+0x156>
 800a394:	9105      	str	r1, [sp, #20]
 800a396:	e7c4      	b.n	800a322 <_vfiprintf_r+0x156>
 800a398:	fb0c 2101 	mla	r1, ip, r1, r2
 800a39c:	4604      	mov	r4, r0
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e7f0      	b.n	800a384 <_vfiprintf_r+0x1b8>
 800a3a2:	ab03      	add	r3, sp, #12
 800a3a4:	9300      	str	r3, [sp, #0]
 800a3a6:	462a      	mov	r2, r5
 800a3a8:	4b12      	ldr	r3, [pc, #72]	@ (800a3f4 <_vfiprintf_r+0x228>)
 800a3aa:	a904      	add	r1, sp, #16
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	f7fd fc67 	bl	8007c80 <_printf_float>
 800a3b2:	4607      	mov	r7, r0
 800a3b4:	1c78      	adds	r0, r7, #1
 800a3b6:	d1d6      	bne.n	800a366 <_vfiprintf_r+0x19a>
 800a3b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3ba:	07d9      	lsls	r1, r3, #31
 800a3bc:	d405      	bmi.n	800a3ca <_vfiprintf_r+0x1fe>
 800a3be:	89ab      	ldrh	r3, [r5, #12]
 800a3c0:	059a      	lsls	r2, r3, #22
 800a3c2:	d402      	bmi.n	800a3ca <_vfiprintf_r+0x1fe>
 800a3c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3c6:	f7fe fa49 	bl	800885c <__retarget_lock_release_recursive>
 800a3ca:	89ab      	ldrh	r3, [r5, #12]
 800a3cc:	065b      	lsls	r3, r3, #25
 800a3ce:	f53f af1f 	bmi.w	800a210 <_vfiprintf_r+0x44>
 800a3d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3d4:	e71e      	b.n	800a214 <_vfiprintf_r+0x48>
 800a3d6:	ab03      	add	r3, sp, #12
 800a3d8:	9300      	str	r3, [sp, #0]
 800a3da:	462a      	mov	r2, r5
 800a3dc:	4b05      	ldr	r3, [pc, #20]	@ (800a3f4 <_vfiprintf_r+0x228>)
 800a3de:	a904      	add	r1, sp, #16
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	f7fd fee5 	bl	80081b0 <_printf_i>
 800a3e6:	e7e4      	b.n	800a3b2 <_vfiprintf_r+0x1e6>
 800a3e8:	0801c64c 	.word	0x0801c64c
 800a3ec:	0801c656 	.word	0x0801c656
 800a3f0:	08007c81 	.word	0x08007c81
 800a3f4:	0800a1a9 	.word	0x0800a1a9
 800a3f8:	0801c652 	.word	0x0801c652

0800a3fc <__swbuf_r>:
 800a3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3fe:	460e      	mov	r6, r1
 800a400:	4614      	mov	r4, r2
 800a402:	4605      	mov	r5, r0
 800a404:	b118      	cbz	r0, 800a40e <__swbuf_r+0x12>
 800a406:	6a03      	ldr	r3, [r0, #32]
 800a408:	b90b      	cbnz	r3, 800a40e <__swbuf_r+0x12>
 800a40a:	f7fe f87b 	bl	8008504 <__sinit>
 800a40e:	69a3      	ldr	r3, [r4, #24]
 800a410:	60a3      	str	r3, [r4, #8]
 800a412:	89a3      	ldrh	r3, [r4, #12]
 800a414:	071a      	lsls	r2, r3, #28
 800a416:	d501      	bpl.n	800a41c <__swbuf_r+0x20>
 800a418:	6923      	ldr	r3, [r4, #16]
 800a41a:	b943      	cbnz	r3, 800a42e <__swbuf_r+0x32>
 800a41c:	4621      	mov	r1, r4
 800a41e:	4628      	mov	r0, r5
 800a420:	f000 f82a 	bl	800a478 <__swsetup_r>
 800a424:	b118      	cbz	r0, 800a42e <__swbuf_r+0x32>
 800a426:	f04f 37ff 	mov.w	r7, #4294967295
 800a42a:	4638      	mov	r0, r7
 800a42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a42e:	6823      	ldr	r3, [r4, #0]
 800a430:	6922      	ldr	r2, [r4, #16]
 800a432:	1a98      	subs	r0, r3, r2
 800a434:	6963      	ldr	r3, [r4, #20]
 800a436:	b2f6      	uxtb	r6, r6
 800a438:	4283      	cmp	r3, r0
 800a43a:	4637      	mov	r7, r6
 800a43c:	dc05      	bgt.n	800a44a <__swbuf_r+0x4e>
 800a43e:	4621      	mov	r1, r4
 800a440:	4628      	mov	r0, r5
 800a442:	f7ff fd73 	bl	8009f2c <_fflush_r>
 800a446:	2800      	cmp	r0, #0
 800a448:	d1ed      	bne.n	800a426 <__swbuf_r+0x2a>
 800a44a:	68a3      	ldr	r3, [r4, #8]
 800a44c:	3b01      	subs	r3, #1
 800a44e:	60a3      	str	r3, [r4, #8]
 800a450:	6823      	ldr	r3, [r4, #0]
 800a452:	1c5a      	adds	r2, r3, #1
 800a454:	6022      	str	r2, [r4, #0]
 800a456:	701e      	strb	r6, [r3, #0]
 800a458:	6962      	ldr	r2, [r4, #20]
 800a45a:	1c43      	adds	r3, r0, #1
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d004      	beq.n	800a46a <__swbuf_r+0x6e>
 800a460:	89a3      	ldrh	r3, [r4, #12]
 800a462:	07db      	lsls	r3, r3, #31
 800a464:	d5e1      	bpl.n	800a42a <__swbuf_r+0x2e>
 800a466:	2e0a      	cmp	r6, #10
 800a468:	d1df      	bne.n	800a42a <__swbuf_r+0x2e>
 800a46a:	4621      	mov	r1, r4
 800a46c:	4628      	mov	r0, r5
 800a46e:	f7ff fd5d 	bl	8009f2c <_fflush_r>
 800a472:	2800      	cmp	r0, #0
 800a474:	d0d9      	beq.n	800a42a <__swbuf_r+0x2e>
 800a476:	e7d6      	b.n	800a426 <__swbuf_r+0x2a>

0800a478 <__swsetup_r>:
 800a478:	b538      	push	{r3, r4, r5, lr}
 800a47a:	4b29      	ldr	r3, [pc, #164]	@ (800a520 <__swsetup_r+0xa8>)
 800a47c:	4605      	mov	r5, r0
 800a47e:	6818      	ldr	r0, [r3, #0]
 800a480:	460c      	mov	r4, r1
 800a482:	b118      	cbz	r0, 800a48c <__swsetup_r+0x14>
 800a484:	6a03      	ldr	r3, [r0, #32]
 800a486:	b90b      	cbnz	r3, 800a48c <__swsetup_r+0x14>
 800a488:	f7fe f83c 	bl	8008504 <__sinit>
 800a48c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a490:	0719      	lsls	r1, r3, #28
 800a492:	d422      	bmi.n	800a4da <__swsetup_r+0x62>
 800a494:	06da      	lsls	r2, r3, #27
 800a496:	d407      	bmi.n	800a4a8 <__swsetup_r+0x30>
 800a498:	2209      	movs	r2, #9
 800a49a:	602a      	str	r2, [r5, #0]
 800a49c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4a0:	81a3      	strh	r3, [r4, #12]
 800a4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a6:	e033      	b.n	800a510 <__swsetup_r+0x98>
 800a4a8:	0758      	lsls	r0, r3, #29
 800a4aa:	d512      	bpl.n	800a4d2 <__swsetup_r+0x5a>
 800a4ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4ae:	b141      	cbz	r1, 800a4c2 <__swsetup_r+0x4a>
 800a4b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4b4:	4299      	cmp	r1, r3
 800a4b6:	d002      	beq.n	800a4be <__swsetup_r+0x46>
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	f7ff f839 	bl	8009530 <_free_r>
 800a4be:	2300      	movs	r3, #0
 800a4c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4c2:	89a3      	ldrh	r3, [r4, #12]
 800a4c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a4c8:	81a3      	strh	r3, [r4, #12]
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	6063      	str	r3, [r4, #4]
 800a4ce:	6923      	ldr	r3, [r4, #16]
 800a4d0:	6023      	str	r3, [r4, #0]
 800a4d2:	89a3      	ldrh	r3, [r4, #12]
 800a4d4:	f043 0308 	orr.w	r3, r3, #8
 800a4d8:	81a3      	strh	r3, [r4, #12]
 800a4da:	6923      	ldr	r3, [r4, #16]
 800a4dc:	b94b      	cbnz	r3, 800a4f2 <__swsetup_r+0x7a>
 800a4de:	89a3      	ldrh	r3, [r4, #12]
 800a4e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a4e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4e8:	d003      	beq.n	800a4f2 <__swsetup_r+0x7a>
 800a4ea:	4621      	mov	r1, r4
 800a4ec:	4628      	mov	r0, r5
 800a4ee:	f7ff fd6b 	bl	8009fc8 <__smakebuf_r>
 800a4f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4f6:	f013 0201 	ands.w	r2, r3, #1
 800a4fa:	d00a      	beq.n	800a512 <__swsetup_r+0x9a>
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	60a2      	str	r2, [r4, #8]
 800a500:	6962      	ldr	r2, [r4, #20]
 800a502:	4252      	negs	r2, r2
 800a504:	61a2      	str	r2, [r4, #24]
 800a506:	6922      	ldr	r2, [r4, #16]
 800a508:	b942      	cbnz	r2, 800a51c <__swsetup_r+0xa4>
 800a50a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a50e:	d1c5      	bne.n	800a49c <__swsetup_r+0x24>
 800a510:	bd38      	pop	{r3, r4, r5, pc}
 800a512:	0799      	lsls	r1, r3, #30
 800a514:	bf58      	it	pl
 800a516:	6962      	ldrpl	r2, [r4, #20]
 800a518:	60a2      	str	r2, [r4, #8]
 800a51a:	e7f4      	b.n	800a506 <__swsetup_r+0x8e>
 800a51c:	2000      	movs	r0, #0
 800a51e:	e7f7      	b.n	800a510 <__swsetup_r+0x98>
 800a520:	20002c18 	.word	0x20002c18

0800a524 <_raise_r>:
 800a524:	291f      	cmp	r1, #31
 800a526:	b538      	push	{r3, r4, r5, lr}
 800a528:	4605      	mov	r5, r0
 800a52a:	460c      	mov	r4, r1
 800a52c:	d904      	bls.n	800a538 <_raise_r+0x14>
 800a52e:	2316      	movs	r3, #22
 800a530:	6003      	str	r3, [r0, #0]
 800a532:	f04f 30ff 	mov.w	r0, #4294967295
 800a536:	bd38      	pop	{r3, r4, r5, pc}
 800a538:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a53a:	b112      	cbz	r2, 800a542 <_raise_r+0x1e>
 800a53c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a540:	b94b      	cbnz	r3, 800a556 <_raise_r+0x32>
 800a542:	4628      	mov	r0, r5
 800a544:	f000 f830 	bl	800a5a8 <_getpid_r>
 800a548:	4622      	mov	r2, r4
 800a54a:	4601      	mov	r1, r0
 800a54c:	4628      	mov	r0, r5
 800a54e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a552:	f000 b817 	b.w	800a584 <_kill_r>
 800a556:	2b01      	cmp	r3, #1
 800a558:	d00a      	beq.n	800a570 <_raise_r+0x4c>
 800a55a:	1c59      	adds	r1, r3, #1
 800a55c:	d103      	bne.n	800a566 <_raise_r+0x42>
 800a55e:	2316      	movs	r3, #22
 800a560:	6003      	str	r3, [r0, #0]
 800a562:	2001      	movs	r0, #1
 800a564:	e7e7      	b.n	800a536 <_raise_r+0x12>
 800a566:	2100      	movs	r1, #0
 800a568:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a56c:	4620      	mov	r0, r4
 800a56e:	4798      	blx	r3
 800a570:	2000      	movs	r0, #0
 800a572:	e7e0      	b.n	800a536 <_raise_r+0x12>

0800a574 <raise>:
 800a574:	4b02      	ldr	r3, [pc, #8]	@ (800a580 <raise+0xc>)
 800a576:	4601      	mov	r1, r0
 800a578:	6818      	ldr	r0, [r3, #0]
 800a57a:	f7ff bfd3 	b.w	800a524 <_raise_r>
 800a57e:	bf00      	nop
 800a580:	20002c18 	.word	0x20002c18

0800a584 <_kill_r>:
 800a584:	b538      	push	{r3, r4, r5, lr}
 800a586:	4d07      	ldr	r5, [pc, #28]	@ (800a5a4 <_kill_r+0x20>)
 800a588:	2300      	movs	r3, #0
 800a58a:	4604      	mov	r4, r0
 800a58c:	4608      	mov	r0, r1
 800a58e:	4611      	mov	r1, r2
 800a590:	602b      	str	r3, [r5, #0]
 800a592:	f000 f813 	bl	800a5bc <_kill>
 800a596:	1c43      	adds	r3, r0, #1
 800a598:	d102      	bne.n	800a5a0 <_kill_r+0x1c>
 800a59a:	682b      	ldr	r3, [r5, #0]
 800a59c:	b103      	cbz	r3, 800a5a0 <_kill_r+0x1c>
 800a59e:	6023      	str	r3, [r4, #0]
 800a5a0:	bd38      	pop	{r3, r4, r5, pc}
 800a5a2:	bf00      	nop
 800a5a4:	20004ac8 	.word	0x20004ac8

0800a5a8 <_getpid_r>:
 800a5a8:	f000 b800 	b.w	800a5ac <_getpid>

0800a5ac <_getpid>:
 800a5ac:	4b02      	ldr	r3, [pc, #8]	@ (800a5b8 <_getpid+0xc>)
 800a5ae:	2258      	movs	r2, #88	@ 0x58
 800a5b0:	601a      	str	r2, [r3, #0]
 800a5b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b6:	4770      	bx	lr
 800a5b8:	20004ac8 	.word	0x20004ac8

0800a5bc <_kill>:
 800a5bc:	4b02      	ldr	r3, [pc, #8]	@ (800a5c8 <_kill+0xc>)
 800a5be:	2258      	movs	r2, #88	@ 0x58
 800a5c0:	601a      	str	r2, [r3, #0]
 800a5c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c6:	4770      	bx	lr
 800a5c8:	20004ac8 	.word	0x20004ac8

0800a5cc <_exit>:
 800a5cc:	e7fe      	b.n	800a5cc <_exit>
	...

0800a5d0 <_init>:
 800a5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d2:	bf00      	nop
 800a5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5d6:	bc08      	pop	{r3}
 800a5d8:	469e      	mov	lr, r3
 800a5da:	4770      	bx	lr

0800a5dc <_fini>:
 800a5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5de:	bf00      	nop
 800a5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5e2:	bc08      	pop	{r3}
 800a5e4:	469e      	mov	lr, r3
 800a5e6:	4770      	bx	lr
